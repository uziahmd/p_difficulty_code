{
    "start": 1757842764.2310536,
    "end": 1757842773.806698,
    "start-formatted": "2025-09-14 18:39 KST",
    "end-formatted": "2025-09-14 18:39 KST",
    "gpu": 2,
    "pid": 13,
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\ndef is_snowflake(n):\n    if n == 1:\n        return False\n    # Check for possible k > 1 such that n = 1 + k + k * (k - 1) * m for some m >= 1\n    # Which simplifies to n = 1 + k + k*(k-1)*m\n    # So n - 1 = k*(1 + (k-1)*m)\n    # Try all possible k from 2 to sqrt(n)\n    max_k = int(math.isqrt(n)) + 2\n    for k in range(2, max_k):\n        if (n - 1) % k == 0:\n            remainder = (n - 1) // k\n            # remainder should be 1 + (k-1)*m => remainder - 1 must be divisible by (k-1)\n            if (remainder - 1) % (k - 1) == 0:\n                return True\n    return False\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(data[i])\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    print(\"\\n\".join(results))\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef is_snowflake(n):\n    if n == 1:\n        return False\n    # Check for possible k > 1 such that n = 1 + k + k * (k - 1) * m for some m >= 1\n    # Which simplifies to n = 1 + k + k*(k-1)*m\n    # So n - 1 = k*(1 + (k-1)*m)\n    # Try all possible k from 2 to sqrt(n)\n    max_k = int(math.isqrt(n)) + 2\n    for k in range(2, max_k):\n        if (n - 1) % k == 0:\n            remainder = (n - 1) // k\n            # remainder should be 1 + (k-1)*m => remainder - 1 must be divisible by (k-1)\n            if (remainder - 1) % (k - 1) == 0:\n                return True\n    return False\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(data[i])\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    print(\"\\n\".join(results))\n\nsolve()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 581,
        "completion_token_count": 305,
        "thoughts_token_count": 0
    }
}