{
    "start": 1758099741.671649,
    "end": 1758099758.171051,
    "start-formatted": "2025-09-17 18:02 KST",
    "end-formatted": "2025-09-17 18:02 KST",
    "gpu": 2,
    "pid": 20,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Multiset of Strings\n\nYou are given three integers $$$n$$$, $$$k$$$ and $$$f$$$.Consider all binary strings (i. e. all strings consisting of characters $$$0$$$ and/or $$$1$$$) of length from $$$1$$$ to $$$n$$$. For every such string $$$s$$$, you need to choose an integer $$$c_s$$$ from $$$0$$$ to $$$k$$$.A multiset of binary strings of length exactly $$$n$$$ is considered beautiful if for every binary string $$$s$$$ with length from $$$1$$$ to $$$n$$$, the number of strings in the multiset such that $$$s$$$ is their prefix is not exceeding $$$c_s$$$.For example, let $$$n = 2$$$, $$$c_{0} = 3$$$, $$$c_{00} = 1$$$, $$$c_{01} = 2$$$, $$$c_{1} = 1$$$, $$$c_{10} = 2$$$, and $$$c_{11} = 3$$$. The multiset of strings $$$\\{11, 01, 00, 01\\}$$$ is beautiful, since:  for the string $$$0$$$, there are $$$3$$$ strings in the multiset such that $$$0$$$ is their prefix, and $$$3 \\le c_0$$$;  for the string $$$00$$$, there is one string in the multiset such that $$$00$$$ is its prefix, and $$$1 \\le c_{00}$$$;  for the string $$$01$$$, there are $$$2$$$ strings in the multiset such that $$$01$$$ is their prefix, and $$$2 \\le c_{01}$$$;  for the string $$$1$$$, there is one string in the multiset such that $$$1$$$ is its prefix, and $$$1 \\le c_1$$$;  for the string $$$10$$$, there are $$$0$$$ strings in the multiset such that $$$10$$$ is their prefix, and $$$0 \\le c_{10}$$$;  for the string $$$11$$$, there is one string in the multiset such that $$$11$$$ is its prefix, and $$$1 \\le c_{11}$$$. Now, for the problem itself. You have to calculate the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$.\n\n## Input\nThe only line of input contains three integers $$$n$$$, $$$k$$$ and $$$f$$$ ($$$1 \\le n \\le 15$$$; $$$1 \\le k, f \\le 2 \\cdot 10^5$$$).\n\n## Output\nPrint one integer — the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$. Since it can be huge, print it modulo $$$998244353$$$.\n\n## Example\n### Input\n['1 42 2', '2 37 13', '4 1252 325', '6 153 23699', '15 200000 198756']\n\n### Output\n['3', '36871576', '861735572', '0', '612404746']\n\n## Note\nIn the first example, the three ways to choose the integers $$$c_s$$$ are:  $$$c_0 = 0$$$, $$$c_1 = 2$$$, then the maximum beautiful multiset is $$$\\{1, 1\\}$$$;  $$$c_0 = 1$$$, $$$c_1 = 1$$$, then the maximum beautiful multiset is $$$\\{0, 1\\}$$$;  $$$c_0 = 2$$$, $$$c_1 = 0$$$, then the maximum beautiful multiset is $$$\\{0, 0\\}$$$. \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    n = int(data[0])\n    k = int(data[1])\n    f = int(data[2])\n\n    # Precompute factorial and inverse factorial for combinations\n    max_n = 2 * n\n    fact = [1] * (max_n + 1)\n    inv_fact = [1] * (max_n + 1)\n\n    for i in range(1, max_n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\n    for i in range(max_n - 1, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(a, b):\n        if a < 0 or b < 0 or a < b:\n            return 0\n        return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n\n    # For each string s of length 1 to n, we choose c_s from 0 to k\n    # We need to count the number of ways such that the maximum size of a beautiful multiset is exactly f\n\n    # Let dp[i][j] be the number of ways to assign c_s for all strings of length <= i such that the maximum size of a beautiful multiset is exactly j\n    # We will use dynamic programming with memoization\n\n    # Initialize dp[0][0] = 1\n    dp = [defaultdict(int) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for length in range(1, n + 1):\n        new_dp = defaultdict(int)\n        for prev_count in dp[length - 1]:\n            for c in range(0, k + 1):\n                # For each string of length 'length', we can choose c_s = c\n                # The constraint is that for all prefixes of this string, the count must not exceed their respective c_s\n                # The maximum size of a beautiful multiset is the minimum over all constraints\n                # So we need to compute the number of ways where the minimal constraint is exactly f\n                # But since we are building up, we track the current max possible size of a beautiful multiset\n\n                # The maximum size of a beautiful multiset for strings of length <= length is min(prev_max, c)\n                # We update accordingly\n                new_max = min(prev_count, c)\n                new_dp[new_max] = (new_dp[new_max] + dp[length - 1][prev_count]) % MOD\n\n        dp[length] = new_dp\n\n    # The answer is the number of ways to assign c_s for all strings of length <= n such that the maximum size of a beautiful multiset is exactly f\n    print(dp[n].get(f, 0))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    n = int(data[0])\n    k = int(data[1])\n    f = int(data[2])\n\n    # Precompute factorial and inverse factorial for combinations\n    max_n = 2 * n\n    fact = [1] * (max_n + 1)\n    inv_fact = [1] * (max_n + 1)\n\n    for i in range(1, max_n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\n    for i in range(max_n - 1, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(a, b):\n        if a < 0 or b < 0 or a < b:\n            return 0\n        return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n\n    # For each string s of length 1 to n, we choose c_s from 0 to k\n    # We need to count the number of ways such that the maximum size of a beautiful multiset is exactly f\n\n    # Let dp[i][j] be the number of ways to assign c_s for all strings of length <= i such that the maximum size of a beautiful multiset is exactly j\n    # We will use dynamic programming with memoization\n\n    # Initialize dp[0][0] = 1\n    dp = [defaultdict(int) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for length in range(1, n + 1):\n        new_dp = defaultdict(int)\n        for prev_count in dp[length - 1]:\n            for c in range(0, k + 1):\n                # For each string of length 'length', we can choose c_s = c\n                # The constraint is that for all prefixes of this string, the count must not exceed their respective c_s\n                # The maximum size of a beautiful multiset is the minimum over all constraints\n                # So we need to compute the number of ways where the minimal constraint is exactly f\n                # But since we are building up, we track the current max possible size of a beautiful multiset\n\n                # The maximum size of a beautiful multiset for strings of length <= length is min(prev_max, c)\n                # We update accordingly\n                new_max = min(prev_count, c)\n                new_dp[new_max] = (new_dp[new_max] + dp[length - 1][prev_count]) % MOD\n\n        dp[length] = new_dp\n\n    # The answer is the number of ways to assign c_s for all strings of length <= n such that the maximum size of a beautiful multiset is exactly f\n    print(dp[n].get(f, 0))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 1007,
        "completion_token_count": 674,
        "thoughts_token_count": 0
    }
}