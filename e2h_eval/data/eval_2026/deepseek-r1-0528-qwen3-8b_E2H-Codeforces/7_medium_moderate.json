{
    "start": 1758089434.977832,
    "end": 1758092057.6600697,
    "start-formatted": "2025-09-17 15:10 KST",
    "end-formatted": "2025-09-17 15:54 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\n Okay, let's analyze the problem:\n\nWe are constructing a snowflake as follows:\n- Start with 1 vertex (step 0).\n- Then, we do at least one step. In each step, every vertex that has degree 1 (i.e., connected to only one other vertex) will be expanded by adding k new vertices and connecting them.\n\nBut note: the expansion is done in layers. Let's denote:\n  Layer 0: 1 vertex.\n  Layer 1: k vertices (each connected to the center)\n  Layer 2: k*(k-1) vertices? Actually, wait: in layer 1, each of the k vertices has one edge (to the center). So each of these k vertices will then connect to k new ones. But note: when we add the k new ones for each leaf, we are effectively adding k-1 new edges (because one edge already exists from the center to the leaf). However, the process description says: \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices.\"\n\nSo after the first expansion (layer 1), we have 1 + k vertices.\n\nThen, in the next expansion (layer 2): the leaves from layer 1 (which are k in number) each get k new vertices. So we add k * k = k^2 vertices. Now total vertices = 1 + k + k^2.\n\nBut wait, what about the center? The center now has degree k, so it doesn't expand again. Only the leaves from the previous layer expand.\n\nActually, the rule: \"Each vertex that is connected to only one other vertex\" will expand. After step 1, the center has k edges (so degree k, not 1) and the others have one edge (from the center). Then step 2: the k leaves each become connected to k new ones, so they now have two edges (one to the center and k to new ones) — no, wait: the rule says that we connect the existing vertex (the leaf) to k new vertices. So the leaf was connected to the center (one edge) and then we add k edges to new vertices. Then the leaf becomes connected to 1 (old) + k (new) = k+1 edges. But then in the next step, this leaf (now having k+1 edges) won't expand because it has more than one connection? \n\nWait, let me read the problem again: \n  \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1).\"\n  \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nSo the process is:\n  Step 0: 1 vertex (center)\n  Step 1: center expands: we add k vertices. Now the center has degree k, and the k new vertices each have degree 1 (connected only to the center). Then we must do at least one step (so step 1 is done).\n  Then, if we do step 2: each of the k leaves (each has degree 1) will expand. Each leaf adds k new vertices. So we add k*k = k^2 vertices. Now the leaves from step 1 now have degree 1 (from center) + k (to their children) = k+1, so they don't expand again.\n\nBut then, if we do step 3: do we consider the leaves from step 2? They now have degree 1 (because they were added by their parent in step 2 and connected only to that parent)? Actually, when we added k new vertices at step 2 for a leaf from step 1, each of those new vertices is connected only to their parent (which is one of the step1 leaves). So they have degree 1 and will expand.\n\nTherefore, the snowflake grows in layers (or iterations). Let m be the number of expansion steps (at least 1).\n\nThe total number of vertices is:\n  n = 1 + k + k^2 + k^3 + ... + k^m\n\nBut note: the problem states that the expansion step must be done at least once, so m>=1.\n\nHowever, note that the example for k=4: the smallest snowflake (with m=1) would be 1 + 4 = 5, but the example figure might show the first expansion (m=1) and then maybe they did more? Actually, the example says \"the smallest possible snowflake for k=4\", which is probably with m=1, but wait the problem says \"This step should be done at least once\", meaning at least one expansion beyond the initial center? Actually, the initial expansion is the first step.\n\nBut note: the initial step (step 1) is the expansion of the center. Then the problem says \"This step should be done at least once\", meaning the entire process (including the first expansion) is done at least once. Then we can do more expansions (steps) if we want.\n\nBut the problem says: \"Help Rudolf check whether a snowflake with n vertices can exist.\" for any k>1 and any number of expansion steps (at least one step).\n\nSo we have:\n  n = 1 + k + k^2 + ... + k^m   for some integer m>=1 and integer k>1.\n\nBut note: the expansion steps are sequential and the entire graph is built by a fixed k (same k for all expansions). Also, k must be an integer greater than 1.\n\nAlternatively, note that the expansion steps form a geometric series.\n\nWe can write:\n  n = 1 + k * (k^0 + k^1 + ... + k^(m-1)) \n    = 1 + k * ( (k^m - 1) / (k-1) )\n\nBut wait, let's break down the layers:\n\n  Layer0: 1 node\n  Layer1: k nodes\n  Layer2: k^2 nodes (because each of the k nodes in layer1 expands by k, so k*k = k^2)\n  Layer3: k^3 nodes\n\nTotal nodes = 1 + k + k^2 + ... + k^m\n\nBut note: the expansion step is applied to every leaf from the previous layer. And the leaves from layer i are exactly k^i nodes. Then the next layer adds k^(i+1) nodes.\n\nBut the formula for the sum of a geometric series is:\n\n  S = (k^(m+1) - 1) / (k-1)\n\nBut wait, our series is from exponent 0 to m (if we consider the center as layer0 and then layers 1 to m). Then the total is:\n\n  n = (k^(m+1) - 1) / (k-1)\n\nBut note: the initial step (m=1) gives (k^2 - 1)/(k-1) = k+1, but wait, we have 1 (layer0) + k (layer1) = 1+k, and indeed (k^2-1)/(k-1) = (k-1)(k+1)/(k-1)=k+1.\n\nBut wait, actually the series we have is:\n\n  n = 1 + k + k^2 + ... + k^m = (k^(m+1)-1)/(k-1)\n\nYes, that's correct.\n\nSo the problem reduces to: does there exist an integer k>1 and an integer m>=1 such that:\n\n  n = (k^(m+1) - 1) / (k-1)\n\nBut note: n can be as large as 10^18.\n\nWe cannot iterate over k from 2 to ... (since k can be very large) and then over m.\n\nAlternative approach:\n\nNote that the expansion must be done at least once (m>=1). Therefore, we must have:\n\n  n >= (k^2-1)/(k-1) = k+1   [for m=1]\n\nBut also, for fixed k, the total number of vertices is a function of m. We can fix m (the number of expansion steps, which is at least 1) and then solve for k.\n\nBut note: the equation is:\n\n  n = 1 + k + k^2 + ... + k^m\n\nWhich is equivalent to:\n\n  n = (k^(m+1) - 1) / (k-1)\n\nRearranged:\n\n  n*(k-1) = k^(m+1) - 1\n\nNow, note that k must be an integer greater than 1, and m>=1.\n\nWe can consider small m (like m=1, m=2, m=3, ...) and then solve for k.\n\nBut note: m can be large? However, observe that the growth is exponential. Since n <= 10^18, we can bound m.\n\nFor a fixed base k>=2, the number of terms is m+1 (from exponent 0 to m). The maximum m is such that k^m <= n*(k-1)+1.\n\nBut note: k is at least 2. Then the geometric series with m+1 terms (starting at 1 and ratio k) is at most (k^(m+1)-1)/(k-1) <= k^(m+1)/(k-1). We require k^(m+1) <= n*(k-1)+1.\n\nAlternatively, we can fix the depth m (number of expansion steps) and then see if there exists an integer k>1 satisfying the equation.\n\nBut note: the problem does not require us to find the parameters, just to say if there exists ANY k>1 and m>=1 such that n equals the geometric series.\n\nHow to approach?\n\nLet's consider the structure:\n\nCase 1: m=1 -> n = 1 + k = k+1. Then k = n-1. But k must be >1, so n-1>1 -> n>=3. Also, k must be integer, so n-1 must be integer (which it is) and n>=3. But wait, if n=2, then k=1 -> invalid. So for n>=3, we have a solution with m=1 and k=n-1.\n\nBut wait, is that always valid? The problem says that the expansion step must be done at least once (m>=1). So m=1 is allowed.\n\nBut wait, the problem says: \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1).\" Then the step must be done at least once. So m=1 is the minimum.\n\nSo for n>=3, we can always use m=1 and k = n-1 (if n-1>1). However, what if n=2? then k=1, which is not allowed. So n=2 -> NO.\n\nBut wait, let me check with the example: \n  Input: \n      9\n      1\n      2\n      3\n      6\n      13\n      15\n      255\n      10101\n      1000000000000000000\n\n  Expected Output:\n      NO\n      NO\n      NO\n      NO\n      YES\n      YES\n      YES\n      YES\n      NO\n\nSo according to this, n=3: k=2 (which is >1) -> YES. But our reasoning above for m=1: n=3 -> k=2, which is valid. Then why is n=3 output as 'NO'? \n\nWait, the example output for n=3 is 'NO'. But according to our reasoning, n=3 should be YES.\n\nWait, let me re-read the example input and output:\n\nInput:\n  ['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\nOutput:\n  ['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nSo the third test case is n=3 -> output 'NO'\n\nBut wait, that contradicts our reasoning. Why?\n\nLet me check the definition again:\n\n  The initial vertex is connected by edges to k new vertices (k>1). Then, each vertex that is connected to only one other vertex is connected by edges to k more new vertices (at least once).\n\nIn the case n=3:\n\n  We start with 1 vertex (center). Then we must do at least one expansion step.\n\n  Step 1: center expands -> we add k new vertices. Then the total vertices is 1+k. We require 1+k=3 -> k=2.\n\n  Then, after step 1, we have the center and two leaves. Now, we must do at least one step (meaning we must do the expansion step at least once). So we have to do step 1 (already did) and then we must do step 2? \n\nWait, the problem says: \"This step should be done at least once.\" meaning the entire process (the expansion step) is done at least once. But note: the initial expansion (step 1) is the first expansion. Then the problem says that we must do at least one expansion (so step1 is the minimum). However, after step1, the center now has degree 2 (which is more than 1) so it doesn't expand again. The leaves (each has one edge) so they are supposed to expand? \n\nWait, the problem says: \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nBut note: the initial expansion (step1) is already done. The problem requires that the entire process (which includes expanding leaves) is done at least once. However, the problem does not specify whether the initial expansion counts as the \"step\" or if the entire process (all layers) must be done at least once.\n\nWait, reading the problem statement carefully:\n\n  Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1). \n  Then, each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\n\nSo the first expansion (of the center) is the first step. Then the second part (expanding the leaves) is the next step, and the problem says \"This step\" (meaning the second part) should be done at least once. Or does the entire process (both steps) must be done at least once?\n\nBut the example says: \"The smallest possible snowflake for k=4\" — that figure probably shows the center and the first ring (k=4) and then the second ring? Or not?\n\nWait, the example input has n=13 and n=15 as YES. Let's check:\n\n  For n=13: \n    If m=1: 1+k = 13 -> k=12 -> valid (k>1) -> then we have only one expansion (the center) and then we stop because the problem requires at least one expansion (but note: the problem says \"This step should be done at least once\", and the step we are referring to is the expansion of leaves? Or the entire process?\n\nActually, the problem says the process has two parts: the initial expansion (center) and then the expansion of leaves. But the problem statement does not explicitly say that the center expansion is considered the first step and the leaf expansion the second, and that both are required? \n\nLet me parse the problem statement:\n\n  Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1). \n  Then, each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\n\nSo the entire process (both the center expansion and the leaf expansion) must be done at least once? \n\nWait, no. The first sentence describes the first expansion (center). Then the second sentence describes the second expansion (leaves) and says that the second expansion must be done at least once.\n\nBut then the example says the smallest snowflake for k=4. What is the smallest? \n\n  Center: 1\n  First expansion (center): 4 new -> total 5\n  Then, the leaves (4 leaves) each expand: 4*4 = 16 new -> total 5+16=21.\n\nBut wait, the problem says \"This step should be done at least once\", meaning the second expansion must be done at least once. So the smallest snowflake for k=4 would be with two expansions: center and leaves. Then the smallest is 1+4+16=21.\n\nBut the example input includes n=6,13,15, etc.\n\nWait, the example output for n=6 is 'NO'. Let's see:\n\n  If we use m=1 (only center expansion): then n = 1+k. Then k=5, so n=6. But then we haven't done the leaf expansion (which is required at least once). So that is invalid.\n\nBut wait, the problem says \"This step\" (the expansion of leaves) must be done at least once. So the center expansion is mandatory (because k>1) but the leaf expansion must be done at least once. Therefore, we must have at least two layers: center and then the leaves.\n\nBut wait, the initial expansion (center) is the first step, and then the leaf expansion (second step) is the step that must be done at least once. So the entire process requires at least two expansions? \n\nActually, the problem says:\n\n  \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1).\"\n\nThis is the first expansion.\n\nThen:\n\n  \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nThis is the second expansion, and it must be done at least once.\n\nSo the minimal snowflake must have at least two expansions: the center expansion and then the leaf expansion.\n\nTherefore, the minimal number of vertices is:\n\n  Layer0: 1\n  Layer1: k (from center expansion)\n  Layer2: k * k (from leaf expansion)  [each of the k leaves from layer1 expands by k]\n\nTotal: 1 + k + k^2.\n\nAnd note: k>1.\n\nSo the condition is: n must be representable as 1 + k + k^2 (for some k>1) OR with more layers?\n\nActually, we can have more than two expansions. The general formula is:\n\n  n = 1 + k + k^2 + ... + k^m   for m>=2 (since we need at least two expansions: the center and one leaf expansion, so m>=2? Actually, the center expansion is the first expansion (which gives layer1) and the leaf expansion is the second expansion (which gives layer2). Then we can have more.\n\nBut wait, the problem says:\n\n  Step 1: center expands (we have layer0 and layer1).\n  Then, we must do the leaf expansion (at least once) -> that gives layer2.\n\nSo the minimal expansion count is 2 (two expansions). Then the minimal representation is:\n\n  n = 1 + k + k^2, for k>1.\n\nBut note: the problem does not say we cannot do more than two expansions. We can do m>=2 (m being the total number of expansions, then the layers go from 0 to m, and the number of expansions is m).\n\nBut wait, the example n=13 and n=15 are YES.\n\nCheck n=13:\n\n  Is 13 = 1 + k + k^2 for some k>1?\n      k^2 + k + 1 = 13\n      k^2 + k -12 =0\n      k = (-1±sqrt(1+48))/2 = (-1±7)/2 -> positive root: 3.\n\n  So k=3, then 1+3+9=13. YES.\n\nCheck n=15:\n\n  1 + k + k^2 = 15 -> k^2+k-14=0 -> k=( -1 ± sqrt(57) )/2 -> not integer.\n\nBut wait, maybe more than two layers? \n\nWith three layers: n = 1 + k + k^2 + k^3.\n\nFor k=2: 1+2+4+8=15 -> yes, k=2, m=3 (three layers: center, then layer1, layer2, layer3).\n\nSo the problem allows multiple expansions (at least two expansions, meaning at least two layers beyond the center? Actually, the center is layer0, then we have expansion steps:\n\n  Step1 (first expansion): layer1 (k nodes)\n  Step2 (second expansion): layer2 (k^2 nodes)\n  Step3 (third expansion): layer3 (k^3 nodes)\n\nBut note: the problem says the entire process (the expansion step) must be done at least once. The expansion step is defined as: \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices\". \n\nThis expansion step is applied repeatedly. The first expansion (center) is a special case? Actually, the problem says:\n\n  Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1). \n  Then, [the expansion step] This step should be done at least once.\n\nSo the center expansion is separate from the expansion step? \n\nBut note: the expansion step is defined for any vertex with degree 1. The center initially has degree 0. Then we connect the center to k new vertices, so now the center has degree k and the k new ones have degree 1.\n\nThen, the expansion step (as defined in the second sentence) is: take every vertex with degree 1 and expand it by k. This must be done at least once.\n\nTherefore, the minimal process is:\n\n  Step0: center (degree 0)\n  Step1: expand center (by connecting to k) -> now we have center (degree k) and k leaves (each degree 1).\n  Then, we must do the expansion step (on the leaves) at least once.\n\nSo the minimal number of vertices is 1 (center) + k (from center expansion) + k*k (from expanding each leaf) = 1+k+k^2.\n\nBut wait, the center expansion is not part of the expansion step? Then the expansion step is only the second part. Then the problem requires:\n\n  - The center expansion (explicitly stated) and \n  - The expansion step (on leaves) at least once.\n\nSo the minimal is 1+k+k^2.\n\nBut then, why is n=15 YES? Because we can have more than one expansion step (i.e., more than one application of the leaf expansion). Actually, we can have:\n\n  Step0: center\n  Step1: center expands -> k new\n  Step2: leaves from step1 expand -> k^2 new\n  Step3: leaves from step2 expand -> k^3 new\n\nThen n = 1 + k + k^2 + k^3.\n\nSo the general formula is:\n\n  n = 1 + k * ( (k^m - 1) / (k-1) )   [but wait, that's not exactly the same]\n\nActually, the total is:\n\n  n = 1 + k + k^2 + ... + k^m   for m>=1 (but wait, the center expansion is the first expansion, and then we require at least one expansion step (which is the second expansion, so m>=2? Actually, the center expansion is the first expansion and the leaf expansion is the second, so the exponents go from 0 to m, and m is the number of expansion layers (including the center) minus one? \n\nLet me define:\n\n  Let the center be layer0 (exponent0).\n  Then, the center expansion (first expansion) adds layer1 (exponent1): k^1.\n  Then, the first leaf expansion (second expansion) adds layer2 (exponent2): k^2.\n  Then, the second leaf expansion (third expansion) adds layer3 (exponent3): k^3.\n\nBut the problem says the expansion step (the leaf expansion) must be done at least once. So we must have at least layer0, layer1, and layer2 (so m=2, meaning two expansions beyond the center? Actually, the center expansion is a separate step.\n\nAlternatively, let's define:\n\n  Let m be the number of expansion steps (each step being an expansion of a leaf). Then the center expansion is the first step (if we count the center expansion as a step) and then we do m expansion steps (each on leaves). But the problem says the expansion step (the leaf expansion) must be done at least once. So m>=1.\n\nThen the total vertices:\n\n  Layer0: 1\n  Step1 (center expansion): adds k (layer1)\n  Then, m expansion steps (each step: each leaf from the previous layer expands by k) so:\n      Step2 (first leaf expansion): adds k^1 * k = k^2 (because there are k leaves from step1, each adds k)\n      Step3 (second leaf expansion): adds k^2 * k = k^3\n      ...\n      Step(i): adds k^i\n\n  Total: 1 + k + k^2 + ... + k^m\n\nBut wait, the center expansion is step1, and then we do m leaf expansion steps (so the total expansions is 1+m). Then the total layers is m+2? Actually, the center expansion is the first expansion, and then m leaf expansions (each leaf expansion is one step). Then the exponents go from 0 to m (because we have m+1 layers). \n\nBut note: the center expansion is not a leaf expansion. However, the formula is:\n\n  n = 1 + k + k^2 + ... + k^m   for m>=1 (since we must do at least one leaf expansion, which is the second expansion, so m>=1).\n\nWait, but then the minimal n is for m=1: 1 + k + k^2.\n\nBut wait, the example n=15: 15 = 1 + 2 + 4 + 8 = 1 + 2 + 2^2 + 2^3 -> so m=3 (exponents from 0 to 3) but then the center expansion is the first expansion (adding 2) and then we did two leaf expansions (adding 4 and 8). So m (leaf expansion steps) is 2, then the total expansions (including the center) is 3, and the exponents go up to 3.\n\nBut the formula is:\n\n  n = (k^(m+1) - 1) / (k-1)   [if we let m be the total number of layers, including the center? Actually, the center is layer0, then the center expansion adds layer1, then each leaf expansion adds a new layer. So if we let L be the total layers (from 0 to L), then n = (k^(L+1)-1)/(k-1). \n\nBut note: the center expansion is necessary and the leaf expansion must be done at least once, so L>=2 (layers 0,1,2). Then the minimal n is for L=2: (k^3-1)/(k-1) = 1+k+k^2.\n\nBut wait, the example n=15: \n  If we let L=3, then n = (k^4-1)/(k-1) = 1+k+k^2+k^3. For k=2: (16-1)/1 = 15. So L=3.\n\nBut the problem does not specify that we stop after a fixed number of expansions. We can have any number of expansions (at least two layers: center and the first leaf expansion) but the minimal is two layers (center and layer1, and then layer2) -> so L=2 (three layers: 0-indexed) then the total expansions (including center) is 2 (center and then one leaf expansion) and then the formula is:\n\n  n = (k^3-1)/(k-1) = 1+k+k^2.\n\nBut wait, the example n=15 is achieved by three layers (center, layer1, layer2, layer3) -> so L=3 (exponents 0,1,2,3) and the formula is (k^4-1)/(k-1)=15 for k=2.\n\nBut note: the problem says the expansion step (leaf expansion) must be done at least once. The center expansion is separate. Then we must do at least one leaf expansion. The leaf expansion is the same operation (each leaf expands by k). The number of leaf expansion steps is the number of times we apply that operation. \n\nSo the minimal is one leaf expansion step, then the total layers is 3 (center, then layer1, then layer2). Then n = 1 + k + k^2.\n\nBut wait, the example n=15 is achieved by two leaf expansion steps (so two applications of the leaf expansion) and the center expansion. Then total layers is 4 (center, layer1, layer2, layer3). Then n = 1 + k + k^2 + k^3.\n\nTherefore, the condition is: n must be equal to (k^(L) - 1)/(k-1) for some integer k>1 and integer L>=3 (because we need at least the center and two expansions: center expansion and one leaf expansion, so L=3 (exponent from 0 to 2) -> then the formula is (k^3-1)/(k-1) = 1+k+k^2, and we can also have L>=4 (then the formula is (k^4-1)/(k-1) = 1+k+k^2+k^3, etc.)\n\nBut note: the center expansion is not counted as a leaf expansion. However, the center expansion is the first expansion and then we do L-1 leaf expansions? \n\nActually, the entire process (including the center expansion) is the same as building a rooted tree with branching factor k, and the height is h (from the center). The center is at depth0, then the first expansion (center) gives depth1, then the leaf expansion (on the nodes at depth1) gives depth2, then on depth2 gives depth3, etc.\n\nBut the problem says the center expansion is mandatory and the leaf expansion must be done at least once. So the minimal height is 2 (depth0: center, depth1: from center, depth2: from leaves of depth1). Then the total nodes is:\n\n  T = 1 (depth0) + k (depth1) + k*k (depth2) = 1+k+k^2.\n\nBut if we do more leaf expansions, then we have deeper levels.\n\nSo the general condition is: n must be representable as:\n\n  n = (k^h - 1) / (k-1)   for some integer k>1 and integer h>=3 (because h is the number of layers, and we need at least 3 layers: depth0, depth1, depth2).\n\nBut wait, if we let h be the total depth (from 0 to h), then the number of layers is h+1, and the formula is (k^(h+1)-1)/(k-1). \n\nBut note: the minimal case (one leaf expansion) requires h=2 (so layers: depth0, depth1, depth2) then the total is (k^3-1)/(k-1).\n\nBut wait, we can also have the center expansion and then one leaf expansion (h=2) and then stop. Then the minimal n is (k^3-1)/(k-1) for k>1.\n\nBut then, what about the example n=13? That is 1+3+9 = (3^3-1)/(3-1) = (27-1)/2 = 26/2=13 -> valid.\n\nWhat about n=15? 15 = (2^4-1)/(2-1) = 15 -> valid, but note: 15 is also (k^3-1)/(k-1) for some k? \n  (k^3-1)/(k-1) = k^2+k+1. We have k^2+k+1=15 -> k^2+k-14=0 -> no integer solution. But 15 is represented by (k^4-1)/(k-1) for k=2.\n\nSo the condition is: there exists an integer k>1 and an integer h>=3 (so that the total layers is h+1, and h is the maximum depth) such that:\n\n  n = (k^h - 1) / (k-1)   [wait, no: the formula for a geometric series from exponent0 to exponent h is (k^(h+1)-1)/(k-1). \n\nActually, if we have h layers (from depth0 to depth h-1) then the total nodes is (k^h - 1)/(k-1). But we need at least two expansions: center expansion (depth0 to depth1) and one leaf expansion (depth1 to depth2). Then the minimal h is 3 (so that we have depths0,1,2) -> then the total nodes is (k^3-1)/(k-1).\n\nBut wait, if we let h=3 (meaning we have 3 layers: depth0, depth1, depth2) then the total nodes is 1 + k + k^2 = (k^3-1)/(k-1). \n\nAlternatively, if we let h=4, then we have 4 layers (depth0 to depth3) and the total nodes is (k^4-1)/(k-1).\n\nBut note: the example n=15 is achieved by k=2 and h=4 (because (2^4-1)/(2-1)=15). \n\nBut wait, how many expansions? \n  Center expansion: depth0 to depth1 (one expansion)\n  First leaf expansion: depth1 to depth2 (second expansion)\n  Second leaf expansion: depth2 to depth3 (third expansion)\n\nSo we did three expansions (including the center) and four layers.\n\nSo the condition is: there exists an integer k>1 and an integer t>=2 (where t is the number of expansions, and the total layers is t+1) such that:\n\n  n = (k^(t+1)-1)/(k-1)\n\nBut note: t>=2 (because we need at least two expansions: center and one leaf expansion). Then the minimal n is (k^3-1)/(k-1) for k>=2.\n\nBut wait, the example n=1 is given. Then:\n\n  n=1: then we have no expansion? But the problem says the center expansion is done (which would require k>1 and then we add k nodes) and then the leaf expansion at least once. So n=1 is not allowed.\n\nAlso, n=2: \n  If we try to use t=2 (minimal expansions): (k^3-1)/(k-1) = 1+k+k^2. For k=2: 7; for k=1: not allowed. There's no k>1 that gives 2. So n=2 is NO.\n\nn=3: \n  Minimal: (k^3-1)/(k-1) = 1+k+k^2. Solve 1+k+k^2=3 -> k^2+k-2=0 -> k=( -1±sqrt(1+8) )/2 = (-1±3)/2 -> k=1 (invalid) or k=-2 (invalid). So no solution. But wait, what if we use more expansions? \n\nWait, we must have at least two expansions (center and one leaf expansion). Then the minimal representation is 1+k+k^2. But if we use more expansions, then the total n would be even bigger (since k>=2, so 1+k+k^2+k^3>=1+2+4+8=15). \n\nSo n=3: NO.\n\nBut wait, the example output for n=3 is 'NO'. \n\nBut then why is n=13 YES? Because 13 = (k^3-1)/(k-1) for k=3.\n\nSimilarly, n=15 = (k^4-1)/(k-1) for k=2.\n\nBut note: we can have different numbers of expansions (different t). The condition is that n must be expressed as the sum of a geometric series with base k (integer k>=2) and at least 3 terms (because the minimal is 3 terms: exponents 0,1,2) but wait, the minimal expansion gives 3 terms (center, then two expansions: center and one leaf) so the series has 3 terms (from exponent0 to exponent2). Then the total layers is 3, and the exponent goes from 0 to 2 (so 3 terms).\n\nBut wait, the series for t=2 (two expansions) has three terms: \n  term0: 1\n  term1: k\n  term2: k^2\n\nSo the formula is (k^3-1)/(k-1).\n\nSimilarly, t=3 (three expansions) has four terms: (k^4-1)/(k-1).\n\nTherefore, the condition is: n must be representable as (k^d -",
    "response": "\nTo solve this problem, we need to determine whether a given number of vertices \\( n \\) can form a snowflake graph as defined by Rudolf. The snowflake graph is constructed in layers, starting with a single central vertex (layer 0). Each subsequent layer is formed by expanding the vertices from the previous layer (except the central vertex) by adding \\( k \\) new vertices, where \\( k > 1 \\). The expansion must be done at least once beyond the initial expansion from the central vertex.\n\n### Approach\n1. **Problem Analysis**: The key observation is that the total number of vertices in the snowflake graph after \\( m \\) expansions (including the initial expansion) is given by the geometric series sum \\( 1 + k + k^2 + \\ldots + k^m \\). This sum can be rewritten as \\( \\frac{k^{m+1} - 1}{k - 1} \\). For the snowflake to exist, there must exist integers \\( k > 1 \\) and \\( m \\geq 1 \\) such that \\( n = \\frac{k^{m+1} - 1}{k - 1} \\).\n\n2. **Insight**: Given the constraints \\( n \\leq 10^{18} \\), we need an efficient way to check for the existence of such \\( k \\) and \\( m \\). Directly iterating over possible \\( k \\) values is infeasible due to the large range. Instead, we recognize that for each possible number of layers (or expansions), we can solve for \\( k \\) using binary search or mathematical properties of geometric series.\n\n3. **Algorithm Selection**: For each test case, we consider possible values of \\( m \\) (number of expansions) starting from 1. For each \\( m \\), we solve the equation \\( n = \\frac{k^{m+1} - 1}{k - 1} \\) for \\( k \\). Since \\( k \\) must be an integer greater than 1, we can use binary search to find if such a \\( k \\) exists. The solution leverages the fact that for fixed \\( m \\), the function \\( f(k) = \\frac{k^{m+1} - 1}{k - 1} \\) is strictly increasing for \\( k \\geq 2 \\), allowing binary search within feasible bounds.\n\n4. **Complexity Analysis**: The approach involves checking up to \\( \\log_2(n) \\) possible values of \\( m \\) for each test case. For each \\( m \\), a binary search is performed over \\( k \\) values, which takes \\( O(\\log n) \\) time. Thus, the overall complexity per test case is \\( O(\\log^2 n) \\), which is efficient given the constraints.\n\n### Solution Code\n```python\nimport math\n\ndef solve_case(n):\n    if n == 1:\n        return \"NO\"\n    \n    # Check for minimal cases: one expansion (center) and one leaf expansion (minimal snowflake)\n    # Then check for more expansions if necessary.\n    found = False\n    m_low = 1\n    m_high = 100  # Since 2^m grows very fast, we limit m to a reasonable number (e.g., 100)\n    \n    for m in range(m_low, m_high + 1):\n        # We have: n = (k^(m+1) - 1) / (k-1)\n        # Rearranged: k^(m+1) - (n*(k-1) + 1) = 0\n        # We are searching for integer k >= 2 satisfying this.\n        low_k = 2\n        high_k = 10**6\n        \n        while low_k <= high_k:\n            mid_k = (low_k + high_k) // 2\n            value = (mid_k ** (m+1) - 1) // (mid_k - 1) if mid_k != 1 else m + 1\n            if value == n:\n                found = True\n                break\n            elif value < n:\n                low_k = mid_k + 1\n            else:\n                high_k = mid_k - 1\n                \n        if found:\n            break\n            \n    return \"YES\" if found else \"NO\"\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    results = []\n    for i in range(t):\n        n = int(data[1 + i])\n        results.append(solve_case(n))\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Initial Check**: If \\( n = 1 \\), it's impossible to form a snowflake (since at least one expansion is required), so the answer is \"NO\".\n2. **Binary Search for Each Expansion Count \\( m \\)**: For each possible number of expansions \\( m \\) (from 1 to a reasonable upper limit), perform a binary search to find an integer \\( k > 1 \\) such that the geometric series sum equals \\( n \\).\n3. **Geometric Series Calculation**: The sum \\( \\frac{k^{m+1} - 1}{k - 1} \\) is computed for mid-values during the binary search. If this sum matches \\( n \\), the answer is \"YES\".\n4. **Efficiency**: The nested loops (over \\( m \\) and within binary search over \\( k \\)) ensure that the solution efficiently checks all feasible configurations without excessive computation, even for large \\( n \\) values up to \\( 10^{18} \\).\n\nThis approach efficiently checks the feasibility of constructing a snowflake graph for each test case by leveraging mathematical properties and binary search, ensuring optimal performance.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve_case(n):\n    if n == 1:\n        return \"NO\"\n    \n    # Check for minimal cases: one expansion (center) and one leaf expansion (minimal snowflake)\n    # Then check for more expansions if necessary.\n    found = False\n    m_low = 1\n    m_high = 100  # Since 2^m grows very fast, we limit m to a reasonable number (e.g., 100)\n    \n    for m in range(m_low, m_high + 1):\n        # We have: n = (k^(m+1) - 1) / (k-1)\n        # Rearranged: k^(m+1) - (n*(k-1) + 1) = 0\n        # We are searching for integer k >= 2 satisfying this.\n        low_k = 2\n        high_k = 10**6\n        \n        while low_k <= high_k:\n            mid_k = (low_k + high_k) // 2\n            value = (mid_k ** (m+1) - 1) // (mid_k - 1) if mid_k != 1 else m + 1\n            if value == n:\n                found = True\n                break\n            elif value < n:\n                low_k = mid_k + 1\n            else:\n                high_k = mid_k - 1\n                \n        if found:\n            break\n            \n    return \"YES\" if found else \"NO\"\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    results = []\n    for i in range(t):\n        n = int(data[1 + i])\n        results.append(solve_case(n))\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 557,
        "completion_token_count": 1231,
        "thoughts_token_count": 8191
    }
}