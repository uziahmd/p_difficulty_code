{
    "start": 1758299480.040891,
    "end": 1758303245.2786956,
    "start-formatted": "2025-09-20 01:31 KST",
    "end-formatted": "2025-09-20 02:34 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, let's break down the problem.\n\nWe are to find:\n1. The minimum number of edges `t` that must be added to form a simple cycle of odd length (without repeating vertices) and \n2. The number of ways `w` (without adding parallel edges or loops) to add exactly `t` edges to form such a cycle.\n\nNote: The graph is undirected, without parallel edges or loops, and not necessarily connected.\n\nObservations:\n\n1. A simple cycle of odd length (at least 3 vertices) must have an odd number of edges (since the cycle has k edges for k vertices, and if k is odd then the cycle has odd length).\n\n2. We can form a cycle by adding edges. The minimal t (minimum number of edges to add) can be 0, 1, or more.\n\nCases:\n\nCase 0: If the graph already contains an odd-length cycle, then t=0 and w=1? But wait, note the problem: we must form a cycle. However, the problem says \"the minimum number of edges that must be added\". So if there's already an odd cycle, then we don't need to add any edge, so t=0 and w=1.\n\nBut wait: the problem says \"to form a cycle of an odd length\". So if there's already one, then we don't need to add any.\n\nHowever, note: the cycle must be simple and consist of more than one vertex (which is naturally satisfied by cycles of length>=3). \n\nBut how do we check for odd cycles?\n\nWe know that in a bipartite graph, there are no odd cycles. So if the graph is bipartite, then we cannot have an odd cycle. Otherwise, we have at least one odd cycle.\n\nSo step 1: Check if the graph has an odd cycle (i.e., is it non-bipartite?).\n\nIf the graph is non-bipartite (contains an odd cycle), then t=0 and w=1.\n\nBut wait, the example input: \n  \"3 3\\n1 2\\n2 3\\n3 1\" -> output \"0 1\"\n\nThis is a triangle (odd cycle) so indeed t=0.\n\nAnother example: \n  Input: \"4 4\\n1 2\\n1 3\\n4 2\\n4 3\" -> output \"1 2\"\n\nThis graph is a complete bipartite graph K_{2,2} (a cycle of even length). It doesn't have an odd cycle. So we need to add edges to create an odd cycle.\n\nBut note: we can form an odd cycle by adding edges. What is the minimal t?\n\nWe can consider:\n\n- t=0: already done if there's an odd cycle.\n\n- t=1: can we form an odd cycle by adding one edge?\n   Example: Consider two triangles (each with three vertices) that share an edge. Then adding one edge might form a cycle? Actually, we need to think about what cycle would be formed.\n\nBut note: we are allowed to use the existing graph and the added edges. The cycle must be simple and odd.\n\nLet's consider:\n\nOption for t=1: \n   Suppose we have two even cycles (or bipartite graphs) and we add an edge between two vertices of the same color (in the same bipartition set). Then, we can get an odd cycle.\n\nBut note: the graph might not be connected.\n\nActually, we can also consider creating a triangle (cycle of length 3) by adding two edges? But wait, if we have three vertices that are not connected in a triangle, we can add two edges to form a triangle. However, the problem asks for the minimum number of edges to add.\n\nBut note: we might have an existing path of even length between two vertices. Then, if we add one edge to connect two vertices that are at even distance, then we form an odd cycle.\n\nWait, actually: \n   In a bipartite graph, all cycles are even. Now, if we add an edge between two vertices that are in the same bipartition set (same color), then consider a path from u to v (which exists because the graph is connected? but note: the graph may be disconnected). \n\nActually, the graph might be disconnected. So we have to consider each connected component.\n\nBut note: we can form a cycle by connecting two vertices that are in the same component? \n\nAlternatively, we can form a cycle by connecting two vertices from different components? \n\nLet me think:\n\nCase t=1: \n   We can add one edge to form an odd cycle if there exists a pair of vertices (u, v) such that they are in the same bipartite set (so that if we add an edge between them, then we can traverse from u to v along an even-length path and then the edge makes an odd cycle).",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges `t` that must be added to an undirected graph to form a simple cycle of odd length, and the number of ways `w` to add those edges. The solution involves checking for existing odd cycles in the graph and, if none exist, determining the minimal edges required to create one.\n\n### Approach\n1. **Check for Existing Odd Cycles**: \n   - A graph contains an odd cycle if it is non-bipartite. We can check this by attempting to color the graph with two colors (bipartite check). If during the coloring process we find an edge connecting two vertices of the same color, the graph is non-bipartite, indicating the presence of an odd cycle.\n   - If an odd cycle exists, no edges need to be added (`t = 0`), and there is exactly one way to achieve this (`w = 1`).\n\n2. **Handling Bipartite Graphs**:\n   - If the graph is bipartite, we need to find the minimal number of edges to add to create an odd cycle. The minimal number of edges required is either 1 or 2, depending on the structure of the graph.\n   - **Case t = 1**: Adding an edge between two vertices in the same bipartition set of any connected component will create an odd cycle. The number of such pairs is calculated by summing over all connected components the combinations of vertices within each bipartition set.\n   - **Case t = 2**: If no pair of vertices in the same bipartition set can form an odd cycle with a single edge (i.e., the graph is disconnected and no direct connection exists between vertices of the same set in different components), then we need to add two edges. This involves connecting two vertices from different components but the same bipartition set, followed by connecting their counterparts. The number of ways to do this is the product of combinations from two different components.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    \n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            queue = deque([i])\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        count0 = 0\n        count1 = 0\n        for node in comp:\n            if color[node] == 0:\n                count0 += 1\n            else:\n                count1 += 1\n        total_ways += count0 * count1\n        \n    if total_ways > 0:\n        print(\"1 \" + str(total_ways))\n        return\n        \n    t = 3\n    w = 0\n    for i in range(len(components)):\n        comp_i = components[i]\n        count0_i = 0\n        count1_i = 0\n        for node in comp_i:\n            if color[node] == 0:\n                count0_i += 1\n            else:\n                count1_i += 1\n        comp0_i = count0_i\n        comp1_i = count1_i\n        \n        for j in range(i+1, len(components)):\n            comp_j = components[j]\n            count0_j = 0\n            count1_j = 0\n            for node in comp_j:\n                if color[node] == 0:\n                    count0_j += 1\n                else:\n                    count1_j += 1\n            ways_ij = comp0_i * count0_j + comp1_i * count1_j\n            w_ij = comp0_i * count1_j + comp1_i * count0_j\n            if ways_ij == 0:\n                continue\n            w += w_ij * ways_ij\n            t = 2\n            \n    if t == 3:\n        t = 3\n        w = 1\n        print(f\"{t} {w}\")\n    else:\n        print(f\"2 {w}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Graph Input Handling**: The input is read and parsed into a graph structure represented as an adjacency list.\n2. **Bipartite Check**: The graph is checked for bipartiteness using BFS. Each connected component is colored with two colors. If any edge connects two vertices of the same color, the graph is non-bipartite, and we immediately return `0 1`.\n3. **Single Edge Addition (t=1)**: For each connected component, count the number of vertices in each bipartition set. The number of ways to add one edge to create an odd cycle is the sum of products of counts from each set across all components.\n4. **Double Edge Addition (t=2)**: If no single edge can create an odd cycle, we consider adding two edges between vertices from different components but the same bipartition sets. The number of ways is calculated by considering all pairs of components and their vertex counts.\n5. **Triple Edge Addition (t=3)**: If the graph is empty (no edges and possibly disconnected), three edges are needed to form a triangle, hence `t=3` and `w=1`.\n\nThis approach efficiently checks for existing odd cycles and calculates the minimal edges required to form one if none exist, along with the number of valid ways to achieve this.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    \n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            queue = deque([i])\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        count0 = 0\n        count1 = 0\n        for node in comp:\n            if color[node] == 0:\n                count0 += 1\n            else:\n                count1 += 1\n        total_ways += count0 * count1\n        \n    if total_ways > 0:\n        print(\"1 \" + str(total_ways))\n        return\n        \n    t = 3\n    w = 0\n    for i in range(len(components)):\n        comp_i = components[i]\n        count0_i = 0\n        count1_i = 0\n        for node in comp_i:\n            if color[node] == 0:\n                count0_i += 1\n            else:\n                count1_i += 1\n        comp0_i = count0_i\n        comp1_i = count1_i\n        \n        for j in range(i+1, len(components)):\n            comp_j = components[j]\n            count0_j = 0\n            count1_j = 0\n            for node in comp_j:\n                if color[node] == 0:\n                    count0_j += 1\n                else:\n                    count1_j += 1\n            ways_ij = comp0_i * count0_j + comp1_i * count1_j\n            w_ij = comp0_i * count1_j + comp1_i * count0_j\n            if ways_ij == 0:\n                continue\n            w += w_ij * ways_ij\n            t = 2\n            \n    if t == 3:\n        t = 3\n        w = 1\n        print(f\"{t} {w}\")\n    else:\n        print(f\"2 {w}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1384,
        "thoughts_token_count": 1023
    }
}