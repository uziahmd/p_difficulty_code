{
    "start": 1758093088.7858338,
    "end": 1758094873.076422,
    "start-formatted": "2025-09-17 16:11 KST",
    "end-formatted": "2025-09-17 16:41 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\n We are given up to 100000 souvenirs, each with weight in {1,2,3} and cost up to 10^9.\n Since the weights are only 1, 2, or 3, we can group the souvenirs by their weight.\n\n Let:\n   type1 = list of costs for souvenirs with weight 1\n   type2 = list of costs for souvenirs with weight 2\n   type3 = list of costs for souvenirs with weight 3\n\n Then, we need to choose a non-negative integer a (number of type1 items), b (type2) and c (type3) such that:\n   a*1 + b*2 + c*3 <= m\n\n And we want to maximize the total cost: \n   total_cost = (sum of chosen from type1) + (sum of chosen from type2) + (sum of chosen from type3)\n\n However, note that we are allowed to choose any subset from each type. So for each type, we would want to take the most expensive ones first.\n\n Steps:\n\n 1. Preprocess: separate the souvenirs into three lists (for weights 1,2,3). Then sort each list in descending order (so that the most expensive is first).\n\n 2. Precompute prefix sums for each list so that we can quickly get the sum of the top k elements.\n\n 3. The problem becomes: for each possible count of type1 (a) and type2 (b) and then determine the maximum c (which is floor((m - a*1 - b*2)/3)), but note that we must have a*1+b*2+c*3<=m.\n\n However, the state space (a,b,c) is too large because a can be up to m (which is 300000) and similarly for b. But note that the total weight m is 300000, and the weights are small (only 1,2,3). \n\n Alternative approach:\n\n Since the weights are small, we can use dynamic programming that iterates over the types and the weight limit, but the weight limit is 300000 and n is 100000, which might be too slow with a naive DP (O(n*m)).\n\n Instead, we can use the following idea:\n\n We'll consider the souvenirs in groups by weight. For each weight group, we have sorted list of costs and prefix sums.\n\n Then, we can iterate over the number of items taken from type1 and type2, and then for each fixed (a, b) we compute the remaining weight for type3, and then we take as many type3 as possible (but not exceeding the available ones) and the sum from type3 is the sum of the top (c) items, where c is the maximum number of type3 we can take.\n\n However, the state space for a and b is about O(m) for each, which is 300000 * 300000, which is too big.\n\n We need a more efficient way.\n\n Observation: since the weights are small, we can use a two-dimensional DP but that is also too heavy.\n\n Another idea: use the fact that the total weight is at most 300000 and the items have only 3 distinct weights. We can break the problem into:\n\n total_cost = (sum of top a from type1) + (sum of top b from type2) + (sum of top c from type3)\n\n with constraint: a + 2*b + 3*c <= m.\n\n We can iterate over the number of type3 items (c) and then for the remaining weight (m - 3*c) we want to choose type1 and type2 to maximize their total cost, with the constraint that the total weight from type1 and type2 is at most (m - 3*c).\n\n But note: we can also mix type1 and type2 arbitrarily. This is similar to having coins of denominations 1 and 2 and we want to form a weight up to R (remaining weight) and maximize the total cost (which is the sum of the chosen items). However, we have multiple copies (each type has a fixed set of items) but we can take at most the number of items in that type.\n\n But note: we have two independent sets: type1 and type2. We can precompute for type1 and type2 separately the maximum total cost for a given weight (from 0 to R) by considering that we can take as many as we want (with repetition? no, but we have sorted by cost and we can take the best ones) but actually we have a fixed set for type1 and type2.\n\n Actually, we can precompute for type1 and type2 the maximum total cost for each weight we",
    "response": "\nTo solve this problem, we need to maximize the total cost of souvenirs that Petya can carry to the market without exceeding a given weight limit. The souvenirs have weights of either 1, 2, or 3, and each has a specific cost. The challenge is to select a subset of these souvenirs such that their combined weight is within the limit and their total cost is maximized.\n\n### Approach\n1. **Grouping by Weight**: First, we group all souvenirs by their weights (1, 2, or 3) into three separate lists.\n2. **Sorting and Prefix Sums**: For each group, we sort the souvenirs in descending order of their costs. Then, we compute prefix sums for each group. These prefix sums allow us to quickly determine the maximum cost achievable by selecting the top `k` items from any group.\n3. **Iterate Over Possible Type3 Items**: We iterate over all possible counts of type3 items (weight 3). For each count, we calculate the remaining weight available for type1 and type2 items.\n4. **Maximize Cost for Remaining Weight**: Using the remaining weight, we determine the optimal combination of type1 and type2 items to maximize the total cost. This involves using binary search on the prefix sums of type1 and type2 to find the best possible combination within the remaining weight.\n\n### Solution Code\n```python\nimport bisect\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    type1 = []\n    type2 = []\n    type3 = []\n    \n    for i in range(n):\n        w = int(data[index])\n        c = int(data[index+1])\n        index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    prefix1 = [0]\n    for num in type1:\n        prefix1.append(prefix1[-1] + num)\n        \n    prefix2 = [0]\n    for num in type2:\n        prefix2.append(prefix2[-1] + num)\n        \n    prefix3 = [0]\n    for num in type3:\n        prefix3.append(prefix3[-1] + num)\n        \n    max_total = 0\n    k = len(type3)\n    for c_count in range(k+1):\n        rem_weight = m - 3*c_count\n        if rem_weight < 0:\n            break\n            \n        rem_weight1 = rem_weight // 1\n        rem_weight2 = rem_weight // 2\n        \n        max_val = 0\n        idx1 = bisect.bisect_right(prefix1, rem_weight1)\n        if idx1 > 0:\n            max_val += prefix1[idx1]\n            \n        idx2 = bisect.bisect_right(prefix2, rem_weight2)\n        if idx2 > 0:\n            max_val += prefix2[idx2]\n            \n        total_cost = max_val + prefix3[c_count]\n        if total_cost > max_total:\n            max_total = total_cost\n            \n    print(max_total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The input is read and parsed into the number of souvenirs `n` and the maximum allowed weight `m`. Each souvenir's weight and cost are then categorized into one of three lists based on their weight.\n2. **Sorting and Prefix Sums**: Each list (type1, type2, type3) is sorted in descending order of cost. Prefix sums are computed for each list to facilitate quick calculation of the sum of the top `k` items.\n3. **Iterating Over Type3 Items**: For each possible count of type3 items (from 0 to the total number of type3 items), the remaining weight after including those items is calculated.\n4. **Binary Search for Optimal Combination**: Using binary search, the algorithm determines the maximum cost achievable with the remaining weight by combining type1 and type2 items. The binary search efficiently finds the best combination by leveraging the precomputed prefix sums.\n5. **Result Calculation**: The total cost for each combination of type3 items and the corresponding optimal combination of type1 and type2 items is compared to find the maximum possible total cost, which is then printed as the result.\n\nThis approach efficiently narrows down the problem by leveraging the constraints on item weights and uses sorting and prefix sums to optimize the selection process, ensuring optimal performance even for large input sizes.",
    "ground_truth": "N/A",
    "extracted_answer": "import bisect\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    type1 = []\n    type2 = []\n    type3 = []\n    \n    for i in range(n):\n        w = int(data[index])\n        c = int(data[index+1])\n        index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    prefix1 = [0]\n    for num in type1:\n        prefix1.append(prefix1[-1] + num)\n        \n    prefix2 = [0]\n    for num in type2:\n        prefix2.append(prefix2[-1] + num)\n        \n    prefix3 = [0]\n    for num in type3:\n        prefix3.append(prefix3[-1] + num)\n        \n    max_total = 0\n    k = len(type3)\n    for c_count in range(k+1):\n        rem_weight = m - 3*c_count\n        if rem_weight < 0:\n            break\n            \n        rem_weight1 = rem_weight // 1\n        rem_weight2 = rem_weight // 2\n        \n        max_val = 0\n        idx1 = bisect.bisect_right(prefix1, rem_weight1)\n        if idx1 > 0:\n            max_val += prefix1[idx1]\n            \n        idx2 = bisect.bisect_right(prefix2, rem_weight2)\n        if idx2 > 0:\n            max_val += prefix2[idx2]\n            \n        total_cost = max_val + prefix3[c_count]\n        if total_cost > max_total:\n            max_total = total_cost\n            \n    print(max_total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 477,
        "completion_token_count": 1005,
        "thoughts_token_count": 1023
    }
}