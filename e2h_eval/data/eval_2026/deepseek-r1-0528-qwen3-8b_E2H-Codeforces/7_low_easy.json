{
    "start": 1758089188.3885849,
    "end": 1758090717.134812,
    "start-formatted": "2025-09-17 15:06 KST",
    "end-formatted": "2025-09-17 15:31 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, let's analyze the problem:\n\nWe are to determine if there exists an integer k>1 such that a snowflake with n vertices can be constructed.\n\nThe snowflake construction:\n1. Start with 1 vertex (step 0).\n2. Then, we do at least one step of expansion: in each step, every leaf (vertex with degree 1) is connected to k new vertices.\n\nBut note: the process must be done at least once, meaning we have at least one expansion.\n\nLet's denote by d the number of expansion steps (at least 1).\n\nAt step 0: 1 vertex.\nAt step 1: 1 + k vertices.\nAt step 2: 1 + k + k*(k-1) [because the initial k vertices each get k-1 new ones?] \n\nWait, let me reexamine the rule:\n\nRule: \n  - Initially, one vertex.\n  - Then, the initial vertex is connected to k new vertices. Now we have 1 + k vertices.\n  - Then, \"each vertex that is connected to only one other vertex\" (i.e., leaves) is connected to k more new vertices.\n\nBut note: after the first step, we have k leaves (the new vertices). Then we add k * k new vertices? Actually, no.\n\nHowever, the example for k=4: the smallest snowflake is shown. The figure would have:\n  Step0: 1\n  Step1: 1 + 4 = 5\n  Step2: 1 + 4 + 4*3 = 1 + 4 + 12 = 17?\n\nBut wait, the rule says: \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nActually, the process is:\n\nStep0: 1 node (degree 0 initially, but then it becomes connected to k nodes, so after step1 the center node has degree k and the others have degree 1).\n\nIn step1: we have 1 + k nodes.\n\nThen, we do at least one more step? Or is the first expansion the minimum? The problem says: \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices.\" and then \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nSo the minimal snowflake is built with two steps: the first (initial) expansion (which connects the center to k) and then the second expansion (on the leaves from the first expansion). But note: the problem says \"This step\" (referring to the expansion of leaves) should be done at least once. So the entire construction requires at least two expansions? Actually, read carefully:\n\n- Step 1: connect the center to k new vertices -> now the graph has 1+k vertices.\n- Then, we must do the expansion of leaves at least once. So we have to do the second step.\n\nBut note: the second step: each leaf (each of the k vertices) will be connected to k new vertices. However, when we connect a leaf to k new vertices, we are adding k new edges and k new vertices. But note: the leaf was originally connected to the center, so after connecting k new vertices, the leaf now has degree k+1 (so it becomes an internal node) and we have k*k new vertices.\n\nTherefore, total vertices after two steps: 1 + k + k^2.\n\nBut wait, what if we do more than two steps? Then we would have:\n\nStep0: 1\nStep1: 1 + k\nStep2: 1 + k + k^2\nStep3: 1 + k + k^2 + k^3\n\nAnd so on.\n\nHowever, note that the problem does not specify the number of steps beyond the minimal one. It just says the process must be done at least once (meaning the expansion of leaves step must be done at least once). So the minimal number of steps is 2 (first expansion and then one expansion of leaves).\n\nBut wait, the problem says: \n  \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices.\" \n  Then: \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nThis implies that the first expansion (from the center) is mandatory and then we must do the leaf expansion at least once. So the entire process must have at least two steps.\n\nBut note: the problem does not specify that we stop after two steps. We can do more than one leaf expansion? Actually, the problem says \"This step should be done at least once\", meaning we must do the leaf expansion at least one time",
    "response": "\nTo solve this problem, we need to determine whether a given number of vertices \\( n \\) can form a snowflake graph as defined by Rudolf. The snowflake graph is constructed in layers, starting with a central vertex and expanding outward in steps. Each step involves connecting each leaf vertex (a vertex with only one edge) to \\( k \\) new vertices, where \\( k > 1 \\). The construction must include at least one such expansion step beyond the initial center.\n\n### Approach\n1. **Problem Analysis**: The snowflake graph starts with a single central vertex. In the first expansion, the center connects to \\( k \\) new vertices. In subsequent expansions, each leaf vertex from the previous step connects to \\( k \\) new vertices. The total number of vertices after \\( d \\) expansions (including the initial step) is \\( 1 + k + k^2 + \\ldots + k^d \\). This forms a geometric series.\n2. **Key Insight**: For the snowflake to exist, \\( n \\) must be expressible as \\( 1 + k \\times m \\) for some integer \\( m \\geq 1 \\) and \\( k > 1 \\). However, since the construction requires at least one expansion beyond the initial step, \\( n \\) must be at least \\( 1 + k + k^2 \\) (for two expansions).\n3. **Algorithm Selection**: For each test case, we check if \\( n \\) can be written in the form \\( n = 1 + k \\times m \\) where \\( k > 1 \\) and \\( m \\geq 1 \\). Additionally, we ensure that \\( m \\) itself can be expressed as \\( 1 + k \\times (something) \\), but a simpler approach is to iterate over possible values of \\( k \\) (from 2 upwards) and check if \\( (n - 1) \\) is divisible by \\( k \\) and the quotient \\( m \\) satisfies \\( m \\geq k + 1 \\) (to ensure at least two expansions).\n\n### Solution Code\n```python\nimport math\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index]); index += 1\n        \n        if n <= 5:\n            results.append(\"NO\")\n            continue\n            \n        found = False\n        k = 2\n        while k * k < n:\n            if (n - 1) % k == 0:\n                m = (n - 1) // k\n                if m >= k + 1:\n                    found = True\n                    break\n            k += 1\n            \n        if found:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n            \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints where \\( n \\) can be as large as \\( 10^{18} \\).\n2. **Initial Check**: If \\( n \\) is 5 or less, it's impossible to form a valid snowflake (since the smallest snowflake requires at least 5 vertices for \\( k=2 \\)), so the answer is immediately \"NO\".\n3. **Iterating Over Possible k Values**: For each test case, the code checks all integers \\( k \\) starting from 2 up to \\( \\sqrt{n} \\). For each \\( k \\), it verifies if \\( (n - 1) \\) is divisible by \\( k \\) and if the quotient \\( m \\) is at least \\( k + 1 \\). This ensures that the snowflake construction includes at least two expansion steps.\n4. **Output Result**: If such a \\( k \\) is found, the answer is \"YES\"; otherwise, it's \"NO\".\n\nThis approach efficiently checks the feasibility of forming a snowflake graph for each given \\( n \\) by leveraging mathematical properties of geometric series and divisibility.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index]); index += 1\n        \n        if n <= 5:\n            results.append(\"NO\")\n            continue\n            \n        found = False\n        k = 2\n        while k * k < n:\n            if (n - 1) % k == 0:\n                m = (n - 1) // k\n                if m >= k + 1:\n                    found = True\n                    break\n            k += 1\n            \n        if found:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n            \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 556,
        "completion_token_count": 877,
        "thoughts_token_count": 1023
    }
}