{
    "start": 1758300388.3067095,
    "end": 1758304218.9395635,
    "start-formatted": "2025-09-20 01:46 KST",
    "end-formatted": "2025-09-20 02:50 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, let's break down the problem.\n\nWe are to find:\n1. The minimum number of edges `t` that must be added to form a simple cycle of odd length (without repeating vertices) and \n2. The number of ways `w` (without adding loops or parallel edges) to do so.\n\nNote: The graph is undirected, without parallel edges or loops, and not necessarily connected.\n\nObservations:\n\n1. Odd cycle: In an undirected graph, an odd cycle has an even number of edges? Actually, no: a cycle with k vertices has k edges, and if k is odd then the cycle has an odd number of edges. But note: the cycle must have at least 3 vertices (since a cycle with 1 vertex is a loop, which is prohibited, and 2 vertices would be two edges, which is even). So the smallest odd cycle is a triangle (3 vertices, 3 edges).\n\n2. We are allowed to add edges arbitrarily (but cannot add loops or parallel edges). We want the minimum number of edges to add to form an odd cycle.\n\nCases:\n\nCase 1: The graph already contains an odd cycle.\n   Then we don't need to add any edge, so t=0. However, we must count the number of ways to add 0 edges (which is 1 way) but only if there is already an odd cycle.\n\nBut wait: the problem says \"minimum number of edges that must be added\". So if there is already an odd cycle, then t=0.\n\nHowever, note: the problem says \"form a simple cycle of an odd length\" — meaning we might form one by adding edges, but if it already exists then we don't need to add any.\n\nBut also note: the cycle must be simple (each vertex occurs at most once) and consist of more than one vertex (so at least 3 vertices for odd cycle).\n\nCase 2: The graph does not contain an odd cycle.\n\nThen we consider adding edges.\n\nWhat are the possibilities?\n\n- Adding one edge: \n   Consider: if we add one edge, can we form an odd cycle?\n   Note: An odd cycle requires at least 3 vertices. If we have two vertices and we add an edge, that doesn't form a cycle (we need at least three edges for a cycle). So one edge alone cannot form a cycle.\n\n   Alternatively, consider: if we have a path of even length (with k edges) and we connect the two ends, then we form a cycle of length k+1 (which is odd if k is even). But wait, we are only adding one edge. How can we form a cycle? The cycle must use existing edges and the new edge.\n\n   Actually, the cycle must be entirely in the graph (after adding edges). The new edge is part of the cycle.\n\n   Example: Consider two triangles that are disconnected. But wait, the graph might be disconnected.\n\n   Let's think: \n   - To form a cycle, we need at least 3 vertices. \n\n   Possibility: \n   - If we have three vertices that are not connected in a triangle, but we add one edge to complete the triangle? Then we get an odd cycle (triangle). But note: the graph must have the other two edges of the triangle already? \n\n   Actually, for a triangle: we need three edges. If the graph has two edges of a triangle, then adding the third edge forms a triangle (odd cycle). So that's one way to form an odd cycle by adding one edge.\n\n   But note: what if the graph has two edges that are not adjacent? For example, vertices A, B, C: \n        Edge set: { (A,B), (C,B) } -> then adding (A,C) forms a triangle.\n\n   However, note: the graph might have a longer odd cycle? But we are looking for the minimum number of edges to add.\n\n   So, the minimum t is 0 (if already exists) or 1 (if we can form an odd cycle by adding one edge) or possibly 2? Because sometimes we cannot form an odd cycle by just adding one edge.\n\n   Actually, consider:\n\n   Example 1: Graph with two triangles missing one edge each, but we cannot complete both with one edge. However, we are only required to form one odd cycle, not necessarily multiple.\n\n   Example 2: Consider a complete bipartite graph (like a bipartite graph) which has no odd cycles. In a bipartite graph, any cycle is even. Now, if we add one edge, can we form an odd cycle?\n\n   Suppose we have a bipartite graph with parts A and B. Adding an edge within A (or within B) may create an odd cycle. Why?\n\n   Example: Consider a bipartite graph that is a chain of 3 nodes: A1-B1-A2. This is a path of two edges. It is bipartite. Now, if we add an edge between A1 and A2, then we get a cycle: A1-B1-A2-A1 (which is a triangle, odd cycle). So that's one edge.\n\n   However, what if the graph is two triangles? No, wait: we are starting from a graph without odd cycles (so bipartite or disconnected bipartite graphs? Actually, a graph without odd cycles is bipartite? Not exactly: a graph without odd cycles is a bipartite graph if and only if it is connected? Actually, a graph without odd cycles is the disjoint union of bipartite graphs. But note: the graph might not be connected.\n\n   Actually, a graph is bipartite if and only if it has no odd cycles. So if the graph is not bipartite, then it already has an odd cycle and t=0.\n\n   Therefore, the problem reduces to:\n\n   Step 1: Check if the graph is bipartite. If not, then t=0 and w=1 (because the graph already has an odd cycle, so we don't need to add any edge, and there is exactly one way to add 0 edges).\n\n   Step 2: If the graph is bipartite (i.e., no odd cycles), then we consider adding edges.\n\n   What is the minimum number of edges to add to make the graph non-bipartite (i.e., introduce an odd cycle)?\n\n   We know that adding an edge inside one part of a connected bipartite component will create an odd cycle. But note: the graph might be disconnected.\n\n   However, the minimum number of edges to add might be 1 or 2?\n\n   Actually, consider:\n\n   Case 2a: There exists a connected bipartite component (or the whole graph) and there exists at least one pair of vertices in the same part (same color) that are not connected by an edge. Then we can add one edge between two vertices in the same part (in the same connected component) and that creates an odd cycle.\n\n   But wait: we are allowed to add edges arbitrarily (even between different components). However, if we add an edge between two vertices in the same part of the same connected component, then we get an odd cycle.\n\n   However, what if in every connected component, the two parts are such that the edges we would add (within a part) are already present? Actually, no: because the graph is bipartite, there are no edges within the same part. But note: the graph might not have all the edges of the complete bipartite graph.\n\n   But here's the catch: we are allowed to add any edge that is not already present. So if there is any two vertices in the same part (in the same connected component) that are not connected, then we can add that edge and form an odd cycle.\n\n   However, note: we might also form an odd cycle by connecting two vertices in the same part from different connected components? \n\n   Example: Two separate edges (so two edges that are not connected). The graph is bipartite. Now, if we add an edge between two vertices that are in the same part (but from different connected components) then consider the cycle: \n\n   Let's say we have two connected components, each being a single edge (so two edges, four vertices). \n\n   Component 1: vertices A, B with edge (A,B) -> colors: A:0, B:1.\n   Component 2: vertices C, D with edge (C,D) -> colors: C:0, D:1.\n\n   Now, if we add an edge (A,C): then we have a cycle? \n        A-B ...? Actually, without a connection between B and D, there is no cycle. But wait, we have two connected components. After adding (A,C), we still have two connected components (unless we connect them). \n\n   However, note: the definition of cycle requires the edges to form a closed path. Without a connection between the two components, the graph remains disconnected and we cannot form a cycle that uses vertices from both components? \n\n   Actually, no: a cycle must be entirely in one connected component. Therefore, we can only form a cycle by adding an edge within a connected component.\n\n   Therefore, the odd cycle must be created within one connected bipartite component.\n\n   So the condition for t=1 is: there exists at least one connected bipartite component that has at least two vertices in the same part (so that we can add an edge between two of them) and that edge is not already present.\n\n   But note: in a connected bipartite component, the coloring is fixed (up to swapping). So if the component has at least two vertices in the same part, then we can choose two of them to connect. However, we must check that the edge is not already present.\n\n   However, since the graph is bipartite, there are no edges within the same part. Therefore, any two vertices in the same part are not connected by an edge.\n\n   Therefore, the number of edges we can add (that would create an odd cycle) is the sum over all connected components of the ways to choose two vertices from the same part (for that component). \n\n   BUT: wait, if we add one edge, we only require one odd cycle. However, if we have multiple components, we can choose any component and add an edge in that component.\n\n   So the total ways for t=1 would be: the sum for each connected component (with parts of sizes a and b) of C(a,2) + C(b,2). \n\n   However, note: if we have two different components, and we add an edge in one component, that is one way. Similarly, if we add an edge in another component, that is another way. So the total number of ways for t=1 is the sum of C(a_i,2) + C(b_i,2) for each connected component i.\n\n   But wait: what if we can form an odd cycle by adding two edges? \n\n   Actually, the problem asks for the minimum number of edges. So if we can form an odd cycle by adding one edge, then the answer for t is 1. However, if there is no way to form an odd cycle by adding one edge, then we must consider adding two edges.\n\n   When would adding one edge not be possible? \n\n   Condition: In every connected bipartite component, each part has size 1. Then, for each component, we cannot choose two vertices from the same part (since each part has only one vertex). Then, we cannot form an odd cycle by adding one edge.\n\n   Then we must consider adding two edges.\n\n   Example: Consider a graph that is a complete bipartite graph with two parts of size 1 and 2 (say). Actually, wait: if a component has two parts, say one part of size 1 and the other of size 2, then the same part (the one of size 2) has two vertices, so we can add one edge (within the part of size 2) to form an odd cycle. \n\n   Actually, the condition for t=1 is that there is at least one connected component with at least one part having size>=2. \n\n   Therefore, if the graph is bipartite and every connected component has both parts of size 1 (i.e., each connected component is a single edge or an isolated vertex? Actually, isolated vertex: then the component has one vertex and no edges. Then the bipartition is (1,0) or (0,1). Then we can form an edge within the part? But wait, a part with one vertex: we cannot choose two distinct vertices. So an isolated vertex: the part has one vertex, so C(1,2)=0.\n\n   So the condition for t=1 is that there is at least one connected component that has at least two vertices in one part.\n\n   Now, what about two edges? \n\n   If we cannot form an odd cycle by adding one edge, then we must form one by adding two edges.\n\n   Example: Consider a graph that is a triangle with one edge removed (so two edges) and the third edge is missing. But wait, that graph is bipartite? Actually, no: a triangle is an odd cycle, so if we remove one edge, the graph is two edges (a path of two edges) which is bipartite. Then we can add one edge (the missing one) to form the triangle. So that is t=1.\n\n   So the graph that requires two edges is when the graph is bipartite and in every connected component, the maximum part size is 1 (meaning: each connected component is either an isolated vertex or an edge). Then we cannot form an odd cycle by adding one edge.\n\n   Then how to form an odd cycle? \n\n   We must form a cycle of odd length. The smallest odd cycle is 3. \n\n   Possibilities:\n\n   Option 1: Create a triangle by connecting three vertices that are not forming a triangle. But note: we are in a bipartite graph (with no odd cycles). The graph is a disjoint union of edges and isolated vertices.\n\n   Example: Three isolated vertices (each in their own component). Then we can add two edges: for example, connect two of them and then connect the third to one of the two? But wait, that doesn't form a triangle.\n\n   Alternatively, we can form a triangle by connecting the three. That requires three edges. But wait, we are only allowed to add two edges? \n\n   Actually, we need to form a cycle. The cycle must be of odd length. The smallest odd cycle is 3. \n\n   How to form a cycle of length 3? We need three edges. But we are only adding two edges. \n\n   Alternatively, we can form a cycle of length 5 (which is odd) by adding two edges? \n\n   Example: Consider two edges (so two edges in the graph, forming a path of two edges). Then we can add two edges to form a cycle? \n\n   Actually, consider two edges that are not connected. Then we have four vertices. We can form a cycle of length 4 (even) by adding two edges (making a square). But we want odd.\n\n   Another idea: Consider connecting three isolated vertices. We have three vertices A, B, C. We can add edges (A,B) and (B,C). Then we have a path A-B-C. That is not a cycle. To form a cycle, we need to connect A and C as well. But that would be three edges.\n\n   Alternatively, consider a connected bipartite graph that is a tree (so no cycles) and we have more than two vertices. Then we can break it by adding edges? \n\n   Actually, the minimal odd cycle we can form by adding two edges must be of length 5? \n\n   Example: Consider a graph that is a path of three vertices: A-B-C (two edges). This is bipartite. Now, if we add two edges: say A-C and B-D (where D is a new vertex? But we can only use existing vertices). \n\n   Actually, we are only allowed to add edges between existing vertices.\n\n   Let me try with existing vertices: \n\n   We have three vertices A, B, C (edge set: {A-B, B-C}). Now, we want an odd cycle. \n\n   Option: Add edges A-C and something else? But adding A-C gives a triangle (cycle of length 3). That's one edge. \n\n   Wait, we already considered one edge. \n\n   But wait, we are in the case where every connected component has maximum part size 1. In the above example, the graph is connected and bipartite. The bipartition: A and C in one part, B in the other. Then the two parts have sizes 2 and 1. Then we can form an odd cycle by adding one edge (between A and C). \n\n   So why did we get to the two-edge case? \n\n   The two-edge case arises when the graph is bipartite and in every connected component, each part has at most one vertex. \n\n   Example: Graph with two connected components, each being an edge. Then each component has two vertices (one in each part). Then we cannot form an odd cycle by adding one edge because we cannot add an edge in the same part (each part has only one vertex). \n\n   Now, how to form an odd cycle by adding two edges? \n\n   We must form a cycle of odd length. The smallest odd cycle is 3, which requires three edges. But we are only adding two edges. \n\n   Alternatively, we can form a cycle of length 5 (which requires 5 edges, but the graph initially has some edges). \n\n   Actually, we can form a cycle of length 5 by using the existing edges and two new edges. \n\n   Example: We have two edges (two connected components, each an edge). So we have four vertices: A-B (first edge) and C-D (second edge). \n\n   Now, we want to form an odd cycle. Let's try to form a cycle of length 5: we need five edges. But we are only adding two. \n\n   Alternatively, we can form a cycle that uses the existing edges and the two new edges. \n\n   Consider: We have two edges (A-B) and (C-D). We can add edges (A-C) and (B-D). Then we have a cycle: A-B-D-C-A. That's a cycle of length 4 (even). \n\n   Or, we can add edges (A-C) and (A-D). Then the cycle: A-B ...? \n\n   Actually, we can form a cycle: A-B (existing), then from B we have no edge to D (unless we add one) and from A we have edges to C and D. \n\n   How about: \n        Edges: A-B (existing), C-D (existing), and we add A-C and B-C? Then we have a triangle: A-B-C-A. But wait, we are only adding two edges: A-C and B-C. Then the cycle A-B-C-A is a triangle (odd). \n\n   But wait, in the original graph, the two edges are in separate components. Now, we are connecting the two components by adding two edges. Then we have a triangle? \n\n   Actually, the graph now has edges: \n        A-B, C-D, A-C, B-C.\n\n   Then the cycle A-B-C-A is a triangle (odd). \n\n   However, note: the two edges we added are A-C and B-C. \n\n   But in the bipartite graph, the parts were:\n        Component1: A (color0), B (color1)\n        Component2: C (color0), D (color1)\n\n   Now, when we add edges, we break the bipartiteness. \n\n   How does this work? \n\n   We are allowed to add edges arbitrarily. \n\n   Therefore, the minimal number of edges to add in the case where no one-edge addition creates an odd cycle is 2.\n\n   How many ways are there to add two edges to form an odd cycle?\n\n   We must form an odd cycle. The odd cycle must be contained in the entire graph (after adding). Since the graph was bipartite, we cannot have an odd cycle until we break the bipartition.\n\n   In fact, we can break the bipartition by adding two edges that together form an odd cycle. \n\n   But note: we can also break the bipartition by adding two edges that connect two different components (so that we merge two bipartitions). \n\n   However, the key is: we need to form a cycle. \n\n   Let's consider:\n\n   We have a bipartite graph (no odd cycles). We are going to add two edges. We wish to form an odd cycle.\n\n   One way to form an odd cycle is to connect two vertices from the same part (same color) in the same connected component, but wait: in our condition for two edges, we said that in each connected component, each part has at most one vertex. So we cannot do that.\n\n   Therefore, we must use two edges to connect two different connected components (or within the same component, but the same component is already having at most one vertex per part, so we cannot have two vertices in the same part). \n\n   Actually, the two edges must connect two different components.\n\n   Example: Two connected components, each an edge (so two edges). Then the graph has four vertices: A,B,C,D. The bipartition: A,C in part0; B,D in part1.\n\n   Now, to form an odd cycle, we can:\n\n        Option: Connect two vertices from the same part (but they are in different components). Then we can form a cycle that goes through both components.\n\n        Specifically, we can choose two vertices from the same part (say, A and C) and connect them. Then we have edges: A-B, C-D, and A-C. Then we have a triangle? No, we have a triangle only if we have three edges and they form a cycle. But we have a cycle: A-B ...? Actually, we don't have an edge from B to C or anything. \n\n        Alternatively, we can connect two vertices from the same part and then connect two other vertices appropriately.\n\n        Actually, the way to form an odd cycle is to create an odd cycle by having a path of even length (in the original graph) and then closing the cycle with an edge that breaks the bipartition.\n\n        But note: the entire graph after adding edges must contain an odd cycle.\n\n        We can also consider: \n\n        We have two edges: (A-B) and (C-D). Then we add two edges: (A-C) and (B-D). Then we have a cycle: A-B-D-C-A. The cycle has edges: A-B, B-D, D-C, C-A -> 4 edges, even.\n\n        We add two edges: (A-C) and (A-D). Then we have a cycle: A-B (edge), then from B we don't have an edge to D, but we have from A to D. Then we have a cycle: A-B ...? Actually, no cycle of three? \n\n        Alternatively, we add (A-C) and (B-C). Then we have a cycle: A-B-C-A (triangle) and also we have the edge C-D (but D is not involved in the cycle). \n\n        This cycle A-B-C-A is formed by the edges A-B (original), B-C (added), and C-A (added). \n\n        The length is 3, which is odd.\n\n        How many ways are there to choose two edges that form an odd cycle?\n\n        Conditions for two edges:\n\n        We must choose two edges (u-v) and (x-y) such that the resulting graph has an odd cycle.\n\n        In fact, the two edges must connect two different connected components (since within a component we cannot have two edges that form an odd cycle because the component is bipartite and small). \n\n        Actually, we can also use two edges within the same component? But in our condition (each component has at most one vertex per part) then a component has at most two vertices (if it's an edge, then two vertices). Then we cannot add an edge within the same component (because the two vertices are in different parts, and adding an edge between two vertices in the same part is not allowed because we don't have two vertices in the same part). \n\n        So we must use two edges that connect two different components.\n\n        Now, in the two-component example (each an edge), we have two components: [A,B] and [C,D]. \n\n        We need to form an odd cycle. The odd cycle must use at least three edges. The two new edges and one existing edge? \n\n        Actually, the cycle we formed used two new edges and one existing edge (from the first component). \n\n        How many ways? \n\n        We must choose two edges to add. Each edge must be between two vertices from different components. \n\n        But note: we cannot add an edge that already exists. And the graph is bipartite so far.\n\n        Actually, we can form an odd cycle by connecting two components in such a way that we create a triangle. \n\n        How? \n\n        We need to pick two vertices from the first component and two from the second, but then we must connect them appropriately.\n\n        Actually, the two edges must be chosen so that they form a triangle with an existing edge.\n\n        Example: \n          Component1: A (part0), B (part1)\n          Component2: C (part0), D (part1)\n\n        We can form a triangle by connecting A to C and B to C. Then the cycle A-B-C-A uses the existing edge A-B and the two new edges A-C and B-C.\n\n        Similarly, we can form a triangle by connecting A to D and B to D: cycle A-B-D-A.\n\n        Also, we can form a triangle by connecting A to C and A to D? Then we have edges A-C and A-D. Then we don't have a cycle (unless we use the existing edge from A to B and then from B to somewhere else, but we don't have an edge from B to C or D). \n\n        Alternatively, we can form a triangle by connecting B to C and B to D? Then we have edges B-C and B-D. Then the cycle: A-B-C ...? We don't have an edge from C to A.\n\n        Therefore, the two edges must share a common vertex from one component? \n\n        Actually, to form a triangle, we must use one edge from the existing graph (which is in one component) and then two new edges that connect two vertices from the other component to the two endpoints of the existing edge.\n\n        But wait, we are merging two components. We can also form a cycle of length 5? \n\n        However, the problem is about the minimum number of edges. We are considering two edges. The cycle must be formed by two edges and some existing edges.\n\n        But note: the two edges we add can be arbitrary. The cycle must be contained in the graph. \n\n        Actually, the minimal odd cycle we can form with two edges is a triangle (length 3). \n\n        Conditions for a triangle: \n          We need three edges: two from the added edges and one existing edge. \n\n        How do we choose two edges to add to form a triangle? \n\n        We must choose two edges that connect the same two vertices from different components to two endpoints of an existing edge.\n\n        In the two-component example (each an edge), the existing edges are (A-B) and (C-D). \n\n        For the first component (A-B): we can form a triangle by connecting A to two vertices in the second component? But the second component has two vertices. We can connect A to C and A to D. Then we have edges: A-B, C-D, A-C, A-D. Then the cycle: A-B ...? Actually, we don't have a cycle. \n\n        Alternatively, we connect B to two vertices in the second component: B-C and B-D. Then we have edges: A-B, C-D, B-C, B-D. Then we have a cycle: A-B-C ...? We don't have an edge from C to A.\n\n        Actually, the triangle must use the existing edge. The triangle must be: \n            A-B (existing) and then two edges from B to two vertices in the other component? Then we don't have a triangle.\n\n        Let me draw:\n\n        Component1: A---B\n        Component2: C---D\n\n        We add two edges: say, A-C and B-C. Then we have:\n            A---B\n            |     |\n            C-----D   (but we didn't add C-D, that's already there)\n\n        Now, the cycle: A-B-C-A (edges: A-B, B-C, C-A) -> that's a triangle.\n\n        Similarly, we can add A-D and B-D: then cycle A-B-D-A.\n\n        Also, we can add A-C and A-D: then no triangle.\n\n        Therefore, the two edges must be incident to the same vertex in one component and connect to two vertices in the other component.\n\n        But note: we can also form a triangle by connecting two vertices from the first component to two vertices in the second component, but then we must use the existing edge from the second component? \n\n        Example: \n            Component1: A-B (existing)\n            Component2: C-D (existing)\n\n        We add edges: A-C and C-B. Then we have a triangle: A-B-C-A? But wait, we have edges A-B, C-B, and A-C. Then the triangle is A-B-C-A.\n\n        Similarly, we can form: \n            Using the edge C-D (from component2): \n            Add edges: A-C and C-D? Then we have a cycle: A-B (from comp1) and then from B we don't have an edge to D, but from A we have to C and from C to D. Then we have a cycle: A-C-D-C? Not a simple cycle.\n\n        Actually, the cycle must be simple. \n\n        Therefore, the two edges must be such that they form a triangle with one of the existing edges (from either component). \n\n        Now, how to count the ways?\n\n        We have two components. We can form an odd cycle by:\n\n          Type 1: Use an existing edge from the first component (say, u-v) and then add two edges from u and v to two vertices (say x and y) in the second component, but note: we must form a triangle with the existing edge. \n\n          Actually, the two edges must connect u to two vertices in the second component? Then we don't form a triangle with u-v. \n\n        Let me reexamine:\n\n          To form a triangle, we need three edges that form a cycle of three. \n\n          The triangle must be entirely in the graph. \n\n          Example: We have two components: comp1 and comp2.\n\n          Option 1: Use one edge from comp1 and two edges from comp2 to form a triangle? \n\n          But wait, we are only adding two edges. The third edge must be already present.\n\n          The triangle must use at least one existing edge.\n\n          Therefore, the triangle must be composed of:\n\n            One existing edge (say e1) and two new edges.\n\n          Then the two new edges must be incident to the two endpoints of e1 and also incident to a common vertex (from comp2) OR incident to two different vertices (from comp2) and then we need to connect those two in comp2? But we are only adding two edges.\n\n          Actually, the two new edges must be incident to the two endpoints of the existing edge and to the same vertex in comp2. \n\n          Example: \n            Existing edge: A-B (from comp1).\n            We add edges: A-C and B-C (where C is a vertex in comp2). Then the cycle A-B-C-A.\n\n          Similarly, we can use an existing edge from comp2 (say C-D) and add edges: A-C and A-D. Then the cycle: A-C-D-A? But wait, that cycle is A-C-D-A, which is a triangle? Actually, that cycle has three edges: A-C, C-D, D-A. But the edge C-D is already present (from comp2). \n\n          So that is also a triangle.\n\n          Therefore, we have two possibilities:\n\n          Possibility 1: Use an existing edge from comp1 (which is an edge) and connect its two endpoints to a single vertex in comp2 (via two new edges).\n\n          Possibility 2: Use an existing edge from comp2 (which is an edge) and connect its two endpoints to a single vertex in comp1 (via two new edges).\n\n          But note: the graph has multiple edges? \n\n          Actually, we have two edges (the two new ones). \n\n          How many ways?\n\n          For Possibility 1 (using an edge from comp1 and connecting to comp2):\n\n            comp1 has edges: each edge is a component (so one edge). Let comp1 have m1 edges? Actually, no: in our condition, each component has at most one edge (because if a component has more than one edge, then it has more than two vertices and then one part would have at least two vertices, so we would have been able to form an odd cycle by adding one edge). \n\n          Actually, wait: our condition for two edges is that in every connected component, the maximum part size is 1. Then each connected component is either an isolated vertex or an edge. \n\n          So we have two types of components:\n\n            Type I: Isolated vertex (one vertex, no edges). \n            Type II: An edge (two vertices, one edge).\n\n          Now, if we have at least two type-II components, then we can form an odd cycle by two edges.\n\n          How?\n\n          Let the graph have k components of type-II (edges) and l components of type-I (isolated vertices).\n\n          Then, the total ways to add two edges to form an odd cycle:\n\n          We must choose two edges to add. But note: we cannot add an edge within a component (because they are edges and isolated vertices, so no same-part edges to add). \n\n          We must connect two different components.\n\n          Actually, we can use:\n\n          Option A: Use two edges to connect two type-II components to form an odd cycle.\n\n          Option B: Use two edges to connect one type-II component and one or two type-I components.\n\n          But note: we need to form an odd cycle (a triangle). \n\n          Example: \n\n          Two type-II components: comp1: {A-B}, comp2: {C-D}. \n\n          Then, as above, we can form a triangle by:\n\n            - Taking an edge from comp1 (A-B) and connecting A and B to a common vertex in comp2 (either C or D). \n\n            But wait, comp2 has two vertices. We can connect A and B to C, or A and B to D, or A and B to both C and D (but that's two edges, but then we form two triangles: A-B-C-A and A-B-D-A, but actually we are adding two edges: either (A-C, B-C) or (A-D, B-D) or (A-C, A-D) [but (A-C, A-D) doesn't form a triangle] or (B-C, B-D) [similarly] or (A-C, B-D) [then we form a cycle A-B-D-C-A, which is even].\n\n          Actually, the two edges must be incident to the same vertex in the other component to form a triangle.\n\n          Therefore, for comp1 and comp2, the ways are:\n\n            Use comp1 and comp2: \n                - Choose the edge from comp1 (only one edge) and then choose a vertex in comp2 (two choices: C or D) and connect both endpoints of comp1's edge to that vertex.\n\n                Similarly, use comp2's edge and connect both endpoints of comp2's edge to a vertex in comp1 (two choices: A or B).\n\n            However, note: we are only adding two edges. \n\n            So for comp1 and comp2:\n\n                Ways from comp1: 2 (connect to C or D)\n                Ways from comp2: 2 (connect to A or B)\n\n            Total for the pair (comp1, comp2): 2 + 2 = 4.\n\n          But wait, the two edges are unordered. However, note that the two possibilities (using comp1's edge and connecting to comp2, or using comp2's edge and connecting to comp1) are distinct.\n\n          Now, if we have more than two type-II components?\n\n          Actually, the problem does not specify the exact structure, so we must generalize.\n\n          However, note: the graph might have multiple type-II components and type-I components.\n\n          Steps:\n\n          Let the graph be bipartite. Then we check:\n\n            Step 1: Check for non-bipartiteness (already has an odd cycle) -> then t=0, w=1.\n\n            Step 2: If bipartite, then:\n\n                    Let the graph have several connected components.\n\n                    For each component, we record the bipartition (two sets, say left and right). The component is bipartite, so we know the two parts.\n\n                    Then, the condition for t=1 is that at least one component has a part with at least two vertices.\n\n                    If yes, then t=1 and w = sum_{each component} [C(|left|,2) + C(|right|,2)].\n\n                    Otherwise, if no component has a part with at least two vertices, then t=2.\n\n                    Then we need to count the number of ways to add two edges that form an odd cycle.\n\n          How to count for t=2?\n\n          We must form an odd cycle (a triangle) by adding two edges.\n\n          The triangle must be formed by two new edges and one existing edge (which is part of the graph). \n\n          The two new edges must be incident to the two endpoints of the existing edge and to a common vertex (from a different component) OR to two different vertices (from a different component) and then we use an existing edge between those two? But wait, the two new edges and one existing edge must form a triangle.\n\n          Actually, the two new edges must be:\n\n            Case 1: The two new edges are incident to the same vertex in a different component (then we form a triangle with the existing edge).\n\n            Case 2: Alternatively, we could use two existing edges? No, because we are",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges required to add to an undirected graph to form a simple cycle of odd length, and the number of ways to achieve this. The solution involves checking if the graph already contains an odd cycle or if it is bipartite (which means no odd cycles exist). Based on these checks, we proceed to calculate the required edges and their count.\n\n### Approach\n1. **Check for Bipartiteness**: A graph is bipartite if it can be colored with two colors such that no two adjacent vertices have the same color. If the graph is not bipartite, it already contains an odd cycle, so the answer is `0 1`.\n2. **Bipartite Graph Handling**: If the graph is bipartite, we then check each connected component:\n   - **t=1 Scenario**: If any component has at least one part with two or more vertices, adding one edge between two vertices in the same part will create an odd cycle. The number of ways to do this is the sum of combinations of choosing two vertices from each part in all components.\n   - **t=2 Scenario**: If all components have each part with at most one vertex, we need to add two edges to form an odd cycle. This involves connecting vertices from different components in specific ways to form a triangle. The number of ways is calculated by considering all pairs of components and the possible edges that can be added to form triangles.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index+1])\n        index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    visited = [False] * (n+1)\n    \n    for i in range(1, n+1):\n        if not visited[i] and color[i] == -1:\n            comp_nodes = []\n            queue = deque([i])\n            color[i] = 0\n            comp_parts = [0, 0]\n            comp_parts[0] += 1\n            visited[i] = True\n            while queue:\n                node = queue.popleft()\n                comp_nodes.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                        comp_parts[color[neighbor]] += 1\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append((comp_parts[0], comp_parts[1]))\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_t1 = 0\n    for a, b in components:\n        total_ways_t1 += a*(a-1)//2 + b*(b-1)//2\n            \n    if total_ways_t1 > 0:\n        print(f\"1 {total_ways_t1}\")\n        return\n        \n    t = 2\n    w = 0\n    num_edges_components = sum(1 for a, b in components if a == 1 and b == 1)\n    if num_edges_components >= 2:\n        ways_between_two_edges = 0\n        for i in range(len(components)):\n            if components[i] == (1,1):\n                for j in range(i+1, len(components)):\n                    if components[j] == (1,1):\n                        ways_between_two_edges += 4\n        w = ways_between_two_edges\n        \n    isolated_vertices = sum(a for a, b in components if a == 1 and b == 0) + sum(b for a, b in components if a == 0 and b == 1)\n    if num_edges_components == 0 and isolated_vertices >= 3:\n        w = 1\n    else:\n        if isolated_vertices >= 3:\n            w += 1\n            \n    if w == 0:\n        w = 0\n        \n    print(f\"{t} {w}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Input Reading**: The input is read and parsed into the number of vertices `n` and edges `m`, followed by the edges themselves.\n2. **Graph Construction**: The graph is constructed using adjacency lists.\n3. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component is found to be non-bipartite, the answer is immediately `0 1`.\n4. **t=1 Calculation**: If the graph is bipartite, for each component, the number of ways to form an odd cycle by adding one edge is calculated by summing combinations of vertices within the same part.\n5. **t=2 Calculation**: If no t=1 scenario exists, the solution checks for forming an odd cycle by adding two edges. This involves counting valid configurations where two edges can form a triangle with existing edges, considering both connected and disconnected components.\n6. **Output**: The results are printed based on whether t=0, t=1, or t=2 scenarios are met, along with the corresponding number of ways `w`.\n\nThis approach efficiently checks for the presence of odd cycles and calculates the minimal edge additions required, ensuring optimal performance even for large graphs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index+1])\n        index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    visited = [False] * (n+1)\n    \n    for i in range(1, n+1):\n        if not visited[i] and color[i] == -1:\n            comp_nodes = []\n            queue = deque([i])\n            color[i] = 0\n            comp_parts = [0, 0]\n            comp_parts[0] += 1\n            visited[i] = True\n            while queue:\n                node = queue.popleft()\n                comp_nodes.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                        comp_parts[color[neighbor]] += 1\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append((comp_parts[0], comp_parts[1]))\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_t1 = 0\n    for a, b in components:\n        total_ways_t1 += a*(a-1)//2 + b*(b-1)//2\n            \n    if total_ways_t1 > 0:\n        print(f\"1 {total_ways_t1}\")\n        return\n        \n    t = 2\n    w = 0\n    num_edges_components = sum(1 for a, b in components if a == 1 and b == 1)\n    if num_edges_components >= 2:\n        ways_between_two_edges = 0\n        for i in range(len(components)):\n            if components[i] == (1,1):\n                for j in range(i+1, len(components)):\n                    if components[j] == (1,1):\n                        ways_between_two_edges += 4\n        w = ways_between_two_edges\n        \n    isolated_vertices = sum(a for a, b in components if a == 1 and b == 0) + sum(b for a, b in components if a == 0 and b == 1)\n    if num_edges_components == 0 and isolated_vertices >= 3:\n        w = 1\n    else:\n        if isolated_vertices >= 3:\n            w += 1\n            \n    if w == 0:\n        w = 0\n        \n    print(f\"{t} {w}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1212,
        "thoughts_token_count": 8191
    }
}