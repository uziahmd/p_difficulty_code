{
    "start": 1758093142.682896,
    "end": 1758094933.9770508,
    "start-formatted": "2025-09-17 16:12 KST",
    "end-formatted": "2025-09-17 16:42 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n We are given up to 100000 souvenirs, each with weight in {1,2,3} and cost up to 10^9.\n Since the weights are only 1, 2, or 3, we can group the souvenirs by weight.\n\n Let:\n   type1 = list of costs for weight 1\n   type2 = list of costs for weight 2\n   type3 = list of costs for weight 3\n\n Then the total weight is a combination of a1 (from type1), a2 (from type2), a3 (from type3) such that:\n   a1 * 1 + a2 * 2 + a3 * 3 <= m\n\n We want to maximize: (sum of selected from type1) + (sum of selected from type2) + (sum of selected from type3)\n\n However, note that we don't necessarily take all. But we have three independent groups.\n\n Idea:\n   For each type, we want to choose items (non-decreasing by cost? but note: we can sort and then use knapSack-like DP, but m can be up to 300000 and n up to 100000, so we need an efficient way.\n\n Observation: The problem is similar to the bounded knapsack problem but with very small weights (only 1,2,3). However, note that the number of items per type might be large, but the weights are small.\n\n But note: we can take as many as we want from each type, but the total weight is limited.\n\n However, we cannot use a naive DP because m is up to 300000 and we have three types.\n\n Alternative approach:\n\n   Step 1: Precompute for each type the best way to get a total weight that is a multiple of the weight (for type1: any integer, for type2: even, for type3: multiples of 3).\n\n   But note: we are allowed to mix the types arbitrarily.\n\n   Another idea: since the weights are only 1,2,3, we can consider iterating over the possible counts for one of the types and then use two-dimensional DP? But that would be too heavy.\n\n   Alternatively, we can precompute for each type the maximum total cost for a given total weight (but the total weight for each type can be up to about 300000/1, 300000/2, 300000/3 which is still 300000, so we can do:\n\n   For each type, we can compute an array dp[type][w] = maximum total cost for that type using total weight w.\n\n   However, the state space for each type is up to 300000 and we have three types, and then we would need to combine them. That's 3 * 300000 states, which is 900000, but then combining three arrays for three different weights? Actually, we have to consider combinations of weights from the three types.\n\n   Alternatively, we can use the following:\n\n   Step 1: Sort each type by cost (so we have the most valuable items first). Then, for each type, we can compute the maximum total cost for a given number of items (or for a given total weight) by taking the top k items.\n\n   Then, for type1, let f1(x) = maximum total cost for x items (x being the count, so weight x). Similarly for type2: f2(x) for 2*x weight, and type3: f3(x) for 3*x weight.\n\n   But note: we can also not take all items, so we want to consider taking k items from type1, l items from type2, p items from type3 such that k + 2*l + 3*p <= m.\n\n   Then the total cost is f1(k) + f2(l) + f3(p). We need to maximize this.\n\n   How to compute f1 for type1?\n     Since the items in type1 have weight 1, we can sort the type1 array in descending order and then the maximum total cost for k items is the sum of the top k.\n\n   Similarly for type2 and type3.\n\n   Now, we can iterate over the number of items from type3 (say p from 0 to floor(m/3)), then for each p, we have remaining weight m - 3*p, and we need to choose k and l (nonnegative integers) such that k + 2*l <= remaining_weight.\n\n   Then we want to maximize f1(k) + f2(l) for k+2*l <= R, where R = m - 3*p.\n\n   But note: the total weight from type1 and type2 is",
    "response": "\nTo solve this problem, we need to maximize the total cost of souvenirs that Petya can carry to the market without exceeding a given weight limit. The souvenirs have weights of either 1, 2, or 3 units, and each has a corresponding cost. The challenge is to select a subset of these souvenirs such that their combined weight is within the limit and their total cost is as high as possible.\n\n### Approach\n1. **Grouping by Weight**: First, we group all souvenirs by their weights (1, 2, or 3). This allows us to handle each type separately.\n2. **Sorting and Prefix Sums**: For each group, we sort the items in descending order of their costs. We then compute prefix sums for each group. These prefix sums help in quickly determining the maximum cost achievable by selecting any number of items from the group.\n3. **Iterate Over Possible Counts**: For each possible count of souvenirs from the group with weight 3, we calculate the remaining weight available for the other groups. Using the prefix sums from the other groups, we determine the maximum cost achievable within the remaining weight. This involves checking combinations of items from the weight 1 and weight 2 groups to find the optimal solution.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    type1 = []\n    type2 = []\n    type3 = []\n    \n    index = 2\n    for i in range(n):\n        w = int(data[index]); c = int(data[index+1]); index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    def build_prefix(arr):\n        arr.sort(reverse=True)\n        pref = [0]\n        total = 0\n        for num in arr:\n            total += num\n            pref.append(total)\n        return pref\n    \n    pref1 = build_prefix(type1)\n    pref2 = build_prefix(type2)\n    pref3 = build_prefix(type3)\n    \n    def get_max_cost(pref, max_items):\n        if max_items < len(pref):\n            return pref[max_items]\n        else:\n            return pref[-1]\n            \n    best = 0\n    total_count3 = len(type3)\n    for p in range(total_count3 + 1):\n        weight_used3 = p * 3\n        if weight_used3 > m:\n            break\n        remaining_weight = m - weight_used3\n        if remaining_weight < 0:\n            continue\n            \n        max_cost_here = 0\n        \n        max_count1 = remaining_weight\n        max_count2 = remaining_weight // 2\n        \n        if max_count1 >= len(pref1):\n            part1 = pref1[-1]\n        else:\n            part1 = pref1[max_count1]\n            \n        if max_count2 >= len(pref2):\n            part2 = pref2[-1]\n        else:\n            part2 = pref2[max_count2]\n            \n        current = part1 + part2\n        if current > max_cost_here:\n            max_cost_here = current\n            \n        for k in range(1, len(pref2) + 1):\n            weight_used2 = 2 * k\n            if weight_used2 > remaining_weight:\n                break\n            remaining_after2 = remaining_weight - weight_used2\n            part2_val = pref2[k]\n            part1_val = get_max_cost(pref1, remaining_after2)\n            total_val = part1_val + part2_val\n            if total_val > max_cost_here:\n                max_cost_here = total_val\n                \n        if max_cost_here > best:\n            best = max_cost_here\n            \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The input is read and parsed into the number of souvenirs `n` and the maximum allowed weight `m`. The souvenirs are then categorized into three lists based on their weights (1, 2, or 3).\n2. **Sorting and Prefix Sums**: Each list of souvenirs is sorted in descending order of cost. Prefix sums are computed for each list to facilitate quick calculation of the maximum cost for any number of items selected from that list.\n3. **Iterating Over Weight 3 Items**: For each possible count of items from the weight 3 group, the remaining weight is calculated. The maximum cost achievable with the remaining weight is determined by considering combinations of items from the weight 1 and weight 2 groups using their prefix sums.\n4. **Combination Check**: For each combination of items from the weight 2 group, the remaining weight is used to check the maximum cost from the weight 1 group. The highest total cost encountered during this process is stored and printed as the result.\n\nThis approach efficiently narrows down the problem by leveraging the constraints on item weights and using prefix sums to optimize the selection process, ensuring optimal performance even for large input sizes.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    type1 = []\n    type2 = []\n    type3 = []\n    \n    index = 2\n    for i in range(n):\n        w = int(data[index]); c = int(data[index+1]); index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    def build_prefix(arr):\n        arr.sort(reverse=True)\n        pref = [0]\n        total = 0\n        for num in arr:\n            total += num\n            pref.append(total)\n        return pref\n    \n    pref1 = build_prefix(type1)\n    pref2 = build_prefix(type2)\n    pref3 = build_prefix(type3)\n    \n    def get_max_cost(pref, max_items):\n        if max_items < len(pref):\n            return pref[max_items]\n        else:\n            return pref[-1]\n            \n    best = 0\n    total_count3 = len(type3)\n    for p in range(total_count3 + 1):\n        weight_used3 = p * 3\n        if weight_used3 > m:\n            break\n        remaining_weight = m - weight_used3\n        if remaining_weight < 0:\n            continue\n            \n        max_cost_here = 0\n        \n        max_count1 = remaining_weight\n        max_count2 = remaining_weight // 2\n        \n        if max_count1 >= len(pref1):\n            part1 = pref1[-1]\n        else:\n            part1 = pref1[max_count1]\n            \n        if max_count2 >= len(pref2):\n            part2 = pref2[-1]\n        else:\n            part2 = pref2[max_count2]\n            \n        current = part1 + part2\n        if current > max_cost_here:\n            max_cost_here = current\n            \n        for k in range(1, len(pref2) + 1):\n            weight_used2 = 2 * k\n            if weight_used2 > remaining_weight:\n                break\n            remaining_after2 = remaining_weight - weight_used2\n            part2_val = pref2[k]\n            part1_val = get_max_cost(pref1, remaining_after2)\n            total_val = part1_val + part2_val\n            if total_val > max_cost_here:\n                max_cost_here = total_val\n                \n        if max_cost_here > best:\n            best = max_cost_here\n            \n    print(best)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 476,
        "completion_token_count": 1106,
        "thoughts_token_count": 1023
    }
}