{
    "start": 1758092348.1493766,
    "end": 1758094064.3846216,
    "start-formatted": "2025-09-17 15:59 KST",
    "end-formatted": "2025-09-17 16:27 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n We are given up to 100000 souvenirs, each with weight in {1,2,3} and cost up to 10^9.\n Since the weights are only 1, 2, or 3, we can group the souvenirs by weight.\n\n Let:\n   type1 = list of costs for souvenirs with weight 1\n   type2 = list of costs for souvenirs with weight 2\n   type3 = list of costs for souvenirs with weight 3\n\n Then, we have to choose a combination of souvenirs such that the total weight <= m.\n\n The total weight is: 1*x + 2*y + 3*z <= m.\n\n And the total cost is: x * (some value from type1) + y * (some value from type2) + z * (some value from type3)\n\n However, note: we can choose any subset from each type. But since we want maximum cost, we would choose the most expensive ones first.\n\n Steps:\n\n 1. Sort each type in descending order (so the most expensive is first).\n 2. Precompute prefix sums for each type so that we can quickly get the sum of the top k items for each weight.\n\n But note: we are allowed to use multiple items from the same type? Actually, no: each souvenir is distinct and we have one copy of each? \n Actually, the input has n lines, each line is a souvenir. So we can use at most the number available in each type.\n\n However, the problem does not specify that there are duplicates. Each souvenir is given once.\n\n But note: the input says \"n lines follow. ith line contains two integers wi and ci\"\n\n So we have n distinct souvenirs, but they are grouped by weight.\n\n Let:\n   count1 = len(type1), count2 = len(type2), count3 = len(type3)\n\n Then, we can use at most count1 items from type1, count2 from type2, and count3 from type3.\n\n Now, we need to consider all possible combinations (x, y, z) such that:\n   x <= count1, y <= count2, z <= count3\n   and 1*x + 2*y + 3*z <= m\n\n Then the total cost is: (prefix1[x] if we take x items from type1) + (prefix2[y]) + (prefix3[z])\n\n But note: the prefix arrays for each type should be computed by taking the top x items (because we want maximum cost).\n\n However, the challenge is that m can be up to 300000 and the counts can be up to 100000, so iterating over all x, y, z is too expensive.\n\n Alternative approach:\n\n Since the weights are small (only 1, 2, 3) and the total weight is bounded by m (up to 300000), we can use dynamic programming.\n\n But note: n can be 100000, and m up to 300000. However, the state space might be too large if we try to do DP with weight as the state.\n\n Another idea: we can break down the problem by the number of items of each weight.\n\n Let:\n   Let x be the number of type1 items (each weight 1)\n   Let y be the number of type2 items (each weight 2)\n   Let z be the number of type3 items (each weight 3)\n\n Then, we require:\n   x + 2y + 3z <= m.\n\n And the cost is the sum of the top x from type1, top y from type2, top z from type3.\n\n We can precompute for each type the prefix sums.\n\n Then, we can iterate over z (from 0 to min(count3, m//3)), then for each z, we know the remaining weight is R = m - 3*z.\n Then, we have to allocate R to x and y (with x,y nonnegative integers) such that x + 2y <= R, and also x<=count1, y<=count2.\n\n Then the cost for a fixed (x,y,z) is prefix1[x] + prefix2[y] + prefix3[z].\n\n But then we have to iterate over z, and for each z, we have to consider all x and y such that x+2y <= R.\n\n How to avoid iterating over all x and y for each z?\n\n Alternatively, we can iterate over y and z, then x is determined by R - 2y (but then we have to check x>=0 and x<=min(count1, R-2y)).\n\n But the total range of z is about 0 to 100000 (if count3 is 100000) and similarly for y,",
    "response": "\nTo solve this problem, we need to maximize the total cost of souvenirs that Petya can carry to the market without exceeding a given weight limit. Each souvenir has a weight of either 1, 2, or 3, and a corresponding cost. The challenge is to select a subset of these souvenirs such that their combined weight is within the limit, and their total cost is as high as possible.\n\n### Approach\n1. **Grouping by Weight**: First, we group all souvenirs by their weights (1, 2, or 3) into three separate lists.\n2. **Sorting and Prefix Sums**: For each group, we sort the souvenirs in descending order of their costs. Then, we compute prefix sums for each group. These prefix sums allow us to quickly access the sum of the top k most expensive items in any group.\n3. **Iterate Over Possible Combinations**: We iterate over all possible numbers of type 3 souvenirs (weight 3). For each number, we calculate the remaining weight capacity and then determine the optimal combination of type 1 and type 2 souvenirs that fit within this remaining weight. This involves using binary search to find the maximum number of type 2 souvenirs that can be included without exceeding the remaining weight, and then using the prefix sums to get the corresponding maximum costs.\n\n### Solution Code\n```python\nimport bisect\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    \n    type1 = []\n    type2 = []\n    type3 = []\n    \n    for i in range(n):\n        w = int(data[index])\n        c = int(data[index+1])\n        index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    prefix1 = [0]\n    prefix2 = [0]\n    prefix3 = [0]\n    \n    for i in range(len(type1)):\n        prefix1.append(prefix1[-1] + type1[i])\n        \n    for i in range(len(type2)):\n        prefix2.append(prefix2[-1] + type2[i])\n        \n    for i in range(len(type3)):\n        prefix3.append(prefix3[-1] + type3[i])\n        \n    ans = 0\n    \n    for z in range(len(prefix3)):\n        if z >= len(type3) or prefix3[z] < prefix3[z-1]:\n            break\n        rem = m - 3 * z\n        if rem < 0:\n            break\n            \n        if rem == 0:\n            total = prefix3[z]\n            if total > ans:\n                ans = total\n            continue\n            \n        y_max = min(len(type2), rem // 2)\n        y_max = min(y_max, len(prefix2) - 1)\n        y_opt = y_max\n        \n        if rem % 2 == 0:\n            rem_after_y = rem - 2 * y_opt\n            x_opt = min(len(type1), rem_after_y)\n            total_cost = prefix3[z] + prefix2[y_opt] + prefix1[x_opt]\n            if total_cost > ans:\n                ans = total_cost\n        else:\n            rem_after_y_even = rem - 2 * y_opt\n            x_opt_even = min(len(type1), rem_after_y_even)\n            total_cost_even = prefix3[z] + prefix2[y_opt] + prefix1[x_opt_even]\n            if total_cost_even > ans:\n                ans = total_cost_even\n                \n            rem_after_y_odd = rem - 2 * (y_opt - 1)\n            x_opt_odd = min(len(type1), rem_after_y_odd)\n            total_cost_odd = prefix3[z] + prefix2[y_opt-1] + prefix1[x_opt_odd]\n            if total_cost_odd > ans:\n                ans = total_cost_odd\n                \n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The input is read and parsed into the number of souvenirs `n` and the maximum allowed weight `m`.\n2. **Grouping Souvenirs**: Souvenirs are grouped by their weights (1, 2, or 3) into three separate lists.\n3. **Sorting and Prefix Sums**: Each group is sorted in descending order of cost. Prefix sums are computed for each group to facilitate quick summation of the top k items.\n4. **Iterating Over Type 3 Souvenirs**: For each possible count of type 3 souvenirs, the remaining weight capacity is calculated. Within this remaining capacity, the optimal combination of type 1 and type 2 souvenirs is determined by considering both even and odd weight distributions (to handle cases where the remaining weight is odd).\n5. **Output the Result**: The maximum total cost encountered during the iteration is printed. If no valid combination is found, the result is 0.\n\nThis approach efficiently narrows down the problem by leveraging the constraints on souvenir weights and uses sorting and prefix sums to optimize the selection process.",
    "ground_truth": "N/A",
    "extracted_answer": "import bisect\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    \n    type1 = []\n    type2 = []\n    type3 = []\n    \n    for i in range(n):\n        w = int(data[index])\n        c = int(data[index+1])\n        index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    prefix1 = [0]\n    prefix2 = [0]\n    prefix3 = [0]\n    \n    for i in range(len(type1)):\n        prefix1.append(prefix1[-1] + type1[i])\n        \n    for i in range(len(type2)):\n        prefix2.append(prefix2[-1] + type2[i])\n        \n    for i in range(len(type3)):\n        prefix3.append(prefix3[-1] + type3[i])\n        \n    ans = 0\n    \n    for z in range(len(prefix3)):\n        if z >= len(type3) or prefix3[z] < prefix3[z-1]:\n            break\n        rem = m - 3 * z\n        if rem < 0:\n            break\n            \n        if rem == 0:\n            total = prefix3[z]\n            if total > ans:\n                ans = total\n            continue\n            \n        y_max = min(len(type2), rem // 2)\n        y_max = min(y_max, len(prefix2) - 1)\n        y_opt = y_max\n        \n        if rem % 2 == 0:\n            rem_after_y = rem - 2 * y_opt\n            x_opt = min(len(type1), rem_after_y)\n            total_cost = prefix3[z] + prefix2[y_opt] + prefix1[x_opt]\n            if total_cost > ans:\n                ans = total_cost\n        else:\n            rem_after_y_even = rem - 2 * y_opt\n            x_opt_even = min(len(type1), rem_after_y_even)\n            total_cost_even = prefix3[z] + prefix2[y_opt] + prefix1[x_opt_even]\n            if total_cost_even > ans:\n                ans = total_cost_even\n                \n            rem_after_y_odd = rem - 2 * (y_opt - 1)\n            x_opt_odd = min(len(type1), rem_after_y_odd)\n            total_cost_odd = prefix3[z] + prefix2[y_opt-1] + prefix1[x_opt_odd]\n            if total_cost_odd > ans:\n                ans = total_cost_odd\n                \n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 468,
        "completion_token_count": 1145,
        "thoughts_token_count": 1023
    }
}