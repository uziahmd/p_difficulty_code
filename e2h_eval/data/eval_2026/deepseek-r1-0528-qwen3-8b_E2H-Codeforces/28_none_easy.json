{
    "start": 1758293083.7178965,
    "end": 1758293154.6131723,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:45 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    \n    # The number of operations needed to reduce the string to length 1\n    # Each operation reduces the length by 1\n    # So we need (total_length - 1) operations\n    # Let's simulate the process of reducing the string\n    # We can track the number of 0s and 1s at each step\n    \n    # Start with n zeros and m ones\n    zeros = n\n    ones = m\n    \n    for _ in range(total_length - 1):\n        if zeros >= 2:\n            zeros -= 1\n            ones += 0\n        elif ones >= 2:\n            ones -= 1\n            zeros += 0\n        else:\n            break\n    \n    # After all possible reductions, we have one character left\n    # It must be equal to g\n    if (zeros + ones) != 1:\n        print(0)\n        return\n    \n    final_char = zeros + ones\n    if final_char != g:\n        print(0)\n        return\n    \n    # Now count the number of beautiful strings\n    # We need to count the number of ways to arrange n zeros and m ones\n    # such that after reduction, the final character is g\n    # This depends on the parity of the number of 0s and 1s during reduction\n    \n    # To simplify, we can use the following approach:\n    # The final character is determined by the parity of the number of 0s and 1s\n    # If we have an even number of 0s, then the final character is 0\n    # If we have an odd number of 0s, then the final character is 1\n    # Similarly for 1s\n    \n    # So the final character is 0 if the number of 0s is even, else 1\n    # So we need the number of strings with exactly n zeros and m ones where\n    # the number of 0s is even if g == 0, or odd if g == 1\n    \n    if g == 0:\n        # Count number of strings with even number of 0s\n        # Total number of strings = C(n + m, n)\n        # Number of strings with even number of 0s = (C(n + m, n) + C(n + m, n - 2) + ...) / 2\n        # Using generating functions or combinatorics formula\n        total = 0\n        for k in range(0, n + 1, 2):\n            total += comb(n + m, k)\n        print(total % MOD)\n    else:\n        # Count number of strings with odd number of 0s\n        total = 0\n        for k in range(1, n + 1, 2):\n            total += comb(n + m, k)\n        print(total % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    \n    # The number of operations needed to reduce the string to length 1\n    # Each operation reduces the length by 1\n    # So we need (total_length - 1) operations\n    # Let's simulate the process of reducing the string\n    # We can track the number of 0s and 1s at each step\n    \n    # Start with n zeros and m ones\n    zeros = n\n    ones = m\n    \n    for _ in range(total_length - 1):\n        if zeros >= 2:\n            zeros -= 1\n            ones += 0\n        elif ones >= 2:\n            ones -= 1\n            zeros += 0\n        else:\n            break\n    \n    # After all possible reductions, we have one character left\n    # It must be equal to g\n    if (zeros + ones) != 1:\n        print(0)\n        return\n    \n    final_char = zeros + ones\n    if final_char != g:\n        print(0)\n        return\n    \n    # Now count the number of beautiful strings\n    # We need to count the number of ways to arrange n zeros and m ones\n    # such that after reduction, the final character is g\n    # This depends on the parity of the number of 0s and 1s during reduction\n    \n    # To simplify, we can use the following approach:\n    # The final character is determined by the parity of the number of 0s and 1s\n    # If we have an even number of 0s, then the final character is 0\n    # If we have an odd number of 0s, then the final character is 1\n    # Similarly for 1s\n    \n    # So the final character is 0 if the number of 0s is even, else 1\n    # So we need the number of strings with exactly n zeros and m ones where\n    # the number of 0s is even if g == 0, or odd if g == 1\n    \n    if g == 0:\n        # Count number of strings with even number of 0s\n        # Total number of strings = C(n + m, n)\n        # Number of strings with even number of 0s = (C(n + m, n) + C(n + m, n - 2) + ...) / 2\n        # Using generating functions or combinatorics formula\n        total = 0\n        for k in range(0, n + 1, 2):\n            total += comb(n + m, k)\n        print(total % MOD)\n    else:\n        # Count number of strings with odd number of 0s\n        total = 0\n        for k in range(1, n + 1, 2):\n            total += comb(n + m, k)\n        print(total % MOD)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 549,
        "completion_token_count": 700,
        "thoughts_token_count": 0
    }
}