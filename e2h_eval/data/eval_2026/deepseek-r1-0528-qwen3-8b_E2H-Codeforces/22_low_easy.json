{
    "start": 1758294608.1230845,
    "end": 1758297368.120964,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:56 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n We are given the first line as two integers n and m, then n lines of m characters (without spaces)\n We'll read the input, then process the gradebook.\n\n Steps:\n 1. Read the first line to get n and m.\n 2. Read the next n lines and form a list of strings (each string is a row of m characters).\n\n Since each student is successful if there exists at least one subject in which they are the best,\n we can do the following:\n\n For each subject j (column j):\n   - Find the maximum mark in that column.\n   - Then, for each student i, check if in subject j they have the maximum mark? But note: there might be multiple students with the same maximum mark.\n\n However, note: \"best\" means having the highest mark. If two or more students have the same highest mark, then they are all considered best for that subject.\n\n Therefore, for a subject j, let max_mark = maximum value in that column.\n Then, any student i such that the mark in subject j is equal to max_mark is considered best at subject j.\n\n But a student is successful if at least one subject he is best.\n\n Approach:\n We can create an array `is_best` for each student (boolean) initially False.\n Alternatively, we can create a 2D boolean grid (n x m) where grid[i][j] is True if student i is best in subject j.\n\n However, we can also think: For each student, we want to know if there's at least one subject j for which:\n   grade[i][j] == max_grade[j]\n\n Steps:\n\n 1. Read n and m.\n 2. Read the n lines and store in a list `grades` of n strings.\n\n 3. Create a list `max_marks` for each subject (each column). There are m columns.\n\n    We can do:\n        max_marks[j] = max( int(grades[i][j]) for i in range(n) )\n\n 4. Now, for each student i, we can check for any subject j (from 0 to m-1) whether grades[i][j] == str(max_marks[j])\n\n    But note: the marks are given as characters, so we can compare directly as characters? \n    However, the max_marks we computed from integer conversion. Alternatively, we can compute max_marks as the maximum character in the column (since '1' to '9')?\n\n    Actually, since the marks are digits from '1' to '9', we can compare by the character itself because '9' > '8' etc.\n\n    Let's change: we can compute max_marks as the maximum character in each column.\n\n    Alternatively, we can avoid converting to int and just use the character comparison.\n\n    Steps for max_marks for column j:\n        max_char = max( grades[i][j] for i in range(n) )\n\n 5. Then for student i, we check for any j from 0 to m-1:\n        if grades[i][j] == max_char_j: then this student is best at subject j.\n\n 6. If at least one subject j exists for student i, then student i is successful.\n\n 7. Count the number of successful students.\n\n Example: \n     Input: \"3 3\\n223\\n232\\n112\"\n\n     Grades:\n        student0: \"223\"\n        student1: \"232\"\n        student2: \"112\"\n\n     Columns:\n        col0: ['2','2','1'] -> max is '2'\n        col1: ['2','3','1'] -> max is '3'\n        col2: ['3','2','2'] -> max is '3'\n\n     Now, for student0: \n        col0: '2' == '2' -> True\n        col1: '2' == '3' -> False\n        col2: '3' == '3' -> True\n        So student0 has at least one True -> successful.\n\n     Student1:\n        col0: '2' == '2' -> True\n        col1: '3' == '3' -> True\n        col2: '2' == '3' -> False\n        Successful.\n\n     Student2:\n        col0: '1' == '2' -> False\n        col1: '1' == '3' -> False\n        col2: '2' == '3' -> False\n        Not successful.\n\n     So output is 2.\n\n Implementation:\n\n     n, m = map(int, input().split())\n     grades = []\n     for i in range(n):\n         grades.append(input().strip())\n\n     # If the input was provided as a single string (like in the example) but note: the problem says first line has two integers and then n lines.\n     # But the example input is given as a list of strings.",
    "response": "\nTo solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark in that subject.\n\n### Approach\n1. **Input Reading**: Read the number of students (n) and subjects (m) from the first line of input. Then read the next n lines, each representing a student's marks across m subjects.\n2. **Determine Maximum Marks per Subject**: For each subject, find the highest mark achieved by any student. This involves iterating through each column (subject) of the gradebook and identifying the maximum value.\n3. **Check for Best Students**: For each student, check if they have the highest mark in any subject. If a student has the highest mark in at least one subject, they are marked as successful.\n4. **Count Successful Students**: The total number of students who meet the criteria in the previous step is the answer.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    if not data:\n        print(0)\n        return\n        \n    n, m = map(int, data[0].split())\n    grades = []\n    for i in range(1, 1 + n):\n        grades.append(data[i].strip())\n    \n    max_marks_per_subject = [max(grades[j][i] for j in range(n)) for i in range(m)]\n    \n    successful = 0\n    for i in range(n):\n        for j in range(m):\n            if grades[i][j] == max_marks_per_subject[j]:\n                successful += 1\n                break\n    \n    print(successful)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The code reads all input lines at once and processes them. The first line contains the integers n (number of students) and m (number of subjects). Subsequent lines contain each student's marks as a string of digits.\n2. **Finding Maximum Marks**: For each subject (column), the code determines the highest mark by comparing all students' marks in that subject. This is stored in `max_marks_per_subject`.\n3. **Checking Student Performance**: For each student, the code checks if their mark in any subject matches the highest mark for that subject. If so, the student is counted as successful.\n4. **Output Result**: The total count of successful students is printed.\n\nThis approach efficiently checks each student's performance against the highest marks in each subject, ensuring accurate identification of successful students. The solution handles edge cases such as all students having the same marks or no students being successful.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    if not data:\n        print(0)\n        return\n        \n    n, m = map(int, data[0].split())\n    grades = []\n    for i in range(1, 1 + n):\n        grades.append(data[i].strip())\n    \n    max_marks_per_subject = [max(grades[j][i] for j in range(n)) for i in range(m)]\n    \n    successful = 0\n    for i in range(n):\n        for j in range(m):\n            if grades[i][j] == max_marks_per_subject[j]:\n                successful += 1\n                break\n    \n    print(successful)\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 450,
        "completion_token_count": 563,
        "thoughts_token_count": 1023
    }
}