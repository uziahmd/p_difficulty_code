{
    "start": 1758293172.9369931,
    "end": 1758293197.7112324,
    "start-formatted": "2025-09-19 23:46 KST",
    "end-formatted": "2025-09-19 23:46 KST",
    "gpu": 2,
    "pid": 59,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Happy Sets\n\nDefine a set $$$A$$$ as a child of set $$$B$$$ if and only if for each element of value $$$x$$$ that is in $$$A$$$, there exists an element of value $$$x+1$$$ that is in $$$B$$$.Given integers $$$N$$$ and $$$K$$$. In order to make Chaneka happy, you must find the number of different arrays containing $$$N$$$ sets $$$[S_1, S_2, S_3, \\ldots, S_N]$$$ such that: - Each set can only contain zero or more different integers from $$$1$$$ to $$$K$$$. - There exists a way to rearrange the order of the array of sets into $$$[S'_1, S'_2, S'_3, \\ldots, S'_N]$$$ such that $$$S'_i$$$ is a child of $$$S'_{i+1}$$$ for each $$$1\\leq i\\leq N-1$$$.Print the answer modulo $$$998\\,244\\,353$$$.Two sets are considered different if and only if there is at least one value that only occurs in one of the two sets.Two arrays of sets are considered different if and only if there is at least one index $$$i$$$ such that the sets at index $$$i$$$ in the two arrays are different.\n\n## Input\nThe only line contains two integers $$$N$$$ and $$$K$$$ ($$$1 \\leq N,K \\leq 2\\cdot10^5$$$) â€” the number of sets in the array and the maximum limit for the values in the sets.\n\n## Output\nAn integer representing the number of different arrays of sets that satisfy the problem condition, modulo $$$998\\,244\\,353$$$.\n\n## Example\n### Input\n['2 2', '1 3', '3 1']\n\n### Output\n['11', '8', '4']\n\n## Note\nIn the first example, there are $$$11$$$ different arrays of sets possible, which are:   $$$[\\{\\}, \\{\\}]$$$  $$$[\\{\\}, \\{1\\}]$$$  $$$[\\{\\}, \\{1, 2\\}]$$$  $$$[\\{\\}, \\{2\\}]$$$  $$$[\\{1\\}, \\{\\}]$$$  $$$[\\{1\\}, \\{1, 2\\}]$$$  $$$[\\{1\\}, \\{2\\}]$$$  $$$[\\{1, 2\\}, \\{\\}]$$$  $$$[\\{1, 2\\}, \\{1\\}]$$$  $$$[\\{2\\}, \\{\\}]$$$  $$$[\\{2\\}, \\{1\\}]$$$ \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\ninput = sys.stdin.read\n\nMOD = 998244353\n\ndef main():\n    data = input().strip()\n    N, K = map(int, data.split())\n\n    # dp[i] represents the number of valid sequences of length i\n    dp = [0] * (N + 1)\n    dp[0] = 1  # base case: one way to have an empty sequence\n\n    for i in range(1, N + 1):\n        # For each position i, we can choose any subset of {1, ..., K}\n        # The number of subsets is 2^K\n        # But we need to count how many subsets are valid for the current position\n        # A subset is valid if it can be a child of the previous set in some permutation\n        # So we consider all subsets and multiply by the number of ways to arrange them\n        # We use combinatorics to count the number of valid subsets for each position\n\n        # We compute the number of valid subsets for the i-th position\n        # This is the same as the number of subsets that can be a child of the previous set\n        # Since we're building the sequence from left to right, we assume the last set is the parent\n        # So the number of valid subsets is the number of subsets that can be children of some set\n\n        # We precompute powers of 2 modulo MOD\n        pow2 = [1] * (K + 1)\n        for i in range(1, K + 1):\n            pow2[i] = (pow2[i - 1] * 2) % MOD\n\n        # Total number of subsets is 2^K\n        total_subsets = pow2[K]\n\n        # For each i, the number of valid subsets is (total_subsets - 1) + 1 = total_subsets\n        # Because any subset can be the child of some other subset\n        # But we need to multiply by the number of ways to arrange the sets\n        # The number of ways to arrange the sets is dp[i-1]\n        dp[i] = (dp[i - 1] * total_subsets) % MOD\n\n    print(dp[N] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\ninput = sys.stdin.read\n\nMOD = 998244353\n\ndef main():\n    data = input().strip()\n    N, K = map(int, data.split())\n\n    # dp[i] represents the number of valid sequences of length i\n    dp = [0] * (N + 1)\n    dp[0] = 1  # base case: one way to have an empty sequence\n\n    for i in range(1, N + 1):\n        # For each position i, we can choose any subset of {1, ..., K}\n        # The number of subsets is 2^K\n        # But we need to count how many subsets are valid for the current position\n        # A subset is valid if it can be a child of the previous set in some permutation\n        # So we consider all subsets and multiply by the number of ways to arrange them\n        # We use combinatorics to count the number of valid subsets for each position\n\n        # We compute the number of valid subsets for the i-th position\n        # This is the same as the number of subsets that can be a child of the previous set\n        # Since we're building the sequence from left to right, we assume the last set is the parent\n        # So the number of valid subsets is the number of subsets that can be children of some set\n\n        # We precompute powers of 2 modulo MOD\n        pow2 = [1] * (K + 1)\n        for i in range(1, K + 1):\n            pow2[i] = (pow2[i - 1] * 2) % MOD\n\n        # Total number of subsets is 2^K\n        total_subsets = pow2[K]\n\n        # For each i, the number of valid subsets is (total_subsets - 1) + 1 = total_subsets\n        # Because any subset can be the child of some other subset\n        # But we need to multiply by the number of ways to arrange the sets\n        # The number of ways to arrange the sets is dp[i-1]\n        dp[i] = (dp[i - 1] * total_subsets) % MOD\n\n    print(dp[N] % MOD)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 678,
        "completion_token_count": 486,
        "thoughts_token_count": 0
    }
}