{
    "start": 1758300095.6685214,
    "end": 1758303306.578672,
    "start-formatted": "2025-09-20 01:41 KST",
    "end-formatted": "2025-09-20 02:35 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n Okay, let's break down the problem.\n\nWe are to find:\n1. The minimum number of edges `t` that must be added to form a simple cycle of odd length (at least 3 vertices) in an undirected graph without parallel edges and loops.\n2. The number of ways `w` (as sets of edges) to add `t` edges to achieve this.\n\nNote: We cannot add loops or parallel edges.\n\nObservations:\n\nFirst, note that a simple cycle of odd length must have at least 3 vertices. The smallest odd cycle is a triangle (length 3).\n\nWhat are the possibilities?\n\nCase 1: The graph already contains an odd cycle. Then we don't need to add any edges. So t=0 and w=1? But wait: the problem says \"the minimum number of edges that must be added\", so if the graph already has an odd cycle, then t=0. However, note that the graph might not necessarily have an odd cycle. So we must check for existing odd cycles.\n\nBut note: the problem does not require to form a cycle by adding edges only if none exists. If one exists, then we don't need to add any edge.\n\nHowever, the example input: \n  '3 3\\n1 2\\n2 3\\n3 1' -> output '0 1'\n\nThis is a triangle (odd cycle). So we output t=0 and w=1.\n\nBut consider: what if the graph has multiple odd cycles? Then we are counting the ways to add edges such that the graph becomes to have an odd cycle? Actually, no: the condition is to form an odd cycle (if there isn't one already). So if there is already an odd cycle, then we don't need to add any edge. And the minimal way is to do nothing.\n\nBut note: the problem says \"minimum number of edges that must be added\". So if the graph already has an odd cycle, then we don't need to add any edge. However, it's possible that the graph doesn't have an odd cycle but has even cycles.\n\nCase 2: The graph does not contain any odd cycle. Then we must consider adding edges until we form one.\n\nHow can we form an odd cycle by adding edges?\n\nWe can form an odd cycle by adding edges in two main ways:\n\na) Using three vertices (triangle): if there are three vertices that are pairwise connected by two edges (so that adding the third edge completes the triangle) and the triangle would be odd (which it is, because 3 is odd). But note: the triangle is always odd. However, we cannot add an edge that already exists (no parallel edges) and no loops.\n\nBut wait: the graph might already have two edges of the three needed. Then we can complete the triangle by adding the third edge. However, if the graph has two edges between a set of three vertices, then they form a path of two edges, and adding the third edge forms the triangle.\n\nBut note: the graph may be more complex. There is also possibility of forming an odd cycle with more than three vertices. For example, a pentagon (5 vertices) is odd. However, we are looking for the minimum number of edges to add.\n\nSo we have to consider:\n\n- 0 edges: if the graph already has an odd cycle.\n\n- 1 edge: if by adding one edge we can form an odd cycle.\n\nHow can one edge create an odd cycle?\n\nConsider: if we have a path of even length (even number of edges) connecting two vertices of the same color in a bipartite graph? Actually, the graph is bipartite if and only if it does not contain an odd cycle. So if the graph is bipartite, then we don't have an odd cycle.\n\nIn a bipartite graph, we can assign two colors to the vertices (say black and white). Then every edge goes from black to white.\n\nNow, if we add an edge between two vertices of the same color, then we create an odd cycle. Why?\n\nSuppose we have two vertices u and v (both black) and we add the edge (u, v). Consider the shortest path from u to v (in the original graph). Since u and v are both black, the parity of the path length must be even (because the path alternates colors, and starting at black, after an even number of steps we end at black). Then the cycle formed by the path and the new edge has length = (even path) + 1 (the new edge) = odd.\n\nTherefore, if the graph is bipartite, then we can form an odd cycle by adding one edge between two vertices of the same color. Moreover, the minimal number of edges to add is 1, unless there is an odd cycle already (then 0).\n\nBut wait: what if the graph is not connected? Then we have to consider each connected component separately.\n\nActually,",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges required to add to an undirected graph to form a simple cycle of odd length, and the number of ways to achieve this. The solution involves checking if the graph already contains an odd cycle. If it does not, we then check if adding one edge can create an odd cycle by connecting two vertices of the same color in a bipartite graph. If not, we consider adding three edges to form a triangle (a 3-cycle).\n\n### Approach\n1. **Check for Existing Odd Cycle**: Use BFS or DFS to color the graph (bipartite check). If the graph is not bipartite, it contains an odd cycle, so no edges need to be added (`t = 0` and `w = 1`).\n2. **Bipartite Graph Handling**: If the graph is bipartite, adding an edge between two vertices of the same color will create an odd cycle. The number of such edges is counted by summing pairs of vertices within the same color group that are not already connected.\n3. **No Bipartite Solution**: If no single edge can form an odd cycle, then we need to add three edges to form a triangle. The number of ways to do this is counted by selecting three vertices that are not already connected by edges and ensuring they form a triangle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_count += 1\n            color[i] = 0\n            q = deque([i])\n            comp_nodes = [i]\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    t = 10**9\n    w = 0\n    \n    comp_color_count = {}\n    for comp_idx, nodes in enumerate(components):\n        color0 = 0\n        color1 = 0\n        for node in nodes:\n            if color[node] == 0:\n                color0 += 1\n            else:\n                color1 += 1\n        comp_color_count[comp_idx] = (color0, color1)\n        \n    total_same_color_edges = 0\n    for comp_idx, nodes in enumerate(components):\n        color0, color1 = comp_color_count[comp_idx]\n        total_same_color_edges += (color0 * (color0 - 1)) // 2 + (color1 * (color1 - 1)) // 2\n        \n        for i in range(len(nodes)):\n            for j in range(i+1, len(nodes)):\n                u = nodes[i]\n                v = nodes[j]\n                if u > v:\n                    u, v = v, u\n                if (u, v) not in edges:\n                    if color[u] == color[v]:\n                        w += 1\n                    else:\n                        pass\n        break\n        \n    if w > 0:\n        t = 1\n        print(f\"1 {w}\")\n        return\n        \n    t = 3\n    w = 0\n    visited = set()\n    for i in range(1, n+1):\n        if i in visited:\n            continue\n        for j in range(i+1, n+1):\n            if j in visited:\n                continue\n            if (i, j) in edges:\n                continue\n            for k in range(j+1, n+1):\n                if k in visited:\n                    continue\n                if (i, k) in edges or (j, k) in edges:\n                    continue\n                w += 1\n                visited.add(i)\n                visited.add(j)\n                visited.add(k)\n                \n    print(f\"3 {w}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Graph Coloring**: The graph is checked for bipartiteness using BFS. If the graph is not bipartite, it contains an odd cycle, and the answer is `0 1`.\n2. **Single Edge Addition**: If the graph is bipartite, the solution checks all pairs of vertices with the same color. Adding an edge between any such pair creates an odd cycle. The count of these valid pairs is stored.\n3. **Three Edge Addition**: If no single edge can form an odd cycle, the solution counts all possible triangles (3-cycles) that can be formed by adding three edges. This involves selecting three vertices that are not already connected by any edges and ensuring they form a triangle when the three edges are added.\n4. **Output**: The solution outputs the minimum number of edges (`t`) and the number of ways (`w`) to achieve the desired odd cycle. \n\nThis approach efficiently checks all possible scenarios to determine the minimal edge additions required and the corresponding ways to form an odd cycle.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_count += 1\n            color[i] = 0\n            q = deque([i])\n            comp_nodes = [i]\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    t = 10**9\n    w = 0\n    \n    comp_color_count = {}\n    for comp_idx, nodes in enumerate(components):\n        color0 = 0\n        color1 = 0\n        for node in nodes:\n            if color[node] == 0:\n                color0 += 1\n            else:\n                color1 += 1\n        comp_color_count[comp_idx] = (color0, color1)\n        \n    total_same_color_edges = 0\n    for comp_idx, nodes in enumerate(components):\n        color0, color1 = comp_color_count[comp_idx]\n        total_same_color_edges += (color0 * (color0 - 1)) // 2 + (color1 * (color1 - 1)) // 2\n        \n        for i in range(len(nodes)):\n            for j in range(i+1, len(nodes)):\n                u = nodes[i]\n                v = nodes[j]\n                if u > v:\n                    u, v = v, u\n                if (u, v) not in edges:\n                    if color[u] == color[v]:\n                        w += 1\n                    else:\n                        pass\n        break\n        \n    if w > 0:\n        t = 1\n        print(f\"1 {w}\")\n        return\n        \n    t = 3\n    w = 0\n    visited = set()\n    for i in range(1, n+1):\n        if i in visited:\n            continue\n        for j in range(i+1, n+1):\n            if j in visited:\n                continue\n            if (i, j) in edges:\n                continue\n            for k in range(j+1, n+1):\n                if k in visited:\n                    continue\n                if (i, k) in edges or (j, k) in edges:\n                    continue\n                w += 1\n                visited.add(i)\n                visited.add(j)\n                visited.add(k)\n                \n    print(f\"3 {w}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1269,
        "thoughts_token_count": 1023
    }
}