{
    "start": 1758294357.7848487,
    "end": 1758294601.825863,
    "start-formatted": "2025-09-20 00:05 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of restrictions [l_i, r_i, x_i]\n Since n, m, and h are at most 50, we can use a dynamic programming or constraint propagation method.\n\n However, note that the problem has multiple constraints (each restriction is a condition on a contiguous segment). \n The profit function is the sum of squares of the heights. We want to assign a height a_i in [0, h] for each spot i, \n such that for every restriction j: max{ a_{l_j} ... a_{r_j} } <= x_j.\n\n Since the constraints might be overlapping, we can try to combine the restrictions by taking the minimum required maximum in each segment? \n But note: a house cannot exceed the minimum x_i of any restriction that covers it. However, the same house may be covered by multiple restrictions.\n\n Actually, we can compute for each position i the minimum allowed maximum value that must hold over any segment covering i. \n But wait, that's not sufficient because the restriction is about the entire segment having max <= x_i. \n\n Alternatively, we can precompute for each position the tightest restriction (the smallest x_i) that applies to it? Not exactly: \n Consider two restrictions: one covering [1,3] with x=2 and one covering [2,4] with x=3. Then at position 2, the first restriction requires <=2 and the second requires <=3 -> so we must have <=2.\n\n So for each position i, we can define:\n   Let R(i) = min{ x_j | there exists a restriction j such that l_j <= i <= r_j }\n\n Then the height at position i must be <= R(i). Also, note that the global maximum h is also an upper bound.\n\n Now, if we set a_i = min(h, R(i)), then we satisfy all the restrictions? \n But wait: consider two adjacent positions. The restriction says the tallest in a segment must be <= x. If we set each independently by the minimal x that covers it, then the segment condition is automatically satisfied? \n\n However, consider: \n   Restriction 1: [1,3] with x=2.\n   Restriction 2: [1,2] with x=1.\n\n Then for position 3: R(3)=min(x from restrictions covering 3) -> only restriction 1, so 2.\n For position 1: R(1)=min(2,1)=1.\n For position 2: R(2)=min(2,1)=1.\n\n Then we set: [1,1,2]. Now check the first restriction [1,3]: max(1,1,2)=2 -> ok. Second restriction [1,2]: max(1,1)=1 -> ok.\n\n But what if we set [1,1,2]? That satisfies. However, what if we set [1,1,1] for position 3? Then we get even more profit? \n But wait: the profit is a_i^2. And note that the condition for the segment [1,3] requires that the maximum is <=2, and 1<=2 is ok. \n However, we are forced by the second restriction (for position 1 and 2) to have at most 1. \n\n But note: the above independent assignment might not be optimal. Why? Because we set each a_i to the minimal allowed value (min(h, R(i))) but sometimes we might set a_i lower than R(i) to allow higher values elsewhere? \n\n However, observe that the profit function is separable (each square is independent) and the constraints are on the maximum per segment. \n\n But note: the constraint is that in a segment the maximum is at most some x. This does not necessarily force each house to be at most that x. \n However, if we set a house to a value greater than the minimal x covering it, then we break the condition for the segment that requires a lower x.\n\n Therefore, the condition for each house i is: a_i <= R(i) (where R(i) is the minimal x from all restrictions covering i, or if no restriction, then R(i)=h? Actually, the problem says the house can be built with height between 0 and h. But there might be no restriction for some house, then we can use up to h. However, the example input might not cover every spot. \n\n Actually, the problem states: \"There are n spots available\", and then m restrictions. It does not say every spot is covered by at least one restriction.\n\n So we should define R(i) as follows:\n   For each spot i, let R(i) = min{ x_j for all restrictions j such that l_j <= i <= r_j } \n   But if there is no restriction covering i, then we don't impose any additional restriction beyond the global h.",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street with specific zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. The constraints require that in any segment defined by the restrictions, the maximum height of the houses in that segment does not exceed a specified value.\n\n### Approach\n1. **Problem Analysis**: The problem involves assigning heights to houses such that all zoning restrictions are satisfied. Each restriction imposes a constraint on the maximum height in a specific segment of the street. The goal is to maximize the sum of the squares of the house heights while adhering to these constraints.\n2. **Key Insight**: For each house position, the maximum allowed height is determined by the most restrictive (smallest) `x_i` value among all restrictions that include that position. If no restriction covers a position, the maximum height allowed is the global maximum `h`.\n3. **Algorithm Selection**: \n   - **Preprocessing Restrictions**: For each position from 1 to `n`, compute the minimal `x_i` from all restrictions that cover it. This gives the tightest constraint for each position.\n   - **Optimal Height Assignment**: For each position, the optimal height is the minimum between the computed constraint and the global maximum `h`. This ensures all restrictions are satisfied while maximizing the profit contribution from each house.\n4. **Complexity Analysis**: The approach efficiently processes each position and each restriction once, leading to a time complexity of O(n*m), which is feasible given the constraints (n, m ≤ 50).\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h_global = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    R = [h_global] * (n + 1)\n    for (l, r, x_val) in restrictions:\n        for i in range(l, r + 1):\n            if x_val < R[i]:\n                R[i] = x_val\n                \n    total_profit = 0\n    for i in range(1, n + 1):\n        height = min(R[i], h_global)\n        total_profit += height * height\n        \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of spots `n`, the global maximum height `h_global`, and the number of restrictions `m`.\n2. **Processing Restrictions**: For each restriction, the code checks all positions covered by the restriction and updates their individual maximum allowed height (`R[i]`) to the smallest `x_i` value among all covering restrictions.\n3. **Calculating Profit**: For each position, the optimal house height is the minimum between its individual constraint (`R[i]`) and the global maximum height (`h_global`). The profit is then calculated by summing the squares of these heights.\n4. **Output**: The total profit is printed.\n\nThis approach efficiently ensures all constraints are met while maximizing the profit by leveraging the separability of the profit function and the constraints' independence per position.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h_global = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    R = [h_global] * (n + 1)\n    for (l, r, x_val) in restrictions:\n        for i in range(l, r + 1):\n            if x_val < R[i]:\n                R[i] = x_val\n                \n    total_profit = 0\n    for i in range(1, n + 1):\n        height = min(R[i], h_global)\n        total_profit += height * height\n        \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 822,
        "completion_token_count": 720,
        "thoughts_token_count": 1023
    }
}