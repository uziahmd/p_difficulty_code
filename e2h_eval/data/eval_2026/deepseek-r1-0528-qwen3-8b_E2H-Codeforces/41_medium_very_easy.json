{
    "start": 1758294458.7679482,
    "end": 1758296727.0209036,
    "start-formatted": "2025-09-20 00:07 KST",
    "end-formatted": "2025-09-20 00:45 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of restrictions [l_i, r_i, x_i]\n Since n, m, h are at most 50, we can use dynamic programming or even try to use a direct assignment with constraints.\n\n However, note that the problem has multiple overlapping constraints (ranges) and the profit is the sum of squares.\n\n Idea: \n Each house i (from 1 to n) can have a height in [0, h] but must satisfy all restrictions that cover it.\n\n For a restriction (l, r, x): for every house j in [l, r], the height must be <= x.\n\n So for each house i, we have an upper bound which is the minimum x among all restrictions that cover i. But note: there might be no restriction? Then the upper bound is h.\n\n However, wait: the problem says \"the tallest house from spots l_i to r_i must be at most x_i\". So if a house is included in several restrictions, it must be <= the minimum x_i of those restrictions.\n\n But note: it's not just about the individual house, because if one house is too tall, it breaks the restriction for its entire segment. So we cannot set each house independently without considering the restrictions.\n\n However, we can precompute for each house the maximum allowed height (upper_bound) as the minimum x_i over all restrictions that include that house. Then, we have to assign a height for each house between 0 and min(h, upper_bound) such that for every restriction (l_i, r_i, x_i), the maximum height in [l_i, r_i] is <= x_i.\n\n But wait: the upper_bound for a house is the minimum x_i of the restrictions that cover it. Then, the condition for a restriction (l_i, r_i, x_i) is automatically satisfied if we set each house's height to at most the upper_bound (which is <= x_i). However, note: the upper_bound for a house is defined by the minimal x_i of the restrictions covering it. Therefore, if we set the house's height to at most its upper_bound, then for any restriction that covers it, the house is <= x_i (because the restriction's x_i is at least the upper_bound). But what if the restriction's x_i is greater than the upper_bound? Then the condition is still satisfied. However, the problem is that the same restriction may cover multiple houses and we must ensure that the maximum in the segment is <= x_i.\n\n But note: the upper_bound for the entire segment [l_i, r_i] is the minimum x_i among restrictions covering the segment? Actually, for each house j in [l_i, r_i], the house j is set to at most the minimum x_i of the restrictions that cover j. However, the restriction (l_i, r_i, x_i) requires that the maximum house in [l_i, r_i] is <= x_i. \n\n Now, if we set each house j in [l_i, r_i] to at most min_{restriction covering j} x_i, then the maximum in [l_i, r_i] is at most min_{j in [l_i, r_i]} (min_{restriction covering j} x_i) ? Not exactly: consider two houses: house1 has upper_bound 2, house2 has upper_bound 3. Then the maximum in the segment is 2 (if we set house1 to 2 and house2 to 3) but wait, house2's upper_bound is 3, but if the restriction (l_i, r_i, x_i) has x_i=2, then we cannot set house2 to 3. \n\n So the above approach of setting each house to its own upper_bound (minimal x_i covering it) is not sufficient because the restriction (l_i, r_i, x_i) might require that the entire segment is <= x_i, and if x_i is less than the upper_bound of some houses in the segment, then we must set those houses to at most x_i.\n\n Therefore, we must consider the restrictions collectively.\n\n Alternative approach:\n\n Since n, m, h are small (<=50), we can use DP with state representing the current position and the last assigned heights? But note: the constraints are on contiguous segments and we have up to 50 houses and 50 restrictions. However, we can also think of using the restrictions to define segments and then combine.\n\n Another idea: the profit is the sum of squares. The square function is convex, so we want to set each house as high as possible (to maximize the square) but without violating the constraints.\n\n But the constraints are that for each restriction (l_i, r_i, x_i), the maximum height in [l_i, r_i] is <= x_i.\n\n This is similar to a scheduling problem with resource constraints.\n\n However, note the small input sizes. We can consider iterating over the houses and keeping track of the active restrictions.\n\n But note: there are m restrictions (at most 50) and n at most 50, but we have to satisfy all restrictions.\n\n How about we precompute for each restriction the effect? But the restrictions are independent.\n\n Alternatively, we can use a greedy approach: start from the leftmost house and set each house to the maximum allowed by the restrictions that cover it, but then check if the restrictions are still satisfied. However, we have overlapping restrictions and the maximum might be set too high for a later segment.\n\n Since n and m are small, we can use a brute-force search over the possible assignments? But there are 51^50 possibilities, which is too many.\n\n We need a better idea.\n\n Observation: the constraints are that the entire street must satisfy that for each restriction i, the maximum height in [l_i, r_i] is <= x_i.\n\n We can use a different approach: for each house, we know the minimal x_i that must be satisfied (from the restrictions covering it). But then, the entire set of restrictions must be considered together.\n\n Actually, the problem is equivalent to: \n   Let A[1..n] be the heights, with 0<=A[i] <= h.\n   For each restriction (l_i, r_i, x_i): max{A[j] for j in [l_i, r_i]} <= x_i.\n\n And we want to maximize sum_{i}(A[i]^2).\n\n Since the objective is separable and convex, we would like to set each house as high as possible. However, the constraints are coupled.\n\n How to enforce the constraints? The constraints are global (on contiguous segments). \n\n Since n and m are at most 50, we can use an iterative constraint propagation or even use linear programming with integer variables? But 50 variables and 50 constraints is too heavy for brute-force.\n\n Alternatively, we can use the following:\n\n Step 1: For each house, we know the maximum allowed height by the restrictions that only cover that house? Actually, we can compute for each house the minimal x_i (call it base[i]) from all restrictions that cover house i.\n\n However, note: the condition for a restriction (l_i, r_i, x_i) is that the maximum in [l_i, r_i] is <= x_i. This condition is more restrictive than just having each house in the segment <= x_i. But if we set every house in the segment to <= x_i, then the maximum is <= x_i. However, the issue is that the same house might be in multiple segments and we have to satisfy all.\n\n But we can do: \n   For each house i, let base[i] = min{ h, min_{each restriction j that covers i} x_j }\n\n However, wait: if we set house i to base[i], then for a restriction (l_j, r_j, x_j) that covers i, we have base[i] <= x_j (by definition). But what about other houses in the segment? \n\n Example: \n   House 1: base[1]=1 (from a restriction [1,1] with x=1)\n   House 2: base[2]=3 (from a restriction [2,2] with x=3)\n   Restriction [1,2] with x=2. Then the maximum of [1,2] would be max(1,3)=3, which violates the restriction.\n\n So the above base[i] does not account for the fact that the entire segment must be <= x_i.\n\n Therefore, we must consider that the entire segment [l_i, r_i] must be <= x_i. Hence, for house i, the actual maximum allowed height is not just the minimum of the x_i from the restrictions that cover i individually, but we must also consider the restrictions that cover multiple houses.\n\n However, note that if we set house i to a value a_i, then for any restriction (l_i, r_i, x_i) that covers house i, we must have a_i <= x_i. But also, for a restriction (l_j, r_j, x_j) that covers house i, we must have all houses in [l_j, r_j] <= x_j. \n\n Therefore, the necessary condition is that a_i <= min_{all restrictions j that cover i} x_j. But is that sufficient? \n\n In the example above: \n   Restriction [1,1] with x=1 -> house1 <=1\n   Restriction [2,2] with x=3 -> house2 <=3\n   Restriction [1,2] with x=2 -> both houses <=2\n\n Then for house1: the minimum x_j is min(1,2)=1 -> so house1<=1.\n For house2: the minimum x_j is min(3,2)=2 -> so house2<=2.\n\n Then we set house1=1, house2=2. Then the restriction [1,2] is satisfied (max=2<=2) and the others are satisfied. \n\n So the corrected base[i] is: base[i] = min_{for each restriction j that covers i} x_j.\n\n Then we must set each house i to at most base[i]. However, note that base[i] might be negative? But x_i>=0, so base[i] is at least 0.\n\n But wait, is this sufficient? \n\n Consider: \n   House1: base[1] = 1 (from [1,1] with x=1) and also from [1,2] with x=2 -> base[1]=1.\n   House2: base[2] = min(3,2)=2.\n\n Then the assignment [1,2] satisfies:\n   [1,1]: max=1<=1 -> ok.\n   [2,2]: max=2<=3 -> ok.\n   [1,2]: max=2<=2 -> ok.\n\n So yes, by setting each house i to at most base[i], we satisfy all the restrictions. \n\n Why? Because for any restriction j (l_j, r_j, x_j), for every house i in [l_j, r_j] we have a_i <= base[i] <= x_j (because base[i] was defined as the minimum x_k for all k that cover i, and j covers i so x_j is one of them). Then the maximum in [l_j, r_j] is at most x_j.\n\n Therefore, the problem reduces to: assign to each house i a value a_i in [0, min(h, base[i])] such that we maximize the sum of squares.\n\n And since the square function is increasing for non-negative numbers, for each house i we want to set a_i to the maximum allowed value (min(h, base[i])). Then the profit would be the sum of (min(h, base[i]))^2 for i from 1 to n.\n\n But wait, is that always optimal? \n\n Yes, because the objective is to maximize the sum of squares. Since the square function is increasing and concave (so higher values give more profit), we set each house to the maximum allowed value.\n\n However, wait: what if there is an interaction between houses that forces a lower value? \n\n Example: \n   Two houses, two restrictions: \n     Restriction1: [1,2] with x=2\n     Restriction2: [1,2] with x=1\n\n   Then base[1] = min(2,1)=1, base[2]=min(2,1)=1.\n\n   Then we set both houses to 1. Profit = 1+1 = 2.\n\n   But what if we set house1 to 0 and house2 to 1? Then the maximum in [1,2] is 1, which is <=1, so it is allowed. Then profit=0+1=1 -> worse.\n\n   What if we set house1 to 1 and house2 to 0? Then profit=1+0=1.\n\n   So indeed, setting each house to the maximum allowed (which is 1) is best.\n\n However, consider:\n\n   Restriction1: [1,1] with x=1\n   Restriction2: [2,2] with x=2\n   Restriction3: [1,2] with x=1\n\n   Then base[1] = min(1,1)=1\n        base[2] = min(2,1)=1\n\n   Then we set house1=1, house2=1. Then the restriction [1,2] is satisfied (max=1<=1). \n\n   But what if we set house1=0 and house2=1? Then restriction [1,2] is satisfied (max=1<=1) and profit=0+1=1, which is less than 1^2+1^2=2.\n\n   So the rule holds.\n\n But wait: what if the maximum allowed value for a house is h, but base[i] (which is the minimum x_j for all j covering i) is greater than h? Then we set it to h.\n\n So algorithm:\n\n   Step 1: Read n, h, m.\n   Step 2: Initialize an array base of length n (for n houses, index from 0 to n-1) with a very large number (or h+1, because we take min and then clamp by h).\n   Step 3: For each of the m restrictions (l, r, x):\n            For each house i from l-1 to r-1 (0-indexed):\n                base[i] = min(base[i], x)\n\n   Step 4: Clamp each base[i] to min(base[i], h) because we cannot exceed h.\n\n   Step 5: For each house i, set its height to base[i] (the maximum allowed) and compute the profit as the sum of base[i]^2.\n\n   Then output the profit.\n\n But wait: let me test with the examples.\n\n Example 1:\n   Input: \"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\"\n\n   Houses: 3, h=3, m=3.\n\n   base = [inf, inf, inf]\n\n   First restriction: [1,1] with x=1 -> update base[0] = min(inf,1)=1.\n   Second restriction: [2,2] with x=3 -> update base[1]=min(inf,3)=3.\n   Third restriction: [3,3] with x=2 -> update base[2]=min(inf,2)=2.\n\n   Then clamp: \n        base[0]=min(1,3)=1\n        base[1]=min(3,3)=3\n        base[2]=min(2,3)=2\n\n   Profit = 1^2 + 3^2 + 2^2 = 1+9+4 = 14 -> matches.\n\n Example 2:\n   Input: \"4 10 2\\n2 3 8\\n3 4 7\"\n\n   Houses: 4, h=10, m=2.\n\n   base = [inf, inf, inf, inf]\n\n   First restriction: [2,3] (which are indices 1 and 2) -> update base[1]=min(inf,8)=8, base[2]=min(inf,8)=8.\n   Second restriction: [3,4] (indices 2 and 3) -> update base[2]=min(8,7)=7, base[3]=min(inf,7)=7.\n\n   Then clamp: \n        base[0] = inf -> but wait, house1 (index0) is not covered by any restriction? Then base[0] remains inf. Then we clamp base[0] to min(inf,10)=10.\n\n   Then the heights: [10,8,7,7]\n\n   Profit = 10^2 + 8^2 + 7^2 + 7^2 = 100+64+49+49 = 262 -> matches.\n\n However, note: the example input says:\n        \"4 10 2\\n2 3 8\\n3 4 7\"\n\n   But the first house (index0) is not covered by any restriction. Then we set it to 10 (the maximum allowed by the overall h). \n\n   But wait: is that correct? The problem says \"In each spot, you can build a house with an integer height between 0 and h.\" and the restrictions only apply to the specified ranges. The house1 is not restricted, so we can set it to 10.\n\n   However, let me check the example: the example output is 262.\n\n   But note: the example input says there are two restrictions, and the first restriction starts at house2 (which is the second house). So house1 (first house) is not covered by any restriction. Then our base[0] should be set to h (10) because we clamp by h.\n\n   How did we get base[0]? Initially, base[0] was set to inf, then clamped to 10.\n\n   This is correct.\n\n Therefore, the solution is:\n\n   n, h, m = map(int, input().split())\n   base = [10**9] * n   # start with a big number\n\n   for _ in range(m):\n        data = input().split()\n        l = int(data[0]); r = int(data[1]); x = int(data[2])\n        for i in range(l-1, r):\n            if x < base[i]:\n                base[i] = x\n\n   # Now, clamp each base[i] to h (if base[i] > h, then set to h; otherwise base[i])\n   for i in range(n):\n        if base[i] > h:\n            base[i] = h\n\n   total = 0\n   for i in range(n):\n        total += base[i] * base[i]\n\n   print(total)\n\n But wait, is this really correct?\n\n Let me think of another example:\n\n   Input: \n        n=2, h=10, m=2\n        Restriction1: [1,2] x=5\n        Restriction2: [1,1] x=3\n\n   Then base for house1 (index0): min(5,3)=3\n        base for house2 (index1): min(5,3)=3   (because the second restriction [1,1] doesn't cover house2)\n\n   Then we set both houses to 3.\n\n   Check restrictions:\n        Restriction1: [1,2] must have max<=5 -> 3<=5 -> ok.\n        Restriction2: [1,1] must have max<=3 -> 3<=3 -> ok.\n\n   Profit = 3^2+3^2=18.\n\n   What if we set house1 to 3 and house2 to 5? \n        Then restriction1: max(3,5)=5<=5 -> ok.\n        Restriction2: house1=3<=3 -> ok.\n        Then profit = 9+25=34, which is larger.\n\n   But wait, why did we set house2 to 3? According to our base for house2: \n        It is covered by restriction1 (x=5) and not by restriction2. So base[1]=5 (min(5, ...)) but wait, we did:\n\n        Initially base = [big, big]\n        Restriction1: [1,2] -> update base[0]=min(big,5)=5, base[1]=min(big,5)=5.\n        Restriction2: [1,1] -> update base[0]=min(5,3)=3, base[1] remains 5.\n\n        Then we clamp: base[0]=min(3,10)=3, base[1]=min(5,10)=5.\n\n        Then profit = 3^2+5^2=9+25=34.\n\n   So I made a mistake in the example: the second restriction [1,1] only updates house0, so house1 is updated only by the first restriction (x=5). \n\n   Therefore, the code above is correct.\n\n   However, in the example I initially thought, I incorrectly assumed that the second restriction [1,1] updates house2 (index1) as well, but it does not.\n\n   So the algorithm is:\n\n        base = [a big number] * n\n\n        for each restriction (l, r, x):\n            for i from l-1 to r-1:\n                base[i] = min(base[i], x)\n\n        for i in range(n):\n            if base[i] > h:\n                base[i] = h\n\n        profit = sum(a*a for a in base)\n\n   Print profit.\n\n Let me run the example again:\n\n   Example 2 from the problem: \n        n=4, h=10, m=2, restrictions: [2,3,8] and [3,4,7]\n\n        base = [big, big, big, big]\n\n        After first restriction [2,3,8]: \n            indices 1 and 2: base[1]=8, base[2]=8\n\n        After second restriction [3,4,7]:\n            indices 2 and 3: base[2]=min(8,7)=7, base[3]=7\n\n        Then clamp: \n            base[0] = big -> clamp to 10\n            base[1] = 8 -> 8\n            base[2] = 7 -> 7\n            base[3] = 7 -> 7\n\n        Sum = 10^2+8^2+7^2+7^2 = 100+64+49+49 = 262.\n\n   Example 1: \n        n=3, h=3, m=3, restrictions: [1,1,1], [2,2,3], [3,3,2]\n\n        base = [big, big, big]\n\n        After [1,1,1]: base[0]=1\n        After [2,2,3]: base[1]=3\n        After [3,3,2]: base[2]=2\n\n        Clamp: \n            base[0]=min(1,3)=1\n            base[1]=min(3,3)=3\n            base[2]=min(2,3)=2\n\n        Sum = 1+9+4=14.\n\n   Therefore, we write the code accordingly.\n\n However, note: what if there are no restrictions? Then base[i] remains a big number, then we clamp to h for every house.\n\n   Example: n=1, h=5, m=0 -> base[0]=5, profit=25.\n\n   That is correct.\n\n   Another example: n=1, h=5, m=1, restriction [1,1,10] -> then base[0]=min(10,5)=5, profit=25.\n\n   Another example: n=1, h=5, m=1, restriction [1,1,3] -> base[0]=3, profit=9.\n\n   All seems to work.\n\n   But wait: what if a restriction has x greater than h? Then when clamping we set to h, so the house is set to h. But the restriction x is bigger than h, so we are effectively ignoring the restriction's x (since we cannot build above h). However, the condition of the restriction is that the house (only one house) must be <= x. Since h<=x (because x>h and we set the house to h), then h<=x is true. So it's okay.\n\n   However, the restriction's x is at least h, then the restriction is redundant because we are already limited by h.\n\n   But note: the problem says the maximum height of a house is h. So if a restriction says x_i >= h, then it doesn't restrict us beyond h.\n\n   Therefore, the algorithm is correct.\n\n   Let me write the code accordingly.\n\n   Note: the input format: first line is n, h, m, then m lines.\n\n   Code:\n\n   n, h, m = map(int, input().split())\n   base = [10**9] * n   # 10**9 is a big number, but we have m<=50, so we can also use h+1 if h is max 50, but 10**9 is safe.\n\n   for _ in range(m):\n        data = input().split()\n        l = int(data[0]); r = int(data[1]); x = int(data[2])\n        # Update the base for houses from l-1 to r-1\n        for i in range(l-1, r):\n            if x < base[i]:\n                base[i] = x\n\n   for i in range(n):\n        if base[i] > h:\n            base[i] = h\n\n   total = 0\n   for num in base:\n        total += num * num\n\n   print(total)\n\n However, wait: what if a house is covered by multiple restrictions and one of them is very low? Then base[i] becomes that low value. This is correct.\n\n   Example: \n        n=1, h=10, m=2\n        Restriction1: [1,1,5]\n        Restriction2: [1,1,3]\n\n        Then base[0] = min(5,3)=3, then clamped to 3 (since 3<=10). Profit=9.\n\n   Correct.\n\n   But what if the restrictions are inconsistent? \n\n        Example: \n            n=2, h=10, m=2\n            Restriction1: [1,2,5]\n            Restriction2: [1,2,3]\n\n        Then base for house0: min(5,3)=3\n        base for house1: min(5,3)=3\n        Then we set both houses to 3. \n\n        Check: \n            Restriction1: [1,2] must be <=5 -> 3<=5 -> ok.\n            Restriction2: [1,2] must be <=3 -> 3<=3 -> ok.\n\n        This is consistent.\n\n   However, what if we have two restrictions that conflict in the sense that one allows up to 5 and the other allows up to 3? Then we set to 3, which satisfies both.\n\n   The problem is that the restrictions are independent and we are taking the minimum, so if they conflict, the stricter one (lower x) will be used.\n\n   This is the correct behavior.\n\n   Therefore, the code is as below.\n\n   But note: the problem says the restrictions are given arbitrarily (m up to 50) and the ranges can overlap arbitrarily.\n\n   Our algorithm handles that.\n\n   However, note: the initial base[i] is set to a big number. We can also initialize base[i] to h+1 or something, but 10**9 is fine.\n\n   Let me run the provided examples.\n\n   Example 1: \n        Input: \"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\" -> Output: 14\n\n   Example 2: \n        Input: \"4 10 2\\n2 3 8\\n3 4 7\" -> Output: 262\n\n   We'll output the code accordingly.\n\n   However, wait: the example input is given as two separate strings in the example, but in the real input, there will be one input file with multiple lines.\n\n   The problem says: \n        The first line contains three integers n, h, m.\n        Then m lines.\n\n   So we read the first line and then m lines.\n\n   Code:\n\n   n, h, m = map(int, input().split())\n   base = [10**9] * n\n\n   for i in range(m):\n        l, r, x = map(int, input().split())\n        for j in range(l-1, r):\n            if x < base[j]:\n                base[j] = x\n\n   for i in range(n):\n        if base[i] > h:\n            base[i] = h\n\n   total = 0\n   for a in base:\n        total += a * a\n\n   print(total)\n\n   Let me test with the provided examples.\n\n   Example 1: \n        n=3, h=3, m=3\n        Restrictions: \n            1 1 1 -> base[0]=1\n            2 2 3 -> base[1]=3\n            3 3 2 -> base[2]=2\n        Then clamp: [1,3,2] -> [1,3,2] (since 1<=3, 3<=3, 2<=3)\n        Total = 1+9+4=14.\n\n   Example 2: \n        n=4, h=10, m=2\n        Restrictions:\n            2 3 8 -> update base[1] and base[2] to 8\n            3 4 7 -> update base[2] to min(8,7)=7, base[3] to 7\n        Then base = [10**9, 8, 7, 7] -> then clamp: [10, 8, 7, 7] (because 10**9>10 -> set to 10)\n        Total = 10*10 + 8*8 + 7*7 + 7*7 = 100+64+49+49 = 262.\n\n   Therefore, we are confident.\n\n   However, note: the problem says the maximum height per house is h, so we must not exceed h. Our clamping ensures that.\n\n   One more corner: if h=0, then we set every house to 0. Then the profit is 0.\n\n   Example: n=1, h=0, m=0 -> base[0]=10**9 -> clamp to 0, profit=0.\n\n   But wait: the house can be built with height between 0 and 0, so only 0. Correct.\n\n   Another corner: negative x? The problem says x_i>=0, so no.\n\n   So we are good.\n\n   Let me submit the code.\n\n   But wait: the problem says the input is given as a list of strings in the example, but actually in the example input, the two examples are provided separately. But the code reads from stdin.\n\n   We assume standard input.\n\n   Code:\n\n   n, h, m = map(int, input().split())\n   base = [10**9] * n\n\n   for _ in range(m):\n        data = input().split()\n        l = int(data[0])\n        r = int(data[1])\n        x = int(data[2])\n        for j in range(l-1, r):\n            if x < base[j]:\n                base[j] = x\n\n   for i in range(n):\n        if base[i] > h:\n            base[i] = h\n\n   total = 0\n        for a in base:\n            total += a * a\n\n   print(total)\n\n   However, note: the problem says the spots are labeled 1 to n, and the restrictions use 1-indexed labels.\n\n   Our loop for j in range(l-1, r) uses 0-indexed indices, which is correct.\n\n   Let me test with a simple case: n=1, h=10, m=1, restriction [1,1,5] -> base[0]=5, then clamp to 5, profit=25.\n\n   It works.\n\n   But wait, the example input is provided as two separate examples? No, the example input is:\n\n        ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   But in the real competition, the input is one file with the first line being the parameters and then the restrictions.\n\n   So if we run the program and paste the first example, it should work.\n\n   However, the example input is given as a list of two strings, meaning two separate test cases? Actually, the problem says:\n\n        The first line contains three integers n, h, m (then m lines)\n\n   So the input is one test case.\n\n   But the example output is two integers: 14 and 262.\n\n   Wait, the problem statement says:\n\n        Input\n        The first line contains three integers n, h, and m (1≤n,h,m≤50) — the number of spots, the maximum height, and the number of restrictions.\n        Each of the next m lines contains three integers l_i, r_i, and x_i (1≤l_i≤r_i≤n, 0≤x_i≤h) — left and right limits (inclusive) of the i-th restriction and the maximum possible height in that range.\n\n   And the example input is:\n\n        ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   But note: the example input is provided as two separate strings, meaning two test cases? Actually, the problem says \"The following is a competitive programming problem\", and then gives two examples. But the input format is one test case.\n\n   However, the sample input in the problem statement is two separate examples, so we must assume that the input is one test case per execution.\n\n   But the problem says \"Determine the maximum profit possible.\" and the input format is as described.\n\n   Since the problem says m is the number of restrictions, and the first line has n, h, m, then we know how many restrictions to read.\n\n   So we are reading one test case.\n\n   But the example input in the problem is two examples. They are just showing two different cases.\n\n   We are to write a program that reads one test case.\n\n   However, the example input is given as two strings. But in the competition, the input is one file.\n\n   So we don't need to handle multiple test cases.\n\n   Therefore, the code is as above.\n\n   But wait, the problem says \"Your task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout).\"\n\n   So we are good.\n\n   Final code:\n\n   n, h, m = map(int, input().split())\n   base = [10**9] * n\n\n   for _ in range(m):\n        l, r, x = map(int, input().split())\n        for i in range(l-1, r):\n            if x < base[i]:\n                base[i] = x\n\n   for i in range(n):\n        if base[i] > h:\n            base[i] = h\n\n   total = sum(a * a for a in base)\n   print(total)\n\n However, note: the example input in the problem is given as two separate examples, but the code reads one test case. The problem says \"Print a single integer\", so for each test case we output one integer.\n\n   Since the problem does not specify multiple test cases, we assume one.\n\n   But wait, the problem says \"The following is a competitive programming problem\", and the example input is provided as two examples. This might be confusing.\n\n   Clarification: the example input is two separate inputs (two test cases). However, the problem statement says:\n\n        The first line contains three integers n, h, m.\n\n   and then m lines.\n\n   So the intended input is one test case.\n\n   But the example input is two test cases? Or is the example input meant to be two separate runs?\n\n   Looking at the example output: \n        ['14', '262']\n\n   This suggests that the example input is two separate test cases.\n\n   However, the problem statement does not mention multiple test cases.\n\n   Let me check the constraints: n, h, m from 1 to 50. The problem does not say there are multiple test cases.\n\n   But the example input is provided as two strings. \n\n   How did the problem setter provide the example? They provided two test cases.\n\n   But note: the problem says \"Determine the maximum profit possible.\" (singular). \n\n   The sample input in the problem statement is two examples, but the actual input for the program is one test case.\n\n   The problem does not specify whether there are multiple test cases. \n\n   However, looking at the sample input format: the first line has n, h, m, then m lines.\n\n   So if the problem intended multiple test cases, they would have said so.\n\n   But the example input is two separate test cases. \n\n   Since the constraints are small (n, m, h <=50) and the problem does not specify multiple test cases, we assume one test case.\n\n   However, the example input is provided as two strings. \n\n   This is confusing.\n\n   But note: the problem says \"The following is a competitive programming problem\", and then gives two examples. \n\n   In many competitions, the sample input is provided as one or more examples to illustrate the problem.\n\n   But the actual input to the program is",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. The key challenge is to ensure that all zoning restrictions are satisfied, which impose constraints on the maximum height of houses in specific ranges.\n\n### Approach\n1. **Problem Analysis**: The problem involves determining the optimal heights for each house such that all zoning restrictions are met. Each restriction specifies that the tallest house in a particular range must not exceed a given height. The goal is to maximize the sum of the squares of the house heights.\n2. **Intuition**: For each house, the maximum allowable height is determined by the most restrictive zoning restriction that includes it. This means the height of each house must be less than or equal to the minimum of all the maximum heights specified in the restrictions covering that house.\n3. **Algorithm Selection**: \n   - **Initialization**: Start by initializing an array `base` with a very large value for each house, representing no restrictions initially.\n   - **Processing Restrictions**: For each restriction, update the `base` array to reflect the maximum allowable height for each house in the specified range. Specifically, for each house in the range, set its `base` value to the minimum of its current `base` value and the restriction's maximum height.\n   - **Clamping Heights**: After processing all restrictions, clamp each house's height to the global maximum height `h` if the computed `base` value exceeds `h`.\n   - **Profit Calculation**: The profit is the sum of the squares of the final heights of all houses.\n4. **Complexity Analysis**: The algorithm processes each restriction and updates the `base` array for each house in the affected range. With `n` houses and `m` restrictions, the time complexity is O(m * n), which is efficient given the constraints (n, m ≤ 50).\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    n, h, m = map(int, input[0].split())\n    base = [10**9] * n\n    \n    for i in range(1, 1 + m):\n        parts = input[i].split()\n        l = int(parts[0])\n        r = int(parts[1])\n        x = int(parts[2])\n        for j in range(l - 1, r):\n            if x < base[j]:\n                base[j] = x\n                \n    for i in range(n):\n        if base[i] > h:\n            base[i] = h\n            \n    total = 0\n    for num in base:\n        total += num * num\n        \n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, where the first line contains the number of houses `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Initialization**: An array `base` is initialized with a large value (10^9) for each house, indicating no restrictions initially.\n3. **Processing Restrictions**: For each restriction, the code updates the `base` array for each house in the specified range to the minimum of its current value and the restriction's maximum height. This ensures that each house's height adheres to all relevant restrictions.\n4. **Clamping Heights**: After processing all restrictions, each house's height is clamped to the global maximum height `h` if it exceeds `h`.\n5. **Profit Calculation**: The total profit is calculated by summing the squares of the final heights of all houses and printed.\n\nThis approach efficiently ensures all constraints are met while maximizing the profit by leveraging simple array operations and arithmetic.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    n, h, m = map(int, input[0].split())\n    base = [10**9] * n\n    \n    for i in range(1, 1 + m):\n        parts = input[i].split()\n        l = int(parts[0])\n        r = int(parts[1])\n        x = int(parts[2])\n        for j in range(l - 1, r):\n            if x < base[j]:\n                base[j] = x\n                \n    for i in range(n):\n        if base[i] > h:\n            base[i] = h\n            \n    total = 0\n    for num in base:\n        total += num * num\n        \n    print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 823,
        "completion_token_count": 792,
        "thoughts_token_count": 8191
    }
}