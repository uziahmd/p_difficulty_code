{
    "start": 1758300820.471022,
    "end": 1758304602.0249028,
    "start-formatted": "2025-09-20 01:53 KST",
    "end-formatted": "2025-09-20 02:56 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, let's break down the problem.\n\n We are given:\n   n, m: number of lawns and roads (edges) we know.\n   For each edge, we are given four numbers: u, v, g, l (the two lawns and the GCD and LCM for the two numbers)\n\n Conditions for an edge (u, v) with GCD = g and LCM = l:\n   Let the two numbers be a and b (for lawns u and v respectively).\n   Then we must have:\n        gcd(a, b) = g\n        lcm(a, b) = l\n\n   Also note: \n        a * b = g * l * g   [because lcm(a,b) * gcd(a,b) = a * b / gcd(a,b) * gcd(a,b) = a*b? Actually, no: the formula is a * b = gcd(a,b) * lcm(a,b)]\n\n   So, we have: a * b = g * l   (this is a key identity)\n\n   Moreover, we know that:\n        a = g * a1, b = g * b1, with gcd(a1, b1) = 1.\n        Then, lcm(a,b) = g * a1 * b1 = l   => so a1 * b1 = l // g.\n\n   Therefore, for the edge to exist, we must have:\n        l % g == 0, and then the two numbers are g * x and g * y, where x * y = l//g and gcd(x,y)=1.\n\n However, note: there might be multiple pairs (x, y) such that x*y = l//g and gcd(x,y)=1. But the condition must hold for both edges.\n\n The problem: assign a positive integer to every lawn (at least 1) such that for every known edge (u,v,g,l):\n        Let a[u] and a[v] be the numbers for u and v.\n        Then, gcd(a[u], a[v]) = g and lcm(a[u], a[v]) = l.\n\n Steps:\n\n 1. Check for each edge that g divides l. If not, output \"NO\".\n\n 2. For each edge, we can compute the product: p = g * l. Then the two numbers for the endpoints must be divisors of p (but note: they must be multiples of g, and their product is p). Actually, we know that the numbers must be of the form (g * d) and (g * (p/(g*d))) but also note that the GCD condition requires that the two numbers (after factoring out g) are coprime.\n\n 3. However, we have multiple edges. We need to assign one number per lawn.\n\n Alternate approach:\n\n   Let a[i] be the number for lawn i.\n\n   For an edge (u, v, g, l):\n        a[u] and a[v] must be multiples of g, and the product of a[u] and a[v] must be g*l.\n\n   Moreover, the GCD of a[u] and a[v] is g. This implies that if we write a[u] = g * x, a[v] = g * y, then gcd(x, y)=1 and x*y = (g*l)//(g*g) = l//g.\n\n   But note: the same lawn might appear in multiple edges. So we have to satisfy all constraints.\n\n How to solve?\n\n   We can think of the following:\n\n   - Each edge gives constraints on the two endpoints.\n\n   - Note that the entire assignment must satisfy that for each edge (u, v): \n          a[u] * a[v] = g * l   (from the identity) and also that the GCD is g.\n\n   However, wait: the identity a * b = g * l is necessary, but is it sufficient? Not exactly: because we require gcd(a,b)=g. \n\n   Actually, from the representation: a = g * x, b = g * y, then the product is g^2 * x * y = g * l => so x * y = l // g. And we require gcd(x,y)=1.\n\n   So we can set up:\n\n        Let base = g for the edge, and then we must have a[u] divisible by g and a[v] divisible by g, and the ratio between a[u] and a[v] must be such that when we divide out g, the resulting factors are coprime and their product is l//g.\n\n   But note: the entire graph might not be connected. So we have to consider each connected component separately.\n\n   Steps:\n\n     Step 1: Precompute for each edge the value: p = g * l (which is the product of the two numbers). Then, for each node, we must have that the assigned number divides the product of any edge incident to it? Actually,",
    "response": "\nTo solve this problem, we need to determine if it's possible to assign numbers of mushrooms to each lawn in a forest such that for every given road (edge) connecting two lawns, the greatest common divisor (GCD) and least common multiple (LCM) of the numbers on the connected lawns match the provided values. \n\n### Approach\n1. **Problem Analysis**: The key observation here is that for any edge connecting two lawns with GCD `g` and LCM `l`, the product of the two numbers on the lawns must equal `g * l`. Additionally, the numbers must be such that their GCD is exactly `g` and their LCM is exactly `l`. This implies that the numbers can be expressed as `g * x` and `g * y`, where `x` and `y` are coprime integers whose product is `l / g`.\n\n2. **Graph Processing**: We model the lawns as nodes and the roads as edges in a graph. For each edge, we check if `l` is divisible by `g`. If not, the arrangement is impossible. \n\n3. **Connected Components**: The graph might consist of multiple connected components. For each component, we process all edges to derive constraints on the node values. Specifically, each node's value must be a multiple of the GCD of all incident edges. \n\n4. **Value Assignment**: For each connected component, we compute a base value (the product of all GCDs of incident edges). Then, for each node, we divide its derived value by the base value to get a normalized value. These normalized values must be pairwise coprime across edges within the component.\n\n5. **Validation**: After assigning values to all nodes, we verify that for every edge, the GCD and LCM conditions are satisfied. If all conditions hold, the solution is valid; otherwise, it's impossible.\n\n### Solution Code\n```python\nimport math\nfrom collections import defaultdict, deque\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"NO\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); g_val = int(data[index+2]); l_val = int(data[index+3])\n        index += 4\n        edges.append((u-1, v-1, g_val, l_val))\n    \n    graph = [[] for _ in range(n)]\n    for u, v, g, l in edges:\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n        \n    parent_map = {}\n    base = [1] * n\n    visited = [False] * n\n    \n    for i in range(n):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            while stack:\n                node = stack.pop()\n                for neighbor, g_val, l_val in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n                        parent_map[neighbor] = node\n            break\n\n    comp_nodes = set(range(n))\n    if parent_map:\n        comp_nodes = set()\n        q = deque([i])\n        while q:\n            node = q.popleft()\n            if node not in comp_nodes:\n                comp_nodes.add(node)\n                for neighbor, g_val, l_val in graph[node]:\n                    if neighbor != parent_map.get(node, -1) and neighbor not in comp_nodes:\n                        q.append(neighbor)\n\n    comp_edges = {node: [] for node in comp_nodes}\n    for u, v, g, l in edges:\n        if u in comp_nodes and v in comp_nodes:\n            comp_edges[u].append((v, g, l))\n            comp_edges[v].append((u, g, l))\n\n    for node in comp_nodes:\n        for neighbor, g_val, l_val in comp_edges[node]:\n            if l_val % g_val != 0:\n                print(\"NO\")\n                return\n                \n        base[node] = 1\n        for neighbor, g_val, l_val in comp_edges[node]:\n            base[node] = math.lcm(base[node], g_val)\n\n    assigned = [0] * n\n    for node in comp_nodes:\n        assigned[node] = base[node]\n\n    for node in comp_nodes:\n        for neighbor, g_val, l_val in comp_edges[node]:\n            num1 = assigned[node]\n            num2 = assigned[neighbor]\n            if math.gcd(num1, num2) != g_val or (num1 * num2) // g_val != l_val:\n                print(\"NO\")\n                return\n\n    for node in comp_nodes:\n        for neighbor, g_val, l_val in comp_edges[node]:\n            if (assigned[node] // g_val) * (assigned[neighbor] // g_val) != l_val // (g_val * g_val):\n                print(\"NO\")\n                return\n\n    for node in comp_nodes:\n        assigned[node] = base[node]\n        \n    print(\"YES\")\n    res = []\n    for i in range(n):\n        if i in comp_nodes:\n            res.append(str(assigned[i]))\n        else:\n            res.append(\"1\")\n            \n    print(\"\\n\" + \" \".join(res))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The input is read and parsed into the number of lawns (`n`) and roads (`m`), followed by the details of each road (connected lawns and their respective GCD and LCM values).\n\n2. **Graph Construction**: A graph is built where each node represents a lawn and edges represent roads with associated GCD and LCM values.\n\n3. **Component Identification**: Using depth-first search (DFS), the graph is traversed to identify connected components. Each component is processed separately.\n\n4. **Base Value Calculation**: For each node in a connected component, a base value is computed as the least common multiple (LCM) of all GCD values from its incident edges. This base value helps in deriving the mushroom counts.\n\n5. **Validation**: The derived values are checked against the GCD and LCM conditions for all edges. If any condition fails, the solution is deemed impossible (\"NO\"). Otherwise, the solution is valid (\"YES\"), and the assigned values are printed.\n\nThis approach efficiently checks the feasibility of assigning mushroom counts while ensuring all given constraints are met, leveraging graph traversal and mathematical properties of GCD and LCM.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\nfrom collections import defaultdict, deque\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"NO\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); g_val = int(data[index+2]); l_val = int(data[index+3])\n        index += 4\n        edges.append((u-1, v-1, g_val, l_val))\n    \n    graph = [[] for _ in range(n)]\n    for u, v, g, l in edges:\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n        \n    parent_map = {}\n    base = [1] * n\n    visited = [False] * n\n    \n    for i in range(n):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            while stack:\n                node = stack.pop()\n                for neighbor, g_val, l_val in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n                        parent_map[neighbor] = node\n            break\n\n    comp_nodes = set(range(n))\n    if parent_map:\n        comp_nodes = set()\n        q = deque([i])\n        while q:\n            node = q.popleft()\n            if node not in comp_nodes:\n                comp_nodes.add(node)\n                for neighbor, g_val, l_val in graph[node]:\n                    if neighbor != parent_map.get(node, -1) and neighbor not in comp_nodes:\n                        q.append(neighbor)\n\n    comp_edges = {node: [] for node in comp_nodes}\n    for u, v, g, l in edges:\n        if u in comp_nodes and v in comp_nodes:\n            comp_edges[u].append((v, g, l))\n            comp_edges[v].append((u, g, l))\n\n    for node in comp_nodes:\n        for neighbor, g_val, l_val in comp_edges[node]:\n            if l_val % g_val != 0:\n                print(\"NO\")\n                return\n                \n        base[node] = 1\n        for neighbor, g_val, l_val in comp_edges[node]:\n            base[node] = math.lcm(base[node], g_val)\n\n    assigned = [0] * n\n    for node in comp_nodes:\n        assigned[node] = base[node]\n\n    for node in comp_nodes:\n        for neighbor, g_val, l_val in comp_edges[node]:\n            num1 = assigned[node]\n            num2 = assigned[neighbor]\n            if math.gcd(num1, num2) != g_val or (num1 * num2) // g_val != l_val:\n                print(\"NO\")\n                return\n\n    for node in comp_nodes:\n        for neighbor, g_val, l_val in comp_edges[node]:\n            if (assigned[node] // g_val) * (assigned[neighbor] // g_val) != l_val // (g_val * g_val):\n                print(\"NO\")\n                return\n\n    for node in comp_nodes:\n        assigned[node] = base[node]\n        \n    print(\"YES\")\n    res = []\n    for i in range(n):\n        if i in comp_nodes:\n            res.append(str(assigned[i]))\n        else:\n            res.append(\"1\")\n            \n    print(\"\\n\" + \" \".join(res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 553,
        "completion_token_count": 1390,
        "thoughts_token_count": 1023
    }
}