{
    "start": 1758293104.9674642,
    "end": 1758293193.4463506,
    "start-formatted": "2025-09-19 23:45 KST",
    "end-formatted": "2025-09-19 23:46 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    \n    # The number of operations needed to reduce the string to length 1\n    # Each operation reduces the length by 1\n    # So we need (total_length - 1) operations\n    # Let's simulate the process of reducing the string\n    # We can track the number of 0s and 1s at each step\n    \n    # Start with n zeros and m ones\n    zeros = n\n    ones = m\n    \n    for _ in range(total_length - 1):\n        if zeros >= 2:\n            zeros -= 1\n            ones += 0\n        elif ones >= 2:\n            ones -= 1\n            zeros += 0\n        else:\n            break\n    \n    # After all possible reductions, we have one character left\n    final_char = '0' if zeros else '1'\n    \n    if final_char == str(g):\n        # We need to count the number of beautiful strings that reduce to g\n        # This is equivalent to counting the number of ways to arrange n 0s and m 1s\n        # such that the final character after reduction is g\n        # To do this, we need to simulate the process again and track the number of ways\n        \n        # We'll use dynamic programming to count the number of ways\n        # dp[i][j] = number of ways to have i 0s and j 1s\n        # and end up with a string that reduces to g\n        \n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i + j == 0:\n                    continue\n                if i >= 2:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD\n                if j >= 2:\n                    dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD\n        \n        # Now, we need to find how many ways to get to a string that reduces to g\n        # We can simulate the reduction again and track the final character\n        # We'll use memoization to avoid recomputation\n        \n        from functools import lru_cache\n        \n        @lru_cache(maxsize=None)\n        def reduce(i, j):\n            if i + j == 1:\n                return '0' if i else '1'\n            if i >= 2:\n                return reduce(i - 1, j)\n            if j >= 2:\n                return reduce(i, j - 1)\n        \n        final_char = reduce(n, m)\n        \n        if final_char == str(g):\n            # Now, we need to count the number of strings that reduce to g\n            # We can simulate the process again and track the number of ways to get to each state\n            # That's what we did in dp above\n            \n            # We can now compute the number of ways to reach a string that reduces to g\n            # But we need to track the final character after reduction\n            # So we'll create another DP table that tracks the final character\n            \n            # dp_final[i][j][c] = number of ways to have i 0s and j 1s that reduce to c\n            # c is 0 or 1\n            \n            dp_final = [[[0] * 2 for _ in range(m + 1)] for _ in range(n + 1)]\n            dp_final[0][0][0] = 1\n            dp_final[0][0][1] = 0\n            \n            for i in range(n + 1):\n                for j in range(m + 1):\n                    if i + j == 0:\n                        continue\n                    if i >= 2:\n                        for c in range(2):\n                            dp_final[i][j][c] = (dp_final[i][j][c] + dp_final[i - 1][j][c]) % MOD\n                    if j >= 2:\n                        for c in range(2):\n                            dp_final[i][j][c] = (dp_final[i][j][c] + dp_final[i][j - 1][c]) % MOD\n            \n            # Now, we need to simulate the reduction again and track the final character\n            # We can use memoization again to find the final character for each (i, j)\n            \n            @lru_cache(maxsize=None)\n            def reduce_char(i, j):\n                if i + j == 1:\n                    return '0' if i else '1'\n                if i >= 2:\n                    return reduce_char(i - 1, j)\n                if j >= 2:\n                    return reduce_char(i, j - 1)\n            \n            final_char = reduce_char(n, m)\n            \n            if final_char == str(g):\n                # The answer is the number of ways to get to a string that reduces to g\n                result = dp_final[n][m][g]\n            else:\n                result = 0\n        else:\n            result = 0\n    else:\n        result = 0\n    \n    print(result % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    \n    # The number of operations needed to reduce the string to length 1\n    # Each operation reduces the length by 1\n    # So we need (total_length - 1) operations\n    # Let's simulate the process of reducing the string\n    # We can track the number of 0s and 1s at each step\n    \n    # Start with n zeros and m ones\n    zeros = n\n    ones = m\n    \n    for _ in range(total_length - 1):\n        if zeros >= 2:\n            zeros -= 1\n            ones += 0\n        elif ones >= 2:\n            ones -= 1\n            zeros += 0\n        else:\n            break\n    \n    # After all possible reductions, we have one character left\n    final_char = '0' if zeros else '1'\n    \n    if final_char == str(g):\n        # We need to count the number of beautiful strings that reduce to g\n        # This is equivalent to counting the number of ways to arrange n 0s and m 1s\n        # such that the final character after reduction is g\n        # To do this, we need to simulate the process again and track the number of ways\n        \n        # We'll use dynamic programming to count the number of ways\n        # dp[i][j] = number of ways to have i 0s and j 1s\n        # and end up with a string that reduces to g\n        \n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i + j == 0:\n                    continue\n                if i >= 2:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD\n                if j >= 2:\n                    dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD\n        \n        # Now, we need to find how many ways to get to a string that reduces to g\n        # We can simulate the reduction again and track the final character\n        # We'll use memoization to avoid recomputation\n        \n        from functools import lru_cache\n        \n        @lru_cache(maxsize=None)\n        def reduce(i, j):\n            if i + j == 1:\n                return '0' if i else '1'\n            if i >= 2:\n                return reduce(i - 1, j)\n            if j >= 2:\n                return reduce(i, j - 1)\n        \n        final_char = reduce(n, m)\n        \n        if final_char == str(g):\n            # Now, we need to count the number of strings that reduce to g\n            # We can simulate the process again and track the number of ways to get to each state\n            # That's what we did in dp above\n            \n            # We can now compute the number of ways to reach a string that reduces to g\n            # But we need to track the final character after reduction\n            # So we'll create another DP table that tracks the final character\n            \n            # dp_final[i][j][c] = number of ways to have i 0s and j 1s that reduce to c\n            # c is 0 or 1\n            \n            dp_final = [[[0] * 2 for _ in range(m + 1)] for _ in range(n + 1)]\n            dp_final[0][0][0] = 1\n            dp_final[0][0][1] = 0\n            \n            for i in range(n + 1):\n                for j in range(m + 1):\n                    if i + j == 0:\n                        continue\n                    if i >= 2:\n                        for c in range(2):\n                            dp_final[i][j][c] = (dp_final[i][j][c] + dp_final[i - 1][j][c]) % MOD\n                    if j >= 2:\n                        for c in range(2):\n                            dp_final[i][j][c] = (dp_final[i][j][c] + dp_final[i][j - 1][c]) % MOD\n            \n            # Now, we need to simulate the reduction again and track the final character\n            # We can use memoization again to find the final character for each (i, j)\n            \n            @lru_cache(maxsize=None)\n            def reduce_char(i, j):\n                if i + j == 1:\n                    return '0' if i else '1'\n                if i >= 2:\n                    return reduce_char(i - 1, j)\n                if j >= 2:\n                    return reduce_char(i, j - 1)\n            \n            final_char = reduce_char(n, m)\n            \n            if final_char == str(g):\n                # The answer is the number of ways to get to a string that reduces to g\n                result = dp_final[n][m][g]\n            else:\n                result = 0\n        else:\n            result = 0\n    else:\n        result = 0\n    \n    print(result % MOD)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 1192,
        "thoughts_token_count": 0
    }
}