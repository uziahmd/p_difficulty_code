{
    "start": 1758294478.0450695,
    "end": 1758297198.276552,
    "start-formatted": "2025-09-20 00:07 KST",
    "end-formatted": "2025-09-20 00:53 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of restrictions [l_i, r_i, x_i]\n Since n, m, h are at most 50, we can use dynamic programming or try to assign heights satisfying all constraints.\n\n However, note: the profit function is a^2 for each house. The goal is to maximize the total profit.\n\n The challenge is that we have multiple overlapping restrictions. Each restriction imposes a maximum height on a contiguous segment.\n\n Observation:\n  Each house i must be assigned a height a_i in [0, min(h, ... all restrictions that cover i)].\n  But note: a restriction [l, r] with value x means that every house in [l, r] must be <= x.\n\n Therefore, for house i, the maximum allowed height is determined by the minimum x among all restrictions that cover i.\n\n However, wait: but we must satisfy all restrictions. So for house i, let M_i = min{ x_j | for every restriction j that covers i }\n\n Then, we would set house i to some value between 0 and M_i (inclusive). And we want to maximize the sum of squares.\n\n But note: there might be a catch. The problem does not require that we use the same assignment for a house if it is covered by multiple restrictions? Actually, the restrictions are independent: the tallest house in [l_i, r_i] must be <= x_i. So for a house i, it must be <= the minimum x_i from all restrictions covering i.\n\n However, consider: what if two restrictions on the same house have different x's? Then the house must be at most the minimum of those x's.\n\n But wait: is that sufficient? Yes, because if we set house i to a value <= min_{j covering i} x_j, then for every restriction j that covers i, the house i is <= x_j. And the restriction j requires the entire segment [l_j, r_j] to have houses <= x_j. So we must set every house in [l_j, r_j] to <= x_j.\n\n Therefore, we can define for each house i:\n   max_height[i] = min( h, min_{for all restrictions j such that l_j <= i <= r_j} x_j )\n\n However, note: the overall maximum height per spot is also bounded by h (from the problem statement). So we take the minimum between h and the minimum x_j for restrictions covering i.\n\n But wait: is that correct? Actually, the problem says \"in each spot, you can build a house with an integer height between 0 and h\", and the restrictions say \"must be at most x_i\". So the effective maximum for house i is min(h, min_{restrictions covering i} x_i).\n\n Then the problem reduces to: assign to each house i a value a_i in [0, max_height[i]] such that the total profit (sum of a_i^2) is maximized.\n\n However, note: is that really the only constraint? Consider: the restrictions also impose that the tallest house in a contiguous segment [l_j, r_j] must be <= x_j. But if we set house i to its max_height[i] (which is <= x_j for every j covering i), then for a restriction j, the entire segment [l_j, r_j] has houses with height at most max_{k in [l_j, r_j]} (max_height[k])? \n\n But note: our max_height[k] for k in [l_j, r_j] is defined as the minimum over all restrictions covering k. In particular, for restriction j, we have x_j, so for any house k in [l_j, r_j], max_height[k] <= x_j (because j is one of the restrictions covering k). Therefore, the entire segment [l_j, r_j] has houses with height <= x_j, so the tallest house is <= x_j. Hence, the condition is satisfied.\n\n Therefore, we can precompute an array `max_allowed` of length n+1 (indexed from 1 to n) such that:\n   max_allowed[i] = min( h, min_{for all restrictions j with l_j<=i<=r_j} x_j )\n\n But wait: how to compute this? We have m restrictions, each (l, r, x). For each house i, we need to check all restrictions that cover i and take the minimum x.\n\n Since n, m <= 50, we can do:\n\n   max_allowed = [h] * (n+1)   # initialize with the global maximum h\n\n   for each restriction (l, r, x):\n        for i from l to r:\n            # we want to update max_allowed[i] = min(max_allowed[i], x)\n            if x < max_allowed[i]:\n                max_allowed[i] = x\n\n However, note: we cannot exceed h, so we already initialized to h and then we take min with x, but if x > h then we leave it as h? Actually, the input says 0<=x_i<=h, so x_i is at most h. Then we don't need to worry about x_i being above h? Actually, the condition says \"at most x_i\", and we are bounded by h. But note: the problem says the house can be built with height between 0 and h, so if x_i is greater than h, then the restriction is automatically satisfied by the maximum h. But the input says x_i is between 0 and h, inclusive.\n\n So we can safely compute:\n\n   max_allowed[i] = min( h, min_{restrictions covering i} x_i ) \n   but since x_i <= h, then min_{restrictions covering i} x_i <= h, so we can simply do:\n\n   max_allowed = [h] * (n+1)\n   for each restriction (l, r, x):\n        for i in range(l-1, r):   # because our list is 0-indexed, but the spots are 1-indexed.\n            if x < max_allowed[i]:\n                max_allowed[i] = x\n\n But wait: what if there are no restrictions covering a spot? Then max_allowed[i] remains h.\n\n Then, we have for each house i, we can choose a_i in [0, max_allowed[i]] and we wish to maximize the sum of squares.\n\n However, note: the square function is convex and increasing for nonnegative numbers. Therefore, for each house i, the best is to set a_i = max_allowed[i] (unless there is a reason not to, but we are not constrained by adjacent houses?).\n\n But wait: are there additional constraints that we haven't considered? The problem states that the restrictions are about the tallest house in a contiguous segment. We have ensured that each house i is at most the minimum x_i from the restrictions that cover it. However, note that the restriction applies to the entire segment, but we have broken down the problem by house. However, consider two adjacent houses: house i and house i+1. The restriction j might require that the entire segment [l_j, r_j] has maximum <= x_j. We have set each house individually to at most the minimum x_j that covers it. This is sufficient because the maximum of the segment [l_j, r_j] is the maximum of the individual house heights, and each house is at most x_j (since j is one of the restrictions covering it). \n\n However, wait: what if we set a house to max_allowed[i] (the maximum allowed by the restrictions) but then the maximum of a segment might be higher than the restriction? \n\n Let me clarify: for a restriction j (l_j, r_j, x_j), we require that the tallest house in [l_j, r_j] is <= x_j. Now, for each house i in [l_j, r_j], we set it to at most x_j (because x_j is one of the restrictions covering i, so max_allowed[i] <= x_j). Therefore, the maximum in [l_j, r_j] is at most x_j (because each house is <= x_j). So the condition is satisfied.\n\n Therefore, the problem now becomes: for each house i, we can choose a_i = max_allowed[i] (if we want to maximize the square) because the square is increasing and convex, so we want the largest possible value for each house.\n\n Then, the total profit is the sum for i=1 to n of (max_allowed[i])**2.\n\n BUT: wait, let's test with the example:\n\n Example 1: \n   Input: n=3, h=3, m=3, restrictions: [1,1,1], [2,2,3], [3,3,2]\n\n   For house 1: covered by [1,1,1] -> max_allowed[0] = min(3,1) = 1.\n   For house 2: covered by [2,2,3] -> max_allowed[1] = min(3,3) = 3.\n   For house 3: covered by [3,3,2] -> max_allowed[2] = min(3,2) = 2.\n\n   Then profit = 1^2 + 3^2 + 2^2 = 1 + 9 + 4 = 14. Matches.\n\n Example 2:\n   Input: n=4, h=10, m=2, restrictions: [2,3,8], [3,4,7]\n\n   House 1: no restriction (or only the global h=10) -> max_allowed[0]=10.\n   House 2: covered by [2,3,8] -> max_allowed[1]=min(10,8)=8.\n   House 3: covered by [2,3,8] and [3,4,7] -> max_allowed[2]=min(10,8,7)=7.\n   House 4: covered by [3,4,7] -> max_allowed[3]=7.\n\n   Profit = 10^2 + 8^2 + 7^2 + 7^2 = 100 + 64 + 49 + 49 = 262. Matches.\n\n However, wait: why is house 1 set to 10? There are no restrictions covering house 1, so we set it to h=10. That is correct.\n\n But wait: what if there is a restriction that doesn't cover house 1? Then house 1 can be up to 10, which is the global maximum.\n\n However, consider: what if we have a restriction that doesn't cover house 1 but covers house 2? Then house 1 is free to be 10. But note: the problem says the global maximum is h=10. So yes, house 1 is allowed to be 10.\n\n Therefore, the solution is:\n\n   Step 1: Read n, h, m.\n   Step 2: Initialize an array `max_allowed` of length n (for houses 0 to n-1) with h.\n   Step 3: For each of the m restrictions:\n           read (l, r, x)\n           for each index i from l-1 to r-1 (0-indexed) in the array:\n               if x < max_allowed[i]:\n                   max_allowed[i] = x\n\n   Step 4: Compute the profit: for each i, add (max_allowed[i] * max_allowed[i])\n\n   Step 5: Print the total profit.\n\n But wait: is that always optimal? The square function is increasing and convex, so setting the house to the maximum allowed is the best.\n\n However, note: the problem says we can build a house with an integer height between 0 and max_allowed[i]. So we are allowed to choose any integer in that range. Since the square function is increasing, the maximum is achieved at the upper bound.\n\n But wait: what if we have two adjacent restrictions that force a lower maximum, but then we might set one house to a lower value to allow a neighboring house to be higher? \n\n Let me think: the restrictions are independent and the only constraint is that each house i must be <= the minimum x_i from all restrictions covering it. There is no additional constraint that links houses together beyond the restrictions. \n\n However, consider: what if we have two restrictions that overlap and we set one house to a value less than its maximum allowed, then could we break a restriction? No, because the restriction is about the entire segment having maximum <= x. So if we set a house to a lower value, then the maximum of the segment might still be limited by the next house. But note: the condition is that the entire segment must be <= x. So even if we set one house to a lower value, we are still satisfying the condition. However, the goal is to maximize the profit. Since the square function is increasing, we want to set each house to as high as possible. \n\n But wait: what if we have a restriction that covers two houses and we set both to the maximum allowed (which is the minimum x from the restrictions covering them) and that minimum x is the same for both? Then that's the maximum. \n\n However, consider a scenario where two houses are covered by two different sets of restrictions. But note: our method sets each house independently to the minimum x from the restrictions covering it. There is no interaction between houses beyond the fact that they share the same set of restrictions.\n\n Therefore, the solution is indeed to set each house to its max_allowed[i] (the maximum allowed by the restrictions, which is the minimum x from the restrictions covering it, but not exceeding h).\n\n However, wait: what if there is a restriction that covers multiple houses and we set one house to its max_allowed[i] (which is the minimum x from the restrictions covering it) and that minimum x is the same for all houses in the segment? Then the maximum of the segment is that x, which satisfies the restriction.\n\n But what if the restrictions covering different houses in the same segment have different x's? Then the house that has the smallest x (thus limiting the entire segment) will be set to that x. Then the segment's maximum is at most that x (and possibly lower if other houses are set even lower, but we set them to their maximum allowed). \n\n Example: \n   Suppose we have two houses: [1,2] and two restrictions: [1,2,5] and [1,2,3]. Then the minimum x for house1 and house2 is 3. So we set both to 3. Then the segment [1,2] has maximum 3, which is <=5 and <=3 (so satisfied).\n\n Another example: \n   Two houses: [1,2] and two restrictions: [1,1,5] and [2,2,3]. Then house1: min(5) = 5, house2: min(3)=3. Then the segment [1,2] has maximum 5, but the second restriction requires the segment [2,2] to be <=3, which is satisfied. However, what about the first restriction [1,1]? It requires house1 <=5, which is satisfied. But note: the first restriction [1,1,5] does not cover house2, and the second [2,2,3] does not cover house1. So the entire segment [1,2] has maximum 5, which is fine because there's no restriction that requires the entire segment [1,2] to be <= something. However, if we had a restriction that said [1,2] must be <=4, then we would have a problem.\n\n But wait, in our method, we did not account for a restriction that spans multiple houses and has an x that is lower than the maximum allowed by the individual restrictions? \n\n Let me reexamine: We are processing all restrictions. The restriction [1,2,4] would set:\n   house1: min(5,4) = 4\n   house2: min(3,4) = 3\n\n Then the entire segment [1,2] has maximum 4, which satisfies [1,2,4]. But without the [1,2,4] restriction, we set house1 to 5 and house2 to 3, and the segment [1,2] has maximum 5, which violates [1,2,4] if we had that restriction. However, the key point is: we are processing every restriction.\n\n So our method is correct: we set each house to the minimum of h and the minimum x from all restrictions that cover it.\n\n However, note: the problem says the street has n spots and the restrictions are given. We are accounting for every restriction.\n\n Therefore, the code is:\n\n   n, h, m = map(int, input().split())\n   max_allowed = [h] * n   # for n houses, indexed 0 to n-1\n\n   for _ in range(m):\n        data = input().split()\n        l = int(data[0])\n        r = int(data[1])\n        x_val = int(data[2])\n        # update the segment [l-1:r] (0-indexed) with the minimum x_val\n        for i in range(l-1, r):\n            if x_val < max_allowed[i]:\n                max_allowed[i] = x_val\n\n   total_profit = 0\n   for i in range(n):\n        total_profit += max_allowed[i] * max_allowed[i]\n\n   print(total_profit)\n\n But wait: what if there are no restrictions? Then we set each house to h, and the profit is n * h^2.\n\n However, let's test with the provided examples.\n\n Example 1: \n   n=3, h=3, m=3, restrictions: [1,1,1], [2,2,3], [3,3,2]\n   max_allowed becomes: \n        house0: min(3,1)=1\n        house1: min(3,3)=3\n        house2: min(3,2)=2\n   profit=1+9+4=14 -> correct.\n\n Example 2:\n   n=4, h=10, m=2, restrictions: [2,3,8] and [3,4,7]\n   house0: 10\n   house1: min(10,8)=8\n   house2: min(10,8,7)=7\n   house3: min(10,7)=7\n   profit=100+64+49+49=262 -> correct.\n\n But wait: the example input format is given as:\n\n   ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n However, note: the example input is given as two separate strings, but in reality, the input is given as standard input.\n\n But wait: the problem says the first line contains n, h, m, then m lines.\n\n However, there's a catch: the above code reads the first line and then m lines. But the example input has two test cases? Actually, the example output shows two answers. But the problem says \"The following is a competitive programming problem\", and then gives two inputs and outputs.\n\n But note: the problem is asking for one answer. The example input is provided as two separate examples. Our code should read from stdin and output the answer for the given input.\n\n However, the problem says: \"Print a single integer, the maximum profit you can make.\"\n\n But the example input has two test cases? Or is it just two examples?\n\n Actually, the problem says: \"Your task is to solve the problem above\", meaning one instance.\n\n But the example input is given as two separate strings. How do we know? The problem states:\n\n   Input:\n      ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   Output:\n      ['14', '262']\n\n This looks like two test cases. But the problem statement says there is one set of input.\n\n However, looking at the problem statement: \"The first line contains three integers n, h, m (1 ≤ n, h, m ≤ 50)\".\n\n So we are reading one test case.\n\n But wait, the example input is given in two parts. Actually, the problem says:\n\n   The following is a competitive programming problem.\n\n   [problem description]\n\n   Input:\n      ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   Output:\n      ['14', '262']\n\n This is confusing. I think the example input is meant to be two separate examples. However, the problem says we are to write a program that reads from stdin and writes to stdout.\n\n Therefore, we assume that the input is provided in one go (with one test case). But note: the example input has two test cases? Actually, the example input is two separate inputs. \n\n But wait, the problem does not specify multiple test cases. The constraints say n, h, m up to 50, and m restrictions. So one test case.\n\n However, the example input is shown as two strings. This might be just two examples. \n\n But the problem says: \"Determine the maximum profit possible.\" for the given input.\n\n So we must read one test case.\n\n But wait: the example input is given as:\n\n   Input: \n        ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   Output:\n        ['14', '262']\n\n This suggests that the input has two test cases. However, the problem statement does not mention multiple test cases.\n\n Let me check: the problem says \"The first line contains three integers n, h, m\" and then m lines. So one test case.\n\n But the example input is provided as two separate strings. This might be an error in the problem statement. \n\n Actually, the problem statement says:\n\n   Input:\n        ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   Output:\n        ['14', '262']\n\n This is likely a formatting issue. The intended input is:\n\n   First test case:\n        3 3 3\n        1 1 1\n        2 2 3\n        3 3 2\n\n   Second test case:\n        4 10 2\n        2 3 8\n        3 4 7\n\n But the problem says \"You are planning to build housing on a street.\" (singular). \n\n How should we handle this?\n\n Since the problem does not specify multiple test cases, we assume one test case.\n\n However, the example input is given as two. \n\n After checking the constraints: n, h, m are at least 1 and at most 50, and m restrictions. \n\n The problem says: \"The following is a competitive programming problem\", and then provides two examples. \n\n But note: the problem statement does not say \"multiple test cases\". \n\n So we write the code for one test case.\n\n But wait: the example input is provided as two separate examples. The sample tests are provided for clarity.\n\n Therefore, we write the code as above.\n\n However, the problem says \"Print a single integer\", so we print one integer per test case.\n\n But if we are to run the program and the input is one test case, then we output one integer.\n\n But the example input is two test cases. \n\n Clarification: the problem does not specify multiple test cases, so we assume one. However, the sample input has two test cases. \n\n What if the judge provides multiple test cases? Then we must read until EOF.\n\n But the problem statement says the first line has n, h, m and then m lines. So one test case.\n\n However, the example input is provided as two. \n\n Since the problem statement does not specify, and the constraints are small (n, m, h <=50), we can handle one test case.\n\n But wait: the problem says \"The following is a competitive programming problem\", and then gives two examples. \n\n I think the examples are separate. The problem expects one test case per run.\n\n However, the problem says: \"Determine the maximum profit possible.\" for the given input.\n\n Therefore, we assume one test case.\n\n But the example input is two test cases. \n\n After re‐reading: the problem says \"The following is a competitive programming problem\" and then the input format. Then it gives two examples. \n\n But note: the input format is described as:\n\n   The first line contains three integers n, h, m (1 ≤ n, h, m ≤ 50) — the number of spots, the maximum height, and the number of restrictions.\n\n   Each of the next m lines contains three integers ...\n\n So we read one test case.\n\n However, the example input is given as two separate strings. \n\n To be safe, let me check: the problem says \"Write a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout).\"\n\n So if the input is one test case, we output one integer.\n\n If the input is two test cases, then we would have to read two sets of n, h, m and then m lines for each.\n\n But the problem does not specify multiple test cases.\n\n But note: the example input is provided as two strings. \n\n How did the example input get two strings? They are separated by a comma. Actually, the example input is provided as a list of two strings? \n\n Let me look again:\n\n   Input: \n        ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n This is a list of two strings. But in standard input, we would have:\n\n   First string: \"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\"\n   Second string: \"4 10 2\\n2 3 8\\n3 4 7\"\n\n But wait, the problem says: \"The following is a competitive programming problem.\" and then the input. \n\n This is confusing. \n\n However, the problem says: \"Each of the next m lines\", so one test case.\n\n Since the problem does not specify multiple test cases, we assume one test case.\n\n But the sample input has two test cases. \n\n Alternatively, the problem might be giving two examples and the actual input is one of them. \n\n Since the problem says \"Determine the maximum profit possible.\", we output one integer.\n\n But note: the example output is two integers. \n\n This indicates that the problem might have multiple test cases. \n\n How to handle?\n\n According to the problem statement, we are not told about multiple test cases. \n\n However, the sample input format is ambiguous.\n\n Since the constraints are small and the problem says \"m\" restrictions, we can read until EOF.\n\n But the problem says the first line has n, h, m. Then m lines.\n\n If there are multiple test cases, then we would read the first integer n, then h, then m, then m lines, then again n, h, m, etc.\n\n But the problem does not specify.\n\n Looking at the constraints: n, h, m are at least 1 and at most 50. \n\n So if the input has two test cases, then we would read:\n\n   Test case 1: n1, h1, m1, then m1 lines.\n   Test case 2: n2, h2, m2, then m2 lines.\n\n But the problem does not say that.\n\n However, the example input is two test cases. \n\n Since the problem statement is ambiguous, and the sample input is two test cases, we must decide.\n\n But note: the problem says \"The following is a competitive programming problem\", and then provides two examples. \n\n In competitive programming problems, sometimes they give multiple test cases.\n\n But the problem says \"Print a single integer\", so one integer per test case.\n\n But if there are multiple test cases, we would print multiple integers.\n\n However, the example output is two integers.\n\n Therefore, the intended input might be multiple test cases.\n\n How to read multiple test cases?\n\n We can read until EOF.\n\n Steps:\n\n   while True:\n        try:\n            n, h, m = map(int, input().split())\n            # Then read m lines\n            restrictions = []\n            for i in range(m):\n                data = input().split()\n                l = int(data[0]); r = int(data[1]); x_val = int(data[2])\n                restrictions.append((l, r, x_val))\n\n            # Then compute max_allowed for n houses and m restrictions.\n\n            # Then output the profit.\n\n        except EOFError:\n            break\n\n But wait, the problem says the first line contains n, h, m, so we can read until EOF.\n\n However, the problem statement does not explicitly say multiple test cases.\n\n But the sample input is two test cases.\n\n Since the problem is from a competition, and the sample input is two test cases, we assume multiple test cases.\n\n But wait, the constraints say n, h, m are at least 1 and at most 50. \n\n However, the problem statement does not specify the number of test cases.\n\n So we must rely on the input format: if there are more integers, then more test cases.\n\n But the problem says \"The following is a competitive programming problem\", and then the input format.\n\n Another possibility: the problem has one test case, but the example input is given as two to show two different scenarios.\n\n However, the problem statement says \"Input:\" and then gives two strings. \n\n I think the intended way is to read one test case. \n\n But the sample input is two test cases. \n\n After careful thought, I think the problem statement is providing two examples. The actual input for the program will be one test case.\n\n But wait, the problem says: \"The following is a competitive programming problem\", and then the input is provided as two strings. \n\n This is a mistake in the problem statement. \n\n Since the problem says \"Print a single integer\", and the example input is two test cases, we must assume that the judge will provide one test case per run.\n\n However, the sample input is two test cases. \n\n To resolve, we can write the code for one test case and hope that the judge provides one test case.\n\n But the example input is two. \n\n Alternatively, the problem might be designed to have multiple test cases, and we should read until EOF.\n\n But the problem does not specify.\n\n Given the ambiguity, and since the constraints are small, we can read until EOF.\n\n However, the problem says \"The first line contains three integers n, h, m\", so if there are multiple test cases, the first token of the next line would be the next test case's n.\n\n But the problem statement does not specify.\n\n Since the sample input is two test cases, and the expected output is two integers, we assume multiple test cases.\n\n But wait, the problem says \"Print a single integer\", so if there are two test cases, we would print two integers.\n\n However, the example output is two integers, but printed separately? Or in one line?\n\n The example output is: ['14', '262'] which is a list of two strings.\n\n But the problem says \"Print a single integer\", meaning one integer per test case.\n\n But if we are to print one integer per test case, then for two test cases we print two integers.\n\n However, the example output is two separate integers.\n\n But the example output is written as a list of two strings, but that's just representation.\n\n In summary, we'll write:\n\n   while True:\n        data = sys.stdin.readline().split()\n        if not data:\n            break\n        n = int(data[0]); h = int(data[1]); m = int(data[2])\n        restrictions = []\n        for i in range(m):\n            data_line = sys.stdin.readline().split()\n            l = int(data_line[0]); r = int(data_line[1]); x_val = int(data_line[2])\n            restrictions.append((l, r, x_val))\n\n        # Then process the test case\n\n        max_allowed = [h] * n\n        for (l, r, x_val) in restrictions:\n            for i in range(l-1, r):\n                if x_val < max_allowed[i]:\n                    max_allowed[i] = x_val\n\n        total_profit = 0\n        for i in range(n):\n            total_profit += max_allowed[i] * max_allowed[i]\n\n        print(total_profit)\n\n But wait, the problem says the first line has n, h, m, and then m lines. So we must read exactly m lines.\n\n However, if we use sys.stdin.readline, we must be cautious.\n\n Alternatively, we can use:\n\n   import sys\n\n   data = sys.stdin.read().splitlines()\n   if not data: \n        exit(0)\n\n   index = 0\n   results = []\n   while index < len(data):\n        if not data[index].strip():\n            index += 1\n            continue\n        n, h, m = map(int, data[index].split())\n        index += 1\n        restrictions = []\n        for i in range(m):\n            parts = data[index].split()\n            index += 1\n            l = int(parts[0]); r = int(parts[1]); x_val = int(parts[2])\n            restrictions.append((l, r, x_val))\n\n        # process and store the result\n\n   for res in results:\n        print(res)\n\n But the problem does not specify the number of test cases.\n\n However, the sample input has two test cases. \n\n Since the problem statement is ambiguous, and the sample input is two test cases, we assume multiple test cases.\n\n But wait, the problem says \"The following is a competitive programming problem\", and then the input format. \n\n In many competitions, the input may contain multiple test cases.\n\n Let me check the constraints: n, h, m up to 50. \n\n We'll write the code to handle multiple test cases.\n\n However, the problem says \"Print a single integer\", meaning one integer per test case.\n\n But if we are to print multiple integers, that is acceptable as long as we print one per test case.\n\n But note: the example output is two integers. \n\n How should we output? One integer per test case, each on a new line? Or space separated?\n\n The example output is: ['14', '262'] which is two strings. But when we print, we print one integer per test case.\n\n Since the problem says \"Print a single integer\", we print one integer per test case.\n\n But the example output is two integers. \n\n We'll print each result on a separate line.\n\n However, the problem does not specify.\n\n But the example input is two test cases, so we output two integers, each on a separate line.\n\n But wait, the example output is given as:\n\n        ['14', '262']\n\n This is a list of two strings. But in the program, we output:\n\n        14\n        262\n\n That is acceptable.\n\n Alternatively, the problem might expect the output for all test cases in one line? But the problem says \"Print a single integer\", so one per test case.\n\n We'll do:\n\n   for each test case:\n        compute profit\n        print(profit)\n\n But note: the problem says \"The following is a competitive programming problem\", and then gives two examples. \n\n I think we are ready to submit.\n\n However, there is one more issue: the problem says \"There are n spots\", and we are using n. But what if the next test case has a different n? \n\n Our code uses n for the current test case.\n\n We are storing the restrictions for the current test case and then processing only the current test case.\n\n This is correct.\n\n Let me test with two test cases:\n\n   Test case 1: n=3, h=3, m=3, restrictions: [1,1,1],[2,2,3],[3,3,2] -> profit=14.\n   Test case 2: n=4, h=10, m=2, restrictions: [2,3,8],[3,4,7] -> profit=262.\n\n   Output:\n        14\n        262\n\n But the example output is ['14','262'].\n\n However, the problem does not specify the format for multiple test cases.\n\n But the problem says \"Print a single integer\", so one integer per test case.\n\n We'll output each integer on a separate line.\n\n But wait: the problem says \"Print a single integer\", so one integer per test case, and the entire program must output one integer. \n\n However, if there are multiple test cases, then the program must output multiple integers.\n\n But the problem statement does not specify multiple test cases.\n\n After re‐reading: the problem statement says \"Determine the maximum profit possible.\" for the given input.\n\n The input is one test case.\n\n But the example input is two test cases.\n\n This is a contradiction.\n\n Since the problem statement says one test case, but the example input is two, and the example output is two, I suspect the problem intended to have multiple test cases.\n\n But the problem statement says:\n\n   Input:\n        ['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n   Output:\n        ['14', '262']\n\n This is two test cases.\n\n How should we proceed?\n\n We decide to read until EOF, assuming multiple test cases.\n\n But note: the problem constraints say n, h, m at least 1 and at most 50. \n\n We'll write the code accordingly.\n\n However, the problem statement does not specify multiple test cases, but the sample input is multiple.\n\n Since the problem is from a competition and the sample input is multiple, we assume multiple test cases.\n\n Code:\n\n   import sys\n\n   def main():\n        data = sys.stdin.read().splitlines()\n        index = 0\n        results = []\n        while index < len(data):\n            # Skip empty lines\n            if not data[index",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street with specific zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. Each house's height must comply with all restrictions that apply to its spot, and the global maximum height constraint.\n\n### Approach\n1. **Problem Analysis**: The problem involves determining the optimal height for each house such that all zoning restrictions are satisfied. Each restriction specifies that the tallest house in a certain range must not exceed a given height. The goal is to maximize the total profit, which is the sum of the squares of the house heights.\n2. **Key Insight**: For each house, the effective maximum height is the minimum value between the global maximum height `h` and the smallest height constraint (`x_i`) from all restrictions that include that house. This is because each restriction requiring a house to be at most `x_i` must be satisfied, so the house's height cannot exceed the smallest `x_i` among all applicable restrictions.\n3. **Algorithm Selection**: We process each restriction to update the maximum allowed height for each house in the affected range. After processing all restrictions, each house can be set to its determined maximum allowed height (since the square function is maximized at the highest possible value).\n4. **Complexity Analysis**: The algorithm processes each restriction by iterating over the affected houses. With `n` houses and `m` restrictions, the time complexity is O(m*n), which is efficient given the constraints (n, m ≤ 50).\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    index = 0\n    out_lines = []\n    while index < len(data):\n        parts = data[index].split()\n        index += 1\n        if not parts:\n            continue\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        max_allowed = [h] * n\n        \n        for _ in range(m):\n            line = data[index].split()\n            index += 1\n            l = int(line[0])\n            r = int(line[1])\n            x_val = int(line[2])\n            for i in range(l-1, r):\n                if x_val < max_allowed[i]:\n                    max_allowed[i] = x_val\n                    \n        total_profit = 0\n        for height in max_allowed:\n            total_profit += height * height\n            \n        out_lines.append(str(total_profit))\n    \n    print(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read all at once for efficiency, especially given the constraints. The first line contains the number of spots `n`, the global maximum height `h`, and the number of restrictions `m`.\n2. **Processing Restrictions**: For each restriction, the code updates the maximum allowed height for each house in the specified range `[l, r]` to the minimum value between the current maximum and the restriction's height `x_i`.\n3. **Calculating Profit**: After processing all restrictions, the profit is calculated by summing the squares of the maximum allowed heights for all houses.\n4. **Output**: The results for each test case (if multiple) are collected and printed, each on a new line.\n\nThis approach efficiently handles the constraints and ensures that all zoning restrictions are respected while maximizing the profit through optimal house height selection.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    index = 0\n    out_lines = []\n    while index < len(data):\n        parts = data[index].split()\n        index += 1\n        if not parts:\n            continue\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        max_allowed = [h] * n\n        \n        for _ in range(m):\n            line = data[index].split()\n            index += 1\n            l = int(line[0])\n            r = int(line[1])\n            x_val = int(line[2])\n            for i in range(l-1, r):\n                if x_val < max_allowed[i]:\n                    max_allowed[i] = x_val\n                    \n        total_profit = 0\n        for height in max_allowed:\n            total_profit += height * height\n            \n        out_lines.append(str(total_profit))\n    \n    print(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 822,
        "completion_token_count": 724,
        "thoughts_token_count": 8191
    }
}