{
    "start": 1758299377.1184409,
    "end": 1758302828.8554397,
    "start-formatted": "2025-09-20 01:29 KST",
    "end-formatted": "2025-09-20 02:27 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, let's break down the problem.\n\nWe are to find:\n1. The minimum number of edges `t` that must be added to form a simple cycle of odd length (without repeating vertices) and \n2. The number of ways `w` (without adding loops or parallel edges) to add exactly `t` edges to achieve this.\n\nNote: The graph is undirected, without loops or parallel edges, and not necessarily connected.\n\nObservation:\n\nA simple cycle of odd length (at least 3) has an odd number of edges (since for a cycle with k vertices, we have k edges, and k is odd).\n\nWe are allowed to add edges arbitrarily (as long as no loop or parallel edge is created). We want the minimum number of edges to add so that there exists at least one odd cycle.\n\nWhat are the possibilities?\n\nCase 1: The graph already contains an odd cycle.\n   Then t = 0, and w = 1 (if the graph has at least one odd cycle, then we don't need to add any edge, but note: we are counting the ways to add 0 edges, which is one way).\n\nBut wait, the problem says \"minimum number of edges that must be added\", so if the graph already has an odd cycle, we don't need to add any.\n\nHow do we check for odd cycles? We can use bipartite coloring (BFS/DFS) on each connected component. If a component is not bipartite, then it contains an odd cycle.\n\nCase 2: The graph does not contain an odd cycle (i.e., every connected component is bipartite). Then we consider adding edges.\n\nWhat is the minimal number of edges we can add to create an odd cycle?\n\nNote: In a bipartite graph, all cycles are even. To form an odd cycle, we need to break the bipartiteness.\n\nOption 1: Add a single edge?\n   Consider: In a bipartite graph, if we add an edge within the same part, then we might form an odd cycle? Let's see.\n\nExample: \n   Suppose we have two parts in a bipartite graph: (A, B). \n   Adding an edge inside A: (u, v) where u, v in A.\n   Then, consider a path from u to v that goes through some nodes. Since the original graph was bipartite, the distance from u to v must be even (because they are in the same part). Then the cycle formed by the edge (u,v) and the path is of length (distance(u,v) + 1), which is odd (even+1). So yes, adding one edge within the same part creates an odd cycle.\n\nBut note: we cannot just assume that there is a path between every two nodes in the same part. However, if the graph is connected, then the entire component is one bipartite graph. But what if the graph is disconnected?\n\nActually, the graph may have multiple connected components. We are allowed to add edges arbitrarily, but note:\n\n- We are looking for the minimal number of edges to add. So if we can form an odd cycle by adding one edge, then t=1.\n\nBut wait: what if the graph is bipartite (so no odd cycle) but has multiple connected components? Then we can choose two vertices in the same part of one connected component and add an edge between them? \n\nHowever, note: if we have two connected components, then adding an edge between two vertices from the same part of one component doesn't necessarily form a cycle because there might be no path connecting them. But wait, the definition of cycle requires the cycle to be formed by edges. Without a path, we don't have a cycle.\n\nSo actually, when we add an edge (u, v) in the same part of a connected component, we require that there is a path from u to v in the same component (so that we form a cycle). But in a connected bipartite graph, there is a path from u to v (and the parity of the path length is even because u and v are in the same part). Therefore, adding the edge (u, v) will form a cycle of odd length (the path plus the edge). \n\nBut what if the graph is not connected? Then we have multiple connected components. We can choose any connected component and add an edge within the same part of that component, and that will form an odd cycle. However, note: we might also be able to form an odd cycle by connecting two different components? \n\nWait, consider two bipartite graphs (components). Suppose we have two components, each being bipartite. Now, if we add an edge between two vertices from the same part of one component, then we get an odd cycle in that component. Alternatively, we could add an edge between two vertices from different components. But note:\n\nIf we connect two components, then we merge",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges required to add to an undirected graph to form a simple cycle of odd length, and the number of ways to achieve this. The solution involves analyzing the graph's structure, specifically checking for bipartiteness in its connected components.\n\n### Approach\n1. **Check for Existing Odd Cycles**: The graph already contains an odd cycle if any of its connected components is not bipartite. This can be checked using BFS or DFS with bipartite coloring. If such a component exists, no edges need to be added (t = 0, w = 1).\n\n2. **Graph is Bipartite**: If all components are bipartite, we then consider adding edges:\n   - **Single Edge Addition (t = 1)**: Adding an edge within the same part of any bipartite component will create an odd cycle. The number of such edges is the sum over all components of combinations of vertices within the same part.\n   - **Two Edge Addition (t = 2)**: If single-edge addition is not possible (e.g., the graph is disconnected or has isolated vertices), we need to connect two vertices from different parts of the same component or connect vertices from different components. This involves more complex counting based on vertex partitions.\n\n3. **Edge Cases**: Handle cases where the graph has fewer than 3 vertices (since a cycle requires at least 3 vertices) by directly returning the required values.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    if n < 3:\n        print(\"0 0\")\n        return\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    t = 0\n    w = 0\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_count += 1\n            visited[i] = 1\n            color[i] = 0\n            queue = deque([i])\n            comp_nodes = [i]\n            comp_id[i] = comp_count\n            \n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = 1 - color[node]\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                    elif color[neighbor] == color[node]:\n                        components.append(comp_nodes)\n                        \n            components.append(comp_nodes)\n    \n    found_odd_cycle = False\n    for comp in components:\n        if len(comp) % 2 == 0:\n            continue\n        found_odd_cycle = True\n        break\n        \n    if found_odd_cycle:\n        print(\"0 1\")\n        return\n        \n    total_ways_t0 = 0\n    for comp in components:\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        ways_in_comp = part0 * (part0 - 1) // 2 + part1 * (part1 - 1) // 2\n        total_ways_t0 += ways_in_comp\n        \n    if total_ways_t0 > 0:\n        print(\"1 \" + str(total_ways_t0))\n        return\n        \n    total_nodes = n\n    total_edges = m\n    \n    if total_edges == 0:\n        t = 3\n        w = 1\n        print(f\"{t} {w}\")\n        return\n        \n    total_ways_t2 = 0\n    \n    for comp in components:\n        comp_nodes_set = set(comp)\n        comp_nodes_count = len(comp)\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        ways_to_add_two_edges_in_comp = part0 * part1\n        total_ways_t2 += ways_to_add_two_edges_in_comp\n        \n    if len(components) == 1:\n        print(\"2 \" + str(total_ways_t2))\n        return\n        \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            if comp_id[i] != comp_id[j]:\n                total_ways_t2 += 1\n                \n    print(\"2 \" + str(total_ways_t2))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Reading and Initialization**: The input is read and parsed into the number of vertices `n` and edges `m`, followed by constructing the graph adjacency list.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If a component is not bipartite, an odd cycle exists, and the answer is `0 1`.\n3. **Single Edge Addition**: For each bipartite component, count the number of ways to add an edge within the same part (creating an odd cycle). If any such edges exist, the answer is `1` and the count.\n4. **Two Edge Addition**: If no single-edge solution exists, the solution involves adding two edges. This includes edges within the same component or between different components, ensuring the creation of an odd cycle.\n5. **Edge Cases Handling**: Special cases like graphs with fewer than 3 vertices or no edges are handled directly for efficiency.\n\nThis approach efficiently checks the graph's structure and calculates the minimal edges required and their counts, leveraging bipartite properties and combinatorial counting.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    if n < 3:\n        print(\"0 0\")\n        return\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    t = 0\n    w = 0\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_count += 1\n            visited[i] = 1\n            color[i] = 0\n            queue = deque([i])\n            comp_nodes = [i]\n            comp_id[i] = comp_count\n            \n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = 1 - color[node]\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                    elif color[neighbor] == color[node]:\n                        components.append(comp_nodes)\n                        \n            components.append(comp_nodes)\n    \n    found_odd_cycle = False\n    for comp in components:\n        if len(comp) % 2 == 0:\n            continue\n        found_odd_cycle = True\n        break\n        \n    if found_odd_cycle:\n        print(\"0 1\")\n        return\n        \n    total_ways_t0 = 0\n    for comp in components:\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        ways_in_comp = part0 * (part0 - 1) // 2 + part1 * (part1 - 1) // 2\n        total_ways_t0 += ways_in_comp\n        \n    if total_ways_t0 > 0:\n        print(\"1 \" + str(total_ways_t0))\n        return\n        \n    total_nodes = n\n    total_edges = m\n    \n    if total_edges == 0:\n        t = 3\n        w = 1\n        print(f\"{t} {w}\")\n        return\n        \n    total_ways_t2 = 0\n    \n    for comp in components:\n        comp_nodes_set = set(comp)\n        comp_nodes_count = len(comp)\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        ways_to_add_two_edges_in_comp = part0 * part1\n        total_ways_t2 += ways_to_add_two_edges_in_comp\n        \n    if len(components) == 1:\n        print(\"2 \" + str(total_ways_t2))\n        return\n        \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            if comp_id[i] != comp_id[j]:\n                total_ways_t2 += 1\n                \n    print(\"2 \" + str(total_ways_t2))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1352,
        "thoughts_token_count": 1023
    }
}