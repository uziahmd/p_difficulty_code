{
    "start": 1758299461.732138,
    "end": 1758303197.5830905,
    "start-formatted": "2025-09-20 01:31 KST",
    "end-formatted": "2025-09-20 02:33 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, let's break down the problem.\n\nWe are to find:\n1. The minimum number of edges `t` that must be added to form a simple cycle of odd length (at least 3 vertices).\n2. The number of ways `w` (without adding parallel edges or loops) to add exactly `t` edges to form such a cycle.\n\nNote: The graph is undirected and without parallel edges or loops.\n\nObservations:\n\nCase 1: If the graph already contains an odd cycle.\n   Then we don't need to add any edge, so t = 0, and w = 1 (if there's at least one odd cycle) but note: actually if there's an odd cycle already, then we don't need to add any edge. However, note that the problem says \"the minimum number of edges that must be added\", so if the graph already has an odd cycle, then t=0.\n\nBut wait, what if the graph has multiple odd cycles? Actually, the problem asks for the minimum number of edges to add to form an odd cycle. So if there's already one, then we don't need to add any.\n\nHow do we check for an odd cycle?\nWe can use BFS/DFS with coloring (bipartite check). If the graph is not bipartite, then it contains an odd cycle.\n\nCase 2: If the graph doesn't contain an odd cycle (i.e., it is bipartite), then we have two possibilities:\n\nPossibility 1: We can form an odd cycle by adding just one edge? Let's think.\n\nIn a bipartite graph, all cycles are even. Consider adding one edge:\n\n- Adding an edge within the same part (same color) would create an odd cycle? \n  Suppose we have two parts: A and B. If we add an edge between two vertices in A, then consider a path from u to v (both in A) in the original graph. The length of that path plus 1 (the new edge) must be odd. But note: the parity of the path from u to v in a bipartite graph: if u and v are in the same part, then the distance between them is even. Therefore, the cycle formed (the path from u to v and then the new edge) would be even+1 = odd.\n\nHowever, wait: we must have at least one path connecting u and v (otherwise, if they are disconnected, then adding an edge between two disconnected nodes in the same part won't necessarily form a cycle unless there's a path). But note: the problem doesn't require the entire graph to be connected. However, we are allowed to form a cycle in any connected component? Actually, no: the cycle must be simple and consist of more than one vertex.\n\nBut note: the graph might be disconnected. In that case, if we are going to form a cycle, we must have at least one connected component that can form an odd cycle. However, the problem does not specify that the cycle must be in a particular component. So we are free to choose any.\n\nSo if the graph is bipartite, then:\n\nOption 1: There is an odd cycle already -> then t=0.\n\nOtherwise, we consider:\n\nWhat is the minimum number of edges to add?\n\nWe know that if we add one edge in the same part (within A or within B) then we can form an odd cycle, provided that the two vertices are connected by a path (so that the cycle is closed). However, if they are not connected, then adding an edge between two vertices in the same part of a disconnected component does not create a cycle because they are in different components. So we must have that the two vertices are in the same connected component.\n\nBut wait: when we add an edge, we are allowed to connect two vertices that are not connected by a path. Then, that edge alone doesn't form a cycle. However, the definition of a cycle requires a closed path. Without a path, the edge doesn't form a cycle.\n\nTherefore, to form a cycle by adding one edge, we require that the two vertices are already connected by a path (so they are in the same connected component). And then the cycle is the existing path (which is even in bipartite) plus the new edge (odd total).\n\nBut note: the problem says \"form a cycle of an odd length\", so we must have an odd cycle. The minimal odd cycle is of length 3. However, if we have two vertices in the same part and they are connected by a path of even length (say 2k), then the cycle created by the edge and the path is of length 2k+1, which is odd.\n\nBut note: the cycle must consist of distinct vertices. The path from u to v (with even length) is a set of distinct vertices. Then adding the edge (u,v) gives a cycle.\n\nHowever, if we are going",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges required to add to an undirected graph to form a simple cycle of odd length, and the number of ways to achieve this. The solution involves checking if the graph already contains an odd cycle and, if not, determining the minimal edges needed to create one.\n\n### Approach\n1. **Check for Existing Odd Cycle**: \n   - Use a bipartite check (BFS or DFS with two-coloring) to determine if the graph is bipartite. If it is not bipartite, the graph contains an odd cycle, so no edges need to be added (`t = 0` and `w = 1`).\n\n2. **Graph is Bipartite**:\n   - **Case 1: Complete Graph**: If the graph is complete (all vertices connected), adding any edge would create multiple cycles, but since the graph is bipartite, no odd cycle exists. However, in a complete bipartite graph, adding an edge within the same partition creates an odd cycle. But note that in a complete graph, all pairs are already connected, so no edge can be added without violating the constraints. Hence, `t = 0` and `w = 0` is incorrect; actually, if the graph is complete and bipartite, adding any edge within the same partition will create an odd cycle. But wait, the problem states the graph does not have parallel edges or loops. In a complete bipartite graph, adding an edge within the same partition is allowed only if it doesn't exist. However, the input guarantees no parallel edges, so we must consider the possibility.\n   - **Case 2: Disconnected Graph**: If the graph is bipartite but disconnected, adding an edge within the same partition of a connected component might create an odd cycle if there's a path between the two vertices. However, if the two vertices are in different components, adding an edge between them doesn't form a cycle. Thus, we need to count all pairs of vertices in the same partition across the same connected component that are not already connected by an edge.\n   - **Case 3: Same Partition Check**: For each connected component, count the number of non-edges within the same partition (color group). The minimal number of edges to add is 1, and the number of ways (`w`) is the sum over all connected components of the combinations of non-edges within the same partition.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    \n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_index = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            color[i] = 0\n            dq = deque([i])\n            comp_nodes = [i]\n            comp_id[i] = comp_index\n            while dq:\n                node = dq.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp_id[neighbor] = comp_index\n                        comp_nodes.append(neighbor)\n                        dq.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n            comp_index += 1\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for nodes in components:\n        if not nodes:\n            continue\n        comp_color = {}\n        comp_color[color[nodes[0]]] = 0\n        comp_color[color[nodes[0]] ^ 1] = 0\n        for node in nodes:\n            comp_color[color[node]] += 1\n            \n        same_color_edges = 0\n        for node in nodes:\n            for neighbor in graph[node]:\n                if neighbor in nodes and color[neighbor] == color[node]:\n                    same_color_edges += 1\n        same_color_edges //= 2\n        \n        total_nodes = len(nodes)\n        same_color_total = comp_color.get(0, 0) * (comp_color.get(0, 0) - 1) // 2 + comp_color.get(1, 0) * (comp_color.get(1, 0) - 1) // 2\n        total_ways += max(0, same_color_total - same_color_edges)\n        \n    t = 1\n    w = total_ways\n    print(f\"{t} {w}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The code first checks if the graph is bipartite using BFS. If the graph is not bipartite, it immediately returns `0 1` because an odd cycle already exists.\n2. **Component Analysis**: For each connected component, the code counts the number of vertices in each color group (0 and 1). It then calculates the total possible edges within each color group (without considering existing edges).\n3. **Edge Calculation**: The number of ways to add edges (`w`) is the difference between the total possible edges within the same color group and the existing edges in that group. The minimal number of edges to add (`t`) is always 1 if the graph is bipartite but not complete (as adding one edge within the same color group creates an odd cycle).\n4. **Output**: The solution outputs `t` and `w`, where `t` is the minimal edges needed (0 if an odd cycle exists, otherwise 1) and `w` is the number of valid ways to add those edges.\n\nThis approach efficiently checks for the presence of an odd cycle and calculates the minimal edge additions required, leveraging graph coloring and component analysis.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    \n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_index = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            color[i] = 0\n            dq = deque([i])\n            comp_nodes = [i]\n            comp_id[i] = comp_index\n            while dq:\n                node = dq.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp_id[neighbor] = comp_index\n                        comp_nodes.append(neighbor)\n                        dq.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n            comp_index += 1\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for nodes in components:\n        if not nodes:\n            continue\n        comp_color = {}\n        comp_color[color[nodes[0]]] = 0\n        comp_color[color[nodes[0]] ^ 1] = 0\n        for node in nodes:\n            comp_color[color[node]] += 1\n            \n        same_color_edges = 0\n        for node in nodes:\n            for neighbor in graph[node]:\n                if neighbor in nodes and color[neighbor] == color[node]:\n                    same_color_edges += 1\n        same_color_edges //= 2\n        \n        total_nodes = len(nodes)\n        same_color_total = comp_color.get(0, 0) * (comp_color.get(0, 0) - 1) // 2 + comp_color.get(1, 0) * (comp_color.get(1, 0) - 1) // 2\n        total_ways += max(0, same_color_total - same_color_edges)\n        \n    t = 1\n    w = total_ways\n    print(f\"{t} {w}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1325,
        "thoughts_token_count": 1023
    }
}