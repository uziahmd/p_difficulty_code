{
    "start": 1758294372.1653488,
    "end": 1758296424.8368328,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:40 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of restrictions [l_i, r_i, x_i]\n Since n, m, and h are at most 50, we can use a dynamic programming approach that considers the restrictions.\n\n However, note: The problem has multiple constraints (each restriction is a condition on a contiguous segment). \n We can try to use state-space reduction by considering that the only important thing for a house is its height, but the constraints are on entire intervals.\n\n Alternate idea: since the constraints are up to 50, we can consider that the maximum height in any spot is at most h, and we have at most 50 houses.\n\n But note: the restrictions might be overlapping and we have up to 50 restrictions. \n\n We can try to use DP with state as (position, last k restrictions) but that might be too heavy.\n\n Another idea: we can precompute the minimum allowed height at each position? Actually, no, because the restrictions are about the maximum in an interval.\n\n However, note: the profit function is separable (each house's profit is a^2) but the constraints are global.\n\n Since n, m are small (<=50), we can try to use a state that includes the current position and the last few decisions, but how to encode the constraints?\n\n Alternatively, we can use a constraint propagation: Each restriction i says that for all j in [l_i, r_i], the height must be <= x_i.\n\n But note: the same house may be covered by multiple restrictions, and the actual height must satisfy the minimum x_i among all restrictions covering that house? Actually, no: the house must satisfy every restriction that covers it. So for a house j, let R_j be the set of restrictions that cover j. Then the height of house j must be <= min_{i in R_j} x_i. However, wait: the problem says \"the tallest house in the interval must be at most x_i\", meaning that in that interval, the maximum value is <= x_i. So if a house is part of multiple intervals, then the height must be <= the minimum x_i of all restrictions that include that house? Not exactly: the restriction requires that the entire interval has maximum <= x_i, so if one house in the interval is too high, then the restriction is violated. Therefore, for a house j, if there are multiple restrictions, the height must be <= the minimum x_i of the restrictions that cover j? Actually, no: consider two restrictions that both cover j, but they have different x_i. Then j must be <= the smaller x_i, because if j were higher than the smaller x_i, then the restriction with the smaller x_i would be violated.\n\n But note: what if the restriction with the smaller x_i does not require j to be the maximum? Actually, the restriction with the smaller x_i says that the entire interval must be at most that value, so j must be at most that value.\n\n Therefore, for each house j, we can define:\n   max_height[j] = min{ x_i | the restriction i covers j }   [if there are no restrictions, then we can use h?]\n\n However, wait: the problem also says that the natural maximum is h. So if there is no restriction covering j, then the house can be at most h. Otherwise, the house must be at most the minimum x_i of the restrictions that cover j.\n\n BUT: is that correct? Let me check with the example:\n\n Example 1: \n   Restrictions: \n        [1,1,1] -> house1 <= 1\n        [2,2,3] -> house2 <= 3\n        [3,3,2] -> house3 <= 2\n\n   Then house1: min(1) = 1 -> so house1 cannot exceed 1.\n   house2: min(3) = 3 -> but note, the overall maximum height h=3, so house2 can be up to 3.\n   house3: min(2)=2.\n\n   Now, the example solution: [1,3,2] -> fits.\n\n Example 2:\n   Input: 4 10 2\n           2 3 8\n           3 4 7\n   Then for house1: no restriction -> max_height[1] = 10\n        house2: covered by first restriction -> max_height[2] = min(8) = 8\n        house3: covered by both -> max_height[3] = min(8,7) = 7\n        house4: covered by second -> max_height[4] = min(7)=7\n\n   Then the example solution: [10,8,7,7] -> fits.\n\n So we can compute for each spot j:\n   base[j] = min{ x_i for each restriction i such that l_i <= j",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street with specific zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. Each house's height must comply with all applicable zoning restrictions, which specify that the tallest house in certain intervals must not exceed given maximum heights.\n\n### Approach\n1. **Problem Analysis**: The problem involves selecting heights for houses on each spot such that all zoning restrictions are satisfied. The key observation is that for each spot, the maximum allowable height is determined by the minimum value among all restrictions that include that spot. If no restriction covers a spot, the maximum height is the global maximum height `h`.\n\n2. **Insight**: For each spot, compute the minimum `x_i` from all restrictions covering it. This gives the effective maximum height for that spot. The optimal height for each spot will be its effective maximum height, as the profit function (height squared) is maximized when the height is as large as possible.\n\n3. **Algorithm Selection**: \n   - **Step 1**: For each spot, determine the minimum `x_i` from all restrictions that include it. This involves iterating over all restrictions and updating the effective maximum height for each spot.\n   - **Step 2**: For each spot, the optimal height is the minimum between the effective maximum height derived from restrictions and the global maximum height `h`.\n   - **Step 3**: Calculate the total profit by summing the squares of the optimal heights for all spots.\n\n4. **Complexity Analysis**: The algorithm involves processing each restriction once (O(m * n)) and then processing each spot once (O(n)), resulting in an overall time complexity of O(m * n), which is efficient given the constraints (n, m ≤ 50).\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for i in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x))\n        \n    max_heights = [h] * (n + 1)\n    \n    for (l, r, x) in restrictions:\n        for j in range(l, r + 1):\n            if x < max_heights[j]:\n                max_heights[j] = x\n                \n    total_profit = 0\n    for j in range(1, n + 1):\n        height = min(max_heights[j], h)\n        total_profit += height * height\n        \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, parsing the number of spots `n`, the global maximum height `h`, and the number of restrictions `m`. Each restriction is stored as a tuple of integers.\n2. **Determining Effective Heights**: For each restriction, the algorithm updates the effective maximum height for each spot within the restriction's interval to the minimum of its current value and the restriction's height limit.\n3. **Calculating Profit**: For each spot, the optimal height is the minimum between its effective maximum height and the global maximum height `h`. The profit is the sum of the squares of these optimal heights.\n4. **Output**: The total profit is printed as the result.\n\nThis approach efficiently ensures all zoning restrictions are satisfied while maximizing the profit by leveraging the properties of the profit function and careful constraint handling.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for i in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x))\n        \n    max_heights = [h] * (n + 1)\n    \n    for (l, r, x) in restrictions:\n        for j in range(l, r + 1):\n            if x < max_heights[j]:\n                max_heights[j] = x\n                \n    total_profit = 0\n    for j in range(1, n + 1):\n        height = min(max_heights[j], h)\n        total_profit += height * height\n        \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 814,
        "completion_token_count": 783,
        "thoughts_token_count": 1023
    }
}