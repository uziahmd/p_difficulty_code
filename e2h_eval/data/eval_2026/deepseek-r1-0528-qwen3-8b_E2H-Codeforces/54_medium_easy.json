{
    "start": 1758304343.6371548,
    "end": 1758308276.2071135,
    "start-formatted": "2025-09-20 02:52 KST",
    "end-formatted": "2025-09-20 03:57 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, we are given two integers: n (number of vertices) and a (the target angle in degrees)\n We are to find three distinct vertices v1, v2, v3 (from 1 to n) such that the angle at v2 (with v1 and v3 on the sides) is as close as possible to `a`.\n\n In a regular convex polygon with n sides, the central angle between two adjacent vertices is 360/n degrees.\n\n However, note that the problem does not require the polygon to be used only by taking consecutive vertices. But note: the polygon is regular and convex, so the vertices are equally spaced on a circle.\n\n The key observation: \n The angle formed by three vertices in a convex polygon can be computed using the circle properties.\n\n Actually, we can think of the angle at vertex v2 (the middle one) as being determined by the arcs from v2 to v1 and from v2 to v3.\n\n But note: the problem says the angle is measured with v1 and v3 lying on its sides. This implies that the angle at v2 is formed by the two edges (v2 connected to v1 and v2 connected to v3). However, note that the polygon is convex and the vertices are numbered in clockwise order.\n\n There are two possibilities for the angle at v2:\n  1. The interior angle (if we consider the angle inside the polygon) but note: the problem does not specify interior or exterior? \n  2. Actually, the angle described in the problem is the one that would be drawn by the two rays from v2 to v1 and from v2 to v3.\n\n However, note that the example: \n   Input: \"3 15\" -> Output: \"1 2 3\"\n   The triangle (n=3) has an interior angle of 60 degrees. But note that the example input a=15, which is not 60. However, the problem says: \"every possible angle is correct\" because we have no choice (only one angle). So the angle we get is 60, and we compare |60-15|.\n\n But wait: how is the angle calculated?\n\n Let me think geometrically:\n\n Consider the regular n-gon inscribed in a circle. The central angle between two adjacent vertices is θ = 360/n.\n\n The angle at vertex v2 (the middle one) can be thought of as an inscribed angle. The inscribed angle subtended by an arc is half the central angle of the arc.\n\n However, note: the angle we are forming is not necessarily an inscribed angle that uses the center. Alternatively, we can use the law of cosines in the triangle formed by v1, v2, v3.\n\n But there is a simpler way:\n\n The angle at vertex v2 is actually determined by the two adjacent edges? Not exactly. The angle at vertex v2 in the polygon is fixed (the interior angle) but we are allowed to choose any two distinct edges from v2? \n\n Actually, the problem says: three distinct vertices. And the angle is formed with v2 as the vertex, and v1 and v3 lie on the sides. Since the polygon is convex, the two points v1 and v3 must lie on two different sides (edges) incident to v2? Or can they lie arbitrarily?\n\n But note: the problem does not specify that v1 and v3 are adjacent to v2. However, if we choose non-adjacent vertices, then the angle at v2 would be the angle between two chords.\n\n Actually, the angle at v2 is the angle between two vectors: from v2 to v1 and from v2 to v3.\n\n How to compute that angle?\n\n Let's fix vertex v2. Then, we can consider the two arcs: from v2 to v1 and from v2 to v3. Without loss of generality, assume we traverse the polygon in clockwise order. Then, we can break the circle into two arcs: one going clockwise from v2 to v1 and the other counterclockwise from v2 to v3.\n\n Alternatively, we can use the fact that the entire circle is 360 degrees. The angle at v2 is related to the central angles.\n\n However, note: the problem does not require the interior angle. It requires the angle formed by the two sides (from v2 to v1 and from v2 to v3). This angle is the same as the angle between two chords.\n\n There is a known formula for the angle between two chords that intersect at a point on the circle? Actually, the angle at v2 is an inscribed angle that subtends the arc from v1 to v3 (excluding v2). But wait, the standard inscribed angle formula: the angle is half the measure of the intercepted arc.\n\n However, note that our angle at v2 intercepts two arcs: one from v1 to v2 and one from v2 to v3? Actually, no: the angle at v2 is formed by the two chords (v2v1 and v2v3) and it intercepts the arc from v1 to v3 that does not contain v2.\n\n Actually, the angle at v2 is an inscribed angle that intercepts the arc opposite to the angle. Specifically, the angle at v2 is half the difference of the two arcs: the minor arc from v1 to v3 and the major arc from v1 to v3? \n\n But wait, let's recall: the formula for the angle between two chords that emanate from a point on the circle is half the difference of the intercepted arcs. However, in this case, the two chords are from v2 to v1 and v2 to v3, so the angle at v2 is half the difference of the arc from v1 to v3 (the one not containing v2) and the arc from v1 to v3 (the one containing v2). But note: the entire circle is 360, so the two arcs sum to 360.\n\n Actually, the standard inscribed angle theorem applies when the angle is formed by two chords from a point on the circle and the angle is looking at the arc between v1 and v3 that is opposite (the one not containing the vertex). But wait, the inscribed angle theorem says that the angle is half the central angle subtended by the same arc. However, in our case, the angle at v2 is not necessarily an inscribed angle for the arc from v1 to v3 that does not contain v2? \n\n Let me clarify with an example: a square (n=4). The central angle is 90 degrees. Consider vertex 2. If we take v1 = 1 and v3 = 3, then the arc from 1 to 3 not containing 2 is 180 degrees (the opposite side). Then the inscribed angle would be half of that, which is 90 degrees. However, in the square, the interior angle is 90 degrees. But note: the problem says that in the square we can create 45 or 90 degrees. How do we get 45?\n\n Actually, the two possibilities for the angle at vertex 2 are:\n   - The angle that is the interior angle of the polygon: which is ((n-2)/n)*180 degrees.\n   - But wait, the problem allows any three distinct vertices. So we can also form an angle that is the exterior angle? Or other angles.\n\n Let's consider the square again. Label the square with vertices 1,2,3,4 in clockwise order.\n\n Possibilities for vertex 2 (the middle point):\n   Case 1: v1 and v3 are adjacent to 2: i.e., v1=1, v3=3. Then the angle is 90 degrees (interior).\n   Case 2: v1=1, v3=4. Then the angle at 2 is the angle between the chord 2-1 and 2-4. But note: in a square, the chord 2-4 is the diagonal. The angle at 2 between the side 2-1 and the diagonal 2-4 is 45 degrees (because the diagonal splits the square into two 45-45-90 triangles).\n\n So how to compute the angle?\n\n We can use the following approach:\n\n Since the polygon is regular and convex, the vertices are equally spaced on a circle. We can assign each vertex an angle (in the circle) from 0 to 360*(n-1)/n? Actually, we can map the vertices to angles: the k-th vertex (0-indexed) has angle = k * (360/n) degrees.\n\n But note: the problem numbers the vertices from 1 to n in clockwise order.\n\n Now, fix vertex v2 (say at position i). Then, the two points v1 and v3 are chosen arbitrarily (distinct from v2 and from each other). However, the angle at v2 is determined by the two directions (v2 to v1 and v2 to v3). \n\n The angle between two vectors from v2 to v1 and v2 to v3 can be computed by the dot product, but we don't have coordinates. Alternatively, we can use the circle and the central angles.\n\n Alternatively, we can use the following property: the angle between two chords from a point on the circle is half the difference of the intercepted arcs. Specifically, the angle at v2 is (1/2) * |arc(v1, v3) - arc(v3, v1)|? Wait, no.\n\n Actually, the formula for the angle between two chords from a point on the circle is: \n   angle = (1/2) * |arc(v1, v3) - (360 - arc(v1, v3))|?\n But that doesn't look right.\n\n Another formula: the angle is half the difference of the intercepted arcs. However, the intercepted arcs are the two arcs from v1 to v3: one passing through one side and the other passing through the other side.\n\n Actually, the angle at v2 is half the difference of the two arcs: \n   angle = (1/2) * |arc1 - arc2|\n where arc1 is the arc from v1 to v3 that goes through the interior of the polygon (the one not containing v2) and arc2 is the other arc? \n\n But wait, let me check with the square example:\n\n   Case 1: v2=2, v1=1, v3=3. \n        arc1 (the one not containing v2) is from 1 to 3 going clockwise: that passes through 4? Actually, from 1 to 3 without going through 2: in a square, that arc is 180 degrees (from 1 to 3 via 4). The other arc is from 1 to 3 via 2, which is also 180 degrees? Then the difference is 0, and the angle would be 0? That's not correct.\n\n Alternatively, the inscribed angle formula for an angle formed by two chords from a point on the circle is: \n   angle = (1/2) * (arc(v1, v3) - arc(v3, v1))? \n\n I think we need to use the following: \n\n The angle at v2 is the absolute difference between the two central angles divided by 2? Not exactly.\n\n Actually, we can use the following method:\n\n Since the polygon is regular, the vertices are equally spaced. We can consider the circle with circumference 360. Let the central angles between consecutive vertices be θ = 360/n.\n\n We can represent the positions of the vertices by their index. Fix vertex v2 at index 0 (without loss of generality, because the polygon is cyclic). Then, the positions of v1 and v3 are indices i and j (which we can consider modulo n).\n\n Then, the two arcs from v2 to v1 and v2 to v3 can be measured in steps of θ.\n\n However, the angle at v2 is determined by the two chords. We can use the law of cosines in the triangle formed by the center O and the two vertices v1 and v3? \n\n Alternatively, we can use the fact that the angle between two chords from a point on the circle is half the difference of the intercepted arcs (the two arcs between v1 and v3). Specifically, the angle at v2 is (1/2) * |arc(v1, v3, clockwise) - arc(v1, v3, counterclockwise)|, but note that the two arcs add up to 360.\n\n Actually, the standard formula for the angle between two chords from a point on the circle is:\n   angle = (1/2) * |arc(v1, v3) - arc(v3, v1)|\n but that's not the same.\n\n After checking: the inscribed angle that subtends an arc is half the central angle of the arc. However, the angle at v2 is an inscribed angle that subtends the arc from v1 to v3 that does not contain v2.\n\n But note: there are two arcs from v1 to v3: the minor arc and the major arc. The inscribed angle at v2 (which is on the circle) for the arc that does not contain v2 is half the measure of that arc.\n\n However, wait: the inscribed angle is defined by the arc that is opposite to the angle. So if we have three points on a circle, the angle at v2 is half the measure of the arc from v1 to v3 that does not include v2.\n\n But note: the angle we are forming is the one at v2, so the intercepted arc is the one from v1 to v3 that does not contain v2.\n\n Therefore, the angle α at v2 is (1/2) * (arc_length from v1 to v3, the one not containing v2) in degrees.\n\n However, in our square example: \n   Case 1: v1=1, v3=3 (for vertex 2). The arc from 1 to 3 not containing 2: in a square, the arc from 1 to 3 not containing 2 is the one that goes through 4, which is 180 degrees. Then α = 90 degrees. Correct.\n   Case 2: v1=1, v3=4. The arc from 1 to 4 not containing 2: from 1 to 4 we can go two ways. The arc that does not contain 2 is the one that goes directly from 1 to 4 (which is 90 degrees, because the square has 4 vertices, so from 1 to 4 is one step, hence 90 degrees). Then α = 45 degrees. Correct.\n\n So the formula: \n   Let d = the number of edges from v1 to v3 along the arc that does not contain v2. Then the arc length (central angle) is d * (360/n) degrees.\n   Then the angle at v2 is (d * 360 / n) / 2 = 180 * d / n.\n\n But wait: d is the number of edges, so the central angle for the arc is d * (360/n). Then the inscribed angle is half of that: (d * 360 / n) / 2 = 180 * d / n.\n\n However, note: the arc from v1 to v3 not containing v2 must be measured in terms of the number of edges (steps) between them.\n\n But note: the entire circle is 360, so the arc from v1 to v3 containing v2 is (n - d) * (360/n). And the intercepted arc (for the angle at v2) is the one that does not contain v2, so we use d.\n\n However, we must be cautious: d should be the number of edges in the arc from v1 to v3 that does not contain v2. Since the polygon has n vertices, the number of edges from v1 to v3 along the shorter arc is min(|i-j|, n-|i-j|) but wait, we are not taking the shorter arc necessarily. We are taking the arc that does not contain v2.\n\n Actually, the arc that does not contain v2 is fixed once we fix v1 and v3 relative to v2.\n\n Steps:\n\n 1. Without loss of generality, fix the polygon and label the vertices 0 to n-1 (0-indexed) in clockwise order.\n\n 2. The problem requires output in 1-indexed.\n\n 3. We are to choose three distinct vertices. The angle is determined by the two points (v1 and v3) and the fixed vertex v2.\n\n 4. The angle is: (1/2) * (arc_length from v1 to v3, the arc that does not contain v2) in degrees.\n\n    But note: the arc from v1 to v3 that does not contain v2 is the one that goes from v1 to v3 without passing through v2. We can compute the distance (in terms of edges) from v1 to v3 in the two directions and pick the one that does not contain v2.\n\n However, we can also note that the total circle is 360. The arc that contains v2 is the one that goes from v1 to v3 passing through v2, and the other arc is the one that does not. \n\n Alternatively, we can define:\n\n   Let d1 = the number of edges from v1 to v2 (in one direction) and d2 = the number of edges from v2 to v3 (in the same direction). Then the arc from v1 to v3 that does not contain v2 is (d1 + d2) * (360/n) ?\n\n But wait, if we go from v1 to v2 and then from v2 to v3, that's d1+d2 edges, but that is the arc that contains v2. The other arc is the rest: n - (d1+d2) edges.\n\n Actually, the entire circle has n edges. The two arcs from v1 to v3: one is the direct arc (without going through v2) and the other is the indirect arc (going through v2). The direct arc (not containing v2) has length = n - (d1+d2) ? \n\n But note: the arc from v1 to v3 not containing v2 is the one that goes the other way around. The direct arc (containing v2) is the one that goes from v1 to v2 to v3, and that has length (d1 + d2) edges? \n\n However, we must define d1 and d2 appropriately. \n\n Let me reframe: \n\n   Let the positions be fixed. Let v2 be fixed at position 0. Then, we can represent v1 and v3 by their positions (indices from 0 to n-1). \n\n   The two arcs from v1 to v3 are:\n        arc_clockwise = (v3 - v1) % n   [if we traverse clockwise from v1 to v3]\n        arc_counterclockwise = (v1 - v3) % n\n\n   But note: the arc that does not contain v2 (at 0) is the one that does not pass through 0.\n\n   However, we can compute the arc from v1 to v3 that does not contain v2 by:\n\n        total_edges = n\n        The two arcs from v1 to v3: one is (v3 - v1) mod n, and the other is (v1 - v3) mod n, and they add up to n.\n\n   But wait, the entire circle has n edges, so the two arcs from v1 to v3 (in terms of edges) add up to n.\n\n   Actually, the arc from v1 to v3 (in one direction) is the number of edges between v1 and v3, which is the minimum of the two? No, we are interested in the specific arc that does not contain v2.\n\n   We can do: \n        Let A = the clockwise distance from v1 to v3 (without wrapping around, but modulo n). Then the other arc is n - A.\n\n   Then, the arc that does not contain v2 is the one that does not have v2 (which is 0) in the path. \n\n   However, we can also use the following:\n\n        The arc from v1 to v3 that does not contain v2 (0) is the one that goes from v1 to v3 without passing through 0. \n\n        We can compute the clockwise distance from v1 to v3 and from v3 to v1 (clockwise). Then, the arc that does not contain 0 is the one that does not include 0.\n\n        But note: if we fix v2 at 0, then the two points v1 and v3 are at positions i and j.\n\n        The arc from i to j (clockwise) is (j - i) mod n, and the arc from j to i (clockwise) is (i - j) mod n.\n\n        The arc that does not contain 0 is the one that does not include 0. \n\n        Actually, we can check: \n            If we go from i to j clockwise, we pass through 0 if and only if i < j and the segment [i+1, j-1] includes 0? Or if i>j and the segment [0, j-1] and [i+1, n-1] are separate.\n\n        Alternatively, we can avoid this by considering the two arcs and then excluding the one that contains 0.\n\n   This seems complicated.\n\n Alternative Insight:\n\n   The angle at v2 (vertex 0) is determined by the two central angles from 0 to v1 and from 0 to v3, and the angle between the two chords.\n\n   Using the law of cosines in the triangle (center, v2, v1) and (center, v2, v3) is not straightforward.\n\n   However, note: the angle at v2 (0) is the angle between two chords. The central angles for the chords from 0 to i is (i * (360/n)) and from 0 to j is (j * (360/n)). But wait, the chords are from 0 to i and 0 to j.\n\n   The angle between two vectors from the origin (center) to i and j is |i-j| * (360/n). But the angle at the circumference is half the central angle? \n\n   Actually, no. The angle between two chords from a point on the circle is not simply half the central angle between the two points.\n\n   Let me use a different approach: \n\n   Consider the two points v1 and v3 (with indices i and j). The central angles are:\n        angle1 = i * (360/n)\n        angle2 = j * (360/n)\n\n   Then, the triangle from center O to v2 (0) to v1 (i) and to v3 (j) is an isosceles triangle for each? \n\n   Actually, the triangle O, v2, v1: \n        sides: OA = OB = radius, AB is the chord.\n\n   The angle at the circumference (at v2) for the triangle O, v1, v3? \n\n   Alternatively, we can use the formula for the angle between two chords from a point on the circle: \n\n        angle = 0.5 * |(arc from v1 to v3) - (arc from v3 to v1)|\n\n   But we already know the two arcs: one is A and the other is 360-A. Then the angle is 0.5 * |A - (360-A)| = |A - 180|.\n\n   But wait, that is not matching the square example: \n        Case 1: v1=1, v3=3 (arc A=180) -> angle = |180-180|=0 -> not 90.\n\n   So that formula is for something else.\n\n   Actually, the correct formula for the angle between two chords from a point on the circle is:\n\n        angle = 0.5 * |arc1 - arc2|\n\n   where arc1 and arc2 are the two arcs from v1 to v3 (the two arcs that together make the circle). But note: the two arcs are A and 360-A, so the angle is 0.5 * |A - (360-A)| = |A - 180|.\n\n   Then, for the square: \n        Case 1: A=180 -> angle = |180-180|=0 -> wrong.\n        Case 2: A=90 -> angle = |90-270|/2 = 180/2=90 -> but wait, in the second case we got 45, not 90.\n\n   This is confusing.\n\n   Let me try a different known result: \n\n   The angle between two chords from a point on the circle is half the difference of the intercepted arcs. But wait, the intercepted arcs are the ones that the angle \"sees\", which is the arc from v1 to v3 that is opposite to the angle. \n\n   Actually, the standard theorem says: the measure of the angle formed by two chords that intersect at a point on the circle is half the difference of the measures of the intercepted arcs. However, in our case the chords are from a point on the circle, so they intersect at the circumference, and the intercepted arcs are the two arcs between v1 and v3.\n\n   So the angle is (1/2) * |arc1 - arc2|, where arc1 and arc2 are the two arcs between v1 and v3.\n\n   But note: arc1 + arc2 = 360. So |arc1 - arc2| = |2*arc1 - 360|. Then the angle is |arc1 - 180|.\n\n   Then, for the square, case 1: arc1=180 -> angle=0, but we know the angle is 90. This does not match.\n\n   Alternatively, there is a confusion: the inscribed angle theorem applies to the angle that is formed by two chords from a point on the circle and the angle is looking at an arc. In our case, the angle at v2 is an inscribed angle that looks at the arc from v1 to v3 that is opposite to it. \n\n   The inscribed angle theorem: the angle is half the arc that it subtends. But note: the angle at v2 subtends the arc from v1 to v3 that is opposite to it (the one that does not contain v2). \n\n   So the angle α = (1/2) * (arc_opposite)\n\n   In case 1: arc_opposite is 180 -> α=90, which is correct.\n   In case 2: arc_opposite is 90 -> α=45, which is correct.\n\n   Therefore, the formula is: \n        α = (1/2) * (arc_opposite)\n\n   where arc_opposite is the arc from v1 to v3 that does not contain v2.\n\n   How to compute arc_opposite?\n\n        Let d = the number of edges from v1 to v3 along the arc that does not contain v2. Then arc_opposite = d * (360/n) degrees.\n\n        Then α = (d * 360 / n) / 2 = 180 * d / n.\n\n   Now, d is the number of edges in the arc from v1 to v3 that does not contain v2. \n\n   Note: the number of edges between two vertices is the number of steps (each edge is one step). For example, from vertex i to vertex j, the number of edges in the clockwise direction is (j - i) mod n, but we want the arc that does not contain v2.\n\n   We can do:\n\n        Let v2 be fixed at 0.\n        Let i = position of v1, j = position of v3.\n\n        The two arcs from i to j:\n            arc1 = (j - i) % n   [clockwise from i to j]\n            arc2 = (i - j) % n   [counterclockwise from i to j]\n\n        Then, the arc that does not contain 0 is the one that does not contain 0. \n\n        But note: the entire circle is from 0 to n-1. The arc from i to j clockwise is arc1, and it contains 0 if and only if i < j and 0 is between i and j? Actually, we can check:\n\n            If we go from i to j clockwise, we pass through 0 if the segment [i, j] (in the circle) contains 0. \n\n        Alternatively, we can determine which arc is the one that does not contain 0 by:\n\n            If the clockwise arc from i to j does not contain 0, then we use arc1; otherwise, we use arc2.\n\n        How to check if the clockwise arc from i to j contains 0?\n\n            We can consider the circular arrangement. The clockwise arc from i to j goes from i, i+1, ..., j (mod n). It contains 0 if and only if:\n                either i <= 0 <= j (if i<=j) OR if i>j then 0 is in the range [i, n-1] or [0, j] but wait, if i>j, then the clockwise arc from i to j goes from i to n-1 and then from 0 to j.\n\n            Actually, we can do:\n\n                Let a = i, b = j.\n\n                The clockwise arc from a to b covers the set {a, a+1, ..., b} (mod n). \n\n                To check if 0 is in that set, we can consider:\n\n                    If a <= b:\n                        then 0 is in [a, b] if a <= 0 <= b (but 0 is represented by n? Actually, we are in modulo n, so we should map 0 to n? Not exactly.\n\n            Alternatively, we can avoid the complication by noting that the two arcs are complementary. The arc that does not contain 0 is the one that does not include the vertex 0. \n\n            Since v2 is fixed at 0, and the two points v1 and v3 are distinct from 0, then the arc that does not contain 0 is the one that does not have 0 in between.\n\n            Actually, we can compute the arc from i to j that does not contain 0 by:\n\n                Let d1 = (j - i) % n   [clockwise distance]\n                Let d2 = (i - j) % n   [counterclockwise distance]\n\n                Then, the arc from i to j that does not contain 0 is the one with the smaller absolute value? Not necessarily.\n\n            But note: the entire circle is 360, and the two arcs add up to n (in terms of edges). However, we care about whether 0 is included.\n\n            We can also note: the arc from i to j that does not contain 0 is the one that is entirely contained in the set {1, 2, ..., n-1}. \n\n            Actually, we can split the circle by removing 0. Then the arc from i to j is the one that does not cross 0.\n\n            Example: n=4, i=1, j=3, then the clockwise arc from 1 to 3 is [1,2,3] -> does not contain 0? Actually, the vertices are 0,1,2,3. The clockwise arc from 1 to 3 is from 1 to 3, which does not include 0. The counterclockwise arc from 1 to 3 is from 1 to 0 to 3, so it does contain 0. Therefore, the arc that does not contain 0 is the clockwise arc, which has length 2 (edges: from 1 to 2 and 2 to 3 -> 2 edges) -> central angle = 2*(360/4)=180 degrees, so angle=90.\n\n            Example: n=4, i=1, j=2: \n                clockwise arc from 1 to 2: [1,2] -> does not contain 0 -> length=1 edge -> central angle=90, angle=45.\n                counterclockwise arc: from 1 to 0 to 3 to 2 -> contains 0 -> so we use the clockwise arc.\n\n            Example: n=4, i=3, j=1:\n                clockwise arc from 3 to 1: [3,0,1] -> contains 0 -> so we use the counterclockwise arc: from 3 to 2 to 1 -> does not contain 0, length=2 edges -> central angle=180, angle=90.\n\n            Example: n=4, i=3, j=2:\n                clockwise arc from 3 to 2: [3,0,1,2] -> contains 0 -> use counterclockwise: from 3 to 2 -> length=1 edge -> angle=45.\n\n            So the rule: \n                The arc that does not contain 0 is the one that does not include 0.\n\n            How to compute the length (in edges) of the arc from i to j that does not contain 0?\n\n                We can consider the circle broken at 0. The circle is split into two arcs: from i to j without crossing 0 and from j to i without crossing 0.\n\n                The length (in edges) of the arc from i to j without crossing 0 is:\n\n                    If we are going clockwise from i to j, we don't cross 0 if we don't pass through 0. Similarly for counterclockwise.\n\n                Alternatively, we can consider the circle without 0, and then the arc from i to j is the one that is entirely in the remaining n-1 vertices.\n\n                But note: the vertices are labeled 0 to n-1.\n\n                We can do:\n\n                    Let i1 = min(i, j), j1 = max(i, j)\n\n                    Then, if the arc from i to j (without wrapping) is from i1 to j1, and if 0 is not in [i1, j1] (considering the linear order from i1 to j1 without wrap), then that arc does not contain 0.\n\n                    But if 0 is in [i1, j1], then the arc that does not contain 0 is the other one.\n\n                However, if we consider the circle, we have to account for wrap-around.\n\n                Actually, we can do:\n\n                    Let d_clockwise = (j - i) % n   [if negative, adjust by adding n and mod n]\n                    But we want the actual number of edges in the clockwise direction from i to j.\n\n                    Then, the clockwise arc has d_clockwise edges (from i to j, the number of edges is d_clockwise, because from i to i+1 is one edge, and from i to i+d_clockwise is d_clockwise edges).\n\n                    Similarly, the counterclockwise arc has n - d_clockwise edges.\n\n                Then, the condition for the clockwise arc to contain 0 is that 0 lies between i and j in the clockwise direction.\n\n                How to check if 0 is in the clockwise arc from i to j?\n\n                    We can consider: \n                      If i < j: then the clockwise arc from i to j is [i, i+1, ..., j]. This contains 0 if i <= 0 <= j. But wait, 0 is the vertex we fixed. However, note: our vertices are 0 to n-1. So if i<=0<=j, then 0 is in the arc. But note: i and j are indices from 0 to n-1, and i != j and i !=0 and j!=0 (since distinct from v2). Actually, wait: the problem says distinct vertices, so v1 and v3 cannot be v2 (0). So i,j in [1, n-1].\n\n                    Then, if i < j and 0 is between i and j? Actually, since i and j are positive and less than n, and i<j, then 0 is not in [i, j] because i>=1 and j<=n-1, so 0 is not in [i, j]. \n\n                    But wait, what if we go from i to j in the clockwise direction and we wrap around? \n\n                    Actually, the clockwise arc from i to j (with i<j) does not wrap around, so it goes from i to j without including 0 (because i>=1, j<=n-1, and 0 is at the beginning). \n\n                    However, consider the example: n=5, i=4, j=1. Then i>j, so the clockwise arc from 4 to 1: \n                        4,0,1 -> contains 0.\n\n                    So the condition is:\n\n                      The clockwise arc from i to j contains 0 if and only if (i < j and 0 is between i and j) OR (i > j and 0 is between j and i in the clockwise direction).\n\n                    But note: in a circle, the clockwise arc from i to j contains 0 if 0 is between i and j in the clockwise direction.\n\n                    How to check that?\n\n                      We can map the circle to a line by duplicating the segment [0, n-1] to [0, n-1, n] (but then modulo n). \n\n                    Alternatively, we can normalize:\n\n                      Let i_norm = i, j_norm = j.\n\n                      The clockwise arc from i to j contains 0 if the smallest angle from i to j clockwise passes through 0.\n\n                    Another idea: \n\n                      Consider the circle as [0, n-1] and then connect n-1 to 0.\n\n                      The clockwise arc from i to j contains 0 if and only if:\n\n                         (i <= ",
    "response": "\nTo solve this problem, we need to find three distinct vertices in a regular convex polygon such that the angle formed at the middle vertex is as close as possible to a given target angle. The solution involves leveraging geometric properties of the polygon to compute potential angles efficiently.\n\n### Approach\n1. **Problem Analysis**: The problem requires finding three distinct vertices (v1, v2, v3) in a regular convex polygon with `n` sides such that the angle formed at vertex `v2` by vertices `v1` and `v3` is closest to the given angle `a`. The key insight is that the angle at `v2` can be derived from the arc between `v1` and `v3` that does not contain `v2`.\n\n2. **Geometric Insight**: In a regular convex polygon, the central angle between two adjacent vertices is `360/n` degrees. The angle formed at any vertex `v2` by two other vertices `v1` and `v3` is half the measure of the arc between `v1` and `v3` that does not contain `v2`. This arc's length in terms of edges determines the angle.\n\n3. **Algorithm Selection**: \n   - **Fixing Vertex `v2`**: For simplicity, we fix one vertex (`v2`) and consider all pairs of other vertices (`v1` and `v3`). However, due to the polygon's symmetry, we can rotate the problem to always consider `v2` at a fixed position (e.g., vertex 0) and then adjust the result back to the original labeling.\n   - **Calculating Angles**: For each pair of vertices (`v1`, `v3`), compute the arc length (number of edges) between them that does not contain `v2`. The angle is then `(arc_length * 180) / n`.\n   - **Optimization**: Instead of checking all possible pairs, we can iterate over possible arc lengths and compute the corresponding angles, keeping track of the minimum difference from the target angle `a`.\n\n4. **Complexity Analysis**: The approach efficiently checks all possible arcs around the fixed vertex `v2` in O(n) time, which is optimal for the given constraints (n ≤ 10^5).\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.readline().split()\n    n = int(data[0])\n    a = int(data[1])\n    \n    best_angle_diff = float('inf')\n    best_vertices = None\n    \n    for step in range(1, n):\n        total_edges = n\n        arc_opposite_edges = step\n        \n        if arc_opposite_edges == 0:\n            continue\n            \n        angle = (arc_opposite_edges * 180.0) / n\n        \n        angle_diff = abs(angle - a)\n        \n        if angle_diff < best_angle_diff:\n            best_angle_diff = angle_diff\n            best_vertices = [step + 1, 1, n - step] if step <= n // 2 else [n - step + 1, 1, step]\n    \n    if best_vertices is None:\n        for step in range(1, n // 2 + 1):\n            total_edges = n\n            arc_opposite_edges = step\n            angle = (arc_opposite_edges * 180.0) / n\n            angle_diff = abs(angle - a)\n            if angle_diff < best_angle_diff:\n                best_angle_diff = angle_diff\n                best_vertices = [step + 1, 1, n - step] if step <= n // 2 else [n - step + 1, 1, step]\n                \n    print(f\"{best_vertices[0]} {best_vertices[1]} {best_vertices[2]}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input consists of two integers, `n` (number of vertices) and `a` (target angle).\n2. **Initialization**: We initialize variables to keep track of the smallest angle difference found and the corresponding vertices.\n3. **Iterating Over Arcs**: For each possible arc length (from 1 to `n-1`), we calculate the corresponding angle using the formula `(arc_length * 180) / n`.\n4. **Tracking Best Angle**: We compare each calculated angle with the target angle `a` and keep the vertices that yield the smallest difference.\n5. **Output**: After checking all possible arcs, we print the vertices that form the angle closest to `a`.\n\nThis approach efficiently narrows down the search space by leveraging the polygon's symmetry and geometric properties, ensuring optimal performance even for large `n`.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.readline().split()\n    n = int(data[0])\n    a = int(data[1])\n    \n    best_angle_diff = float('inf')\n    best_vertices = None\n    \n    for step in range(1, n):\n        total_edges = n\n        arc_opposite_edges = step\n        \n        if arc_opposite_edges == 0:\n            continue\n            \n        angle = (arc_opposite_edges * 180.0) / n\n        \n        angle_diff = abs(angle - a)\n        \n        if angle_diff < best_angle_diff:\n            best_angle_diff = angle_diff\n            best_vertices = [step + 1, 1, n - step] if step <= n // 2 else [n - step + 1, 1, step]\n    \n    if best_vertices is None:\n        for step in range(1, n // 2 + 1):\n            total_edges = n\n            arc_opposite_edges = step\n            angle = (arc_opposite_edges * 180.0) / n\n            angle_diff = abs(angle - a)\n            if angle_diff < best_angle_diff:\n                best_angle_diff = angle_diff\n                best_vertices = [step + 1, 1, n - step] if step <= n // 2 else [n - step + 1, 1, step]\n                \n    print(f\"{best_vertices[0]} {best_vertices[1]} {best_vertices[2]}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 706,
        "completion_token_count": 988,
        "thoughts_token_count": 8191
    }
}