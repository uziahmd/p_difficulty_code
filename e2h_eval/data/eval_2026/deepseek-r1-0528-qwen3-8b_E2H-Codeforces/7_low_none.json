{
    "start": 1758089011.1596088,
    "end": 1758090331.0167546,
    "start-formatted": "2025-09-17 15:03 KST",
    "end-formatted": "2025-09-17 15:25 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, let's analyze the problem:\n\nWe are to determine whether there exists an integer k>1 such that a snowflake with n vertices can be constructed.\n\nThe snowflake construction:\n1. Start with 1 vertex (step 0).\n2. Then, at each step (at least one step), we take every leaf (vertex with degree 1) and connect it to k new vertices.\n\nBut note: the process must be done at least once.\n\nLet me break down the construction:\n\nStep 0: 1 vertex.\n\nStep 1: We add k new vertices, so total vertices = 1 + k.\n\nStep 2: Now, we have k leaves (from step 1). Each of these k leaves will be connected to k new vertices. But note: when we connect a leaf to k new vertices, we remove that leaf and add k new ones. However, wait: the rule says \"Each vertex that is connected to only one other vertex\" (i.e., leaf) is connected by edges to k more new vertices. And importantly, we do this step at least once.\n\nActually, the process is:\n\n- Step 0: 1 vertex (the center).\n- Step 1: The center has k edges to k new vertices. Now we have 1 + k vertices.\n- Step 2: Each of the k leaves from step 1 now gets k new children. So we add k*k new vertices. But note: the leaves from step 1 are no longer leaves because they are now connected to two vertices (the center and their parent). Actually, wait: the rule says \"each vertex that is connected to only one other vertex\" (leaf) is expanded. After step 1, we have k leaves. Then in step 2, we expand each leaf (which becomes a node with degree k+1? Actually, no: when we expand a leaf, we add k new edges from that leaf, so the leaf becomes a node with degree k+1 (and then it is no longer a leaf). Then the new vertices are leaves.\n\nHowever, the problem says: \"This step should be done at least once.\" meaning we do step 1 (at least) and then we may do more steps.\n\nBut note: the example for k=4: the smallest snowflake (so just one expansion beyond the center) has 1 + 4 = 5? Actually, the example says \"the smallest possible snowflake for k=4\" is shown. Let me count the example:\n\nIn the example, the center has 4 edges, then each of those 4 nodes must have been expanded? But wait, the rule says: \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1). Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\nSo the first step (at least once) is the expansion of the center. Then the next step (if we do it) is the expansion of the leaves from the first step.\n\nBut the example says \"smallest\" for k=4. That must be after the first expansion (so step 1). Then why does the example show a snowflake with more than 5? Actually, wait: the example figure might be showing two expansions. Let me read the problem again: \"This step should be done at least once\", meaning we must do the expansion at least once (so step 1). But then the example says \"the smallest possible snowflake for k=4\", so that would be 1 + 4 = 5.\n\nBut wait, the problem also says: \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices.\" and \"This step should be done at least once.\" meaning we do step 1 (expanding the center) and then we are allowed to do more? Or does the step include the entire process?\n\nActually, the description is:\n\n1. Start with one vertex.\n2. Then, we do: \n   - The initial vertex is connected to k new vertices (so step 1).\n   - Then, each leaf (vertex with degree 1) is connected to k new vertices (step 2, and we must do step 1 at least, but then we can do step 2, step 3, etc.)\n\nHowever, note the example output: \nInput: 6 -> Output: NO\n\nLet's see: \nIf n=6, can we have a snowflake?\n\nWe know that the snowflake must have at least one expansion (step 1). Then:\n\nAfter step 1: vertices = 1 + k. We require k>1, so minimum k=2 -> 3 vertices. Then if we do step 2 (if necessary) we get more.\n\nBut note: we can stop at any step. So we",
    "response": "\nTo solve this problem, we need to determine whether a given number of vertices \\( n \\) can form a snowflake graph as defined by Rudolf. The snowflake graph is constructed in layers, starting from a central vertex and expanding outward in each subsequent layer. Each vertex in a layer connects to \\( k \\) new vertices in the next layer, with \\( k > 1 \\). The key insight is recognizing that the total number of vertices in such a graph must follow a specific mathematical pattern based on the number of layers and the parameter \\( k \\).\n\n### Approach\n1. **Problem Analysis**: The snowflake graph starts with a single vertex (layer 0). Each subsequent layer (starting from layer 1) adds \\( k \\) new vertices for each vertex in the previous layer that has only one connection (a leaf). The process must be executed at least once, meaning the graph must have at least two layers.\n2. **Mathematical Insight**: The total number of vertices after \\( m \\) layers (including the initial vertex) is given by the formula:\n   - Layer 0: 1 vertex.\n   - Layer 1: \\( 1 + k \\) vertices.\n   - Layer 2: \\( 1 + k + k^2 \\) vertices.\n   - ...\n   - Layer \\( m \\): \\( 1 + k + k^2 + \\ldots + k^m \\) vertices.\n3. **Key Observation**: For \\( n \\) to be valid, it must be expressible as \\( 1 + k + k^2 + \\ldots + k^m \\) for some integers \\( k > 1 \\) and \\( m \\geq 1 \\). However, since \\( n \\) can be very large (up to \\( 10^{18} \\)), we need an efficient way to check this without iterating through all possible \\( k \\) and \\( m \\).\n4. **Efficient Solution**: Notice that for \\( m = 1 \\), \\( n = 1 + k \\), so \\( k = n - 1 \\). For \\( m \\geq 2 \\), \\( n \\) must satisfy \\( n = 1 + k + k^2 + \\ldots + k^m \\). This can be rewritten as \\( n - 1 = k \\cdot (k^{m-1} + k^{m-2} + \\ldots + 1) \\). Given the constraints, we can iterate over possible values of \\( k \\) (from 2 up to \\( \\sqrt{n} \\)) and check if \\( n - 1 \\) is divisible by \\( k \\), then verify if the quotient forms a geometric series.\n\n### Solution Code\n```python\nimport math\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    out_lines = []\n    index = 1\n    for _ in range(t):\n        n = int(data[index]); index += 1\n        if n <= 1:\n            out_lines.append(\"NO\")\n            continue\n            \n        if n == 2 or n == 3:\n            out_lines.append(\"NO\")\n            continue\n            \n        if n == 4:\n            out_lines.append(\"YES\")\n            continue\n            \n        found = False\n        for k in range(2, int(math.isqrt(n)) + 1):\n            total = 1 + k\n            if total == n:\n                found = True\n                break\n            layers = 2\n            current = 1 + k + k * k\n            while current < n:\n                if current == n:\n                    found = True\n                    break\n                layers += 1\n                current += k * (k ** layers)\n            else:\n                continue\n            break\n\n        if found:\n            out_lines.append(\"YES\")\n        else:\n            out_lines.append(\"NO\")\n            \n    print(\"\\n\".join(out_lines))\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Initial Checks**: The code first checks for small values of \\( n \\) (like 1, 2, 3) which cannot form a valid snowflake graph. For \\( n = 4 \\), it directly returns \"YES\" since \\( 1 + 3 = 4 \\).\n2. **Iterating Over Possible \\( k \\)**: For each test case, the code iterates over possible values of \\( k \\) from 2 up to the integer square root of \\( n \\). For each \\( k \\), it checks if \\( n \\) can be formed by summing the geometric series \\( 1 + k + k^2 + \\ldots + k^m \\) for some \\( m \\geq 1 \\).\n3. **Geometric Series Check**: Starting with \\( m = 1 \\) (i.e., \\( n = 1 + k \\)), the code checks if \\( n \\) matches this form. If not, it proceeds to check higher layers by adding terms \\( k^m \\) until the sum either matches \\( n \\) or exceeds it.\n4. **Output Result**: If a valid \\( k \\) and \\( m \\) are found, the answer is \"YES\"; otherwise, it's \"NO\".\n\nThis approach efficiently checks the feasibility of constructing a snowflake graph with \\( n \\) vertices by leveraging mathematical properties of geometric series and early termination upon finding a valid configuration.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    out_lines = []\n    index = 1\n    for _ in range(t):\n        n = int(data[index]); index += 1\n        if n <= 1:\n            out_lines.append(\"NO\")\n            continue\n            \n        if n == 2 or n == 3:\n            out_lines.append(\"NO\")\n            continue\n            \n        if n == 4:\n            out_lines.append(\"YES\")\n            continue\n            \n        found = False\n        for k in range(2, int(math.isqrt(n)) + 1):\n            total = 1 + k\n            if total == n:\n                found = True\n                break\n            layers = 2\n            current = 1 + k + k * k\n            while current < n:\n                if current == n:\n                    found = True\n                    break\n                layers += 1\n                current += k * (k ** layers)\n            else:\n                continue\n            break\n\n        if found:\n            out_lines.append(\"YES\")\n        else:\n            out_lines.append(\"NO\")\n            \n    print(\"\\n\".join(out_lines))\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 548,
        "completion_token_count": 1144,
        "thoughts_token_count": 1023
    }
}