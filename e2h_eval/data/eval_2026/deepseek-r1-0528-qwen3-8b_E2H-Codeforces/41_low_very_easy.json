{
    "start": 1758294368.655491,
    "end": 1758296372.3051083,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:39 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of restrictions [l_i, r_i, x_i]\n Since n, m, h are at most 50, we can use dynamic programming or even try to use a direct assignment with constraints.\n\n However, note that the problem has multiple overlapping constraints (ranges) and the profit is the sum of squares.\n\n Idea: \n Each house i (from 1 to n) can have a height in [0, h] but must satisfy all restrictions that cover it.\n\n For a restriction (l, r, x): for every house j in [l, r], the height must be <= x.\n\n So for each house i, we have an upper bound which is the minimum x among all restrictions that cover house i. But note: if there's no restriction, then the house can go up to h.\n\n However, wait: the restrictions are independent and must be satisfied simultaneously. So the actual constraint for house i is:\n   height[i] <= min{ x_j | for each restriction j such that l_j <= i <= r_j }\n\n Then, we wish to assign nonnegative integers (or real numbers? but the example uses integers) to each house i in [0, min(h, UB_i)] to maximize the sum of squares.\n\n But note: the profit function is convex (x^2 is increasing and convex). Therefore, for each house we would want to set its height as high as possible, right?\n\n However, wait: what if two adjacent houses are constrained by overlapping restrictions? Actually, the constraint on each house is independent because the restrictions only impose an upper bound per house. \n\n But here's the catch: the restrictions are defined on contiguous ranges, and one house might be covered by multiple restrictions. The constraint for house i is the minimum x from all restrictions covering i.\n\n However, note: the problem does not require that the entire street is under one restriction. Each house must be <= the minimum x of the restrictions that include it.\n\n Therefore, we can compute for each house i:\n\n   Let UB[i] = min{ x_j for all restrictions j such that l_j <= i <= r_j }   (if no restriction covers, then UB[i] = h)\n\n Then, the maximum height for house i is min(UB[i], h) but note our computed UB[i] already is at most h (since x_j <= h). So we just use UB[i].\n\n However, wait: what if a restriction says x_j=5 and h=10? Then the house cannot exceed 5. But if no restriction, then h=10. So yes, we do:\n\n   base_UB[i] = h   (if no restriction, then we start with h and then take the min over restrictions that cover i)\n\n Then, we can set house i to any integer value from 0 to UB[i]. And since the profit function is x^2, which is increasing for x>=0, we would set house i to UB[i] to maximize the profit from that house.\n\n But wait: is that always true? Consider if two consecutive houses are constrained by two different restrictions and if setting one house lower might allow the other house to be higher? \n\n However, note: the constraints are independent per house. There is no requirement that the heights must be non-decreasing or anything else. The only constraints are the maximum height per contiguous segment (which gives an upper bound per house).\n\n Therefore, the optimal solution is to set each house i to its individual upper bound (if we set a house to less than its UB, then we could set it to UB and get more profit, unless there is an interaction with the constraints?).\n\n But note: the restrictions are defined by contiguous segments. However, observe that the constraint for a house i is solely determined by the restrictions that include i. There is no constraint that links two houses together beyond the fact that a restriction applies to a contiguous set. However, the same restriction applies to multiple houses. But the condition is that in the entire segment [l_i, r_i] the maximum height must be <= x_i. \n\n But if we set house i to UB[i] (the minimum x from all restrictions that cover i), then the entire street is built independently. However, consider a restriction that covers several houses. The condition is that the tallest house in that segment is <= x_i. If we set each house to its own UB[i] (which is <= x_i for every house in the segment, because x_i is one of the restrictions and the UB[i] is the minimum x including that x_i), then the maximum in that segment will be <= x_i. So the independent assignment satisfies all restrictions.\n\n Therefore, we can set each house i to min(h, UB[i])? Actually, we have already defined UB[i] as the minimum x from the restrictions (with no restriction meaning h). But wait: we started with base_UB[i] = h, then for each restriction j",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses, and each house's height must comply with all restrictions that apply to its position.\n\n### Approach\n1. **Problem Analysis**: The problem involves determining the optimal height for each house such that all zoning restrictions are satisfied. Each restriction specifies that the tallest house in a certain range must not exceed a given height. The goal is to maximize the sum of the squares of the house heights.\n2. **Key Insight**: For each house, the maximum allowable height is the minimum of all the restrictions that include that house. If no restrictions apply, the house can be built up to the maximum allowed height `h`.\n3. **Algorithm Selection**: We first compute the upper bound for each house by checking all restrictions that cover it. The upper bound for each house is the minimum value among all the restriction heights that include it. Once we have these upper bounds, the optimal height for each house is simply its computed upper bound, as the profit function (square of the height) is maximized by the highest possible height.\n4. **Complexity Analysis**: Given the constraints (n, m, h ≤ 50), the solution efficiently checks each house against all relevant restrictions, resulting in a manageable complexity.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x))\n        \n    upper_bounds = [h] * n\n    \n    for l, r, x in restrictions:\n        for i in range(l-1, r):\n            if x < upper_bounds[i]:\n                upper_bounds[i] = x\n                \n    total_profit = 0\n    for i in range(n):\n        total_profit += upper_bounds[i] * upper_bounds[i]\n        \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, which includes the number of spots `n`, the maximum height `h`, and the number of restrictions `m`. Each restriction is then read and stored.\n2. **Upper Bound Calculation**: For each house, we initialize its upper bound to `h` (the default maximum height). We then iterate over all restrictions and adjust the upper bound for each house covered by the restriction to the minimum of its current upper bound and the restriction's height.\n3. **Profit Calculation**: After determining the optimal height for each house (which is its upper bound), we compute the total profit by summing the squares of these heights.\n4. **Output**: The total profit is printed as the result.\n\nThis approach efficiently ensures that all zoning restrictions are met while maximizing the profit by leveraging the convex nature of the profit function (squares of heights). The solution is both straightforward and optimal given the problem constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x))\n        \n    upper_bounds = [h] * n\n    \n    for l, r, x in restrictions:\n        for i in range(l-1, r):\n            if x < upper_bounds[i]:\n                upper_bounds[i] = x\n                \n    total_profit = 0\n    for i in range(n):\n        total_profit += upper_bounds[i] * upper_bounds[i]\n        \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 823,
        "completion_token_count": 681,
        "thoughts_token_count": 1023
    }
}