{
    "start": 1758094574.1325,
    "end": 1758094597.7311027,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# The provided samples seem to include multiple testcases concatenated; detect if first token is number of testcases?\n# But original problem has single case. However sample input given as list of cases.\n# Heuristic: if first token equals count of cases and rest length matches, handle multiple; else try to parse as repeated cases until exhausted.\ntokens = list(it)\nptr = 0\nresults = []\ndef parse_case(ptr):\n    if ptr+1 >= len(tokens):\n        return None, ptr\n    n = int(tokens[ptr]); m = int(tokens[ptr+1]); ptr += 2\n    items = []\n    if ptr + 2*n -1 >= len(tokens):\n        return None, ptr-2\n    for _ in range(n):\n        w = int(tokens[ptr]); c = int(tokens[ptr+1]); ptr += 2\n        items.append((w,c))\n    return (n,m,items), ptr\n\n# Try two modes: if first token equals number of cases and matches parse, use that.\nfirst = int(tokens[0])\ntry_first_count = False\nif first > 0:\n    # check if it can be number of cases\n    t = first\n    pp = 1\n    ok = True\n    for _ in range(t):\n        if pp+1 > len(tokens)-1:\n            ok = False; break\n        n = int(tokens[pp]); m = int(tokens[pp+1]); pp += 2\n        if pp + 2*n > len(tokens)+1:\n            ok = False; break\n        pp += 2*n\n    if ok and pp == len(tokens):\n        try_first_count = True\n\nptr = 0\nif try_first_count:\n    t = int(tokens[0]); ptr = 1\n    for _ in range(t):\n        n = int(tokens[ptr]); m = int(tokens[ptr+1]); ptr += 2\n        w1 = []; w2 = []; w3 = []\n        for _i in range(n):\n            w = int(tokens[ptr]); c = int(tokens[ptr+1]); ptr += 2\n            if w == 1: w1.append(c)\n            elif w == 2: w2.append(c)\n            else: w3.append(c)\n        w1.sort(reverse=True); w2.sort(reverse=True); w3.sort(reverse=True)\n        pref1 = [0]\n        for v in w1: pref1.append(pref1[-1]+v)\n        pref2 = [0]\n        for v in w2: pref2.append(pref2[-1]+v)\n        # prepare best using weights up to m using 1s and 2s\n        best12 = [0]*(m+1)\n        # try using k twos\n        max_twos = min(len(w2), m//2)\n        for k in range(0, max_twos+1):\n            weight2 = 2*k\n            val2 = pref2[k]\n            rem = m - weight2\n            take1 = min(len(w1), rem)\n            val = val2 + pref1[take1]\n            # distribute val into best12 for weight weight2 + t where t=0..take1\n            # But simpler: we will later use iterating weight for 3s, so fill best12[j] = max val achievable with weight exactly j\n            # Instead, compute array of best for all weights using knapsack-like: we'll build best12 by considering taking twos count and ones up to len.\n        # Build best12 by initializing with -inf then fill\n        INF_NEG = -10**30\n        best12 = [INF_NEG]*(m+1)\n        best12[0] = 0\n        # add twos greedily: for each k twos prefix\n        for k in range(0, len(pref2)):\n            wgt = 2*k\n            if wgt > m: break\n            val2 = pref2[k]\n            # add ones up to available\n            max1 = min(len(w1), m - wgt)\n            for t1 in range(0, max1+1):\n                totalw = wgt + t1\n                val = val2 + pref1[t1]\n                if val > best12[totalw]:\n                    best12[totalw] = val\n        # Make best12 prefix max to allow \"at most\" weight\n        for i in range(1, m+1):\n            if best12[i-1] > best12[i]:\n                best12[i] = best12[i-1]\n        # Now try adding 3-weight items\n        ans = 0\n        cur3 = 0\n        for k3 in range(0, len(w3)+1):\n            wgt3 = 3*k3\n            if wgt3 > m: break\n            val3 = cur3\n            rem = m - wgt3\n            val12 = best12[rem]\n            if val12 < 0:\n                val12 = 0\n            ans = max(ans, val3 + val12)\n            if k3 < len(w3):\n                cur3 += w3[k3]\n        results.append(str(ans))\nelse:\n    # parse cases sequentially until exhausted\n    ptr = 0\n    while ptr < len(tokens):\n        parsed, newptr = parse_case(ptr)\n        if parsed is None:\n            break\n        n,m,items = parsed\n        ptr = newptr\n        w1 = []; w2 = []; w3 = []\n        for w,c in items:\n            if w == 1: w1.append(c)\n            elif w == 2: w2.append(c)\n            else: w3.append(c)\n        w1.sort(reverse=True); w2.sort(reverse=True); w3.sort(reverse=True)\n        pref1 = [0]\n        for v in w1: pref1.append(pref1[-1]+v)\n        pref2 = [0]\n        for v in w2: pref2.append(pref2[-1]+v)\n        INF_NEG = -10**30\n        best12 = [INF_NEG]*(m+1)\n        best12[0] = 0\n        for k in range(0, len(pref2)):\n            wgt = 2*k\n            if wgt > m: break\n            val2 = pref2[k]\n            max1 = min(len(w1), m - wgt)\n            for t1 in range(0, max1+1):\n                totalw = wgt + t1\n                val = val2 + pref1[t1]\n                if val > best12[totalw]:\n                    best12[totalw] = val\n        for i in range(1, m+1):\n            if best12[i-1] > best12[i]:\n                best12[i] = best12[i-1]\n        ans = 0\n        cur3 = 0\n        for k3 in range(0, len(w3)+1):\n            wgt3 = 3*k3\n            if wgt3 > m: break\n            val3 = cur3\n            rem = m - wgt3\n            val12 = best12[rem]\n            if val12 < 0:\n                val12 = 0\n            ans = max(ans, val3 + val12)\n            if k3 < len(w3):\n                cur3 += w3[k3]\n        results.append(str(ans))\n\nprint(\"\\n\".join(results))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# The provided samples seem to include multiple testcases concatenated; detect if first token is number of testcases?\n# But original problem has single case. However sample input given as list of cases.\n# Heuristic: if first token equals count of cases and rest length matches, handle multiple; else try to parse as repeated cases until exhausted.\ntokens = list(it)\nptr = 0\nresults = []\ndef parse_case(ptr):\n    if ptr+1 >= len(tokens):\n        return None, ptr\n    n = int(tokens[ptr]); m = int(tokens[ptr+1]); ptr += 2\n    items = []\n    if ptr + 2*n -1 >= len(tokens):\n        return None, ptr-2\n    for _ in range(n):\n        w = int(tokens[ptr]); c = int(tokens[ptr+1]); ptr += 2\n        items.append((w,c))\n    return (n,m,items), ptr\n\n# Try two modes: if first token equals number of cases and matches parse, use that.\nfirst = int(tokens[0])\ntry_first_count = False\nif first > 0:\n    # check if it can be number of cases\n    t = first\n    pp = 1\n    ok = True\n    for _ in range(t):\n        if pp+1 > len(tokens)-1:\n            ok = False; break\n        n = int(tokens[pp]); m = int(tokens[pp+1]); pp += 2\n        if pp + 2*n > len(tokens)+1:\n            ok = False; break\n        pp += 2*n\n    if ok and pp == len(tokens):\n        try_first_count = True\n\nptr = 0\nif try_first_count:\n    t = int(tokens[0]); ptr = 1\n    for _ in range(t):\n        n = int(tokens[ptr]); m = int(tokens[ptr+1]); ptr += 2\n        w1 = []; w2 = []; w3 = []\n        for _i in range(n):\n            w = int(tokens[ptr]); c = int(tokens[ptr+1]); ptr += 2\n            if w == 1: w1.append(c)\n            elif w == 2: w2.append(c)\n            else: w3.append(c)\n        w1.sort(reverse=True); w2.sort(reverse=True); w3.sort(reverse=True)\n        pref1 = [0]\n        for v in w1: pref1.append(pref1[-1]+v)\n        pref2 = [0]\n        for v in w2: pref2.append(pref2[-1]+v)\n        # prepare best using weights up to m using 1s and 2s\n        best12 = [0]*(m+1)\n        # try using k twos\n        max_twos = min(len(w2), m//2)\n        for k in range(0, max_twos+1):\n            weight2 = 2*k\n            val2 = pref2[k]\n            rem = m - weight2\n            take1 = min(len(w1), rem)\n            val = val2 + pref1[take1]\n            # distribute val into best12 for weight weight2 + t where t=0..take1\n            # But simpler: we will later use iterating weight for 3s, so fill best12[j] = max val achievable with weight exactly j\n            # Instead, compute array of best for all weights using knapsack-like: we'll build best12 by considering taking twos count and ones up to len.\n        # Build best12 by initializing with -inf then fill\n        INF_NEG = -10**30\n        best12 = [INF_NEG]*(m+1)\n        best12[0] = 0\n        # add twos greedily: for each k twos prefix\n        for k in range(0, len(pref2)):\n            wgt = 2*k\n            if wgt > m: break\n            val2 = pref2[k]\n            # add ones up to available\n            max1 = min(len(w1), m - wgt)\n            for t1 in range(0, max1+1):\n                totalw = wgt + t1\n                val = val2 + pref1[t1]\n                if val > best12[totalw]:\n                    best12[totalw] = val\n        # Make best12 prefix max to allow \"at most\" weight\n        for i in range(1, m+1):\n            if best12[i-1] > best12[i]:\n                best12[i] = best12[i-1]\n        # Now try adding 3-weight items\n        ans = 0\n        cur3 = 0\n        for k3 in range(0, len(w3)+1):\n            wgt3 = 3*k3\n            if wgt3 > m: break\n            val3 = cur3\n            rem = m - wgt3\n            val12 = best12[rem]\n            if val12 < 0:\n                val12 = 0\n            ans = max(ans, val3 + val12)\n            if k3 < len(w3):\n                cur3 += w3[k3]\n        results.append(str(ans))\nelse:\n    # parse cases sequentially until exhausted\n    ptr = 0\n    while ptr < len(tokens):\n        parsed, newptr = parse_case(ptr)\n        if parsed is None:\n            break\n        n,m,items = parsed\n        ptr = newptr\n        w1 = []; w2 = []; w3 = []\n        for w,c in items:\n            if w == 1: w1.append(c)\n            elif w == 2: w2.append(c)\n            else: w3.append(c)\n        w1.sort(reverse=True); w2.sort(reverse=True); w3.sort(reverse=True)\n        pref1 = [0]\n        for v in w1: pref1.append(pref1[-1]+v)\n        pref2 = [0]\n        for v in w2: pref2.append(pref2[-1]+v)\n        INF_NEG = -10**30\n        best12 = [INF_NEG]*(m+1)\n        best12[0] = 0\n        for k in range(0, len(pref2)):\n            wgt = 2*k\n            if wgt > m: break\n            val2 = pref2[k]\n            max1 = min(len(w1), m - wgt)\n            for t1 in range(0, max1+1):\n                totalw = wgt + t1\n                val = val2 + pref1[t1]\n                if val > best12[totalw]:\n                    best12[totalw] = val\n        for i in range(1, m+1):\n            if best12[i-1] > best12[i]:\n                best12[i] = best12[i-1]\n        ans = 0\n        cur3 = 0\n        for k3 in range(0, len(w3)+1):\n            wgt3 = 3*k3\n            if wgt3 > m: break\n            val3 = cur3\n            rem = m - wgt3\n            val12 = best12[rem]\n            if val12 < 0:\n                val12 = 0\n            ans = max(ans, val3 + val12)\n            if k3 < len(w3):\n                cur3 += w3[k3]\n        results.append(str(ans))\n\nprint(\"\\n\".join(results))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 1619,
        "thoughts_token_count": 0
    }
}