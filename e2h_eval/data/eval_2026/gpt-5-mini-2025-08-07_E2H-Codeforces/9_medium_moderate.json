{
    "start": 1758094670.2465718,
    "end": 1758094793.8733873,
    "start-formatted": "2025-09-17 16:37 KST",
    "end-formatted": "2025-09-17 16:39 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Exploring dynamic programming**\n\nI'm thinking about using dynamic programming with sorted items, simulating a greedy algorithm. The goal is to maximize cost per weight unit while keeping track of choices. Accepted solutions involve building an array for best choices while adjusting weights incrementally. For any additional capacity, I need to decide whether to take a weight that uses a single capacity or one that uses two. My implementation will involve creating an array to compute the maximum cost for specific weights. I'll start with zero weight and no cost.",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nv1 = []\nv2 = []\nv3 = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        v1.append(c)\n    elif w == 2:\n        v2.append(c)\n    else:\n        v3.append(c)\nv1.sort(reverse=True)\nv2.sort(reverse=True)\nv3.sort(reverse=True)\npref3 = [0]\nfor x in v3:\n    pref3.append(pref3[-1] + x)\n# build pair_vals from v1\npairs = []\nfor i in range(0, len(v1) // 2):\n    pairs.append(v1[2*i] + v1[2*i+1])\n# merged list of (value, is_pair)\nmerged = []\nfor x in v2:\n    merged.append((x, 0))\nfor x in pairs:\n    merged.append((x, 1))\nmerged.sort(key=lambda x: x[0], reverse=True)\nL = len(merged)\nmerged_pref = [0] * (L + 1)\npaircount_pref = [0] * (L + 1)\nfor i in range(1, L+1):\n    merged_pref[i] = merged_pref[i-1] + merged[i-1][0]\n    paircount_pref[i] = paircount_pref[i-1] + merged[i-1][1]\n# best exact using only weight1 and weight2 up to m\nNEG = -10**30\nbest_exact = [NEG] * (m + 1)\nbest_exact[0] = 0\nfor u in range(0, L+1):\n    w_even = 2 * u\n    if w_even <= m:\n        cost_even = merged_pref[u]\n        if cost_even > best_exact[w_even]:\n            best_exact[w_even] = cost_even\n        t_pairs = paircount_pref[u]\n        idx_single = 2 * t_pairs\n        if w_even + 1 <= m and idx_single < len(v1):\n            cost_odd = cost_even + v1[idx_single]\n            if cost_odd > best_exact[w_even + 1]:\n                best_exact[w_even + 1] = cost_odd\n# Also consider case taking only singles (when no pairs taken and maybe more than one single if no pairs exist)\n# But pairs list used all v1 except maybe one, so singles beyond 1 don't exist separately.\n# Compute prefix max to get best up to capacity\nbest_up_to = [0] * (m + 1)\nbest_up_to[0] = best_exact[0]\nfor i in range(1, m+1):\n    best_up_to[i] = max(best_up_to[i-1], best_exact[i])\nans = 0\nmax_k3 = min(len(v3), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    cost3 = pref3[k3]\n    rem = m - 3 * k3\n    total = cost3 + best_up_to[rem]\n    if total > ans:\n        ans = total\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nv1 = []\nv2 = []\nv3 = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        v1.append(c)\n    elif w == 2:\n        v2.append(c)\n    else:\n        v3.append(c)\nv1.sort(reverse=True)\nv2.sort(reverse=True)\nv3.sort(reverse=True)\npref3 = [0]\nfor x in v3:\n    pref3.append(pref3[-1] + x)\n# build pair_vals from v1\npairs = []\nfor i in range(0, len(v1) // 2):\n    pairs.append(v1[2*i] + v1[2*i+1])\n# merged list of (value, is_pair)\nmerged = []\nfor x in v2:\n    merged.append((x, 0))\nfor x in pairs:\n    merged.append((x, 1))\nmerged.sort(key=lambda x: x[0], reverse=True)\nL = len(merged)\nmerged_pref = [0] * (L + 1)\npaircount_pref = [0] * (L + 1)\nfor i in range(1, L+1):\n    merged_pref[i] = merged_pref[i-1] + merged[i-1][0]\n    paircount_pref[i] = paircount_pref[i-1] + merged[i-1][1]\n# best exact using only weight1 and weight2 up to m\nNEG = -10**30\nbest_exact = [NEG] * (m + 1)\nbest_exact[0] = 0\nfor u in range(0, L+1):\n    w_even = 2 * u\n    if w_even <= m:\n        cost_even = merged_pref[u]\n        if cost_even > best_exact[w_even]:\n            best_exact[w_even] = cost_even\n        t_pairs = paircount_pref[u]\n        idx_single = 2 * t_pairs\n        if w_even + 1 <= m and idx_single < len(v1):\n            cost_odd = cost_even + v1[idx_single]\n            if cost_odd > best_exact[w_even + 1]:\n                best_exact[w_even + 1] = cost_odd\n# Also consider case taking only singles (when no pairs taken and maybe more than one single if no pairs exist)\n# But pairs list used all v1 except maybe one, so singles beyond 1 don't exist separately.\n# Compute prefix max to get best up to capacity\nbest_up_to = [0] * (m + 1)\nbest_up_to[0] = best_exact[0]\nfor i in range(1, m+1):\n    best_up_to[i] = max(best_up_to[i-1], best_exact[i])\nans = 0\nmax_k3 = min(len(v3), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    cost3 = pref3[k3]\n    rem = m - 3 * k3\n    total = cost3 + best_up_to[rem]\n    if total > ans:\n        ans = total\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 8321,
        "thoughts_token_count": 7616
    }
}