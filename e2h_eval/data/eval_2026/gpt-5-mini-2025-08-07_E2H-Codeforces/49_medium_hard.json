{
    "start": 1758290771.4941099,
    "end": 1758290846.7100022,
    "start-formatted": "2025-09-19 23:06 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Exploring the CF Problem**\n\nI'm considering the \"Mushroom Strife\" problem, probably ranking around 1400-1600? The edges are labeled with the gcd and lcm of node values. I need to find positive integers for node values that are less than or equal to 1e6.\n\nActually, while the original numbers on edges are within that range, the node values might go higher. I think both the node values and edges follow typical constraints. I need to ensure efficiency while determining integers that meet the gcd and lcm conditions for each edge. So, I'll break down what that means!",
    "response": "```python\nimport sys\nfrom collections import deque, defaultdict\nfrom math import gcd\n\ninput_data = sys.stdin.read().strip().split()\nif not input_data:\n    sys.exit(0)\nit = iter(input_data)\nn = int(next(it))\nm = int(next(it))\n\nadj = [[] for _ in range(n+1)]\nedges = []\npossible = True\nfor _ in range(m):\n    u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n    if l % g != 0:\n        possible = False\n    adj[u].append((v,g,l))\n    adj[v].append((u,g,l))\n    edges.append((u,v,g,l))\n\nif not possible:\n    print(\"NO\")\n    sys.exit(0)\n\n# memoize divisors for l\ndivs_cache = {}\ndef divisors(x):\n    if x in divs_cache:\n        return divs_cache[x]\n    res = []\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            res.append(i)\n            if i * i != x:\n                res.append(x//i)\n        i += 1\n    divs_cache[x] = res\n    return res\n\nans = [0]*(n+1)\nused = [False]*(n+1)\n\nfor s in range(1, n+1):\n    if used[s]:\n        continue\n    if not adj[s]:\n        ans[s] = 1\n        used[s] = True\n        continue\n    # collect nodes in component\n    comp_nodes = []\n    q = deque([s])\n    used_temp = set([s])\n    while q:\n        u = q.popleft()\n        comp_nodes.append(u)\n        for v,g,l in adj[u]:\n            if v not in used_temp:\n                used_temp.add(v)\n                q.append(v)\n    # compute candidate values for s by intersecting allowed divisors from its incident edges\n    cand_sets = None\n    for v,g,l in adj[s]:\n        ds = []\n        for d in divisors(l):\n            if d % g != 0:\n                continue\n            other = (g*l)//d\n            # check gcd and lcm conditions\n            if gcd(d, other) != g:\n                continue\n            # lcm check: d*other//gcd == l\n            if d//g * other != l//g * g:  # avoid overflow; but simpler compute lcm\n                pass\n            # simpler direct lcm check\n            if d * other // gcd(d, other) != l:\n                continue\n            ds.append(d)\n        if not ds:\n            possible = False\n            break\n        ds_set = set(ds)\n        if cand_sets is None:\n            cand_sets = ds_set\n        else:\n            cand_sets &= ds_set\n        if not cand_sets:\n            possible = False\n            break\n    if not possible:\n        break\n    if cand_sets is None or not cand_sets:\n        possible = False\n        break\n    success = False\n    # try each candidate\n    for start_val in cand_sets:\n        assign = {}\n        q = deque()\n        assign[s] = start_val\n        q.append(s)\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            au = assign[u]\n            for v,g,l in adj[u]:\n                prod = g*l\n                if prod % au != 0:\n                    ok = False\n                    break\n                bv = prod // au\n                # verify gcd and lcm\n                if gcd(au, bv) != g or (au * bv // gcd(au, bv)) != l:\n                    ok = False\n                    break\n                if v in assign:\n                    if assign[v] != bv:\n                        ok = False\n                        break\n                else:\n                    assign[v] = bv\n                    q.append(v)\n        if ok:\n            # commit\n            for node in comp_nodes:\n                ans[node] = assign.get(node, 1)\n                used[node] = True\n            success = True\n            break\n    if not success:\n        possible = False\n        break\n\nif not possible:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(\" \".join(str(ans[i]) for i in range(1, n+1)))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\nfrom math import gcd\n\ninput_data = sys.stdin.read().strip().split()\nif not input_data:\n    sys.exit(0)\nit = iter(input_data)\nn = int(next(it))\nm = int(next(it))\n\nadj = [[] for _ in range(n+1)]\nedges = []\npossible = True\nfor _ in range(m):\n    u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n    if l % g != 0:\n        possible = False\n    adj[u].append((v,g,l))\n    adj[v].append((u,g,l))\n    edges.append((u,v,g,l))\n\nif not possible:\n    print(\"NO\")\n    sys.exit(0)\n\n# memoize divisors for l\ndivs_cache = {}\ndef divisors(x):\n    if x in divs_cache:\n        return divs_cache[x]\n    res = []\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            res.append(i)\n            if i * i != x:\n                res.append(x//i)\n        i += 1\n    divs_cache[x] = res\n    return res\n\nans = [0]*(n+1)\nused = [False]*(n+1)\n\nfor s in range(1, n+1):\n    if used[s]:\n        continue\n    if not adj[s]:\n        ans[s] = 1\n        used[s] = True\n        continue\n    # collect nodes in component\n    comp_nodes = []\n    q = deque([s])\n    used_temp = set([s])\n    while q:\n        u = q.popleft()\n        comp_nodes.append(u)\n        for v,g,l in adj[u]:\n            if v not in used_temp:\n                used_temp.add(v)\n                q.append(v)\n    # compute candidate values for s by intersecting allowed divisors from its incident edges\n    cand_sets = None\n    for v,g,l in adj[s]:\n        ds = []\n        for d in divisors(l):\n            if d % g != 0:\n                continue\n            other = (g*l)//d\n            # check gcd and lcm conditions\n            if gcd(d, other) != g:\n                continue\n            # lcm check: d*other//gcd == l\n            if d//g * other != l//g * g:  # avoid overflow; but simpler compute lcm\n                pass\n            # simpler direct lcm check\n            if d * other // gcd(d, other) != l:\n                continue\n            ds.append(d)\n        if not ds:\n            possible = False\n            break\n        ds_set = set(ds)\n        if cand_sets is None:\n            cand_sets = ds_set\n        else:\n            cand_sets &= ds_set\n        if not cand_sets:\n            possible = False\n            break\n    if not possible:\n        break\n    if cand_sets is None or not cand_sets:\n        possible = False\n        break\n    success = False\n    # try each candidate\n    for start_val in cand_sets:\n        assign = {}\n        q = deque()\n        assign[s] = start_val\n        q.append(s)\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            au = assign[u]\n            for v,g,l in adj[u]:\n                prod = g*l\n                if prod % au != 0:\n                    ok = False\n                    break\n                bv = prod // au\n                # verify gcd and lcm\n                if gcd(au, bv) != g or (au * bv // gcd(au, bv)) != l:\n                    ok = False\n                    break\n                if v in assign:\n                    if assign[v] != bv:\n                        ok = False\n                        break\n                else:\n                    assign[v] = bv\n                    q.append(v)\n        if ok:\n            # commit\n            for node in comp_nodes:\n                ans[node] = assign.get(node, 1)\n                used[node] = True\n            success = True\n            break\n    if not success:\n        possible = False\n        break\n\nif not possible:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(\" \".join(str(ans[i]) for i in range(1, n+1)))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 3675,
        "thoughts_token_count": 2752
    }
}