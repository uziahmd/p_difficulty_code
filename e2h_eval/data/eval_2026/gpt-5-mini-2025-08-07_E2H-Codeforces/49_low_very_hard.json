{
    "start": 1758284956.0315995,
    "end": 1758285033.6991117,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Working with multiplicative integers**\n\nI’m considering using multiplicative integers and prime exponent vectors instead of logs. For this, I have the d_i vector for each prime and the exponent vector t, related to a continuous log of T. I think I can express the equations as e_v(p) = ep_edge(p) - e_u(p). As I continue, e_i(p) becomes tied to the unique T_p for each prime. When working across cycles, if s_existing and s_new differ, t_p can be uniquely determined for each prime. I can solve them independently!",
    "response": "#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve(n):\n    bs = [True]*(n+1)\n    primes=[]\n    for i in range(2,n+1):\n        if bs[i]:\n            primes.append(i)\n            step = i\n            for j in range(i*i, n+1, step):\n                bs[j]=False\n    return primes\n\ndef factor_small(x, primes):\n    res = {}\n    for p in primes:\n        if p*p > x:\n            break\n        if x % p == 0:\n            c=0\n            while x%p==0:\n                x//=p\n                c+=1\n            res[p]=c\n    if x>1:\n        res[x]=res.get(x,0)+1\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxval = 10**6\n    primes = sieve(maxval)\n    adj = [[] for _ in range(n)]\n    edge_p_exp = []\n    for idx in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            return\n        p = g * l\n        # factor p by factoring g and l separately to avoid large sqrt\n        fg = factor_small(g, primes)\n        fl = factor_small(l, primes)\n        fp = {}\n        for k,ev in fg.items():\n            fp[k] = fp.get(k,0) + ev\n        for k,ev in fl.items():\n            fp[k] = fp.get(k,0) + ev\n        edges.append((u,v,g,l))\n        edge_p_exp.append(fp)\n        adj[u].append(idx)\n        adj[v].append(idx)\n    visited_node = [False]*n\n    comp_id = [-1]*n\n    comps = []\n    # find components\n    for i in range(n):\n        if not visited_node[i]:\n            q=[i]\n            visited_node[i]=True\n            comp_nodes=[i]\n            comp_edges=set()\n            comp_id[i]=len(comps)\n            qi=0\n            while qi < len(q):\n                u=q[qi]; qi+=1\n                for ei in adj[u]:\n                    comp_edges.add(ei)\n                    v = edges[ei][0] ^ edges[ei][1] ^ u\n                    if not visited_node[v]:\n                        visited_node[v]=True\n                        comp_id[v]=len(comps)\n                        q.append(v)\n                        comp_nodes.append(v)\n            comps.append((comp_nodes, list(comp_edges)))\n    # prepare per-component primes\n    node_exponents = [defaultdict(int) for _ in range(n)]\n    for cid, (nodes, comp_edges) in enumerate(comps):\n        # collect primes in this component\n        primes_in_comp = set()\n        for ei in comp_edges:\n            primes_in_comp.update(edge_p_exp[ei].keys())\n        # ensure we also include primes that may be absent (but zero exp) - not needed\n        for p in primes_in_comp:\n            # BFS over nodes to express e_i = s_i * t + d_i\n            s = {}\n            d = {}\n            t_fixed = None\n            ok = True\n            # process each connected piece for this prime\n            for start in nodes:\n                if start in s:\n                    continue\n                # start new BFS\n                s[start] = 1\n                d[start] = 0\n                dq = deque([start])\n                while dq and ok:\n                    u = dq.popleft()\n                    for ei in adj[u]:\n                        if ei not in comp_edges:\n                            continue\n                        u0,v0,g,l = edges[ei]\n                        v = u0 ^ v0 ^ u\n                        ep = edge_p_exp[ei].get(p, 0)\n                        # e_v = ep - e_u\n                        s_v = -s[u]\n                        d_v = ep - d[u]\n                        if v not in s:\n                            s[v]=s_v\n                            d[v]=d_v\n                            dq.append(v)\n                        else:\n                            if s[v] == s_v:\n                                # require d match\n                                if d[v] != d_v:\n                                    ok=False\n                                    break\n                            else:\n                                # determine t: s[v]*t + d[v] == s_v*t + d_v\n                                # since s_v = -s[u], s[v] = maybe etc.\n                                # Solve for t: (s[v] - s_v) * t = d_v - d[v]\n                                denom = (s[v] - s_v)\n                                num = (d_v - d[v])\n                                # denom should be 2 or -2\n                                if denom == 0:\n                                    if num != 0:\n                                        ok=False\n                                        break\n                                else:\n                                    # t = num/denom must be integer\n                                    if num % denom != 0:\n                                        ok=False\n                                        break\n                                    val = num//denom\n                                    if t_fixed is None:\n                                        t_fixed = val\n                                    else:\n                                        if t_fixed != val:\n                                            ok=False\n                                            break\n                    # end for edges\n                if not ok:\n                    break\n            if not ok:\n                print(\"NO\"); return\n            # now have s,d for nodes in comp that were reached (all nodes)\n            # derive bounds for t\n            lower = -10**30\n            upper = 10**30\n            for node in nodes:\n                si = s.get(node, 1)\n                di = d.get(node, 0)\n                if si == 1:\n                    if -di > lower: lower = -di\n                else:\n                    if di < upper: upper = di\n            if t_fixed is not None:\n                if not (lower <= t_fixed <= upper):\n                    print(\"NO\"); return\n                t = t_fixed\n            else:\n                # choose integer t in [lower,upper]\n                if lower == -10**30 and upper == 10**30:\n                    t = 0\n                elif lower == -10**30:\n                    t = upper\n                elif upper == 10**30:\n                    t = lower\n                else:\n                    if lower > upper:\n                        print(\"NO\"); return\n                    t = lower\n            # assign exponents\n            for node in nodes:\n                si = s.get(node, 1)\n                di = d.get(node, 0)\n                ei = si * t + di\n                if ei < 0:\n                    print(\"NO\"); return\n                if ei != 0:\n                    node_exponents[node][p] += ei\n    # build ai\n    a = [1]*n\n    for i in range(n):\n        val = 1\n        for p,exp in node_exponents[i].items():\n            val *= pow(p, exp)\n        a[i]=val\n    # final check against edges: compute gcd and lcm\n    from math import gcd\n    for idx,(u,v,g,l) in enumerate(edges):\n        gu = gcd(a[u], a[v])\n        lu = a[u]//gu*a[v]\n        if gu != g or lu != l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve(n):\n    bs = [True]*(n+1)\n    primes=[]\n    for i in range(2,n+1):\n        if bs[i]:\n            primes.append(i)\n            step = i\n            for j in range(i*i, n+1, step):\n                bs[j]=False\n    return primes\n\ndef factor_small(x, primes):\n    res = {}\n    for p in primes:\n        if p*p > x:\n            break\n        if x % p == 0:\n            c=0\n            while x%p==0:\n                x//=p\n                c+=1\n            res[p]=c\n    if x>1:\n        res[x]=res.get(x,0)+1\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxval = 10**6\n    primes = sieve(maxval)\n    adj = [[] for _ in range(n)]\n    edge_p_exp = []\n    for idx in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            return\n        p = g * l\n        # factor p by factoring g and l separately to avoid large sqrt\n        fg = factor_small(g, primes)\n        fl = factor_small(l, primes)\n        fp = {}\n        for k,ev in fg.items():\n            fp[k] = fp.get(k,0) + ev\n        for k,ev in fl.items():\n            fp[k] = fp.get(k,0) + ev\n        edges.append((u,v,g,l))\n        edge_p_exp.append(fp)\n        adj[u].append(idx)\n        adj[v].append(idx)\n    visited_node = [False]*n\n    comp_id = [-1]*n\n    comps = []\n    # find components\n    for i in range(n):\n        if not visited_node[i]:\n            q=[i]\n            visited_node[i]=True\n            comp_nodes=[i]\n            comp_edges=set()\n            comp_id[i]=len(comps)\n            qi=0\n            while qi < len(q):\n                u=q[qi]; qi+=1\n                for ei in adj[u]:\n                    comp_edges.add(ei)\n                    v = edges[ei][0] ^ edges[ei][1] ^ u\n                    if not visited_node[v]:\n                        visited_node[v]=True\n                        comp_id[v]=len(comps)\n                        q.append(v)\n                        comp_nodes.append(v)\n            comps.append((comp_nodes, list(comp_edges)))\n    # prepare per-component primes\n    node_exponents = [defaultdict(int) for _ in range(n)]\n    for cid, (nodes, comp_edges) in enumerate(comps):\n        # collect primes in this component\n        primes_in_comp = set()\n        for ei in comp_edges:\n            primes_in_comp.update(edge_p_exp[ei].keys())\n        # ensure we also include primes that may be absent (but zero exp) - not needed\n        for p in primes_in_comp:\n            # BFS over nodes to express e_i = s_i * t + d_i\n            s = {}\n            d = {}\n            t_fixed = None\n            ok = True\n            # process each connected piece for this prime\n            for start in nodes:\n                if start in s:\n                    continue\n                # start new BFS\n                s[start] = 1\n                d[start] = 0\n                dq = deque([start])\n                while dq and ok:\n                    u = dq.popleft()\n                    for ei in adj[u]:\n                        if ei not in comp_edges:\n                            continue\n                        u0,v0,g,l = edges[ei]\n                        v = u0 ^ v0 ^ u\n                        ep = edge_p_exp[ei].get(p, 0)\n                        # e_v = ep - e_u\n                        s_v = -s[u]\n                        d_v = ep - d[u]\n                        if v not in s:\n                            s[v]=s_v\n                            d[v]=d_v\n                            dq.append(v)\n                        else:\n                            if s[v] == s_v:\n                                # require d match\n                                if d[v] != d_v:\n                                    ok=False\n                                    break\n                            else:\n                                # determine t: s[v]*t + d[v] == s_v*t + d_v\n                                # since s_v = -s[u], s[v] = maybe etc.\n                                # Solve for t: (s[v] - s_v) * t = d_v - d[v]\n                                denom = (s[v] - s_v)\n                                num = (d_v - d[v])\n                                # denom should be 2 or -2\n                                if denom == 0:\n                                    if num != 0:\n                                        ok=False\n                                        break\n                                else:\n                                    # t = num/denom must be integer\n                                    if num % denom != 0:\n                                        ok=False\n                                        break\n                                    val = num//denom\n                                    if t_fixed is None:\n                                        t_fixed = val\n                                    else:\n                                        if t_fixed != val:\n                                            ok=False\n                                            break\n                    # end for edges\n                if not ok:\n                    break\n            if not ok:\n                print(\"NO\"); return\n            # now have s,d for nodes in comp that were reached (all nodes)\n            # derive bounds for t\n            lower = -10**30\n            upper = 10**30\n            for node in nodes:\n                si = s.get(node, 1)\n                di = d.get(node, 0)\n                if si == 1:\n                    if -di > lower: lower = -di\n                else:\n                    if di < upper: upper = di\n            if t_fixed is not None:\n                if not (lower <= t_fixed <= upper):\n                    print(\"NO\"); return\n                t = t_fixed\n            else:\n                # choose integer t in [lower,upper]\n                if lower == -10**30 and upper == 10**30:\n                    t = 0\n                elif lower == -10**30:\n                    t = upper\n                elif upper == 10**30:\n                    t = lower\n                else:\n                    if lower > upper:\n                        print(\"NO\"); return\n                    t = lower\n            # assign exponents\n            for node in nodes:\n                si = s.get(node, 1)\n                di = d.get(node, 0)\n                ei = si * t + di\n                if ei < 0:\n                    print(\"NO\"); return\n                if ei != 0:\n                    node_exponents[node][p] += ei\n    # build ai\n    a = [1]*n\n    for i in range(n):\n        val = 1\n        for p,exp in node_exponents[i].items():\n            val *= pow(p, exp)\n        a[i]=val\n    # final check against edges: compute gcd and lcm\n    from math import gcd\n    for idx,(u,v,g,l) in enumerate(edges):\n        gu = gcd(a[u], a[v])\n        lu = a[u]//gu*a[v]\n        if gu != g or lu != l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 4034,
        "thoughts_token_count": 2432
    }
}