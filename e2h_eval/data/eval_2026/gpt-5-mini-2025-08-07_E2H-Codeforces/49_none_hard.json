{
    "start": 1758294627.087433,
    "end": 1758294648.7234757,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\nimport threading\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    from math import gcd\n    # We'll attempt to assign values using prime factorization propagation.\n    MAXV = 10**6\n    # sieve primes up to MAXV\n    spf = list(range(MAXV+1))\n    for i in range(2,int(MAXV**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXV+1,i):\n                if spf[j]==j:\n                    spf[j]=i\n    def factor(x):\n        res = {}\n        while x>1:\n            p = spf[x]\n            cnt = 0\n            while x%p==0:\n                x//=p; cnt+=1\n            res[p]=cnt\n        return res\n    # For each edge, l must be multiple of g and l/g must be integer and gcd(a,b)=g and lcm(a,b)=l -> a*b = g*l\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n    # We'll represent each node as variable; for each prime, build constraints on exponents.\n    # For each edge with g,l, let for prime p: gu = vp(g), lu = vp(l). We must have min(eu,ev)=gu, max(eu,ev)=lu.\n    # That implies eu and ev are either (gu,lu) or (lu,gu) or both equal if gu==lu.\n    # Build for each prime a graph of edges forcing equality or inequality.\n    node_factors = [{} for _ in range(n)]  # to accumulate assigned exponents per prime\n    # collect primes that appear\n    prime_edges = {}\n    for (u,v,g,l) in edges:\n        gg = factor(g); ll = factor(l)\n        primes = set(gg.keys()) | set(ll.keys())\n        for p in primes:\n            gp = gg.get(p,0); lp = ll.get(p,0)\n            if lp < gp:\n                print(\"NO\"); return\n            prime_edges.setdefault(p, []).append((u,v,gp,lp))\n    # For each prime, we assign exponent 0..lp maybe. We'll propagate using BFS assigning exponents, with choices when both values possible.\n    from collections import deque\n    assigned = [dict() for _ in range(n)]\n    for p, eds in prime_edges.items():\n        # build adjacency per node for this prime with constraints\n        adjp = [[] for _ in range(n)]\n        for (u,v,gp,lp) in eds:\n            adjp[u].append((v,gp,lp))\n            adjp[v].append((u,gp,lp))\n        vis = [False]*n\n        for i in range(n):\n            if vis[i] or not adjp[i]:\n                continue\n            # try to assign within component by BFS, starting with trying possible exponents for start node from 0..max_lp in component\n            # compute max lp in component\n            comp_nodes=[]\n            q=deque([i]); vis[i]=True\n            while q:\n                x=q.popleft(); comp_nodes.append(x)\n                for (y,gp,lp) in adjp[x]:\n                    if not vis[y]:\n                        vis[y]=True; q.append(y)\n            max_lp = 0\n            for x in comp_nodes:\n                for (_,_,lp) in adjp[x]:\n                    if lp>max_lp: max_lp=lp\n            # We'll try to assign start exponent from 0..max_lp and see if consistent\n            success = False\n            for start_e in range(0,max_lp+1):\n                q=deque([comp_nodes[0]])\n                val = {comp_nodes[0]: start_e}\n                ok = True\n                while q and ok:\n                    x = q.popleft()\n                    ex = val[x]\n                    for (y,gp,lp) in adjp[x]:\n                        # constraint: min(ex,ey)=gp and max(ex,ey)=lp\n                        # So ey must be either gp or lp, and ex must be the other or equal if gp==lp\n                        # Check possible ey values:\n                        possible = []\n                        if gp==lp:\n                            # then ex and ey must equal gp\n                            need = gp\n                            if ex!=need:\n                                ok=False; break\n                            ey = need\n                            if y in val:\n                                if val[y]!=ey:\n                                    ok=False; break\n                            else:\n                                val[y]=ey; q.append(y)\n                        else:\n                            # ex must be gp or lp\n                            if ex==gp:\n                                ey = lp\n                            elif ex==lp:\n                                ey = gp\n                            else:\n                                ok=False; break\n                            if y in val:\n                                if val[y]!=ey:\n                                    ok=False; break\n                            else:\n                                val[y]=ey; q.append(y)\n                if ok:\n                    # assign exponents for this prime from val; nodes not in val (isolated within comp?) set to 0\n                    for x,e in val.items():\n                        assigned[x][p]=e\n                    # any node in comp not assigned? they might be isolated? assign 0\n                    for x in comp_nodes:\n                        if p not in assigned[x]:\n                            assigned[x][p]=0\n                    success=True\n                    break\n            if not success:\n                print(\"NO\"); return\n    # For nodes with no assigned primes, assigned value 1\n    res = [1]*n\n    for i in range(n):\n        val = 1\n        for p,e in assigned[i].items():\n            if e>0:\n                val *= pow(p,e)\n                if val>10**18:\n                    pass\n        res[i]=val\n    # Validate all edges satisfy gcd and lcm\n    def lcm(a,b):\n        return a//gcd(a,b)*b\n    for (u,v,g,l) in edges:\n        gu = gcd(res[u],res[v])\n        lu = lcm(res[u],res[v])\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    from math import gcd\n    # We'll attempt to assign values using prime factorization propagation.\n    MAXV = 10**6\n    # sieve primes up to MAXV\n    spf = list(range(MAXV+1))\n    for i in range(2,int(MAXV**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXV+1,i):\n                if spf[j]==j:\n                    spf[j]=i\n    def factor(x):\n        res = {}\n        while x>1:\n            p = spf[x]\n            cnt = 0\n            while x%p==0:\n                x//=p; cnt+=1\n            res[p]=cnt\n        return res\n    # For each edge, l must be multiple of g and l/g must be integer and gcd(a,b)=g and lcm(a,b)=l -> a*b = g*l\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n    # We'll represent each node as variable; for each prime, build constraints on exponents.\n    # For each edge with g,l, let for prime p: gu = vp(g), lu = vp(l). We must have min(eu,ev)=gu, max(eu,ev)=lu.\n    # That implies eu and ev are either (gu,lu) or (lu,gu) or both equal if gu==lu.\n    # Build for each prime a graph of edges forcing equality or inequality.\n    node_factors = [{} for _ in range(n)]  # to accumulate assigned exponents per prime\n    # collect primes that appear\n    prime_edges = {}\n    for (u,v,g,l) in edges:\n        gg = factor(g); ll = factor(l)\n        primes = set(gg.keys()) | set(ll.keys())\n        for p in primes:\n            gp = gg.get(p,0); lp = ll.get(p,0)\n            if lp < gp:\n                print(\"NO\"); return\n            prime_edges.setdefault(p, []).append((u,v,gp,lp))\n    # For each prime, we assign exponent 0..lp maybe. We'll propagate using BFS assigning exponents, with choices when both values possible.\n    from collections import deque\n    assigned = [dict() for _ in range(n)]\n    for p, eds in prime_edges.items():\n        # build adjacency per node for this prime with constraints\n        adjp = [[] for _ in range(n)]\n        for (u,v,gp,lp) in eds:\n            adjp[u].append((v,gp,lp))\n            adjp[v].append((u,gp,lp))\n        vis = [False]*n\n        for i in range(n):\n            if vis[i] or not adjp[i]:\n                continue\n            # try to assign within component by BFS, starting with trying possible exponents for start node from 0..max_lp in component\n            # compute max lp in component\n            comp_nodes=[]\n            q=deque([i]); vis[i]=True\n            while q:\n                x=q.popleft(); comp_nodes.append(x)\n                for (y,gp,lp) in adjp[x]:\n                    if not vis[y]:\n                        vis[y]=True; q.append(y)\n            max_lp = 0\n            for x in comp_nodes:\n                for (_,_,lp) in adjp[x]:\n                    if lp>max_lp: max_lp=lp\n            # We'll try to assign start exponent from 0..max_lp and see if consistent\n            success = False\n            for start_e in range(0,max_lp+1):\n                q=deque([comp_nodes[0]])\n                val = {comp_nodes[0]: start_e}\n                ok = True\n                while q and ok:\n                    x = q.popleft()\n                    ex = val[x]\n                    for (y,gp,lp) in adjp[x]:\n                        # constraint: min(ex,ey)=gp and max(ex,ey)=lp\n                        # So ey must be either gp or lp, and ex must be the other or equal if gp==lp\n                        # Check possible ey values:\n                        possible = []\n                        if gp==lp:\n                            # then ex and ey must equal gp\n                            need = gp\n                            if ex!=need:\n                                ok=False; break\n                            ey = need\n                            if y in val:\n                                if val[y]!=ey:\n                                    ok=False; break\n                            else:\n                                val[y]=ey; q.append(y)\n                        else:\n                            # ex must be gp or lp\n                            if ex==gp:\n                                ey = lp\n                            elif ex==lp:\n                                ey = gp\n                            else:\n                                ok=False; break\n                            if y in val:\n                                if val[y]!=ey:\n                                    ok=False; break\n                            else:\n                                val[y]=ey; q.append(y)\n                if ok:\n                    # assign exponents for this prime from val; nodes not in val (isolated within comp?) set to 0\n                    for x,e in val.items():\n                        assigned[x][p]=e\n                    # any node in comp not assigned? they might be isolated? assign 0\n                    for x in comp_nodes:\n                        if p not in assigned[x]:\n                            assigned[x][p]=0\n                    success=True\n                    break\n            if not success:\n                print(\"NO\"); return\n    # For nodes with no assigned primes, assigned value 1\n    res = [1]*n\n    for i in range(n):\n        val = 1\n        for p,e in assigned[i].items():\n            if e>0:\n                val *= pow(p,e)\n                if val>10**18:\n                    pass\n        res[i]=val\n    # Validate all edges satisfy gcd and lcm\n    def lcm(a,b):\n        return a//gcd(a,b)*b\n    for (u,v,g,l) in edges:\n        gu = gcd(res[u],res[v])\n        lu = lcm(res[u],res[v])\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 1453,
        "thoughts_token_count": 0
    }
}