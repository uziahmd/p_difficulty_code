{
    "start": 1758290715.9068592,
    "end": 1758290876.4907,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Considering graph constraints**\n\nI’m working through constraints for multiple edges on a graph. It’s like assigning exponents to nodes for each prime, ensuring that for every edge, the sum of the exponents at the endpoints equals a certain value while maintaining that at least one endpoint has an exponent of zero. This effectively creates a bipartite structure where nodes can be divided based on their exponent values. Different edges might involve different primes, so I wonder if this could relate to a 2-SAT problem.",
    "response": "```unknown\nimport sys\nfrom collections import defaultdict, deque\n\ninput_data = sys.stdin.read().strip().split()\nif not input_data:\n    sys.exit(0)\nit = iter(input_data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nmaxv = 0\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u, v, g, l))\n    if g > maxv: maxv = g\n    if l > maxv: maxv = l\n\nMAXA = max(2, maxv)\nspf = list(range(MAXA + 1))\nfor i in range(2, int(MAXA**0.5) + 1):\n    if spf[i] == i:\n        step = i\n        start = i*i\n        for j in range(start, MAXA+1, step):\n            if spf[j] == j:\n                spf[j] = i\n\ndef factorize(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        e = 0\n        while x % p == 0:\n            x //= p\n            e += 1\n        res[p] = e\n    return res\n\nfor (u,v,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\nprime_edges = defaultdict(list)\nfor idx, (u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        ge = fg.get(p, 0)\n        le = fl.get(p, 0)\n        if le < ge:\n            print(\"NO\")\n            sys.exit(0)\n        # Only add if either ge>0 or le>0 (always true here)\n        prime_edges[p].append((u, v, ge, le))\n\n# For each prime, determine exponent x_i per node\nnode_prime_exp = defaultdict(dict)  # node -> dict(p->exp)\n\nfor p, elist in prime_edges.items():\n    adj = defaultdict(list)\n    nodes_in = set()\n    for (u,v,ge,le) in elist:\n        adj[u].append((v, ge, le))\n        adj[v].append((u, ge, le))\n        nodes_in.add(u); nodes_in.add(v)\n    assigned = {}\n    visited = set()\n    for start in nodes_in:\n        if start in visited:\n            continue\n        # gather component nodes via simple BFS (unassigned)\n        comp_nodes = []\n        q = deque([start])\n        visited.add(start)\n        while q:\n            x = q.popleft()\n            comp_nodes.append(x)\n            for (y,ge,le) in adj[x]:\n                if y not in visited:\n                    visited.add(y)\n                    q.append(y)\n        # Try to assign values for this component. We will try starting node possible candidates.\n        success = False\n        # candidate values for start: all g_e and l_e on its incident edges; if isolated shouldn't happen\n        cand_vals = set()\n        for (gg,ge,le) in [(None,)+ (None,)]: pass\n        cand_vals = set()\n        for (gg,ge,le) in []: pass\n        # build candidate from start's incident edges (but start might be any in comp)\n        # We'll try each node in comp as root starting point to get broader candidate set if needed.\n        # But simpler: pick first node comp_nodes[0]\n        root = comp_nodes[0]\n        for (nbr,ge,le) in adj[root]:\n            cand_vals.add(ge); cand_vals.add(le)\n        if not cand_vals:\n            cand_vals.add(0)\n        for cand in cand_vals:\n            ok = True\n            assign = {}\n            dq = deque()\n            assign[root] = cand\n            dq.append(root)\n            while dq and ok:\n                u = dq.popleft()\n                xu = assign[u]\n                for (v, ge, le) in adj[u]:\n                    if xu == ge:\n                        need = le\n                    elif xu == le:\n                        need = ge\n                    else:\n                        ok = False\n                        break\n                    if v in assign:\n                        if assign[v] != need:\n                            ok = False\n                            break\n                    else:\n                        assign[v] = need\n                        dq.append(v)\n            if ok:\n                # Also need to check nodes with edges where ge==le must match accordingly and nodes connected to assigned nodes that were not in component? Already in comp.\n                # Verify for all edges in this component the pair is matched\n                for (u,v,ge,le) in elist:\n                    if u in assign or v in assign:\n                        if u in assign and v in assign:\n                            xu = assign[u]; xv = assign[v]\n                            if not ((xu == ge and xv == le) or (xu == le and xv == ge)):\n                                ok = False\n                                break\n                if ok:\n                    success = True\n                    for node, val in assign.items():\n                        node_prime_exp[node][p] = val\n                    break\n        if not success:\n            print(\"NO\")\n            sys.exit(0)\n\n# Build final numbers\nres = [1] * n\nfor node, mp in node_prime_exp.items():\n    val = 1\n    for p, e in mp.items():\n        if e:\n            val *= p**e\n    res[node] = val\n\n# For nodes not present in any prime, keep 1\n# Now verify all edges satisfy gcd and lcm\nimport math\nfor (u,v,g,l) in edges:\n    au = res[u]; av = res[v]\n    gg = math.gcd(au, av)\n    ll = (au // gg) * av\n    if gg != g or ll != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\nimport sys\nfrom collections import defaultdict, deque\n\ninput_data = sys.stdin.read().strip().split()\nif not input_data:\n    sys.exit(0)\nit = iter(input_data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nmaxv = 0\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u, v, g, l))\n    if g > maxv: maxv = g\n    if l > maxv: maxv = l\n\nMAXA = max(2, maxv)\nspf = list(range(MAXA + 1))\nfor i in range(2, int(MAXA**0.5) + 1):\n    if spf[i] == i:\n        step = i\n        start = i*i\n        for j in range(start, MAXA+1, step):\n            if spf[j] == j:\n                spf[j] = i\n\ndef factorize(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        e = 0\n        while x % p == 0:\n            x //= p\n            e += 1\n        res[p] = e\n    return res\n\nfor (u,v,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\nprime_edges = defaultdict(list)\nfor idx, (u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        ge = fg.get(p, 0)\n        le = fl.get(p, 0)\n        if le < ge:\n            print(\"NO\")\n            sys.exit(0)\n        # Only add if either ge>0 or le>0 (always true here)\n        prime_edges[p].append((u, v, ge, le))\n\n# For each prime, determine exponent x_i per node\nnode_prime_exp = defaultdict(dict)  # node -> dict(p->exp)\n\nfor p, elist in prime_edges.items():\n    adj = defaultdict(list)\n    nodes_in = set()\n    for (u,v,ge,le) in elist:\n        adj[u].append((v, ge, le))\n        adj[v].append((u, ge, le))\n        nodes_in.add(u); nodes_in.add(v)\n    assigned = {}\n    visited = set()\n    for start in nodes_in:\n        if start in visited:\n            continue\n        # gather component nodes via simple BFS (unassigned)\n        comp_nodes = []\n        q = deque([start])\n        visited.add(start)\n        while q:\n            x = q.popleft()\n            comp_nodes.append(x)\n            for (y,ge,le) in adj[x]:\n                if y not in visited:\n                    visited.add(y)\n                    q.append(y)\n        # Try to assign values for this component. We will try starting node possible candidates.\n        success = False\n        # candidate values for start: all g_e and l_e on its incident edges; if isolated shouldn't happen\n        cand_vals = set()\n        for (gg,ge,le) in [(None,)+ (None,)]: pass\n        cand_vals = set()\n        for (gg,ge,le) in []: pass\n        # build candidate from start's incident edges (but start might be any in comp)\n        # We'll try each node in comp as root starting point to get broader candidate set if needed.\n        # But simpler: pick first node comp_nodes[0]\n        root = comp_nodes[0]\n        for (nbr,ge,le) in adj[root]:\n            cand_vals.add(ge); cand_vals.add(le)\n        if not cand_vals:\n            cand_vals.add(0)\n        for cand in cand_vals:\n            ok = True\n            assign = {}\n            dq = deque()\n            assign[root] = cand\n            dq.append(root)\n            while dq and ok:\n                u = dq.popleft()\n                xu = assign[u]\n                for (v, ge, le) in adj[u]:\n                    if xu == ge:\n                        need = le\n                    elif xu == le:\n                        need = ge\n                    else:\n                        ok = False\n                        break\n                    if v in assign:\n                        if assign[v] != need:\n                            ok = False\n                            break\n                    else:\n                        assign[v] = need\n                        dq.append(v)\n            if ok:\n                # Also need to check nodes with edges where ge==le must match accordingly and nodes connected to assigned nodes that were not in component? Already in comp.\n                # Verify for all edges in this component the pair is matched\n                for (u,v,ge,le) in elist:\n                    if u in assign or v in assign:\n                        if u in assign and v in assign:\n                            xu = assign[u]; xv = assign[v]\n                            if not ((xu == ge and xv == le) or (xu == le and xv == ge)):\n                                ok = False\n                                break\n                if ok:\n                    success = True\n                    for node, val in assign.items():\n                        node_prime_exp[node][p] = val\n                    break\n        if not success:\n            print(\"NO\")\n            sys.exit(0)\n\n# Build final numbers\nres = [1] * n\nfor node, mp in node_prime_exp.items():\n    val = 1\n    for p, e in mp.items():\n        if e:\n            val *= p**e\n    res[node] = val\n\n# For nodes not present in any prime, keep 1\n# Now verify all edges satisfy gcd and lcm\nimport math\nfor (u,v,g,l) in edges:\n    au = res[u]; av = res[v]\n    gg = math.gcd(au, av)\n    ll = (au // gg) * av\n    if gg != g or ll != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 7390,
        "thoughts_token_count": 6080
    }
}