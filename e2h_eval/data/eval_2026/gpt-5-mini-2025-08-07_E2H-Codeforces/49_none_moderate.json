{
    "start": 1758294618.6691842,
    "end": 1758294640.9520168,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # check consistency: l must be multiple of g, and (a*b)=g*l for numbers a,b if gcd=g and lcm=l\n    for u,v,g,l in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n    val = [0]*n\n    used = [False]*n\n    for i in range(n):\n        if used[i]: continue\n        # if isolated, assign 1\n        if not adj[i]:\n            val[i]=1\n            used[i]=True\n            continue\n        # try to assign starting value as product of all g on edges from component? We'll BFS assigning relative multiples.\n        # We can set starting value = g for first edge neighbor? approach: set val[i] = g0 * k where choose k = 1 initially, propagate using formula:\n        # For edge u-v with gcd=g and lcm=l, we must have val[u]=g*x, val[v]=g*y where gcd(x,y)=1 and x*y = l//g\n        # So val[v] = val[u] * ( (l//g) // x )  ??? Hard to factor; instead propagate by deducing val[v] = l * val[u] / (g * ???)\n        # Better approach: represent val as integer and enforce val[u]*val[v] = g*l * t where t maybe 1? Known solution: we can deduce val[v] = l // g * val[u] / ??? Simpler: try to set val[i] as product of gcds on path? Standard solution uses prime factors. But easier: brute-force try divisors of l/g for starting node upto limit 1e6.\n        # We'll collect component nodes and edges, then attempt to find assignment by trying possible value for one node: divisors of some LCM bound.\n        comp_nodes=[]\n        q=deque([i]); used2=set([i])\n        while q:\n            u=q.popleft(); comp_nodes.append(u)\n            for v,g,l in adj[u]:\n                if v not in used2:\n                    used2.add(v); q.append(v)\n        # gather constraints for component\n        comp_set = set(comp_nodes)\n        # pick an edge in component to generate candidate starting values: pick any edge (u,v,g,l)\n        seed_edge = None\n        for u in comp_nodes:\n            if adj[u]:\n                seed_edge = (u,adj[u][0][0],adj[u][0][1],adj[u][0][2]); break\n        u0,v0,g0,l0 = seed_edge\n        ratio = l0//g0\n        # get divisors of l0 that are multiples of g0? Candidate values for u0 are divisors of l0 that are multiple of g0 and <=1e6\n        cand = []\n        # compute divisors of l0\n        x = l0\n        d = 1\n        divs=[]\n        while d*d<=x:\n            if x%d==0:\n                divs.append(d)\n                if d*d!=x:\n                    divs.append(x//d)\n            d+=1\n        for dv in divs:\n            # dv could be val[u0] or val[v0]? We require gcd(val[u0], val[v0])=g0 and lcm= l0\n            # If val[u]=dv then val[v] must be l0*dv//(gcd(dv,?) * ??) Hard. Instead choose dv as g0 * t where t divides ratio\n            if dv % g0 == 0:\n                if dv<=1000000:\n                    cand.append(dv)\n        # also consider vals = g0 * (ratio//t) as symmetrical; include all multiples of g0 that divide l0\n        if not cand:\n            print(\"NO\"); return\n        def try_start(sval):\n            assign = {}\n            q=deque([u0])\n            assign[u0]=sval\n            while q:\n                u=q.popleft()\n                au=assign[u]\n                for v,g,l in adj[u]:\n                    if v in assign:\n                        av=assign[v]\n                        if gcd(au,av)!=g or (au//g)*(av//g) != (l//g):\n                            return None\n                    else:\n                        # determine av: must satisfy gcd(au, av)=g and lcm(au,av)=l\n                        # then av = l * g / au? Actually lcm = au*av/gcd => av = l * gcd / au\n                        # but gcd is g (given), so av = l * g / au\n                        # Check integer:\n                        if (l * g) % au != 0:\n                            return None\n                        av = (l * g)//au\n                        if av<1 or av>1000000:\n                            return None\n                        if gcd(au,av)!=g or (au*av)//g != l:\n                            return None\n                        assign[v]=av\n                        q.append(v)\n            return assign\n        success_assign=None\n        for s in cand:\n            res = try_start(s)\n            if res is not None:\n                success_assign=res\n                break\n        if success_assign is None:\n            print(\"NO\"); return\n        for node,valn in success_assign.items():\n            val[node]=valn\n            used[node]=True\n        # mark remaining nodes in comp that maybe unassigned (shouldn't happen)\n        for node in comp_nodes:\n            if not used[node]:\n                val[node]=1\n                used[node]=True\n    # final verify all edges\n    for u,v,g,l in edges:\n        a=val[u]; b=val[v]\n        if gcd(a,b)!=g or (a*b)//g != l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in val))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # check consistency: l must be multiple of g, and (a*b)=g*l for numbers a,b if gcd=g and lcm=l\n    for u,v,g,l in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n    val = [0]*n\n    used = [False]*n\n    for i in range(n):\n        if used[i]: continue\n        # if isolated, assign 1\n        if not adj[i]:\n            val[i]=1\n            used[i]=True\n            continue\n        # try to assign starting value as product of all g on edges from component? We'll BFS assigning relative multiples.\n        # We can set starting value = g for first edge neighbor? approach: set val[i] = g0 * k where choose k = 1 initially, propagate using formula:\n        # For edge u-v with gcd=g and lcm=l, we must have val[u]=g*x, val[v]=g*y where gcd(x,y)=1 and x*y = l//g\n        # So val[v] = val[u] * ( (l//g) // x )  ??? Hard to factor; instead propagate by deducing val[v] = l * val[u] / (g * ???)\n        # Better approach: represent val as integer and enforce val[u]*val[v] = g*l * t where t maybe 1? Known solution: we can deduce val[v] = l // g * val[u] / ??? Simpler: try to set val[i] as product of gcds on path? Standard solution uses prime factors. But easier: brute-force try divisors of l/g for starting node upto limit 1e6.\n        # We'll collect component nodes and edges, then attempt to find assignment by trying possible value for one node: divisors of some LCM bound.\n        comp_nodes=[]\n        q=deque([i]); used2=set([i])\n        while q:\n            u=q.popleft(); comp_nodes.append(u)\n            for v,g,l in adj[u]:\n                if v not in used2:\n                    used2.add(v); q.append(v)\n        # gather constraints for component\n        comp_set = set(comp_nodes)\n        # pick an edge in component to generate candidate starting values: pick any edge (u,v,g,l)\n        seed_edge = None\n        for u in comp_nodes:\n            if adj[u]:\n                seed_edge = (u,adj[u][0][0],adj[u][0][1],adj[u][0][2]); break\n        u0,v0,g0,l0 = seed_edge\n        ratio = l0//g0\n        # get divisors of l0 that are multiples of g0? Candidate values for u0 are divisors of l0 that are multiple of g0 and <=1e6\n        cand = []\n        # compute divisors of l0\n        x = l0\n        d = 1\n        divs=[]\n        while d*d<=x:\n            if x%d==0:\n                divs.append(d)\n                if d*d!=x:\n                    divs.append(x//d)\n            d+=1\n        for dv in divs:\n            # dv could be val[u0] or val[v0]? We require gcd(val[u0], val[v0])=g0 and lcm= l0\n            # If val[u]=dv then val[v] must be l0*dv//(gcd(dv,?) * ??) Hard. Instead choose dv as g0 * t where t divides ratio\n            if dv % g0 == 0:\n                if dv<=1000000:\n                    cand.append(dv)\n        # also consider vals = g0 * (ratio//t) as symmetrical; include all multiples of g0 that divide l0\n        if not cand:\n            print(\"NO\"); return\n        def try_start(sval):\n            assign = {}\n            q=deque([u0])\n            assign[u0]=sval\n            while q:\n                u=q.popleft()\n                au=assign[u]\n                for v,g,l in adj[u]:\n                    if v in assign:\n                        av=assign[v]\n                        if gcd(au,av)!=g or (au//g)*(av//g) != (l//g):\n                            return None\n                    else:\n                        # determine av: must satisfy gcd(au, av)=g and lcm(au,av)=l\n                        # then av = l * g / au? Actually lcm = au*av/gcd => av = l * gcd / au\n                        # but gcd is g (given), so av = l * g / au\n                        # Check integer:\n                        if (l * g) % au != 0:\n                            return None\n                        av = (l * g)//au\n                        if av<1 or av>1000000:\n                            return None\n                        if gcd(au,av)!=g or (au*av)//g != l:\n                            return None\n                        assign[v]=av\n                        q.append(v)\n            return assign\n        success_assign=None\n        for s in cand:\n            res = try_start(s)\n            if res is not None:\n                success_assign=res\n                break\n        if success_assign is None:\n            print(\"NO\"); return\n        for node,valn in success_assign.items():\n            val[node]=valn\n            used[node]=True\n        # mark remaining nodes in comp that maybe unassigned (shouldn't happen)\n        for node in comp_nodes:\n            if not used[node]:\n                val[node]=1\n                used[node]=True\n    # final verify all edges\n    for u,v,g,l in edges:\n        a=val[u]; b=val[v]\n        if gcd(a,b)!=g or (a*b)//g != l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in val))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 1404,
        "thoughts_token_count": 0
    }
}