{
    "start": 1758294607.172528,
    "end": 1758294624.9806075,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport math\nfrom collections import deque\n\ninput_data = sys.stdin.read().strip().split()\nif not input_data:\n    sys.exit(0)\nit = iter(input_data)\nn = int(next(it)); m = int(next(it))\nedges = [[] for _ in range(n)]\ngiven = []\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    given.append((u, v, g, l))\n    edges[u].append((v, g, l))\n    edges[v].append((u, g, l))\n\n# Check consistency for each edge: l must be multiple of g\nfor (_, _, g, l) in given:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\nres = [0]*n\nvisited = [False]*n\n\nfor s in range(n):\n    if visited[s]:\n        continue\n    # collect component nodes\n    comp = []\n    dq = deque([s]); visited[s]=True\n    while dq:\n        u = dq.popleft(); comp.append(u)\n        for v, g, l in edges[u]:\n            if not visited[v]:\n                visited[v]=True\n                dq.append(v)\n    # For component, try to assign values\n    # Build constraints: for edge u-v, let guv, luv. We need a_u = guv * xu, a_v = guv * xv, with gcd(xu,xv)=1 and xu*xv = luv/guv = k\n    # We'll attempt backtracking starting from a chosen node with candidate values divisors of product constraints.\n    comp_set = set(comp)\n    # Build adjacency map for quick access\n    adj = {u: [] for u in comp}\n    for u in comp:\n        for v,g,l in edges[u]:\n            if v in comp_set:\n                adj[u].append((v,g,l))\n    assigned = {}\n    # find a starting node; if isolated, assign 1\n    start = comp[0]\n    # Generate candidates for start: from its edges, constraints on a_start must be multiple of gcd and divide lcm\n    # We'll attempt to derive possible a_start by considering each incident edge: a_start must be one of divisors of l that are multiples of g\n    def divisors_of_edge(u, g, l):\n        k = l // g\n        divs = []\n        # a_u = g * d where d divides k or any divisor? Actually if a_u = g * x, a_v = g * y, with gcd(x,y)=1 and x*y=k. So x must be a divisor of k.\n        for d in range(1, int(math.sqrt(k))+1):\n            if k % d == 0:\n                divs.append(g * d)\n                if d*d != k:\n                    divs.append(g * (k//d))\n        return divs\n    # For isolated node\n    if len(comp) == 1 and len(adj[start]) == 0:\n        res[start] = 1\n        continue\n    # Candidate start values: intersection over edges of possible values, but to be safe gather from first edge\n    cand = set()\n    first_edges = adj[start]\n    if not first_edges:\n        cand = {1}\n    else:\n        # take divisors from first edge\n        v,g,l = first_edges[0]\n        cand = set(divisors_of_edge(start,g,l))\n    # Also include 1.. maybe large but okay\n    found_solution = False\n    for a0 in sorted(cand):\n        assigned.clear()\n        ok = True\n        assigned[start] = a0\n        q = deque([start])\n        while q and ok:\n            u = q.popleft()\n            au = assigned[u]\n            for v,g,l in adj[u]:\n                if v in assigned:\n                    av = assigned[v]\n                    if math.gcd(au,av) != g or (au//g)*(av//g) != l//g:\n                        ok = False\n                        break\n                else:\n                    if au % g != 0:\n                        ok = False\n                        break\n                    ku = au//g\n                    k = l//g\n                    if k % ku != 0:\n                        ok = False\n                        break\n                    kv = k//ku\n                    if math.gcd(ku,kv) != 1:\n                        ok = False\n                        break\n                    av = g * kv\n                    assigned[v] = av\n                    q.append(v)\n        if not ok:\n            continue\n        # Verify all edges in component satisfied\n        good = True\n        for u in comp:\n            for v,g,l in adj[u]:\n                if u < v:\n                    au = assigned.get(u,0); av = assigned.get(v,0)\n                    if au==0 or av==0 or math.gcd(au,av)!=g or (au//g)*(av//g)!=l//g:\n                        good = False; break\n            if not good: break\n        if good:\n            for u in comp:\n                res[u] = assigned[u]\n            found_solution = True\n            break\n    if not found_solution:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x if x>0 else 1) for x in res))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import deque\n\ninput_data = sys.stdin.read().strip().split()\nif not input_data:\n    sys.exit(0)\nit = iter(input_data)\nn = int(next(it)); m = int(next(it))\nedges = [[] for _ in range(n)]\ngiven = []\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    given.append((u, v, g, l))\n    edges[u].append((v, g, l))\n    edges[v].append((u, g, l))\n\n# Check consistency for each edge: l must be multiple of g\nfor (_, _, g, l) in given:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\nres = [0]*n\nvisited = [False]*n\n\nfor s in range(n):\n    if visited[s]:\n        continue\n    # collect component nodes\n    comp = []\n    dq = deque([s]); visited[s]=True\n    while dq:\n        u = dq.popleft(); comp.append(u)\n        for v, g, l in edges[u]:\n            if not visited[v]:\n                visited[v]=True\n                dq.append(v)\n    # For component, try to assign values\n    # Build constraints: for edge u-v, let guv, luv. We need a_u = guv * xu, a_v = guv * xv, with gcd(xu,xv)=1 and xu*xv = luv/guv = k\n    # We'll attempt backtracking starting from a chosen node with candidate values divisors of product constraints.\n    comp_set = set(comp)\n    # Build adjacency map for quick access\n    adj = {u: [] for u in comp}\n    for u in comp:\n        for v,g,l in edges[u]:\n            if v in comp_set:\n                adj[u].append((v,g,l))\n    assigned = {}\n    # find a starting node; if isolated, assign 1\n    start = comp[0]\n    # Generate candidates for start: from its edges, constraints on a_start must be multiple of gcd and divide lcm\n    # We'll attempt to derive possible a_start by considering each incident edge: a_start must be one of divisors of l that are multiples of g\n    def divisors_of_edge(u, g, l):\n        k = l // g\n        divs = []\n        # a_u = g * d where d divides k or any divisor? Actually if a_u = g * x, a_v = g * y, with gcd(x,y)=1 and x*y=k. So x must be a divisor of k.\n        for d in range(1, int(math.sqrt(k))+1):\n            if k % d == 0:\n                divs.append(g * d)\n                if d*d != k:\n                    divs.append(g * (k//d))\n        return divs\n    # For isolated node\n    if len(comp) == 1 and len(adj[start]) == 0:\n        res[start] = 1\n        continue\n    # Candidate start values: intersection over edges of possible values, but to be safe gather from first edge\n    cand = set()\n    first_edges = adj[start]\n    if not first_edges:\n        cand = {1}\n    else:\n        # take divisors from first edge\n        v,g,l = first_edges[0]\n        cand = set(divisors_of_edge(start,g,l))\n    # Also include 1.. maybe large but okay\n    found_solution = False\n    for a0 in sorted(cand):\n        assigned.clear()\n        ok = True\n        assigned[start] = a0\n        q = deque([start])\n        while q and ok:\n            u = q.popleft()\n            au = assigned[u]\n            for v,g,l in adj[u]:\n                if v in assigned:\n                    av = assigned[v]\n                    if math.gcd(au,av) != g or (au//g)*(av//g) != l//g:\n                        ok = False\n                        break\n                else:\n                    if au % g != 0:\n                        ok = False\n                        break\n                    ku = au//g\n                    k = l//g\n                    if k % ku != 0:\n                        ok = False\n                        break\n                    kv = k//ku\n                    if math.gcd(ku,kv) != 1:\n                        ok = False\n                        break\n                    av = g * kv\n                    assigned[v] = av\n                    q.append(v)\n        if not ok:\n            continue\n        # Verify all edges in component satisfied\n        good = True\n        for u in comp:\n            for v,g,l in adj[u]:\n                if u < v:\n                    au = assigned.get(u,0); av = assigned.get(v,0)\n                    if au==0 or av==0 or math.gcd(au,av)!=g or (au//g)*(av//g)!=l//g:\n                        good = False; break\n            if not good: break\n        if good:\n            for u in comp:\n                res[u] = assigned[u]\n            found_solution = True\n            break\n    if not found_solution:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x if x>0 else 1) for x in res))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 1152,
        "thoughts_token_count": 0
    }
}