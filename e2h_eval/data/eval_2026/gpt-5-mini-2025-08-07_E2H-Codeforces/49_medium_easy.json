{
    "start": 1758290730.1056778,
    "end": 1758290817.6864653,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:06 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Modeling Constraints in Graphs**\n\nI'm thinking about how to model constraints as a graph, where each edge gives us the ratio between variables ai and aj. The product of these variables relates to known values, which leads me to consider prime factorization. It's interesting that for each vertex, we could maintain unknown integer values. I remember a method using BFS to assign values based on edges, ensuring they adhere to constraints. These constraints suggest that each value must divide certain limits and be a multiple of given factors.",
    "response": "import sys\nimport threading\n\ndef main():\n    import sys\n    from collections import defaultdict, deque\n    import math\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxv = 10**6\n    us = []\n    vs = []\n    gs = []\n    ls = []\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n        us.append(u-1); vs.append(v-1); gs.append(g); ls.append(l))\n    # Precompute smallest prime factor\n    N = maxv\n    spf = list(range(N+1))\n    for i in range(2, int(N**0.5)+1):\n        if spf[i]==i:\n            step = i\n            start = i*i\n            for j in range(start, N+1, step):\n                if spf[j]==j:\n                    spf[j]=i\n    def factor(x):\n        res = {}\n        while x>1:\n            p = spf[x]\n            cnt = 0\n            while x%p==0:\n                x//=p\n                cnt+=1\n            res[p]=cnt\n        return res\n\n    # Check l % g and factor edges\n    prime_adj = defaultdict(lambda: defaultdict(list))  # prime -> {node: list of (neighbor, ag, bl)}\n    primes_nodes = defaultdict(set)\n    for idx in range(m):\n        u = us[idx]; v = vs[idx]; g = gs[idx]; l = ls[idx]\n        if l % g != 0:\n            print(\"NO\")\n            return\n        fg = factor(g)\n        fl = factor(l)\n        # union primes\n        for p in set(list(fg.keys()) + list(fl.keys())):\n            ag = fg.get(p,0)\n            bl = fl.get(p,0)\n            if bl < ag:\n                print(\"NO\")\n                return\n            if ag==0 and bl==0:\n                continue\n            prime_adj[p][u].append((v,ag,bl))\n            prime_adj[p][v].append((u,ag,bl))\n            primes_nodes[p].add(u); primes_nodes[p].add(v)\n\n    # For each prime, assign exponents\n    exp_at_prime = defaultdict(dict)  # p -> {v: exponent}\n    for p, adj in prime_adj.items():\n        nodes = list(primes_nodes[p])\n        assigned = {}\n        visited = set()\n        for node in nodes:\n            if node in visited:\n                continue\n            # collect component via BFS (undirected)\n            comp = []\n            dq = deque([node])\n            visited.add(node)\n            while dq:\n                x = dq.popleft()\n                comp.append(x)\n                for (y,ag,bl) in adj.get(x,[]):\n                    if y not in visited:\n                        visited.add(y)\n                        dq.append(y)\n            # For this component try possible start values\n            # collect candidate start values from incident edges of start node\n            start = comp[0]\n            cand = set()\n            for (nb,ag,bl) in adj.get(start,[]):\n                cand.add(ag); cand.add(bl)\n            if not cand:\n                cand.add(0)\n            success = False\n            for s in cand:\n                local_assign = {}\n                q = deque()\n                local_assign[start]=s\n                q.append(start)\n                ok = True\n                while q and ok:\n                    x = q.popleft()\n                    xv = local_assign[x]\n                    for (y,ag,bl) in adj.get(x,[]):\n                        if ag==bl:\n                            required = ag\n                            # both must be required\n                            if xv != required:\n                                ok = False\n                                break\n                            if y in local_assign:\n                                if local_assign[y] != required:\n                                    ok = False\n                                    break\n                            else:\n                                local_assign[y]=required\n                                q.append(y)\n                        else:\n                            # must be one of ag or bl\n                            if xv==ag:\n                                need = bl\n                            elif xv==bl:\n                                need = ag\n                            else:\n                                ok = False\n                                break\n                            if y in local_assign:\n                                if local_assign[y] != need:\n                                    ok = False\n                                    break\n                            else:\n                                local_assign[y]=need\n                                q.append(y)\n                if ok:\n                    # apply local_assign to assigned\n                    for k,vv in local_assign.items():\n                        assigned[k]=vv\n                    success = True\n                    break\n            if not success:\n                print(\"NO\")\n                return\n        # store assigned into exp_at_prime\n        for v,e in assigned.items():\n            exp_at_prime[p][v]=e\n\n    # assemble final values\n    A = [1]*n\n    for p, mp in exp_at_prime.items():\n        for v,e in mp.items():\n            if e>0:\n                A[v] *= pow(p, e)\n    # verify edges\n    for idx in range(m):\n        u = us[idx]; v = vs[idx]; g = gs[idx]; l = ls[idx]\n        au = A[u]; av = A[v]\n        gg = math.gcd(au, av)\n        ll = au//gg*av\n        if gg != g or ll != l:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\n\ndef main():\n    import sys\n    from collections import defaultdict, deque\n    import math\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxv = 10**6\n    us = []\n    vs = []\n    gs = []\n    ls = []\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n        us.append(u-1); vs.append(v-1); gs.append(g); ls.append(l))\n    # Precompute smallest prime factor\n    N = maxv\n    spf = list(range(N+1))\n    for i in range(2, int(N**0.5)+1):\n        if spf[i]==i:\n            step = i\n            start = i*i\n            for j in range(start, N+1, step):\n                if spf[j]==j:\n                    spf[j]=i\n    def factor(x):\n        res = {}\n        while x>1:\n            p = spf[x]\n            cnt = 0\n            while x%p==0:\n                x//=p\n                cnt+=1\n            res[p]=cnt\n        return res\n\n    # Check l % g and factor edges\n    prime_adj = defaultdict(lambda: defaultdict(list))  # prime -> {node: list of (neighbor, ag, bl)}\n    primes_nodes = defaultdict(set)\n    for idx in range(m):\n        u = us[idx]; v = vs[idx]; g = gs[idx]; l = ls[idx]\n        if l % g != 0:\n            print(\"NO\")\n            return\n        fg = factor(g)\n        fl = factor(l)\n        # union primes\n        for p in set(list(fg.keys()) + list(fl.keys())):\n            ag = fg.get(p,0)\n            bl = fl.get(p,0)\n            if bl < ag:\n                print(\"NO\")\n                return\n            if ag==0 and bl==0:\n                continue\n            prime_adj[p][u].append((v,ag,bl))\n            prime_adj[p][v].append((u,ag,bl))\n            primes_nodes[p].add(u); primes_nodes[p].add(v)\n\n    # For each prime, assign exponents\n    exp_at_prime = defaultdict(dict)  # p -> {v: exponent}\n    for p, adj in prime_adj.items():\n        nodes = list(primes_nodes[p])\n        assigned = {}\n        visited = set()\n        for node in nodes:\n            if node in visited:\n                continue\n            # collect component via BFS (undirected)\n            comp = []\n            dq = deque([node])\n            visited.add(node)\n            while dq:\n                x = dq.popleft()\n                comp.append(x)\n                for (y,ag,bl) in adj.get(x,[]):\n                    if y not in visited:\n                        visited.add(y)\n                        dq.append(y)\n            # For this component try possible start values\n            # collect candidate start values from incident edges of start node\n            start = comp[0]\n            cand = set()\n            for (nb,ag,bl) in adj.get(start,[]):\n                cand.add(ag); cand.add(bl)\n            if not cand:\n                cand.add(0)\n            success = False\n            for s in cand:\n                local_assign = {}\n                q = deque()\n                local_assign[start]=s\n                q.append(start)\n                ok = True\n                while q and ok:\n                    x = q.popleft()\n                    xv = local_assign[x]\n                    for (y,ag,bl) in adj.get(x,[]):\n                        if ag==bl:\n                            required = ag\n                            # both must be required\n                            if xv != required:\n                                ok = False\n                                break\n                            if y in local_assign:\n                                if local_assign[y] != required:\n                                    ok = False\n                                    break\n                            else:\n                                local_assign[y]=required\n                                q.append(y)\n                        else:\n                            # must be one of ag or bl\n                            if xv==ag:\n                                need = bl\n                            elif xv==bl:\n                                need = ag\n                            else:\n                                ok = False\n                                break\n                            if y in local_assign:\n                                if local_assign[y] != need:\n                                    ok = False\n                                    break\n                            else:\n                                local_assign[y]=need\n                                q.append(y)\n                if ok:\n                    # apply local_assign to assigned\n                    for k,vv in local_assign.items():\n                        assigned[k]=vv\n                    success = True\n                    break\n            if not success:\n                print(\"NO\")\n                return\n        # store assigned into exp_at_prime\n        for v,e in assigned.items():\n            exp_at_prime[p][v]=e\n\n    # assemble final values\n    A = [1]*n\n    for p, mp in exp_at_prime.items():\n        for v,e in mp.items():\n            if e>0:\n                A[v] *= pow(p, e)\n    # verify edges\n    for idx in range(m):\n        u = us[idx]; v = vs[idx]; g = gs[idx]; l = ls[idx]\n        au = A[u]; av = A[v]\n        gg = math.gcd(au, av)\n        ll = au//gg*av\n        if gg != g or ll != l:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 4395,
        "thoughts_token_count": 3200
    }
}