{
    "start": 1758094625.4637387,
    "end": 1758094677.1942012,
    "start-formatted": "2025-09-17 16:37 KST",
    "end-formatted": "2025-09-17 16:37 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Analyzing a souvenir selling problem**\n\nI'm tackling a problem related to \"Selling Souvenirs,\" where I need to manage weights and costs effectively. My approach involves grouping weights into arrays, sorting them, and using prefix sums. I plan to iterate through the number of items of heaviest weight and calculate remaining capacity. For the lighter weights, I’ll determine how to maximize value while staying within the limits. The complexity seems manageable, but I need to account for edge cases, especially with large integers. I wonder if considering pairs of weights would simplify things.",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\nwhile True:\n    try:\n        n = next(it)\n    except StopIteration:\n        break\n    m = next(it)\n    ones = []\n    twos = []\n    threes = []\n    for _ in range(n):\n        w = next(it); c = next(it)\n        if w == 1:\n            ones.append(c)\n        elif w == 2:\n            twos.append(c)\n        else:\n            threes.append(c)\n    ones.sort(reverse=True)\n    twos.sort(reverse=True)\n    threes.sort(reverse=True)\n    # prefix sums\n    pref3 = [0]\n    for v in threes:\n        pref3.append(pref3[-1] + v)\n    pref_ones = [0]\n    for v in ones:\n        pref_ones.append(pref_ones[-1] + v)\n    # pair values from ones\n    pair_vals = []\n    i = 0\n    while i + 1 < len(ones):\n        pair_vals.append(ones[i] + ones[i+1])\n        i += 2\n    # build blocks merging twos and pair_vals\n    i2 = 0; ip = 0\n    blocks = []\n    block_is_pair = []\n    while i2 < len(twos) and ip < len(pair_vals):\n        if twos[i2] >= pair_vals[ip]:\n            blocks.append(twos[i2]); block_is_pair.append(0); i2 += 1\n        else:\n            blocks.append(pair_vals[ip]); block_is_pair.append(1); ip += 1\n    while i2 < len(twos):\n        blocks.append(twos[i2]); block_is_pair.append(0); i2 += 1\n    while ip < len(pair_vals):\n        blocks.append(pair_vals[ip]); block_is_pair.append(1); ip += 1\n    # prefix sums for blocks and count of pair blocks used\n    pref_blocks = [0]\n    cnt_pair_used = [0]\n    for idx, val in enumerate(blocks):\n        pref_blocks.append(pref_blocks[-1] + val)\n        cnt_pair_used.append(cnt_pair_used[-1] + (1 if block_is_pair[idx] else 0))\n    # function to get best value for capacity r using only ones and twos\n    def best12(r):\n        if r <= 0:\n            return 0\n        max_blocks = len(blocks)\n        k = min(r // 2, max_blocks)\n        val = pref_blocks[k]\n        rem = r - 2 * k\n        if rem == 1:\n            used_pairs = cnt_pair_used[k]\n            idx_one = 2 * used_pairs\n            # if there is an unused single one, take it\n            if idx_one < len(ones):\n                val += ones[idx_one]\n        else:\n            # rem could be >1 if we exhausted blocks and r//2 > max_blocks\n            if rem > 0:\n                # remaining capacity can be filled with singles\n                take = min(len(ones) - 2 * cnt_pair_used[k], rem)\n                if take > 0:\n                    # singles available start at index 2*used_pairs\n                    start = 2 * cnt_pair_used[k]\n                    # sum ones[start : start+take]\n                    end = start + take\n                    if end > len(ones):\n                        end = len(ones)\n                    val += pref_ones[end] - pref_ones[start]\n        return val\n    # iterate over number of threes taken\n    ans = 0\n    max_take3 = min(len(threes), m // 3)\n    for k3 in range(0, max_take3 + 1):\n        w3 = 3 * k3\n        val3 = pref3[k3]\n        rem = m - w3\n        val12 = best12(rem)\n        total = val3 + val12\n        if total > ans:\n            ans = total\n    out_lines.append(str(ans))\nprint(\"\\n\".join(out_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\nwhile True:\n    try:\n        n = next(it)\n    except StopIteration:\n        break\n    m = next(it)\n    ones = []\n    twos = []\n    threes = []\n    for _ in range(n):\n        w = next(it); c = next(it)\n        if w == 1:\n            ones.append(c)\n        elif w == 2:\n            twos.append(c)\n        else:\n            threes.append(c)\n    ones.sort(reverse=True)\n    twos.sort(reverse=True)\n    threes.sort(reverse=True)\n    # prefix sums\n    pref3 = [0]\n    for v in threes:\n        pref3.append(pref3[-1] + v)\n    pref_ones = [0]\n    for v in ones:\n        pref_ones.append(pref_ones[-1] + v)\n    # pair values from ones\n    pair_vals = []\n    i = 0\n    while i + 1 < len(ones):\n        pair_vals.append(ones[i] + ones[i+1])\n        i += 2\n    # build blocks merging twos and pair_vals\n    i2 = 0; ip = 0\n    blocks = []\n    block_is_pair = []\n    while i2 < len(twos) and ip < len(pair_vals):\n        if twos[i2] >= pair_vals[ip]:\n            blocks.append(twos[i2]); block_is_pair.append(0); i2 += 1\n        else:\n            blocks.append(pair_vals[ip]); block_is_pair.append(1); ip += 1\n    while i2 < len(twos):\n        blocks.append(twos[i2]); block_is_pair.append(0); i2 += 1\n    while ip < len(pair_vals):\n        blocks.append(pair_vals[ip]); block_is_pair.append(1); ip += 1\n    # prefix sums for blocks and count of pair blocks used\n    pref_blocks = [0]\n    cnt_pair_used = [0]\n    for idx, val in enumerate(blocks):\n        pref_blocks.append(pref_blocks[-1] + val)\n        cnt_pair_used.append(cnt_pair_used[-1] + (1 if block_is_pair[idx] else 0))\n    # function to get best value for capacity r using only ones and twos\n    def best12(r):\n        if r <= 0:\n            return 0\n        max_blocks = len(blocks)\n        k = min(r // 2, max_blocks)\n        val = pref_blocks[k]\n        rem = r - 2 * k\n        if rem == 1:\n            used_pairs = cnt_pair_used[k]\n            idx_one = 2 * used_pairs\n            # if there is an unused single one, take it\n            if idx_one < len(ones):\n                val += ones[idx_one]\n        else:\n            # rem could be >1 if we exhausted blocks and r//2 > max_blocks\n            if rem > 0:\n                # remaining capacity can be filled with singles\n                take = min(len(ones) - 2 * cnt_pair_used[k], rem)\n                if take > 0:\n                    # singles available start at index 2*used_pairs\n                    start = 2 * cnt_pair_used[k]\n                    # sum ones[start : start+take]\n                    end = start + take\n                    if end > len(ones):\n                        end = len(ones)\n                    val += pref_ones[end] - pref_ones[start]\n        return val\n    # iterate over number of threes taken\n    ans = 0\n    max_take3 = min(len(threes), m // 3)\n    for k3 in range(0, max_take3 + 1):\n        w3 = 3 * k3\n        val3 = pref3[k3]\n        rem = m - w3\n        val12 = best12(rem)\n        total = val3 + val12\n        if total > ans:\n            ans = total\n    out_lines.append(str(ans))\nprint(\"\\n\".join(out_lines))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 2932,
        "thoughts_token_count": 2048
    }
}