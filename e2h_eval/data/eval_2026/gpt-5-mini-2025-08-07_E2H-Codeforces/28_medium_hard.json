{
    "start": 1758290721.9038048,
    "end": 1758290846.6256757,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Analyzing sequences with zeros and ones**\n\nI need to count sequences with n zeros and m ones that equal a target g, so I'm digging into the formula. With the NOR truth function, it seems that NOR(a,b) equals 1 only when both are 0. For k=3, I find that the result is 1 when c1 is 0 and the NOR of c2 and c3 is 0. This shows I need c1 to be 0 and at least one of c2 or c3 to be 1. The general pattern here is complicated, involving some combinatorial aspects reminiscent of Fibonacci counts!",
    "response": "```unknown\nimport sys\n\nMOD = 1000000007\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nvals = list(map(int, data))\n# Expect triples (n,m,g). If only three numbers present, one test; else multiple of 3.\nif len(vals) % 3 != 0:\n    # If input provided as lines like \"1 1 0\\n2 2 0\\n...\" handle line-wise\n    lines = sys.stdin.read().strip().splitlines()\n    vals = []\n    for line in lines:\n        parts = line.split()\n        if len(parts) >= 3:\n            vals.extend(map(int, parts[:3]))\n    if len(vals) % 3 != 0:\n        # fallback: treat first three numbers\n        vals = vals[:3]\ntests = []\nfor i in range(0, len(vals), 3):\n    tests.append((vals[i], vals[i+1], vals[i+2]))\n\nmaxN = 0\nfor n, m, g in tests:\n    if n + m > maxN:\n        maxN = n + m\n\n# Precompute factorials up to maxN\nfact = [1] * (maxN + 1)\nfor i in range(1, maxN + 1):\n    fact[i] = fact[i-1] * i % MOD\ninvfact = [1] * (maxN + 1)\ninvfact[maxN] = pow(fact[maxN], MOD-2, MOD)\nfor i in range(maxN, 0, -1):\n    invfact[i-1] = invfact[i] * i % MOD\n\ndef comb(a, b):\n    if b < 0 or b > a or a < 0:\n        return 0\n    return fact[a] * invfact[b] % MOD * invfact[a-b] % MOD\n\nout = []\nfor n, m, g in tests:\n    # handle trivial cases\n    if n == 0:\n        # only ones: length m\n        if m == 1:\n            val1 = 1  # result 1\n            val0 = 0\n        else:\n            val1 = 0\n            val0 = 1\n        ans = val1 if g == 1 else val0\n        out.append(str(ans % MOD))\n        continue\n    if m == 0:\n        # only zeros: result 0 if n odd else 1\n        if n % 2 == 1:\n            val0 = 1\n            val1 = 0\n        else:\n            val0 = 0\n            val1 = 1\n        ans = val1 if g == 1 else val0\n        out.append(str(ans % MOD))\n        continue\n\n    # compute A(n,m): number of strings with n zeros and m ones whose fold == 0\n    # Use recurrence unrolled:\n    total = 0\n    t = n // 2\n    for k in range(t):\n        i_k = n - 2*k\n        a = i_k + m - 1\n        b = i_k\n        total = (total + comb(a, b)) % MOD\n    # add base\n    if n % 2 == 0:\n        # add A(0,m)\n        if m >= 2:\n            total = (total + 1) % MOD\n        else:\n            # m==1 -> A(0,1)=0\n            pass\n    else:\n        # add A(1,m) = m + (1 if m==1 else 0)\n        add = m\n        if m == 1:\n            add += 1\n        total = (total + add) % MOD\n\n    A_nm = total\n    if g == 0:\n        ans = A_nm % MOD\n    else:\n        # B(n,m) = A(n-1,m) if n>=1\n        n1 = n-1\n        if n1 == 0:\n            # B(0,m)\n            ans = 1 if m == 1 else 0\n        else:\n            # compute A(n1,m)\n            total2 = 0\n            t2 = n1 // 2\n            for k in range(t2):\n                i_k = n1 - 2*k\n                a = i_k + m - 1\n                b = i_k\n                total2 = (total2 + comb(a, b)) % MOD\n            if n1 % 2 == 0:\n                if m >= 2:\n                    total2 = (total2 + 1) % MOD\n            else:\n                add = m\n                if m == 1:\n                    add += 1\n                total2 = (total2 + add) % MOD\n            ans = total2 % MOD\n    out.append(str(ans % MOD))\n\nsys.stdout.write(\"\\n\".join(out))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\nimport sys\n\nMOD = 1000000007\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nvals = list(map(int, data))\n# Expect triples (n,m,g). If only three numbers present, one test; else multiple of 3.\nif len(vals) % 3 != 0:\n    # If input provided as lines like \"1 1 0\\n2 2 0\\n...\" handle line-wise\n    lines = sys.stdin.read().strip().splitlines()\n    vals = []\n    for line in lines:\n        parts = line.split()\n        if len(parts) >= 3:\n            vals.extend(map(int, parts[:3]))\n    if len(vals) % 3 != 0:\n        # fallback: treat first three numbers\n        vals = vals[:3]\ntests = []\nfor i in range(0, len(vals), 3):\n    tests.append((vals[i], vals[i+1], vals[i+2]))\n\nmaxN = 0\nfor n, m, g in tests:\n    if n + m > maxN:\n        maxN = n + m\n\n# Precompute factorials up to maxN\nfact = [1] * (maxN + 1)\nfor i in range(1, maxN + 1):\n    fact[i] = fact[i-1] * i % MOD\ninvfact = [1] * (maxN + 1)\ninvfact[maxN] = pow(fact[maxN], MOD-2, MOD)\nfor i in range(maxN, 0, -1):\n    invfact[i-1] = invfact[i] * i % MOD\n\ndef comb(a, b):\n    if b < 0 or b > a or a < 0:\n        return 0\n    return fact[a] * invfact[b] % MOD * invfact[a-b] % MOD\n\nout = []\nfor n, m, g in tests:\n    # handle trivial cases\n    if n == 0:\n        # only ones: length m\n        if m == 1:\n            val1 = 1  # result 1\n            val0 = 0\n        else:\n            val1 = 0\n            val0 = 1\n        ans = val1 if g == 1 else val0\n        out.append(str(ans % MOD))\n        continue\n    if m == 0:\n        # only zeros: result 0 if n odd else 1\n        if n % 2 == 1:\n            val0 = 1\n            val1 = 0\n        else:\n            val0 = 0\n            val1 = 1\n        ans = val1 if g == 1 else val0\n        out.append(str(ans % MOD))\n        continue\n\n    # compute A(n,m): number of strings with n zeros and m ones whose fold == 0\n    # Use recurrence unrolled:\n    total = 0\n    t = n // 2\n    for k in range(t):\n        i_k = n - 2*k\n        a = i_k + m - 1\n        b = i_k\n        total = (total + comb(a, b)) % MOD\n    # add base\n    if n % 2 == 0:\n        # add A(0,m)\n        if m >= 2:\n            total = (total + 1) % MOD\n        else:\n            # m==1 -> A(0,1)=0\n            pass\n    else:\n        # add A(1,m) = m + (1 if m==1 else 0)\n        add = m\n        if m == 1:\n            add += 1\n        total = (total + add) % MOD\n\n    A_nm = total\n    if g == 0:\n        ans = A_nm % MOD\n    else:\n        # B(n,m) = A(n-1,m) if n>=1\n        n1 = n-1\n        if n1 == 0:\n            # B(0,m)\n            ans = 1 if m == 1 else 0\n        else:\n            # compute A(n1,m)\n            total2 = 0\n            t2 = n1 // 2\n            for k in range(t2):\n                i_k = n1 - 2*k\n                a = i_k + m - 1\n                b = i_k\n                total2 = (total2 + comb(a, b)) % MOD\n            if n1 % 2 == 0:\n                if m >= 2:\n                    total2 = (total2 + 1) % MOD\n            else:\n                add = m\n                if m == 1:\n                    add += 1\n                total2 = (total2 + add) % MOD\n            ans = total2 % MOD\n    out.append(str(ans % MOD))\n\nsys.stdout.write(\"\\n\".join(out))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 487,
        "completion_token_count": 7455,
        "thoughts_token_count": 6400
    }
}