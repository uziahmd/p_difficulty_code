{
    "start": 1758290718.1587267,
    "end": 1758290947.3305802,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:09 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Analyzing CF Problem**\n\nI need to recall the problem \"Vasily the Bear and Beautiful Strings.\" The solution involves transform operations that reduce the string length by replacing the last two characters. If those characters are \"00,\" they become '1'; otherwise, they turn into '0'. This leads to determining the final character after multiple modifications, possibly until the string length is 1. We can apply these operations any number of times, but modifications can only happen when the string length is at least 2.",
    "response": "```python\nimport sys\n\nMOD = 1000000007\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nvals = list(map(int, data))\ncases = []\nif len(vals) % 3 != 0:\n    # assume first three are a single test; otherwise invalid input\n    vals = vals[:3]\nfor i in range(0, len(vals), 3):\n    n, m, g = vals[i], vals[i+1], vals[i+2]\n    cases.append((n, m, g))\n\nmax_sum = 0\nfor n, m, _ in cases:\n    s = n + m\n    if s > max_sum:\n        max_sum = s\n\nmaxN = max_sum + 5\nfact = [1] * (maxN)\ninvfact = [1] * (maxN)\nfor i in range(1, maxN):\n    fact[i] = fact[i-1] * i % MOD\ninvfact[-1] = pow(fact[-1], MOD-2, MOD)\nfor i in range(maxN-2, -1, -1):\n    invfact[i] = invfact[i+1] * (i+1) % MOD\n\ndef comb(n, k):\n    if k < 0 or k > n or n < 0:\n        return 0\n    return fact[n] * invfact[k] % MOD * invfact[n-k] % MOD\n\nout = []\nfor n, m, g in cases:\n    total = n + m\n    if total == 1:\n        # single char: if n==1 -> char 0, else char 1\n        char = 0 if n == 1 else 1\n        out.append(\"1\" if char == g else \"0\")\n        continue\n    if m == 0:\n        # only zeros\n        # base for k=1:\n        a0 = 1  # A0[1]\n        a1 = 0  # A1[1]\n        if n == 1:\n            res = a0 if g == 0 else a1\n            out.append(str(res))\n            continue\n        for k in range(2, n+1):\n            na1 = a0\n            na0 = a1\n            a0, a1 = na0 % MOD, na1 % MOD\n        res = a0 if g == 0 else a1\n        out.append(str(res % MOD))\n        continue\n    # m >= 1\n    if m == 1:\n        a1_prev = 1\n        a0_prev = 0\n    else:\n        a1_prev = 0\n        a0_prev = 1\n    if n == 0:\n        res = a0_prev if g == 0 else a1_prev\n        out.append(str(res % MOD))\n        continue\n    for k in range(1, n+1):\n        a1_k = a0_prev\n        a0_k = (a1_prev + comb(k + m - 1, k)) % MOD\n        a0_prev, a1_prev = a0_k, a1_k\n    res = a0_prev if g == 0 else a1_prev\n    out.append(str(res % MOD))\n\nsys.stdout.write(\"\\n\".join(out))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\nMOD = 1000000007\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nvals = list(map(int, data))\ncases = []\nif len(vals) % 3 != 0:\n    # assume first three are a single test; otherwise invalid input\n    vals = vals[:3]\nfor i in range(0, len(vals), 3):\n    n, m, g = vals[i], vals[i+1], vals[i+2]\n    cases.append((n, m, g))\n\nmax_sum = 0\nfor n, m, _ in cases:\n    s = n + m\n    if s > max_sum:\n        max_sum = s\n\nmaxN = max_sum + 5\nfact = [1] * (maxN)\ninvfact = [1] * (maxN)\nfor i in range(1, maxN):\n    fact[i] = fact[i-1] * i % MOD\ninvfact[-1] = pow(fact[-1], MOD-2, MOD)\nfor i in range(maxN-2, -1, -1):\n    invfact[i] = invfact[i+1] * (i+1) % MOD\n\ndef comb(n, k):\n    if k < 0 or k > n or n < 0:\n        return 0\n    return fact[n] * invfact[k] % MOD * invfact[n-k] % MOD\n\nout = []\nfor n, m, g in cases:\n    total = n + m\n    if total == 1:\n        # single char: if n==1 -> char 0, else char 1\n        char = 0 if n == 1 else 1\n        out.append(\"1\" if char == g else \"0\")\n        continue\n    if m == 0:\n        # only zeros\n        # base for k=1:\n        a0 = 1  # A0[1]\n        a1 = 0  # A1[1]\n        if n == 1:\n            res = a0 if g == 0 else a1\n            out.append(str(res))\n            continue\n        for k in range(2, n+1):\n            na1 = a0\n            na0 = a1\n            a0, a1 = na0 % MOD, na1 % MOD\n        res = a0 if g == 0 else a1\n        out.append(str(res % MOD))\n        continue\n    # m >= 1\n    if m == 1:\n        a1_prev = 1\n        a0_prev = 0\n    else:\n        a1_prev = 0\n        a0_prev = 1\n    if n == 0:\n        res = a0_prev if g == 0 else a1_prev\n        out.append(str(res % MOD))\n        continue\n    for k in range(1, n+1):\n        a1_k = a0_prev\n        a0_k = (a1_prev + comb(k + m - 1, k)) % MOD\n        a0_prev, a1_prev = a0_k, a1_k\n    res = a0_prev if g == 0 else a1_prev\n    out.append(str(res % MOD))\n\nsys.stdout.write(\"\\n\".join(out))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 487,
        "completion_token_count": 9740,
        "thoughts_token_count": 9024
    }
}