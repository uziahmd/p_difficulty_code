{
    "start": 1758290730.995201,
    "end": 1758290877.2646348,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Exploring connected components**\n\nI'm considering how to approach connected components by choosing a starting node value and deducing others through multiplication by the fraction l/g. Specifically, I'm examining the relationship where a_u * a_v equals g * l. \n\nIt seems tricky to ensure that the gcd condition holds for both a_u and a_v. I think I need to explore prime factorization for each prime p to determine the exponents per node, which could provide insights into the gcd and lcm relationships for edges. This seems like a solid approach!",
    "response": "import sys\nfrom collections import defaultdict, deque\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nmaxv = 1\nfor _ in range(m):\n    u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n    edges.append((u, v, g, l))\n    if g > maxv: maxv = g\n    if l > maxv: maxv = l\n\nfor (_, _, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Sieve SPF\nMAX = maxv\nspf = list(range(MAX+1))\nfor i in range(2, int(MAX**0.5)+1):\n    if spf[i] == i:\n        for j in range(i*i, MAX+1, i):\n            if spf[j] == j:\n                spf[j] = i\n\ndef factor(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        c = 0\n        while x % p == 0:\n            x //= p\n            c += 1\n        res[p] = c\n    return res\n\n# Build prime constraints\nprimes_map = defaultdict(list)  # p -> list of (u,v,eg,el)\nfor idx, (u,v,g,l) in enumerate(edges):\n    fg = factor(g)\n    fl = factor(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p, 0)\n        el = fl.get(p, 0)\n        if eg > el:\n            print(\"NO\")\n            sys.exit(0)\n        primes_map[p].append((u, v, eg, el))\n\nans = [1] * (n+1)\n\nfor p, plist in primes_map.items():\n    # prepare per-edge data and incident lists\n    E = plist\n    en = len(E)\n    incident = [[] for _ in range(n+1)]\n    for i, (u,v,eg,el) in enumerate(E):\n        incident[u].append(i)\n        incident[v].append(i)\n    allowed = [None] * (n+1)\n    # initial intersection of allowed sets\n    for node in range(1, n+1):\n        if not incident[node]:\n            allowed[node] = {0}\n        else:\n            cur = None\n            for i in incident[node]:\n                u,v,eg,el = E[i]\n                if eg == el:\n                    S = {eg}\n                else:\n                    S = {eg, el}\n                if cur is None:\n                    cur = set(S)\n                else:\n                    cur &= S\n            if cur is None:\n                cur = {0}\n            allowed[node] = cur\n    # check empties\n    for node in range(1, n+1):\n        if allowed[node] is None or len(allowed[node]) == 0:\n            print(\"NO\")\n            sys.exit(0)\n    # propagation\n    q = deque()\n    assigned = [None] * (n+1)\n    for node in range(1, n+1):\n        if len(allowed[node]) == 1:\n            val = next(iter(allowed[node]))\n            assigned[node] = val\n            q.append(node)\n    while q:\n        node = q.popleft()\n        val = assigned[node]\n        for i in incident[node]:\n            u,v,eg,el = E[i]\n            neigh = v if node == u else u\n            if eg == el:\n                required = eg\n            else:\n                if val == eg:\n                    required = el\n                elif val == el:\n                    required = eg\n                else:\n                    print(\"NO\"); sys.exit(0)\n            # intersect neighbor allowed with {required}\n            if required not in allowed[neigh]:\n                print(\"NO\"); sys.exit(0)\n            if assigned[neigh] is None and len(allowed[neigh]) > 1:\n                allowed[neigh] = {required}\n                assigned[neigh] = required\n                q.append(neigh)\n            else:\n                # if already assigned, check consistency\n                if assigned[neigh] is not None and assigned[neigh] != required:\n                    print(\"NO\"); sys.exit(0)\n                # else no action\n    # remaining nodes with allowed size 2: build graph and 2-color\n    color = [None] * (n+1)\n    for node in range(1, n+1):\n        if assigned[node] is not None:\n            color[node] = 0  # color doesn't matter\n    for node in range(1, n+1):\n        if assigned[node] is None and len(allowed[node]) == 2 and color[node] is None:\n            # BFS component\n            # get pair list\n            pair = list(allowed[node])\n            a0, a1 = pair[0], pair[1]\n            dq = deque([node])\n            color[node] = 0\n            assigned[node] = a0\n            while dq:\n                x = dq.popleft()\n                for i in incident[x]:\n                    u,v,eg,el = E[i]\n                    y = v if x == u else u\n                    # edge pair S\n                    if eg == el:\n                        S = {eg}\n                    else:\n                        S = {eg, el}\n                    # for remaining nodes, allowed[y] must be subset of S\n                    if len(allowed[y]) == 2:\n                        # must be same pair as allowed[x]\n                        if allowed[y] != allowed[x]:\n                            print(\"NO\"); sys.exit(0)\n                        # require colors differ\n                        if color[y] is None:\n                            color[y] = 1 - color[x]\n                            assigned[y] = list(allowed[y])[color[y]]\n                            dq.append(y)\n                        else:\n                            if color[y] == color[x]:\n                                print(\"NO\"); sys.exit(0)\n                                sys.exit(0)\n                    else:\n                        # neighbor has singleton allowed, ensure consistency with x\n                        # If neighbor assigned already, check edge constraint\n                        if assigned[y] is None:\n                            # should not happen\n                            pass\n                        else:\n                            # check edge constraint satisfied\n                            if eg == el:\n                                req = eg\n                            else:\n                                # x's value determines y's required\n                                if assigned[x] == eg:\n                                    req = el\n                                elif assigned[x] == el:\n                                    req = eg\n                                else:\n                                    print(\"NO\"); sys.exit(0)\n                            if assigned[y] != req:\n                                print(\"NO\"); sys.exit(0)\n                                sys.exit(0)\n    # set final exponents into ans\n    for node in range(1, n+1):\n        exp = assigned[node]\n        if exp is None:\n            exp = 0\n        # multiply ans[node] by p**exp\n        if exp:\n            ans[node] *= pow(p, exp)\n\n# Final verification\nimport math\nfor (u,v,g,l) in edges:\n    guv = math.gcd(ans[u], ans[v])\n    if guv != g:\n        print(\"NO\")\n        sys.exit(0)\n    luv = ans[u] // guv * ans[v]\n    # compute lcm carefully to avoid overflow: but Python big ints ok\n    lcm_uv = (ans[u] * ans[v]) // guv\n    if lcm_uv != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(ans[i]) for i in range(1, n+1)))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nmaxv = 1\nfor _ in range(m):\n    u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n    edges.append((u, v, g, l))\n    if g > maxv: maxv = g\n    if l > maxv: maxv = l\n\nfor (_, _, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Sieve SPF\nMAX = maxv\nspf = list(range(MAX+1))\nfor i in range(2, int(MAX**0.5)+1):\n    if spf[i] == i:\n        for j in range(i*i, MAX+1, i):\n            if spf[j] == j:\n                spf[j] = i\n\ndef factor(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        c = 0\n        while x % p == 0:\n            x //= p\n            c += 1\n        res[p] = c\n    return res\n\n# Build prime constraints\nprimes_map = defaultdict(list)  # p -> list of (u,v,eg,el)\nfor idx, (u,v,g,l) in enumerate(edges):\n    fg = factor(g)\n    fl = factor(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p, 0)\n        el = fl.get(p, 0)\n        if eg > el:\n            print(\"NO\")\n            sys.exit(0)\n        primes_map[p].append((u, v, eg, el))\n\nans = [1] * (n+1)\n\nfor p, plist in primes_map.items():\n    # prepare per-edge data and incident lists\n    E = plist\n    en = len(E)\n    incident = [[] for _ in range(n+1)]\n    for i, (u,v,eg,el) in enumerate(E):\n        incident[u].append(i)\n        incident[v].append(i)\n    allowed = [None] * (n+1)\n    # initial intersection of allowed sets\n    for node in range(1, n+1):\n        if not incident[node]:\n            allowed[node] = {0}\n        else:\n            cur = None\n            for i in incident[node]:\n                u,v,eg,el = E[i]\n                if eg == el:\n                    S = {eg}\n                else:\n                    S = {eg, el}\n                if cur is None:\n                    cur = set(S)\n                else:\n                    cur &= S\n            if cur is None:\n                cur = {0}\n            allowed[node] = cur\n    # check empties\n    for node in range(1, n+1):\n        if allowed[node] is None or len(allowed[node]) == 0:\n            print(\"NO\")\n            sys.exit(0)\n    # propagation\n    q = deque()\n    assigned = [None] * (n+1)\n    for node in range(1, n+1):\n        if len(allowed[node]) == 1:\n            val = next(iter(allowed[node]))\n            assigned[node] = val\n            q.append(node)\n    while q:\n        node = q.popleft()\n        val = assigned[node]\n        for i in incident[node]:\n            u,v,eg,el = E[i]\n            neigh = v if node == u else u\n            if eg == el:\n                required = eg\n            else:\n                if val == eg:\n                    required = el\n                elif val == el:\n                    required = eg\n                else:\n                    print(\"NO\"); sys.exit(0)\n            # intersect neighbor allowed with {required}\n            if required not in allowed[neigh]:\n                print(\"NO\"); sys.exit(0)\n            if assigned[neigh] is None and len(allowed[neigh]) > 1:\n                allowed[neigh] = {required}\n                assigned[neigh] = required\n                q.append(neigh)\n            else:\n                # if already assigned, check consistency\n                if assigned[neigh] is not None and assigned[neigh] != required:\n                    print(\"NO\"); sys.exit(0)\n                # else no action\n    # remaining nodes with allowed size 2: build graph and 2-color\n    color = [None] * (n+1)\n    for node in range(1, n+1):\n        if assigned[node] is not None:\n            color[node] = 0  # color doesn't matter\n    for node in range(1, n+1):\n        if assigned[node] is None and len(allowed[node]) == 2 and color[node] is None:\n            # BFS component\n            # get pair list\n            pair = list(allowed[node])\n            a0, a1 = pair[0], pair[1]\n            dq = deque([node])\n            color[node] = 0\n            assigned[node] = a0\n            while dq:\n                x = dq.popleft()\n                for i in incident[x]:\n                    u,v,eg,el = E[i]\n                    y = v if x == u else u\n                    # edge pair S\n                    if eg == el:\n                        S = {eg}\n                    else:\n                        S = {eg, el}\n                    # for remaining nodes, allowed[y] must be subset of S\n                    if len(allowed[y]) == 2:\n                        # must be same pair as allowed[x]\n                        if allowed[y] != allowed[x]:\n                            print(\"NO\"); sys.exit(0)\n                        # require colors differ\n                        if color[y] is None:\n                            color[y] = 1 - color[x]\n                            assigned[y] = list(allowed[y])[color[y]]\n                            dq.append(y)\n                        else:\n                            if color[y] == color[x]:\n                                print(\"NO\"); sys.exit(0)\n                                sys.exit(0)\n                    else:\n                        # neighbor has singleton allowed, ensure consistency with x\n                        # If neighbor assigned already, check edge constraint\n                        if assigned[y] is None:\n                            # should not happen\n                            pass\n                        else:\n                            # check edge constraint satisfied\n                            if eg == el:\n                                req = eg\n                            else:\n                                # x's value determines y's required\n                                if assigned[x] == eg:\n                                    req = el\n                                elif assigned[x] == el:\n                                    req = eg\n                                else:\n                                    print(\"NO\"); sys.exit(0)\n                            if assigned[y] != req:\n                                print(\"NO\"); sys.exit(0)\n                                sys.exit(0)\n    # set final exponents into ans\n    for node in range(1, n+1):\n        exp = assigned[node]\n        if exp is None:\n            exp = 0\n        # multiply ans[node] by p**exp\n        if exp:\n            ans[node] *= pow(p, exp)\n\n# Final verification\nimport math\nfor (u,v,g,l) in edges:\n    guv = math.gcd(ans[u], ans[v])\n    if guv != g:\n        print(\"NO\")\n        sys.exit(0)\n    luv = ans[u] // guv * ans[v]\n    # compute lcm carefully to avoid overflow: but Python big ints ok\n    lcm_uv = (ans[u] * ans[v]) // guv\n    if lcm_uv != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(ans[i]) for i in range(1, n+1)))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 7218,
        "thoughts_token_count": 5568
    }
}