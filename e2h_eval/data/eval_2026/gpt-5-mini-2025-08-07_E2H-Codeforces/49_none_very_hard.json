{
    "start": 1758294616.8000195,
    "end": 1758294647.5790281,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\ndef main():\n    import sys, math\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    ok = True\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            ok = False\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n        edges.append((u,v,g,l))\n    if not ok:\n        print(\"NO\"); return\n    # prime sieve up to 1e6\n    MAXA = 10**6\n    spf = [0]*(MAXA+1)\n    primes = []\n    for i in range(2, MAXA+1):\n        if spf[i]==0:\n            spf[i]=i\n            primes.append(i)\n        j=0\n        while j < len(primes) and primes[j] <= spf[i] and i*primes[j] <= MAXA:\n            spf[i*primes[j]] = primes[j]\n            j+=1\n    # factor function\n    def factor(x):\n        res = {}\n        while x>1:\n            p = spf[x]\n            cnt = 0\n            while x%p==0:\n                x//=p; cnt+=1\n            res[p]=cnt\n        return res\n    # collect primes appearing in any l/g\n    prime_set = {}\n    for u,v,g,l in edges:\n        q = l//g\n        if q==1: continue\n        f = factor(q)\n        for p,e in f.items():\n            prime_set[p]=True\n    primes_list = list(prime_set.keys())\n    P = len(primes_list)\n    # per prime solve exponent assignment via 2-SAT-like using integers: per node exponent value unknown >=0\n    # We'll for each prime build constraints: for edge u-v with g and l, let gu = exponent of p in g, lu = exponent of p in l.\n    # Need min(a_u,a_v)=gu and max(a_u,a_v)=lu => {a_u,a_v} == {gu,lu} if gu!=lu; if gu==lu then both equal to gu.\n    # So for gu==lu: enforce a_u=gu, a_v=gu. For gu<lu: one must be gu, other lu.\n    # This is 2-coloring of components where edges with gu<lu force endpoints to be assigned different values and also enforce that node assigned gu or lu; edges with gu>lu impossible.\n    exponents_per_prime = {}\n    for p in primes_list:\n        val = [None]*n\n        okp = True\n        for u,v,g,l in edges:\n            gu = 0; lu = 0\n            tg = g; tl = l\n            while tg%p==0:\n                tg//=p; gu+=1\n            while tl%p==0:\n                tl//=p; lu+=1\n            if gu>lu:\n                okp=False; break\n        if not okp:\n            print(\"NO\"); return\n        # Build graph with constraints: if gu==lu => both fixed to gu; if gu<lu => they must differ and take values gu or lu; also if node connected to multiple edges must be consistent.\n        adjp = [[] for _ in range(n)]\n        fixed = [None]*n\n        for u,v,g,l in edges:\n            gu=0; lu=0\n            tg=g; tl=l\n            while tg%p==0:\n                tg//=p; gu+=1\n            while tl%p==0:\n                tl//=p; lu+=1\n            if gu==lu:\n                if fixed[u] is None: fixed[u]=gu\n                elif fixed[u]!=gu:\n                    okp=False; break\n                if fixed[v] is None: fixed[v]=gu\n                elif fixed[v]!=gu:\n                    okp=False; break\n            else:\n                # gu < lu\n                adjp[u].append((v,gu,lu))\n                adjp[v].append((u,gu,lu))\n        if not okp:\n            print(\"NO\"); return\n        # BFS assign in components\n        for i in range(n):\n            if val[i] is None and (fixed[i] is not None or adjp[i]):\n                from collections import deque\n                q=deque()\n                if fixed[i] is not None:\n                    val[i]=fixed[i]; q.append(i)\n                else:\n                    # try assign one of possibilities from an incident edge\n                    # pick first neighbor edge to get possible values\n                    if adjp[i]:\n                        # choose assign as its gu or lu; we'll try both via BFS starting with gu then if fails try lu\n                        pass\n                    else:\n                        continue\n                # BFS\n                while q:\n                    x=q.popleft()\n                    # check consistency with fixed\n                    if fixed[x] is not None and val[x]!=fixed[x]:\n                        okp=False; break\n                    for y,gu,lu in adjp[x]:\n                        # determine gu,lu for edge u-v as earlier: need values are gu and lu\n                        # find gu for x: if x matches gu or lu\n                        # For edge between x and y, for x value a_x and y value a_y must be {gu,lu}\n                        # So if val[x]==gu then y must be lu; if val[x]==lu then y must be gu; else contradiction\n                        if val[x]==gu:\n                            need = lu\n                        elif val[x]==lu:\n                            need = gu\n                        else:\n                            okp=False; break\n                        if val[y] is None:\n                            val[y]=need\n                            q.append(y)\n                        else:\n                            if val[y]!=need:\n                                okp=False; break\n                    if not okp:\n                        break\n                if not okp:\n                    break\n                # end BFS\n        if not okp:\n            # try components that had no fixed start: need to try both polarities\n            # For remaining unassigned nodes in components, perform attempts\n            # We'll process each unvisited component: if val None and adjp has edges, try assign arbitrary node gu then propagate; if fails try lu.\n            # Build visited marker\n            visited = [v is not None for v in val]\n            for i in range(n):\n                if not visited[i] and adjp[i]:\n                    comp = []\n                    from collections import deque\n                    dq=deque([i]); visited[i]=True\n                    while dq:\n                        x=dq.popleft(); comp.append(x)\n                        for y,gu,lu in adjp[x]:\n                            if not visited[y]:\n                                visited[y]=True; dq.append(y)\n                    # find an edge to seed\n                    seeded=False\n                    for x in comp:\n                        if adjp[x]:\n                            u=x; break\n                    # pick an incident edge\n                    y,gu,lu = adjp[u][0]\n                    # try assign u=gu\n                    def try_assign(seedval):\n                        local = { }\n                        dq=deque([u]); local[u]=seedval\n                        while dq:\n                            x=dq.popleft()\n                            # check fixed\n                            if fixed[x] is not None and local[x]!=fixed[x]:\n                                return None\n                            for z,gg,lr in adjp[x]:\n                                if local[x]==gg:\n                                    need = lr\n                                elif local[x]==lr:\n                                    need = gg\n                                else:\n                                    return None\n                                if z in local:\n                                    if local[z]!=need: return None\n                                else:\n                                    local[z]=need; dq.append(z)\n                        return local\n                    res = try_assign(gu)\n                    if res is None:\n                        res = try_assign(lu)\n                    if res is None:\n                        print(\"NO\"); return\n                    for k,vv in res.items():\n                        val[k]=vv\n            # finally assign zeros to isolated nodes\n            for ii in range(n):\n                if val[ii] is None:\n                    val[ii]=0\n        else:\n            # assigned some; ensure remaining isolated nodes get 0\n            for ii in range(n):\n                if val[ii] is None:\n                    val[ii]=0\n        exponents_per_prime[p]=val\n    # build final numbers: start with ones then multiply p**exp\n    ans = [1]*n\n    for p,vals in exponents_per_prime.items():\n        for i in range(n):\n            e = vals[i]\n            if e>0:\n                ans[i] *= pow(p,e)\n                if ans[i] > 10**18:\n                    pass\n    # verify all edges satisfy gcd and lcm\n    for u,v,g,l in edges:\n        gu = math.gcd(ans[u],ans[v])\n        lu = ans[u]//gu*ans[v]\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in ans))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\ndef main():\n    import sys, math\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    ok = True\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            ok = False\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n        edges.append((u,v,g,l))\n    if not ok:\n        print(\"NO\"); return\n    # prime sieve up to 1e6\n    MAXA = 10**6\n    spf = [0]*(MAXA+1)\n    primes = []\n    for i in range(2, MAXA+1):\n        if spf[i]==0:\n            spf[i]=i\n            primes.append(i)\n        j=0\n        while j < len(primes) and primes[j] <= spf[i] and i*primes[j] <= MAXA:\n            spf[i*primes[j]] = primes[j]\n            j+=1\n    # factor function\n    def factor(x):\n        res = {}\n        while x>1:\n            p = spf[x]\n            cnt = 0\n            while x%p==0:\n                x//=p; cnt+=1\n            res[p]=cnt\n        return res\n    # collect primes appearing in any l/g\n    prime_set = {}\n    for u,v,g,l in edges:\n        q = l//g\n        if q==1: continue\n        f = factor(q)\n        for p,e in f.items():\n            prime_set[p]=True\n    primes_list = list(prime_set.keys())\n    P = len(primes_list)\n    # per prime solve exponent assignment via 2-SAT-like using integers: per node exponent value unknown >=0\n    # We'll for each prime build constraints: for edge u-v with g and l, let gu = exponent of p in g, lu = exponent of p in l.\n    # Need min(a_u,a_v)=gu and max(a_u,a_v)=lu => {a_u,a_v} == {gu,lu} if gu!=lu; if gu==lu then both equal to gu.\n    # So for gu==lu: enforce a_u=gu, a_v=gu. For gu<lu: one must be gu, other lu.\n    # This is 2-coloring of components where edges with gu<lu force endpoints to be assigned different values and also enforce that node assigned gu or lu; edges with gu>lu impossible.\n    exponents_per_prime = {}\n    for p in primes_list:\n        val = [None]*n\n        okp = True\n        for u,v,g,l in edges:\n            gu = 0; lu = 0\n            tg = g; tl = l\n            while tg%p==0:\n                tg//=p; gu+=1\n            while tl%p==0:\n                tl//=p; lu+=1\n            if gu>lu:\n                okp=False; break\n        if not okp:\n            print(\"NO\"); return\n        # Build graph with constraints: if gu==lu => both fixed to gu; if gu<lu => they must differ and take values gu or lu; also if node connected to multiple edges must be consistent.\n        adjp = [[] for _ in range(n)]\n        fixed = [None]*n\n        for u,v,g,l in edges:\n            gu=0; lu=0\n            tg=g; tl=l\n            while tg%p==0:\n                tg//=p; gu+=1\n            while tl%p==0:\n                tl//=p; lu+=1\n            if gu==lu:\n                if fixed[u] is None: fixed[u]=gu\n                elif fixed[u]!=gu:\n                    okp=False; break\n                if fixed[v] is None: fixed[v]=gu\n                elif fixed[v]!=gu:\n                    okp=False; break\n            else:\n                # gu < lu\n                adjp[u].append((v,gu,lu))\n                adjp[v].append((u,gu,lu))\n        if not okp:\n            print(\"NO\"); return\n        # BFS assign in components\n        for i in range(n):\n            if val[i] is None and (fixed[i] is not None or adjp[i]):\n                from collections import deque\n                q=deque()\n                if fixed[i] is not None:\n                    val[i]=fixed[i]; q.append(i)\n                else:\n                    # try assign one of possibilities from an incident edge\n                    # pick first neighbor edge to get possible values\n                    if adjp[i]:\n                        # choose assign as its gu or lu; we'll try both via BFS starting with gu then if fails try lu\n                        pass\n                    else:\n                        continue\n                # BFS\n                while q:\n                    x=q.popleft()\n                    # check consistency with fixed\n                    if fixed[x] is not None and val[x]!=fixed[x]:\n                        okp=False; break\n                    for y,gu,lu in adjp[x]:\n                        # determine gu,lu for edge u-v as earlier: need values are gu and lu\n                        # find gu for x: if x matches gu or lu\n                        # For edge between x and y, for x value a_x and y value a_y must be {gu,lu}\n                        # So if val[x]==gu then y must be lu; if val[x]==lu then y must be gu; else contradiction\n                        if val[x]==gu:\n                            need = lu\n                        elif val[x]==lu:\n                            need = gu\n                        else:\n                            okp=False; break\n                        if val[y] is None:\n                            val[y]=need\n                            q.append(y)\n                        else:\n                            if val[y]!=need:\n                                okp=False; break\n                    if not okp:\n                        break\n                if not okp:\n                    break\n                # end BFS\n        if not okp:\n            # try components that had no fixed start: need to try both polarities\n            # For remaining unassigned nodes in components, perform attempts\n            # We'll process each unvisited component: if val None and adjp has edges, try assign arbitrary node gu then propagate; if fails try lu.\n            # Build visited marker\n            visited = [v is not None for v in val]\n            for i in range(n):\n                if not visited[i] and adjp[i]:\n                    comp = []\n                    from collections import deque\n                    dq=deque([i]); visited[i]=True\n                    while dq:\n                        x=dq.popleft(); comp.append(x)\n                        for y,gu,lu in adjp[x]:\n                            if not visited[y]:\n                                visited[y]=True; dq.append(y)\n                    # find an edge to seed\n                    seeded=False\n                    for x in comp:\n                        if adjp[x]:\n                            u=x; break\n                    # pick an incident edge\n                    y,gu,lu = adjp[u][0]\n                    # try assign u=gu\n                    def try_assign(seedval):\n                        local = { }\n                        dq=deque([u]); local[u]=seedval\n                        while dq:\n                            x=dq.popleft()\n                            # check fixed\n                            if fixed[x] is not None and local[x]!=fixed[x]:\n                                return None\n                            for z,gg,lr in adjp[x]:\n                                if local[x]==gg:\n                                    need = lr\n                                elif local[x]==lr:\n                                    need = gg\n                                else:\n                                    return None\n                                if z in local:\n                                    if local[z]!=need: return None\n                                else:\n                                    local[z]=need; dq.append(z)\n                        return local\n                    res = try_assign(gu)\n                    if res is None:\n                        res = try_assign(lu)\n                    if res is None:\n                        print(\"NO\"); return\n                    for k,vv in res.items():\n                        val[k]=vv\n            # finally assign zeros to isolated nodes\n            for ii in range(n):\n                if val[ii] is None:\n                    val[ii]=0\n        else:\n            # assigned some; ensure remaining isolated nodes get 0\n            for ii in range(n):\n                if val[ii] is None:\n                    val[ii]=0\n        exponents_per_prime[p]=val\n    # build final numbers: start with ones then multiply p**exp\n    ans = [1]*n\n    for p,vals in exponents_per_prime.items():\n        for i in range(n):\n            e = vals[i]\n            if e>0:\n                ans[i] *= pow(p,e)\n                if ans[i] > 10**18:\n                    pass\n    # verify all edges satisfy gcd and lcm\n    for u,v,g,l in edges:\n        gu = math.gcd(ans[u],ans[v])\n        lu = ans[u]//gu*ans[v]\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in ans))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 1980,
        "thoughts_token_count": 0
    }
}