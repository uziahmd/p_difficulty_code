{
    "start": 1758284941.6227276,
    "end": 1758284991.980101,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Exploring CF problem-solving**\n\nI'm trying to come up with an efficient standard solution for this CF problem. I need to build a graph, and for each connected component, I'll choose a node and compute candidate x values using DFS. When considering edges, x values need to satisfy certain conditions related to their greatest common divisor and other factors. I wonder if I should start with divisors of the least common multiple of incident edges. The constraints could be small, though I need to check specific details about the problem.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\nimport math\nfrom collections import defaultdict, deque\n\n# This solution implements a per-prime propagation approach.\n# It factorizes all given gcd/lcm values (<=1e6) and for each prime\n# enforces exponent constraints across nodes. If consistent, it\n# reconstructs node values and verifies all edges.\n\ndef sieve_primes(n):\n    spf = list(range(n+1))\n    for i in range(2,int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,n+1,i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x>1:\n        p = spf[x]\n        c = 0\n        while x%p==0:\n            x//=p\n            c+=1\n        res[p]=c\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxv = 1\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        maxv = max(maxv, g, l)\n    spf = sieve_primes(maxv)\n    # For each edge check divisibility\n    for u,v,g,l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # Collect per-prime constraints: for each prime, for each node we will store required exponent if fixed\n    prime_edges = defaultdict(list)\n    for idx,(u,v,g,l) in enumerate(edges):\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p, 0)\n            el = fl.get(p, 0)\n            if eg > el:\n                print(\"NO\"); return\n            prime_edges[p].append((u,v,eg,el))\n    n_nodes = n\n    exponents = [defaultdict(lambda:0) for _ in range(n)]  # per node: prime->exponent\n    # Process each prime separately\n    for p, pedges in prime_edges.items():\n        adj = [[] for _ in range(n_nodes)]\n        # For edges where eg==el, both nodes must have that exponent\n        fixed = [None]*n_nodes\n        diff_edges = []\n        for u,v,eg,el in pedges:\n            if eg==el:\n                # fix both to eg\n                if fixed[u] is None:\n                    fixed[u]=eg\n                elif fixed[u]!=eg:\n                    print(\"NO\"); return\n                if fixed[v] is None:\n                    fixed[v]=eg\n                elif fixed[v]!=eg:\n                    print(\"NO\"); return\n            else:\n                # need one endpoint el, other eg -> they must be different labels\n                diff_edges.append((u,v,eg,el))\n                adj[u].append((v,eg,el))\n                adj[v].append((u,eg,el))\n        # BFS components: assign exponent values\n        assigned = [None]*n_nodes\n        for i in range(n_nodes):\n            if assigned[i] is not None or (fixed[i] is None and not adj[i]):\n                # if no involvement and no fixed, leave None (means 0)\n                continue\n            if assigned[i] is None:\n                # start BFS: if fixed available, start with that; else try to deduce from neighbor edges:\n                q = deque()\n                if fixed[i] is not None:\n                    assigned[i]=fixed[i]\n                    q.append(i)\n                else:\n                    # try to pick a value compatible: derive from first incident edge\n                    # From an edge (i, v, eg, el), i's possible values are {eg, el}.\n                    # We try both possibilities if needed\n                    # Implement try both by BFS snapshot - but to keep simple, we try to deduce by greedy:\n                    # choose one (the lower eg) first\n                    # To be safe, we will attempt two trials for this component if conflict arises.\n                    # So collect component nodes\n                    comp = []\n                    stack=[i]\n                    seen=set([i])\n                    while stack:\n                        x=stack.pop()\n                        comp.append(x)\n                        for y,eg,el in adj[x]:\n                            if y not in seen:\n                                seen.add(y); stack.append(y)\n                        # fixed neighbors also include\n                    # Try two attempts: assign i to possible values from its incident edges or 0 if none\n                    possible_vals = set()\n                    for y,eg,el in adj[i]:\n                        possible_vals.add(eg); possible_vals.add(el)\n                    if not possible_vals:\n                        possible_vals.add(0)\n                    success=False\n                    final_assign=None\n                    for start_val in possible_vals:\n                        for node in comp:\n                            assigned[node]=None\n                        if fixed[i] is not None and fixed[i]!=start_val:\n                            continue\n                        assigned[i]=start_val\n                        q=deque([i])\n                        ok=True\n                        while q and ok:\n                            x=q.popleft()\n                            # if fixed exists, check\n                            if fixed[x] is not None and assigned[x]!=fixed[x]:\n                                ok=False; break\n                            for y,eg,el in adj[x]:\n                                # edge requires {assigned[x], assigned[y]} == {eg,el}\n                                ax = assigned[x]\n                                # possible for y: it must be other of eg/el if ax equals one of them\n                                if ax==eg:\n                                    need = el\n                                elif ax==el:\n                                    need = eg\n                                else:\n                                    # ax is neither eg nor el -> invalid\n                                    ok=False; break\n                                if assigned[y] is None:\n                                    if fixed[y] is not None and fixed[y]!=need:\n                                        ok=False; break\n                                    assigned[y]=need\n                                    q.append(y)\n                                else:\n                                    if assigned[y]!=need:\n                                        ok=False; break\n                        if ok:\n                            success=True\n                            final_assign = {node:assigned[node] for node in comp}\n                            break\n                    if not success:\n                        print(\"NO\"); return\n                    # commit final_assign\n                    for node,val in final_assign.items():\n                        assigned[node]=val\n                    continue\n            # process BFS for ones starting with fixed or assigned\n            q=deque([i])\n            ok=True\n            while q and ok:\n                x=q.popleft()\n                if fixed[x] is not None and assigned[x]!=fixed[x]:\n                    print(\"NO\"); return\n                for y,eg,el in adj[x]:\n                    ax = assigned[x]\n                    if ax==eg:\n                        need = el\n                    elif ax==el:\n                        need = eg\n                    else:\n                        print(\"NO\"); return\n                    if assigned[y] is None:\n                        if fixed[y] is not None and fixed[y]!=need:\n                            print(\"NO\"); return\n                        assigned[y]=need\n                        q.append(y)\n                    else:\n                        if assigned[y]!=need:\n                            print(\"NO\"); return\n        # After processing, set exponents (None -> 0)\n        for node in range(n_nodes):\n            val = assigned[node]\n            if val is None:\n                val = fixed[node] if fixed[node] is not None else 0\n            if val>0:\n                exponents[node][p]=val\n    # Build node values\n    vals = [1]*n_nodes\n    for i in range(n_nodes):\n        v=1\n        for p,e in exponents[i].items():\n            v *= pow(p,e)\n        if v>10**6:\n            print(\"NO\"); return\n        vals[i]=v\n    # Verify all edges\n    for u,v,g,l in edges:\n        gu = math.gcd(vals[u], vals[v])\n        lu = vals[u]//gu*vals[v] if gu!=0 else 0\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in vals))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\nimport math\nfrom collections import defaultdict, deque\n\n# This solution implements a per-prime propagation approach.\n# It factorizes all given gcd/lcm values (<=1e6) and for each prime\n# enforces exponent constraints across nodes. If consistent, it\n# reconstructs node values and verifies all edges.\n\ndef sieve_primes(n):\n    spf = list(range(n+1))\n    for i in range(2,int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,n+1,i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x>1:\n        p = spf[x]\n        c = 0\n        while x%p==0:\n            x//=p\n            c+=1\n        res[p]=c\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxv = 1\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        maxv = max(maxv, g, l)\n    spf = sieve_primes(maxv)\n    # For each edge check divisibility\n    for u,v,g,l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # Collect per-prime constraints: for each prime, for each node we will store required exponent if fixed\n    prime_edges = defaultdict(list)\n    for idx,(u,v,g,l) in enumerate(edges):\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p, 0)\n            el = fl.get(p, 0)\n            if eg > el:\n                print(\"NO\"); return\n            prime_edges[p].append((u,v,eg,el))\n    n_nodes = n\n    exponents = [defaultdict(lambda:0) for _ in range(n)]  # per node: prime->exponent\n    # Process each prime separately\n    for p, pedges in prime_edges.items():\n        adj = [[] for _ in range(n_nodes)]\n        # For edges where eg==el, both nodes must have that exponent\n        fixed = [None]*n_nodes\n        diff_edges = []\n        for u,v,eg,el in pedges:\n            if eg==el:\n                # fix both to eg\n                if fixed[u] is None:\n                    fixed[u]=eg\n                elif fixed[u]!=eg:\n                    print(\"NO\"); return\n                if fixed[v] is None:\n                    fixed[v]=eg\n                elif fixed[v]!=eg:\n                    print(\"NO\"); return\n            else:\n                # need one endpoint el, other eg -> they must be different labels\n                diff_edges.append((u,v,eg,el))\n                adj[u].append((v,eg,el))\n                adj[v].append((u,eg,el))\n        # BFS components: assign exponent values\n        assigned = [None]*n_nodes\n        for i in range(n_nodes):\n            if assigned[i] is not None or (fixed[i] is None and not adj[i]):\n                # if no involvement and no fixed, leave None (means 0)\n                continue\n            if assigned[i] is None:\n                # start BFS: if fixed available, start with that; else try to deduce from neighbor edges:\n                q = deque()\n                if fixed[i] is not None:\n                    assigned[i]=fixed[i]\n                    q.append(i)\n                else:\n                    # try to pick a value compatible: derive from first incident edge\n                    # From an edge (i, v, eg, el), i's possible values are {eg, el}.\n                    # We try both possibilities if needed\n                    # Implement try both by BFS snapshot - but to keep simple, we try to deduce by greedy:\n                    # choose one (the lower eg) first\n                    # To be safe, we will attempt two trials for this component if conflict arises.\n                    # So collect component nodes\n                    comp = []\n                    stack=[i]\n                    seen=set([i])\n                    while stack:\n                        x=stack.pop()\n                        comp.append(x)\n                        for y,eg,el in adj[x]:\n                            if y not in seen:\n                                seen.add(y); stack.append(y)\n                        # fixed neighbors also include\n                    # Try two attempts: assign i to possible values from its incident edges or 0 if none\n                    possible_vals = set()\n                    for y,eg,el in adj[i]:\n                        possible_vals.add(eg); possible_vals.add(el)\n                    if not possible_vals:\n                        possible_vals.add(0)\n                    success=False\n                    final_assign=None\n                    for start_val in possible_vals:\n                        for node in comp:\n                            assigned[node]=None\n                        if fixed[i] is not None and fixed[i]!=start_val:\n                            continue\n                        assigned[i]=start_val\n                        q=deque([i])\n                        ok=True\n                        while q and ok:\n                            x=q.popleft()\n                            # if fixed exists, check\n                            if fixed[x] is not None and assigned[x]!=fixed[x]:\n                                ok=False; break\n                            for y,eg,el in adj[x]:\n                                # edge requires {assigned[x], assigned[y]} == {eg,el}\n                                ax = assigned[x]\n                                # possible for y: it must be other of eg/el if ax equals one of them\n                                if ax==eg:\n                                    need = el\n                                elif ax==el:\n                                    need = eg\n                                else:\n                                    # ax is neither eg nor el -> invalid\n                                    ok=False; break\n                                if assigned[y] is None:\n                                    if fixed[y] is not None and fixed[y]!=need:\n                                        ok=False; break\n                                    assigned[y]=need\n                                    q.append(y)\n                                else:\n                                    if assigned[y]!=need:\n                                        ok=False; break\n                        if ok:\n                            success=True\n                            final_assign = {node:assigned[node] for node in comp}\n                            break\n                    if not success:\n                        print(\"NO\"); return\n                    # commit final_assign\n                    for node,val in final_assign.items():\n                        assigned[node]=val\n                    continue\n            # process BFS for ones starting with fixed or assigned\n            q=deque([i])\n            ok=True\n            while q and ok:\n                x=q.popleft()\n                if fixed[x] is not None and assigned[x]!=fixed[x]:\n                    print(\"NO\"); return\n                for y,eg,el in adj[x]:\n                    ax = assigned[x]\n                    if ax==eg:\n                        need = el\n                    elif ax==el:\n                        need = eg\n                    else:\n                        print(\"NO\"); return\n                    if assigned[y] is None:\n                        if fixed[y] is not None and fixed[y]!=need:\n                            print(\"NO\"); return\n                        assigned[y]=need\n                        q.append(y)\n                    else:\n                        if assigned[y]!=need:\n                            print(\"NO\"); return\n        # After processing, set exponents (None -> 0)\n        for node in range(n_nodes):\n            val = assigned[node]\n            if val is None:\n                val = fixed[node] if fixed[node] is not None else 0\n            if val>0:\n                exponents[node][p]=val\n    # Build node values\n    vals = [1]*n_nodes\n    for i in range(n_nodes):\n        v=1\n        for p,e in exponents[i].items():\n            v *= pow(p,e)\n        if v>10**6:\n            print(\"NO\"); return\n        vals[i]=v\n    # Verify all edges\n    for u,v,g,l in edges:\n        gu = math.gcd(vals[u], vals[v])\n        lu = vals[u]//gu*vals[v] if gu!=0 else 0\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in vals))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 3266,
        "thoughts_token_count": 1472
    }
}