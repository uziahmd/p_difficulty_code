{
    "start": 1758285049.3021224,
    "end": 1758285072.1955802,
    "start-formatted": "2025-09-19 21:30 KST",
    "end-formatted": "2025-09-19 21:31 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Maximizing sums for players**\n\nI'm looking to maximize the sum of S1 and S2 by assigning each digit sequentially to players. Each player will form n-digit numbers by appending digits in the order of picks. The total sum represents interpreted integers based on the positions assigned to each player. For each digit at position i, the multiplier for Homer, given k previous picks, would be 10 raised to the power of (n-1-k). So the total is linear in selection with known coefficients.",
    "response": "import sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    idx = 0\n    out_lines = []\n    # Support possibly multiple test cases given sequentially\n    while idx < len(data):\n        n = int(data[idx]); idx += 1\n        A = data[idx].strip(); idx += 1\n        L = 2 * n\n        digits = [int(c) for c in A]\n        pow10 = [1] * (n + 1)\n        for i in range(1, n + 1):\n            pow10[i] = pow10[i-1] * 10\n        # weight for k-th taken (0-based) is 10^{n-1-k} = pow10[n-1-k]\n        dp = [[-10**100] * (n+1) for _ in range(L+1)]\n        choice = [[None] * (n+1) for _ in range(L+1)]\n        dp[L][n] = 0  # at end, h_taken must be n (and m_taken = n)\n        # fill backwards\n        for pos in range(L-1, -1, -1):\n            for h_taken in range(0, n+1):\n                t = pos\n                m_taken = t - h_taken\n                if m_taken < 0 or m_taken > n:\n                    continue\n                d = digits[pos]\n                # assign to Homer\n                if h_taken < n:\n                    weight = pow10[n-1-h_taken]\n                    val = d * weight + dp[pos+1][h_taken+1]\n                    if val > dp[pos][h_taken]:\n                        dp[pos][h_taken] = val\n                        choice[pos][h_taken] = 'H'\n                # assign to Marge\n                if m_taken < n:\n                    weight = pow10[n-1-m_taken]\n                    val = d * weight + dp[pos+1][h_taken]\n                    if val > dp[pos][h_taken]:\n                        dp[pos][h_taken] = val\n                        choice[pos][h_taken] = 'M'\n        # reconstruct\n        res = []\n        pos = 0\n        h_taken = 0\n        while pos < L:\n            c = choice[pos][h_taken]\n            if c == 'H':\n                res.append('H')\n                h_taken += 1\n            else:\n                res.append('M')\n            pos += 1\n        out_lines.append(''.join(res))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    idx = 0\n    out_lines = []\n    # Support possibly multiple test cases given sequentially\n    while idx < len(data):\n        n = int(data[idx]); idx += 1\n        A = data[idx].strip(); idx += 1\n        L = 2 * n\n        digits = [int(c) for c in A]\n        pow10 = [1] * (n + 1)\n        for i in range(1, n + 1):\n            pow10[i] = pow10[i-1] * 10\n        # weight for k-th taken (0-based) is 10^{n-1-k} = pow10[n-1-k]\n        dp = [[-10**100] * (n+1) for _ in range(L+1)]\n        choice = [[None] * (n+1) for _ in range(L+1)]\n        dp[L][n] = 0  # at end, h_taken must be n (and m_taken = n)\n        # fill backwards\n        for pos in range(L-1, -1, -1):\n            for h_taken in range(0, n+1):\n                t = pos\n                m_taken = t - h_taken\n                if m_taken < 0 or m_taken > n:\n                    continue\n                d = digits[pos]\n                # assign to Homer\n                if h_taken < n:\n                    weight = pow10[n-1-h_taken]\n                    val = d * weight + dp[pos+1][h_taken+1]\n                    if val > dp[pos][h_taken]:\n                        dp[pos][h_taken] = val\n                        choice[pos][h_taken] = 'H'\n                # assign to Marge\n                if m_taken < n:\n                    weight = pow10[n-1-m_taken]\n                    val = d * weight + dp[pos+1][h_taken]\n                    if val > dp[pos][h_taken]:\n                        dp[pos][h_taken] = val\n                        choice[pos][h_taken] = 'M'\n        # reconstruct\n        res = []\n        pos = 0\n        h_taken = 0\n        while pos < L:\n            c = choice[pos][h_taken]\n            if c == 'H':\n                res.append('H')\n                h_taken += 1\n            else:\n                res.append('M')\n            pos += 1\n        out_lines.append(''.join(res))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 412,
        "completion_token_count": 1007,
        "thoughts_token_count": 448
    }
}