{
    "start": 1758290603.5834734,
    "end": 1758290639.0811784,
    "start-formatted": "2025-09-19 23:03 KST",
    "end-formatted": "2025-09-19 23:03 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Computing line matching**\n\nI'm focusing on computing oriented lines between each pair of rebels and bases. I want to count how many rebels and bases are on the left side, excluding endpoints. If those counts match, we can explore matching them and check each side recursively using a mask for unmatched rebels and bases. Since n is up to 10, I'll implement recursion with memoization and bitmasks. The base case is when both masks are zero, indicating all points matched. If the counts differ, it’s invalid. I'll also precompute masks for each pair to optimize.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\nwhile True:\n    try:\n        R = int(next(it))\n        B = int(next(it))\n    except StopIteration:\n        break\n    rebels = []\n    bases = []\n    for _ in range(R):\n        x = int(next(it)); y = int(next(it))\n        rebels.append((x, y))\n    for _ in range(B):\n        x = int(next(it)); y = int(next(it))\n        bases.append((x, y))\n    if R != B:\n        out_lines.append(\"No\")\n        continue\n    n = R\n    preR = [[0]*n for _ in range(n)]\n    preB = [[0]*n for _ in range(n)]\n    for i in range(n):\n        rx, ry = rebels[i]\n        for j in range(n):\n            bx, by = bases[j]\n            maskR = 0\n            maskB = 0\n            for k in range(n):\n                if k == i:\n                    continue\n                px, py = rebels[k]\n                cross = (bx - rx)*(py - ry) - (by - ry)*(px - rx)\n                if cross > 0:\n                    maskR |= (1 << k)\n            for k in range(n):\n                if k == j:\n                    continue\n                px, py = bases[k]\n                cross = (bx - rx)*(py - ry) - (by - ry)*(px - rx)\n                if cross > 0:\n                    maskB |= (1 << k)\n            preR[i][j] = maskR\n            preB[i][j] = maskB\n    from functools import lru_cache\n    @lru_cache(None)\n    def solve(maskR, maskB):\n        if maskR == 0 and maskB == 0:\n            return True\n        # if counts differ, impossible\n        if maskR.bit_count() != maskB.bit_count():\n            return False\n        # pick first rebel\n        i = (maskR & -maskR).bit_length() - 1\n        m = maskB\n        while m:\n            j = (m & -m).bit_length() - 1\n            m &= m - 1\n            leftR = preR[i][j] & maskR\n            leftB = preB[i][j] & maskB\n            if leftR.bit_count() != leftB.bit_count():\n                continue\n            rightR = maskR ^ leftR ^ (1 << i)\n            rightB = maskB ^ leftB ^ (1 << j)\n            if solve(leftR, leftB) and solve(rightR, rightB):\n                return True\n        return False\n    fullR = (1<<n) - 1\n    fullB = (1<<n) - 1\n    out_lines.append(\"Yes\" if solve(fullR, fullB) else \"No\")\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\nwhile True:\n    try:\n        R = int(next(it))\n        B = int(next(it))\n    except StopIteration:\n        break\n    rebels = []\n    bases = []\n    for _ in range(R):\n        x = int(next(it)); y = int(next(it))\n        rebels.append((x, y))\n    for _ in range(B):\n        x = int(next(it)); y = int(next(it))\n        bases.append((x, y))\n    if R != B:\n        out_lines.append(\"No\")\n        continue\n    n = R\n    preR = [[0]*n for _ in range(n)]\n    preB = [[0]*n for _ in range(n)]\n    for i in range(n):\n        rx, ry = rebels[i]\n        for j in range(n):\n            bx, by = bases[j]\n            maskR = 0\n            maskB = 0\n            for k in range(n):\n                if k == i:\n                    continue\n                px, py = rebels[k]\n                cross = (bx - rx)*(py - ry) - (by - ry)*(px - rx)\n                if cross > 0:\n                    maskR |= (1 << k)\n            for k in range(n):\n                if k == j:\n                    continue\n                px, py = bases[k]\n                cross = (bx - rx)*(py - ry) - (by - ry)*(px - rx)\n                if cross > 0:\n                    maskB |= (1 << k)\n            preR[i][j] = maskR\n            preB[i][j] = maskB\n    from functools import lru_cache\n    @lru_cache(None)\n    def solve(maskR, maskB):\n        if maskR == 0 and maskB == 0:\n            return True\n        # if counts differ, impossible\n        if maskR.bit_count() != maskB.bit_count():\n            return False\n        # pick first rebel\n        i = (maskR & -maskR).bit_length() - 1\n        m = maskB\n        while m:\n            j = (m & -m).bit_length() - 1\n            m &= m - 1\n            leftR = preR[i][j] & maskR\n            leftB = preB[i][j] & maskB\n            if leftR.bit_count() != leftB.bit_count():\n                continue\n            rightR = maskR ^ leftR ^ (1 << i)\n            rightB = maskB ^ leftB ^ (1 << j)\n            if solve(leftR, leftB) and solve(rightR, rightB):\n                return True\n        return False\n    fullR = (1<<n) - 1\n    fullB = (1<<n) - 1\n    out_lines.append(\"Yes\" if solve(fullR, fullB) else \"No\")\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 463,
        "completion_token_count": 1992,
        "thoughts_token_count": 1344
    }
}