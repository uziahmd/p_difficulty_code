{
    "start": 1758094613.7812526,
    "end": 1758094654.6596541,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:37 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Analyzing weight sorting and pairing**\n\nI’m working out a strategy for merging two lists into a combined list, sorted in descending order. From there, I want to build a prefix sum to calculate the weight used based on specific capacities. For even capacities, I can determine the value directly, but I need to deal with odd capacities differently, which involves checking for the best remaining single item. However, the pairing selection could complicate things if it prevents using certain single items. I’ll just keep these factors in mind as I proceed.",
    "response": "#!/usr/bin/env python3\nimport sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n\n# build pairs from ones in order: ones[0]+ones[1], ones[2]+ones[3], ...\npairs = []\ni = 0\nL1 = len(ones)\nwhile i + 1 < L1:\n    pairs.append(ones[i] + ones[i+1])\n    i += 2\n\n# both pairs and twos are nonincreasing; merge them into merged list of weight-2 items\nmerged = []\ni = 0; j = 0\nlen_p = len(pairs); len_t = len(twos)\nwhile i < len_p and j < len_t:\n    if pairs[i] >= twos[j]:\n        merged.append(pairs[i]); i += 1\n    else:\n        merged.append(twos[j]); j += 1\nwhile i < len_p:\n    merged.append(pairs[i]); i += 1\nwhile j < len_t:\n    merged.append(twos[j]); j += 1\n\n# prefix sums of merged weight-2 items\nprefB = [0]\nfor v in merged:\n    prefB.append(prefB[-1] + v)\n\n# function to get best cost using only weight1 and weight2 with capacity cap\ndef best_12(cap):\n    t = cap // 2\n    if t >= len(prefB):\n        val = prefB[-1]\n    else:\n        val = prefB[t]\n    if cap % 2 == 1:\n        idx = 2 * t\n        if idx < L1:\n            val += ones[idx]\n    return val\n\nans = 0\nmax_k = min(len(threes), m // 3)\nfor k in range(0, max_k + 1):\n    used_w3 = 3 * k\n    val3 = pref3[k]\n    rem = m - used_w3\n    val12 = best_12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\n# also consider case taking no threes (already included k=0)\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "#!/usr/bin/env python3\nimport sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n\n# build pairs from ones in order: ones[0]+ones[1], ones[2]+ones[3], ...\npairs = []\ni = 0\nL1 = len(ones)\nwhile i + 1 < L1:\n    pairs.append(ones[i] + ones[i+1])\n    i += 2\n\n# both pairs and twos are nonincreasing; merge them into merged list of weight-2 items\nmerged = []\ni = 0; j = 0\nlen_p = len(pairs); len_t = len(twos)\nwhile i < len_p and j < len_t:\n    if pairs[i] >= twos[j]:\n        merged.append(pairs[i]); i += 1\n    else:\n        merged.append(twos[j]); j += 1\nwhile i < len_p:\n    merged.append(pairs[i]); i += 1\nwhile j < len_t:\n    merged.append(twos[j]); j += 1\n\n# prefix sums of merged weight-2 items\nprefB = [0]\nfor v in merged:\n    prefB.append(prefB[-1] + v)\n\n# function to get best cost using only weight1 and weight2 with capacity cap\ndef best_12(cap):\n    t = cap // 2\n    if t >= len(prefB):\n        val = prefB[-1]\n    else:\n        val = prefB[t]\n    if cap % 2 == 1:\n        idx = 2 * t\n        if idx < L1:\n            val += ones[idx]\n    return val\n\nans = 0\nmax_k = min(len(threes), m // 3)\nfor k in range(0, max_k + 1):\n    used_w3 = 3 * k\n    val3 = pref3[k]\n    rem = m - used_w3\n    val12 = best_12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\n# also consider case taking no threes (already included k=0)\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 421,
        "completion_token_count": 2199,
        "thoughts_token_count": 1600
    }
}