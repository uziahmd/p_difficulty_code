{
    "start": 1758094597.6402454,
    "end": 1758094609.717024,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# Input may contain multiple test cases concatenated as per examples; detect by parsing until exhausted.\n# Each test case: line with n m, then n pairs.\nres = []\nwhile True:\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        break\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        w = int(next(it)); c = int(next(it))\n        if w == 1:\n            w1.append(c)\n        elif w == 2:\n            w2.append(c)\n        else:\n            w3.append(c)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    # prefix sums\n    pref1 = [0]\n    for v in w1:\n        pref1.append(pref1[-1] + v)\n    pref2 = [0]\n    for v in w2:\n        pref2.append(pref2[-1] + v)\n    pref3 = [0]\n    for v in w3:\n        pref3.append(pref3[-1] + v)\n    best = 0\n    max_k3 = min(len(w3), m // 3)\n    # For k3 from 0..max_k3\n    for k3 in range(0, max_k3 + 1):\n        weight3 = 3 * k3\n        value3 = pref3[k3]\n        rem = m - weight3\n        # choose among w2 and w1 to maximize cost with weight <= rem\n        # iterate over number of w2 items (each weight2 =2)\n        max_k2 = min(len(w2), rem // 2)\n        # We can iterate k2 from 0..max_k2 and compute value = value3 + pref2[k2] + best using w1 up to rem - 2*k2\n        # To optimize, iterate k2 and compute available weight for w1 -> take up to that many items from w1.\n        cur_best = 0\n        for k2 in range(0, max_k2 + 1):\n            used_w = 2 * k2\n            val2 = pref2[k2]\n            rem_w1 = rem - used_w\n            take1 = rem_w1\n            if take1 > len(w1):\n                take1 = len(w1)\n            val1 = pref1[take1]\n            total = value3 + val2 + val1\n            if total > cur_best:\n                cur_best = total\n        if cur_best > best:\n            best = cur_best\n    out_lines.append(str(best))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# Input may contain multiple test cases concatenated as per examples; detect by parsing until exhausted.\n# Each test case: line with n m, then n pairs.\nres = []\nwhile True:\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        break\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        w = int(next(it)); c = int(next(it))\n        if w == 1:\n            w1.append(c)\n        elif w == 2:\n            w2.append(c)\n        else:\n            w3.append(c)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    # prefix sums\n    pref1 = [0]\n    for v in w1:\n        pref1.append(pref1[-1] + v)\n    pref2 = [0]\n    for v in w2:\n        pref2.append(pref2[-1] + v)\n    pref3 = [0]\n    for v in w3:\n        pref3.append(pref3[-1] + v)\n    best = 0\n    max_k3 = min(len(w3), m // 3)\n    # For k3 from 0..max_k3\n    for k3 in range(0, max_k3 + 1):\n        weight3 = 3 * k3\n        value3 = pref3[k3]\n        rem = m - weight3\n        # choose among w2 and w1 to maximize cost with weight <= rem\n        # iterate over number of w2 items (each weight2 =2)\n        max_k2 = min(len(w2), rem // 2)\n        # We can iterate k2 from 0..max_k2 and compute value = value3 + pref2[k2] + best using w1 up to rem - 2*k2\n        # To optimize, iterate k2 and compute available weight for w1 -> take up to that many items from w1.\n        cur_best = 0\n        for k2 in range(0, max_k2 + 1):\n            used_w = 2 * k2\n            val2 = pref2[k2]\n            rem_w1 = rem - used_w\n            take1 = rem_w1\n            if take1 > len(w1):\n                take1 = len(w1)\n            val1 = pref1[take1]\n            total = value3 + val2 + val1\n            if total > cur_best:\n                cur_best = total\n        if cur_best > best:\n            best = cur_best\n    out_lines.append(str(best))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 609,
        "thoughts_token_count": 0
    }
}