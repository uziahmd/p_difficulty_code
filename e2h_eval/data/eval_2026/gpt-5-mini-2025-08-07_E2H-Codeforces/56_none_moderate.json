{
    "start": 1758294596.1072662,
    "end": 1758294609.2441614,
    "start-formatted": "2025-09-20 00:09 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nR = int(next(it)); B = int(next(it))\nRpts = [(int(next(it)), int(next(it))) for _ in range(R)]\nBpts = [(int(next(it)), int(next(it))) for _ in range(B)]\n\nif R != B:\n    print(\"No\")\n    sys.exit(0)\nN = R\n\ndef ccw(a,b,c):\n    return (b[0]-a[0])*(c[1]-a[1]) - (b[1]-a[1])*(c[0]-a[0])\n\n# Build bipartite graph where edge (i,j) allowed if segment Rpts[i]-Bpts[j] does not intersect any other such segment in chosen matching.\n# For this easy version, we can use the characterization: there exists noncrossing perfect matching between two equal-sized point sets iff\n# there is a planar straight-line perfect matching between them. We will construct graph of allowed pairs and try to find noncrossing matching via recursive divide and conquer:\n# Choose a pair (r,b) such that segment splits remaining points evenly: count of Rebels and Bases on each side equal.\n# Use recursion. If any such pair leads to successful pairing, return True.\n\nfrom functools import lru_cache\n\nRlist = Rpts\nBlist = Bpts\n\n@lru_cache(None)\ndef solve(rmask, bmask):\n    # rmask,bmask are bitmasks of remaining points\n    if rmask == 0 and bmask == 0:\n        return True\n    # pick any remaining rebel index\n    # find indices list\n    r_indices = [i for i in range(N) if (rmask >> i) & 1]\n    b_indices = [j for j in range(N) if (bmask >> j) & 1]\n    # pick first rebel\n    i = r_indices[0]\n    Ai = Rlist[i]\n    for j in b_indices:\n        Bj = Blist[j]\n        leftR = 0; leftB = 0; rightR = 0; rightB = 0\n        for k in r_indices:\n            if k == i: continue\n            s = ccw(Ai, Bj, Rlist[k])\n            if s > 0: leftR += 1\n            elif s < 0: rightR += 1\n        for k in b_indices:\n            if k == j: continue\n            s = ccw(Ai, Bj, Blist[k])\n            if s > 0: leftB += 1\n            elif s < 0: rightB += 1\n        # for non-crossing matching possible when leftR==leftB and rightR==rightB\n        if leftR == leftB and rightR == rightB:\n            new_r = rmask & ~(1<<i)\n            new_b = bmask & ~(1<<j)\n            if solve(new_r, new_b):\n                return True\n    return False\n\nfull_r = (1<<N) - 1\nfull_b = (1<<N) - 1\nprint(\"Yes\" if solve(full_r, full_b) else \"No\")",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nR = int(next(it)); B = int(next(it))\nRpts = [(int(next(it)), int(next(it))) for _ in range(R)]\nBpts = [(int(next(it)), int(next(it))) for _ in range(B)]\n\nif R != B:\n    print(\"No\")\n    sys.exit(0)\nN = R\n\ndef ccw(a,b,c):\n    return (b[0]-a[0])*(c[1]-a[1]) - (b[1]-a[1])*(c[0]-a[0])\n\n# Build bipartite graph where edge (i,j) allowed if segment Rpts[i]-Bpts[j] does not intersect any other such segment in chosen matching.\n# For this easy version, we can use the characterization: there exists noncrossing perfect matching between two equal-sized point sets iff\n# there is a planar straight-line perfect matching between them. We will construct graph of allowed pairs and try to find noncrossing matching via recursive divide and conquer:\n# Choose a pair (r,b) such that segment splits remaining points evenly: count of Rebels and Bases on each side equal.\n# Use recursion. If any such pair leads to successful pairing, return True.\n\nfrom functools import lru_cache\n\nRlist = Rpts\nBlist = Bpts\n\n@lru_cache(None)\ndef solve(rmask, bmask):\n    # rmask,bmask are bitmasks of remaining points\n    if rmask == 0 and bmask == 0:\n        return True\n    # pick any remaining rebel index\n    # find indices list\n    r_indices = [i for i in range(N) if (rmask >> i) & 1]\n    b_indices = [j for j in range(N) if (bmask >> j) & 1]\n    # pick first rebel\n    i = r_indices[0]\n    Ai = Rlist[i]\n    for j in b_indices:\n        Bj = Blist[j]\n        leftR = 0; leftB = 0; rightR = 0; rightB = 0\n        for k in r_indices:\n            if k == i: continue\n            s = ccw(Ai, Bj, Rlist[k])\n            if s > 0: leftR += 1\n            elif s < 0: rightR += 1\n        for k in b_indices:\n            if k == j: continue\n            s = ccw(Ai, Bj, Blist[k])\n            if s > 0: leftB += 1\n            elif s < 0: rightB += 1\n        # for non-crossing matching possible when leftR==leftB and rightR==rightB\n        if leftR == leftB and rightR == rightB:\n            new_r = rmask & ~(1<<i)\n            new_b = bmask & ~(1<<j)\n            if solve(new_r, new_b):\n                return True\n    return False\n\nfull_r = (1<<N) - 1\nfull_b = (1<<N) - 1\nprint(\"Yes\" if solve(full_r, full_b) else \"No\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 464,
        "completion_token_count": 695,
        "thoughts_token_count": 0
    }
}