{
    "start": 1758094573.286347,
    "end": 1758094586.7358685,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport math\n\ninput_data = sys.stdin.read().strip().split()\nt = int(input_data[0])\nns = list(map(int, input_data[1:]))\n\n# Precompute all possible snowflake sizes n = 1 + k * (1 + k + k^2 + ... + k^{m-1}) for k>1, m>=2\n# That sum = 1 + k * (k^m - 1) / (k - 1)\n# But easier: total vertices = 1 + k * (k^m - 1) / (k - 1)\n# We'll generate for k from 2 upwards until minimal value exceeds 1e18\nLIMIT = 10**18\nsizes = set()\n\n# For k=2, m up to 60; for larger k, m smaller. We'll loop k up to maybe 1e6? but break when minimal (1 + k + k^2) > LIMIT\n# We'll loop k while 1 + k + k*k <= LIMIT to allow m>=2 (since requirement \"This step should be done at least once\" => at least one expansion from leaves -> m>=2)\nk = 2\nwhile True:\n    if 1 + k + k*k > LIMIT:\n        break\n    # compute powers until exceed\n    curr_pow = 1  # k^0\n    sum_pows = 1  # sum k^0..k^{m-1} initially m=1\n    # we need m>=2 so we will start building for m=2 upwards\n    # We'll iterate up to when next power too big or total exceeds LIMIT\n    for m in range(1, 100):  # safe upper bound\n        # extend to next power: include k^{m}\n        curr_pow *= k\n        # now sum_pows becomes sum k^0..k^{m}\n        sum_pows += curr_pow\n        # m here denotes number of layers from root? Our formula needs at least one expansion: number of leaf-expansions = m (we consider m>=1?), verify:\n        # The total vertices formula for using m expansions (leaves expanded m times) is S = 1 + k * (1 + k + ... + k^{m-1})\n        # In our loop, sum_pows currently equals (1 + k + ... + k^{m})\n        # So we want sum_inner = (1 + k + ... + k^{m-1}) which equals sum_pows - curr_pow\n        inner_sum = sum_pows - curr_pow\n        total = 1 + k * inner_sum\n        if total > LIMIT:\n            break\n        # We require at least one expansion: inner_sum corresponds to m>=1 so okay.\n        sizes.add(total)\n    k += 1\n\n# Also handle cases where k might be large but m=2 only (i.e., minimal m=2). For m=2, total = 1 + k*(1 + k) = 1 + k + k^2\n# We already covered k while 1+k+k^2 <= LIMIT in loop condition. For k where 1+k+k^2 <= LIMIT we handled; loops breaks when 1+k+k^2 > LIMIT.\n# So all covered.\n\nout = []\nfor n in ns:\n    out.append(\"YES\" if n in sizes else \"NO\")\nsys.stdout.write(\"\\n\".join(out))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ninput_data = sys.stdin.read().strip().split()\nt = int(input_data[0])\nns = list(map(int, input_data[1:]))\n\n# Precompute all possible snowflake sizes n = 1 + k * (1 + k + k^2 + ... + k^{m-1}) for k>1, m>=2\n# That sum = 1 + k * (k^m - 1) / (k - 1)\n# But easier: total vertices = 1 + k * (k^m - 1) / (k - 1)\n# We'll generate for k from 2 upwards until minimal value exceeds 1e18\nLIMIT = 10**18\nsizes = set()\n\n# For k=2, m up to 60; for larger k, m smaller. We'll loop k up to maybe 1e6? but break when minimal (1 + k + k^2) > LIMIT\n# We'll loop k while 1 + k + k*k <= LIMIT to allow m>=2 (since requirement \"This step should be done at least once\" => at least one expansion from leaves -> m>=2)\nk = 2\nwhile True:\n    if 1 + k + k*k > LIMIT:\n        break\n    # compute powers until exceed\n    curr_pow = 1  # k^0\n    sum_pows = 1  # sum k^0..k^{m-1} initially m=1\n    # we need m>=2 so we will start building for m=2 upwards\n    # We'll iterate up to when next power too big or total exceeds LIMIT\n    for m in range(1, 100):  # safe upper bound\n        # extend to next power: include k^{m}\n        curr_pow *= k\n        # now sum_pows becomes sum k^0..k^{m}\n        sum_pows += curr_pow\n        # m here denotes number of layers from root? Our formula needs at least one expansion: number of leaf-expansions = m (we consider m>=1?), verify:\n        # The total vertices formula for using m expansions (leaves expanded m times) is S = 1 + k * (1 + k + ... + k^{m-1})\n        # In our loop, sum_pows currently equals (1 + k + ... + k^{m})\n        # So we want sum_inner = (1 + k + ... + k^{m-1}) which equals sum_pows - curr_pow\n        inner_sum = sum_pows - curr_pow\n        total = 1 + k * inner_sum\n        if total > LIMIT:\n            break\n        # We require at least one expansion: inner_sum corresponds to m>=1 so okay.\n        sizes.add(total)\n    k += 1\n\n# Also handle cases where k might be large but m=2 only (i.e., minimal m=2). For m=2, total = 1 + k*(1 + k) = 1 + k + k^2\n# We already covered k while 1+k+k^2 <= LIMIT in loop condition. For k where 1+k+k^2 <= LIMIT we handled; loops breaks when 1+k+k^2 > LIMIT.\n# So all covered.\n\nout = []\nfor n in ns:\n    out.append(\"YES\" if n in sizes else \"NO\")\nsys.stdout.write(\"\\n\".join(out))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 730,
        "thoughts_token_count": 0
    }
}