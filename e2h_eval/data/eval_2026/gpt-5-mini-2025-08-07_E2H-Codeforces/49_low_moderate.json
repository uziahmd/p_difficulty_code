{
    "start": 1758284948.694276,
    "end": 1758284991.897165,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Exploring graph assignment**\n\nI’m thinking about a classic solution: I should build a graph and, for each connected component, try to assign values. I'll use BFS and consider multiple possibilities since there's prime splitting involved. The strategy involves picking a node and assigning a value. I need to derive relationships based on edges and ensure values are integers while maintaining rational numbers. I’ll also consider using fractions of products across paths for each node—essentially applying a standard continued fraction solution.",
    "response": "import sys\nimport math\nfrom collections import deque, defaultdict\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nadj = [[] for _ in range(n)]\nedges = []\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    if l % g != 0:\n        # impossible immediately, but still store to trigger NO later\n        pass\n    w = g * l\n    adj[u].append((v, g, l, w))\n    adj[v].append((u, g, l, w))\n    edges.append((u, v, g, l, w))\n\ndef divisors(x):\n    res = []\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            res.append(i)\n            if i * i != x:\n                res.append(x // i)\n        i += 1\n    return res\n\nans = [0] * n\nvisited = [False] * n\n\nfor i in range(n):\n    if visited[i]:\n        continue\n    if not adj[i]:\n        visited[i] = True\n        ans[i] = 1\n        continue\n    # compute G = gcd of w on edges incident to i\n    G = 0\n    for (v,g,l,w) in adj[i]:\n        G = w if G == 0 else math.gcd(G, w)\n    cand = divisors(G)\n    cand.sort()\n    found_comp = False\n    for d in cand:\n        # try assign root i = d\n        comp_nodes = []\n        q = deque()\n        vals = dict()\n        ok = True\n        vals[i] = d\n        q.append(i)\n        while q and ok:\n            u = q.popleft()\n            comp_nodes.append(u)\n            for (v,g,l,w) in adj[u]:\n                # need a_u divides w\n                a_u = vals[u]\n                if w % a_u != 0:\n                    ok = False\n                    break\n                a_v = w // a_u\n                if a_v <= 0:\n                    ok = False\n                    break\n                if v in vals:\n                    if vals[v] != a_v:\n                        ok = False\n                        break\n                else:\n                    vals[v] = a_v\n                    q.append(v)\n        if not ok:\n            continue\n        # verify gcd/lcm constraints on all edges inside this component\n        for u in comp_nodes:\n            for (v,g,l,w) in adj[u]:\n                if v not in vals:\n                    continue\n                a_u = vals[u]\n                a_v = vals[v]\n                if math.gcd(a_u, a_v) != g or (a_u // math.gcd(a_u,a_v)) * a_v != l:\n                    ok = False\n                    break\n            if not ok:\n                break\n        if ok:\n            # accept assignments\n            for node, val in vals.items():\n                ans[node] = val\n                visited[node] = True\n            found_comp = True\n            break\n    if not found_comp:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in ans))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import deque, defaultdict\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nadj = [[] for _ in range(n)]\nedges = []\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    if l % g != 0:\n        # impossible immediately, but still store to trigger NO later\n        pass\n    w = g * l\n    adj[u].append((v, g, l, w))\n    adj[v].append((u, g, l, w))\n    edges.append((u, v, g, l, w))\n\ndef divisors(x):\n    res = []\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            res.append(i)\n            if i * i != x:\n                res.append(x // i)\n        i += 1\n    return res\n\nans = [0] * n\nvisited = [False] * n\n\nfor i in range(n):\n    if visited[i]:\n        continue\n    if not adj[i]:\n        visited[i] = True\n        ans[i] = 1\n        continue\n    # compute G = gcd of w on edges incident to i\n    G = 0\n    for (v,g,l,w) in adj[i]:\n        G = w if G == 0 else math.gcd(G, w)\n    cand = divisors(G)\n    cand.sort()\n    found_comp = False\n    for d in cand:\n        # try assign root i = d\n        comp_nodes = []\n        q = deque()\n        vals = dict()\n        ok = True\n        vals[i] = d\n        q.append(i)\n        while q and ok:\n            u = q.popleft()\n            comp_nodes.append(u)\n            for (v,g,l,w) in adj[u]:\n                # need a_u divides w\n                a_u = vals[u]\n                if w % a_u != 0:\n                    ok = False\n                    break\n                a_v = w // a_u\n                if a_v <= 0:\n                    ok = False\n                    break\n                if v in vals:\n                    if vals[v] != a_v:\n                        ok = False\n                        break\n                else:\n                    vals[v] = a_v\n                    q.append(v)\n        if not ok:\n            continue\n        # verify gcd/lcm constraints on all edges inside this component\n        for u in comp_nodes:\n            for (v,g,l,w) in adj[u]:\n                if v not in vals:\n                    continue\n                a_u = vals[u]\n                a_v = vals[v]\n                if math.gcd(a_u, a_v) != g or (a_u // math.gcd(a_u,a_v)) * a_v != l:\n                    ok = False\n                    break\n            if not ok:\n                break\n        if ok:\n            # accept assignments\n            for node, val in vals.items():\n                ans[node] = val\n                visited[node] = True\n            found_comp = True\n            break\n    if not found_comp:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in ans))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 2648,
        "thoughts_token_count": 1920
    }
}