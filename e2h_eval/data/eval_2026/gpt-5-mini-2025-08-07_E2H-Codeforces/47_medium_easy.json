{
    "start": 1758290650.835497,
    "end": 1758290682.9728312,
    "start-formatted": "2025-09-19 23:04 KST",
    "end-formatted": "2025-09-19 23:04 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Clarifying input for implementation**\n\nI'm considering how to iterate through the divisors of d up to its square root. For each divisor g, I need to compute k, and then determine lcm values using big integers in Python. Since the numbers are manageable within the limits, utilizing Python ints works well.\n\nI need to think through edge cases, particularly if a equals b, which makes k equal to zero. The instructions suggest I read input that may contain multiple test lines, which could imply multiple outputs, despite the expectation of a single pair per input. I'll focus on reading the entire input as specified and split it into tokens.",
    "response": "```python\nimport sys, math, re\n\ndef solve_pair(a, b):\n    if a == b:\n        return 0\n    d = abs(b - a)\n    best_lcm = None\n    best_k = 0\n    for i in range(1, int(math.isqrt(d)) + 1):\n        if d % i == 0:\n            for g in (i, d // i):\n                k = (g - a % g) % g\n                A = a + k\n                B = b + k\n                l = (A // g) * B  # (A*B)//g but avoid extra multiplication order\n                if best_lcm is None or l < best_lcm or (l == best_lcm and k < best_k):\n                    best_lcm = l\n                    best_k = k\n    return best_k\n\ndata = sys.stdin.read()\nnums = list(map(int, re.findall(r'-?\\d+', data)))\nif not nums:\n    sys.exit(0)\nout_lines = []\nif len(nums) == 2:\n    out_lines.append(str(solve_pair(nums[0], nums[1])))\nelse:\n    for i in range(0, len(nums), 2):\n        if i+1 >= len(nums):\n            break\n        out_lines.append(str(solve_pair(nums[i], nums[i+1])))\nsys.stdout.write(\"\\n\".join(out_lines))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys, math, re\n\ndef solve_pair(a, b):\n    if a == b:\n        return 0\n    d = abs(b - a)\n    best_lcm = None\n    best_k = 0\n    for i in range(1, int(math.isqrt(d)) + 1):\n        if d % i == 0:\n            for g in (i, d // i):\n                k = (g - a % g) % g\n                A = a + k\n                B = b + k\n                l = (A // g) * B  # (A*B)//g but avoid extra multiplication order\n                if best_lcm is None or l < best_lcm or (l == best_lcm and k < best_k):\n                    best_lcm = l\n                    best_k = k\n    return best_k\n\ndata = sys.stdin.read()\nnums = list(map(int, re.findall(r'-?\\d+', data)))\nif not nums:\n    sys.exit(0)\nout_lines = []\nif len(nums) == 2:\n    out_lines.append(str(solve_pair(nums[0], nums[1])))\nelse:\n    for i in range(0, len(nums), 2):\n        if i+1 >= len(nums):\n            break\n        out_lines.append(str(solve_pair(nums[i], nums[i+1])))\nsys.stdout.write(\"\\n\".join(out_lines))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 406,
        "completion_token_count": 1839,
        "thoughts_token_count": 1536
    }
}