{
    "start": 1758290616.322387,
    "end": 1758290631.626188,
    "start-formatted": "2025-09-19 23:03 KST",
    "end-formatted": "2025-09-19 23:03 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Refining code for test cases**\n\nI'm noticing that our code might misinterpret datasets like this: \"4 10 2 ...\". It could confuse the second dataset as extra numbers since it parses the first n, h, and m values, then reads exactly m triples, leaving some numbers unread. It’s better to handle multiple test cases since judges often expect that, so I’ll implement a loop to process and print outputs on a new line. For edge cases, if the input is blank, I’ll ensure the code does nothing. Let's finalize the code without comments!",
    "response": "```python\nimport sys\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nout = []\nptr = 0\nwhile ptr < len(data):\n    n = data[ptr]; h = data[ptr+1]; m = data[ptr+2]; ptr += 3\n    caps = [h]*n\n    for _ in range(m):\n        l = data[ptr]; r = data[ptr+1]; x = data[ptr+2]; ptr += 3\n        for j in range(l-1, r):\n            if caps[j] > x:\n                caps[j] = x\n    total = sum(c*c for c in caps)\n    out.append(str(total))\nsys.stdout.write(\"\\n\".join(out))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nout = []\nptr = 0\nwhile ptr < len(data):\n    n = data[ptr]; h = data[ptr+1]; m = data[ptr+2]; ptr += 3\n    caps = [h]*n\n    for _ in range(m):\n        l = data[ptr]; r = data[ptr+1]; x = data[ptr+2]; ptr += 3\n        for j in range(l-1, r):\n            if caps[j] > x:\n                caps[j] = x\n    total = sum(c*c for c in caps)\n    out.append(str(total))\nsys.stdout.write(\"\\n\".join(out))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 834,
        "completion_token_count": 748,
        "thoughts_token_count": 576
    }
}