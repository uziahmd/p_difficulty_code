{
    "start": 1758094582.4005435,
    "end": 1758094597.2534633,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# The input example shows multiple test cases concatenated; detect by reading until exhausted:\n# If first token count matches a full case, process repeatedly.\ntokens = list(map(int, data))\npos = 0\nres_lines = []\nwhile pos < len(tokens):\n    n = tokens[pos]; m = tokens[pos+1]; pos += 2\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        wi = tokens[pos]; ci = tokens[pos+1]; pos += 2\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    # prefix sums\n    pre1 = [0]\n    for v in w1:\n        pre1.append(pre1[-1]+v)\n    pre2 = [0]\n    for v in w2:\n        pre2.append(pre2[-1]+v)\n    pre3 = [0]\n    for v in w3:\n        pre3.append(pre3[-1]+v)\n    best = 0\n    max_k3 = min(len(w3), m//3)\n    # For each k3 count choose best combination of weight <= m - 3*k3 from w2 and w1.\n    # For w2 and w1, we can iterate number of w2 used up to min(len(w2), rem//2) and take best with pre sums.\n    # To optimize, precompute best value for each weight up to m using w1 and w2.\n    # Build dp_best[t] = max cost using only w1 and w2 with total weight exactly t (or <=t). We'll compute best for each possible weight up to m.\n    # Efficient: iterate count of w2, and for each consider use of w1 up to capacity.\n    # But m up to 3e5, n up to 1e5. We'll build best_for_weight_up_to capacity array length m+1 initialized 0.\n    cap = m\n    best_for = [0]*(cap+1)\n    # Consider using only w1: prefix sums give options for weights 0..len(w1)\n    for k1 in range(1, len(pre1)):\n        wt = k1*1\n        if wt > cap: break\n        if best_for[wt] < pre1[k1]:\n            best_for[wt] = pre1[k1]\n    # Consider w2 counts and combine with w1 greedily: for each count of w2, compute weight and value, then try adding w1 counts to different weights.\n    for k2 in range(1, len(pre2)):\n        wt2 = k2*2\n        if wt2 > cap: break\n        val2 = pre2[k2]\n        if best_for[wt2] < val2:\n            best_for[wt2] = val2\n        # combine with w1: we can add up to len(w1) ones, but ensure total wt <= cap\n        max_add_ones = min(len(w1), cap - wt2)\n        # For each possible add ones count, set best_for[wt2 + k1] >= val2 + pre1[k1]\n        # Iterate k1 from 1..max_add_ones\n        for k1 in range(1, max_add_ones+1):\n            wt = wt2 + k1\n            val = val2 + pre1[k1]\n            if best_for[wt] < val:\n                best_for[wt] = val\n    # Also ensure single w1 entries already set; now make best_for prefix max to represent up to weight t\n    for t in range(1, cap+1):\n        if best_for[t] < best_for[t-1]:\n            best_for[t] = best_for[t-1]\n    # Now iterate k3\n    for k3 in range(0, max_k3+1):\n        wt3 = k3*3\n        val3 = pre3[k3]\n        rem = m - wt3\n        val12 = best_for[rem] if rem >= 0 else 0\n        total = val3 + val12\n        if total > best:\n            best = total\n    res_lines.append(str(best))\nprint(\"\\n\".join(res_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# The input example shows multiple test cases concatenated; detect by reading until exhausted:\n# If first token count matches a full case, process repeatedly.\ntokens = list(map(int, data))\npos = 0\nres_lines = []\nwhile pos < len(tokens):\n    n = tokens[pos]; m = tokens[pos+1]; pos += 2\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        wi = tokens[pos]; ci = tokens[pos+1]; pos += 2\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    # prefix sums\n    pre1 = [0]\n    for v in w1:\n        pre1.append(pre1[-1]+v)\n    pre2 = [0]\n    for v in w2:\n        pre2.append(pre2[-1]+v)\n    pre3 = [0]\n    for v in w3:\n        pre3.append(pre3[-1]+v)\n    best = 0\n    max_k3 = min(len(w3), m//3)\n    # For each k3 count choose best combination of weight <= m - 3*k3 from w2 and w1.\n    # For w2 and w1, we can iterate number of w2 used up to min(len(w2), rem//2) and take best with pre sums.\n    # To optimize, precompute best value for each weight up to m using w1 and w2.\n    # Build dp_best[t] = max cost using only w1 and w2 with total weight exactly t (or <=t). We'll compute best for each possible weight up to m.\n    # Efficient: iterate count of w2, and for each consider use of w1 up to capacity.\n    # But m up to 3e5, n up to 1e5. We'll build best_for_weight_up_to capacity array length m+1 initialized 0.\n    cap = m\n    best_for = [0]*(cap+1)\n    # Consider using only w1: prefix sums give options for weights 0..len(w1)\n    for k1 in range(1, len(pre1)):\n        wt = k1*1\n        if wt > cap: break\n        if best_for[wt] < pre1[k1]:\n            best_for[wt] = pre1[k1]\n    # Consider w2 counts and combine with w1 greedily: for each count of w2, compute weight and value, then try adding w1 counts to different weights.\n    for k2 in range(1, len(pre2)):\n        wt2 = k2*2\n        if wt2 > cap: break\n        val2 = pre2[k2]\n        if best_for[wt2] < val2:\n            best_for[wt2] = val2\n        # combine with w1: we can add up to len(w1) ones, but ensure total wt <= cap\n        max_add_ones = min(len(w1), cap - wt2)\n        # For each possible add ones count, set best_for[wt2 + k1] >= val2 + pre1[k1]\n        # Iterate k1 from 1..max_add_ones\n        for k1 in range(1, max_add_ones+1):\n            wt = wt2 + k1\n            val = val2 + pre1[k1]\n            if best_for[wt] < val:\n                best_for[wt] = val\n    # Also ensure single w1 entries already set; now make best_for prefix max to represent up to weight t\n    for t in range(1, cap+1):\n        if best_for[t] < best_for[t-1]:\n            best_for[t] = best_for[t-1]\n    # Now iterate k3\n    for k3 in range(0, max_k3+1):\n        wt3 = k3*3\n        val3 = pre3[k3]\n        rem = m - wt3\n        val12 = best_for[rem] if rem >= 0 else 0\n        total = val3 + val12\n        if total > best:\n            best = total\n    res_lines.append(str(best))\nprint(\"\\n\".join(res_lines))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 421,
        "completion_token_count": 974,
        "thoughts_token_count": 0
    }
}