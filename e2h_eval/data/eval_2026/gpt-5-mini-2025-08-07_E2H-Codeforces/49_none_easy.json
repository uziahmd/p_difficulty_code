{
    "start": 1758294616.7367604,
    "end": 1758294638.027168,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # Check l % g == 0 and l == g * k where k is integer and both numbers = g * a, g * b with gcd(a,b)=1 and l = g*a*b\n    # We'll assign values via BFS: for each component, pick node value and propagate.\n    res = [0]*n\n    vis = [False]*n\n    for i in range(n):\n        if vis[i]: continue\n        # gather component nodes\n        # Try to assign arbitrary starting value: we can set res[i] = 1 initially? But must satisfy edges; we find minimal consistent via solving via ratios.\n        # We will set res[i] = unknown multiplier * base_i where base are determined up to factor. Approach: treat as constraints x_u = g * A_u, where for edge (u,v,g,l): let a = l//g; need A_u * A_v = a and gcd(A_u, A_v)=1.\n        # Then A values are integers >0. For each edge, A_v = a // A_u.\n        # Do BFS trying starting A_i equal to any divisor of products; but easier: pick res[i]=gcd constraints? Use trying starting value 1 and if contradictions adjust by multiplying component by factor.\n        # Simpler approach known: assign values by propagating with fractions using rational and finally scale to integers and validate.\n        from collections import deque\n        q = deque([i])\n        vis[i]=True\n        num = {i:1}  # store as fraction p/q? We'll store as rational using pair (num,den) but easier store as integer up to scaling: store prime exponent vector? Too heavy.\n        # Instead represent each node as rational value in form p (float risk). But we can store as Fraction from fractions.\n        from fractions import Fraction\n        val = {i: Fraction(1,1)}\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            for v,g,l in adj[u]:\n                if l % g != 0:\n                    ok = False; break\n                a = l//g\n                # Constraint: x_u = g * A_u, x_v = g * A_v, A_u * A_v = a\n                # So A_v = a / A_u\n                # Thus x_v = g * a / A_u = (g*a)/A_u\n                # Given current val[u] represents x_u relative scale; but our val stores x values up to common multiplier C (we started with 1)\n                # Compute implied val_v = g*a / (A_u) but A_u = x_u / g => A_u = val[u]/g\n                # So x_v = g * a / (val[u]/g) = g*a*g / val[u] = (g*g*a)/val[u]\n                implied = Fraction(g*g*a,1) / val[u]\n                if v in val:\n                    if val[v] != implied:\n                        ok = False; break\n                else:\n                    val[v]=implied\n                    vis[v]=True\n                    q.append(v)\n        if not ok:\n            print(\"NO\")\n            return\n        # Now val dict contains rational x values up to overall scale factor. Need to scale to integers and within bounds <=1e6 and >=1.\n        # Find LCM of denominators and multiply\n        lcm = 1\n        def lcm_func(a,b):\n            return a//math.gcd(a,b)*b\n        for f in val.values():\n            lcm = lcm_func(lcm, f.denominator)\n            if lcm > 10**18:\n                break\n        # multiply\n        comp_nodes = list(val.keys())\n        for u in comp_nodes:\n            val[u] = val[u]*lcm\n        # Now all are integers (Fractions). Convert to ints, but might have gcd>1 that can be divided while still satisfying edges? But need to ensure for each edge, gcd and lcm match.\n        # Take integer values\n        ints = {u:int(val[u].numerator//val[u].denominator) for u in comp_nodes}\n        # Now we may need to divide by gcd of all to fit <=1e6 but not necessary.\n        # Validate edges within component. If passes, assign to res; else NO.\n        for u in comp_nodes:\n            res[u]=ints[u]\n        for u in comp_nodes:\n            for v,g,l in adj[u]:\n                if u < v:\n                    x = res[u]; y = res[v]\n                    if math.gcd(x,y)!=g or (x*y)//math.gcd(x,y)!=l:\n                        print(\"NO\")\n                        return\n        # continue\n    # final check values positive and <=1e6\n    for x in res:\n        if x<=0 or x>10**6:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(map(str,res)))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # Check l % g == 0 and l == g * k where k is integer and both numbers = g * a, g * b with gcd(a,b)=1 and l = g*a*b\n    # We'll assign values via BFS: for each component, pick node value and propagate.\n    res = [0]*n\n    vis = [False]*n\n    for i in range(n):\n        if vis[i]: continue\n        # gather component nodes\n        # Try to assign arbitrary starting value: we can set res[i] = 1 initially? But must satisfy edges; we find minimal consistent via solving via ratios.\n        # We will set res[i] = unknown multiplier * base_i where base are determined up to factor. Approach: treat as constraints x_u = g * A_u, where for edge (u,v,g,l): let a = l//g; need A_u * A_v = a and gcd(A_u, A_v)=1.\n        # Then A values are integers >0. For each edge, A_v = a // A_u.\n        # Do BFS trying starting A_i equal to any divisor of products; but easier: pick res[i]=gcd constraints? Use trying starting value 1 and if contradictions adjust by multiplying component by factor.\n        # Simpler approach known: assign values by propagating with fractions using rational and finally scale to integers and validate.\n        from collections import deque\n        q = deque([i])\n        vis[i]=True\n        num = {i:1}  # store as fraction p/q? We'll store as rational using pair (num,den) but easier store as integer up to scaling: store prime exponent vector? Too heavy.\n        # Instead represent each node as rational value in form p (float risk). But we can store as Fraction from fractions.\n        from fractions import Fraction\n        val = {i: Fraction(1,1)}\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            for v,g,l in adj[u]:\n                if l % g != 0:\n                    ok = False; break\n                a = l//g\n                # Constraint: x_u = g * A_u, x_v = g * A_v, A_u * A_v = a\n                # So A_v = a / A_u\n                # Thus x_v = g * a / A_u = (g*a)/A_u\n                # Given current val[u] represents x_u relative scale; but our val stores x values up to common multiplier C (we started with 1)\n                # Compute implied val_v = g*a / (A_u) but A_u = x_u / g => A_u = val[u]/g\n                # So x_v = g * a / (val[u]/g) = g*a*g / val[u] = (g*g*a)/val[u]\n                implied = Fraction(g*g*a,1) / val[u]\n                if v in val:\n                    if val[v] != implied:\n                        ok = False; break\n                else:\n                    val[v]=implied\n                    vis[v]=True\n                    q.append(v)\n        if not ok:\n            print(\"NO\")\n            return\n        # Now val dict contains rational x values up to overall scale factor. Need to scale to integers and within bounds <=1e6 and >=1.\n        # Find LCM of denominators and multiply\n        lcm = 1\n        def lcm_func(a,b):\n            return a//math.gcd(a,b)*b\n        for f in val.values():\n            lcm = lcm_func(lcm, f.denominator)\n            if lcm > 10**18:\n                break\n        # multiply\n        comp_nodes = list(val.keys())\n        for u in comp_nodes:\n            val[u] = val[u]*lcm\n        # Now all are integers (Fractions). Convert to ints, but might have gcd>1 that can be divided while still satisfying edges? But need to ensure for each edge, gcd and lcm match.\n        # Take integer values\n        ints = {u:int(val[u].numerator//val[u].denominator) for u in comp_nodes}\n        # Now we may need to divide by gcd of all to fit <=1e6 but not necessary.\n        # Validate edges within component. If passes, assign to res; else NO.\n        for u in comp_nodes:\n            res[u]=ints[u]\n        for u in comp_nodes:\n            for v,g,l in adj[u]:\n                if u < v:\n                    x = res[u]; y = res[v]\n                    if math.gcd(x,y)!=g or (x*y)//math.gcd(x,y)!=l:\n                        print(\"NO\")\n                        return\n        # continue\n    # final check values positive and <=1e6\n    for x in res:\n        if x<=0 or x>10**6:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(map(str,res)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 1198,
        "thoughts_token_count": 0
    }
}