{
    "start": 1758094650.2684567,
    "end": 1758094694.2377524,
    "start-formatted": "2025-09-17 16:37 KST",
    "end-formatted": "2025-09-17 16:38 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Exploring item capacities**\n\nI’m considering how to optimize capacity t with q number of 2-weight items, either as actual w2 items or pairs of two w1 items. If t is odd, I might need to include one leftover single w1. My plan is to start by sorting w1 in descending order, then creating pair_values by summing adjacent w1 items. After that, I’ll merge the w2 values with these pair_values, sort everything, and compute prefix sums. This way, I can maximize the value for different capacities effectively!",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = next(it)\n    c = next(it)\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\n\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums\ndef prefs(arr):\n    p = [0]\n    for x in arr:\n        p.append(p[-1] + x)\n    return p\n\npref1 = prefs(w1)\npref2 = prefs(w2)\npref3 = prefs(w3)\n\n# build pair_values from w1 (pairs of two w1 items)\npair_values = []\nfor i in range(0, len(w1) // 2):\n    pair_values.append(w1[2*i] + w1[2*i + 1])\n# mark twos: from w2 (is_pair=0) and pair_values (is_pair=1)\ntwos = []\nfor val in w2:\n    twos.append((val, 0))\nfor val in pair_values:\n    twos.append((val, 1))\ntwos.sort(key=lambda x: x[0], reverse=True)\n\nlen_twos = len(twos)\npref_twos = [0] * (len_twos + 1)\npref_pairs_count = [0] * (len_twos + 1)\nfor i in range(len_twos):\n    pref_twos[i+1] = pref_twos[i] + twos[i][0]\n    pref_pairs_count[i+1] = pref_pairs_count[i] + (1 if twos[i][1] == 1 else 0)\n\n# helper to get best value using only weight1 and weight2 with capacity t\ndef best12(t):\n    if t <= 0:\n        return 0\n    q = t // 2\n    take = q if q <= len_twos else len_twos\n    val = pref_twos[take]\n    if t % 2 == 1:\n        pairs_used = pref_pairs_count[take]\n        consumed_w1 = pairs_used * 2\n        if consumed_w1 < len(w1):\n            val += w1[consumed_w1]\n    return val\n\n# iterate number of weight3 items\nans = 0\nmax_k = min(len(w3), m // 3)\nfor k in range(0, max_k + 1):\n    used3_weight = 3 * k\n    val3 = pref3[k]\n    rem = m - used3_weight\n    val12 = best12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = next(it)\n    c = next(it)\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\n\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums\ndef prefs(arr):\n    p = [0]\n    for x in arr:\n        p.append(p[-1] + x)\n    return p\n\npref1 = prefs(w1)\npref2 = prefs(w2)\npref3 = prefs(w3)\n\n# build pair_values from w1 (pairs of two w1 items)\npair_values = []\nfor i in range(0, len(w1) // 2):\n    pair_values.append(w1[2*i] + w1[2*i + 1])\n# mark twos: from w2 (is_pair=0) and pair_values (is_pair=1)\ntwos = []\nfor val in w2:\n    twos.append((val, 0))\nfor val in pair_values:\n    twos.append((val, 1))\ntwos.sort(key=lambda x: x[0], reverse=True)\n\nlen_twos = len(twos)\npref_twos = [0] * (len_twos + 1)\npref_pairs_count = [0] * (len_twos + 1)\nfor i in range(len_twos):\n    pref_twos[i+1] = pref_twos[i] + twos[i][0]\n    pref_pairs_count[i+1] = pref_pairs_count[i] + (1 if twos[i][1] == 1 else 0)\n\n# helper to get best value using only weight1 and weight2 with capacity t\ndef best12(t):\n    if t <= 0:\n        return 0\n    q = t // 2\n    take = q if q <= len_twos else len_twos\n    val = pref_twos[take]\n    if t % 2 == 1:\n        pairs_used = pref_pairs_count[take]\n        consumed_w1 = pairs_used * 2\n        if consumed_w1 < len(w1):\n            val += w1[consumed_w1]\n    return val\n\n# iterate number of weight3 items\nans = 0\nmax_k = min(len(w3), m // 3)\nfor k in range(0, max_k + 1):\n    used3_weight = 3 * k\n    val3 = pref3[k]\n    rem = m - used3_weight\n    val12 = best12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 2615,
        "thoughts_token_count": 1984
    }
}