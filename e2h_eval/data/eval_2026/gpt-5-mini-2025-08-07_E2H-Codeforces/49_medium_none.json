{
    "start": 1758290704.6356895,
    "end": 1758290778.439173,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:06 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Understanding the CF problem**\n\nI’m thinking about the CF problem \"Mushroom Strife.\" It involves assigning positive integers ai for edges (u,v,g,l) such that gcd(ai,aj) equals g and lcm(ai,aj) equals l. The constraints might go up to typical limits of 1e5 nodes and edges, though they’re not explicitly given. \n\nFor each edge, it’s crucial that l % g == 0, and using the relationship a*b = g*l, I realize I can express integers a and b as g * x and g * y. They need to be coprime factors with a product of t. It's essential to keep ai consistent across edges in a connected graph.",
    "response": "import sys\nimport threading\ndef main():\n    import sys, math\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    maxval = 1\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n\n    # sieve spf\n    max_n = maxval\n    spf = list(range(max_n+1))\n    for i in range(2, int(max_n**0.5)+1):\n        if spf[i] == i:\n            step = i\n            start = i*i\n            for j in range(start, max_n+1, step):\n                if spf[j] == j:\n                    spf[j] = i\n    def factorize(x):\n        res = {}\n        while x > 1:\n            p = spf[x]\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        return res\n\n    from collections import defaultdict, deque\n\n    prime_edges = defaultdict(list)\n    # Build per-prime constraints\n    for idx, (u,v,g,l) in enumerate(edges):\n        fg = factorize(g)\n        fl = factorize(l)\n        # iterate primes in fl (includes those in fg)\n        for p, el in fl.items():\n            eg = fg.get(p, 0)\n            prime_edges[p].append((u, v, eg, el))\n\n    ans_exp = [1] * n  # will multiply primes later; store as integers final\n    # For each prime, assign exponents per node\n    for p, plist in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_set = set()\n        for (u,v,eg,el) in plist:\n            adj[u].append((v, eg, el))\n            adj[v].append((u, eg, el))\n            nodes_set.add(u); nodes_set.add(v)\n        exp = { }  # node -> exponent (int)\n        q = deque()\n        # first, set edges with eg==el\n        for (u,v,eg,el) in plist:\n            if eg == el:\n                # both must be eg\n                if u in exp:\n                    if exp[u] != eg:\n                        print(\"NO\"); return\n                else:\n                    exp[u] = eg\n                    q.append(u)\n                if v in exp:\n                    if exp[v] != eg:\n                        print(\"NO\"); return\n                else:\n                    exp[v] = eg\n                    q.append(v)\n        # BFS propagate\n        while q:\n            x = q.popleft()\n            cur = exp[x]\n            for (y, eg, el) in adj[x]:\n                if eg == el:\n                    # y must be eg\n                    need = eg\n                else:\n                    # if x == eg then y must be el, if x == el then y must be eg\n                    if cur == eg:\n                        need = el\n                    elif cur == el:\n                        need = eg\n                    else:\n                        print(\"NO\"); return\n                if y in exp:\n                    if exp[y] != need:\n                        print(\"NO\"); return\n                else:\n                    exp[y] = need\n                    q.append(y)\n        # For remaining unassigned nodes in this prime, we need to start BFS with arbitrary assignment\n        for node in nodes_set:\n            if node in exp:\n                continue\n            # pick an incident edge to determine a value to start with\n            # choose first adjacency (node has at least one)\n            # choose to assign it to eg of that edge\n            # That is arbitrary but consistent as discussed\n            curnode = node\n            # pick neighbor edge\n            eg0, el0 = None, None\n            for (y, eg, el) in adj[curnode]:\n                eg0 = eg; el0 = el\n                break\n            if eg0 is None:\n                # isolated node for this prime, skip (exponent 0)\n                continue\n            # assign current node to eg0\n            exp[curnode] = eg0\n            q.append(curnode)\n            while q:\n                x = q.popleft()\n                cur = exp[x]\n                for (y, eg, el) in adj[x]:\n                    if eg == el:\n                        need = eg\n                    else:\n                        if cur == eg:\n                            need = el\n                        elif cur == el:\n                            need = eg\n                        else:\n                            print(\"NO\"); return\n                    if y in exp:\n                        if exp[y] != need:\n                            print(\"NO\"); return\n                    else:\n                        exp[y] = need\n                        q.append(y)\n        # multiply contributions of this prime into ans_exp\n        pow_p = [1]*(n)  # pow_p[i] = p^exp for nodes with exp assigned else 1\n        # compute p^e quickly using pow\n        for i, e in exp.items():\n            if e > 0:\n                pow_p[i] = pow(p, e)\n        # multiply into ans_exp\n        for i in range(n):\n            if pow_p[i] != 1:\n                ans_exp[i] *= pow_p[i]\n\n    # nodes not in any prime remain 1\n    # verify edges\n    for (u,v,g,l) in edges:\n        a = ans_exp[u]\n        b = ans_exp[v]\n        gg = math.gcd(a,b)\n        if gg != g:\n            print(\"NO\"); return\n        # compute lcm safely\n        lcm = a // gg * b\n        if lcm != l:\n            print(\"NO\"); return\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in ans_exp))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\ndef main():\n    import sys, math\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    maxval = 1\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n\n    # sieve spf\n    max_n = maxval\n    spf = list(range(max_n+1))\n    for i in range(2, int(max_n**0.5)+1):\n        if spf[i] == i:\n            step = i\n            start = i*i\n            for j in range(start, max_n+1, step):\n                if spf[j] == j:\n                    spf[j] = i\n    def factorize(x):\n        res = {}\n        while x > 1:\n            p = spf[x]\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        return res\n\n    from collections import defaultdict, deque\n\n    prime_edges = defaultdict(list)\n    # Build per-prime constraints\n    for idx, (u,v,g,l) in enumerate(edges):\n        fg = factorize(g)\n        fl = factorize(l)\n        # iterate primes in fl (includes those in fg)\n        for p, el in fl.items():\n            eg = fg.get(p, 0)\n            prime_edges[p].append((u, v, eg, el))\n\n    ans_exp = [1] * n  # will multiply primes later; store as integers final\n    # For each prime, assign exponents per node\n    for p, plist in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_set = set()\n        for (u,v,eg,el) in plist:\n            adj[u].append((v, eg, el))\n            adj[v].append((u, eg, el))\n            nodes_set.add(u); nodes_set.add(v)\n        exp = { }  # node -> exponent (int)\n        q = deque()\n        # first, set edges with eg==el\n        for (u,v,eg,el) in plist:\n            if eg == el:\n                # both must be eg\n                if u in exp:\n                    if exp[u] != eg:\n                        print(\"NO\"); return\n                else:\n                    exp[u] = eg\n                    q.append(u)\n                if v in exp:\n                    if exp[v] != eg:\n                        print(\"NO\"); return\n                else:\n                    exp[v] = eg\n                    q.append(v)\n        # BFS propagate\n        while q:\n            x = q.popleft()\n            cur = exp[x]\n            for (y, eg, el) in adj[x]:\n                if eg == el:\n                    # y must be eg\n                    need = eg\n                else:\n                    # if x == eg then y must be el, if x == el then y must be eg\n                    if cur == eg:\n                        need = el\n                    elif cur == el:\n                        need = eg\n                    else:\n                        print(\"NO\"); return\n                if y in exp:\n                    if exp[y] != need:\n                        print(\"NO\"); return\n                else:\n                    exp[y] = need\n                    q.append(y)\n        # For remaining unassigned nodes in this prime, we need to start BFS with arbitrary assignment\n        for node in nodes_set:\n            if node in exp:\n                continue\n            # pick an incident edge to determine a value to start with\n            # choose first adjacency (node has at least one)\n            # choose to assign it to eg of that edge\n            # That is arbitrary but consistent as discussed\n            curnode = node\n            # pick neighbor edge\n            eg0, el0 = None, None\n            for (y, eg, el) in adj[curnode]:\n                eg0 = eg; el0 = el\n                break\n            if eg0 is None:\n                # isolated node for this prime, skip (exponent 0)\n                continue\n            # assign current node to eg0\n            exp[curnode] = eg0\n            q.append(curnode)\n            while q:\n                x = q.popleft()\n                cur = exp[x]\n                for (y, eg, el) in adj[x]:\n                    if eg == el:\n                        need = eg\n                    else:\n                        if cur == eg:\n                            need = el\n                        elif cur == el:\n                            need = eg\n                        else:\n                            print(\"NO\"); return\n                    if y in exp:\n                        if exp[y] != need:\n                            print(\"NO\"); return\n                    else:\n                        exp[y] = need\n                        q.append(y)\n        # multiply contributions of this prime into ans_exp\n        pow_p = [1]*(n)  # pow_p[i] = p^exp for nodes with exp assigned else 1\n        # compute p^e quickly using pow\n        for i, e in exp.items():\n            if e > 0:\n                pow_p[i] = pow(p, e)\n        # multiply into ans_exp\n        for i in range(n):\n            if pow_p[i] != 1:\n                ans_exp[i] *= pow_p[i]\n\n    # nodes not in any prime remain 1\n    # verify edges\n    for (u,v,g,l) in edges:\n        a = ans_exp[u]\n        b = ans_exp[v]\n        gg = math.gcd(a,b)\n        if gg != g:\n            print(\"NO\"); return\n        # compute lcm safely\n        lcm = a // gg * b\n        if lcm != l:\n            print(\"NO\"); return\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in ans_exp))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 4472,
        "thoughts_token_count": 3136
    }
}