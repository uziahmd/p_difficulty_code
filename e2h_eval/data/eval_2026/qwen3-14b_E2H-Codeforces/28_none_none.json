{
    "start": 1758338193.5621612,
    "end": 1758338293.7248502,
    "start-formatted": "2025-09-20 12:16 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 3):\n        n = int(data[i])\n        m = int(data[i+1])\n        g = int(data[i+2])\n        \n        # Precompute factorials and inverse factorials up to (n + m)\n        max_nm = n + m\n        fact = [1] * (max_nm + 1)\n        inv_fact = [1] * (max_nm + 1)\n        \n        for i in range(1, max_nm + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact[max_nm] = pow(fact[max_nm], MOD-2, MOD)\n        for i in range(max_nm - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(a, b):\n            if a < 0 or b < 0 or a < b:\n                return 0\n            return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n        \n        # Check if it's possible to reduce the string to g\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n        \n        # We need to check if we can reduce the string to exactly one character g\n        # Each modification reduces the length by 1, so we need to reduce from total to 1\n        # So number of operations needed is total - 1\n        ops_needed = total - 1\n        \n        # Each operation reduces the number of characters by 1, and replaces two characters with one\n        # The resulting character depends on the two being replaced\n        # For the final character to be g, the number of operations must be such that the parity of the number of 1s or 0s is correct\n        \n        # Let's simulate the process backwards: starting from one character g, how many ways can we build up to n 0s and m 1s?\n        # This is equivalent to counting the number of binary strings with n 0s and m 1s that can be reduced to g\n        \n        # We define dp[i][j] as the number of ways to have i 0s and j 1s such that the string can be reduced to g\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        \n        # Base case: one character\n        if g == 0:\n            dp[1][0] = 1\n        else:\n            dp[0][1] = 1\n        \n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                # To get to (i, j), we could have come from (i-1, j) or (i, j-1)\n                # But we need to ensure that the number of operations is total - 1 = (i + j) - 1\n                # Which is always true since we're building up from 1 to i + j\n                # However, the key is whether the final character can be g based on the number of 1s and 0s\n                # If the number of 1s and 0s differ by at most 1, then it's possible to reduce to g\n                if (i - j) % 2 == (g == 0):\n                    dp[i][j] = (comb(i + j, i) + dp[i-1][j] + dp[i][j-1]) % MOD\n                else:\n                    dp[i][j] = 0\n        \n        results.append(dp[n][m])\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 3):\n        n = int(data[i])\n        m = int(data[i+1])\n        g = int(data[i+2])\n        \n        # Precompute factorials and inverse factorials up to (n + m)\n        max_nm = n + m\n        fact = [1] * (max_nm + 1)\n        inv_fact = [1] * (max_nm + 1)\n        \n        for i in range(1, max_nm + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact[max_nm] = pow(fact[max_nm], MOD-2, MOD)\n        for i in range(max_nm - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(a, b):\n            if a < 0 or b < 0 or a < b:\n                return 0\n            return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n        \n        # Check if it's possible to reduce the string to g\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n        \n        # We need to check if we can reduce the string to exactly one character g\n        # Each modification reduces the length by 1, so we need to reduce from total to 1\n        # So number of operations needed is total - 1\n        ops_needed = total - 1\n        \n        # Each operation reduces the number of characters by 1, and replaces two characters with one\n        # The resulting character depends on the two being replaced\n        # For the final character to be g, the number of operations must be such that the parity of the number of 1s or 0s is correct\n        \n        # Let's simulate the process backwards: starting from one character g, how many ways can we build up to n 0s and m 1s?\n        # This is equivalent to counting the number of binary strings with n 0s and m 1s that can be reduced to g\n        \n        # We define dp[i][j] as the number of ways to have i 0s and j 1s such that the string can be reduced to g\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        \n        # Base case: one character\n        if g == 0:\n            dp[1][0] = 1\n        else:\n            dp[0][1] = 1\n        \n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                # To get to (i, j), we could have come from (i-1, j) or (i, j-1)\n                # But we need to ensure that the number of operations is total - 1 = (i + j) - 1\n                # Which is always true since we're building up from 1 to i + j\n                # However, the key is whether the final character can be g based on the number of 1s and 0s\n                # If the number of 1s and 0s differ by at most 1, then it's possible to reduce to g\n                if (i - j) % 2 == (g == 0):\n                    dp[i][j] = (comb(i + j, i) + dp[i-1][j] + dp[i][j-1]) % MOD\n                else:\n                    dp[i][j] = 0\n        \n        results.append(dp[n][m])\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 541,
        "completion_token_count": 857,
        "thoughts_token_count": 0
    }
}