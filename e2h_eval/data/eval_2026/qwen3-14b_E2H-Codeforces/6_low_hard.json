{
    "start": 1758008328.9585128,
    "end": 1758008505.7952888,
    "start-formatted": "2025-09-16 16:38 KST",
    "end-formatted": "2025-09-16 16:41 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. So the task is to find two non-overlapping vouchers whose total duration is exactly x, and their combined cost is minimal. If there's no such pair, return -1.\n\nFirst, I need to understand the problem thoroughly. Let's rephrase: each voucher has a start day li, end day ri, and cost. The duration is ri - li + 1. We need two vouchers i and j (i≠j) such that their durations add up to x, and they don't overlap. And we have to find the minimum total cost of such pairs.\n\nThe constraints are n up to 2e5, which suggests that any O(n^2) approach is impossible. So we need an efficient method, probably O(n log n) or similar.\n\nLet me think about how to approach this. For each voucher, we can check if there's another voucher that has a duration of (x - duration_i), and that doesn't overlap with it. But how do we efficiently find those?\n\nFirst, for each voucher, compute its duration. Then, for each voucher with duration d, we need to find vouchers with duration (x - d), and that don't overlap with it.\n\nBut how do we efficiently find the minimum cost for vouchers of duration (x - d) that are non-overlapping?\n\nSo maybe we can pre-process the vouchers by their duration. Like, create a dictionary where for each possible duration, we have a list of vouchers with that duration, sorted by their start and end times. Then, for each voucher, we look up in the dictionary for (x - duration_i), and find the minimum cost voucher that doesn't overlap with the current one.\n\nBut even that might be tricky. Let's think of the steps:\n\n1. Preprocess all vouchers into groups based on their duration. So for each duration d, we have a list of vouchers with that duration. For each such group, perhaps we can sort them by their end time, or start time, or something else to allow efficient querying.\n\nFor example, suppose we have a voucher A with duration d, and we want to find vouchers B with duration (x - d) that end before A starts, or start after A ends. So for each voucher A, we need to find the minimum cost voucher in the (x - d) group that ends before A's start, or starts after A's end.\n\nBut how to do this quickly?\n\nLet's think about the following approach:\n\nFor each voucher i:\n\n- Compute d_i = ri - li + 1.\n\n- Check if (x - d_i) is a valid duration (i.e., x - d_i >= 1, since durations are at least 1). Also, since x can be up to 2e5, but for each voucher, x - d_i could be anything. But if x - d_i is not present in the duration groups, then this voucher can't form a pair with any other.\n\nIf (x - d_i) is valid, then we need to find vouchers in the group of (x - d_i) that don't overlap with voucher i.\n\nSo for each voucher i, we can check two possibilities:\n\na) Find a voucher j with duration (x - d_i) that ends before li (so that j's end < li). Then, voucher j and i don't overlap.\n\nb) Find a voucher j with duration (x - d_i) that starts after ri (so that j's start > ri). Then, voucher j and i don't overlap.\n\nFor each of these cases, we need to find the minimum cost voucher in the group (x - d_i) that satisfies either condition a or b.\n\nSo for each duration d, we can have two structures:\n\n- For vouchers of duration d, sorted by their end time. So that for case a, given a certain li, we can find all vouchers in this group that end before li, and take the minimum cost among them.\n\nSimilarly, sorted by their start time. For case b, given a certain ri, find all vouchers in the group that start after ri, and take the minimum cost.\n\nWait, but how to find the minimum cost? For example, for case a, if we have vouchers in the group sorted by end time, then for a given li, we can find the maximum end time that is less than li. All vouchers up to that point would satisfy end < li. But among those, we need the minimum cost. So perhaps for each duration group, we can precompute a prefix minimum array. Similarly for the start times.\n\nLet me elaborate.\n\nSuppose for a group of vouchers with duration d, sorted by their end time. Then, we can create a list sorted_end, which is sorted in increasing order of end time. Also, for each position in this sorted list, we can have a prefix_min array, where prefix_min[i] is the minimum cost among the first i vouchers in the sorted",
    "response": "\n\nTo solve this problem, we need to find two non-overlapping vouchers whose combined duration exactly matches a given value `x`, while minimizing the total cost. The solution involves efficiently checking for valid voucher pairs using preprocessing and binary search.\n\n### Approach\n1. **Preprocessing by Duration**: Group vouchers by their duration. This allows us to quickly access all vouchers of a specific duration when needed.\n2. **Sorting and Prefix Minimums**: For each group of vouchers with the same duration, sort them by their end time and start time. Additionally, maintain prefix minimum arrays to quickly find the minimum cost for vouchers ending before a certain date or starting after a certain date.\n3. **Binary Search**: Use binary search to efficiently find the earliest voucher that ends before the start of the current voucher and the earliest voucher that starts after the end of the current voucher.\n\n### Solution Code\n```python\nimport sys\nimport bisect\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    x = int(input[idx])\n    idx += 1\n    \n    vouchers = []\n    duration_map = defaultdict(list)\n    \n    for _ in range(n):\n        l = int(input[idx])\n        idx += 1\n        r = int(input[idx])\n        idx += 1\n        cost = int(input[idx])\n        idx += 1\n        duration = r - l + 1\n        vouchers.append((l, r, cost, duration))\n        duration_map[duration].append((l, r, cost))\n    \n    # Preprocess each duration group\n    # For each duration d, we have:\n    # sorted_end: list of (end, cost) sorted by end\n    # prefix_min_end: min cost up to each index in sorted_end\n    # sorted_start: list of (start, cost) sorted by start\n    # prefix_min_start: min cost up to each index in sorted_start\n    duration_data = dict()\n    \n    for d in duration_map:\n        lst = duration_map[d]\n        # Sort by end time\n        sorted_end = sorted(lst, key=lambda x: x[1])\n        prefix_min_end = []\n        min_cost = float('inf')\n        for item in sorted_end:\n            min_cost = min(min_cost, item[2])\n            prefix_min_end.append(min_cost)\n        # Sort by start time\n        sorted_start = sorted(lst, key=lambda x: x[0])\n        prefix_min_start = []\n        min_cost = float('inf')\n        for item in sorted_start:\n            min_cost = min(min_cost, item[2])\n            prefix_min_start.append(min_cost)\n        duration_data[d] = (sorted_end, prefix_min_end, sorted_start, prefix_min_start)\n    \n    min_total = float('inf')\n    \n    for l, r, cost, d in vouchers:\n        target = x - d\n        if target < 1:\n            continue\n        if target not in duration_data:\n            continue\n        \n        # Check for vouchers with duration target that end before l\n        sorted_end, prefix_min_end, sorted_start, prefix_min_start = duration_data[target]\n        # Find the largest end <= l-1\n        # Binary search on sorted_end's end values\n        ends = [item[1] for item in sorted_end]\n        pos = bisect.bisect_right(ends, l - 1) - 1\n        if pos >= 0:\n            min_cost = prefix_min_end[pos]\n            min_total = min(min_total, min_cost + cost)\n        \n        # Check for vouchers with duration target that start after r\n        starts = [item[0] for item in sorted_start]\n        pos = bisect.bisect_left(starts, r + 1)\n        if pos < len(prefix_min_start):\n            min_cost = prefix_min_start[pos]\n            min_total = min(min_total, min_cost + cost)\n    \n    if min_total == float('inf'):\n        print(-1)\n    else:\n        print(min_total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into vouchers, each characterized by their start day, end day, cost, and duration.\n2. **Grouping by Duration**: Vouchers are grouped by their duration using a dictionary. This allows quick access to all vouchers of a specific duration.\n3. **Sorting and Prefix Minimum Arrays**: For each duration group, vouchers are sorted by their end times and start times. Prefix minimum arrays are created to quickly determine the minimum cost for vouchers up to a certain point in these sorted lists.\n4. **Binary Search for Efficient Lookup**: For each voucher, we check if there exists another voucher of the required duration that either ends before the current voucher starts or starts after the current voucher ends. Binary search is used to efficiently find these vouchers, ensuring the solution runs efficiently even for large inputs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport bisect\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    x = int(input[idx])\n    idx += 1\n    \n    vouchers = []\n    duration_map = defaultdict(list)\n    \n    for _ in range(n):\n        l = int(input[idx])\n        idx += 1\n        r = int(input[idx])\n        idx += 1\n        cost = int(input[idx])\n        idx += 1\n        duration = r - l + 1\n        vouchers.append((l, r, cost, duration))\n        duration_map[duration].append((l, r, cost))\n    \n    # Preprocess each duration group\n    # For each duration d, we have:\n    # sorted_end: list of (end, cost) sorted by end\n    # prefix_min_end: min cost up to each index in sorted_end\n    # sorted_start: list of (start, cost) sorted by start\n    # prefix_min_start: min cost up to each index in sorted_start\n    duration_data = dict()\n    \n    for d in duration_map:\n        lst = duration_map[d]\n        # Sort by end time\n        sorted_end = sorted(lst, key=lambda x: x[1])\n        prefix_min_end = []\n        min_cost = float('inf')\n        for item in sorted_end:\n            min_cost = min(min_cost, item[2])\n            prefix_min_end.append(min_cost)\n        # Sort by start time\n        sorted_start = sorted(lst, key=lambda x: x[0])\n        prefix_min_start = []\n        min_cost = float('inf')\n        for item in sorted_start:\n            min_cost = min(min_cost, item[2])\n            prefix_min_start.append(min_cost)\n        duration_data[d] = (sorted_end, prefix_min_end, sorted_start, prefix_min_start)\n    \n    min_total = float('inf')\n    \n    for l, r, cost, d in vouchers:\n        target = x - d\n        if target < 1:\n            continue\n        if target not in duration_data:\n            continue\n        \n        # Check for vouchers with duration target that end before l\n        sorted_end, prefix_min_end, sorted_start, prefix_min_start = duration_data[target]\n        # Find the largest end <= l-1\n        # Binary search on sorted_end's end values\n        ends = [item[1] for item in sorted_end]\n        pos = bisect.bisect_right(ends, l - 1) - 1\n        if pos >= 0:\n            min_cost = prefix_min_end[pos]\n            min_total = min(min_total, min_cost + cost)\n        \n        # Check for vouchers with duration target that start after r\n        starts = [item[0] for item in sorted_start]\n        pos = bisect.bisect_left(starts, r + 1)\n        if pos < len(prefix_min_start):\n            min_cost = prefix_min_start[pos]\n            min_total = min(min_total, min_cost + cost)\n    \n    if min_total == float('inf'):\n        print(-1)\n    else:\n        print(min_total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 1034,
        "thoughts_token_count": 1023
    }
}