{
    "start": 1758309943.019634,
    "end": 1758309977.4792874,
    "start-formatted": "2025-09-20 04:25 KST",
    "end-formatted": "2025-09-20 04:26 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to determine if there's a way to assign numbers to each lawn such that for every given edge (road), the GCD and LCM of the two connected lawns match the given values. If possible, output the numbers; else, output NO.\n\nHmm. Let's think about the constraints. For each edge between u and v, we have that GCD(a_u, a_v) = g and LCM(a_u, a_v) = l. Also, since GCD * LCM = a_u * a_v, we can use that relation. So for each edge, the product of the two numbers must be equal to g * l. But also, since the GCD is g, both a_u and a_v must be multiples of g. Let me think: Let's say a_u = g * x, a_v = g * y. Then GCD(x, y) must be 1, because any common divisor would multiply with g to give a higher GCD. And the LCM of a_u and a_v is g * x * y, since x and y are coprime. Therefore, the LCM given must be equal to g * x * y. Which means that l must equal g * x * y. So x * y = l / g. But since x and y are coprime, this implies that x and y must be divisors of l/g and their product is exactly that. Also, since x and y are coprime, they must be factors of l/g such that their product is l/g and they are coprime.\n\nWait, but how do I choose x and y? For example, given that l must be divisible by g? Because the LCM of a_u and a_v is l, which is supposed to be equal to (a_u * a_v)/GCD(a_u, a_v). Since GCD is g, then LCM is (a_u * a_v)/g. So that implies that l must be equal to (a_u * a_v)/g. Which implies that a_u * a_v = g*l. But since a_u and a_v are multiples of g, let's say a_u = g * x, a_v = g * y. Then their product is g²xy, which equals g*l. So g²xy = g*l → gxy = l → xy = l/g. Therefore, l must be divisible by g. Otherwise, there's no solution. Oh right! So first thing to check for each edge is whether l is divisible by g. If not, then it's impossible. So that's a necessary condition.\n\nSo for each edge, if l % g != 0, then immediately return NO.\n\nBut that's just one check. Then, for each edge, we have that the two nodes connected must have values that are multiples of g, and their product is g*l. But how do I model this as a graph problem?\n\nThis seems like a problem where each node has a value, and edges impose constraints between pairs of nodes. So perhaps we can model this as a graph where each node's value is determined based on the constraints from edges.\n\nBut how? Let's think about building a graph where each connected component must have consistent assignments. For example, if two nodes are connected by an edge, their values must be multiples of g, and their product is g*l. But how to assign the actual values?\n\nLet me think. Suppose I have a connected component. For each node, I can assign a value that is determined relative to some base node. For example, in a connected component, if I can assign a value to a starting node, then propagate the values through the edges.\n\nBut how? Let's take an example. Suppose I have an edge between u and v with GCD g and LCM l. Then, as before, a_u = g * x, a_v = g * y, with x and y coprime, and x * y = l/g. So for each such edge, x and y must be coprime and their product is l/g. However, since x and y are coprime, there are only two possibilities for x and y: one is (d, l/g / d), where d is a divisor of l/g, and d and l/g/d are coprime. Wait, but how do I choose which one is x and which is y? Because the edge connects u and v. So perhaps, for each edge, we can assign a_u and a_v as g * x and g * y, but x and y must be coprime and their product is l/g. However, the problem is that when there are multiple edges connected to a node, the assignments must be consistent.\n\nThis seems like a problem that can be modeled with a union-find structure, but with constraints. Alternatively, it's similar",
    "response": "To solve this problem, we need to determine if we can assign numbers to each lawn such that for every given road, the greatest common divisor (GCD) and least common multiple (LCM) of the numbers on the two connected lawns match the given values. If possible, we must output one valid assignment; otherwise, we report it as impossible.\n\n### Approach\n1. **Check Validity of GCD and LCM**: For each road, check if the LCM is divisible by the GCD. If not, it's impossible to satisfy the constraints, so we immediately return \"NO\".\n2. **Graph Construction**: Treat each lawn as a node and each road as an edge with constraints. Use a graph traversal technique (like BFS) to propagate values from one node to another based on the constraints.\n3. **Value Assignment**: For each edge, determine possible values for the nodes connected by the edge using the GCD and LCM. Assign values ensuring consistency across the entire connected component of the graph.\n\n### Solution Code\n```python\nimport sys\nimport math\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    edges = []\n    graph = defaultdict(list)\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        g = int(input[idx])\n        idx += 1\n        l = int(input[idx])\n        idx += 1\n        if l % g != 0:\n            print(\"NO\")\n            return\n        edges.append((u, v, g, l))\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n    \n    value = [-1] * n\n    \n    for start in range(n):\n        if value[start] == -1:\n            queue = deque()\n            queue.append(start)\n            value[start] = 1  # arbitrary starting value, will be adjusted later\n            while queue:\n                u = queue.popleft()\n                for (v, g, l) in graph[u]:\n                    if value[v] == -1:\n                        # Compute product\n                        prod = g * l\n                        # current value of u is value[u], which is g * x\n                        # So x = value[u] / g\n                        # Then value[v] should be g * y where x*y = l/g\n                        x = value[u] // g\n                        required_xy = l // g\n                        if x * required_xy != l // g:\n                            print(\"NO\")\n                            return\n                        y = required_xy // x\n                        if math.gcd(x, y) != 1:\n                            print(\"NO\")\n                            return\n                        value[v] = g * y\n                        queue.append(v)\n                    else:\n                        # Check consistency\n                        x = value[u] // g\n                        y = value[v] // g\n                        if x * y != l // g or math.gcd(x, y) != 1:\n                            print(\"NO\")\n                            return\n    print(\"YES\")\n    print(' '.join(map(str, value)))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Reading and Initialization**: Read the input values and initialize the graph structure.\n2. **Validity Check**: For each road, check if the LCM is divisible by the GCD. If not, output \"NO\".\n3. **BFS Traversal**: Use BFS to traverse each connected component of the graph. Start with an arbitrary value for the initial node and propagate values through the edges ensuring the constraints are met.\n4. **Consistency Check**: During BFS traversal, ensure that the values assigned to nodes are consistent with the GCD and LCM constraints. If any inconsistency is found, output \"NO\".\n5. **Output Result**: If all constraints are satisfied, print \"YES\" followed by the computed values for each lawn.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    edges = []\n    graph = defaultdict(list)\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        g = int(input[idx])\n        idx += 1\n        l = int(input[idx])\n        idx += 1\n        if l % g != 0:\n            print(\"NO\")\n            return\n        edges.append((u, v, g, l))\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n    \n    value = [-1] * n\n    \n    for start in range(n):\n        if value[start] == -1:\n            queue = deque()\n            queue.append(start)\n            value[start] = 1  # arbitrary starting value, will be adjusted later\n            while queue:\n                u = queue.popleft()\n                for (v, g, l) in graph[u]:\n                    if value[v] == -1:\n                        # Compute product\n                        prod = g * l\n                        # current value of u is value[u], which is g * x\n                        # So x = value[u] / g\n                        # Then value[v] should be g * y where x*y = l/g\n                        x = value[u] // g\n                        required_xy = l // g\n                        if x * required_xy != l // g:\n                            print(\"NO\")\n                            return\n                        y = required_xy // x\n                        if math.gcd(x, y) != 1:\n                            print(\"NO\")\n                            return\n                        value[v] = g * y\n                        queue.append(v)\n                    else:\n                        # Check consistency\n                        x = value[u] // g\n                        y = value[v] // g\n                        if x * y != l // g or math.gcd(x, y) != 1:\n                            print(\"NO\")\n                            return\n    print(\"YES\")\n    print(' '.join(map(str, value)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 861,
        "thoughts_token_count": 1024
    }
}