{
    "start": 1758308666.1033604,
    "end": 1758308868.2784598,
    "start-formatted": "2025-09-20 04:04 KST",
    "end-formatted": "2025-09-20 04:07 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's try to understand this problem. So the task is to find two things for a given p: the minimum number of nodes required to create a p-reachable directed graph, and then among all such graphs with that minimum number of nodes, find the maximum number of unidirectional pairs.\n\nFirst, let's parse the definitions again. A p-reachable graph has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. Wait, but the ordered pair here is u < v. So for each unordered pair {u, v}, if u < v, then we count it once if they are mutually reachable. But the problem says \"exactly p\" such ordered pairs.\n\nThe first part is to find the minimal number of nodes n such that there exists a directed graph with exactly p such pairs. Then, for that n, find the maximum possible number of unidirectional pairs in such a graph.\n\nLet me think about how to model the reachable pairs. For a graph with n nodes, the maximum number of reachable pairs (u < v) would be C(n, 2), which is when all pairs are mutually reachable. But for the p-reachable condition, we need exactly p of these pairs.\n\nSo the problem reduces to choosing n as small as possible such that the maximum possible number of reachable pairs (which is C(n,2)) is at least p. Wait, but maybe not. Because the actual number of reachable pairs depends on the structure of the graph. For example, if the graph is a DAG with no cycles, then there are zero reachable pairs (since if u can reach v, then v can't reach u unless they are the same node). But if the graph has some strongly connected components (SCCs), then within each SCC, all pairs of nodes are mutually reachable. So the number of reachable pairs is the sum over each SCC of C(k, 2), where k is the size of the SCC.\n\nAh right! Because in an SCC, every pair of nodes is reachable from each other. So if we have a graph composed of multiple SCCs, then the total number of reachable pairs (u < v) is the sum for each SCC of C(k, 2), where k is the size of the SCC. Because for each pair in the same SCC, they are mutually reachable, and for pairs in different SCCs, if there's a path from one to another, but since they are in different SCCs, there's no mutual reachability.\n\nWait, but the way the reachable pairs are counted is only those (u, v) where u < v and they are mutually reachable. So the problem is equivalent to finding a collection of strongly connected components (SCCs) such that the sum over each component of C(k, 2) equals exactly p. And the minimal n is the sum of the sizes of the components.\n\nSo the first part of the problem is to find the minimal n such that there exists a set of integers k_1, k_2, ..., k_m, where sum_{i} C(k_i, 2) = p, and sum k_i is minimized. Because each component contributes C(k_i, 2) to the total p, and the sum of k_i is the total number of nodes.\n\nSo the problem reduces to: given p, find the minimal sum of integers k_1, k_2, ..., k_m such that sum (k_i choose 2) = p. Then, for that minimal n, find the maximum number of unidirectional pairs.\n\nBut how do we find the minimal n? Let's think about this. For each component, the contribution is (k_i choose 2). So for a given p, we want to split it into as few terms as possible, but with the sum of k_i being minimal. However, since (k choose 2) increases with k, perhaps the optimal way is to make the components as large as possible. Wait, but for example, if p is 3, then (3 choose 2) is 3, so using one component of size 3 gives n=3, which is minimal. If instead, you use two components, say (2 choose 2) + (2 choose 2) = 1 + 1 = 2 < 3. So not enough. So to get p=3, you need one component of size 3.\n\nBut what about p=4? Let's see. The largest (k choose 2) less than or equal to 4 is 3 (k=3), then 4-3=1. So we can have a component of 3 (3) and a component of 2 (1). Total sum is 3+2=5. Alternatively, maybe two components of 3 and 2 (sum 5) or another way. Wait, but 4 can also be achieved by two components of size 3 and 2, but that gives sum 5. Alternatively, can we have a component of size 4? (4 choose 2) is 6, which is larger than 4. So no. So the next best is to take 3 (3) and then 1 (0) — but that would give 3. Not enough. So perhaps the minimal n is 3 + 2 =5. But wait, maybe there's another way. Like, using two components of size 2 and 3. Wait, but that's the same as before. Or maybe using a component of size 4 and another of size 1. But (4 choose 2) is 6, which is more than 4. So that's not allowed. So the way to get p=4 is to have one component of 3 (contributing 3) and another component of 2 (contributing 1), totaling 3+1=4. Sum of sizes is 3+2=5. So n=5.\n\nBut perhaps there's a better way. Let's think: suppose we have two components of size 3 and 2. Their contributions are 3 and 1. Total is 4. So that's correct. So the minimal n is 5. But what if we have components of size 4 and 1? Then the contribution is 6 (from 4) plus 0 (from 1) which is 6. Which is more than 4. So that's not acceptable. So the minimal n is 5.\n\nSo the problem becomes, given p, find the minimal sum of k_i where sum (k_i choose 2) = p. How to compute this?\n\nThis seems like a problem where we can greedily take the largest possible (k choose 2) that is less than or equal to the remaining p, subtract it, and proceed. But is that the optimal approach?\n\nFor example, let's take p=5. The largest (k choose 2) <=5 is 3 (k=3) and then 5-3=2. Then for the remaining 2, the largest is 1 (k=2). So total sum is 3+2=5. But another option is to take k=4 (which gives 6, which is too big). So not allowed. So the minimal sum is 5.\n\nBut another way: maybe take two components of 3 and 2 (sum 5, total contribution 3+1=4) no, that's not enough. So perhaps another approach. Wait, maybe take one component of 3 (contribution 3), and then another component of 3 (contribution 3). Total is 6, which is more than 5. Not allowed. So the correct way is to take 3 and 2, but that gives 3+1=4, which is less than 5. So perhaps we need to find a different decomposition.\n\nWait, for p=5, the correct decomposition would be 3 (from k=3) and 2 (from k=2) gives 3+1=4. That's not enough. So we need to find another way. Maybe split into a component of size 4 and another of size 2. The contribution of 4 is 6, which is larger than 5. No. So that's invalid. What about a component of size 3 (3) and a component of size 3 (3) but then subtract 1? No, that doesn't make sense. Hmm.\n\nAlternatively, perhaps I'm missing something here. Let's think again. For p=5, the decomposition could be one component of size 4 and one component of size 1. The contribution is (4 choose 2) + (1 choose 2) = 6 + 0 = 6, which is larger than 5. So not helpful.\n\nWait, maybe there's a better approach. Let me think: what's the minimal sum of k_i such that sum (k_i choose 2) = p. Let's think of this as trying to represent p as a sum of triangular numbers (since (k choose 2) is the k-th triangular number minus something? Well, the triangular numbers are T_k = k*(k+1)/2. But (k choose 2) is k*(k-1)/2. So for example, T_3 is 6, but (3 choose 2) is 3.\n\nSo for any p, we need to find a set of numbers (k_i) such that their (k_i choose 2) sum up to p, and the sum of k_i is as small as possible.\n\nSo the approach is to find the minimal sum of k_i, given that the sum of (k_i choose 2) is p.\n\nNow, how to find this minimal sum? The greedy approach would be to take the largest possible (k choose 2) that is less than or equal to p, subtract it, and repeat. But is this always optimal?\n\nFor example, let's take p=4. Greedy approach would take 3 (k=3) and then 1 (k=2), sum is 3+2=5. But is there a better way? Suppose we take two components of size 2 (each contributes 1) and one component of size 3 (contribution 3). Wait, that would be 1+1+3=5. No, that's same as before. Or maybe another way. Wait, 4 can be written as 3+1. But what if we take a component of size 4? Its contribution is 6, which is more than 4. So not allowed.\n\nAnother example: p=6. Greedy approach would take 6 (k=4, since (4 choose 2) is 6). So sum is 4. Which is better than taking 3 (3) and 3 (3) which gives sum 3+3=6. So the greedy approach is better here.\n\nAnother example: p=5. The greedy approach would take 3 (k=3, contribution 3), then 2 (contribution 1) gives total 4. Then we have 5-4=1 left. So then take k=2 again (contribution 1). So total sum is 3+2+2=7. But maybe there's a better way. Let's see: if we take k=3 (3) and then k=3 (3) gives 6, which is more than 5. Not allowed. Or take k=4 (6) which is larger than 5. So no. So maybe the minimal sum is 3+2+2=7. But is there a better way? What if we have a component of size 3 (3) and another of size 2 (1), but then we have 3+1=4, and then another component of size 2 (1) to get 5. So that's 3+2+2=7. But maybe another decomposition. Let's see, can we have a component of size 5? (5 choose 2) is 10. Too big. So no. What about components of size 3 and 2 and 2? That's the same as before. So maybe 7 is the minimal sum for p=5.\n\nBut how to find this in code?\n\nThe idea is that for each step, we select the largest possible k such that (k choose 2) ≤ current p. Then subtract that value from p, and add k to the sum. Repeat until p is zero.\n\nBut how to find this k for a given p?\n\nFor example, given a current p, find the maximum k where k*(k-1)/2 ≤ p. Solving for k: k^2 -k - 2p ≤ 0. Using quadratic formula, the positive root is [1 + sqrt(1 + 8p)] / 2. So the maximum k is floor( [sqrt(8p + 1) + 1]/2 )\n\nOnce we find that k, subtract (k choose 2) from p, and proceed.\n\nThis seems like a standard approach. Let's test this with p=5.\n\nFor p=5, the maximum k is floor( (sqrt(41) +1)/2 ). sqrt(41) is ~6.4. 6.4 +1 =7.4 / 2 = 3.7 → floor is 3. So k=3. (3*2/2)=3. Subtract 3 from 5, leaving 2. Now p is 2. Again, find k for p=2: sqrt(17) is ~4.123. (4.123 +1)/2 ~ 2.56 → floor is 2. (2 choose 2) is 1. Subtract 1, p becomes 1. Again, find k for 1. sqrt(9) is 3. (3+1)/2=2. So k=2. (2 choose 2)=1. Subtract, p becomes 0. So total sum is 3+2+2=7. Which seems to be the minimal sum.\n\nBut is there a better way? Let's think. For p=5, what if we take k=3 (contribution 3) and then a k=3 (contribution 3). That's 3+3=6, which is larger than 5. So not allowed. So we need to take 3 and then 2 and 2. So the sum is 3+2+2=7.\n\nBut what if we take a k=4? (4 choose 2) is 6. Which is larger than 5. So can't take that. So the greedy approach is correct here.\n\nAnother example: p=4. The greedy approach would take k=3 (3), then p=1. Take k=2 (1), sum 3+2=5. But another approach: take two k=2 components. Each contributes 1. So total 2. Then we need 2 more. So take another k=2. Total 3 components of 2, sum is 6. Which is worse than 5. So the greedy approach is better.\n\nSo it seems that the greedy approach works here. Therefore, the minimal n is found by this method.\n\nSo the first part of the problem is to compute this minimal n.\n\nOnce we have the minimal n, the second part is to compute the maximum number of unidirectional pairs in such a graph.\n\nSo now, what's a unidirectional pair? It's an ordered pair (u, v) where u != v, there's a path from u to v, but no path from v to u.\n\nIn the graph structure, which is composed of several SCCs, the unidirectional pairs can be between different SCCs. Because if u is in one SCC and v is in another, then if there's a path from u to v but not vice versa, then (u, v) is unidirectional.\n\nBut how to maximize the number of such pairs?\n\nLet me think. Suppose the graph has several SCCs. Let's say the SCCs are arranged in a DAG. So between any two components, there is a direction (either from A to B or B to A, or none). But since we want to maximize the number of unidirectional pairs, we need to arrange the components in such a way that as many as possible pairs of components have a directed edge from one to the other, but not vice versa.\n\nBut in order to maximize the number of unidirectional pairs between components, the optimal arrangement is to have all components arranged in a linear order. For example, component 1 points to component 2, component 2 points to component 3, etc. In this case, for any pair of components (A, B) where A comes before B, there is a path from A to B, but not vice versa. Thus, for each pair of components, the number of unidirectional pairs is the product of their sizes. Because for each u in A and v in B, (u, v) is a unidirectional pair.\n\nSo the total number of unidirectional pairs is the sum over all i < j (size_i * size_j) multiplied by 2? Wait, no. Because for each pair of components A and B, if there is a path from A to B, then for all u in A and v in B, (u, v) is a unidirectional pair. Similarly, if there is a path from B to A, then (v, u) is a unidirectional pair. But if there's no path between them, then neither (u, v) nor (v, u) are unidirectional.\n\nBut how to arrange the components to maximize the number of such pairs. Since each pair of components can contribute either 0, size_A * size_B, or size_B * size_A, depending on the direction. To maximize, we can arrange the components in a linear order, so that for each pair of components (A, B), if A comes before B, then there is a path from A to B. Thus, for each such pair, the number of unidirectional pairs is size_A * size_B. Because for all u in A and v in B, (u, v) is unidirectional. Also, for all v in B and u in A, (v, u) is not unidirectional because there's no path from B to A. So the total for all component pairs is the sum over all i < j (size_i * size_j) * 1 (since each such pair contributes size_i * size_j).\n\nSo the total number of unidirectional pairs is the sum_{i < j} (size_i * size_j) * 1, multiplied by 1, because for each such pair of components, we have a direction from i to j.\n\nBut how to arrange the components to get this maximum. The maximum is achieved when the components are arranged in a linear order, and each component has edges pointing to all components that come after it. Therefore, the total number of unidirectional pairs is the sum_{i < j} (size_i * size_j).\n\nBut what's this sum? It's equal to [(sum sizes)^2 - sum (size_i)^2 ] / 2. Because sum_{i != j} size_i * size_j = (sum size_i)^2 - sum (size_i)^2. And since sum_{i < j} is half of that.\n\nBut since sum sizes is n, the minimal number of nodes, then the total unidirectional pairs is [n^2 - sum (size_i)^2 ] / 2.\n\nBut wait, the sum_{i < j} size_i * size_j = [ (sum size_i)^2 - sum (size_i^2) ] / 2.\n\nYes. So to maximize the number of unidirectional pairs, we need to minimize the sum of squares of the sizes of the components. Because the total is [n² - sum_sq] / 2. So for fixed n, to maximize this, we need to minimize sum_sq.\n\nSo the problem reduces to, given the decomposition of p into sum (k_i choose 2) = p, and sum k_i = n (the minimal possible), what is the minimal possible sum of squares of the k_i's?\n\nBecause once we have that, the maximum number of unidirectional pairs is (n² - sum_sq) / 2.\n\nSo the question now is, for the minimal n, how to split p into sum (k_i choose 2) = p with sum k_i = n, and the sum of squares of the k_i's is minimized.\n\nBut how to find that decomposition? Because the greedy approach may not necessarily give the minimal sum of squares.\n\nWait, the initial decomposition is done via the greedy approach (taking the largest possible k_i each time). But perhaps there are other decompositions of p into sum (k_i choose 2) that give the same n but with a smaller sum of squares.\n\nFor example, suppose p=4. The greedy approach would split into 3 and 2 (sum 5). The sum of squares is 9 +4 =13. But what if we split into two 2s and one 2? Wait, no. Let me think again. For p=4, the decomposition is (3 choose 2) + (2 choose 2) =3 +1=4. Sum of squares is 9 +4=13. But is there another decomposition? For example, four 2s? No, because (2 choose 2) is 1, so four of them would give 4. Then sum of squares is 4*4=16, which is higher. So the original decomposition is better.\n\nAnother example: p=5. The greedy decomposition is 3+2+2 (sum 7). Sum of squares is 9 +4 +4 =17. Is there a better decomposition? Let's see. For example, if we can find a decomposition with sum of squares less than 17. Let's think. For p=5, can we have a decomposition of (3 choose 2) + (2 choose 2) + (2 choose 2) = 3+1+1=5. So that's the same as before. Sum of squares is 3² + 2² + 2² = 9+4+4=17. Alternatively, can we have a decomposition with (4 choose 2) - 1? No, because (4 choose 2) is 6. So 6-1 is not allowed. So perhaps there's no better decomposition.\n\nAnother example: p=6. The greedy decomposition is 4 (since (4 choose 2)=6). Sum of squares is 16. Which is better than splitting into 3+3 (sum 6). Then sum of squares is 9+9=18, which is higher than 16. So the greedy decomposition is better.\n\nSo the conclusion is that the greedy decomposition (taking the largest possible k_i each time) gives the minimal sum of squares. Because when you take larger k_i, the sum of squares is smaller. Because for example, replacing two (k choose 2) terms with a larger one. For example, if you have two components of size 2 (each contributing 1, sum 2), but if you can replace them with one component of size 3 (contributing 3), which is larger. But in cases where p is not exactly the sum, you have to adjust. However, in our case, the decomposition is fixed to sum exactly p. So the greedy approach of taking the largest possible k_i each time would lead to the decomposition with the minimal sum of squares.\n\nThus, for the second part, once we have the decomposition of p into the k_i's (using the greedy approach), we can compute the sum of squares, and then compute the maximum number of unidirectional pairs as (n² - sum_sq) / 2.\n\nSo the steps for solving the problem are:\n\n1. For the given p, compute the minimal n by decomposing p into the sum of (k_i choose 2) using the greedy approach.\n\n   a. If p is 0, then the minimal n is 0 or 1? Wait, for p=0, the graph must have exactly 0 pairs (u < v) that are mutually reachable. So the graph can be a DAG. The minimal number of nodes is 1 (since with 1 node, there are no pairs). But for p=0, the output is 0 0? Wait, looking at the sample input:\n\nSample input includes 0, and the output is '0 0'.\n\nWait, the first sample input is for p=3, output is '3 0'. For p=0, the output is '0 0'?\n\nWait, let's think about p=0. The minimal number of nodes is 1. Because with 1 node, there are no pairs (u < v), so p is 0. But according to the sample input, when p=0, the output is '0 0'? Wait, the sample input shows for input 0, output is '0 0'. Wait, but according to that, the minimal number of nodes is 0? That can't be. Wait, the sample input for p=0 is given as input ['3', '4', '0'], and the output is ['3 0', '5 6', '0 0'].\n\nWait, the third output line is for input p=0. The output is '0 0'. But that's impossible, because with zero nodes, there are no pairs. So p is zero. So the minimal number of nodes is 0? But that's not possible. Wait, the problem statement says that the nodes are ordered pairs (u, v) where u != v. So if there are zero nodes, there are zero pairs, which satisfies p=0. So the minimal number of nodes is zero. But why would that be the case? Because the problem says \"a directed graph\" — perhaps a graph with zero nodes is allowed? But that seems strange. However, according to the sample input, when p=0, the output is 0 0. So that's the case.\n\nSo the code must handle p=0 as a special case. Let's think: for p=0, the minimal n is 0, because with zero nodes, there are zero pairs. However, for n=1, there are also zero pairs. But 0 is smaller than 1, so the minimal is zero. So the code must return 0 for n when p=0.\n\nBut wait, the problem says \"the minimum number of nodes required to create a p-reachable directed graph.\" So for p=0, the graph can be any graph with exactly zero pairs. So the minimal n is zero. However, perhaps the problem expects that the graph has at least one node. But according to the sample input, when p=0, the output is '0 0'.\n\nSo that's the case. So we need to handle p=0 as a special case.\n\nNow, proceeding to code.\n\nSo the steps for the code:\n\nFirst, handle p=0. Output 0 0.\n\nElse:\n\nCompute the minimal n as per the greedy approach.\n\nThen, compute the sum of squares of the k_i's, and compute the maximum unidirectional pairs as (n^2 - sum_sq) // 2.\n\nBut how to compute the decomposition of p into the k_i's.\n\nLet me think of code steps.\n\nInitialize n = 0, sum_sq = 0.\n\ncurrent_p = p.\n\nwhile current_p > 0:\n\n   find the maximum k such that k*(k-1)//2 <= current_p.\n\n   add k to n.\n\n   add k*k to sum_sq.\n\n   subtract k*(k-1)//2 from current_p.\n\nSo for example, for p=3, the loop would take k=3 (3*2/2=3). current_p becomes 0. sum_sq is 9. n is 3. Then the unidirectional pairs is (3^2 -9)/2 = (9-9)/2 = 0. Which matches the sample.\n\nAnother example: p=4. The decomposition is k=3 (3), then current_p=1. Next k=2 (1). current_p=0. sum_sq is 9 +4=13. n is 5. So unidirectional pairs is (5^2 -13)/2 = (25-13)/2 = 6. Which matches the sample input for p=4, output is '5 6'.\n\nYes, that's the sample input's second case.\n\nSo the code needs to:\n\n- For p=0: output 0 0.\n\nElse:\n\nCompute the decomposition as above.\n\nNow, for the code:\n\nBut how to compute k for each step?\n\nWe can compute k as the floor of (sqrt(8*current_p +1)+1)/2.\n\nBut in code, perhaps:\n\ndef max_k(p):\n\n    # find maximum k where k*(k-1)//2 <= p\n\n    # binary search?\n\n    # or compute using math.\n\n    # Let's compute k using math.\n\n    # Solve k^2 -k - 2p <=0.\n\n    # k = [1 + sqrt(1 + 8p)] / 2\n\n    # take floor.\n\n    import math\n\n    k = int( ( (1 + math.sqrt(1 + 8*p )) ) / 2 )\n\n    while k*(k-1)//2 > p:\n\n        k -=1\n\n    while (k+1)*(k)//2 <= p:\n\n        k +=1\n\n    return k\n\nWait, perhaps better to compute k as the floor of the solution.\n\nBut in code, perhaps:\n\nWe can compute k as the integer part of (sqrt(8p +1) +1)/2, then check if (k*(k-1)/2) is <= p. If not, decrease by 1.\n\nBut in code, perhaps:\n\nimport math\n\ndef get_max_k(p):\n\n    if p ==0:\n\n        return 0\n\n    k = int( ( (1 + math.sqrt(1 + 8*p )) ) / 2 )\n\n    while k*(k-1)//2 > p:\n\n        k -=1\n\n    return k\n\nBut for example, when p=3: 1+8*3=25, sqrt is 5. (5+1)/2=3 → correct.\n\nFor p=4: 1+8*4=33. sqrt is ~5.744. (5.744 +1)/2 is ~3.37 → k is 3. Check 3*2/2=3 <=4. Correct.\n\nSo that's correct.\n\nOnce we have this function, we can proceed.\n\nNow, code steps:\n\nRead p.\n\nif p ==0:\n\n    print 0 0\n\nelse:\n\n    current_p = p\n\n    n =0\n\n    sum_sq =0\n\n    while current_p>0:\n\n        k = get_max_k(current_p)\n\n        n +=k\n\n        sum_sq += k*k\n\n        current_p -= k*(k-1)//2\n\n    # Now compute the unidirectional pairs.\n\n    unidir = (n*n - sum_sq) //2\n\n    print n, unidir\n\nBut wait, what about when p=0? According to the sample input, for p=0, the output is 0 0. But according to the code, for p=0, the code returns 0 0. So that's correct.\n\nBut what about when p=1? Let's see:\n\ncurrent_p=1.\n\nk is computed as (sqrt(9) +1)/2 = (3+1)/2=2. Check 2*(2-1)/2 =1 <=1. So k=2. n=2, sum_sq=4. current_p becomes 0. unidir = (2^2 -4)/2= 0. So output is 2 0.\n\nBut what's the actual scenario? For p=1, the graph must have exactly one pair (u <v) mutually reachable. So the minimal n is 2. The graph is a single component of size 2. The unidirectional pairs are zero, because all pairs are in the same component. So yes, output is 2 0.\n\nAnother example: p=2. The decomposition is k=2 (contribution 1), then current_p=1. Then again k=2 (contribution 1). So total n=2+2=4. sum_sq is 4+4=8. unidir is (4^2 -8)/2 = (16-8)/2 =4. So the output is 4 4.\n\nBut what's the actual maximum unidirectional pairs? The decomposition is two components of size 2. Arranged in a linear order (so component A and component B, with A pointing to B). So the unidirectional pairs are 2*2=4. Which matches the calculation.\n\nSo the code seems to work.\n\nNow, what about when p is such that the decomposition requires multiple components. For example, p=5, which decomposes into 3, 2, 2. sum_sq is 9+4+4=17. n=3+2+2=7. unidir is (7^2 -17)/2 = (49-17)/2 = 16. So the output is 7 16.\n\nSo the code seems to handle that.\n\nNow, the code must be implemented in Python.\n\nBut for p=0, the code returns 0 0. However, what about when p=0 but the code returns n=0, but the problem says that the graph must have exactly p=0 pairs. For n=0, there are zero pairs. So that's correct.\n\nBut what if p is zero, but the code returns 0 0, which is correct.\n\nSo the code should handle all cases.\n\nNow, let's test the sample inputs:\n\nSample Input 1: p=3.\n\nCode steps: current_p=3. get_max_k(3) is 3. subtract 3. current_p=0. n=3, sum_sq=9. unidir (9-9)/2=0. Output is 3 0. Which matches the first sample.\n\nSample Input 2: p=4. Output is 5 6. As discussed earlier.\n\nSample Input 3: p=0. Output is 0 0. Which matches.\n\nAnother sample: p=1. Output is 2 0. Which is correct.\n\nAnother test case: p=2. Output is 4 4.\n\nAnother case: p=6. Decompose into k=4 (6). sum_sq=16. n=4. unidir is (16-16)/2=0. So output 4 0. Which makes sense because all pairs are in the same component. So no unidirectional pairs.\n\nAnother case: p=5. As discussed, n=7, unidir= (49-17)/2= 16.\n\nNow, the code can be written.\n\nBut in code, the function get_max_k must be handled properly. Also, note that for p=0, the code returns 0, but in the code, when p is 0, the code returns 0 0.\n\nBut in the code, the code for p=0 is handled first.\n\nNow, code:\n\nRead p from input. Let's see.\n\nBut the input is a single integer p. So in Python:\n\np = int(input())\n\nThen process as follows.\n\nBut for the code, the code must handle p=0.\n\nNow, implement the code.\n\nBut for the function get_max_k, in Python:\n\nimport math\n\ndef get_max_k(p):\n\n    k = int( (1 + math.sqrt(1 + 8 * p )) / 2 )\n\n    while k * (k-1) // 2 > p:\n\n        k -=1\n\n    return k\n\nBut in code, we need to handle cases where p is zero. However, in the code, for p=0, the code returns 0, but in the main code, when p=0, it's handled separately.\n\nNow, the code:\n\nimport math\n\np = int(input())\n\nif p == 0:\n\n    print(\"0 0\")\n\nelse:\n\n    current_p = p\n\n    n = 0\n\n    sum_sq = 0\n\n    while current_p > 0:\n\n        # compute k\n\n        k = int( (1 + math.sqrt(1 + 8 * current_p )) / 2 )\n\n        while k * (k-1) // 2 > current_p:\n\n            k -=1\n\n        # add to n and sum_sq\n\n        n += k\n\n        sum_sq += k * k\n\n        current_p -= k * (k-1) // 2\n\n    unidir = (n * n - sum_sq) // 2\n\n    print(f\"{n} {unidir}\")\n\nBut wait, for p=0, the code outputs 0 0. However, what if the user inputs p=0, but according to the problem statement, the output is 0 0. Which matches.\n\nTesting the sample input:\n\nSample input 3 is 0, output 0 0.\n\nSample input 4 is 0, output 0 0.\n\nBut what about when p=1, the code returns 2 0.\n\nBut what about when p=2?\n\ncurrent_p=2:\n\nk is (1 + sqrt(1+16))/2 = (1 + sqrt(17))/2 ≈ (1 +4.123)/2 ≈ 2.56 → k=2. Check 2*1//2 =1 ≤2. So yes. So subtract 1, current_p=1. Now again, compute k for 1: same as before, k=2. subtract 1, current_p=0. So n is 2+2=4. sum_sq is 4+4=8. unidir (16-8)/2=4. So output is 4 4.\n\nWhich is correct.\n\nAnother test case: p=5. The code computes:\n\ncurrent_p=5.\n\nk = (1 +",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs in such a graph. A p-reachable graph contains exactly p ordered pairs (u, v) where u < v and both nodes are mutually reachable.\n\n### Approach\n1. **Understanding Reachable Pairs**: The key insight is that each strongly connected component (SCC) of size `k` contributes exactly `k*(k-1)/2` pairs of mutually reachable nodes. Our goal is to decompose `p` into such contributions using the smallest possible number of nodes.\n2. **Greedy Decomposition**: Use a greedy approach to decompose `p` into sums of triangular numbers (each representing the contribution from an SCC). This ensures the minimal number of nodes by always taking the largest possible SCC first.\n3. **Maximizing Unidirectional Pairs**: After determining the minimal number of nodes, the maximum number of unidirectional pairs is calculated by considering the arrangement of SCCs in a linear order, maximizing the product of sizes of different components.\n\n### Solution Code\n```python\nimport math\n\ndef main():\n    p = int(input())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    current_p = p\n    n = 0\n    sum_sq = 0\n    \n    while current_p > 0:\n        # Compute the maximum k for current_p\n        k = int((1 + math.sqrt(1 + 8 * current_p)) / 2)\n        while k * (k - 1) // 2 > current_p:\n            k -= 1\n        # Update n and sum_sq\n        n += k\n        sum_sq += k * k\n        current_p -= k * (k - 1) // 2\n    \n    unidir = (n * n - sum_sq) // 2\n    print(f\"{n} {unidir}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input integer `p` is read, which represents the number of mutually reachable pairs needed.\n2. **Special Case Handling**: If `p` is 0, the output is immediately set to \"0 0\" as no nodes are required.\n3. **Greedy Decomposition**: For each iteration, the largest possible size `k` of an SCC is determined such that the contribution `k*(k-1)/2` does not exceed the remaining value of `p`. This ensures minimal nodes are used.\n4. **Summing Contributions**: The total number of nodes `n` and the sum of squares of component sizes `sum_sq` are tracked.\n5. **Calculating Unidirectional Pairs**: Using the formula derived from the sum of products of component sizes arranged in a linear order, the maximum number of unidirectional pairs is calculated as `(n^2 - sum_sq) // 2`.\n\nThis approach efficiently decomposes the problem into manageable parts, ensuring both minimal node count and maximal unidirectional pairs using mathematical insights and greedy strategies.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef main():\n    p = int(input())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    current_p = p\n    n = 0\n    sum_sq = 0\n    \n    while current_p > 0:\n        # Compute the maximum k for current_p\n        k = int((1 + math.sqrt(1 + 8 * current_p)) / 2)\n        while k * (k - 1) // 2 > current_p:\n            k -= 1\n        # Update n and sum_sq\n        n += k\n        sum_sq += k * k\n        current_p -= k * (k - 1) // 2\n    \n    unidir = (n * n - sum_sq) // 2\n    print(f\"{n} {unidir}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 480,
        "completion_token_count": 653,
        "thoughts_token_count": 8192
    }
}