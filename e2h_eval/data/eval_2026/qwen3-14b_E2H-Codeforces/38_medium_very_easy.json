{
    "start": 1758307726.7850516,
    "end": 1758307902.0405395,
    "start-formatted": "2025-09-20 03:48 KST",
    "end-formatted": "2025-09-20 03:51 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's try to understand this problem. So the task is to find two things for a given p: the minimum number of nodes required to create a p-reachable directed graph, and then among all such graphs with that minimum number of nodes, find the maximum number of unidirectional pairs.\n\nFirst, let's parse the definitions again. A p-reachable graph has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. Wait, but the problem says \"exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\" So for each pair where u < v, if they can reach each other, that counts towards p. So the total number of such pairs must be exactly p.\n\nThe first part is to find the minimal number of nodes needed so that such a graph exists. Then, among all such graphs with that minimal node count, find the maximum number of unidirectional pairs. \n\nLet me think about what the minimal number of nodes would be. Let's think about how many pairs (u, v) with u < v there are in a graph with n nodes. That's C(n, 2) = n*(n-1)/2. But for each such pair, they might be reachable from each other or not. The p-reachable condition requires that exactly p of those pairs are mutually reachable. \n\nBut the problem is to find the minimal n such that there exists a graph where exactly p of these pairs are mutually reachable. \n\nSo how do we model this? Well, perhaps the minimal n is determined by finding the smallest n where the maximum possible number of mutual pairs is at least p, but maybe not. Wait, no. Because the problem allows any graph structure as long as exactly p pairs are mutual. So for example, if p is zero, then the minimal number of nodes is 1 (since there are no pairs to consider). Or wait, when n=1, there are no pairs (u, v) with u < v. So for p=0, the minimal n is 1? But the sample input includes p=0, and the output is 0 0. Wait, looking at the sample input:\n\nSample input includes 0, and the output is '0 0'. Wait, the third example in the sample input is 0, output is 0 0. Wait, but for p=0, the graph needs to have exactly 0 mutual pairs. So for example, a graph with n nodes where no two nodes are mutually reachable. What's the minimal n?\n\nWait, for n=1, there are no pairs, so p=0 is achieved. But the sample output for p=0 is 0 0. Hmm, but the sample input shows that for p=0, the output is 0 0. Wait, the sample input given is:\n\nInput is ['3', '4', '0'], and the output is ['3 0', '5 6', '0 0'].\n\nWait, for p=0, the output is 0 0. But that suggests that for p=0, the minimal number of nodes is 0? That doesn't make sense. Wait, maybe there's a mistake here. Let me check the note again. Oh, the note says that for the first test case (p=3), the minimal number of nodes is 3. Let me think about that.\n\nWait, the problem says that the graph is directed. So for a graph with n nodes, the number of ordered pairs (u, v) with u != v is n*(n-1). But the p-reachable condition counts only those pairs where u < v and they are mutually reachable. So the count is for unordered pairs, but considering u < v. So for example, if u and v are mutually reachable, then (u, v) and (v, u) are both ordered pairs, but in the p-reachable count, only one of them is considered (the one with u < v).\n\nSo for the p-reachable condition, the number of such pairs is exactly p. So the problem reduces to choosing a graph where exactly p such unordered pairs are mutually reachable.\n\nNow, the first part is to find the minimal number of nodes n such that there exists a graph where exactly p of the C(n, 2) possible unordered pairs are mutually reachable. \n\nBut how to model this? Well, perhaps the minimal n is the minimal integer such that C(n, 2) >= p. Wait, no. Because if you have a graph where all pairs are mutually reachable, then the number of such pairs is C(n, 2). But if you need exactly p, then perhaps the minimal n is the minimal n where C(n, 2) >= p. But that's not necessarily true. For example, if p is 3, then C(3, 2) is 3. So you can have a graph where all pairs are mutually reachable, which would give exactly 3 pairs. Hence, the minimal n is 3. Which matches the first sample input. \n\nBut for p=4, the minimal n would be 4? Because C(4, 2) is 6. So you can have a graph where exactly 4 of those pairs are mutually reachable. But how? Well, maybe by having some structure where certain pairs are mutually reachable and others are not. But how to arrange that?\n\nBut the question is to find the minimal n such that it's possible to have exactly p pairs. So the minimal n is the smallest n where C(n, 2) >= p. Because if you can have a graph where exactly p pairs are mutual, then n must be such that C(n, 2) is at least p. But maybe there's a way to have a smaller n? No, because for n nodes, the maximum number of mutual pairs is C(n, 2). So if p exceeds that, you need more nodes. So the minimal n is the smallest integer such that C(n, 2) >= p. Wait, but what if p is less than C(n, 2)? Then you can have a graph where exactly p pairs are mutual. For example, take a complete graph (all pairs are mutual) and remove some edges. Wait, but how does that affect the mutual reachability? Because if you have a graph where some pairs are not connected, but others are. But perhaps the easiest way is to have a graph where exactly p pairs are mutual. So for example, you can have a graph where exactly p pairs are mutual and the rest are not. But how?\n\nBut maybe the minimal n is determined by the minimal n where C(n, 2) >= p. Because if you have n nodes, you can arrange the mutual pairs to be exactly p. For example, take a graph where you have a complete DAG (like a tournament graph) where for each pair, there is exactly one direction. But that would have zero mutual pairs. Alternatively, perhaps the way to get exactly p mutual pairs is to have a graph where some subset of the pairs are in a strongly connected component (SCC), and others are not. \n\nBut perhaps the minimal n is the minimal n where C(n, 2) >= p. Because if you can have a graph with exactly p mutual pairs, then that's possible. So for example, take a graph with n nodes where exactly p pairs are in a single strongly connected component (so they are mutually reachable), and the rest of the pairs are arranged in a way that they are not mutually reachable. \n\nWait, but how to arrange that. Suppose you have a single strongly connected component of size k. Then, the number of mutual pairs is C(k, 2). Then, if you have other nodes that are not connected to this component, but perhaps arranged in a way that they don't form any mutual pairs. So, for example, if you have a single strongly connected component of size k, and the rest of the nodes are arranged in a DAG with no cycles. Then, the number of mutual pairs is C(k, 2). \n\nSo, if you want to have exactly p mutual pairs, you can choose k such that C(k, 2) = p. If not, you can have k such that C(k, 2) is the closest to p. But how to get exactly p?\n\nAlternatively, perhaps the minimal n is the minimal n where C(n, 2) >= p, and then the number of mutual pairs is p. But how to achieve that?\n\nWait, for example, if n is such that C(n, 2) >= p, then you can have a graph where exactly p of the pairs are in a strongly connected component. For example, take a complete graph on k nodes, where k is chosen so that C(k, 2) = p. Then, the minimal n is k. But if p is not a triangular number, then you need to have a larger n. \n\nWait, but perhaps the minimal n is determined by the minimal n where C(n, 2) >= p. Because even if p is not exactly a triangular number, you can have a graph where some of the pairs are in a strongly connected component (say, size m) and others are arranged in a way that they don't contribute. For example, suppose p is 4. Then the minimal n is 3, since C(3, 2) = 3 < 4. So n must be 4, since C(4, 2) = 6 >=4. Then you can have a graph where exactly 4 pairs are mutual. How? Maybe have a strongly connected component of size 3 (which gives 3 mutual pairs) and another node that has some edges. But how to add another mutual pair. Alternatively, create a strongly connected component of size 4, and then remove two pairs from it. But how to do that without creating new mutual pairs. \n\nHmm, this seems complicated. But perhaps the minimal n is the minimal n such that C(n, 2) >= p. Because for any p, you can have a graph that has exactly p mutual pairs by having a strongly connected component of size m where C(m, 2) is as close as possible to p, and then adding other nodes that don't contribute any mutual pairs. \n\nBut then, how to find the minimal n. For example, if p is 4, then the minimal n is 4. Because C(3, 2) = 3 <4, so n=4. Then, in that case, you can have a graph where exactly 4 pairs are mutual. For example, take a complete graph on 4 nodes (which has 6 mutual pairs) and then remove two pairs. But how to ensure that removing those pairs doesn't create any new mutual pairs. Wait, but if you have a complete graph, and you remove some edges, but ensure that the remaining graph still has some strongly connected components. \n\nAlternatively, perhaps the minimal n is determined by the minimal n where C(n, 2) >= p. Because in that case, you can have a graph where exactly p mutual pairs exist. For example, take a graph that is a DAG with no cycles, except for a single strongly connected component. For instance, suppose you have a strongly connected component of size m, and the rest of the nodes form a DAG that points to the component. Then, the mutual pairs are exactly C(m, 2). So if you can choose m such that C(m, 2) = p, then n = m. Otherwise, you need to have n such that C(n, 2) >= p. \n\nBut then, for p=4, the minimal n would be 4, since C(3, 2) is 3 <4. But then, how can you have exactly 4 mutual pairs? Because C(4, 2) is 6. So you could have a graph where exactly 4 of the pairs are mutual. But how?\n\nMaybe the answer is that the minimal n is the minimal n such that C(n, 2) >= p. Because even if you can't have exactly p mutual pairs, but you can have a graph that has exactly p. Wait, but how?\n\nAlternatively, perhaps the minimal n is determined by the minimal n such that the maximum number of mutual pairs possible with n nodes is at least p. Because if you can have a graph where the number of mutual pairs is exactly p, then that's possible. But how?\n\nThis seems tricky. Let's look at the sample input. For p=3, the minimal n is 3, which is exactly C(3, 2) = 3. So that makes sense. For p=4, the sample output is 5 6. Wait, no. Wait, looking at the sample input, the second example is input 4, output is 5 6. Wait, that's strange. Let me check the sample input again.\n\nIn the sample input, the second input is 4, and the output is '5 6'. Wait, that suggests that for p=4, the minimal number of nodes is 5. But according to my previous reasoning, C(4, 2) is 6 >=4, so why isn't the minimal n 4?\n\nThis indicates that my initial reasoning was wrong. So I need to re-examine the problem.\n\nLet me look at the sample input for p=4. Output is 5 6. So for p=4, the minimal number of nodes is 5. But that contradicts the idea that n is the minimal such that C(n, 2) >= p. For n=4, C(4, 2)=6 >=4. So why is the minimal n 5 in the sample?\n\nWait, that suggests that perhaps my understanding of the problem is incorrect. Let me re-read the problem statement.\n\nThe problem defines a p-reachable graph as one that contains exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So the count is the number of unordered pairs (u, v) with u < v that are mutually reachable. \n\nWait, but how can you have exactly p such pairs? For example, in a graph with n nodes, if you have a single strongly connected component (SCC) of size m, then the number of mutual pairs is C(m, 2). All other pairs (u, v) where u is in the SCC and v is not, or vice versa, may not be mutually reachable. But if you have multiple SCCs, then pairs between different SCCs may or may not be mutually reachable. \n\nSo, perhaps the minimal number of nodes is not determined by C(n, 2) >= p. Let's think of the sample case where p=4. The output is 5 nodes. So for n=5, the minimal number of nodes is 5. How can that be?\n\nWait, perhaps the problem is that the number of mutual pairs cannot be arbitrary. For example, in a graph with n nodes, the number of mutual pairs is determined by the structure of the SCCs. For example, if you have two SCCs, say of sizes a and b, then the number of mutual pairs is C(a, 2) + C(b, 2). Also, pairs between the two components are not mutually reachable if there is no path from one to the other. But if there is a path from one to the other, then maybe they are not mutually reachable. So the total number of mutual pairs depends on the structure of the SCCs.\n\nTherefore, the problem of finding the minimal n is equivalent to finding the minimal n such that there exists a set of integers {k_1, k_2, ..., k_m} where sum_{i} C(k_i, 2) = p, and sum_{i} k_i = n. Because each SCC contributes C(k_i, 2) mutual pairs. So the total mutual pairs is the sum over all SCCs of C(k_i, 2).\n\nTherefore, the problem reduces to finding the minimal n such that p can be expressed as the sum of C(k_i, 2) for some partition of n into k_i's. \n\nAh! Now this makes sense. Because for example, for p=4, the minimal n is 5. Because:\n\nIf we try to split into a single component, then C(k, 2) =4 → k(k-1)/2=4 → k^2 -k -8=0 → solution is (1+sqrt(33))/2 ~ 2.37. Not integer. So no solution. So the next option is to split into two components. For example, C(3,2) + C(2,2) = 3 + 1 =4. The sum of sizes is 3+2=5. So n=5. Hence, the minimal n is 5.\n\nAh! Now that explains the sample input. For p=4, the minimal n is 5. Which is better than trying to use n=4. Because with n=4, the possible ways to split into components are:\n\nPossible partitions:\n\n- One component of size 4: C(4,2) =6>4. Not acceptable.\n\n- Two components: 3+1. C(3,2)+C(1,2)=3+0=3 <4.\n\n- 2+2: C(2,2)*2 =1+1=2 <4.\n\n- 2+1+1: sum is 1+0+0=1 <4.\n\nSo no way to get 4. Hence, n=4 is not possible. Thus, the minimal n is 5.\n\nSo now the problem becomes: find the minimal n such that p can be written as the sum of C(k_i, 2), where the sum of k_i is n. And then, for that n, find the maximum number of unidirectional pairs.\n\nSo the first step is to find the minimal n such that p can be written as sum of C(k_i, 2) for some decomposition of n into k_i's. \n\nHow to compute this?\n\nThe approach for the first part (finding minimal n) would be to find the minimal n where p can be represented as the sum of combinations of C(k_i, 2), with sum k_i =n.\n\nBut how to find this n?\n\nAn efficient way would be to think greedily. For a given p, the minimal n is achieved by using as large as possible C(k,2) terms. For example, for p=4, the largest C(k,2) less than or equal to p is 3 (C(3,2)), then we have 1 left. Then, the next largest is C(2,2)=1. So total sum is 3+1=4. The total n is 3+2=5.\n\nSimilarly, for p=3, we can have a single term C(3,2)=3. So n=3.\n\nFor p=6, C(4,2)=6 → n=4.\n\nSo the strategy is to find the minimal n by decomposing p into the sum of C(k_i, 2), where each term is as large as possible.\n\nThis seems similar to the problem of representing numbers as sums of triangular numbers. So the minimal n is the sum of the k_i's, where each k_i is chosen to be as large as possible for each step.\n\nSo the algorithm for the first part (minimal n) is:\n\nInitialize n =0, remaining_p =p.\n\nWhile remaining_p >0:\n\n   Find the largest k such that C(k,2) ≤ remaining_p.\n\n   Add k to n.\n\n   Subtract C(k,2) from remaining_p.\n\nThis would give us the minimal n. \n\nWait, but is this correct? Let's test it for p=4:\n\nremaining_p=4. Largest k with C(k,2) ≤4 is 3 (C(3,2)=3). Subtract 3, remaining_p=1. Next largest k for 1 is 2 (C(2,2)=1). Subtract 1, remaining_p=0. Total n=3+2=5. Correct.\n\nAnother example: p=5. The largest k is 3 (3), remaining_p=2. Next largest is 2 (1), remaining_p=1. Then next is 2 again (another 1). But then total sum would be 3+2+2=7. But wait, there's a better way. For example, 3+2+... no. Wait, can we have 2+2+2? C(2,2)*3=3. No. 5 can't be represented as sum of C(k_i, 2). Wait, let me see:\n\nAlternative decomposition: C(3,2) + C(2,2) = 3+1=4. Then remaining_p is 1. Then add another C(2,2) → sum is 3+1+1=5. So total n is 3+2+2=7. But is there a better way? Like, C(4, 2) is 6 which is larger than 5. So can't take that. What about C(3,2) + C(2,2) + C(2,2) = 3+1+1=5. So yes, that's 3+2+2=7. Another possibility is C(3,2) + C(3,2) - but that would be 3+3=6>5. No. So the minimal n is 7.\n\nBut what if there's another way? For example, maybe using a larger k? Let me think. Suppose we take k=4, but subtract something. But no, since the decomposition requires that the sum of C(k_i, 2) equals exactly p. So for p=5, the minimal n is 7.\n\nBut is there a way to get a smaller n? For example, can we have a decomposition of 5 into C(3, 2) + C(2, 2) + C(2, 2) =3+1+1=5. Sum of k's is 3+2+2=7. Or maybe another combination. For example, C(3,2) + C(3, 2) - but that's 6, which is too big. Or C(3,2) + C(2,2) + C(1, 2) → 3+1+0=4. No. So I think 7 is indeed the minimal n for p=5.\n\nThus, the greedy approach of taking the largest possible k at each step seems to work for finding the minimal n. So the first part of the problem is to compute this minimal n.\n\nOnce we have the minimal n, the next part is to find the maximum number of unidirectional pairs among all such graphs with minimal n.\n\nNow, what is a unidirectional pair? It's an ordered pair (u, v) where u !=v, there's a path from u to v, but no path from v to u. So the number of such pairs is the total number of ordered pairs (u, v) with u !=v, minus the number of pairs where u and v are mutually reachable (which is 2p?), minus the number of pairs where neither can reach each other.\n\nWait, no. Let me think again. The total number of ordered pairs (u, v) with u !=v is n*(n-1). Among these:\n\n- Some pairs are mutually reachable (each such unordered pair contributes two ordered pairs, (u, v) and (v, u)).\n\n- Some pairs are unidirectional (either u can reach v but not vice versa, or vice versa).\n\n- Some pairs are not reachable in either direction.\n\nBut the problem defines unidirectional pairs as ordered pairs (u, v) where u !=v, there's a path from u to v, and no path from v to u. So the count is the number of such ordered pairs.\n\nBut how to compute this for a graph with a given structure.\n\nBut the problem states that for the minimal n, we have to choose a graph that maximizes the number of unidirectional pairs.\n\nSo for the minimal n, which is determined by the decomposition of p into sum of C(k_i, 2), the maximum number of unidirectional pairs depends on the structure of the graph's SCCs.\n\nLet me think about the structure of the graph. To maximize the number of unidirectional pairs, we need to arrange the SCCs in a way that maximizes the number of ordered pairs that are unidirectional.\n\nSuppose we have a set of SCCs. Let's say the sizes are k_1, k_2, ..., k_m. The number of mutual pairs is sum C(k_i, 2) = p.\n\nNow, for the unidirectional pairs, they can come from two sources:\n\n1. Within each SCC: since all nodes in an SCC are mutually reachable, there are no unidirectional pairs within an SCC.\n\n2. Between different SCCs. Suppose there are two SCCs A and B. If there is a path from A to B but not from B to A, then for every pair (a in A, b in B), there is a path from a to b (so it's a unidirectional pair if there's no path from b to a). Similarly, for pairs (b, a) where a is in A and b in B, if there's no path from b to a, then (b, a) is not unidirectional.\n\nSo to maximize the number of unidirectional pairs, we need to arrange the SCCs in a DAG structure where between any two SCCs, there is a directed edge from one to the other, but not the reverse. So the DAG of SCCs is a linear order, with each SCC pointing to all the ones after it.\n\nIn this case, for any two SCCs A and B, where A comes before B in the DAG, all pairs (a in A, b in B) are unidirectional (since there's a path from a to b, but none from b to a). Similarly, pairs (b in B, a in A) are not unidirectional because there's no path from b to a.\n\nSo the total number of unidirectional pairs between different SCCs is the sum for all pairs of SCCs (A, B) where A is before B in the DAG of the product of their sizes multiplied by 1 (since each such pair contributes one unidirectional pair (a, b)).\n\nSo the total unidirectional pairs is the sum_{i < j} (size_i * size_j) * 1 * 2? Wait, no. Wait, for each ordered pair (A, B) where A comes before B, we have size_A * size_B unidirectional pairs (from A to B). And for the reverse direction, since there's no path from B to A, those pairs (B, A) are not unidirectional. So the total is sum_{i < j} (size_i * size_j) * 1.\n\nBut wait, in the DAG structure where each SCC points to all later ones, the number of unidirectional pairs is the sum over all i < j of size_i * size_j. Because for each pair (a in A_i, b in A_j), where i < j, there's a path from a to b, but not the reverse. So the ordered pair (a, b) is unidirectional. The number of such ordered pairs is size_i * size_j.\n\nSo the total unidirectional pairs is sum_{i < j} (size_i * size_j).\n\nAdditionally, there are the pairs between nodes in different SCCs where there's no path between them. For example, if there are three SCCs A, B, C, and the DAG is A -> B, A -> C, B -> C. Then, between A and C, there's a path from A to C. Between B and C, path from B to C. Between A and B, path from A to B. So all pairs between different SCCs are covered. So the total unidirectional pairs is sum_{i<j} size_i * size_j.\n\nSo the maximum number of unidirectional pairs is achieved when the DAG of SCCs is a linear chain, with each SCC pointing to all the following ones. In this case, the number of unidirectional pairs is sum_{i<j} size_i * size_j.\n\nNow, the sum of size_i * size_j for all i < j can be computed as (total^2 - sum size_i^2) / 2. Because sum_{i !=j} size_i * size_j = (sum size_i)^2 - sum size_i^2. And since sum_{i <j} size_i size_j = [ (sum size_i)^2 - sum size_i^2 ] / 2.\n\nSo for the given decomposition of n into sizes k_1, k_2, ..., k_m, the maximum number of unidirectional pairs is (n^2 - sum (k_i^2 )) / 2.\n\nBut wait, the sum of the sizes is n. So sum_{i} size_i = n. So the formula becomes:\n\nunidirectional_pairs = [n^2 - sum (k_i^2)] / 2.\n\nSo the problem now reduces to, for the decomposition of p into sum C(k_i, 2), find the decomposition that minimizes sum (k_i^2), because that would maximize the unidirectional pairs (since the formula is [n² - sum k_i²]/2).\n\nWait, no. Because the formula is [n² - sum k_i²]/2. To maximize this, we need to minimize sum k_i². Because n is fixed (it's the minimal n found earlier). \n\nYes. So for the same minimal n, the way to maximize the number of unidirectional pairs is to choose the decomposition of p into sum C(k_i, 2) that minimizes the sum of squares of the k_i's.\n\nBut how to do that? Because the first part of the problem (finding minimal n) uses a greedy approach of taking the largest possible k_i's. However, this may not lead to the minimal sum of squares. For example, suppose there are two possible decompositions of p into sum of C(k_i, 2) with the same n. Which one gives the minimal sum of squares?\n\nLet me think of an example. Suppose p=4. The decomposition is 3+1 (C(3,2) + C(1, 2) =3 +0=3? No. Wait, earlier for p=4, the decomposition was 3 and 2, which sum to 3+1=4. So the sum of squares is 3² + 2² = 9 +4=13. What if there's another decomposition with the same n=5?\n\nIs there another way to write p=4 as sum of C(k_i, 2) with sum of k_i=5?\n\nFor example, 2+2+1: C(2,2)+C(2,2)+C(1,2)=1+1+0=2 <4. Not enough. Or 2+3: same as before. So no, the only decomposition is 3 and 2. So sum of squares is 13.\n\nBut if the decomposition is different, for example, 4 and 1. But C(4,2) is 6 which is larger than 4. So that's not allowed. So no.\n\nAnother example: p=5. Earlier, the decomposition was 3+2+2, which sum to 3+2+2=7. The sum of squares is 9 +4 +4 =17. Is there another decomposition for p=5 with the same n=7?\n\nLet me see. Can I have 3+3? C(3,2) is 3. 3+3=6>5. No. What about 3+2+ something. For example, 3+2+1: sum is 3+1+0=4. Not enough. 3+2+2 is 3+1+1=5. So that's the only way. So sum of squares is 3² + 2² + 2²= 9+4+4=17.\n\nSo the sum of squares is fixed once the decomposition is determined. But how to find the decomposition that gives the minimal sum of squares for the same n?\n\nBut the way we found the minimal n was by taking the largest possible k_i's. However, perhaps there are alternative decompositions that give the same n, but with a smaller sum of squares. For example, suppose p=6. The decomposition could be 4 (C(4,2)=6) which gives sum of squares 16. Alternatively, 3+3 (C(3,2) + C(3,2) =3+3=6). Sum of squares is 9+9=18. Which is larger than 16. So the first decomposition is better. Hence, the greedy approach of taking the largest possible k_i gives the minimal sum of squares.\n\nAnother example: p=5. Let's say we have to take 3+2+2 (sum of squares 17). Is there another decomposition with same n=7? Like 2+2+2+1: sum C(2,2)*3 + C(1,2) = 3*1 + 0 =3 <5. No. So no. Hence, the decomposition is unique.\n\nSo perhaps the way to find the decomposition that minimizes sum of squares is to take the largest possible k_i's. Hence, during the process of finding the minimal n, we can also track the decomposition of p into k_i's, and then compute sum of squares.\n\nSo the steps are:\n\n1. Find the minimal n by decomposing p into sum of C(k_i, 2), using the greedy approach of taking the largest possible k_i at each step.\n\n2. Once the decomposition is known (the list of k_i's), compute the sum of squares of the k_i's.\n\n3. Compute the number of unidirectional pairs as (n^2 - sum_k_squares) // 2.\n\nBut wait, for the first part of the problem, the decomposition of p into k_i's is determined by the greedy approach. However, there may be other decompositions with the same n but different sum of squares. But how?\n\nBut according to the previous examples, the greedy approach leads to the minimal sum of squares. Hence, we can proceed with that.\n\nSo, the plan for the code is:\n\nFor a given p:\n\n- If p=0, then the minimal n is 0? Or wait, when p=0, the graph must have exactly zero mutual pairs. Which means that no two nodes are mutually reachable. The minimal n is 1 (since with n=1, there are no pairs to consider). But the sample input for p=0 outputs '0 0'. Wait, but looking at the sample input:\n\nThe third input is 0, and the output is '0 0'.\n\nWait, that's conflicting with the earlier analysis. Let me check the note again. The note says that for p=0, the output is 0 0. But according to the problem statement, the graph must contain exactly p ordered pairs (u, v) with u <v and mutual reachability. For p=0, the graph can be any graph with no mutual pairs. For example, a graph with n=1 has no such pairs. So the minimal n is 1. But the sample output for p=0 is 0 0. This suggests that perhaps the minimal n is 0 when p=0. But that's impossible, since a graph with 0 nodes has no pairs. So the problem may have a special case for p=0.\n\nLooking back at the sample input:\n\nSample input is ['3', '4', '0'] and output is ['3 0', '5 6', '0 0'].\n\nSo for p=0, the output is 0 0. But according to the problem statement, the minimal number of nodes required is 0? That can't be. Because the problem says that the graph is a directed graph, which requires nodes. So perhaps the problem allows n=0 when p=0. But that seems odd. However, the sample says that for p=0, the output is 0 0. So we have to handle this case as a special case.\n\nSo, the code needs to handle p=0 specially. Let's think:\n\nWhen p=0, the number of mutual pairs is zero. So the graph can be any graph where no two nodes are mutually reachable. For example, a graph with n=1 has no pairs, so p=0. So the minimal n is 1. But the sample says for p=0, the output is 0 0. So there's a contradiction here. But the sample input must be correct. Let me check the sample again.\n\nIn the sample input, the third example is input 0, output is 0 0. According to the note, for p=0, the output is 0 0. But according to our previous analysis, the minimal n is 1. What's the reason for this discrepancy?\n\nAh, perhaps the problem defines that the graph must have at least one node. But for p=0, the minimal n is 0? That's impossible. Wait, perhaps the problem allows n=0. But then, the number of ordered pairs (u, v) with u <v is zero. Hence, the p=0 is satisfied. So for p=0, the minimal n is 0. But then, the number of unidirectional pairs is zero. Hence, the sample output is 0 0. So the code needs to handle p=0 as a special case where n=0 and unidirectional pairs is 0.\n\nBut why would the problem allow n=0? Well, perhaps the problem considers that a graph with zero nodes is valid. So for p=0, the minimal n is 0.\n\nSo, the code needs to handle p=0 as follows:\n\nif p == 0:\n\n   return (0, 0)\n\nElse:\n\n   proceed with the decomposition.\n\nBut wait, let's think again. For p=0, the number of mutual pairs is zero. So the graph can be any graph where there are no pairs",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs among all such graphs with the minimum number of nodes.\n\n### Approach\n\n1. **Understanding p-reachable Graphs**: A p-reachable graph has exactly `p` ordered pairs (u, v) where `u < v` and both nodes are mutually reachable. The goal is to find the minimum number of nodes required to achieve this and then maximize the number of unidirectional pairs in such graphs.\n\n2. **Decomposing p into Triangular Numbers**: The number of mutual pairs in a strongly connected component (SCC) of size `k` is given by the triangular number `C(k, 2) = k*(k-1)/2`. We decompose `p` into the sum of such triangular numbers to determine the minimum number of nodes required.\n\n3. **Greedy Decomposition**: To find the minimum number of nodes, we use a greedy approach to decompose `p` into the largest possible triangular numbers. This ensures we use the fewest nodes possible.\n\n4. **Maximizing Unidirectional Pairs**: Once we have the minimum number of nodes, we calculate the maximum number of unidirectional pairs using the formula derived from the structure of SCCs and their arrangement in a DAG.\n\n### Solution Code\n\n```python\nimport sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    # Find minimal n\n    n = 0\n    remaining_p = p\n    components = []\n    \n    while remaining_p > 0:\n        # Find the largest k such that k*(k-1)//2 <= remaining_p\n        k = 1\n        while (k * (k - 1)) // 2 <= remaining_p:\n            k += 1\n        k -= 1\n        components.append(k)\n        remaining_p -= (k * (k - 1)) // 2\n        n += k\n    \n    # Now compute the maximum number of unidirectional pairs\n    sum_k_squared = sum(k*k for k in components)\n    total_unidirectional = (n * n - sum_k_squared) // 2\n    print(f\"{n} {total_unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Special Case for p=0**: If `p` is 0, the minimum number of nodes required is 0, and there are no unidirectional pairs, hence the output is \"0 0\".\n\n2. **Greedy Decomposition**: For each value of `p`, we repeatedly find the largest integer `k` such that the triangular number `C(k, 2)` is less than or equal to the remaining value of `p`. This helps in minimizing the number of nodes needed.\n\n3. **Sum of Squares Calculation**: After determining the components (sizes of SCCs), we calculate the sum of their squares to use in the formula for unidirectional pairs. The formula `(n^2 - sum_k_squared) // 2` gives the maximum number of unidirectional pairs based on the structure of the SCCs arranged in a DAG.\n\nThis approach ensures that we efficiently determine the minimum number of nodes and maximize the unidirectional pairs using mathematical decomposition and properties of strongly connected components.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    # Find minimal n\n    n = 0\n    remaining_p = p\n    components = []\n    \n    while remaining_p > 0:\n        # Find the largest k such that k*(k-1)//2 <= remaining_p\n        k = 1\n        while (k * (k - 1)) // 2 <= remaining_p:\n            k += 1\n        k -= 1\n        components.append(k)\n        remaining_p -= (k * (k - 1)) // 2\n        n += k\n    \n    # Now compute the maximum number of unidirectional pairs\n    sum_k_squared = sum(k*k for k in components)\n    total_unidirectional = (n * n - sum_k_squared) // 2\n    print(f\"{n} {total_unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 481,
        "completion_token_count": 719,
        "thoughts_token_count": 8192
    }
}