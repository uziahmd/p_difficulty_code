{
    "start": 1758312760.7647688,
    "end": 1758312837.298403,
    "start-formatted": "2025-09-20 05:12 KST",
    "end-formatted": "2025-09-20 05:13 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where they have the maximum mark for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the first student's marks for three subjects.\n\nThe plan is:\n\n1. For each subject (column), find the maximum mark.\n2. For each student, check if in any of the subjects they have the maximum mark for that subject. If yes, they are successful.\n3. Count how many such students there are.\n\nWait, but how do I process the data? Let's think about the structure.\n\nLet me think: the gradebook can be represented as a 2D list. Each row is a student, each column is a subject.\n\nSo for each column (subject), find the maximum value. Then, for each student, check if in any of the columns they have the max value for that column.\n\nSo, for example, for the first sample input:\n\n3 3\n223\n232\n112\n\nThe subjects are columns 0, 1, 2.\n\nFor column 0: the values are 2, 2, 1. Max is 2. So any student with 2 in column 0 would be best in that subject. So student 1 and 2 have 2 here. But wait, the first student's first subject is 2, which is the max. So student 1 is best in subject 0. Similarly for student 2.\n\nBut for column 1: values are 2, 3, 1. Max is 3. Only student 2 has that. So student 2 is best in subject 1.\n\nColumn 2: values are 3, 2, 2. Max is 3. Only student 1 has that. So student 1 is best in subject 2.\n\nSo student 1 is best in two subjects, student 2 in two, student 3 in none. Hence total successful is 2.\n\nSo the approach is correct.\n\nSo steps:\n\n1. Read n and m.\n\n2. Read the next n lines, each line being a string of m digits. Convert each into a list of integers, perhaps. So for each student, their marks are stored as a list of integers.\n\n3. For each subject (each column), find the maximum value. So for each column j in 0..m-1, compute max of all students' marks in j.\n\nOnce we have these max values per subject, then for each student, check if in any of the subjects they have the max value for that subject. If yes, count them.\n\nSo the key is to compute for each column the maximum, then check for each student if they have at least one of those max values in their row.\n\nNow, how to implement this in Python.\n\nLet me think about the code structure.\n\nRead n and m. Then read n lines. Let's process the lines into a 2D list.\n\nFor example, for the first input, the lines are '223', '232', '112'. So the 2D list would be:\n\nstudent_marks = [\n    [2,2,3],\n    [2,3,2],\n    [1,1,2]\n]\n\nThen, for each column j, compute the max. Let's create a list called max_per_subject. For j in 0 to m-1:\n\nmax_per_subject[j] = max of all student_marks[i][j] for i in 0..n-1.\n\nOnce that's done, for each student, check if any of their marks in any subject is equal to the max_per_subject for that subject.\n\nIf at least one such exists, increment the count.\n\nSo, for each student in student_marks:\n\nfor i in range(n):\n    for j in range(m):\n        if student_marks[i][j] == max_per_subject[j]:\n            mark this student as successful and break.\n\nSo, the code steps:\n\nRead n and m.\n\nRead the next n lines, each line is a string. For each line, convert into a list of integers.\n\nThen compute max_per_subject for each column.\n\nThen, for each student, check if any of their marks in any column is equal to the max_per_subject for that column.\n\nCount how many students satisfy this.\n\nNow, how to handle the columns.\n\nFor example, for the first student_marks, the columns are:\n\ncol 0: 2,2,1 → max 2\n\ncol 1: 2,3,1 → max 3\n\ncol 2: 3,2,2 → max 3.\n\nSo max_per_subject = [2,3,3]\n\nThen, for each student:\n\nstudent 0: [2,2,3]. Check each column:\n\ncol 0: 2 == 2 → yes. So this student is successful.\n\nstudent 1: [2,3,2]. col 1: 3 == 3 → yes. So successful.\n\nstudent 2: [1,1,2]. Check each column:\n\ncol 0: 1 < 2 → no. col1: 1 <3 → no. col2: 2 <3 → no. So not successful. So total is 2.\n\nWhich matches the example.\n\nSo the code seems correct.\n\nNow, how to implement this in Python.\n\nFirst, read n and m. Then read n lines. Let's process each line into a list of integers.\n\nFor example:\n\nn, m = map(int, input().split())\n\nThen, student_marks = []\n\nfor _ in range(n):\n\n    line = input().strip()\n\n    row = [int(c) for c in line]\n\n    student_marks.append(row)\n\nThen compute max_per_subject.\n\nmax_per_subject = [0] * m\n\nfor j in range(m):\n\n    max_val = 0\n\n    for i in range(n):\n\n        if student_marks[i][j] > max_val:\n\n            max_val = student_marks[i][j]\n\n    max_per_subject[j] = max_val\n\nAlternatively, using list comprehensions. For each column j, take the max of [student_marks[i][j] for i in range(n)].\n\nOnce that's done, for each student, check if any of their marks in their row equals the max_per_subject for that column.\n\ncount = 0\n\nfor i in range(n):\n\n    for j in range(m):\n\n        if student_marks[i][j] == max_per_subject[j]:\n\n            count +=1\n\n            break\n\nSo, for each student, once we find one subject where they are the best, we count them and break.\n\nSo that's the plan.\n\nNow, let's test the second example:\n\nInput is 3 5\n\n91728\n\n11828\n\n11111\n\nSo student_marks:\n\nstudent 0: [9,1,7,2,8]\n\nstudent 1: [1,1,8,2,8]\n\nstudent 2: [1,1,1,1,1]\n\nmax_per_subject:\n\nfor each column:\n\ncol0: 9,1,1 → max 9\n\ncol1: 1,1,1 → max 1\n\ncol2:7,8,1 → max 8\n\ncol3:2,2,1 → max 2\n\ncol4:8,8,1 → max 8.\n\nSo max_per_subject is [9,1,8,2,8]\n\nNow check each student:\n\nstudent 0:\n\nhas 9 in col0 (which is max). So yes.\n\nstudent 1: check each column. col2 has 8 which is max (8). So yes.\n\nstudent 2: check each column. For col1, he has 1 which is max. So yes.\n\nHence all 3 students are successful. Which matches the example.\n\nSo the code works.\n\nEdge cases to consider:\n\nCase where all students have same marks. For example, n=2, m=1, all marks 5. Then each student is best in the subject. So count is 2.\n\nAnother case: n=1, m=1. Then the student is successful.\n\nAnother case: n=1, m=5. All marks are 5. So the student is successful.\n\nAnother case: n=2, m=2. Student1 has [1,2], student2 has [2,1]. max_per_subject is [2,2]. Both students have one subject each where they are best. So both are successful. So count is 2.\n\nSo code should handle all these.\n\nNow, coding in Python.\n\nNow, the code:\n\nRead n and m.\n\nThen read n lines, each as a list of integers.\n\nCompute max_per_subject for each column.\n\nThen for each student, check if any of their marks in any column is equal to the max for that column.\n\nNow, code:\n\nRead input. But note that in the problem statement, the input is given as a list of inputs. Wait, no. The problem says that the input is read from stdin. So the user will provide the input as per the standard input.\n\nBut the sample input shows that for example, the first input is:\n\n3 3\n\n223\n\n232\n\n112\n\nBut in the code, the input is read via input() function.\n\nSo the code would be:\n\nRead n and m.\n\nThen read n lines, each line is a string, then convert into a list of integers.\n\nSo the code:\n\nn, m = map(int, input().split())\n\nstudent_marks = []\n\nfor _ in range(n):\n\n    line = input().strip()\n\n    row = [int(c) for c in line]\n\n    student_marks.append(row)\n\nThen compute max_per_subject.\n\nmax_per_subject = [0]*m\n\nfor j in range(m):\n\n    max_val = 0\n\n    for i in range(n):\n\n        if student_marks[i][j] > max_val:\n\n            max_val = student_marks[i][j]\n\n    max_per_subject[j] = max_val\n\nThen count the successful students.\n\ncount = 0\n\nfor i in range(n):\n\n    for j in range(m):\n\n        if student_marks[i][j] == max_per_subject[j]:\n\n            count +=1\n\n            break\n\nprint(count)\n\nWait, that's the code. Let's test it against the sample input.\n\nSample Input 1:\n\n3 3\n\n223\n\n232\n\n112\n\nstudent_marks is [[2,2,3], [2,3,2], [1,1,2]]\n\nmax_per_subject for columns:\n\ncol0: 2,2,1 → max 2\n\ncol1: 2,3,1 → max 3\n\ncol2:3,2,2 → max 3.\n\nSo max_per_subject is [2,3,3].\n\nThen for each student:\n\nstudent 0: 2 (col0) == 2 → yes. count increases by 1.\n\nstudent 1: in col1, 3 ==3 → yes. count increases by 1.\n\nstudent 2: none. So total 2. Correct.\n\nSample 2:\n\n3 5\n\n91728\n\n11828\n\n11111\n\nstudent_marks:\n\n[9,1,7,2,8]\n\n[1,1,8,2,8]\n\n[1,1,1,1,1]\n\nmax_per_subject:\n\ncol0: 9,1,1 →9\n\ncol1: 1,1,1 →1\n\ncol2:7,8,1 →8\n\ncol3: 2,2,1 →2\n\ncol4:8,8,1 →8.\n\nso for each student:\n\nstudent 0: has 9 in col0 → yes.\n\nstudent 1: has 8 in col2 (8) → yes.\n\nstudent 2: has 1 in col1 (max is 1) → yes. So all 3 counted.\n\nThus output is 3. Correct.\n\nAnother test case: n=1, m=1. Input is 1 1 followed by 5. Then the code would have max_per_subject [5], and the student is counted. Output 1.\n\nAnother case: n=2, m=1. Input is 2 1, then 5 and 5. Then max is 5. Both students have 5. So both are counted. Output 2.\n\nAnother case: n=2, m=2. Input:\n\n2 2\n\n12\n\n21\n\nmax_per_subject is [2, 2]. For student 0, has 1 in col0 (not max) but 2 in col1 (max). So yes. Student 1 has 2 in col0 (max) and 1 in col1. So yes. So count is 2.\n\nYes.\n\nSo the code seems correct.\n\nNow, code in Python.\n\nBut wait, in Python, when reading input, sometimes there might be leading or trailing spaces, but the problem says that each line is m characters. So the input lines for the gradebook are exactly m characters long. So the code uses line.strip(), but maybe that's not needed. Because for example, if the input line is '223\\n', then stripping would give '223'. But if the line is read with input().strip(), but perhaps the input is given with leading or trailing spaces? According to the problem statement, each line is m characters. So probably, the input lines are properly formatted. However, using line.strip() is safe to remove any leading/trailing whitespace (like newlines or spaces).\n\nBut in the problem statement, the input is given as per the examples. So for example, in the first example, the input lines are '223', '232', '112' — each exactly m characters. So the code should read them correctly.\n\nSo the code is correct.\n\nThus, the code should work.\n",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their grades in various subjects. A student is considered successful if they are the best in at least one subject. The best in a subject means no other student has a higher grade in that subject.\n\n### Approach\n1. **Reading Input**: First, read the number of students (n) and the number of subjects (m). Then, read the gradebook which consists of n lines, each containing m characters representing the grades of students.\n2. **Determine Maximum Grades per Subject**: For each subject (column), compute the maximum grade achieved by any student.\n3. **Identify Successful Students**: For each student, check if they have the maximum grade in any subject. If they do, mark them as successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\nstudent_marks = []\nfor _ in range(n):\n    line = input().strip()\n    row = [int(c) for c in line]\n    student_marks.append(row)\n\nmax_per_subject = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if student_marks[i][j] > max_val:\n            max_val = student_marks[i][j]\n    max_per_subject[j] = max_val\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if student_marks[i][j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)\n```\n\n### Explanation\n1. **Reading Input**: The input is read and stored in a 2D list where each row represents a student and each column represents a subject.\n2. **Compute Maximum Grades per Subject**: For each subject (column), iterate through all students to find the highest grade. This is stored in an array `max_per_subject`.\n3. **Check for Successful Students**: For each student, check if they have the highest grade in any subject. If they do, increment the count of successful students.\n\nThis approach ensures that we efficiently determine the maximum grades for each subject and then check each student against these maximums, leading to an optimal solution with a time complexity of O(n*m), which is efficient given the constraints (n, m ≤ 100).",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\nstudent_marks = []\nfor _ in range(n):\n    line = input().strip()\n    row = [int(c) for c in line]\n    student_marks.append(row)\n\nmax_per_subject = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if student_marks[i][j] > max_val:\n            max_val = student_marks[i][j]\n    max_per_subject[j] = max_val\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if student_marks[i][j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 484,
        "thoughts_token_count": 3033
    }
}