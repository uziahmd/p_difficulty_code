{
    "start": 1758008426.5013902,
    "end": 1758008625.705854,
    "start-formatted": "2025-09-16 16:40 KST",
    "end-formatted": "2025-09-16 16:43 KST",
    "gpu": 2,
    "pid": 2,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Valera and X\n\nValera is a little boy. Yesterday he got a huge Math hometask at school, so Valera didn't have enough time to properly learn the English alphabet for his English lesson. Unfortunately, the English teacher decided to have a test on alphabet today. At the test Valera got a square piece of squared paper. The length of the side equals n squares (n is an odd number) and each unit square contains some small letter of the English alphabet.Valera needs to know if the letters written on the square piece of paper form letter \"X\". Valera's teacher thinks that the letters on the piece of paper form an \"X\", if:  on both diagonals of the square paper all letters are the same;  all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals. Help Valera, write the program that completes the described task for him.\n\n## Input\nThe first line contains integer n (3 ≤ n < 300; n is odd). Each of the next n lines contains n small English letters — the description of Valera's paper.\n\n## Output\nPrint string \"YES\", if the letters on the paper form letter \"X\". Otherwise, print string \"NO\". Print the strings without quotes.\n\n## Example\n### Input\n['5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox', '3\\nwsw\\nsws\\nwsw', '3\\nxpx\\npxp\\nxpe']\n\n### Output\n['NO', 'YES', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where Valera's paper forms an X if certain conditions are met. Let me think about the requirements.\n\nSo, the problem says that the letters form an X if two conditions are satisfied. First, both diagonals have the same letters. Second, all other squares (not on the diagonals) have the same letter, which is different from the diagonal's letter.\n\nHmm. So first, I need to check the diagonals. The main diagonal is from top-left to bottom-right, and the anti-diagonal is from top-right to bottom-left. All the cells in these two diagonals must be the same. Also, all the non-diagonal cells must be the same and different from the diagonal's letter.\n\nWait, but what about overlapping cells? Like, in a square with odd length, the center cell is part of both diagonals. So, for example, in a 3x3 grid, the middle cell is on both diagonals. So when checking the diagonals, we need to make sure that all cells in both diagonals are the same. But since the center is part of both, that's okay as long as all the cells in both diagonals are the same.\n\nSo first step: collect all the characters in the two diagonals and check if they are all the same. Then, collect all the other characters (non-diagonal) and check if they are all the same and different from the diagonal's character.\n\nBut how to collect those?\n\nLet me think about the steps:\n\n1. Read n, then read n lines each of n characters.\n\n2. For each cell (i,j), determine if it's on either of the two diagonals.\n\nFor a square matrix, the main diagonal is where i == j. The anti-diagonal is where i + j == n - 1. Because for 0-based indices, the sum of i and j for the anti-diagonal would be n-1. For example, in a 5x5 matrix, (0,4), (1,3), (2,2), (3,1), (4,0) — their i+j is 4, which is 5-1.\n\nSo for each cell (i,j), if i == j or i + j == n-1, then it's part of the diagonals. Else, it's part of the non-diagonal.\n\nSo, first, collect all the characters in the diagonals. Let's call this set diag_chars. Then collect all the non-diagonal characters into another set, non_diag_chars.\n\nBut wait, the problem says that all the diagonal characters must be the same. So diag_chars should have exactly one unique character. Similarly, non_diag_chars should have exactly one unique character, and that character must be different from the diagonal's.\n\nSo steps:\n\n- Check that all diagonal characters are the same. Let's get the first diagonal character (say, from (0,0)) and check that all other diagonal characters are equal to it.\n\n- Then check that all non-diagonal characters are the same and not equal to the diagonal's character.\n\nBut how to do this efficiently?\n\nLet me think. For the diagonals:\n\nLoop through each cell (i,j) in the matrix. For each cell, if it's on either diagonal, check if it's equal to the first diagonal character (the one at (0,0)). If any of them is different, return NO.\n\nWait, but what if the first diagonal character is not the same as others? For example, suppose the first cell is 'a', but another diagonal cell is 'b'. Then the entire diagonal isn't same. So, we can take the first diagonal character as the reference.\n\nBut what if the first diagonal character is not part of the diagonals? No, because (0,0) is on the main diagonal. So the first cell is part of the main diagonal.\n\nSo, let's proceed:\n\nFirst, check all the diagonal cells. Let's collect all the characters in the diagonals. Let's take the first character (for example, the first cell (0,0)), and check that all other diagonal cells are equal to it.\n\nBut maybe there's a case where the diagonals have different characters. For example, if the main diagonal has 'a's and the anti-diagonal has 'b's. Then the entire diagonals are not same. So the first step is to check that all the cells in both diagonals are the same.\n\nSo, for each cell (i,j) in the diagonals, check if it's equal to the first diagonal character (from (0,0)).\n\nOnce that is confirmed, then check the non-diagonal cells. Collect all of them and check that they are all the same, and not equal to the diagonal character.\n\nBut how to collect the non-diagonal cells?\n\nAnother approach: For each cell in the matrix, check if it's on the diagonal. If",
    "response": "\n\nTo solve this problem, we need to determine if a given square matrix forms the letter \"X\" based on specific conditions. The matrix forms an \"X\" if all characters on both diagonals are the same and all other characters (not on the diagonals) are the same and different from the diagonal characters.\n\n### Approach\n1. **Input Reading**: Read the size of the matrix `n` and the matrix itself.\n2. **Diagonal Check**: Verify that all characters on both diagonals (main diagonal and anti-diagonal) are the same.\n3. **Non-Diagonal Check**: Ensure all characters not on the diagonals are the same and different from the diagonal characters.\n4. **Validation**: If both checks pass, print \"YES\"; otherwise, print \"NO\".\n\n### Solution Code\n```python\nn = int(input())\nmatrix = [input().strip() for _ in range(n)]\n\ndiag_char = matrix[0][0]\nnon_diag_char = None\n\n# Check diagonals and collect non-diagonal characters\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            if matrix[i][j] != diag_char:\n                print(\"NO\")\n                exit()\n        else:\n            if non_diag_char is None:\n                non_diag_char = matrix[i][j]\n            elif matrix[i][j] != non_diag_char:\n                print(\"NO\")\n                exit()\n\n# Check if non-diagonal character is different from diagonal\nif non_diag_char == diag_char:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n```\n\n### Explanation\n1. **Reading Input**: The input is read as an integer `n` followed by `n` lines of strings representing the matrix.\n2. **Diagonal Check**: We iterate through each cell of the matrix. If a cell is on either of the two diagonals (main or anti-diagonal), we check if it matches the character at the top-left corner (which is considered the reference character for diagonals). If any mismatch is found, we immediately print \"NO\" and exit.\n3. **Non-Diagonal Check**: For cells not on the diagonals, we check if they all match the first encountered non-diagonal character. If any mismatch is found, we print \"NO\" and exit.\n4. **Final Check**: After ensuring all diagonal and non-diagonal characters are consistent, we check if the non-diagonal character is different from the diagonal character. If they are different, we print \"YES\"; otherwise, \"NO\".\n\nThis approach efficiently checks the required conditions with a time complexity of O(n^2), which is optimal for the given constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n = int(input())\nmatrix = [input().strip() for _ in range(n)]\n\ndiag_char = matrix[0][0]\nnon_diag_char = None\n\n# Check diagonals and collect non-diagonal characters\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            if matrix[i][j] != diag_char:\n                print(\"NO\")\n                exit()\n        else:\n            if non_diag_char is None:\n                non_diag_char = matrix[i][j]\n            elif matrix[i][j] != non_diag_char:\n                print(\"NO\")\n                exit()\n\n# Check if non-diagonal character is different from diagonal\nif non_diag_char == diag_char:\n    print(\"NO\")\nelse:\n    print(\"YES\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 443,
        "completion_token_count": 557,
        "thoughts_token_count": 1023
    }
}