{
    "start": 1758338782.9966793,
    "end": 1758339280.7193747,
    "start-formatted": "2025-09-20 12:26 KST",
    "end-formatted": "2025-09-20 12:34 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. Hmm, the problem is about finding the minimum number of nodes required for a p-reachable directed graph and then determining the maximum number of unidirectional pairs in such graphs. \n\nFirst, I need to understand what exactly a p-reachable graph is. The definition says it's a directed graph that has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So for each such pair, both directions must be reachable. Wait, no, wait: the problem says \"reachable from each other\", which means there's a path from u to v and from v to u. So those pairs are mutual reachable. And the count is for ordered pairs where u < v. So for example, if u and v are mutually reachable, then (u, v) and (v, u) are two ordered pairs, but since u < v, only (u, v) is counted here. So the p is the number of such ordered pairs where u < v and mutual reachability exists.\n\nThe first part of the problem is to find the minimal number of nodes needed to have exactly p such pairs. Then, among all such minimal node graphs, find the maximum number of unidirectional pairs. \n\nLet me think about the structure of the graph. For the minimal number of nodes, perhaps we need to arrange the graph in a way that maximizes the number of mutual reachable pairs with as few nodes as possible. Or maybe not. Wait, no. Because the problem requires that the graph has exactly p such pairs. So we need to find the smallest n where the maximum possible number of mutual pairs is at least p, but how?\n\nWait, but maybe the minimal number of nodes is determined by the largest possible number of mutual pairs that can be formed with n nodes. For example, if we have a complete graph where every pair of nodes is mutually reachable, then the number of mutual pairs would be C(n, 2), since for each unordered pair {u, v}, u < v, there's one ordered pair (u, v) counted. But in that case, the number of mutual pairs is C(n,2). So if p is less than or equal to C(n,2), then maybe we can arrange the graph so that exactly p pairs are mutual. But how?\n\nAlternatively, perhaps the minimal number of nodes is determined by the largest triangular number less than or equal to p. Wait, for example, if p=3, then C(3,2)=3. So the minimal n is 3. Which matches the first example. For the input p=3, output is 3 0. Which makes sense because when all pairs are mutual, then there are zero unidirectional pairs. Because every pair is mutual. So the second part of the output is zero.\n\nBut then for other p values, like p=4, the minimal n is 5? Because C(4,2) is 6, which is larger than 4. So perhaps the minimal n is the smallest integer where C(n,2) >= p. Wait, but that might not be the case. Let's see the sample input where p=4, the output is 5 6. Wait, that's confusing. Wait the sample input includes p=4 as one of the test cases. The output is 5 6. Wait, but according to that, for p=4, the minimal number of nodes is 5. But C(4,2) is 6, which is greater than 4. So why isn't the minimal number of nodes 4?\n\nHmm, that suggests that my initial assumption is wrong. Let me check the example given. The second sample input is 4, and the output is 5 6. Wait, but according to that, when p=4, the minimal number of nodes is 5. But that seems counterintuitive. Let me think again.\n\nWait, maybe the problem is that the p-reachable graph must have exactly p mutual pairs, not at least p. So if we take n=4, and arrange the graph so that exactly 4 mutual pairs exist. How can that be done?\n\nFor example, suppose we have a graph with 4 nodes, and arrange that three of the pairs are mutual, and one is not. But how? Wait, but if you have a strongly connected component (SCC), then all pairs within that component are mutual. So if you have a graph that's a single SCC, then all pairs are mutual. So for n=4, that would give 6 mutual pairs. But the problem requires exactly p=4. So perhaps you need to split the graph into components where some pairs are in mutual reachability and others are not. \n\nWait, but how can you get exactly 4 mutual pairs? Let's think. Suppose you have two components. One component is a single node, and another component is a strongly connected component of 3 nodes. Then the mutual pairs are C(3,2) = 3. But that's 3. Not enough. If you have a component of 4 nodes, but not all pairs are mutual. But how? Because if the component is strongly connected, then all pairs are mutual. If it's not, then maybe some pairs are not. But how to arrange that?\n\nAlternatively, perhaps the minimal number of nodes is determined by the following approach. Let me think about the maximum number of mutual pairs possible with n nodes. That would be when all nodes are in a single strongly connected component. Then, the number of mutual pairs is C(n, 2). However, if you have multiple components, then the mutual pairs are the sum of C(k_i, 2) for each component of size k_i. Because within each component, all pairs are mutual, but between components, there's no mutual reachability (assuming they are separate components). \n\nSo, the problem is to find the minimal n such that there exists a partition of n into some integers k_1, k_2, ..., k_m, such that the sum of C(k_i, 2) equals p. Because that sum would be the number of mutual pairs. So the minimal n is the minimal possible sum of k_i's (which is n) such that the sum of C(k_i, 2) is exactly p. \n\nBut how do we find such a partition? Because for the minimal n, we need to maximize the sum of C(k_i, 2) for a given n. Wait, no. Wait, if we want to achieve exactly p mutual pairs, then for the minimal n, we need to find the smallest n where there exists a way to split into components so that the sum of C(k_i, 2) is exactly p. \n\nBut how to find this n? For example, for p=4. Let's see:\n\nLooking for the minimal n such that sum of C(k_i, 2) =4.\n\nPossible options:\n\n- n=4: possible partitions:\n\n   - [4], sum is 6 (too big)\n   - [3,1], sum is 3 + 0 =3 <4.\n   - [2,2], sum is 1+1=2 <4.\n   - [2,1,1], sum is 1 + 0 + 0 =1 <4.\n   - [1,1,1,1], sum is 0. So no. So n=4 cannot reach sum 4. \n\nNext, try n=5. Possible partitions:\n\nWe need sum of C(k_i, 2) =4.\n\nOne possible way is [3, 2]. Then sum is 3 + 1 =4. Yes. So with n=5, that's possible. So the minimal n is 5. Which matches the sample input where p=4 gives output 5 6. \n\nAh, okay. So the minimal n is the minimal number such that there exists a partition of n into integers k_1, ..., k_m where sum C(k_i, 2) =p. \n\nSo the problem reduces to finding the minimal n where such a partition exists. Once we find that n, then we need to find the maximum number of unidirectional pairs in such graphs.\n\nNow, how to compute that minimal n for a given p?\n\nLet me think about the approach. For a given p, we need to find the minimal n such that there exists a partition of n into parts where the sum of C(k_i, 2) equals p. \n\nBut how can we find that? Well, the maximum possible sum for a given n is C(n, 2) (when all nodes are in a single component). The minimal sum is 0 (when all components are single nodes). So for a given p, we need to find the smallest n where the maximum possible sum (which is C(n,2)) is at least p, but also that there exists a way to split into components to get exactly p. \n\nWait, but how? For example, if p is 4, the maximum sum for n=5 is C(5, 2)=10. But we can split into components of 3 and 2, which gives sum 3 + 1=4. So the minimal n is 5. \n\nBut for p=4, the minimal n is 5. However, for p=6, the maximum sum for n=4 is C(4,2)=6. So for p=6, the minimal n is 4. \n\nSo the approach for finding the minimal n is to find the smallest n where C(n,2) ≥ p, and also that p can be written as a sum of C(k_i, 2) where the sum of k_i is n. But how?\n\nBut perhaps the minimal n is the minimal n where C(n,2) ≥ p and p can be achieved by splitting into components. However, I'm not sure. Let's think of another example. Suppose p=5. What's the minimal n?\n\nFor n=4: maximum sum is 6. Can we split into components such that the sum is 5? Let's see:\n\nPossible partitions:\n\n[3,1] gives 3. [2,2] gives 1+1=2. [2,1,1] gives 1. [4] gives 6. So no way to get 5. \n\nn=5: maximum sum is 10. Let's see if we can get 5. For example:\n\nIf we take a component of 3 and 2, sum is 3 + 1 =4. If we take component of 4 and 1, sum is 6. Component of 3 and 1 and 1: sum is 3. Component of 2, 2, 1: sum 1+1=2. Component of 2, 1, 1, 1: sum 1. How about component of 5: sum is 10. No. \n\nWait, perhaps another partition. For example, 3 and 2 gives sum 3+1=4. To get 5, maybe we need to take 3 and 1 and 1, but that gives 3. Then maybe take a component of 4 and 1, but that gives 6. Hmm. How else?\n\nWhat if we have two components of 3 and 2? Sum is 3+1=4. Not enough. Maybe take a component of 4 and split into two components. Like 3 and 1, and then another component of 1. Wait, that's 3 + 0 + 0 =3. Not helpful. \n\nAlternatively, perhaps there is no way to get 5 for n=5. Then, check n=5. What about taking a component of 2 and 3. Sum is 1+3=4. Not enough. What if we take a component of 2, 2, and 1. Sum 1+1=2. No. \n\nSo for n=5, can't get sum 5. Then check n=5. What about a component of 5, but subtract something. Wait, but how? Because the sum is fixed based on the components. \n\nWait, maybe there's a different way. For example, if we have two components. One component of 3 (sum 3) and another component of 2 (sum 1). Total is 4. To get 5, perhaps split into a component of 3 and 2, and then another component of 1? No, that's still 3+1=4. \n\nHmm, maybe there's no way for n=5. Then check n=6. For n=6, maximum sum is 15. Let's see:\n\nWe need to find a way to split into components where the sum of C(k_i, 2) is 5. For example, take a component of 3 and 3. Sum is 3 + 3 =6. Too big. Take a component of 3 and 2 and 1. Sum is 3 + 1 =4. Still not enough. How about component of 4 and 2. Sum is 6 + 1=7. Hmm. What if we take a component of 4 and split into two parts. For example, component of 4 and 1 and 1. Sum is 6 + 0 + 0=6. Not enough. \n\nWait, maybe there's a way with components of 3 and 2 and 1. But that gives sum 3+1=4. \n\nAlternatively, what if there is a component of 5 and 1. Sum is 10 + 0 =10. No. \n\nWait, perhaps for p=5, the minimal n is 6. Because if we take a component of 4 and a component of 2. Then sum is 6 + 1 =7. Which is more than 5. But how to get 5?\n\nAlternatively, maybe there's a way to split into components where one component contributes 5. For example, if there is a component of size 5, then C(5,2) is 10. That's too big. But if we have a component of size 3 (sum 3) and another component of size 2 (sum 1), and then another component of size 1. So total sum is 3 + 1 =4. Still not enough. \n\nWait, maybe there's a mistake in my thinking. Because perhaps there's a way to split into components where the sum is exactly p. But for p=5, how?\n\nWait, maybe I'm missing something. Let's think of the sum of C(k_i, 2) as being equal to p. So for example, if there's a component of size 5, then that contributes 10. But if we have a component of size 4 (contribution 6) and another component of size 1 (contribution 0), but then subtract something? No, that's impossible. Because the sum is fixed once the components are chosen. \n\nSo for p=5, perhaps the minimal n is 6. How?\n\nWait, maybe there's a way to split into components of 3 and 3. Sum is 3 + 3 =6. Close. But how to get 5? Maybe take a component of size 3 and another component of size 2 and another of size 1. Sum is 3 + 1 =4. \n\nAlternatively, perhaps the minimal n is 5 and p=5 is not achievable. But then, what is the minimal n for p=5?\n\nLet me think again. Suppose n=5. What if I have a component of size 4 and a component of size 1. The sum is C(4,2) =6. Which is more than 5. So that's not helpful. But how to get exactly 5?\n\nAlternatively, maybe there's a way to have a component that's not strongly connected. Wait, but earlier reasoning assumed that each component contributes C(k_i, 2) mutual pairs. But that's only if each component is a strongly connected component. Because if a component is not strongly connected, then the number of mutual pairs within that component is less than C(k_i, 2). \n\nAh! Oh right! So the previous assumption was that each component is a strongly connected component. But that's not necessarily the case. So perhaps there are ways to have components that are not strongly connected, thus allowing us to have a sum of mutual pairs less than C(k_i, 2). \n\nBut then, how can we model this? Because the problem requires that the graph has exactly p mutual pairs. So the idea is that we can split the graph into components, and for each component, the number of mutual pairs is some value. But how to compute that? \n\nThis complicates things. Because now, for a given n, the maximum possible sum of mutual pairs is C(n, 2) (all nodes in one strongly connected component). The minimum possible is zero (all components are singletons). But for intermediate values, perhaps there's a way to arrange components with varying numbers of mutual pairs. \n\nBut how can we find the minimal n for a given p? This seems challenging. However, looking back at the sample input where p=4, the minimal n is 5. But for n=5, the maximum sum is C(5,2)=10. So how can we get 4? By splitting into components of sizes 3 and 2, which are both strongly connected. Then the sum is 3 + 1 =4. So that works. \n\nSo perhaps the minimal n is determined by the minimal n such that the maximum possible sum (C(n, 2)) is ≥ p, and that p can be expressed as a sum of terms of the form C(k_i, 2) where sum k_i = n. \n\nBut how can we ensure that? For example, for p=5, is there a way to express it as sum of C(k_i, 2) with sum k_i =n? Let's see. For example, for n=5, can we have sum C(k_i, 2) =5? Let's think:\n\nIf there's a component of size 4 and another of size 1. The sum is 6. But we need 5. How can we reduce that by 1? If the component of size 4 is not a strongly connected component, but instead, say, has some structure that allows only 5 mutual pairs. For example, if the component of size 4 is a DAG with some edges. But how to calculate that?\n\nAlternatively, maybe there's a way to split into components. For example, a component of size 3 (C(3,2)=3) and a component of size 2 (C(2,2)=1). Sum is 4. Not enough. If there's a component of size 3 and another of size 2, but one of them is not strongly connected. Suppose the component of size 3 is not strongly connected. Then the mutual pairs in that component could be less than 3. For example, if it's a chain, then the mutual pairs are zero. But then the sum would be 0 + 1 =1. Not helpful. \n\nAlternatively, maybe there's a way to have a component of size 4 with exactly 5 mutual pairs. For example, if in that component, there are exactly 5 pairs of mutual reachability. How can that happen? Well, if the component is a DAG, but that's not possible. Because in a DAG, there are no cycles, so no mutual reachability. So the mutual pairs would be zero. So that's not helpful. \n\nAlternatively, perhaps the component is a strongly connected component with some nodes. Wait, but then the mutual pairs would be C(k,2). So unless there's a way to have a component that is not strongly connected but still has some mutual pairs. \n\nThis seems complicated. However, considering that the sample input for p=4 uses splitting into two strongly connected components, perhaps the optimal way to achieve p is to split into strongly connected components. Because that way, the sum is easy to compute and manage. \n\nThus, perhaps the minimal n is determined by the minimal n where there exists a set of integers k_1, k_2,...,k_m such that sum k_i =n, and sum C(k_i, 2) =p. \n\nIn that case, for p=5, we need to find such a decomposition. Let's think again. \n\nFor example, n=5:\n\nIs there a way to split into components whose sum of C(k_i, 2) is 5?\n\nLet me see:\n\nSuppose we have components of size 4 and 1. Sum is C(4,2) =6. But that's 6, which is larger than 5. How can we reduce it by 1? Maybe split the component of size 4 into two components. For example, 3 and 1. Then sum is C(3,2) + C(1,2) =3 + 0 =3. Then adding the 1 component. But that's 3. Not helpful. \n\nWhat if we have a component of size 3 (sum 3) and a component of size 2 (sum 1). Total is 4. Still not enough. \n\nHow about a component of size 2 (sum 1), and another of size 2 (sum 1), and another of size 1 (sum 0). Total is 2. Not enough. \n\nAnother option: components of size 5. Sum is 10. No. \n\nHmm. For n=5, can't find a way. Then check n=6. What's the possible decompositions?\n\nLooking for sum C(k_i, 2) =5. \n\nPossible options:\n\n- One component of size 3 (3) and another of size 2 (1). Sum is 4. Need 1 more. How? Add a component of size 2 (another 1) and size 1. Sum would be 3+1+1=5. But sum of sizes is 3+2+1=6. So yes! Wait, n=3+2+1=6. So the sum is 3 + 1 + 0 =4. No, that's not 5. \n\nWait, what if I have a component of size 3 (sum 3) and a component of size 3 (sum 3). Total is 6. Which is more than 5. \n\nAlternatively, a component of size 4 (sum 6) and a component of size 2 (sum 1). Total is 7. \n\nHmm. How about a component of size 5 and a component of size 1. Sum is 10. \n\nNot helpful. \n\nWait, perhaps I'm missing something. What if there's a component of size 3 (sum 3), and a component of size 2 (sum 1), and another component of size 1 (sum 0). Total sum is 3+1=4. Still not 5. \n\nWait, maybe there's a decomposition where one component contributes 5. For example, a component of size 5. But C(5,2)=10. No. \n\nAlternatively, maybe a component of size 4 with some structure that allows exactly 5 mutual pairs. But how?\n\nThis seems tricky. Maybe for p=5, the minimal n is 6, but I don't know how to get the sum. \n\nAlternatively, perhaps the minimal n is determined by the minimal n where C(n,2) >= p and p can be written as C(n,2) minus some value. But I'm not sure. \n\nAlternatively, perhaps the minimal n is the minimal integer such that C(n, 2) >= p, and p is less than or equal to C(n, 2). But how does that fit with the sample where p=4 and n=5 (C(5,2)=10 >=4). But in that case, we can split into components of 3 and 2. \n\nSo perhaps the minimal n is the minimal integer where C(n,2) >= p. But how does that work for p=5? Let's see. For n=4, C(4,2)=6 >=5. But can we split into components to get 5? \n\nIf n=4, can we split into components such that sum is 5? For example, if there's a component of size 4 (sum 6), but we need to subtract 1. How? Maybe by having a component that is not strongly connected. \n\nFor example, imagine a component of 4 nodes arranged in such a way that there are 5 mutual pairs. How? Let's think. Suppose there are two strongly connected components within the 4-node component. For example, one of size 3 and another of size 1. Then the sum would be C(3,2) + C(1,2) = 3 + 0 =3. Which is less than 5. \n\nAlternatively, two components of size 2 and 2. Sum is 1 + 1 =2. \n\nAlternatively, a component of size 3 and a component of size 1. Sum 3. \n\nAlternatively, a component of size 2 and a component of size 2. Sum 2. \n\nBut how to get 5? \n\nAlternatively, if the component is not split into subcomponents, but is a DAG. But then there are no mutual pairs. \n\nHmm. It's not clear. Perhaps the answer is that for any p, the minimal n is the minimal integer such that C(n,2) >= p. Because even if you can't split into components to get exactly p, but you can adjust the components. \n\nBut that seems contradictory to the earlier example where for p=4, the minimal n is 5. However, C(4,2) is 6 which is greater than 4. So why is the minimal n 5? \n\nWait, that's a contradiction. Because according to this logic, for p=4, the minimal n should be 4. But the sample input says that for p=4, the minimal n is 5. \n\nWait, that's a problem. Let me recheck the sample input. \n\nThe sample input for p=4 outputs 5 6. Wait, the first sample input is given as ['3', '4', '0'] and the outputs are ['3 0', '5 6', '0 0']. \n\nAh, the second output corresponds to p=4. So for p=4, the minimal number of nodes is 5. But C(4,2) is 6 which is larger than 4. So why can't we use n=4?\n\nBecause there's no way to split into components of n=4 such that the sum is exactly 4. \n\nSo the minimal n is not determined by the minimal n where C(n,2) >= p. It's determined by the minimal n where there exists a way to split into components whose sum of C(k_i, 2) is exactly p. \n\nBut how do we find that? \n\nThis seems like a problem of finding the minimal n such that p can be represented as a sum of C(k_i, 2) where the sum of k_i is n. \n\nBut how to compute this efficiently for large p (up to 2e5)?\n\nThis feels like a dynamic programming problem. But for p up to 2e5, and n up to ... ?\n\nAlternatively, think about the problem in terms of the following. For any n, the maximum number of mutual pairs is C(n, 2). The minimum is 0. So for a given p, the minimal n is the minimal n where C(n, 2) >= p and p can be represented as a sum of C(k_i, 2) for components adding up to n. \n\nBut how to find that? \n\nLet me think of another approach. For the minimal n, we can think of the following: to represent p as the sum of C(k_i, 2), we can use the greedy approach. For example, take the largest possible C(k, 2) that is <= p, subtract it, and repeat. \n\nBut this may not always work. Let's take p=4. The largest C(k, 2) <=4 is 3 (k=3). Subtracting 3 leaves 1. Then the largest C(k, 2) <=1 is 1 (k=2). So total sum is 3+1=4. The sum of k's is 3+2=5. Hence n=5. Which is correct. \n\nFor p=5. The largest C(k,2) <=5 is 3 (k=3), leaving 2. Then take 1 (k=2), leaving 1. Then take 1 again. So total sum is 3+1+1=5. Sum of k's is 3+2+2=7. But maybe there's a better way. For example, 3 + 1 + 1 =5, but sum k is 3+2+2=7. Alternatively, can we find a way with smaller sum?\n\nWait, what if we take C(4,2) =6 which is larger than 5. But we can't use that. So the next step is to take C(3,2)=3, then 5-3=2. Now, the next largest C(k,2) is 1 (k=2). So subtract 1, remaining 1. Then another 1. Total sum of k's is 3+2+2=7. \n\nAlternatively, can we use C(2,2) + C(2,2) + C(2,2) + C(2,2) + C(2,2) = 5*1=5. Sum of k's is 2*5=10. Which is worse. \n\nSo the minimal n would be 7. But is there a way to get a smaller n? \n\nLet me think. Suppose we have components of size 4 and 2. Their sum of C(k,2) is 6 + 1 =7. Too big. \n\nWhat if we have components of size 4 and 1 and 1. Sum is 6. \n\nNo. \n\nWhat if we have components of size 3 and 3. Sum is 3 + 3 =6. Still too big. \n\nWhat if we have components of size 3 and 2 and 1. Sum is 3+1=4. \n\nNot enough. \n\nSo for p=5, the minimal n seems to be 7. \n\nBut how to find this for arbitrary p?\n\nThe greedy approach of taking the largest possible C(k,2) each time seems to give a way to find the minimal n. Because by taking the largest possible, we minimize the number of components and thus the total sum of k_i. \n\nSo the algorithm would be:\n\nTo find the minimal n for a given p:\n\nInitialize n = 0, remaining_p = p.\n\nWhile remaining_p > 0:\n\n   Find the largest k such that C(k, 2) ≤ remaining_p.\n\n   Add k to the list of components.\n\n   Subtract C(k, 2) from remaining_p.\n\nOnce this is done, the sum of all k's is the minimal n.\n\nBut how to verify this? Let's test it for the sample p=4. \n\nremaining_p=4. Largest k with C(k,2) ≤4 is 3 (C(3,2)=3). Subtract 3, remaining_p=1. Next largest k is 2 (C(2,2)=1). Subtract 1, remaining_p=0. Sum is 3+2=5. Which is correct. \n\nFor p=5, the steps would be:\n\nremaining_p=5. Largest k is 3 (C(3,2)=3). Subtract, remaining_p=2. Next largest k is 2 (C(2,2)=1). Subtract, remaining_p=1. Next largest k is 2 again. Subtract, remaining_p=0. Sum is 3+2+2=7. \n\nBut is there a way to get a smaller n?\n\nWhat if instead of taking 3, then 2, then 2, we take 2, then 2, then 2, then 2, then 2. That gives sum 2*5=10. Worse. \n\nAnother possibility: take 2 (C(2,2)=1), then 2 again (another 1), then 2 again (another 1), then 2 again (another 1), then 2 again (another 1). Sum 5*2=10. \n\nNo. \n\nAnother possibility: take a component of size 4, which contributes 6. But that's larger than 5. So we can't take it. But perhaps we can split the component of 4 into parts. For example, if we have a component of size 4, but subtract one mutual pair. How? \n\nBut how to model that? It seems complicated. \n\nAssuming that the greedy approach is correct, then the minimal n can be computed by this method. \n\nOnce we find the minimal n, the next part is to compute the maximum number of unidirectional pairs. \n\nNow, for the second part of the problem: once we have the minimal n, and the graph is structured as a collection of strongly connected components (since that's how we achieved the sum of mutual pairs), then what is the maximum number of unidirectional pairs?\n\nUnidirectional pairs are ordered pairs (u, v) where u != v, there's a path from u to v, but no path from v to u. \n\nIn the graph structure where we have several strongly connected components (SCCs), the edges between components are directed. For example, if there's an edge from component A to component B, then all nodes in A can reach all nodes in B, but not vice versa. \n\nBut how to maximize the number of unidirectional pairs?\n\nLet me think about the structure of the graph. The graph consists of several SCCs. Between different SCCs, there can be edges in one direction or not. But to maximize the number of unidirectional pairs, we need to arrange the components in a way that as many pairs as possible are unidirectional. \n\nAssuming that the components are arranged in a DAG (directed acyclic graph) between themselves. For example, if there's a topological order of the components, and for every pair of components A and B, there's an edge from A to B if A comes before B in the topological order. \n\nIn this case, for any two nodes u in A and v in B, if A comes before B, then u can reach v (since there's a path from A to B), but v cannot reach u. So this contributes a unidirectional pair (u, v). \n\nAdditionally, within each component, there are no unidirectional pairs since all pairs are mutual. \n\nSo the number of unidirectional pairs is the sum over all pairs of components (A, B) where A comes before B in the topological order, multiplied by the product of their sizes. \n\nTo maximize this, the components should be arranged in a linear order, such that each component has edges to all components that come after it. \n\nFor example, if we have components of sizes s_1, s_2, ..., s_k, arranged in order, then the total number of unidirectional pairs is sum_{i<j} s_i * s_j. \n\nBecause for every pair of nodes u in component i and v in component j (i<j), there's a unidirectional pair (u, v). \n\nAdditionally, for pairs of nodes in different components where the component order is reversed, there's no path. \n\nSo the maximum number of unidirectional pairs is achieved when the components are arranged in a linear order, and all possible edges are directed from earlier components to later ones. \n\nSo the problem now becomes: given the components' sizes (from the greedy decomposition), what is the maximum possible sum_{i<j} s_i * s_j. \n\nBut how to compute that sum? \n\nThe sum_{i<j} s_i * s_j is equal to [ (sum s_i)^2 - sum s_i^2 ] / 2. \n\nBecause sum_{i≠j} s_i*s_j = (sum s_i)^2 - sum s_i^2. And since sum_{i<j} s_i s_j is half of that. \n\nSo the maximum number of unidirectional pairs is [ (total_nodes^2 - sum (s_i^2 )) ] / 2. \n\nBut wait, the total_nodes is n, which is the sum of the s_i. \n\nYes. So the formula is (n^2 - sum s_i^2 ) // 2. \n\nSo once we have the components' sizes s_1, s_2, ..., s_k, the maximum number of unidirectional pairs is (n^2 - sum s_i^2) // 2. \n\nBut how to get the components' sizes? \n\nWell, during the greedy decomposition, we found the components as per the steps. For example, for p=4, the components are 3 and 2. So sum s_i^2 is 3² + 2² = 9 +4 =13. n is 5. So (5² -13)/2 = (25-13)/2 = 6. Which matches the sample output for p=4: the second part is 6. \n\nAnother example: for p=3, the components are [3], sum s_i^2 is 9. n=3. (3² -9)/2 = (9-9)/2 =0. Which matches the first sample's output of 0. \n\nSo this formula seems correct. \n\nThus, the plan is:\n\nFor the first part (minimal n):\n\nUse the greedy approach to decompose p into sum of C(k_i, 2), and sum the k_i's to get n. \n\nFor the second part (maximum unidirectional pairs):\n\nCalculate the sum of squares of the components' sizes, then apply the formula (n^2 - sum_sq) // 2. \n\nNow, the challenge is to implement this decomposition correctly. \n\nBut how to find",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs in such graphs with the minimum number of nodes.\n\n### Approach\n1. **Understanding p-reachable Graphs**: A p-reachable graph has exactly `p` ordered pairs (u, v) where `u < v` and both `u` and `v` are mutually reachable.\n2. **Minimum Nodes Calculation**: The minimum number of nodes is determined by decomposing `p` into sums of combinations of node sizes (C(k, 2)) using a greedy approach. This ensures that we use the largest possible components first to minimize the total number of nodes.\n3. **Unidirectional Pairs Calculation**: Once the minimum number of nodes is determined, the maximum number of unidirectional pairs can be calculated using the formula derived from the sum of products of component sizes arranged in a topological order.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    # Find minimal n\n    components = []\n    remaining = p\n    while remaining > 0:\n        # Find the largest k such that C(k, 2) <= remaining\n        # C(k, 2) = k*(k-1)//2\n        # Solve for k: k^2 -k - 2*remaining <=0\n        # Using quadratic formula\n        k = int((1 + math.sqrt(1 + 8 * remaining)) / 2)\n        while k * (k - 1) // 2 > remaining:\n            k -= 1\n        components.append(k)\n        remaining -= k * (k - 1) // 2\n    \n    n = sum(components)\n    \n    # Compute maximum unidirectional pairs\n    sum_sq = sum(s * s for s in components)\n    max_uni = (n * n - sum_sq) // 2\n    \n    print(f\"{n} {max_uni}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input integer `p` is read from standard input.\n2. **Greedy Decomposition**: The algorithm decomposes `p` into sums of combinations of node sizes using a greedy approach. For each step, it finds the largest possible component size `k` such that the combination `C(k, 2)` does not exceed the remaining value of `p`.\n3. **Summing Components**: The total number of nodes `n` is the sum of all component sizes found during decomposition.\n4. **Unidirectional Pairs Calculation**: Using the formula derived from the sum of squares of component sizes, the maximum number of unidirectional pairs is computed as `(n^2 - sum_sq) // 2`, where `sum_sq` is the sum of the squares of the component sizes.\n\nThis approach efficiently determines the minimum number of nodes and the maximum number of unidirectional pairs using mathematical decomposition and properties of combinations.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    # Find minimal n\n    components = []\n    remaining = p\n    while remaining > 0:\n        # Find the largest k such that C(k, 2) <= remaining\n        # C(k, 2) = k*(k-1)//2\n        # Solve for k: k^2 -k - 2*remaining <=0\n        # Using quadratic formula\n        k = int((1 + math.sqrt(1 + 8 * remaining)) / 2)\n        while k * (k - 1) // 2 > remaining:\n            k -= 1\n        components.append(k)\n        remaining -= k * (k - 1) // 2\n    \n    n = sum(components)\n    \n    # Compute maximum unidirectional pairs\n    sum_sq = sum(s * s for s in components)\n    max_uni = (n * n - sum_sq) // 2\n    \n    print(f\"{n} {max_uni}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 481,
        "completion_token_count": 652,
        "thoughts_token_count": 8192
    }
}