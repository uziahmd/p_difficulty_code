{
    "start": 1758307951.9886262,
    "end": 1758308034.9671283,
    "start-formatted": "2025-09-20 03:52 KST",
    "end-formatted": "2025-09-20 03:53 KST",
    "gpu": 2,
    "pid": 21,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko Finds Grapes\n\nOn a random day, Neko found $$$n$$$ treasure chests and $$$m$$$ keys. The $$$i$$$-th chest has an integer $$$a_i$$$ written on it and the $$$j$$$-th key has an integer $$$b_j$$$ on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.The $$$j$$$-th key can be used to unlock the $$$i$$$-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, $$$a_i + b_j \\equiv 1 \\pmod{2}$$$. One key can be used to open at most one chest, and one chest can be opened at most once.Find the maximum number of chests Neko can open.\n\n## Input\nThe first line contains integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^5$$$) — the number of chests and the number of keys.The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the numbers written on the treasure chests.The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$) — the numbers written on the keys.\n\n## Output\nPrint the maximum number of chests you can open.\n\n## Example\n### Input\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\n### Output\n['3', '1', '0']\n\n## Note\nIn the first example, one possible way to unlock $$$3$$$ chests is as follows:  Use first key to unlock the fifth chest,  Use third key to unlock the second chest,  Use fourth key to unlock the first chest. In the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).In the third example, no key can unlock the given chest.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. The problem is about finding the maximum number of chests Neko can open using the keys. The condition is that the sum of a chest's number and a key's number must be odd. So, for each chest and key pair, their sum has to be odd. \n\nHmm. Let me think about the parity here. Because if a_i is even, then adding a key's value must make it odd. So the key must be odd. Because even + odd = odd. Similarly, if a_i is odd, then the key must be even. Because odd + even = odd. \n\nSo the approach here would be to count how many chests are even and how many are odd. Then, for the keys, count how many are even and how many are odd. \n\nWait, right. Because for each even chest, we need an odd key. And for each odd chest, we need an even key. \n\nBut since each key can be used only once, and each chest can be opened once, the maximum number of chests we can open is the sum of the minimum between the number of even chests and the number of odd keys, plus the minimum between the number of odd chests and the number of even keys. \n\nOh right! Because each even chest requires an odd key. So the maximum possible for that part is min(even_chests, odd_keys). Similarly for the other part. \n\nSo the steps are:\n\n1. Count the number of even and odd chests.\n2. Count the number of even and odd keys.\n3. The answer is min(even_chests, odd_keys) + min(odd_chests, even_keys).\n\nWait, that makes sense. Let me test this with the examples.\n\nFirst example input:\n\nChests: 9, 14, 6, 2, 11. Let's check their parity.\n\n9 is odd, 14 even, 6 even, 2 even, 11 odd. So even_chests = 3 (14,6,2), odd_chests = 2 (9, 11).\n\nKeys: 8,4,7,20. Let's see. 8 even, 4 even, 7 odd, 20 even. So even_keys = 3 (8,4,20), odd_keys = 1 (7).\n\nSo min(3,1) is 1 (for even chests with odd keys). Then min(2,3) is 2 (for odd chests with even keys). Total 1+2=3. Which matches the first example's output of 3. Correct.\n\nSecond example input: \n\nChests are 2,4,6,8,10. All even. So even_chests =5, odd_chests=0.\n\nKeys: 5 (odd). So odd_keys=1, even_keys=0.\n\nSo min(5,1) is 1. And min(0,0) is 0. Total 1. Which matches the second example's output.\n\nThird example: chest is 10 (even). Keys are all even (20,30,40,50). So even_keys=4, odd_keys=0. So min(even_chests (1) and odd_keys (0)) is 0. min(odd_chests (0) and even_keys (4)) is 0. Total 0. Which matches the third example.\n\nSo the approach seems correct.\n\nSo the plan is:\n\n- Count even and odd in a_i.\n- Count even and odd in b_j.\n- Compute min(even_a, odd_b) + min(odd_a, even_b).\n\nThat's straightforward. Now, how to implement this in Python.\n\nRead n and m.\n\nThen read the list of a's. Then count even and odd.\n\nThen read the list of b's. Count even and odd.\n\nThen compute the sum of min(even_a, odd_b) and min(odd_a, even_b).\n\nYes.\n\nNow, code.\n\nBut wait, for the counts:\n\nFor the a list, even_a is the number of elements where x % 2 == 0.\n\nSame for odd_a.\n\nSame for the b list.\n\nSo code steps:\n\nRead n and m from input.\n\nThen read the next line as list of integers for a.\n\nThen read the next line as list of integers for b.\n\nCompute even_a = sum(1 for x in a if x % 2 == 0)\n\nodd_a = n - even_a\n\nSimilarly for even_b and odd_b.\n\nThen answer is min(even_a, odd_b) + min(odd_a, even_b)\n\nYes.\n\nSo that's the code. Let me test with the examples.\n\nFirst example:\n\nn=5, m=4.\n\na = [9,14,6,2,11]\n\neven_a is 3 (14,6,2). odd_a is 2.\n\nb is [8,4,7,20]. even_b is 3 (8,4,20), odd_b is 1 (7).\n\nso min(3,1) is 1, min(2,3) is 2. Total 3. Correct.\n\nSecond example:\n\nn=5, m=1.\n\na is [2,4,6,8,10]. even_a=5, odd_a=0.\n\nb is [5]. even_b=0, odd_b=1.\n\nmin(5,1) is 1. min(0,0) is 0. Total 1.\n\nThird example:\n\nn=1, m=4.\n\na is [10]. even_a=1, odd_a=0.\n\nb is [20,30,40,50]. even_b=4, odd_b=0.\n\nso min(1,0) is 0. min(0,4) is 0. Total 0. Correct.\n\nEdge cases: what if there are zero even chests or something. Like if all chests are even and all keys are even. Then answer is 0. Because even chests need odd keys, but there are none. And odd chests (zero) need even keys. So sum is zero.\n\nAnother case: if there are more even chests than odd keys. So, say even_chests is 5, odd_keys is 3. Then min(5,3) is 3. Then the rest even_chests can't be opened.\n\nSo the code should handle all that.\n\nNow, code.\n\nIn Python, read from stdin. But the input is given as a list of strings? Wait, the user provided sample input shows that the input is given as a list of strings, but in reality, the code should read from standard input. Wait, the original problem says that the input is given as per standard input. So the code should read from stdin.\n\nBut in the sample input, the first example is given as:\n\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\nBut that's probably for testing purposes. The actual code should read from stdin.\n\nWait, the user's note says that the code should read from standard input and output to standard output. So the code needs to process multiple test cases? Or is it one test case?\n\nWait, looking back at the problem statement:\n\nThe input is given as:\n\nThe first line contains n and m.\n\nSecond line has n integers.\n\nThird line has m integers.\n\nSo the code should read one test case. But in the sample input, there are three test cases, each given as a separate string. But that's probably for the example. So the actual code should process a single test case.\n\nWait, the sample input shows three different inputs and outputs. But that's probably for the example. For example, the first input is:\n\n5 4\n\n9 14 6 2 11\n\n8 4 7 20\n\nWhich gives output 3.\n\nBut the code is supposed to read from stdin. So the code should read one input, not multiple. So the code should read n and m, then the next line as a list of n numbers, then the next line as m numbers.\n\nSo the code would be:\n\nRead the first line as n and m.\n\nThen read the next line as a list of integers.\n\nThen read the next line as a list of integers.\n\nSo in Python, the code would be:\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\na = list(map(int, sys.stdin.readline().split()))\n\nb = list(map(int, sys.stdin.readline().split()))\n\nThen compute even_a, odd_a, even_b, odd_b.\n\nBut wait, sometimes when reading from stdin, after reading the first line, the next lines may have leading/trailing spaces, but the split() function handles that.\n\nSo code:\n\nThen compute:\n\neven_a = sum(1 for x in a if x % 2 == 0)\n\nodd_a = n - even_a\n\neven_b = sum(1 for x in b if x % 2 == 0)\n\nodd_b = m - even_b\n\nans = min(even_a, odd_b) + min(odd_a, even_b)\n\nprint(ans)\n\nYes.\n\nSo that's the code.\n\nLet me test with the sample inputs.\n\nFirst sample input:\n\nn=5, m=4.\n\na = [9,14,6,2,11]\n\neven_a is 3 (14,6,2).\n\nodd_a is 2.\n\nb is [8,4,7,20]. even_b is 3 (8,4,20), odd_b is 1.\n\nans = min(3,1) + min(2,3) = 1 + 2 = 3. Correct.\n\nSecond sample input:\n\nn=5, m=1.\n\na is [2,4,6,8,10]. even_a=5.\n\nodd_a=0.\n\nb is [5], even_b=0, odd_b=1.\n\nans = min(5,1) + min(0,0) = 1 + 0 = 1. Correct.\n\nThird sample:\n\nn=1, m=4.\n\na is [10]. even_a=1. odd_a=0.\n\nb is [20,30,40,50]. even_b=4, odd_b=0.\n\nans = min(1,0) + min(0,4) → 0 + 0 = 0. Correct.\n\nAnother test case: when there are more keys than needed.\n\nLike n=2, m=3.\n\na = [1, 3] → odd_a = 2, even_a=0.\n\nb = [2,4,6]. even_b=3, odd_b=0.\n\nso ans is min(0,0) + min(2,3) → 0 + 2 = 2. Which is correct.\n\nAnother case: a has 1 even and 1 odd. b has 1 even and 1 odd. So even_a=1, odd_a=1. even_b=1, odd_b=1. So min(1,1) + min(1,1) → 1 +1 = 2. Which is correct.\n\nSo the code works.\n\nNow, code in Python.\n\nBut need to read from stdin. Also, note that in some cases, the input lines may have leading or trailing spaces, but the split() function takes care of that.\n\nSo the code would be:\n\nRead n and m.\n\nRead a list.\n\nRead b list.\n\nCompute counts.\n\nThen print the answer.\n\nSo the code:\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    even_a = sum(1 for x in a if x % 2 == 0)\n    odd_a = n - even_a\n    even_b = sum(1 for x in b if x % 2 == 0)\n    odd_b = m - even_b\n    res = min(even_a, odd_b) + min(odd_a, even_b)\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nYes. That's the code.\n\nTesting with the sample inputs.\n\nBut in the sample input, the third input is:\n\n1 4\n\n10\n\n20 30 40 50\n\nWhich would be read as n=1, m=4. a is [10], which is even. even_a=1. odd_a=0. b is [20,30,40,50], all even. even_b=4, odd_b=0. res is min(1,0) + min(0,4) → 0 + 0 = 0. Correct.\n\nYes. So the code should handle all cases.\n\nThis should be efficient as well, since it's O(n + m) time, which is acceptable for n and m up to 1e5.\n\nSo that's the solution.\n",
    "response": "To solve this problem, we need to determine the maximum number of treasure chests Neko can open using the given keys, where each key can only be used once and each chest can only be opened once. The condition for opening a chest is that the sum of the chest's number and the key's number must be odd.\n\n### Approach\n1. **Understanding the Parity Condition**: A chest with an even number can only be opened by a key with an odd number, and vice versa. This is because the sum of an even number and an odd number is odd.\n2. **Count Even and Odd Numbers**: We count the number of even and odd numbers in both the list of chests and the list of keys.\n3. **Match Chests and Keys**: The maximum number of chests that can be opened is determined by the minimum of the count of even chests and odd keys, plus the minimum of the count of odd chests and even keys.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    \n    even_a = sum(1 for x in a if x % 2 == 0)\n    odd_a = n - even_a\n    \n    even_b = sum(1 for x in b if x % 2 == 0)\n    odd_b = m - even_b\n    \n    res = min(even_a, odd_b) + min(odd_a, even_b)\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, which includes the number of chests and keys, followed by the numbers on the chests and keys.\n2. **Counting Even and Odd Values**: We count how many even and odd numbers are present in the list of chests and keys.\n3. **Calculating Maximum Openable Chests**: Using the counts of even and odd values, we determine the maximum number of chests that can be opened by matching even chests with odd keys and odd chests with even keys. The result is the sum of the minimum counts from these two matches.\n\nThis approach efficiently processes the input in linear time relative to the number of chests and keys, making it suitable for large input sizes up to the given constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    \n    even_a = sum(1 for x in a if x % 2 == 0)\n    odd_a = n - even_a\n    \n    even_b = sum(1 for x in b if x % 2 == 0)\n    odd_b = m - even_b\n    \n    res = min(even_a, odd_b) + min(odd_a, even_b)\n    print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 608,
        "completion_token_count": 496,
        "thoughts_token_count": 2810
    }
}