{
    "start": 1758309765.8962946,
    "end": 1758309808.8794456,
    "start-formatted": "2025-09-20 04:22 KST",
    "end-formatted": "2025-09-20 04:23 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. Hmm, the problem is about restoring the number of mushrooms on each lawn based on the GCD and LCM values given for each road between two lawns. So, each edge has a GCD and LCM of the two nodes it connects. Our job is to find possible values for each node or determine it's impossible.\n\nFirst, I need to think about the constraints. For any two nodes u and v connected by an edge with GCD g and LCM l, we know that g must divide both u and v, and that l must be a multiple of both. Also, there's a mathematical relationship here: the product of the GCD and LCM of two numbers equals the product of the numbers themselves. So, u * v = g * l. But since GCD(u, v) = g, then u = g * a and v = g * b, where a and b are coprime. Then their LCM would be g * a * b. So, the given LCM must equal g * a * b. Which implies that l must be divisible by g, because l = g * a * b. Therefore, for each edge, we must check if the LCM is divisible by the GCD. If not, it's impossible. So that's the first check we need to do for all edges.\n\nWait, right. So for each edge, if LCM % GCD != 0, then it's invalid. Because LCM must be a multiple of GCD. So that's a necessary condition. So in the code, first, for each input edge, we can check if LCM is divisible by GCD. If any edge fails this, output NO.\n\nBut even if that's satisfied, there's more to check. For example, suppose we have two edges connected to the same node, and their constraints may conflict.\n\nSo the problem reduces to assigning values to each node such that for every edge (u, v), the GCD of the values of u and v is equal to the given GCD, and their LCM is equal to the given LCM.\n\nBut how to model this? It seems like a graph problem where each edge imposes constraints on the values of its two endpoints.\n\nLet me think about the approach. Since each edge gives us information about the pair of nodes, perhaps we can model this as a graph where each node's value is determined based on the edges connected to it.\n\nFor example, for each edge (u, v) with GCD g and LCM l, we can say that u = g * a, v = g * b, where a and b are coprime, and a*b = l/g. Because earlier, we have u*v = g*l, and substituting u and v gives g^2 * a*b = g*l → g*a*b = l → a*b = l/g. Since l must be divisible by g, as checked before.\n\nSo, for each edge, the product of a and b must be equal to l/g. And since a and b are coprime, this gives us that a and b must be divisors of l/g, and co-prime.\n\nBut how to assign these values across the entire graph?\n\nThis seems like a problem that can be modeled with a Union-Find structure, but perhaps not directly. Alternatively, since the values of the nodes are connected via multiplicative factors, maybe we can model this as a graph where each node's value is determined relative to another node.\n\nLet me think. Suppose we have a connected component. Let's pick a root node and assign it a value. Then, for each edge, we can determine the possible value of the adjacent node based on the GCD and LCM.\n\nWait, but how to handle multiple edges and ensure consistency across the entire component.\n\nAnother idea: for each connected component, we can assign variables to the nodes. Let's consider that for each node in a connected component, the value must be a multiple of the GCD of all edges connected to it. Wait, no. Because for each edge, the GCD of the two nodes is fixed. So, if two nodes are connected via an edge with GCD g, then both nodes must be multiples of g. However, if a node is part of multiple edges, the GCDs of those edges might require that the node's value is a multiple of several different numbers. So, the node's value must be a multiple of the least common multiple of all those GCDs. Or perhaps not, but it's complicated.\n\nAlternatively, think of the problem as building a graph where each edge (u, v) enforces that u and v have a certain relationship. For example, u and v must be multiples of g, and their product is g*l. Also, their GCD is exactly g, which implies that when you divide them by g, their GCD is 1.\n\nSo, for each edge",
    "response": "To solve this problem, we need to determine the number of mushrooms on each lawn based on given GCD and LCM values for roads connecting lawns. The solution involves checking constraints and using graph traversal techniques to assign values consistently across all connected components.\n\n### Approach\n1. **Input Validation**: Check if the LCM is divisible by the GCD for each road. If not, it's impossible to restore the mushroom counts.\n2. **Graph Traversal**: Use BFS (Breadth-First Search) to traverse each connected component of the graph. For each component, assign values to nodes ensuring that they meet the GCD and LCM constraints.\n3. **Value Assignment**: For each node, assign a value based on the constraints from its edges. If a contradiction is found during traversal, the configuration is impossible.\n\n### Solution Code\n```python\nimport sys\nimport math\nfrom collections import deque, defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    edges = []\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        g = int(input[idx])\n        idx += 1\n        l = int(input[idx])\n        idx += 1\n        if l % g != 0:\n            print(\"NO\")\n            return\n        edges.append((u, v, g, l))\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n    \n    visited = [False] * n\n    values = [0] * n\n    \n    for start in range(n):\n        if not visited[start]:\n            queue = deque()\n            queue.append(start)\n            visited[start] = True\n            values[start] = 1  # initial value, will be adjusted\n            \n            while queue:\n                u = queue.popleft()\n                for (v, g, l) in graph[u]:\n                    if not visited[v]:\n                        # Compute a * b = l/g, gcd(a,b)=1\n                        product_ab = l // g\n                        # We need to assign values to u and v such that:\n                        # u = g * a, v = g * b, with a and b coprime\n                        # Since u's value is known, compute a and then b\n                        a = values[u] // g\n                        b = product_ab // a\n                        # Check if a and b are coprime\n                        if math.gcd(a, b) != 1:\n                            print(\"NO\")\n                            return\n                        values[v] = g * b\n                        visited[v] = True\n                        queue.append(v)\n                    else:\n                        # Check consistency\n                        if values[u] == 0 or values[v] == 0:\n                            continue\n                        current_gcd = math.gcd(values[u], values[v])\n                        current_lcm = (values[u] * values[v]) // current_gcd\n                        if current_gcd != g or current_lcm != l:\n                            print(\"NO\")\n                            return\n    print(\"YES\")\n    print(' '.join(map(str, values)))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The input is read and parsed into a list of edges and a graph structure.\n2. **Validation Check**: For each edge, check if the LCM is divisible by the GCD. If not, immediately output \"NO\".\n3. **Graph Traversal**: Using BFS, traverse each connected component starting from an unvisited node. Assign initial values and propagate values through edges ensuring constraints are met.\n4. **Consistency Check**: During traversal, ensure that the assigned values meet the GCD and LCM constraints for each edge. If any inconsistency is found, output \"NO\".\n\nThis approach ensures that all constraints are checked and values are consistently assigned across the graph, providing a valid solution if possible.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import deque, defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    edges = []\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        g = int(input[idx])\n        idx += 1\n        l = int(input[idx])\n        idx += 1\n        if l % g != 0:\n            print(\"NO\")\n            return\n        edges.append((u, v, g, l))\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n    \n    visited = [False] * n\n    values = [0] * n\n    \n    for start in range(n):\n        if not visited[start]:\n            queue = deque()\n            queue.append(start)\n            visited[start] = True\n            values[start] = 1  # initial value, will be adjusted\n            \n            while queue:\n                u = queue.popleft()\n                for (v, g, l) in graph[u]:\n                    if not visited[v]:\n                        # Compute a * b = l/g, gcd(a,b)=1\n                        product_ab = l // g\n                        # We need to assign values to u and v such that:\n                        # u = g * a, v = g * b, with a and b coprime\n                        # Since u's value is known, compute a and then b\n                        a = values[u] // g\n                        b = product_ab // a\n                        # Check if a and b are coprime\n                        if math.gcd(a, b) != 1:\n                            print(\"NO\")\n                            return\n                        values[v] = g * b\n                        visited[v] = True\n                        queue.append(v)\n                    else:\n                        # Check consistency\n                        if values[u] == 0 or values[v] == 0:\n                            continue\n                        current_gcd = math.gcd(values[u], values[v])\n                        current_lcm = (values[u] * values[v]) // current_gcd\n                        if current_gcd != g or current_lcm != l:\n                            print(\"NO\")\n                            return\n    print(\"YES\")\n    print(' '.join(map(str, values)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 865,
        "thoughts_token_count": 1024
    }
}