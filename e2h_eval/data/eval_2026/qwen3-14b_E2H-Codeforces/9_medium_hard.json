{
    "start": 1758021648.438782,
    "end": 1758024222.0826411,
    "start-formatted": "2025-09-16 20:20 KST",
    "end-formatted": "2025-09-16 21:03 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. So, the task is to find the maximum possible total cost of souvenirs that Petya can carry, given that each souvenir has a weight (1, 2, or 3) and a cost. The constraints are n up to 1e5 and m up to 3e5. Hmm, so a standard knapsack approach would be too slow here because for n=1e5 and m=3e5, the O(nm) solution would be way too slow. So we need a smarter approach.\n\nLet me think. Since the weights are limited to 1, 2, or 3, maybe we can handle each weight category separately. For example, for items of weight 1, we can take as many as possible (sorted by cost descending), same for weight 2 and 3. But how do we combine them optimally?\n\nWait, but there's a possibility that taking some combination of items with different weights gives a better total than just taking the highest value items in each category. For example, maybe a weight 3 item with high cost is better than two weight 2 items, but maybe not. So how do we balance between these options?\n\nLet me think about grouping the items by their weights. Let's say we have:\n\n- For weight 1: sort all items in descending order of cost. Then, take as many as possible.\n- Similarly for weight 2 and 3.\n\nBut the problem is that when combining these, the total weight might not be optimal. For example, if we have a lot of weight 2 items, perhaps replacing two weight 2 items with one weight 3 and one weight 1 (if their combined cost is higher) would be better. But how do we compute this efficiently?\n\nAlternatively, perhaps we can precompute prefix sums for each weight category. Then, for each possible number of weight 1 items taken, we can compute how many weight 2 and 3 items can be taken, and find the maximum total.\n\nBut even that approach might be computationally heavy. Let's think about the steps:\n\nFirst, group all items by their weight. For each group, sort them in descending order of cost, then compute prefix sums. For example, for weight 1, the prefix sum array would be sum_1[i] = sum of the first i items (sorted by cost descending). Same for weight 2 and 3.\n\nOnce we have those prefix sums, the problem reduces to choosing how many items of each weight to take, such that the total weight is <= m, and the sum of their costs is maximized.\n\nBut how to find the optimal combination?\n\nLet me think. Let's denote:\n\n- a = number of weight 1 items taken\n- b = number of weight 2 items taken\n- c = number of weight 3 items taken\n\nTotal weight: a*1 + b*2 + c*3 <= m.\n\nWe need to maximize sum_1[a] + sum_2[b] + sum_3[c].\n\nBut trying all possible a, b, c is impossible due to the large m. However, since the weights are small (1, 2, 3), maybe we can iterate over one of the variables and compute the others optimally.\n\nFor example, since the maximum possible number of weight 3 items is m//3, which for m=3e5 is 1e5. That's manageable? Well, if we loop through all possible c, then for each c, we can compute the best a and b.\n\nBut even that may be too slow. Let me think.\n\nAnother approach: Let's consider that for each possible number of weight 3 items, we can compute the remaining capacity and then solve the problem for weight 1 and 2 items. Similarly, for each possible number of weight 2 items, etc. But how?\n\nAlternatively, since the weight is small, perhaps we can precompute the best possible combinations for weight 1 and 2 items. Let's think about that.\n\nSuppose we have for weight 1 and 2 items. For each possible total weight w (up to m), what is the maximum value we can get from weight 1 and 2 items. Then, once we have that, for each possible number of weight 3 items, we can take c items, which take 3*c weight, and then use the precomputed maximum for the remaining weight (m - 3*c) from the weight 1 and 2 items.\n\nBut how to compute that precomputed maximum for weight 1 and 2 items?\n\nLet me think. Let's say we have the prefix sums for weight 1 and 2. Let's call them sum1 and sum2. For each possible number of weight 1 items (a), and weight 2 items (b), the total weight is a + 2*b. We need to find the maximum sum1[a] + sum2[b], where a + 2*b <= W (for some W). But how to compute this efficiently for all possible W?\n\nThis seems like a classic unbounded knapsack problem but with two items. However, since the items are sorted, perhaps we can find for each possible total weight W, the maximum value possible using weight 1 and 2 items.\n\nBut how to compute this efficiently?\n\nLet me think. Suppose we have the prefix sums for weight 1 and weight 2. Let's say that for weight 1, we have up to max_a items, and for weight 2, up to max_b items.\n\nThen, for a given W, the optimal choice would be to take some number of weight 2 items (say, b) and then fill the rest with weight 1 items. But since the total weight is a + 2*b <= W, we can iterate over possible b values and compute the maximum sum.\n\nBut for each W, this could take O(max_b) time. Which for W up to m (3e5) and max_b up to m//2, this would be O(3e5 * 1.5e5) = 4.5e10 operations, which is way too slow.\n\nSo that's not feasible. Need another approach.\n\nAlternative idea: For the weight 1 and 2 items, we can precompute for each possible number of weight 2 items, the maximum possible number of weight 1 items that can be taken. For example, suppose we take x weight 2 items. Then, the total weight used is 2x, leaving (W - 2x) weight for weight 1 items. But since weight 1 items can be taken up to min( (W - 2x), len(weight1)) items. So for each x, the maximum value is sum2[x] + sum1[ min( (W - 2x), len1 ) ].\n\nSo for a given W, the maximum value is the maximum over x (from 0 to min( max_b, floor(W/2) )) of sum2[x] + sum1[ min( (W - 2x), len1 ) ].\n\nBut how to compute this efficiently for all possible W?\n\nAlternatively, since for each possible x (number of weight 2 items), the maximum number of weight 1 items is (W - 2x). So for each x, we can compute the maximum possible sum for that x. But how to find the best x for a given W?\n\nBut again, for each W, it's O(x_max) time, which is not feasible.\n\nWait, but perhaps for the weight 1 and 2 items, we can precompute an array dp where dp[w] is the maximum value achievable with total weight exactly w. Then, for all possible w up to m, we can compute this. However, with m up to 3e5, and for each weight 1 and 2 items, this would be O(m) time. But since weight 1 and 2 items can be processed in a way similar to the knapsack problem.\n\nWait, but the items are grouped. For example, for weight 1 items, since they are sorted, taking the top k items gives the maximum possible value for k items. Similarly for weight 2 items.\n\nSo for the weight 1 and 2 items, the problem becomes: select a number of weight 1 items (a) and weight 2 items (b), such that a + 2b <= W. Find the maximum sum of sum1[a] + sum2[b].\n\nBut how to compute this quickly?\n\nAnother idea: for each possible total weight w, we can find the best combination of a and b. Let's say we have the prefix sums for weight 1 (sum1) and for weight 2 (sum2).\n\nLet me think of the following approach for the weight 1 and 2 case. For each possible number of weight 2 items (b), we can calculate the maximum possible a (number of weight 1 items) that can be taken given that 2b + a <= W. So a = min( W - 2b, len1 ). Then, the total value is sum2[b] + sum1[a].\n\nThe maximum over all possible b (from 0 to min( max_b, W//2 )) is the answer for that W.\n\nBut for each W, this would take O( (W//2) ) time. Which again is not feasible for large W.\n\nBut perhaps we can precompute for all possible W, the best combination of a and b. However, even that seems computationally expensive.\n\nAlternatively, for each possible b (number of weight 2 items), we can compute the maximum possible a for any W. For example, if we have a fixed b, then for any W >= 2b, the maximum a is min( W - 2b, len1 ), and thus the value is sum2[b] + sum1[min(...)].\n\nBut how to use this information for all W?\n\nLet me think about the following: For the weight 1 and 2 items, we can precompute for each possible number of weight 2 items (b), and for each possible W, the maximum value. But again, this seems too much.\n\nWait, but perhaps we can find for each possible W, the optimal b is either floor(W/2) or something similar. Or maybe for each W, the optimal b is in a small range around W//2. But I'm not sure.\n\nAlternatively, considering that the weight 1 items are sorted in descending order, and the sum1 array is non-decreasing. Similarly for sum2. So, for a fixed W, the optimal b is such that 2b is as large as possible, but not exceeding W. However, since sum2 is non-decreasing, taking more weight 2 items (if possible) might give a better sum. But this isn't necessarily true because the sum1 might have higher value for the remaining weight.\n\nWait, for example, if we have W = 5. Suppose taking 2 weight 2 items (total weight 4, sum2[2] = 10) and then 1 weight 1 item (sum1[1] = 5), total 15. Alternatively, taking 1 weight 2 item (sum2[1] = 8) and 3 weight 1 items (sum1[3] = 12), total 20. So in this case, taking fewer weight 2 items gives a better result. So the optimal b depends on the trade-off between the sum2 and sum1.\n\nHmm. So, for a given W, the optimal b can be found by checking all possible values of b from 0 to min( max_b, W//2 ), but that's O(W) time for each W, which is not feasible.\n\nBut here's an idea: since the sum2 is non-decreasing and sum1 is non-decreasing, for a given W, the optimal b is somewhere in the range of max(0, (W - len1) // 2) to min( W//2, max_b ). Because if you take more than (W - len1)/2 weight 2 items, then the remaining weight for weight 1 items is less than len1, so you can't take all of them. But this is getting complicated.\n\nAlternatively, for each possible number of weight 2 items (b), we can compute the maximum weight that can be allocated to weight 1 items, and then for each possible W, we can find the best b. However, I'm not sure.\n\nWait, but if we precompute for all possible b (number of weight 2 items), then for each b, the maximum weight that can be allocated to weight 1 is up to (W - 2b). But how does that help?\n\nAnother thought: since the weight 1 items are sorted, for each possible W, the best way to take weight 1 and 2 items is to take as many weight 2 items as possible, but also possibly some weight 1 items. However, this is not always the case, as shown earlier.\n\nBut given that the weight 1 items are sorted in descending order, and the same for weight 2 items, perhaps for each possible W, the optimal is to take some number of weight 2 items and then fill the rest with weight 1 items. And for that, we can binary search on the number of weight 2 items to take.\n\nWait, here's an idea. For a given W, the maximum value is max over b in [0, ... , B], where B is min( max_b, floor(W / 2) ), of sum2[b] + sum1[ min( W - 2b, len1 ) ].\n\nBut how to compute this maximum quickly for a given W?\n\nIf we can find the optimal b for a given W, that would be helpful. Let's think about this function as a function of b. Since sum2 is increasing with b, and sum1 is increasing with (W - 2b), which decreases as b increases. So the total function is not necessarily monotonic. However, perhaps it's unimodal, which would allow us to use ternary search.\n\nBut I'm not sure. Let's take an example. Suppose sum2 increases with b, and sum1 increases with the remaining weight. So for a given W, as b increases, 2b increases, so the remaining weight (W - 2b) decreases. Thus, sum1[...] decreases. So the total function is sum2[b] + sum1[...], which is the sum of an increasing function and a decreasing function. The overall function could have a single peak, making it unimodal. If that's the case, then ternary search can be used.\n\nBut I'm not certain. However, assuming that this is unimodal, then for each W, we can perform a ternary search on b to find the optimal value. This would reduce the per-W computation from O(B) to O(log B), which is manageable.\n\nBut how to implement this?\n\nAlternatively, for each W, the optimal b is either in the range of 0 to floor(W/2), and for that, we can precompute for each possible W the best b.\n\nBut again, this seems challenging.\n\nAlternatively, perhaps for the entire problem, we can precompute the best combinations for weight 1 and 2 items, and then for each possible number of weight 3 items, we can compute the remaining weight and use that precomputed value.\n\nSo, let's proceed step by step.\n\nFirst, process the weight 1, 2, 3 items.\n\nGroup them into three separate lists.\n\nSort each list in descending order of cost. Then compute prefix sums for each.\n\nFor example:\n\nsum1[i] = sum of the first i items in weight 1 list.\n\nsum2[i] = sum of first i items in weight 2 list.\n\nsum3[i] = sum of first i items in weight 3 list.\n\nNow, for the problem, the maximum total cost can be found by considering all possible numbers of weight 3 items (c), and for each c, compute the best combination of weight 1 and 2 items for the remaining weight (m - 3*c). Then take the maximum over all c.\n\nBut how to compute the best combination of weight 1 and 2 items for a given remaining weight W = m - 3*c.\n\nSo, the key problem is to compute for a given W, the maximum value from weight 1 and 2 items. Let's focus on solving that.\n\nLet me think of this as a function f(W) which returns the maximum value possible using weight 1 and 2 items with total weight <= W.\n\nIf I can compute f(W) quickly, then for each possible c (number of weight 3 items), compute W = m - 3*c, then check if W >=0. Then the maximum total is sum3[c] + f(W).\n\nSo the problem reduces to computing f(W) efficiently.\n\nNow, how to compute f(W)?\n\nAs discussed earlier, for each W, the maximum value is max over b of sum2[b] + sum1[ min( W - 2*b, len1 ) ].\n\nBut how to compute this quickly.\n\nLet me think of the following approach:\n\nFor each W, the optimal b can be in the range [max(0, (W - len1) // 2 ), min( W // 2, len2 ) ].\n\nBecause if we take more than (W - len1)/2 weight 2 items, then W - 2*b would be less than len1, which means we can't take all the weight 1 items. However, this is just an idea.\n\nBut even if that's the case, the range is still O(W) in the worst case.\n\nAlternative Idea: For each W, the maximum number of weight 2 items is up to min( len2, W//2 ), and for each possible b in this range, we can compute the corresponding a = min( W - 2*b, len1 ), and then sum2[b] + sum1[a]. The maximum of these values is f(W).\n\nBut for W up to 3e5, and for each c (number of weight 3 items) up to m//3 (which is up to 1e5), this would be O( (3e5) * (1e5) ) operations, which is 3e10 — way too slow.\n\nThis is not feasible. So we need a better approach.\n\nAlternative Idea: Precompute for all possible numbers of weight 2 items, and for each possible total weight, find the best combination. But again, not sure.\n\nLet me think about the maximum possible len1 and len2. Since n is up to 1e5, len1, len2, len3 can be up to 1e5 each. So for the weight 1 and 2 case, the maximum possible number of items is 1e5 each.\n\nAnother Idea: Since the weight 1 items are sorted, for a given W, the maximum possible sum1 is sum1[k], where k is min(W, len1). Because each weight 1 item is 1 unit. So if we take all weight 1 items, that's W units (if W is >= len1). Otherwise, take W items.\n\nSimilarly for weight 2 items: the maximum possible sum2 is sum2[k], where k is min( W//2, len2 ).\n\nBut combining them isn't straightforward. However, perhaps the optimal solution is to take as many weight 2 items as possible and fill the rest with weight 1 items, or take as many weight 1 items as possible and fill the rest with weight 2 items. But this isn't necessarily the case.\n\nBut maybe for the purpose of this problem, we can find the optimal between taking all possible weight 2 items, or all possible weight 1 items, and some combinations in between. However, I'm not sure.\n\nAlternatively, for a given W, the optimal combination of weight 1 and 2 items can be found by considering the following:\n\nLet’s say we take x weight 2 items. Then, the remaining weight is W - 2x, which can be filled with weight 1 items. The maximum x can be min(len2, floor(W/2)).\n\nBut how to find the best x? Well, perhaps we can iterate x from max(0, floor(W/2) - k) to floor(W/2) for some small k, say 300, and find the maximum among those. Since the optimal x is likely to be near the maximum possible x, or near the x that allows filling the remaining weight with as many weight 1 items as possible.\n\nBut why would this work? Well, for example, if the weight 1 items are very valuable, then taking fewer weight 2 items and more weight 1 items would be better. However, the number of possible x that could be optimal is limited. For example, if the optimal x is somewhere around floor(W/2), but perhaps only a few possibilities need to be checked.\n\nBut how to determine the range of x to check?\n\nAlternatively, considering that for each W, the best x is either the maximum possible (floor(W/2)), or the maximum possible minus 1, or the maximum possible minus 2, etc., up to some small number. For example, check the top 300 values of x. Since the weight 2 items are sorted, taking more of them would give higher sum2, but taking fewer allows more weight 1 items.\n\nIf we check, say, the top 300 values of x (starting from max_x down to max_x - 300), then for each W, this would be O(300) operations. Given that m is up to 3e5, and for each c (number of weight 3 items), we would need to compute W = m - 3c, and for each such W, check 300 possibilities, the total time would be O( (number of c) * 300 ). Since number of c is up to m//3 (about 1e5), this would be 3e7 operations, which is acceptable.\n\nBut how to choose the number of x to check? Well, since the weight 1 and 2 items are sorted, the best x is likely to be in the vicinity of the maximum possible x. So, for each W, check the top 300 possible x values (i.e., starting from min( len2, W//2 ) down to max(0, min( len2, W//2 ) - 300 )). For each of these x, compute the corresponding a (the number of weight 1 items, which is min( W - 2x, len1 ) ), and take the maximum sum2[x] + sum1[a].\n\nBut why would this work? Well, in practice, this might cover all possible optimal scenarios, especially since the weight 1 items are sorted, and the weight 2 items are sorted. So, if there's a scenario where taking a slightly lower number of weight 2 items allows for more weight 1 items, which could be better, this approach would capture that.\n\nLet me test this idea with the earlier example where W=5. For this case, the maximum x (number of weight 2 items) is 2. So checking x=2 and x=1 (since 2-1=1). For x=2, the remaining weight is 5-4=1, so a=1. For x=1, remaining weight is 5-2=3, a=3 (assuming len1 is >=3). So sum2[2]+sum1[1] vs sum2[1]+sum1[3]. If the latter is higher, then it's captured by checking x=1.\n\nSo, if we check up to 300 possibilities, even if the optimal x is far from the maximum, it would be covered. But what if the optimal x is way lower? Like, for example, if W is very large and there are a lot of weight 1 items. However, in that case, the optimal x would be zero, and checking up to 300 possibilities would include x=0 if the maximum x is larger than 300.\n\nBut how to ensure that? Well, for example, if the maximum x is 1e5, and we check x from max_x down to max_x - 300, then x=0 won't be checked. So this approach might miss some cases. So perhaps we need to also check the case where x is zero. But that's not sufficient.\n\nAlternative Idea: For each W, check x in the range [max(0, floor(W/2) - K), floor(W/2)], where K is a small constant like 300. Also check x = 0. Wait, but that might not be enough. Alternatively, check the top K x's and the bottom K x's.\n\nBut how to choose K? Well, given that the weight 1 and 2 items are sorted, the optimal x is likely to be in the vicinity of the maximum possible x, or where the sum of sum2[x] + sum1[...] is maximized. However, without knowing the actual data, it's hard to say. However, given that the constraints are tight, and the problem is from programming competition, perhaps this approach is acceptable.\n\nLet me think of the sample input.\n\nSample Input 2:\n2 2\n1 3\n2 2\n\nSo the weight 1 items are [3], sum1[0]=0, sum1[1]=3.\n\nWeight 2 items are [2], sum2[0]=0, sum2[1]=2.\n\nFor W=2, the maximum x is 1. Check x=1: sum2[1] + sum1[0] = 2 + 0 = 2. Or x=0: sum2[0] + sum1[2] (but sum1 has len1=1, so min(2, 1) =1. So sum is 0 +3 =3. So the maximum is 3. So the approach of checking x=1 and x=0 would work.\n\nBut if we only check x=1 (max_x) and not x=0, we would miss the correct answer. Hence, the approach of checking the top K x's and also including x=0 might be needed.\n\nBut how to handle this?\n\nAlternative Idea: For each W, we can check all possible x in the range [max(0, floor(W/2) - K), floor(W/2)] and also check x=0. But if K is 300, then for each W, we check 301 possibilities. Which would be manageable.\n\nBut what value of K to choose? Well, let's think of the worst case. For example, if there are many weight 1 items with very high cost, and the optimal x is zero. So if K is 300, but floor(W/2) is 300, then checking up to 300 would include x=0 only if floor(W/2) is 0, which is not the case. So this approach would miss it.\n\nBut perhaps there's another way. For example, for each W, the optimal x is either:\n\n- The maximum possible x (floor(W/2)), or\n- The maximum x where the remaining weight can take all possible weight 1 items (i.e., W - 2x >= len1), or\n- Some other value.\n\nBut how to find that?\n\nAlternatively, for each W, the optimal x is the one that makes the remaining weight (W - 2x) as close as possible to len1. But again, this is unclear.\n\nLet me think of the following approach. For the weight 1 and 2 items, the maximum possible value is either:\n\n- Take as many weight 2 items as possible, then fill with weight 1 items.\n- Take as many weight 1 items as possible, then fill with weight 2 items.\n- Take some combination of both, which is optimized by checking a few possibilities around the maximum x.\n\nBut how to implement this?\n\nFor example, for each W, compute the following candidates:\n\n1. Take the maximum possible number of weight 2 items (x_max = min(len2, W//2)), and then take the remaining weight for weight 1 items.\n\n2. Take the maximum possible number of weight 1 items (a_max = min(W, len1)), then take the remaining weight (W - a_max) for weight 2 items. The number of weight 2 items is (W - a_max) // 2. But since the remaining weight is W - a_max, which could be anything.\n\n3. Also check some other possibilities, like x_max - 1, x_max - 2, etc., up to a small number of steps.\n\nSo, for each W, evaluate these candidates and choose the maximum.\n\nThis would cover the two extremes (all weight 2 items, all weight 1 items) and some in between.\n\nIn the earlier example where W=5, the first candidate would be x=2 (sum2[2] + sum1[1]), and the second candidate would be a=5 (assuming len1 >=5), then remaining weight is 0, so x=0. So sum1[5] + sum2[0]. But if the weight 1 items are better, this would be captured.\n\nThis seems promising. So for each W, we can generate a few candidates and pick the best.\n\nSo, the plan is:\n\nFor a given W, generate several candidates for x (number of weight 2 items):\n\n- x_max = min( len2, W//2 )\n- x_candidates = [x_max, x_max-1, ..., max(0, x_max - K) ]\n- Also, add x = 0, and x such that the remaining weight is len1 (i.e., W - 2x = len1 => x = (W - len1)/2 )\n\nBut how to handle this? Well, perhaps generate all x in the range of max(0, x_max - K) to x_max, and also check x where 2x = W - len1 (if that's possible).\n\nBut how to choose K? Well, for K=300, it's manageable.\n\nLet me try to code this logic.\n\nSo, for each W, the maximum value from weight 1 and 2 items is computed by evaluating several possible x values, and taking the maximum.\n\nNow, back to the overall problem.\n\nOnce we have this function f(W), then for each possible c (number of weight 3 items), we can compute W = m - 3*c. If W <0, skip. Else, compute f(W) + sum3[c], and keep track of the maximum.\n\nNow, the steps for the code:\n\nRead n and m.\n\nGroup the items into three lists based on their weight.\n\nSort each list in descending order of cost.\n\nCompute prefix sums for each list.\n\nFor the weight 1 and 2 items, create sum1 and sum2 arrays.\n\nThen, for each possible c (number of weight 3 items):\n\n   max_c = min( len3, m//3 )\n\n   for c in 0 to max_c:\n\n      remaining_weight = m - 3*c\n\n      current_value = sum3[c] + f(remaining_weight)\n\n      update the maximum.\n\nNow, the challenge is implementing f(remaining_weight) efficiently.\n\nSo, the function f(W) is implemented as follows:\n\ndef compute_f(W):\n\n    max_x = min( len2, W // 2 )\n\n    candidates = set()\n\n    # add x_max, x_max-1, ..., down to max(0, x_max - K), where K is 300\n\n    for x in range( max(0, max_x - 300), max_x + 1 ):\n\n        candidates.add(x)\n\n    # also add x = 0, in case it's not covered\n\n    candidates.add(0)\n\n    # also check x where W - 2x = len1 (if possible)\n\n    x_candidate = (W - len1) // 2\n\n    if x_candidate >=0 and x_candidate <= max_x:\n\n        candidates.add(x_candidate)\n\n    max_val = 0\n\n    for x in candidates:\n\n        if x > len2:\n\n            continue\n\n        if 2*x > W:\n\n            continue\n\n        a = min( W - 2*x, len1 )\n\n        current = sum2[x] + sum1[a]\n\n        if current > max_val:\n\n            max_val = current\n\n    return max_val\n\nBut this is a rough idea. Now, what about K=300? How to choose it?\n\nWell, in practice, for programming competition problems, this approach might work. For example, if the optimal x is within 300 steps from the maximum x, then it will be found. Otherwise, it may not. However, given the time constraints, this might be the best approach.\n\nBut what if there are cases where the optimal x is not in the checked range? For example, if there are many weight 1 items with very high cost, and the optimal x is 0. But if the max_x is large, say 1e5, then checking down to max_x-300 would not include x=0. However, adding x=0 to the candidates would cover that case.\n\nSo, in the code above, adding x=0 to the candidates ensures that even if the optimal x is zero, it will be considered.\n\nBut what about other cases? For example, if the optimal x is somewhere in the middle of the range, but not near the max_x or zero?\n\nBut given that the weight 1 and 2 items are sorted, the sum2[x] increases with x, and sum1[a] decreases as x increases. So the function is a trade-off between the two. The optimal x is likely to be near the point where the marginal gain of adding a weight 2 item equals the marginal loss of losing some weight 1 items.\n\nBut without knowing the exact data, it's hard to say. However, this approach is likely to work for the given problem constraints, especially since the weight 1 items are sorted in descending order, and thus the best possible is to take as many as possible.\n\nNow, the code steps:\n\nImplementing this function f(W) as described.\n\nNow, let's think about the sample input.\n\nSample Input 2:\n\nn=2, m=2\n\nItems:\n\n1 3 (weight 1, cost 3)\n\n2 2 (weight 2, cost 2)\n\nsum1 is [0, 3]\n\nsum2 is [0, 2]\n\nFor W=2, compute f(2):\n\nmax_x = min( len2=1, 2//2=1 ) → 1.\n\ncandidates are x in [max(0, 1-300)=0, 1], and x=0.\n\nSo x=0 and x=1.\n\nFor x=0: a = min(2, 1) → 1 → sum2[0] + sum1[1] = 0 +3=3.\n\nFor x=1: a = min(2-2*1=0, 1) → 0 → sum2[1] + sum1[0] = 2+0=2. So maximum is 3.\n\nWhich matches the sample output.\n\nAnother sample: first input is 1 1, with item weight 2, cost 1. Then, the maximum weight is 1. So no items can be taken. Output is 0.\n\nThird sample input:\n\n4 3\n\n3 10\n\n2 7\n\n2 8\n\n1 1\n\nGrouping by weight:\n\nweight 3: [10]\n\nweight 2: [7,8] (sorted descending?)\n\nWait, wait, the items are:\n\nThe input is:\n\n4 3\n\n3 10 → weight 3, cost 10\n\n2 7 → weight 2, cost7\n\n2 8 → weight 2, cost8\n\n1 1 → weight1, cost1.\n\nSo weight 2 items are [8,7] (sorted descendingly). sum2 is [0, 8, 15].\n\nsum1 is [0, 1].\n\nsum3 is [0, 10].\n\nNow, for the maximum c (number of weight3 items). m is 3. So 3*c can be 0, 3.\n\nc=1 → 3*1=3 → remaining weight is 0. So f(0) is 0. So total is 10 + 0=10.\n\nc=0 → remaining weight is 3. Compute f(3).\n\nFor W=3.\n\nmax_x = min( len2=2, 3//2=1 ) → 1.\n\ncandidates are x in 0 to 1, plus x=0.\n\nSo x=0 and x=1.\n\nx=0: a = min(3, len1=1) →1. sum2[0] + sum1[1] =0+1=1.\n\nx=1: 2*1=2 ≤3. a=3-2=1. sum2[1] is 8, sum1[1] is 1. Total 9. So maximum is 9. So total for c=0 is 9 + 0 (sum3[0]) =9. So overall maximum is 10.\n\nWhich matches the sample output.\n\nSo this approach works for the samples.\n\nNow, the code.\n\nNow, let's code this.\n\nFirst, read the input. For each of the n lines, group the items by weight.\n\nThen, sort each group in descending order of cost, then compute prefix sums.\n\nThen, for the weight 3 items, compute sum3.\n\nThen, for each possible c in 0 to min( len3, m//3 ), compute remaining_weight = m - 3*c. If remaining_weight is negative, skip. Else, compute f(remaining_weight) as discussed.\n\nNow, the code for f(W):\n\nBut how to handle the case when W is negative? Well, in that case, return 0.\n\nNow, the code for f(W):\n\ndef compute_f(W, sum1, len1, sum2, len2):\n\n    if W <0:\n\n        return 0\n\n    max_x = min(len2, W // 2)\n\n    candidates = set()\n\n    # add x from max",
    "response": "\n\nTo solve this problem, we need to determine the maximum possible total cost of souvenirs that Petya can carry given a weight limit. The souvenirs have weights of 1, 2, or 3, and we need an efficient approach to handle the constraints where the number of souvenirs (n) can be up to 100,000 and the maximum weight (m) can be up to 300,000.\n\n### Approach\n1. **Grouping by Weight**: First, we group the souvenirs based on their weights (1, 2, or 3).\n2. **Sorting and Prefix Sums**: For each weight group, we sort the items by their cost in descending order and compute prefix sums to quickly calculate the total cost for taking the top k items.\n3. **Iterating Over Possible Counts of Weight 3 Items**: For each possible count of weight 3 items (c), we compute the remaining weight capacity and determine the optimal combination of weight 1 and weight 2 items that can fit into this remaining capacity.\n4. **Optimal Combination for Weight 1 and 2 Items**: For each remaining weight capacity after considering weight 3 items, we evaluate several candidate counts of weight 2 items to find the optimal combination with weight 1 items, ensuring we check both extremes and nearby values to balance between weight 1 and weight 2 items efficiently.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    w1 = []\n    w2 = []\n    w3 = []\n    \n    for _ in range(n):\n        wi = int(input[idx])\n        idx += 1\n        ci = int(input[idx])\n        idx += 1\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    \n    # Sort and compute prefix sums\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    \n    len1 = len(w1)\n    len2 = len(w2)\n    len3 = len(w3)\n    \n    # Compute prefix sums for each weight\n    sum1 = [0] * (len1 + 1)\n    for i in range(len1):\n        sum1[i+1] = sum1[i] + w1[i]\n    \n    sum2 = [0] * (len2 + 1)\n    for i in range(len2):\n        sum2[i+1] = sum2[i] + w2[i]\n    \n    sum3 = [0] * (len3 + 1)\n    for i in range(len3):\n        sum3[i+1] = sum3[i] + w3[i]\n    \n    max_total = 0\n    \n    # Try all possible c for weight 3 items\n    max_c = min(len3, m // 3)\n    for c in range(0, max_c + 1):\n        remaining = m - 3 * c\n        if remaining < 0:\n            continue\n        \n        # Compute f(remaining)\n        # Now, compute the best value for weight 1 and 2 with total weight <= remaining\n        W = remaining\n        max_x = min(len2, W // 2)\n        candidates = set()\n        # Add x from max(0, max_x - 300) to max_x\n        K = 300\n        start_x = max(0, max_x - K)\n        for x in range(start_x, max_x + 1):\n            candidates.add(x)\n        candidates.add(0)\n        # Also check x where W - 2x = len1\n        x_candidate = (W - len1) // 2\n        if x_candidate >= 0 and x_candidate <= max_x:\n            candidates.add(x_candidate)\n        \n        current_max = 0\n        for x in candidates:\n            if x > len2:\n                continue\n            if 2 * x > W:\n                continue\n            a = min(W - 2 * x, len1)\n            val = sum2[x] + sum1[a]\n            if val > current_max:\n                current_max = val\n        total = sum3[c] + current_max\n        if total > max_total:\n            max_total = total\n    \n    print(max_total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n- **Grouping and Sorting**: We group the souvenirs by their weights and sort each group by cost in descending order to prioritize higher-value items.\n- **Prefix Sums**: Prefix sums allow quick calculation of the total cost for taking the top k items from each weight group.\n- **Iterating Over Weight 3 Items**: For each possible count of weight 3 items, we calculate the remaining weight capacity and use a heuristic to check candidate counts of weight 2 items to find the optimal combination with weight 1 items, ensuring we consider both extremes and nearby values efficiently.\n\nThis approach ensures that we efficiently explore the optimal combinations of items while adhering to the weight constraints, leveraging sorting and prefix sums for quick calculations.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    w1 = []\n    w2 = []\n    w3 = []\n    \n    for _ in range(n):\n        wi = int(input[idx])\n        idx += 1\n        ci = int(input[idx])\n        idx += 1\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    \n    # Sort and compute prefix sums\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    \n    len1 = len(w1)\n    len2 = len(w2)\n    len3 = len(w3)\n    \n    # Compute prefix sums for each weight\n    sum1 = [0] * (len1 + 1)\n    for i in range(len1):\n        sum1[i+1] = sum1[i] + w1[i]\n    \n    sum2 = [0] * (len2 + 1)\n    for i in range(len2):\n        sum2[i+1] = sum2[i] + w2[i]\n    \n    sum3 = [0] * (len3 + 1)\n    for i in range(len3):\n        sum3[i+1] = sum3[i] + w3[i]\n    \n    max_total = 0\n    \n    # Try all possible c for weight 3 items\n    max_c = min(len3, m // 3)\n    for c in range(0, max_c + 1):\n        remaining = m - 3 * c\n        if remaining < 0:\n            continue\n        \n        # Compute f(remaining)\n        # Now, compute the best value for weight 1 and 2 with total weight <= remaining\n        W = remaining\n        max_x = min(len2, W // 2)\n        candidates = set()\n        # Add x from max(0, max_x - 300) to max_x\n        K = 300\n        start_x = max(0, max_x - K)\n        for x in range(start_x, max_x + 1):\n            candidates.add(x)\n        candidates.add(0)\n        # Also check x where W - 2x = len1\n        x_candidate = (W - len1) // 2\n        if x_candidate >= 0 and x_candidate <= max_x:\n            candidates.add(x_candidate)\n        \n        current_max = 0\n        for x in candidates:\n            if x > len2:\n                continue\n            if 2 * x > W:\n                continue\n            a = min(W - 2 * x, len1)\n            val = sum2[x] + sum1[a]\n            if val > current_max:\n                current_max = val\n        total = sum3[c] + current_max\n        if total > max_total:\n            max_total = total\n    \n    print(max_total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 481,
        "completion_token_count": 1127,
        "thoughts_token_count": 8191
    }
}