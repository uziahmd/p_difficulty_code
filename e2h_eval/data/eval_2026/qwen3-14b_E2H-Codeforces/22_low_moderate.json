{
    "start": 1758309316.9778345,
    "end": 1758309346.3324437,
    "start-formatted": "2025-09-20 04:15 KST",
    "end-formatted": "2025-09-20 04:15 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where their mark is the maximum for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the first student's marks for the three subjects.\n\nThe plan is:\n\n1. For each subject (columns), find the maximum mark.\n2. For each student, check if there's at least one subject where their mark in that subject equals the maximum for that subject. If yes, they are successful.\n3. Count how many such students there are.\n\nSo, the steps in code:\n\nFirst, read n and m. Then read the next n lines as a list of strings. Then, for each column (subject), find the maximum value.\n\nWait, how to process the columns? Let's think. For example, the first subject is the first character of each student's row. So for all rows, take the j-th character (for each j from 0 to m-1) and find the max.\n\nOnce I have the max for each subject, then for each student, check if any of their marks in the subjects is equal to the max of that subject. If at least one exists, count them.\n\nSo, let's think about data structures. Let's convert each student's string into a list of integers. Then, for each column j, compute the max of all students' marks in that column.\n\nFor example, for the first sample input:\n\n3 3\n\n223\n\n232\n\n112\n\nThe students' marks are:\n\nStudent 1: [2,2,3]\n\nStudent 2: [2,3,2]\n\nStudent 3: [1,1,2]\n\nFor each subject (columns 0, 1, 2):\n\nSubject 0: max is 2 (students 1 and 2 have 2, but student 3 has 1)\n\nWait, no. Wait, the first column is the first digit of each row. So for the first subject:\n\nstudent 1's mark is 2, student 2's is 2, student 3's is 1. Max is 2.\n\nSubject 1: student 1 has 2, student 2 has 3, student 3 has 1. Max is 3.\n\nSubject 2: student 1 has 3, student 2 has 2, student 3 has 2. Max is 3.\n\nSo for each student:\n\nStudent 1 has marks 2 (subject 0, which is max 2), 2 (subject 1, max is 3), 3 (subject 2, max is 3). So he has at least one (subject 0 and 2). So he is successful.\n\nStudent 2: subject 0 (2, which is max), subject 1 (3, which is max), subject 2 (2). So he is successful.\n\nStudent 3: all his marks are 1, 1, 2. None of these are equal to the max for their subjects (subjects 0's max is 2, subject 1's max is 3, subject 2's is 3). So he isn't. Hence total is 2, which matches the sample.\n\nSo the approach is correct.\n\nNow, how to implement this in Python.\n\nFirst, read the input. Let's read n and m. Then read n lines, each line being a string. Then, for each column j (from 0 to m-1), find the maximum value among all students' j-th marks.\n\nOnce we have the max values for each subject, then for each student, check if any of their marks in the subjects is equal to the max of that subject.\n\nSo, code steps:\n\nRead n and m.\n\nThen read n lines, each line is a string. Let's store them as a list of lists of integers. For example, for each row in the input, convert it into a list of integers. So, for the first sample, the list would be [[2,2,3], [2,3,2], [1,1,2]].\n\nThen, for each column j in 0..m-1:\n\nCompute the maximum value in that column. So, for j=0, collect all the rows[i][j] for i in 0..n-1, and take max.\n\nOnce we have the max for each column, then for each student",
    "response": "```python\nn, m = map(int, input().split())\ngradebook = [list(map(int, list(input()))) for _ in range(n)]\n\n# Find the maximum mark for each subject\nmax_marks = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if gradebook[i][j] > max_val:\n            max_val = gradebook[i][j]\n    max_marks.append(max_val)\n\n# Check each student for success\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if gradebook[i][j] == max_marks[j]:\n            successful += 1\n            break\n\nprint(successful)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngradebook = [list(map(int, list(input()))) for _ in range(n)]\n\n# Find the maximum mark for each subject\nmax_marks = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if gradebook[i][j] > max_val:\n            max_val = gradebook[i][j]\n    max_marks.append(max_val)\n\n# Check each student for success\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if gradebook[i][j] == max_marks[j]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": -1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 146,
        "thoughts_token_count": 1024
    }
}