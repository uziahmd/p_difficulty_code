{
    "start": 1758008458.6389275,
    "end": 1758008657.4128914,
    "start-formatted": "2025-09-16 16:40 KST",
    "end-formatted": "2025-09-16 16:44 KST",
    "gpu": 2,
    "pid": 2,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Valera and X\n\nValera is a little boy. Yesterday he got a huge Math hometask at school, so Valera didn't have enough time to properly learn the English alphabet for his English lesson. Unfortunately, the English teacher decided to have a test on alphabet today. At the test Valera got a square piece of squared paper. The length of the side equals n squares (n is an odd number) and each unit square contains some small letter of the English alphabet.Valera needs to know if the letters written on the square piece of paper form letter \"X\". Valera's teacher thinks that the letters on the piece of paper form an \"X\", if:  on both diagonals of the square paper all letters are the same;  all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals. Help Valera, write the program that completes the described task for him.\n\n## Input\nThe first line contains integer n (3 ≤ n < 300; n is odd). Each of the next n lines contains n small English letters — the description of Valera's paper.\n\n## Output\nPrint string \"YES\", if the letters on the paper form letter \"X\". Otherwise, print string \"NO\". Print the strings without quotes.\n\n## Example\n### Input\n['5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox', '3\\nwsw\\nsws\\nwsw', '3\\nxpx\\npxp\\nxpe']\n\n### Output\n['NO', 'YES', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. So Valera needs to check if the letters on his square paper form an 'X' according to specific rules. Let me think about what those rules are.\n\nThe problem says that the paper forms an 'X' if two conditions are met. First, both diagonals have the same letters. Second, all other squares (not on the diagonals) have the same letter, which is different from the diagonal's letter.\n\nHmm. So first, I need to check the diagonals. The main diagonal is from top-left to bottom-right, and the anti-diagonal is from top-right to bottom-left. All the cells in these two diagonals must be the same. But wait, do they have to be the same as each other? Like, if the main diagonal is all 'x' and the anti-diagonal is all 'x', that's okay. But if one is 'x' and the other is 'y', then that's invalid. Because the first condition says that on both diagonals all letters are the same. So the two diagonals must have the same letter, right?\n\nWait, the first condition says: on both diagonals of the square paper all letters are the same. So each diagonal must have all same letters. But the two diagonals can have different letters? Or do they have to be the same?\n\nWait, the problem says that the letters form an X if:\n\n- on both diagonals all letters are the same (so each diagonal has same letters, but maybe different between diagonals?)\n\nBut then the second condition says that all other squares (non-diagonal) have the same letter, different from the diagonals. Wait, but if the two diagonals have different letters, then the non-diagonal squares have to be different from both? But that's impossible. Because suppose the main diagonal is 'a' and the anti-diagonal is 'b'. Then the other squares must be same letter, but different from both a and b. But that would require that all non-diagonal squares are same, but that's possible. However, the problem says that the other squares must be same letter different from the letters on the diagonals. Wait, but the diagonals have two different letters. So how can the other squares be different from both?\n\nAh, perhaps the problem implies that the diagonals must be the same. Because otherwise, the other squares would have to be different from both, but that's possible only if the two diagonals have same letters. Wait, no. Let me read the problem statement again.\n\nThe problem says:\n\n\"on both diagonals of the square paper all letters are the same; all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals.\"\n\nSo the first part says that each diagonal has all same letters. But the two diagonals can have different letters. However, the second part says that all non-diagonal squares have the same letter, which is different from the letters on the diagonals. Wait, but if the two diagonals have different letters, then the non-diagonal squares must be different from both. But that's impossible unless the two diagonals have same letters. Because suppose the main diagonal is 'a' and the anti-diagonal is 'b'. Then the non-diagonal squares must be a letter that is different from both a and b. But that's possible. For example, if the diagonals are a and b, and the rest are c. But then the problem says that the other squares must be different from the letters on the diagonals. But the diagonals have two different letters. So the other squares must be different from both. So that's allowed.\n\nWait, but the problem says \"different from the letters on the diagonals\". But if the diagonals have two different letters, then the other squares must be different from both. So that's possible. However, the problem says that the other squares have the same letter. So that letter must be different from both of the diagonal letters.\n\nBut that would require that the two diagonals have different letters. But then how can the other squares be different from both? For example, if the diagonals are 'a' and 'b', then the other squares must be some letter 'c' which is different from both.\n\nBut in that case, the problem's example input 2 is:\n\n3\n\nwsw\n\nsws\n\nwsw\n\nLet me check that. For n=3, the diagonals are positions (0,0), (1,1), (2,2) which are 'w', 's', 'w' — wait, but that's not all same letters. Wait, but the sample input says that the output is 'YES' for that case. Wait, no. Wait the sample input given is:\n\nThe second input is '3\\nwsw\\nsws\\nwsw'. Let's see:\n\nThe grid is:\n\nRow",
    "response": "\n\nTo solve this problem, we need to determine if a given square grid forms the letter \"X\" based on specific conditions. The conditions are that both diagonals of the grid must contain the same letter, and all other cells (not on the diagonals) must contain the same letter, which is different from the letters on the diagonals.\n\n### Approach\n1. **Check Diagonals**: Verify that all elements on both the main diagonal (from top-left to bottom-right) and the anti-diagonal (from top-right to bottom-left) are the same.\n2. **Check Non-Diagonal Elements**: Ensure that all elements not on either diagonal are the same and different from the diagonal elements.\n\n### Solution Code\n```python\nn = int(input())\ngrid = [input().strip() for _ in range(n)]\n\n# Collect the characters on the two diagonals\ndiag1 = set()\ndiag2 = set()\n\nfor i in range(n):\n    diag1.add(grid[i][i])\n    diag2.add(grid[i][n - 1 - i])\n\n# Check if both diagonals have the same character\nif len(diag1) != 1 or len(diag2) != 1:\n    print(\"NO\")\nelse:\n    d1_char = diag1.pop()\n    d2_char = diag2.pop()\n    if d1_char == d2_char:\n        # Both diagonals have the same character\n        # Now check all other cells\n        other_char = None\n        valid = True\n        for i in range(n):\n            for j in range(n):\n                if i == j or i + j == n - 1:\n                    continue\n                c = grid[i][j]\n                if other_char is None:\n                    other_char = c\n                else:\n                    if c != other_char:\n                        valid = False\n                        break\n            if not valid:\n                break\n        if valid and other_char != d1_char:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        # Diagonals have different characters\n        # Check if all other cells are same and different from both\n        other_char = None\n        valid = True\n        for i in range(n):\n            for j in range(n):\n                if i == j or i + j == n - 1:\n                    continue\n                c = grid[i][j]\n                if other_char is None:\n                    other_char = c\n                else:\n                    if c != other_char:\n                        valid = False\n                        break\n            if not valid:\n                break\n        if valid and other_char != d1_char and other_char != d2_char:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n```\n\n### Explanation\n1. **Reading Input**: The input is read as an integer `n` followed by `n` lines of strings representing the grid.\n2. **Diagonal Check**: The main diagonal and anti-diagonal are checked to ensure all their elements are the same. This is done using sets to collect characters and checking their length.\n3. **Non-Diagonal Check**: If the diagonals are valid, we then check all non-diagonal elements to ensure they are the same and different from the diagonal characters. If both checks pass, the output is \"YES\"; otherwise, it is \"NO\".\n\nThis approach efficiently checks the required conditions with a time complexity of O(n^2), which is suitable given the constraints (n < 300).",
    "ground_truth": "N/A",
    "extracted_answer": "n = int(input())\ngrid = [input().strip() for _ in range(n)]\n\n# Collect the characters on the two diagonals\ndiag1 = set()\ndiag2 = set()\n\nfor i in range(n):\n    diag1.add(grid[i][i])\n    diag2.add(grid[i][n - 1 - i])\n\n# Check if both diagonals have the same character\nif len(diag1) != 1 or len(diag2) != 1:\n    print(\"NO\")\nelse:\n    d1_char = diag1.pop()\n    d2_char = diag2.pop()\n    if d1_char == d2_char:\n        # Both diagonals have the same character\n        # Now check all other cells\n        other_char = None\n        valid = True\n        for i in range(n):\n            for j in range(n):\n                if i == j or i + j == n - 1:\n                    continue\n                c = grid[i][j]\n                if other_char is None:\n                    other_char = c\n                else:\n                    if c != other_char:\n                        valid = False\n                        break\n            if not valid:\n                break\n        if valid and other_char != d1_char:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        # Diagonals have different characters\n        # Check if all other cells are same and different from both\n        other_char = None\n        valid = True\n        for i in range(n):\n            for j in range(n):\n                if i == j or i + j == n - 1:\n                    continue\n                c = grid[i][j]\n                if other_char is None:\n                    other_char = c\n                else:\n                    if c != other_char:\n                        valid = False\n                        break\n            if not valid:\n                break\n        if valid and other_char != d1_char and other_char != d2_char:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 435,
        "completion_token_count": 720,
        "thoughts_token_count": 1023
    }
}