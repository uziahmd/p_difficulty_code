{
    "start": 1758016195.6853452,
    "end": 1758017712.2258906,
    "start-formatted": "2025-09-16 18:49 KST",
    "end-formatted": "2025-09-16 19:15 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about a group of friends who want to make as many toasts as possible. Each toast requires certain amounts of drink, lime slices, and salt. All friends must make the same number of toasts. So, I need to find the maximum number of toasts each can make, given the resources.\n\nLet me break down the inputs. The input gives n (number of friends), k (bottles of drink), l (ml per bottle), c (number of limes), d (slices per lime), p (grams of salt). Then, each toast requires nl ml of drink per friend, a slice of lime per friend, and np grams of salt per friend.\n\nWait, no. Wait, the problem says: each friend needs nl milliliters of the drink, a slice of lime, and np grams of salt per toast. So for one toast, each of the n friends needs these things. So for one toast, total drink needed is n * nl ml. Total lime slices needed is n (since each friend needs one slice). And total salt needed is n * np grams.\n\nSo the problem is to compute how many toasts (let's call it t) can be made such that:\n\n- The total drink available is >= t * n * nl\n- The total lime slices available is >= t * n\n- The total salt available is >= t * n * np\n\nAnd then the maximum possible t is the minimum of the possible values from each resource.\n\nSo first, calculate for each resource how many toasts they can support.\n\nLet me think about each resource:\n\nTotal drink available is k * l. For each toast, we need n * nl ml. So the maximum toasts from drink is (k*l) // (n * nl). But wait, if (k*l) divided by (n * nl) is not integer, we take the floor.\n\nSimilarly, total lime slices is c * d. Each toast requires n slices. So max toasts from limes is (c*d) // n.\n\nSalt: total is p grams. Each toast requires n * np grams. So max toasts from salt is p // (n * np).\n\nThen the answer is the minimum of those three values.\n\nWait, but in the first example:\n\nInput is 3 4 5 10 8 100 3 1.\n\nSo:\n\nDrink: 4 *5 =20 ml. Each toast requires 3 *3=9 ml. So 20 /9 is 2.222, so floor is 2. \n\nLimes: 10 *8=80 slices. Each toast needs 3 slices. 80 /3 is 26.666, floor 26. \n\nSalt: 100 / (3 *1) = 33.333, floor 33. \n\nThen the minimum of 2, 26, 33 is 2. Which matches the sample output. So that's correct.\n\nSo the approach is:\n\nCalculate the three possible maximums for each resource, then take the minimum of them.\n\nSo the steps are:\n\n1. Compute total_drink = k * l. Then max_toast_drink = total_drink // (n * nl). \n\nBut wait, if n * nl is zero? No, because the input constraints say all numbers are positive integers. So division is safe.\n\nSame for other calculations.\n\nSo the code would be:\n\nRead n, k, l, c, d, p, nl, np.\n\nCompute:\n\ndrink_total = k * l\n\ntoast_drink = drink_total // (n * nl)\n\nlime_total = c * d\n\ntoast_lime = lime_total // n\n\nsalt_total = p\n\ntoast_salt = salt_total // (n * np)\n\nresult = min(toast_drink, toast_lime, toast_salt)\n\nPrint result.\n\nWait, but in the first sample, the drink calculation is 20 / (3 * 3) = 20 /9 = 2.222, floor to 2. Which is correct.\n\nYes. So that's the approach.\n\nNow, let's test the other sample inputs.\n\nSecond example input: '5 100 10 1 19 90 4 3'\n\nn=5, k=100, l=10. So drink_total is 100*10=1000. n * nl is 5 *4=20. 1000//20=50.\n\nLimes: c=1, d=19. total slices 1*19=19. toast_lime is 19 //5 = 3 (since 5*3=15, 19-15=4 left). \n\nSalt: p=90. n * np is 5*3=15. 90//15=6. \n\nSo min(50, 3, 6) is 3. Which matches the sample output.\n\nThird example input: '10 1000 1000 25 23 1 50 1'\n\ndrink_total = 1000 * 1000 = 1,000,000. n * nl is 10 *50 = 500. 1e6 / 500 = 2000.\n\nLimes: 25 *23 = 575 slices. Divided by 10 friends per toast: 575//10 = 57 (since 57*10=570, 575-570=5 left).\n\nSalt: p=1. n * np is 10 *1 =10. 1//10 is 0. So min(2000, 57, 0) is 0. Which matches the sample.\n\nSo the code seems correct.\n\nNow, code-wise, the steps are straightforward. Read the input line, split into integers, compute the three values, take min.\n\nBut need to be careful with integer division. In Python, using // operator.\n\nSo the code:\n\nRead the input line as a list of integers.\n\nn, k, l, c, d, p, nl, np = map(int, input().split())\n\nThen compute:\n\ndrink_total = k * l\n\ntoast_drink = drink_total // (n * nl)\n\nlime_total = c * d\n\ntoast_lime = lime_total // n\n\nsalt_total = p\n\ntoast_salt = salt_total // (n * np)\n\nresult = min(toast_drink, toast_lime, toast_salt)\n\nprint(result)\n\nWait, but what if any of the denominators are zero? But according to the problem statement, all inputs are positive integers. So n is at least 1, nl is at least 1, etc. So no division by zero.\n\nYes.\n\nSo that's the code. Let me test the first sample input.\n\nSample input 1: 3 4 5 10 8 100 3 1\n\ndrink_total = 4*5=20. n * nl is 3 *3=9. 20//9=2.\n\nlime_total = 10*8=80. 80//3=26.\n\nsalt_total=100. n * np is 3 *1=3. 100//3=33. min(2,26,33) is 2. Correct.\n\nYes.\n\nAnother test case: when one of the resources is zero. Like the third sample, where salt is 1, and n * np is 10. So 0.\n\nYes.\n\nSo the code should work.\n\nNow, the code needs to read from stdin. The input is a single line. So the code would be:\n\nRead the line, split into parts, process as above.\n\nSo the Python code is:\n\nn, k, l, c, d, p, nl, np = map(int, input().split())\n\ndrink = (k * l) // (n * nl)\n\nlime = (c * d) // n\n\nsalt = p // (n * np)\n\nprint(min(drink, lime, salt))\n\nYes. That's the code.\n\nWait, but what if the input is given as multiple lines? But the problem says that the input is a single line. The sample input shows that the first example's input is a single line. So the code is correct.\n\nSo this should handle all cases.\n\nNow, check the third sample input:\n\nInput line is '10 1000 1000 25 23 1 50 1'\n\nn=10, k=1000, l=1000. drink_total = 1000 * 1000 = 1,000,000. n * nl = 10 *50=500. 1e6 // 500 = 2000.\n\nlime: c=25, d=23. 25*23=575. divided by n=10: 575//10=57.\n\nsalt: p=1. n * np = 10*1=10. 1//10=0. min(2000,57,0) is 0. Correct.\n\nYes.\n\nSo the code is correct.\n",
    "response": "\n\nTo solve this problem, we need to determine the maximum number of toasts each friend can make given the constraints on the available resources: soft drinks, lime slices, and salt. Each toast requires a specific amount of each resource per friend, and all friends must make the same number of toasts.\n\n### Approach\n1. **Calculate Total Resources**: Compute the total amount of drink available from the bottles, the total number of lime slices from the limes, and the total amount of salt available.\n2. **Determine Resource Constraints**: For each resource, calculate how many toasts can be made based on the available quantity and the requirement per toast.\n3. **Find Minimum Constraint**: The maximum number of toasts each friend can make is limited by the resource that runs out first. Therefore, the result is the minimum value among the constraints calculated for each resource.\n\n### Solution Code\n```python\nn, k, l, c, d, p, nl, np = map(int, input().split())\ndrink = (k * l) // (n * nl)\nlime = (c * d) // n\nsalt = p // (n * np)\nprint(min(drink, lime, salt))\n```\n\n### Explanation\n1. **Total Drink Calculation**: The total amount of drink available is calculated as `k * l` (number of bottles multiplied by milliliters per bottle). The number of toasts possible with this drink is determined by dividing this total by the amount needed per toast (`n * nl`).\n2. **Total Lime Slices Calculation**: The total number of lime slices available is `c * d` (number of limes multiplied by slices per lime). The number of toasts possible with these slices is determined by dividing this total by the number of slices needed per toast (`n`).\n3. **Total Salt Calculation**: The total amount of salt available is `p` grams. The number of toasts possible with this salt is determined by dividing this total by the amount needed per toast (`n * np`).\n4. **Determine Result**: The result is the minimum value among the toasts possible from each resource, ensuring that all friends can make the same number of toasts without any resource running out.\n\nThis approach efficiently computes the constraints for each resource and determines the limiting factor, ensuring the solution is both optimal and straightforward.",
    "ground_truth": "N/A",
    "extracted_answer": "n, k, l, c, d, p, nl, np = map(int, input().split())\ndrink = (k * l) // (n * nl)\nlime = (c * d) // n\nsalt = p // (n * np)\nprint(min(drink, lime, salt))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 484,
        "thoughts_token_count": 2052
    }
}