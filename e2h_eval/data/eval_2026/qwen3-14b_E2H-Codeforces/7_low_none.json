{
    "start": 1758008530.5141165,
    "end": 1758008722.9905477,
    "start-formatted": "2025-09-16 16:42 KST",
    "end-formatted": "2025-09-16 16:45 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. So, the task is to determine for a given n whether there exists a snowflake graph as defined. The snowflake is built in a certain way, and we need to check if such a graph can have exactly n vertices.\n\nFirst, I need to understand the structure of the snowflake. Let me re-read the description.\n\nThe snowflake starts with one vertex. Then, this initial vertex is connected to k new vertices (k>1). Then, each vertex that is connected to only one other (so those leaves) are connected to k new vertices. This step must be done at least once. So, the process is like building layers. \n\nLet me think about how the number of vertices grows. Let's model this.\n\nLet me consider the steps. Let's say we start with 1 node. Then, step 1: add k nodes connected to the root. Now total nodes is 1 + k. But then, each of those k nodes is a leaf (connected to only one node). So, in the next step, each of them adds k new nodes. So, for each of those k nodes, we add k children. So, the next step adds k * k nodes. The total becomes 1 + k + k^2. \n\nBut the problem says that this step (adding k new nodes to each leaf) must be done at least once. So the minimal case is when we do it once. For example, the minimal snowflake for k=4 would be 1 + 4 + 4*4 = 1 +4 +16 = 21? But the example input shows that for n=6, the answer is NO, but for n=13, it's YES. Wait, maybe I'm misunderstanding the steps.\n\nWait, the example input has n=6 as output NO. Let me think. Let's see what possible values of n can be generated.\n\nLet me think about the structure again. The snowflake construction is:\n\nStart with one node (level 0).\n\nThen, add k nodes connected to it (level 1). Then, each node in level 1 must have their own k children (level 2). And this step (adding children to leaves) must be done at least once. So, the minimal number of steps is two: the initial step (adding level 1), and then adding level 2. So the total number of nodes is 1 + k + k^2. However, perhaps there are more steps. For example, after adding level 2, you can add level 3, etc. But each time, you add layers by expanding all the leaves (which are the nodes added in the previous step). \n\nSo the total number of nodes depends on how many layers we have. Let's model this. Suppose we have m layers. Wait, maybe not layers. Let me think recursively. Let me think about the construction steps:\n\nThe initial step is level 0: 1 node.\n\nThen, the first expansion: level 1: k nodes. Total nodes is 1 + k.\n\nThen, each leaf (those in level 1) is expanded. Each adds k children. So level 2 has k * k nodes. Total is 1 + k + k².\n\nThen, each leaf (those in level 2) is expanded. Each adds k children. So level 3 has k³ nodes. Total is 1 + k + k² + k³. \n\nAnd so on. However, the problem says that the step of adding new nodes to leaves must be done at least once. So the minimal case is when we have two expansions: the initial expansion (level 1) and then the second expansion (level 2). Therefore, the total number of nodes is 1 + k + k². However, it's also possible to have more expansions. For example, if we have three expansions, then the total is 1 + k + k² + k³. And so on. \n\nSo for a snowflake, the number of nodes n can be written as:\n\nn = 1 + k + k² + ... + k^m, where m ≥ 1 (since the step must be done at least once). Wait, no. Because the first expansion is adding k nodes (level 1). Then, the second expansion is adding k² nodes (level 2). So the total is 1 + k + k². But m here would be 2, since there are two expansions (the first expansion is the initial step, then the second expansion is the step done once). Hmm, perhaps the formula is:\n\nThe number of nodes is 1 + k*( (k^m - 1)/(k-1) )) ?\n\nWait, let me think. Let's suppose that there are m levels beyond the initial node. For example:\n\nIf m=1: then the total is 1 + k",
    "response": "\n\nTo solve this problem, we need to determine if a given number of vertices `n` can form a \"snowflake\" graph as defined. The snowflake graph is constructed in a specific hierarchical manner, starting with one vertex and expanding in layers.\n\n### Approach\n1. **Understanding the Structure**: The snowflake graph starts with one vertex and expands by adding layers. Each layer adds `k` new vertices to every leaf node from the previous layer. This process must be done at least once.\n2. **Mathematical Formulation**: The total number of vertices `n` can be represented as a sum of a geometric series: `n = 1 + k + k^2 + ... + k^m`, where `m` is the number of layers added beyond the initial vertex. This series can be simplified to `n = (k^(m+1) - 1) / (k - 1)`.\n3. **Iterative Check**: For each test case, we check all possible values of `k` (from 2 up to a reasonable upper bound) and see if there exists an integer `m` such that the formula holds true for the given `n`.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef is_snowflake(n):\n    if n == 1:\n        return False\n    # Try all possible k >= 2\n    # For each k, check if there exists m >= 1 such that 1 + k + k^2 + ... + k^m = n\n    max_k = int(n ** (1/2)) + 2  # since k^2 <= n for m=1, but m could be larger\n    for k in range(2, max_k + 1):\n        # We want to find m such that sum_{i=0}^m k^i = n\n        # Which is (k^(m+1) - 1) / (k - 1) = n\n        # So k^(m+1) = (n * (k - 1)) + 1\n        # We can compute m by checking possible exponents\n        total = 1  # sum starts with 1 (the root)\n        m = 0\n        while True:\n            next_term = total * k\n            if next_term > n:\n                break\n            total += next_term\n            m += 1\n            if total == n:\n                return True\n    # Also check for cases where m=1 (sum is 1 + k)\n    # But that's already covered above\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    cases = list(map(int, input[1:t+1]))\n    for n in cases:\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n- **is_snowflake Function**: This function checks if a given number `n` can be expressed as the sum of a geometric series starting from 1 with a common ratio `k` (where `k > 1`). It iterates over possible values of `k` and checks if there exists an integer `m` such that the sum of the series equals `n`.\n- **Main Function**: Reads input values, processes each test case using the `is_snowflake` function, and prints \"YES\" or \"NO\" based on whether a valid snowflake configuration exists for the given number of vertices.\n\nThis approach efficiently checks all potential values of `k` and ensures that the constraints of the problem are met, providing the correct result for each test case.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef is_snowflake(n):\n    if n == 1:\n        return False\n    # Try all possible k >= 2\n    # For each k, check if there exists m >= 1 such that 1 + k + k^2 + ... + k^m = n\n    max_k = int(n ** (1/2)) + 2  # since k^2 <= n for m=1, but m could be larger\n    for k in range(2, max_k + 1):\n        # We want to find m such that sum_{i=0}^m k^i = n\n        # Which is (k^(m+1) - 1) / (k - 1) = n\n        # So k^(m+1) = (n * (k - 1)) + 1\n        # We can compute m by checking possible exponents\n        total = 1  # sum starts with 1 (the root)\n        m = 0\n        while True:\n            next_term = total * k\n            if next_term > n:\n                break\n            total += next_term\n            m += 1\n            if total == n:\n                return True\n    # Also check for cases where m=1 (sum is 1 + k)\n    # But that's already covered above\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    cases = list(map(int, input[1:t+1]))\n    for n in cases:\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 553,
        "completion_token_count": 782,
        "thoughts_token_count": 1023
    }
}