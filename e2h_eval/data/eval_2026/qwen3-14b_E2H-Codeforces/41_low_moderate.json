{
    "start": 1758309279.8099637,
    "end": 1758309618.0126917,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nSo, the task is to build houses on n spots, each with a height between 0 and h. The profit is the sum of squares of each house's height. But there are m restrictions. Each restriction says that the tallest house in a range [l_i, r_i] must be at most x_i. I have to maximize the profit under these constraints.\n\nHmm. How to approach this?\n\nConstraints are small: n, h, m up to 50. So maybe a brute-force approach is possible, but perhaps not. Let's think about possible approaches.\n\nFirst, the problem requires that for every restriction, the maximum in [l_i, r_i] is <= x_i. So each restriction imposes that in that interval, no house can be taller than x_i. Wait, no. Because the maximum in the interval must be <= x_i. So that implies that all houses in that interval must be <= x_i. Because if any house in the interval was higher than x_i, then the max would be higher than x_i, violating the restriction. Therefore, each restriction effectively imposes that for all positions in [l_i, r_i], their height is <= x_i. Wait, no. Wait, suppose that in a range [l_i, r_i], the maximum is <= x_i. That means that all houses in that range are <= x_i. Because if any house is higher than x_i, the maximum would be higher. So each restriction is equivalent to imposing that all houses in [l_i, r_i] have height <= x_i. Wait, but maybe not. Because the restriction says that the maximum is at most x_i. Which is equivalent to saying that all houses in the range are <= x_i. So yes. So each restriction is a set of constraints on individual houses. For example, if a restriction is l=1, r=3, x=2, then each of the houses 1, 2, 3 must be <= 2. So perhaps all the restrictions can be converted into constraints on individual houses. For example, for each house i, the maximum allowed height is the minimum of h and all x_i where i is in [l_i, r_i] for some restriction. Wait, no. Because for each restriction, if the house is in the range [l_i, r_i], then its height must be <= x_i. So for each house, the maximum allowed height is the minimum of h and all x_i from restrictions that include this house in their interval.\n\nWait, that's an important insight. Let me think again. Suppose there are multiple restrictions that cover a particular house. For example, house 2 might be covered by several restrictions. Each of those restrictions imposes that the house's height is <= x_i. So the maximum possible height for that house is the minimum of all such x_i's and h. Because if any of those restrictions has x_i smaller than h, then the house can't be higher than that x_i. So for each house, the maximum possible height is the minimum between h and all x_i's of restrictions that include that house in their interval.\n\nBut wait, is that correct? Let me take an example. Suppose there's a restriction that says in [1,3], max is 2. Another restriction says in [2,4], max is 3. Then for house 2, it's part of both ranges. So the maximum allowed height for house 2 is min(2,3) = 2. Because the first restriction says that in [1,3], all houses must be <= 2. So even though the second restriction allows up to 3 in [2,4], the first one restricts house 2 to 2. So yes, for each house, the maximum allowed is the minimum of h and all x_i's from restrictions that include that house in their interval.\n\nIf that's the case, then the problem reduces to: for each house i, find the maximum possible height allowed, which is min(h, all x_i's from restrictions that include i in their [l, r] range). Then, once we have that, each house can be set to that maximum value, and the total profit is sum of squares of those values.\n\nWait, but that seems too simple. Let me check the examples.\n\nFirst example input:\n\nn=3, h=3, m=3. Restrictions are:\n\n1-1: x=1 → house 1 must be ≤1.\n\n2-2: x=3 → house 2 ≤3.\n\n3-3: x=2 → house 3 ≤2.\n\nSo for each house, the max allowed is 1, 3, 2. So setting them to those values gives 1² +3² +2² = 14, which matches the example.\n\nSecond example:\n\nn=4,",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a maximum height limit on a specific range of houses.\n\n### Approach\n1. **Understand Constraints**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within that range must be at most the specified height.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that include that house in their range. The maximum height for each house is the minimum value between the global maximum height `h` and all restriction heights that apply to that house.\n3. **Calculate Profit**: Once we have the maximum allowable height for each house, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = sum(a*a for a in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of spots `n`, maximum height `h`, and number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum possible height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum value between its current value and the restriction's height.\n4. **Calculating Profit**: The total profit is calculated by summing the squares of the allowable heights for each house.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by setting each house to the highest allowable height based on the given constraints. The complexity is manageable due to the small constraints (up to 50 spots and restrictions), making a direct approach feasible.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = sum(a*a for a in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 578,
        "thoughts_token_count": 1024
    }
}