{
    "start": 1758344113.5167089,
    "end": 1758344887.389148,
    "start-formatted": "2025-09-20 13:55 KST",
    "end-formatted": "2025-09-20 14:08 KST",
    "gpu": 2,
    "pid": 13,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Chord\n\nVasya studies music. He has learned lots of interesting stuff. For example, he knows that there are 12 notes: C, C#, D, D#, E, F, F#, G, G#, A, B, H. He also knows that the notes are repeated cyclically: after H goes C again, and before C stands H. We will consider the C note in the row's beginning and the C note after the H similar and we will identify them with each other. The distance between the notes along the musical scale is measured in tones: between two consecutive notes there's exactly one semitone, that is, 0.5 tone. The distance is taken from the lowest tone to the uppest one, that is, the distance between C and E is 4 semitones and between E and C is 8 semitonesVasya also knows what a chord is. A chord is an unordered set of no less than three notes. However, for now Vasya only works with triads, that is with the chords that consist of exactly three notes. He can already distinguish between two types of triads — major and minor.Let's define a major triad. Let the triad consist of notes X, Y and Z. If we can order the notes so as the distance along the musical scale between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones, then the triad is major. The distance between X and Z, accordingly, equals 7 semitones.A minor triad is different in that the distance between X and Y should be 3 semitones and between Y and Z — 4 semitones.For example, the triad \"C E G\" is major: between C and E are 4 semitones, and between E and G are 3 semitones. And the triplet \"C# B F\" is minor, because if we order the notes as \"B C# F\", than between B and C# will be 3 semitones, and between C# and F — 4 semitones.Help Vasya classify the triad the teacher has given to him.\n\n## Input\nThe only line contains 3 space-separated notes in the above-given notation.\n\n## Output\nPrint \"major\" if the chord is major, \"minor\" if it is minor, and \"strange\" if the teacher gave Vasya some weird chord which is neither major nor minor. Vasya promises you that the answer will always be unambiguous. That is, there are no chords that are both major and minor simultaneously.\n\n## Example\n### Input\n['C E G', 'C# B F', 'A B H']\n\n### Output\n['major', 'minor', 'strange']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nSo, the task is to determine whether a given triad of notes is major, minor, or strange. The input is three notes, and I have to check all possible orderings to see if any of them fit the major or minor criteria.\n\nFirst, let me understand the definitions again. \n\nA major triad has X, Y, Z such that the distance from X to Y is 4 semitones, and Y to Z is 3. So total X to Z is 7. But since the notes are cyclic, I need to calculate distances properly.\n\nSimilarly, a minor triad has X to Y as 3 semitones and Y to Z as 4. \n\nBut the triad is unordered. So for the three notes, I need to check all possible permutations to see if any of them satisfy either major or minor conditions.\n\nSo, the plan is:\n\n1. Convert each note into a numerical value representing its position in the 12-note scale. For example, C is 0, C# is 1, D is 2, etc., up to H (which is B in some notations? Wait, the problem says the notes are C, C#, D, D#, E, F, F#, G, G#, A, B, H. Wait, wait, the list given is: C, C#, D, D#, E, F, F#, G, G#, A, B, H. Oh, so H is the 12th note. Wait, but the problem says that after H comes C again. So the order is:\n\nLet me list them with indexes:\n\n0: C\n\n1: C#\n\n2: D\n\n3: D#\n\n4: E\n\n5: F\n\n6: F#\n\n7: G\n\n8: G#\n\n9: A\n\n10: B\n\n11: H\n\nWait, but then after H (index 11) comes C again (index 0). So the distance between two notes is calculated as (target - start) mod 12, but considering the direction. Wait, no. Wait the problem says that the distance between two consecutive notes is one semitone. And the distance is measured from the lower to the upper. For example, between C and E is 4 semitones. Let's check that. Let's see:\n\nC (0) to C# (1) is 1 semitone. Then to D (2) is 2, D# 3, E 4. Yes. So the distance from C to E is 4 semitones. But if you have E to C, the distance is 8 semitones? Because going the other way around. Because the problem says that the distance is from the lower to upper. So if you have two notes, the distance is the number of semitones you move upwards from the lower note to reach the upper note. So for example, if you have X and Y, where X is lower than Y, then the distance is (Y - X) mod 12? No, wait, the distance is (Y - X) if Y is higher than X, otherwise (12 - (X - Y))? Or perhaps, the distance between X and Y is (Y - X) mod 12, but when you take the positive direction. Wait, the problem says that the distance between X and Y is calculated as the number of semitones from the lower to the upper. So for example, between E and C, the distance is 8 semitones because you have to go E -> F (1), F -> F# (2), G (3), G# (4), A (5), B (6), H (7), C (8). So that's 8 semitones. So the distance between X and Y is (Y - X) if Y > X, else (12 - (X - Y))? Or more accurately, it's (Y - X) mod 12, but since the distance is always measured as the minimal steps upwards? No, no. Wait the problem says that the distance is taken from the lowest to the upper. So if you have two notes, the distance is the number of semitones you need to move upwards from the lower note to reach the upper note. So for example, if X is lower than Y, then distance is (Y - X) semitones. If X is higher than Y, then the distance is (Y + 12 - X) semitones? Because you wrap around. Wait, but the problem says that the distance between E and C is 8 semitones. Let's see, E is 4, C is 0. So the distance from E to C would be (0 + 12 - 4) = 8 semitones. So yes. So the formula for the distance between X and Y (where X is the lower note and Y is the upper note) is (Y - X) if Y > X, else (12 - (X - Y))? Or perhaps, the distance is (Y - X) mod 12, but if the result is negative, add 12? No, because if X is lower than Y, then the distance is (Y - X). If X is higher than Y, then the distance is (Y + 12 - X). So in general, the distance between X and Y is (Y - X) if Y >= X, else (Y + 12 - X). But how do we compute that?\n\nAlternatively, the distance between X and Y can be calculated as (Y - X) % 12. But wait, for example, if X is E (4) and Y is C (0), then (0 - 4) mod 12 is 8. Which is correct. So the distance between X and Y is (Y - X) mod 12? But wait, in the example given in the problem statement, the distance between C and E is 4 semitones. Let's compute (E - C) mod 12: (4 - 0) mod 12 is 4, which is correct. So that seems to work. However, when Y is lower than X, like E and C, (Y - X) mod 12 is (0 - 4) mod 12 is 8. Which is correct. So the distance between X and Y is (Y - X) mod 12. Wait, but the problem says that the distance is measured from the lower to upper. So if X is lower than Y, then the distance is Y - X. If X is higher than Y, then the distance is (Y + 12 - X). Which is equivalent to (Y - X) mod 12. Because (Y - X) mod 12 would be (Y - X) if Y >= X, else (Y - X + 12). So yes. So the distance between X and Y is (Y - X) mod 12. But wait, in the problem statement, the distance between E and C is 8 semitones. Which is indeed (0 - 4) mod 12 = 8. So that works. So the formula for the distance between X and Y is (Y - X) mod 12. But wait, in the problem statement, when they say the distance between X and Y is 4 semitones, that's when X is lower than Y. So the formula is correct.\n\nBut for the problem's purpose, when checking for major or minor triads, we need to find an ordering of the three notes such that the first to second is 4 semitones, and second to third is 3 semitones (for major), or first to second is 3 and second to third is 4 (for minor).\n\nSo for each permutation of the three notes, we need to check if there exists a sequence where the distance between first and second is 4, and between second and third is 3 (major), or 3 and 4 (minor).\n\nBut how to generate all possible permutations of the three notes? Well, since the triad is unordered, there are 6 possible orderings (permutations) of the three notes. For each of these permutations, we can check if it satisfies the major or minor condition.\n\nSo the steps are:\n\n1. Convert the three input notes into their numerical representations (like C is 0, C# is 1, etc.)\n\n2. Generate all possible permutations of the three notes (since the order matters for checking the distances).\n\n3. For each permutation (X, Y, Z), check:\n\n   a. For major: distance between X and Y is 4, and between Y and Z is 3.\n\n   b. For minor: distance between X and Y is 3, and between Y and Z is 4.\n\nIf any permutation satisfies the major condition, then output 'major'. Similarly for minor. If none, output 'strange'.\n\nBut how to generate the permutations? Well, for three elements, there are 6 permutations. We can generate them using itertools.permutations.\n\nSo, first, I need to map the note names to their numerical values. Let's create a dictionary for that.\n\nThe note order is:\n\nnotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\nWait, but the problem says the list is:\n\nC, C#, D, D#, E, F, F#, G, G#, A, B, H. So the order is as above. So the indexes are 0 to 11.\n\nSo the mapping can be done with a dictionary. Let's create that.\n\nSo for example, note_to_num = {'C': 0, 'C#': 1, 'D': 2, ... 'H': 11}.\n\nSo the code can have a list of the note names in order, and then for each note, get its index.\n\nNow, the code steps:\n\nRead the input: three notes. For example, input could be something like ['C E G', 'C# B F', ...], but in the sample input, the input is given as a list of strings. Wait, the problem says that the input is the only line contains 3 space-separated notes. So the input is something like \"C E G\" (but in the sample input, the input is given as a list of examples, but in reality, the code needs to read a single line of three notes.\n\nWait, looking at the problem's input description:\n\nInput: The only line contains 3 space-separated notes in the above-given notation.\n\nSo for example, in the sample input, the input is given as ['C E G', 'C# B F', 'A B H'], but that's probably for multiple test cases. However, the actual code will read a single line. So for example, the code should read a line like \"C E G\" and process that. So the code will read the input line, split into three notes.\n\nSo the code needs to process the input as follows:\n\nRead the input line, split into three parts. For example, input().split().\n\nOnce the three notes are read, convert them into their numerical representations.\n\nThen generate all permutations of the three notes (as numbers), and check each permutation for major or minor.\n\nBut for each permutation, how to check the distances?\n\nFor a permutation (x, y, z):\n\ndistance between x and y is (y - x) mod 12. But wait, according to the problem's definition, the distance is measured from the lower note to the upper. But when we calculate (y - x) mod 12, that gives the distance between x and y, but only if x is the lower note. Wait, no. Because the mod 12 calculation gives the correct distance. For example, if x is C (0) and y is E (4), then (4-0) mod 12 is 4, which is correct. If x is E (4), y is C (0), then (0 -4) mod 12 is 8, which is the distance from E to C. But in the case of the permutation (E, C, ...), the code would check the distance between x and y as (y - x) mod 12, which would be 8. But for the major triad, the code is looking for the distance between X and Y to be 4. So if the permutation is (E, C, ...), then that distance is 8, which does not match the required 4. So the code needs to check, for each permutation, whether the distance between X and Y is exactly 4 (for major) or 3 (for minor), and similarly for Y and Z.\n\nBut here's the thing: the order of the permutation is important. For example, if the triad is C, E, G, then the permutation (C, E, G) would have distance between C and E as 4, and E and G as 3. So that's a major triad. But if the permutation is (E, G, C), then the distance between E and G is 2 (since G is 7, E is 4. 7-4=3. Wait, 7-4 is 3. So the distance between E and G is 3. Then between G and C is (0 -7) mod 12 = 5? Wait, 0 is C. So G is 7, C is 0. So (0 -7) mod 12 is ( -7 ) mod 12 = 5? Because 12 -7 is 5. So the distance between G and C is 5. Which is not 3. So that permutation would not satisfy the major condition.\n\nSo the code must check for all permutations of the three notes, and for each, check if the first two notes have the required distance, and the next two have the required distance.\n\nSo the code steps:\n\nFor each permutation (a, b, c):\n\nCheck if (distance between a and b is 4) and (distance between b and c is 3). If yes, then it's a major triad.\n\nCheck if (distance between a and b is 3) and (distance between b and c is 4). If yes, then it's a minor triad.\n\nIf any permutation meets the major condition, then the answer is major. Similarly for minor. Otherwise, strange.\n\nNow, the code can proceed as follows:\n\nFirst, create the note_to_num mapping.\n\nThen, read the three notes, convert them into numbers.\n\nGenerate all permutations of the three numbers.\n\nFor each permutation, check for major and minor conditions.\n\nOnce any permutation satisfies major, return 'major'. Similarly for minor. If none, return 'strange'.\n\nBut how to generate permutations? Using itertools.permutations.\n\nNow, code outline:\n\nimport sys\nfrom itertools import permutations\n\nnote_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\nnote_to_num = {note: idx for idx, note in enumerate(note_order)}\n\nnotes = input().split()\n\nnums = [note_to_num[note] for note in notes]\n\nfound_major = False\nfound_minor = False\n\nfor perm in permutations(nums):\n    a, b, c = perm\n    # Compute distance between a and b\n    dist_ab = (b - a) % 12\n    dist_bc = (c - b) % 12\n    if dist_ab == 4 and dist_bc == 3:\n        found_major = True\n    if dist_ab == 3 and dist_bc == 4:\n        found_minor = True\n\nif found_major:\n    print(\"major\")\nelif found_minor:\n    print(\"minor\")\nelse:\n    print(\"strange\")\n\nWait, but in the problem statement, the example input for the first case is 'C E G' which should be major. Let's test this code.\n\nFor 'C E G', the nums are [0, 4, 7].\n\nPermutations include (0,4,7). For this, dist_ab is (4-0) mod 12 = 4. dist_bc is 7-4=3 mod 12 is 3. So found_major is True.\n\nAnother permutation could be (0,7,4). Then dist_ab is (7-0) mod 12 =7. Not 4 or 3. So no.\n\nAnother permutation is (4,0,7). dist_ab is (0-4) mod 12 = 8. Not 4 or 3. So no.\n\nAnother permutation (4,7,0): dist_ab is 3 (7-4=3), dist_bc is (0-7) mod 12 = 5. So no. So for this permutation, dist_ab is 3, but dist_bc is 5. So no.\n\nAnother permutation (7,0,4): dist_ab is (0-7) mod 12 =5. Not 3 or 4. So no.\n\nAnother permutation (7,4,0): dist_ab is 4-7 mod 12 = ( -3 ) mod 12 = 9. No.\n\nSo in this case, the code will find found_major = True, so output 'major'.\n\nAnother example: 'C# B F' → the notes are C#, B, F.\n\nLet's convert them to numbers:\n\nC# is 1, B is 10, F is 5. So nums = [1, 10, 5].\n\nLooking for permutations. The example says that when ordered as B, C#, F, it's minor. Let's check that permutation. B is 10, C# is 1, F is 5.\n\nSo a=10, b=1, c=5.\n\ndist_ab = (1 - 10) mod 12 = ( -9 ) mod 12 = 3. Because 12 -9 =3. So yes, 3. Then dist_bc = (5 -1) mod 12 =4. So yes. So this permutation would trigger found_minor = True.\n\nSo the code would detect that.\n\nSo the code seems to handle that.\n\nAnother example: 'A B H' → A is 9, B is 10, H is 11.\n\nCheck all permutations. Let's see:\n\nCheck for major or minor.\n\nFor example, permutation (9,10,11):\n\ndist_ab = 1 → 10-9=1. Not 3 or 4.\n\nAnother permutation (9,11,10):\n\ndist_ab is (11-9)=2 mod 12 =2. No.\n\nAnother permutation (10,9,11):\n\ndist_ab is (9-10) mod 12 = ( -1 ) mod 12 = 11. No.\n\nAnother permutation (10, 11, 9):\n\ndist_ab is 1. Then dist_bc is (9-11) mod 12 = ( -2 ) mod 12 = 10. No.\n\nAnother permutation (11, 9, 10):\n\ndist_ab is (9-11) mod 12 = 10. No.\n\nAnother permutation (11, 10, 9):\n\ndist_ab is (10 -11) mod 12 = 11. No.\n\nSo none of the permutations would satisfy major or minor. So output 'strange'.\n\nWhich matches the sample.\n\nSo the code seems to handle the sample correctly.\n\nBut wait, what about permutations where the order is different but the distances are correct?\n\nAnother example: suppose the three notes are C, E, G. The code checks all permutations. But the major condition is satisfied by (C, E, G). So found_major is True.\n\nNow, what about if the same triad is checked in another permutation, like (E, G, C)? Then dist_ab is (G - E) = 7-4=3. Then dist_bc is (C - G) mod 12 = (0 -7) mod 12 = 5. So no. So that permutation would not trigger anything. But since there's at least one permutation that triggers major, the code will find it.\n\nSo the code seems correct.\n\nNow, possible edge cases:\n\nWhat if two notes are same? But according to the problem statement, the input is three notes. However, the problem says that the answer is unambiguous. But the problem says that the input is three notes. However, the problem says that the answer is always unambiguous. So the code can assume that the three notes are distinct. Because if two are same, then the code would check permutations, but the distances would be zero. But the problem says that the input is a valid chord. However, the problem says that the input is given by the teacher, and Vasya promises that the answer is unambiguous. So perhaps the input will have three distinct notes.\n\nBut the code doesn't need to handle that. It just processes the input as given.\n\nAnother edge case: when the distances are in different permutations. For example, a minor triad may be found in one permutation, but another permutation may have major. But according to the problem statement, the answer is unambiguous. So the code can check for both possibilities, but the problem says that the answer is not ambiguous. So the code can check for all permutations, and if any permutation satisfies major, then output major, else check for minor.\n\nNow, code-wise, the code checks all permutations and sets found_major and found_minor flags. But if a permutation satisfies both? For example, if a permutation has (distance_ab=4 and distance_bc=3) and also (distance_ab=3 and distance_bc=4)? Well, that's impossible unless 4=3 and 3=4, which is not possible. So no. So the code is safe.\n\nBut the problem says that the answer is unambiguous. So the code can safely check for major first, then minor.\n\nBut in the code, if a permutation satisfies both conditions, but that's impossible. Because for a permutation, the distance_ab and distance_bc can't be both 4 and 3 and 3 and 4. So the code is okay.\n\nSo the code seems correct.\n\nNow, the code needs to read input from stdin, process it, and output the result.\n\nNow, the code uses permutations from itertools. So the code needs to import itertools.permutations.\n\nNow, the note_order list must be correct. Let's check the order again.\n\nThe problem says the notes are ordered as:\n\nC, C#, D, D#, E, F, F#, G, G#, A, B, H.\n\nSo the list is:\n\n['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\nYes. So note_order is correct.\n\nBut note that in the note_order, the B is index 10, H is 11.\n\nSo the code's note_to_num is correct.\n\nNow, code:\n\nImplementing that.\n\nNow, testing the sample input:\n\nSample Input:\n\nC E G → output 'major'\n\nC# B F → output 'minor'\n\nA B H → output 'strange'\n\nSo, for the first case, the code returns 'major'.\n\nBut the code will check all permutations. For example, the permutation (E, G, C) would have dist_ab = 3 (G-E is 7-4=3) and dist_bc is (C - G) mod 12 = (0-7) mod 12 = 5. So no. But there's at least one permutation (C, E, G) that satisfies the major condition.\n\nThus, the code works.\n\nAnother test case: 'C# B F' → the notes are C#, B, F. Let's see:\n\nnums = [1, 10, 5]. The permutation (10, 1, 5) → a=10 (B), b=1 (C#), c=5 (F). dist_ab is (1 - 10) mod 12 → ( -9 ) mod 12 is 3. dist_bc is (5 - 1) mod 12 =4. So yes, minor. Thus, found_minor is True.\n\nThus, the code outputs 'minor'.\n\nAnother test case: 'B C# F' → same as the example. The code would check permutations and find that one of them satisfies minor.\n\nSo the code is correct.\n\nNow, code implementation.\n\nPotential issues:\n\n- The note_to_num mapping must be correct. For example, 'H' is mapped to 11. Also, the note_order list must be correct.\n\nAnother possible mistake: the distance calculation. For example, in the code, (b - a) mod 12. But in Python, the modulo operator returns a non-negative result. So for example, (1 - 10) is -9, and -9 % 12 is 3. Which is correct.\n\nYes, in Python, (-9) % 12 is 3. So that's correct.\n\nThus, the code is correct.\n\nNow, code:\n\nSo the code would be:\n\nimport sys\nfrom itertools import permutations\n\ndef main():\n    note_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n    note_to_num = {note: idx for idx, note in enumerate(note_order)}\n    \n    notes = input().split()\n    nums = [note_to_num[note] for note in notes]\n    \n    found_major = False\n    found_minor = False\n    \n    for perm in permutations(nums):\n        a, b, c = perm\n        dist_ab = (b - a) % 12\n        dist_bc = (c - b) % 12\n        if dist_ab == 4 and dist_bc == 3:\n            found_major = True\n        if dist_ab == 3 and dist_bc == 4:\n            found_minor = True\n    \n    if found_major:\n        print(\"major\")\n    elif found_minor:\n        print(\"minor\")\n    else:\n        print(\"strange\")\n\nif __name__ == \"__main__\":\n    main()\n\nWait, but in the problem statement, the sample input is given as a list of three examples, but the code reads a single line. So for example, in the sample input, the user would input \"C E G\", and the code outputs \"major\".\n\nYes. So the code is correct.\n\nBut what about the note names? For example, the note 'H' is present in the input. The code's note_order includes 'H' as the last element, so it's mapped to 11. Correct.\n\nAnother possible mistake: the note_order list. Let me check:\n\nThe problem says the notes are listed as:\n\nC, C#, D, D#, E, F, F#, G, G#, A, B, H.\n\nSo the order is correct. So the note_order list is correct.\n\nThus, the code should work.\n",
    "response": "To solve this problem, we need to determine if a given set of three musical notes forms a major triad, a minor triad, or neither. The solution involves converting the notes into numerical values, checking all permutations of these values to see if they meet the criteria for major or minor triads, and then outputting the result.\n\n### Approach\n1. **Convert Notes to Numerical Values**: Each note is mapped to a numerical value based on its position in the 12-note musical scale.\n2. **Generate Permutations**: Since the triad is unordered, we generate all permutations of the three notes to check each possible order.\n3. **Check Major and Minor Triads**: For each permutation, calculate the distances between consecutive notes. A major triad requires a distance of 4 semitones between the first and second note, and 3 semitones between the second and third note. A minor triad requires a distance of 3 semitones followed by 4 semitones.\n4. **Determine Result**: Based on the checks, determine if the triad is major, minor, or strange.\n\n### Solution Code\n```python\nfrom itertools import permutations\n\ndef main():\n    note_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n    note_to_num = {note: idx for idx, note in enumerate(note_order)}\n    \n    notes = input().split()\n    nums = [note_to_num[note] for note in notes]\n    \n    found_major = False\n    found_minor = False\n    \n    for perm in permutations(nums):\n        a, b, c = perm\n        dist_ab = (b - a) % 12\n        dist_bc = (c - b) % 12\n        if dist_ab == 4 and dist_bc == 3:\n            found_major = True\n        if dist_ab == 3 and dist_bc == 4:\n            found_minor = True\n    \n    if found_major:\n        print(\"major\")\n    elif found_minor:\n        print(\"minor\")\n    else:\n        print(\"strange\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n- **Note Conversion**: The notes are converted into numerical values using a predefined list that maps each note to its position in the 12-note scale.\n- **Permutations Check**: By generating all permutations of the three notes, we ensure that every possible order is checked for both major and minor triad conditions.\n- **Distance Calculation**: The distance between two notes is calculated using modulo arithmetic to handle the cyclic nature of the musical scale.\n- **Result Determination**: After checking all permutations, the result is determined based on whether any permutation met the criteria for a major or minor triad.\n\nThis approach efficiently checks all possible configurations of the three notes and ensures that the correct classification is determined based on the given criteria.",
    "ground_truth": "N/A",
    "extracted_answer": "from itertools import permutations\n\ndef main():\n    note_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n    note_to_num = {note: idx for idx, note in enumerate(note_order)}\n    \n    notes = input().split()\n    nums = [note_to_num[note] for note in notes]\n    \n    found_major = False\n    found_minor = False\n    \n    for perm in permutations(nums):\n        a, b, c = perm\n        dist_ab = (b - a) % 12\n        dist_bc = (c - b) % 12\n        if dist_ab == 4 and dist_bc == 3:\n            found_major = True\n        if dist_ab == 3 and dist_bc == 4:\n            found_minor = True\n    \n    if found_major:\n        print(\"major\")\n    elif found_minor:\n        print(\"minor\")\n    else:\n        print(\"strange\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 684,
        "completion_token_count": 618,
        "thoughts_token_count": 5848
    }
}