{
    "start": 1758309391.077116,
    "end": 1758309420.688473,
    "start-formatted": "2025-09-20 04:16 KST",
    "end-formatted": "2025-09-20 04:17 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where their mark is the maximum for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the first student's marks for the three subjects.\n\nThe plan is:\n\n1. For each subject (columns), find the maximum mark.\n2. For each student, check if in any of the subjects their mark is equal to the maximum for that subject. If yes, they are successful.\n3. Count how many students meet this condition.\n\nSo, how to process the data?\n\nLet me think about the steps in code.\n\nFirst, read n and m. Then read the next n lines as a list of strings. Then, for each column (subject), find the maximum value.\n\nFor example, for the first sample input:\n\nn=3, m=3\nstudents = ['223', '232', '112']\n\nFor each subject (columns 0, 1, 2):\n\nSubject 0: 2, 2, 1 → max is 2\nSubject 1: 2, 3, 1 → max is 3\nSubject 2: 3, 2, 2 → max is 3\n\nThen, for each student, check if any of their marks in the columns match the max for that column.\n\nStudent 1: [2,2,3]. For subject 0, 2 is max (so yes). Also for subject 2, 3 is max. So this student is successful.\n\nStudent 2: [2,3,2]. For subject 0, 2 is max. For subject 1, 3 is max. So yes.\n\nStudent 3: [1,1,2]. None of their marks are the max in their respective columns. So not successful. Hence total is 2.\n\nSo the output is 2.\n\nSo the steps are:\n\n- For each column, compute the maximum value.\n- Then, for each student, check if any of their marks in that column equals the max for that column.\n\nNow, how to represent the data. Let's think of the students as a list of lists. For example, for each row, split into individual digits as integers.\n\nBut perhaps, since each row is a string, for each student, we can process each character as an integer.\n\nSo, first, read the input lines. Let's say:\n\nn, m = map(int, input().split())\ngrades = [input().strip() for _ in range(n)]\n\nThen, for each column j (from 0 to m-1), find the maximum value. Let's create a list called max_per_subject, where max_per_subject[j] is the maximum value in column j.\n\nTo compute that, for each column j:\n\nmax_val = 0\nfor each row in grades:\n    current_val = int(row[j])\n    if current_val > max_val:\n        max_val = current_val\nmax_per_subject.append(max_val)\n\nOnce we have this list, then for each student, check if any of their marks in any subject is equal to the max for that subject.\n\nFor example, for student i, check for any j in 0..m-1:\n\nif int(grades[i][j]) == max_per_subject[j], then mark this student as successful.\n\nSo, the code steps:\n\nCompute max_per_subject.\n\nThen, for each student, loop through their marks. If any of them matches the max for that subject, increment the count.\n\nNow, implement this in Python.\n\nEdge cases to consider:\n\n- All students have the same marks. For example, n=2, m=1, all marks are 5. Then each student is the best in that subject. So count is 2.\n\nWait, but according to the problem statement, a student is the best if there's no student with higher mark. So if all have same mark, then all are best in that subject. So yes.\n\nAnother case: n=1. Then the single student is successful because they are the best in all subjects.\n\nAnother case: m=1. For example, n=3, m=1. Marks are 1, 2, 3. Then the third student is the best. So count is 1.\n\nSo the code needs to handle these.\n\nNow, coding steps.\n\nFirst, read n and m.\n\nThen read n lines. Then for each column j, compute the maximum.\n\nThen",
    "response": "```python\nn, m = map(int, input().split())\ngrades = [input().strip() for _ in range(n)]\n\n# Find the maximum mark for each subject\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        current = int(grades[i][j])\n        if current > max_val:\n            max_val = current\n    max_per_subject.append(max_val)\n\n# Check each student for success\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if int(grades[i][j]) == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrades = [input().strip() for _ in range(n)]\n\n# Find the maximum mark for each subject\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        current = int(grades[i][j])\n        if current > max_val:\n            max_val = current\n    max_per_subject.append(max_val)\n\n# Check each student for success\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if int(grades[i][j]) == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 146,
        "thoughts_token_count": 1024
    }
}