{
    "start": 1758008491.858479,
    "end": 1758008609.6507854,
    "start-formatted": "2025-09-16 16:41 KST",
    "end-formatted": "2025-09-16 16:43 KST",
    "gpu": 2,
    "pid": 2,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Valera and X\n\nValera is a little boy. Yesterday he got a huge Math hometask at school, so Valera didn't have enough time to properly learn the English alphabet for his English lesson. Unfortunately, the English teacher decided to have a test on alphabet today. At the test Valera got a square piece of squared paper. The length of the side equals n squares (n is an odd number) and each unit square contains some small letter of the English alphabet.Valera needs to know if the letters written on the square piece of paper form letter \"X\". Valera's teacher thinks that the letters on the piece of paper form an \"X\", if:  on both diagonals of the square paper all letters are the same;  all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals. Help Valera, write the program that completes the described task for him.\n\n## Input\nThe first line contains integer n (3 ≤ n < 300; n is odd). Each of the next n lines contains n small English letters — the description of Valera's paper.\n\n## Output\nPrint string \"YES\", if the letters on the paper form letter \"X\". Otherwise, print string \"NO\". Print the strings without quotes.\n\n## Example\n### Input\n['5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox', '3\\nwsw\\nsws\\nwsw', '3\\nxpx\\npxp\\nxpe']\n\n### Output\n['NO', 'YES', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. So Valera needs to check if the letters on his square paper form an 'X' according to the given conditions. Let me think about what exactly needs to be checked here.\n\nThe problem says that the X is formed if two conditions are met. First, both diagonals have the same letters. Second, all other squares (not on the diagonals) have the same letter, different from the diagonals.\n\nHmm. So first, I need to check all the cells on the two diagonals. Let's think about how to identify those cells.\n\nFor a square of size n x n (with n odd), the main diagonal is from (0,0) to (n-1, n-1). The other diagonal is from (0, n-1) to (n-1, 0). So for each cell (i,j), it's on one of the diagonals if i == j or i + j == n - 1. Wait, yes. Because for the main diagonal, row and column indices are equal. For the anti-diagonal, the sum of the indices is n-1.\n\nSo first, I need to collect all the characters on these diagonals and check that they are all the same. Also, all the non-diagonal cells must be the same and different from the diagonal's character.\n\nWait, but what about overlapping cells? Like, in the case where n is odd, the center cell is part of both diagonals. But that's okay. So for example, in a 3x3 grid, the center cell (1,1) is on both diagonals. So when checking, we need to make sure that all the cells on both diagonals are the same. So for all cells on either diagonal, their characters must be the same. Then, all other cells (those not on either diagonal) must have the same character, which is different from the diagonal's character.\n\nSo the steps I need to take are:\n\n1. Check that all diagonal cells (both diagonals) have the same character. Let's call this character 'd_char'.\n2. Check that all non-diagonal cells have the same character, which is not equal to 'd_char'.\n\nSo how do I do that?\n\nFirst, I can iterate through each cell in the grid. For each cell, check if it's on a diagonal. If it is, collect its character. Then check that all of them are the same. Then, collect all non-diagonal characters and check they are the same and different from the diagonal's.\n\nBut how to collect those characters?\n\nLet me think. For each cell (i, j):\n\nif i == j or i + j == n-1 → part of the diagonals.\n\nElse → part of the non-diagonal.\n\nSo first, collect all the diagonal characters. Let's collect them in a set. If the size of the set is more than 1, then it's invalid. Also, the same for the non-diagonal characters.\n\nBut wait, for the diagonals, all characters must be the same. So for example, if there's even one cell on the diagonals that is different from others, it's invalid.\n\nSo for the diagonals:\n\nCheck that all characters are the same. Let's say the first diagonal cell (like (0,0)) is the reference. Then check that all other diagonal cells are equal to that.\n\nSimilarly for the non-diagonal cells. All non-diagonal cells must be the same. And that same character must not be equal to the diagonal's character.\n\nBut how to handle the cases where there are no non-diagonal cells? Well, since n is at least 3. For example, n=3, the diagonals have 3 + 3 -1 = 5 cells (since the center is counted twice). The total cells is 9. So non-diagonal cells are 4. So for n=3, there are non-diagonal cells. So for any n >=3, there are non-diagonal cells.\n\nSo steps:\n\nRead the grid.\n\nCheck for diagonals:\n\nCollect all the characters on the diagonals. Let's collect them in a list. Then check that all elements are the same. Let's call that d_char.\n\nThen collect all the non-diagonal characters. Check that all are the same and not equal to d_char.\n\nBut how to collect them?\n\nLet me think. For each cell in the grid:\n\nfor i in 0 to n-1:\n\n    for j in 0 to n-1:\n\n        if i == j or i + j == n-1:\n\n            add to diagonals list\n\n        else:\n\n            add to non_diagonals list\n\nBut for the diagonals, the first cell (0,0) is part of the diagonals. So the first element of the diagonals list is the first cell. Then, check that all elements in diagonals list are equal to the first",
    "response": "\n\n```python\nn = int(input())\ngrid = [input().strip() for _ in range(n)]\n\ndiagonal_chars = set()\nnon_diagonal_chars = set()\n\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            diagonal_chars.add(grid[i][j])\n        else:\n            non_diagonal_chars.add(grid[i][j])\n\n# Check if all diagonal characters are the same and non-diagonal are same and different\nif len(diagonal_chars) == 1 and len(non_diagonal_chars) == 1:\n    d_char = next(iter(diagonal_chars))\n    nd_char = next(iter(non_diagonal_chars))\n    if d_char != nd_char:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n = int(input())\ngrid = [input().strip() for _ in range(n)]\n\ndiagonal_chars = set()\nnon_diagonal_chars = set()\n\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            diagonal_chars.add(grid[i][j])\n        else:\n            non_diagonal_chars.add(grid[i][j])\n\n# Check if all diagonal characters are the same and non-diagonal are same and different\nif len(diagonal_chars) == 1 and len(non_diagonal_chars) == 1:\n    d_char = next(iter(diagonal_chars))\n    nd_char = next(iter(non_diagonal_chars))\n    if d_char != nd_char:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 444,
        "completion_token_count": 176,
        "thoughts_token_count": 1023
    }
}