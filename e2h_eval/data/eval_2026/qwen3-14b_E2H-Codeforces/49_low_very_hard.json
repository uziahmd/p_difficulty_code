{
    "start": 1758309706.7135022,
    "end": 1758309743.2971153,
    "start-formatted": "2025-09-20 04:21 KST",
    "end-formatted": "2025-09-20 04:22 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, I need to solve this problem where I have to determine if it's possible to assign mushroom counts to each lawn based on the given GCD and LCM values on the edges. Let's think about how to approach this.\n\nFirst, let me understand the problem. Each edge between two lawns (nodes) has a GCD and LCM of the mushroom counts of those two nodes. My task is to assign numbers to each node such that for every edge, the GCD and LCM match the given ones. If there's no such assignment, output NO; else, output YES and one possible assignment.\n\nHmm. Let's think about the constraints. For any two nodes u and v connected by an edge with GCD g and LCM l, the numbers a_u and a_v must satisfy:\n\ngcd(a_u, a_v) = g\nlcm(a_u, a_v) = l\n\nBut there's a relation between GCD and LCM: gcd(a, b) * lcm(a, b) = a * b. So for each edge, we have that g * l must equal a_u * a_v. Also, since the GCD is g, both a_u and a_v must be multiples of g. Let me denote a_u = g * x, a_v = g * y. Then, the GCD of x and y must be 1 (since the GCD of a_u and a_v is g * gcd(x,y) = g implies that gcd(x,y)=1). And the LCM of a_u and a_v would be g * x * y, because LCM(a_u, a_v) = (a_u * a_v)/gcd(a_u, a_v) = (g²xy)/g = gxy. But according to the problem, the LCM is given as l. Therefore, g * x * y = l. Which implies that x*y = l/g. \n\nSo for each edge, the product of x and y must be l/g, and x and y must be coprime. Therefore, for each edge, the pair (x, y) must be a pair of coprime integers whose product is l/g. \n\nBut since x and y are coprime, their product is l/g, so x and y must be divisors of l/g and co-prime. However, since the problem allows multiple possibilities, but we need to find one possible assignment.\n\nNow, the problem reduces to assigning values to each node such that for each edge, the two nodes' values are multiples of the GCD, and their ratio (after dividing by GCD) are coprime and multiply to l/g.\n\nBut how do I model this? It seems like a graph problem where each node's value is determined by some constraints from its edges.\n\nThis feels like a graph where each edge imposes constraints on the values of the two nodes. For example, if two nodes u and v are connected with GCD g and LCM l, then a_u and a_v must be multiples of g, and their product is g*l. Also, since a_u/g and a_v/g are coprime.\n\nSo, perhaps I can model this as a graph where each node has a value that is a multiple of some base value. But how to propagate these constraints?\n\nLet me think about building a graph where each node's value is determined relative to others. For example, if I have a connected component, I can assign a value to one node and derive others based on the edges.\n\nBut how to handle the constraints? For example, suppose I have a chain of edges. Let's take an example: suppose u-v has GCD g1 and LCM l1, and v-w has GCD g2 and LCM l2. How do I ensure that the values for u, v, w are consistent?\n\nLet me consider that for each node, its value is determined by a base value multiplied by some factors. But maybe I can model this as a graph where each node's value is a multiple of some base, and for each edge, the ratio between the nodes is fixed in terms of their GCD and LCM.\n\nAlternatively, considering that for each edge, the two nodes' values must be multiples of the GCD, and their product is GCD * LCM. So, if I have two nodes u and v connected by an edge with GCD g and LCM l, then a_u * a_v = g*l. Also, since a_u and a_v are multiples of g, let's say a_u = g * x, a_v = g * y. Then x * y = l/g, and gcd(x, y) = 1.\n\nSo, for each edge, the product of x and y is fixed (l/g), and they are coprime. Therefore, for each edge, x and y must be a pair of coprime integers whose product is l/g. But since x",
    "response": "```python\nimport sys\nimport math\nfrom collections import defaultdict, deque\n\ndef input():\n    return sys.stdin.read()\n\ndef main():\n    data = input().split()\n    idx = 0\n    n = int(data[idx])\n    idx += 1\n    m = int(data[idx])\n    idx += 1\n    \n    edges = []\n    graph = defaultdict(list)\n    for _ in range(m):\n        u = int(data[idx]) - 1\n        idx += 1\n        v = int(data[idx]) - 1\n        idx += 1\n        g = int(data[idx])\n        idx += 1\n        l = int(data[idx])\n        idx += 1\n        edges.append((u, v, g, l))\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n    \n    # Check if GCD divides LCM\n    for u, v, g, l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    \n    # Assign values to nodes\n    values = [-1] * n\n    visited = [False] * n\n\n    def bfs(start):\n        queue = deque()\n        queue.append(start)\n        visited[start] = True\n        values[start] = 1  # Initial value (can be any multiple of g later)\n\n        while queue:\n            u = queue.popleft()\n            for v, g, l in graph[u]:\n                if values[v] == -1:\n                    # Compute product of x and y: (l/g)\n                    prod = l // g\n                    # We need to find x and y such that x*y = prod and gcd(x,y) = 1\n                    # Also, since a_u = g * x, a_v = g * y\n                    # But we have a_u already assigned. Let's see.\n                    if values[u] == -1:\n                        continue  # This should not happen as we start with start node\n                    # a_u is known, so a_u = g * x => x = a_u / g\n                    x = values[u] // g\n                    # Then y = prod / x\n                    y = prod // x\n                    # Check if x and y are coprime\n                    if math.gcd(x, y) != 1:\n                        return False\n                    values[v] = g * y\n                    visited[v] = True\n                    queue.append(v)\n                else:\n                    # Check consistency\n                    a_u = values[u]\n                    a_v = values[v]\n                    if math.gcd(a_u, a_v) != g or (a_u * a_v) // math.gcd(a_u, a_v) != l:\n                        return False\n        return True\n\n    for i in range(n):\n        if not visited[i]:\n            if values[i] == -1:\n                values[i] = 1\n            if not bfs(i):\n                print(\"NO\")\n                return\n\n    # Final check\n    for u, v, g, l in edges:\n        a_u = values[u]\n        a_v = values[v]\n        if math.gcd(a_u, a_v) != g or (a_u * a_v) // math.gcd(a_u, a_v) != l:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(' '.join(map(str, values)))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import defaultdict, deque\n\ndef input():\n    return sys.stdin.read()\n\ndef main():\n    data = input().split()\n    idx = 0\n    n = int(data[idx])\n    idx += 1\n    m = int(data[idx])\n    idx += 1\n    \n    edges = []\n    graph = defaultdict(list)\n    for _ in range(m):\n        u = int(data[idx]) - 1\n        idx += 1\n        v = int(data[idx]) - 1\n        idx += 1\n        g = int(data[idx])\n        idx += 1\n        l = int(data[idx])\n        idx += 1\n        edges.append((u, v, g, l))\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n    \n    # Check if GCD divides LCM\n    for u, v, g, l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    \n    # Assign values to nodes\n    values = [-1] * n\n    visited = [False] * n\n\n    def bfs(start):\n        queue = deque()\n        queue.append(start)\n        visited[start] = True\n        values[start] = 1  # Initial value (can be any multiple of g later)\n\n        while queue:\n            u = queue.popleft()\n            for v, g, l in graph[u]:\n                if values[v] == -1:\n                    # Compute product of x and y: (l/g)\n                    prod = l // g\n                    # We need to find x and y such that x*y = prod and gcd(x,y) = 1\n                    # Also, since a_u = g * x, a_v = g * y\n                    # But we have a_u already assigned. Let's see.\n                    if values[u] == -1:\n                        continue  # This should not happen as we start with start node\n                    # a_u is known, so a_u = g * x => x = a_u / g\n                    x = values[u] // g\n                    # Then y = prod / x\n                    y = prod // x\n                    # Check if x and y are coprime\n                    if math.gcd(x, y) != 1:\n                        return False\n                    values[v] = g * y\n                    visited[v] = True\n                    queue.append(v)\n                else:\n                    # Check consistency\n                    a_u = values[u]\n                    a_v = values[v]\n                    if math.gcd(a_u, a_v) != g or (a_u * a_v) // math.gcd(a_u, a_v) != l:\n                        return False\n        return True\n\n    for i in range(n):\n        if not visited[i]:\n            if values[i] == -1:\n                values[i] = 1\n            if not bfs(i):\n                print(\"NO\")\n                return\n\n    # Final check\n    for u, v, g, l in edges:\n        a_u = values[u]\n        a_v = values[v]\n        if math.gcd(a_u, a_v) != g or (a_u * a_v) // math.gcd(a_u, a_v) != l:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(' '.join(map(str, values)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 725,
        "thoughts_token_count": 1024
    }
}