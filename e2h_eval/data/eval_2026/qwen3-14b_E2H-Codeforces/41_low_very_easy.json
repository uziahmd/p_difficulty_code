{
    "start": 1758309258.6096396,
    "end": 1758309291.776656,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:14 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let's read the problem carefully again.\n\nSo, the task is to build houses on n spots. Each house's height is between 0 and h, inclusive. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range l_i to r_i, the tallest house must be at most x_i. We need to maximize the total profit under these constraints.\n\nHmm. The constraints are about the maximum in a range. So for each restriction, the maximum height in [l_i, r_i] must be <= x_i. And we need to choose heights for all houses such that all these constraints are satisfied, and the sum of squares is maximized.\n\nThe input is small: n, h, m up to 50. So maybe a brute-force approach is possible? But even with n=50, trying all possibilities is impossible because each house can have up to h+1 possibilities. For 50 houses, that's (h+1)^50 which is way too big.\n\nSo brute force isn't feasible. Need a smarter approach.\n\nWait, but since n and m are small (up to 50), perhaps we can model this as some kind of optimization problem with constraints. How can we model the constraints?\n\nEach restriction imposes that the maximum in a certain interval is <= x_i. So for each interval [l_i, r_i], the maximum of the heights in that interval must be <= x_i.\n\nSo how to model this? Maybe we can find for each position, the maximum allowed height, considering all restrictions that apply to it. But that's not straightforward because a restriction applies to a range. For example, a restriction on [1,3] would affect all three positions, and the maximum of those three must be <= x_i. So, if there are multiple restrictions overlapping, we need to ensure that all of them are satisfied.\n\nAn alternative idea: For each position i, determine the maximum possible height it can have, given all the restrictions. However, this is not straightforward because the maximum for a position depends on the restrictions that cover it. For example, if there's a restriction that says the max in [1,3] is <= 2, then each of the positions 1, 2, 3 can be at most 2. But if there's another restriction that says the max in [2,2] is 3, then position 2 can be up to 3, but the first restriction would require that the max in [1,3] is 2, so position 2 can't be higher than 2. So the maximum for position 2 is min(3, 2) = 2.\n\nWait, but how do we find for each position the maximum possible height allowed by all restrictions? Because a position may be part of multiple ranges. For example, if a restriction says that in [1,3], the max is 2, and another restriction says that in [2,4], the max is 3. Then for position 2, the max allowed is 2 (from the first restriction), but the second restriction allows up to 3. But since the first restriction applies to [1,3], the max of that entire range must be <= 2. Therefore, even though the second restriction allows position 2 to be 3, the first restriction would prevent that. So the maximum possible for position 2 is 2.\n\nSo for each position, the maximum allowed height is the minimum of all x_i where the position is in [l_i, r_i], but also considering that for any range that includes this position, the maximum in that range can't exceed x_i. However, this seems tricky. Because even if a position is allowed to be higher than some x_i, but if there's a restriction that covers a range including that position, which requires that the max in that range is <= x_i, then that position can't be higher than x_i.\n\nWait, but for example, if there's a restriction on [1,3] with x=2. Then, the maximum of all three positions must be <= 2. Therefore, each of them can be at most 2. So for each position in that range, the maximum possible height is at most 2. So for each position, the maximum allowed height is the minimum of all x_i for which that position is in [l_i, r_i], and also considering any other restrictions that might affect it via overlapping ranges.\n\nBut that's not entirely accurate. Suppose there is a restriction on [1,3] with x=2, and another on [1,1] with x=3. Then, the first restriction requires that the max of [1,3] is 2. So position 1 can be at most 2. The second restriction says that the max of [1",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and we must ensure that the tallest house in any restricted range does not exceed the specified maximum height.\n\n### Approach\n1. **Constraints Analysis**: Each restriction specifies a range and a maximum height. The tallest house in that range must not exceed the given height.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height considering all restrictions that apply to it. This involves checking all restrictions that include the house in their range and taking the minimum height from these restrictions.\n3. **Profit Calculation**: Once the maximum allowable height for each house is determined, calculate the profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_height array with h (no restrictions initially)\n        max_height = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_height[i] > x:\n                    max_height[i] = x\n        \n        total = 0\n        for height in max_height:\n            total += height * height\n        \n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, handling multiple test cases if present.\n2. **Initialization**: For each test case, initialize an array `max_height` with the maximum possible height `h` for each house.\n3. **Applying Restrictions**: For each restriction, update the `max_height` array to ensure that the maximum height for each house in the restricted range does not exceed the specified value.\n4. **Calculating Profit**: Compute the total profit by summing the squares of the adjusted maximum heights for all houses.\n\nThis approach efficiently applies the restrictions and calculates the maximum possible profit by ensuring each house's height adheres to all constraints, leveraging the small problem size constraints (up to 50 houses and restrictions).",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_height array with h (no restrictions initially)\n        max_height = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_height[i] > x:\n                    max_height[i] = x\n        \n        total = 0\n        for height in max_height:\n            total += height * height\n        \n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 544,
        "thoughts_token_count": 1024
    }
}