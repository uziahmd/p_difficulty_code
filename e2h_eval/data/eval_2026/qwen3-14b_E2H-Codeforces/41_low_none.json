{
    "start": 1758309259.1446784,
    "end": 1758309290.2601619,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:14 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the task is to build houses on n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the tallest house in a certain interval [l_i, r_i] must be at most x_i. I need to maximize the total profit under these constraints.\n\nHmm. How to approach this? Well, since n, h, m are all up to 50, maybe a brute-force approach is feasible? But even then, for each of the n houses, there are h+1 possibilities. For n=50 and h=50, that's 51^50 possibilities, which is way too big. So brute force is impossible here.\n\nSo I need a smarter approach. Let me think about constraints. The problem requires that for each restriction, the maximum in [l_i, r_i] is <= x_i. How can I model this?\n\nAnother thought: For each position, the maximum possible height is determined by the restrictions that apply to it. But since a restriction applies to a range, the maximum height in that range can't exceed x_i. However, each house's height is constrained by all the restrictions that include it in their ranges.\n\nBut how do I find the maximum possible heights for each house such that all restrictions are satisfied?\n\nWait, perhaps for each house, the maximum allowed height is the minimum of h and all x_i from restrictions where the house is in [l_i, r_i], and also considering that the maximum in any range must not exceed the x_i. Wait, but that's not sufficient. Because even if each individual house is allowed up to some value, the maximum in a range could be higher than some x_i. For example, suppose there's a restriction that the max in [1,2] is 3. If house 1 is allowed to be 4 (due to other restrictions) and house 2 is allowed to be 4, but the restriction says that the max in [1,2] must be <=3. Then, even though each house is allowed up to 4, the max in that range would be 4, violating the restriction.\n\nSo the problem isn't just about per-house constraints, but also about ensuring that for every restriction, the maximum in that range doesn't exceed x_i.\n\nThis seems complicated. How can I model this?\n\nAn alternative approach: since the problem is to maximize the sum of squares, which is a convex function, perhaps the optimal solution is to set each house as high as possible, given the constraints. But how to determine what that maximum is for each house?\n\nBut how to find the maximum possible height for each house, considering all the restrictions. For example, for a house i, the maximum possible height is min(h, all x_i from restrictions that cover i in their range). But wait, that's not correct because even if a house is not directly covered by a restriction, but the restriction covers a range that includes it. Wait, no. For example, if there's a restriction that says the max in [1,3] is 2. Then, each house in 1-3 can be at most 2. So for each house in that range, their maximum allowed is 2. But if there's another restriction that says the max in [2,2] is 3, then that house can be 3, but the first restriction would require that the max in [1,3] is 2. Which implies that house 2 can't be 3. So the per-house maximum is not simply the minimum of all x_i that apply to it, but also depends on the other houses.\n\nThis seems like a problem where we need to find for each house, the maximum possible height such that all restrictions are satisfied. But how?\n\nAnother idea: For each restriction, the maximum in [l_i, r_i] must be <= x_i. This implies that for each house in [l_i, r_i], the height can't be more than x_i. Because if any house in that range was higher than x_i, then the maximum would be higher than x_i, violating the restriction. Therefore, for each restriction, all houses in [l_i, r_i] must have height <= x_i. Wait, is that correct?\n\nNo! Because the maximum of the range is the maximum of the houses in that range. So if the maximum of the range is <= x_i, then each house in the range is <=x_i. Therefore, for each restriction, all houses in [l_i, r_i] must be <= x_i. Because if even one house in the range is higher than x_i, then the maximum would be higher than x_i, which violates the restriction. Therefore, the constraints can be transformed into",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and we must ensure that the tallest house in any restricted range does not exceed the specified maximum height.\n\n### Approach\n1. **Constraints Transformation**: Each restriction imposes a maximum height on all houses within a specific range. Therefore, for each house, we determine the minimum height limit imposed by all restrictions that cover it.\n2. **Maximize Heights**: For each house, set its height to the minimum of the global maximum height `h` and the strictest restriction affecting it. This ensures that all restrictions are satisfied while maximizing the height of each house.\n3. **Profit Calculation**: Calculate the total profit by summing the squares of the heights of all houses.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    \n    for line in input:\n        if not line.strip():\n            continue\n        parts = line.strip().split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        \n        # Initialize the maximum allowed height for each house\n        max_heights = [h] * n\n        \n        # Process each restriction\n        for i in range(m):\n            l = int(parts[3 + 3*i])\n            r = int(parts[4 + 3*i])\n            x = int(parts[5 + 3*i])\n            # Adjust to 0-based index\n            for j in range(l-1, r):\n                if max_heights[j] > x:\n                    max_heights[j] = x\n        \n        # Calculate the maximum profit\n        profit = sum([h * h for h in max_heights])\n        print(profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, and each line is processed to extract the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum possible height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum height for all houses within the specified range is adjusted to the minimum of their current value and the restriction's maximum height.\n4. **Profit Calculation**: The total profit is computed by summing the squares of the adjusted heights of all houses.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by setting each house to the highest possible height allowed by the constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    \n    for line in input:\n        if not line.strip():\n            continue\n        parts = line.strip().split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        \n        # Initialize the maximum allowed height for each house\n        max_heights = [h] * n\n        \n        # Process each restriction\n        for i in range(m):\n            l = int(parts[3 + 3*i])\n            r = int(parts[4 + 3*i])\n            x = int(parts[5 + 3*i])\n            # Adjust to 0-based index\n            for j in range(l-1, r):\n                if max_heights[j] > x:\n                    max_heights[j] = x\n        \n        # Calculate the maximum profit\n        profit = sum([h * h for h in max_heights])\n        print(profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 820,
        "completion_token_count": 554,
        "thoughts_token_count": 1024
    }
}