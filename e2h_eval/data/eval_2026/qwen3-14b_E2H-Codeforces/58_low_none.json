{
    "start": 1758309359.4957955,
    "end": 1758309759.9946158,
    "start-formatted": "2025-09-20 04:15 KST",
    "end-formatted": "2025-09-20 04:22 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's try to figure out how to solve this problem. The task is to find the minimum number of edges to add to a graph to form an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I remember that a graph is bipartite if and only if it contains no odd-length cycles. So, if the graph already has an odd-length cycle, then we don't need to add any edges. So in that case, t would be 0 and w would be 1? Wait, but the problem says that the cycle must consist of more than one vertex. Well, for example, if the graph has a triangle (3-node cycle), then that's an odd cycle, so t is 0 and w is 1? Or maybe there are multiple ways to form such cycles?\n\nBut the problem requires the minimal t. So first, we need to check if the graph already contains an odd-length cycle. If yes, then t is 0 and w is the number of such cycles? No, wait, no. Because the problem says that the answer w is the number of ways to add t edges to form a cycle. But if the graph already has such cycles, then adding zero edges would be the way. However, the question is about the number of ways to add exactly t edges. So if the original graph already has such cycles, then t is 0 and w is the number of possible such cycles? Or maybe not. Because the problem says that the answer is the number of ways to add t edges to form a cycle. But if the graph already has such cycles, then adding zero edges would be one way. However, the problem might have multiple existing cycles. But according to the note in the example, for the input with 3 nodes and 3 edges (a triangle), the output is 0 1. Which suggests that even though there's exactly one cycle (the triangle), the answer is 1. So in that case, the count is 1.\n\nSo the first thing is: check if the graph already contains an odd-length cycle. If yes, then t=0 and w=1? Or maybe the number of existing odd cycles? But that seems complicated. But the problem says that the answer is the number of ways to add t edges. Since t is zero, the way is to not add any edges. But how many such ways are there? Well, there's only one way: adding zero edges. However, the example shows that when the graph already has a cycle, the answer is 0 1. So perhaps the count is 1, regardless of how many existing cycles there are. Because the problem says that adding zero edges is the way, and there's only one way to do that. But that doesn't make sense. For example, if there are two different cycles in the graph, then adding zero edges would allow both cycles. But the problem says that the answer is the number of ways to add t edges. So in that case, the answer would be the number of possible ways to choose edges to add. But since t is zero, the way is to not add any edges. But the problem says that the answer is the number of ways to add exactly t edges. So if the graph already has at least one odd cycle, then the answer is t=0, w=1. Because you can just not add any edges, and there's only one way to do that. But why does the example with the triangle have output 0 1? That aligns with that idea. So that suggests that if the graph already has an odd cycle, then t=0 and w=1.\n\nWait, but what if the graph has multiple odd cycles? Then the number of ways is still 1? Because the way is to add zero edges. So regardless of how many existing cycles there are, the answer for w is 1. Because adding zero edges is the only way. So that's the case. So the problem is not about counting the existing cycles, but whether the graph already contains an odd cycle. If yes, then t is zero and w is 1.\n\nSo the first step is to check if the graph is bipartite. If it's not bipartite, then the answer is t=0 and w=1. Otherwise, we need to find the minimal number of edges to add to create an odd cycle.\n\nSo the problem reduces to:\n\nIf the graph is not bipartite, then output 0 1.\n\nElse, find the minimal t and the number of ways to add t edges to create an odd cycle.\n\nNow, if the graph is bipartite, then adding edges to create an odd cycle. How can we do that?\n\nIn a bipartite graph, all cycles are even-length. So to create an odd-length cycle, we need to add edges in such a way that creates an odd-length cycle.\n\nWhat's the minimal number of edges to",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length and count the number of ways to achieve this.\n\n### Approach\n1. **Check for Existing Odd Cycles**: If the graph already contains an odd-length cycle, the answer is straightforward: no edges need to be added (t = 0) and there's exactly one way to do this (w = 1).\n2. **Bipartite Graph Check**: If the graph is bipartite (i.e., it does not contain any odd-length cycles), we need to determine the minimum number of edges to add to create an odd-length cycle.\n3. **Bipartite Components**: For each bipartite component in the graph, we need to find the minimum number of edges required to create an odd cycle. This involves checking the sizes of the two partitions in each component.\n4. **Edge Addition Calculation**: The minimal number of edges required to form an odd cycle in a bipartite graph is determined by the smallest number of edges needed to connect nodes within the same partition, which can be calculated using combinations of nodes from the smaller partition.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    \n    for i in range(n):\n        if color[i] == -1:\n            queue = deque()\n            queue.append(i)\n            color[i] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            while queue:\n                u = queue.popleft()\n                for v in graph[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            components.append(cnt)\n    \n    for comp in components:\n        if comp[0] == 0 or comp[1] == 0:\n            continue\n        if comp[0] + comp[1] < 3:\n            continue\n        if comp[0] <= comp[1]:\n            if comp[0] >= 2:\n                is_bipartite = False\n                break\n        else:\n            if comp[1] >= 2:\n                is_bipartite = False\n                break\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    total_ways = 0\n    min_edges = float('inf')\n    \n    for comp in components:\n        a, b = comp\n        if a == 0 or b == 0:\n            continue\n        if a + b < 3:\n            continue\n        if a < b:\n            small = a\n        else:\n            small = b\n        if small < 2:\n            continue\n        edges_needed = 1\n        ways = (small * (small - 1)) // 2\n        if edges_needed < min_edges:\n            min_edges = edges_needed\n            total_ways = ways\n        elif edges_needed == min_edges:\n            total_ways += ways\n    \n    if min_edges == float('inf'):\n        print(\"3 1\")\n    else:\n        print(f\"{min_edges} {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into an adjacency list representation of the graph.\n2. **Bipartite Check**: Using BFS, we check if each component of the graph is bipartite. If any component is not bipartite, it means there's an existing odd-length cycle, and we immediately return the result.\n3. **Component Analysis**: For each bipartite component, we analyze the sizes of the two partitions. If both partitions have at least two nodes, we can form an odd cycle by adding one edge between nodes in the same partition.\n4. **Counting Ways**: The number of ways to add such edges is calculated using combinations of nodes within the smaller partition, ensuring the minimum number of edges is used.\n\nThis approach efficiently determines the minimum edges required and the number of ways to achieve the desired cycle, leveraging properties of bipartite graphs and combinatorial counting.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    \n    for i in range(n):\n        if color[i] == -1:\n            queue = deque()\n            queue.append(i)\n            color[i] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            while queue:\n                u = queue.popleft()\n                for v in graph[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            components.append(cnt)\n    \n    for comp in components:\n        if comp[0] == 0 or comp[1] == 0:\n            continue\n        if comp[0] + comp[1] < 3:\n            continue\n        if comp[0] <= comp[1]:\n            if comp[0] >= 2:\n                is_bipartite = False\n                break\n        else:\n            if comp[1] >= 2:\n                is_bipartite = False\n                break\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    total_ways = 0\n    min_edges = float('inf')\n    \n    for comp in components:\n        a, b = comp\n        if a == 0 or b == 0:\n            continue\n        if a + b < 3:\n            continue\n        if a < b:\n            small = a\n        else:\n            small = b\n        if small < 2:\n            continue\n        edges_needed = 1\n        ways = (small * (small - 1)) // 2\n        if edges_needed < min_edges:\n            min_edges = edges_needed\n            total_ways = ways\n        elif edges_needed == min_edges:\n            total_ways += ways\n    \n    if min_edges == float('inf'):\n        print(\"3 1\")\n    else:\n        print(f\"{min_edges} {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 570,
        "completion_token_count": 1006,
        "thoughts_token_count": 1024
    }
}