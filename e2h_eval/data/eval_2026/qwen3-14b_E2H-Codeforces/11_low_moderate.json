{
    "start": 1758008333.5639207,
    "end": 1758008494.2335815,
    "start-formatted": "2025-09-16 16:38 KST",
    "end-formatted": "2025-09-16 16:41 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about a group of friends who want to make as many toasts as possible. Each toast requires certain amounts of drink, lime slices, and salt. All friends must make the same number of toasts. So, I need to find the maximum number of toasts each can make, given the resources.\n\nLet me break down the inputs. The input gives n (number of friends), k (bottles of drink), l (ml per bottle), c (number of limes), d (slices per lime), p (grams of salt). Then, each toast requires nl ml of drink per friend, a slice of lime per friend, and np grams of salt per friend.\n\nWait, no. Wait, the problem says: each friend needs nl milliliters of the drink, a slice of lime, and np grams of salt per toast. So for one toast, each of the n friends needs these. So for one toast, total drink required is n * nl. Because each friend has to have their own portion. Similarly, each toast requires n slices of lime (one per friend), and n * np grams of salt.\n\nSo the total resources available are:\n\nDrink: k * l ml.\n\nLime slices: c * d slices.\n\nSalt: p grams.\n\nThen, for each toast, the total required is:\n\ndrink_per_toast = n * nl\n\nlime_slices_per_toast = n\n\nsalt_per_toast = n * np\n\nSo the maximum number of toasts possible is the minimum between:\n\n- total_drink // drink_per_toast\n\n- total_lime_slices // lime_slices_per_toast\n\n- total_salt // salt_per_toast\n\nBut wait, the problem says that each friend must make the same number of toasts. So the total toasts per friend is the same. So the total number of toasts possible is the minimum of the three values calculated above.\n\nSo, for example, in the first sample input:\n\nn=3, k=4, l=5. So total drink is 4*5=20. Drink per toast is 3 * 3 =9? Wait, the input for the first sample is '3 4 5 10 8 100 3 1'. Let me check:\n\nnl is 3, np is 1. So per toast, each friend needs 3 ml of drink, 1 slice, 1 gram of salt.\n\nSo for one toast, total drink needed is 3 * 3 =9 ml. Total lime slices needed is 3 * 1 =3 slices. Salt is 3 * 1 =3 grams.\n\nTotal drink available is 4*5=20. 20 /9 is 2.222..., so floor is 2. Total limes: 10 *8=80 slices. 80 /3 is 26.666..., floor 26. Salt is 100 /3 = 33.333, floor 33. The minimum of 2, 26, 33 is 2. Hence answer is 2.\n\nWhich matches the sample explanation.\n\nSo the approach is:\n\nCalculate for each resource how many toasts can be made, then take the minimum of those numbers.\n\nSo steps:\n\n1. Compute total_drink = k * l\n\n   max_toasts_by_drink = total_drink // (n * nl)\n\n2. Compute total_lime_slices = c * d\n\n   max_toasts_by_lime = total_lime_slices // n\n\n3. Compute total_salt = p\n\n   max_toasts_by_salt = total_salt // (n * np)\n\nThen, the answer is the minimum of these three values.\n\nBut wait, what if any of these values is zero? For example, if the total_salt is less than n * np, then max_toasts_by_salt is zero, so the answer is zero.\n\nSo the code should compute each of these three values, then take the minimum.\n\nNow, the problem is to read the input, compute these three values, and output the minimum.\n\nNow, let's think about possible edge cases.\n\nFor example, when any of the resources is exactly enough for some number of toasts. Like, if total_drink is exactly divisible by (n * nl), then that's fine.\n\nAnother case: when n is 1, but that's allowed.\n\nAnother edge case: when one of the resources is zero. But according to the input constraints, all input numbers are positive integers. So no, the inputs are at least 1. So the code doesn't have to handle zero inputs.\n\nSo, the code steps:\n\nRead the input line as integers n, k, l, c, d, p, nl, np.\n\nCompute:\n\ntotal_drink = k",
    "response": "\n\n```python\n# Read input from stdin\nimport sys\n\ndef main():\n    # Read the input line and split into integers\n    input_line = sys.stdin.read().strip()\n    n, k, l, c, d, p, nl, np = map(int, input_line.split())\n    \n    # Calculate total resources available\n    total_drink = k * l\n    total_lime_slices = c * d\n    total_salt = p\n    \n    # Calculate maximum toasts possible for each resource\n    max_by_drink = total_drink // (n * nl)\n    max_by_lime = total_lime_slices // n\n    max_by_salt = total_salt // (n * np)\n    \n    # The answer is the minimum of the three\n    print(min(max_by_drink, max_by_lime, max_by_salt))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "# Read input from stdin\nimport sys\n\ndef main():\n    # Read the input line and split into integers\n    input_line = sys.stdin.read().strip()\n    n, k, l, c, d, p, nl, np = map(int, input_line.split())\n    \n    # Calculate total resources available\n    total_drink = k * l\n    total_lime_slices = c * d\n    total_salt = p\n    \n    # Calculate maximum toasts possible for each resource\n    max_by_drink = total_drink // (n * nl)\n    max_by_lime = total_lime_slices // n\n    max_by_salt = total_salt // (n * np)\n    \n    # The answer is the minimum of the three\n    print(min(max_by_drink, max_by_lime, max_by_salt))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 538,
        "completion_token_count": 189,
        "thoughts_token_count": 1023
    }
}