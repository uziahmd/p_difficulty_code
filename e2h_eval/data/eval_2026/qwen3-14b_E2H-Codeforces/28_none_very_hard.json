{
    "start": 1758338257.6708934,
    "end": 1758338312.9896245,
    "start-formatted": "2025-09-20 12:17 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 3):\n        n = int(data[i])\n        m = int(data[i+1])\n        g = int(data[i+2])\n        \n        # Precompute factorials and inverse factorials up to max(n, m)\n        max_nm = max(n, m)\n        fact = [1] * (max_nm + 1)\n        inv_fact = [1] * (max_nm + 1)\n        \n        for i in range(1, max_nm + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact[max_nm] = pow(fact[max_nm], MOD-2, MOD)\n        for i in range(max_nm - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(a, b):\n            if a < 0 or b < 0 or a < b:\n                return 0\n            return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n        \n        # We need to find the number of strings with exactly n 0s and m 1s\n        # such that after some operations, the final character is g.\n        \n        # Let's think recursively: the last operation must result in g.\n        # Each operation reduces the string length by 1.\n        # So, starting from total length (n + m), we must reach length 1.\n        # Number of operations needed = (n + m - 1)\n        \n        # The process is equivalent to building the string from the end.\n        # Let dp[len][last_char] be the number of ways to build a string of length len ending with last_char\n        # such that it can be reduced to g with the given rules.\n        \n        # We use memoization to avoid recomputation\n        from functools import lru_cache\n        \n        @lru_cache(None)\n        def dfs(length, last_char):\n            if length == 1:\n                return 1 if last_char == g else 0\n            \n            res = 0\n            # Try adding a 0 or 1 to the end\n            for new_char in [0, 1]:\n                # If we add new_char, then the previous last character is last_char\n                # We perform an operation on the last two characters\n                # The result of the operation is 1 if both are 0, else 0\n                if last_char == 0 and new_char == 0:\n                    new_last = 1\n                elif last_char == 1 and new_char == 1:\n                    new_last = 0\n                else:\n                    new_last = 0\n                \n                # Recursively check if we can reach g from this new_last with length-1\n                res = (res + dfs(length - 1, new_last)) % MOD\n            \n            return res\n        \n        total = comb(n + m, n)\n        ans = total * dfs(n + m, 0) % MOD\n        results.append(str(ans))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 3):\n        n = int(data[i])\n        m = int(data[i+1])\n        g = int(data[i+2])\n        \n        # Precompute factorials and inverse factorials up to max(n, m)\n        max_nm = max(n, m)\n        fact = [1] * (max_nm + 1)\n        inv_fact = [1] * (max_nm + 1)\n        \n        for i in range(1, max_nm + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact[max_nm] = pow(fact[max_nm], MOD-2, MOD)\n        for i in range(max_nm - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(a, b):\n            if a < 0 or b < 0 or a < b:\n                return 0\n            return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n        \n        # We need to find the number of strings with exactly n 0s and m 1s\n        # such that after some operations, the final character is g.\n        \n        # Let's think recursively: the last operation must result in g.\n        # Each operation reduces the string length by 1.\n        # So, starting from total length (n + m), we must reach length 1.\n        # Number of operations needed = (n + m - 1)\n        \n        # The process is equivalent to building the string from the end.\n        # Let dp[len][last_char] be the number of ways to build a string of length len ending with last_char\n        # such that it can be reduced to g with the given rules.\n        \n        # We use memoization to avoid recomputation\n        from functools import lru_cache\n        \n        @lru_cache(None)\n        def dfs(length, last_char):\n            if length == 1:\n                return 1 if last_char == g else 0\n            \n            res = 0\n            # Try adding a 0 or 1 to the end\n            for new_char in [0, 1]:\n                # If we add new_char, then the previous last character is last_char\n                # We perform an operation on the last two characters\n                # The result of the operation is 1 if both are 0, else 0\n                if last_char == 0 and new_char == 0:\n                    new_last = 1\n                elif last_char == 1 and new_char == 1:\n                    new_last = 0\n                else:\n                    new_last = 0\n                \n                # Recursively check if we can reach g from this new_last with length-1\n                res = (res + dfs(length - 1, new_last)) % MOD\n            \n            return res\n        \n        total = comb(n + m, n)\n        ans = total * dfs(n + m, 0) % MOD\n        results.append(str(ans))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 716,
        "thoughts_token_count": 0
    }
}