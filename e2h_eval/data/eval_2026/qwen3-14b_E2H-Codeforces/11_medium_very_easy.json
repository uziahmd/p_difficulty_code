{
    "start": 1758016194.2998395,
    "end": 1758017712.6524174,
    "start-formatted": "2025-09-16 18:49 KST",
    "end-formatted": "2025-09-16 19:15 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about a group of friends who want to make as many toasts as possible. Each toast requires certain amounts of drink, lime slices, and salt. All friends must make the same number of toasts. So, I need to find the maximum number of toasts each can make, given the resources.\n\nLet me break down the inputs. The input gives n (number of friends), k (bottles of drink), l (ml per bottle), c (number of limes), d (slices per lime), p (grams of salt), nl (ml of drink per toast per friend), np (grams of salt per toast per friend).\n\nSo, first, calculate how much total drink they have. That's k multiplied by l. Then, each toast requires n * nl ml of drink. Because each of the n friends needs nl per toast. So total drink per toast is n * nl. So the maximum possible toasts based on drink is total_drink // (n * nl). Wait, but wait: total_drink is k*l. So (k*l) // (n * nl) ?\n\nThen for the lime slices. Each toast requires one slice per friend. So per toast, n slices. They have c limes, each cut into d slices. So total slices is c*d. So maximum toasts based on lime is (c*d) // n.\n\nFor the salt: each toast requires n * np grams. Because each friend needs np per toast. So total salt per toast is n * np. So maximum toasts based on salt is p // (n * np).\n\nThe answer is the minimum of these three values. Because all three resources are required for each toast. So the maximum possible is the minimum of the three calculated values.\n\nWait, but let me check the example. Let's take the first sample input:\n\nSample input 1: 3 4 5 10 8 100 3 1\n\nSo n=3 friends.\n\nTotal drink: 4*5=20 ml. Each toast requires 3 friends * 3 ml per toast (nl=3). So 3*3=9 per toast. 20 /9 is 2.222..., so floor is 2. So drink allows 2 toasts.\n\nLimes: 10 limes, 8 slices each. 10*8=80 slices. Each toast needs 3 slices (n=3). 80 /3 is 26.666..., floor 26. But wait, the sample says that the limes are enough for 80 toasts? Wait, no. Wait the note says that the limes are enough for 80 toasts. Wait, why?\n\nWait in the note, they say that the limes are enough for 80 toasts. Let me check. Oh, the sample note says that the limes are enough for 10 * 8 = 80 toasts. But how?\n\nAh, because each toast requires one slice per friend. So for each toast, n slices. So for the first sample, each toast requires 3 slices. So total slices is 80. So 80 /3 = 26.666, which would be 26. But the note says that the limes are enough for 80 toasts. Wait, that seems conflicting. Oh wait, no. Wait the note says that the limes are enough for 80 toasts. But according to the calculation, it's 80 / 3 = 26.666. So why does the note say that?\n\nWait wait, perhaps I made a mistake here. Let me recheck the note. The note says:\n\nIn the first sample, the limes are enough for 10 * 8 = 80 toasts. But why? Because each toast requires a slice per friend. So for each toast, each friend has one slice. So for each toast, n slices. So total number of toasts is (total slices) / n. So in the first sample, total slices is 80. Divided by 3 (n=3) gives 26.666, which would be 26. But the note says that the limes are enough for 80 toasts. That's not matching. So there's a misunderstanding here.\n\nWait, perhaps I have misunderstood the problem. Let me re-read the problem statement.\n\nThe problem says: each friend needs a slice of lime. So for each toast, each friend needs one slice. So per toast, n slices. So the total number of slices required for t toasts is t * n. So the maximum t is (total slices) // n.\n\nBut in the first sample, total slices is 10 * 8 = 80. So 80 divided by n=3 is 26.666, so 26. But the note says that the limes are enough for 80 toasts. That suggests that perhaps the problem says that each toast requires one slice per person, but maybe that's not the case. Let me check the problem statement again.\n\nProblem statement says: each friend needs a slice of lime. So for each toast, each of the n friends needs a slice. Therefore, per toast, n slices. So for t toasts, n * t slices. So the maximum t is (c*d) // n.\n\nBut in the note, the example says that the limes are enough for 80 toasts. Which would imply that (c*d) is 80, and n is 1? But in the first sample, n is 3. So why is the note saying that the limes are enough for 80 toasts?\n\nWait the note says: \"the limes are enough for 10 * 8 = 80 toasts\". But that's only possible if each toast requires one slice. But then, for 80 toasts, each toast would need one slice. But with 80 slices, that's possible. But according to the problem statement, each toast requires n slices. So there's a contradiction here.\n\nAh! Oh, perhaps I misread the problem. Let me recheck the problem statement.\n\nThe problem says: \"each friend needs a slice of lime and np grams of salt.\"\n\nAh, so for each toast, each friend needs a slice. So for one toast, n slices. So for t toasts, n * t slices. So the maximum t is (c*d) // (n).\n\nBut in the note, the first sample says that the limes are enough for 80 toasts. So according to that, (c*d) is 10*8=80. So 80 slices. If the required per toast is n slices (n=3), then 80//3 = 26. So why the note says that limes are enough for 80 toasts?\n\nThis suggests that perhaps my understanding is wrong. Let me re-examine the note.\n\nThe note says:\n\n\"A comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n\nWait, why is the limes allowing 80 toasts? Because according to the note, the limes are enough for 80 toasts. But according to my previous logic, the limes would allow 80 / 3 = 26.666, which would be 26. But the note says that the limes are enough for 80 toasts. So that implies that the limes are not divided by n. But why?\n\nWait, perhaps the problem statement says that each toast requires one slice per person. But the note says that the limes are enough for 80 toasts. Which would suggest that each toast requires one slice. But that would be only for one person. But the problem says that each friend needs a slice. So for each toast, each of the n friends needs a slice. So per toast, n slices. So the note's explanation must be wrong? Or perhaps I'm missing something.\n\nAlternatively, perhaps the note's explanation is incorrect. But that's unlikely. Let me think again.\n\nLet me recheck the problem statement. The problem says:\n\n\"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n\nSo for each toast, each friend needs a slice. So for one toast, each of the n friends needs one slice. So total slices per toast is n. So for t toasts, total slices needed is t * n.\n\nSo the maximum t is (total_slices) // (n). So in the first sample, total_slices is 80. So 80//3 is 26. But the note says that the limes are enough for 80 toasts. So why?\n\nAh, wait the note says that the answer is min(6, 80, 100) / 3 = 2. So that suggests that the limes are 80, and the drink is 6. Then the min is 6, divided by 3 gives 2. But according to that, the limes are 80 toasts. But why?\n\nWait, perhaps the note is not considering that each toast requires n slices. Maybe the note is wrong. Or perhaps I have misunderstood the problem.\n\nAlternatively, perhaps the problem says that each toast requires one slice per friend. But the note's explanation is wrong. But that's unlikely.\n\nAlternatively, maybe the note is correct and the way I'm calculating is wrong. Let me think again.\n\nWait the note says that the limes are enough for 80 toasts. How is that possible?\n\nLet me look at the first sample input:\n\nn=3 friends. So for each toast, each of the 3 friends needs a slice. So per toast, 3 slices. So total slices is 80. So how many toasts can be made? 80 / 3 = 26.666... which is 26. But the note says that the limes are enough for 80 toasts. That would be possible if each toast requires 1 slice. So why is that?\n\nAh! Oh wait, perhaps the problem says that each toast requires one slice per friend. But the note says that the limes are enough for 80 toasts. Which would be possible if the total slices is 80 and each toast requires one slice. But that would mean that each toast requires one slice for all friends. Which is impossible.\n\nAlternatively, maybe the problem says that each toast requires one slice per friend. So for each toast, each friend gets a slice. So for each toast, n slices. But in the note, the limes are enough for 80 toasts. Which would be possible if the total slices is 80 * n. But that's not the case.\n\nAlternatively, perhaps the note is wrong. But that's unlikely. Let me think again.\n\nThe note says that the answer is min(6, 80, 100) / 3 = 2. So the 6 comes from the drink. The 80 comes from limes, and 100 from salt. But why?\n\nLet me re-calculate the drink part. Total drink is 4*5=20 ml. Each toast requires 3 friends * 3 ml per toast (nl=3). So 3*3=9 per toast. So 20 /9 = 2.222, which is 2. So the drink allows 2 toasts. But according to the note, the drink is enough for 6 toasts. How?\n\nWait the note says \"it is enough to make 20 / 3 = 6 toasts.\" Oh, wait that's 20 divided by 3, but why? Because 20 is the total drink, and per toast, each friend needs 3 ml. So per toast, n * nl = 3 * 3 = 9 ml. So 20 / 9 is 2.222. But the note says that 20/3 is 6. So that's a discrepancy.\n\nSo why does the note say that the drink is enough for 6 toasts?\n\nAh! Oh, perhaps I have the formula wrong. Maybe the per toast is nl per friend. So for each toast, each friend needs nl ml. So for one toast, total drink needed is n * nl. For t toasts, it's t * n * nl. So the total available is k * l. So t_max_drink = (k * l) // (n * nl). \n\nIn the first sample, that's (4*5) / (3 *3) = 20 /9 = 2.222, which is 2. But the note says that 20 /3 is 6. So why?\n\nWait the note says that the drink is enough for 20 /3 = 6 toasts. So that would imply that for each toast, the total drink needed is 3 ml. But that would be per friend. So for one toast, each friend needs 3 ml, but for t toasts, each friend needs 3*t ml. So for all friends, total drink is n * 3 * t. So the total drink available is 20. So 20 = n * 3 * t → t = 20/(3 * n) → 20/(3*3) = 20/9 = 2.222.\n\nBut the note says 20/3=6. So that suggests that the note is considering that per toast, each friend needs nl ml. So for one toast, total is nl per friend. So for t toasts, each friend needs t * nl. So total drink is n * t * nl. Which is the same as before. So why is the note saying that the drink is enough for 20/3 toasts?\n\nWait the note says that the drink is enough for 20 / 3 = 6 toasts. That would imply that the total drink per toast is 3 ml. Which would be for one friend. But in that case, for t toasts, each friend would have t * 3 ml. So for 3 friends, total drink is 3 * t *3 = 9t. So 9t ≤ 20 → t ≤ 2.222. So again, that's 2.\n\nBut the note says that the drink is enough for 6 toasts. Which would be possible if the per toast is 20 / 6 = 3.333 ml. But that doesn't make sense.\n\nThis suggests that there is a misunderstanding in the problem statement. Let me re-read the problem statement again.\n\nProblem statement:\n\neach friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\n\nSo for each toast, each friend needs nl ml. So for one toast, total drink is n * nl ml. For t toasts, total drink is t * n * nl. \n\nSo for the first sample, n=3, nl=3. So per toast, 3 *3 =9 ml. Total drink is 4*5=20. So 20 /9 is 2.222 → 2 toasts. \n\nBut the note says that the drink is enough for 20/3=6 toasts. Which suggests that the per toast is nl per friend. So for one toast, each friend gets nl, but for t toasts, each friend gets t * nl. So total drink per toast is n * nl * t. Which is the same as before. So why is the note saying that the drink is sufficient for 20/3 toasts?\n\nAh! Oh, maybe the note is not taking into account that each toast requires per friend. It says:\n\nOverall the friends have 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\n\nBut why 20/3? That would be if each toast requires 3 ml. Which would be for one friend. So perhaps the note is wrong, or there's a misunderstanding.\n\nAlternatively, maybe the problem is that the friends can make t toasts, and each toast requires that each friend consumes nl ml. So for one toast, each of the n friends drinks nl ml. So total drink per toast is n * nl. So total for t toasts is t * n * nl. So the maximum t is (k*l) // (n * nl). \n\nBut according to the note, the first sample's drink allows 6 toasts. So for that to be the case, (k*l) must be equal to 6 * n * nl. Let's compute:\n\nk*l is 4*5=20. 6 * n * nl = 6 *3 *3 = 54. But 20 <54. So that's not possible. So there's a contradiction here. Which suggests that the note is wrong, but that's unlikely. So what's wrong here?\n\nWait the note says:\n\n\"Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n\nAh! Wait maybe the note is considering that each toast requires 3 ml per friend. So per toast, each friend needs 3 ml. So for one toast, total is 3 * 3 =9 ml. So 20 /9 is 2.222. But the note says 20/3=6. Which is 20 divided by 3, not by 9. So why is that?\n\nMaybe the note is wrong. Or maybe there's a mistake in the problem statement. Alternatively, perhaps the problem says that each toast requires nl milliliters per friend, but the total for all friends is nl. Like, per toast, the total is nl, not per friend. But that would contradict the problem statement.\n\nAlternatively, perhaps the problem is that the note is using nl as the total per toast, not per friend. For example, in the first sample, nl is 3. So per toast, each friend needs 3 ml. But the note says that the drink is enough for 20 /3 = 6 toasts. Which would be if per toast, the total is 3 ml. So that would be possible if nl is the total per toast, not per friend. But that contradicts the problem statement.\n\nThis is very confusing. Let me try to look at the sample input and output again.\n\nSample Input 1: 3 4 5 10 8 100 3 1\n\nSample Output: 2.\n\nThe note says that the answer is min(6, 80, 100)/3=2. So the min is 6, divided by 3 gives 2. Which suggests that the three values being considered are 6, 80, 100. \n\nBut how do those numbers come about?\n\nDrink: total is 4*5=20. If the drink allows 6 toasts, then 6 toasts require 6 * something = 20. So 20 /6 = 3.333. What is that something?\n\nIf that something is the amount per toast for all friends, then per toast, it's 3.333 ml. Which would be nl per toast. But the problem says that each friend needs nl per toast. So for 3 friends, it's 3*3=9 per toast. 6 toasts would need 6*9=54. But 20 is less than that. So that's impossible.\n\nSo the only way this makes sense is if the note is wrong. But that's unlikely. So I must be misunderstanding the problem.\n\nLet me re-examine the problem statement again:\n\n\"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n\nSo for each toast, each friend needs nl ml of drink. So for one toast, each of the n friends needs nl ml. So for one toast, total drink is n * nl. For t toasts, it's t * n * nl. \n\nSo the maximum number of toasts is determined by the minimum of:\n\ntotal_drink // (n * nl) → (k*l) // (n * nl)\n\ntotal_slices // n → (c*d) // n\n\ntotal_salt // (n * np) → p // (n * np)\n\nThen the answer is the minimum of those three numbers.\n\nBut according to the note, for the first sample, the drink allows 6 toasts. So according to this formula, (k*l) is 20, n*nl is 3*3=9. 20//9 is 2. So why is the note saying 6?\n\nAh! Oh, wait maybe the problem is that the friends can make t toasts, and each toast requires that each friend has nl ml. So the total drink needed is t * nl per friend. So for all friends, it's t * nl * n. Which is the same as before. So the formula is correct.\n\nBut the note says that the drink is enough for 20 /3 =6 toasts. Which would be 20 /3 =6. So 3 is nl. So this suggests that the formula is (k*l) // nl. Which would be 20 //3 =6. But that would be if the total drink is divided by nl, not by n * nl. Which would be wrong.\n\nBut why would the note say that? Unless there's a mistake in the note.\n\nAlternatively, maybe the problem is that the friends can make t toasts, and each toast requires that each friend consumes nl ml. So for one toast, each friend needs nl ml. So for t toasts, each friend needs t * nl ml. So total drink is n * t * nl. Which is the same as before.\n\nSo the maximum t is (k*l) // (n * nl).\n\nIn the first sample, that's 20 // (3*3) = 20//9 =2. So the drink allows 2 toasts. The note says that the drink allows 6 toasts. So why?\n\nUnless the note is wrong. But that's unlikely. So there must be a misunderstanding. Let me think again.\n\nWait the note says that the answer is min(6, 80, 100)/3=2. So the min is 6, and dividing by 3 gives 2. So that suggests that the three values being considered are 6, 80, 100. So where do these values come from?\n\nLet me see:\n\nDrink: 4*5=20. 20 / (3) =6.666. So maybe the note is considering that each toast requires 3 ml for all friends. So for example, per toast, the total drink is 3 ml. But that would be for all friends. But that would mean that each friend gets 1 ml per toast. But the problem says that each friend needs nl=3 ml per toast. So that's conflicting.\n\nAlternatively, maybe the note is considering that the total drink is divided by nl, not by n * nl. So for the drink, the maximum number of toasts is (k*l) // nl. Which for the first sample is 20//3=6. Then, since there are 3 friends, you divide by 3 to get 2. So that's the approach taken in the note.\n\nBut why would that be the case? That would be incorrect according to the problem statement. But the note suggests that this is the correct approach.\n\nSo perhaps the problem statement is different. Let me re-read the problem statement again.\n\nThe problem says: the friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\nAh! Oh! Wait! Oh! The question is asking for the number of toasts each friend can make. So if each friend makes t toasts, then for each toast, they need nl ml. So per friend, total drink is t * nl. For all friends, it's n * t * nl. Which is the same as before.\n\nBut the note says that the drink is enough for 20 /3 =6 toasts. Which would be if the total drink is divided by nl, giving the total number of toasts that can be made by all friends. But then, since each friend makes the same number of toasts, the total number of toasts is t, and the total drink is n * t * nl. So solving for t: t = (k*l) / (n * nl). \n\nBut the note says that the drink allows 20 /3 =6 toasts. Which would be t = (k*l)/nl. Which would be 20/3=6.666. So the total number of toasts is 6.666, but then divided by n (3) to get 2.222, which would be rounded down to 2. Which is what the note says.\n\nSo the note's reasoning is:\n\ndrink allows 20 /3 =6 toasts (total across all friends?), then divided by n friends to get per friend.\n\nBut this seems to be a different approach. So the original approach was to calculate the maximum t such that n * t * nl <= k*l. Which is t = (k*l) // (n * nl). \n\nBut the note's approach is to calculate (k*l) // nl, then divide by n. Which would give the same result as (k*l) // (n * nl) ?\n\nLet me see:\n\n(k*l) // nl // n = floor( (k*l / nl) /n ) = floor( (k*l) / (n * nl) )\n\nWhich is the same as floor( (k*l) / (n * nl) ). So yes. \n\nSo for the first sample:\n\nk*l=20, nl=3. 20//3=6. 6//3=2. Which is the same as 20// (3*3) = 20//9=2.\n\nSo both approaches give the same result. So the note's way of thinking is to calculate for each resource:\n\ndrink: total_drink // nl → gives total number of toasts across all friends, then divide by n to get per friend.\n\nSimilarly, for the lime slices: total_slices // 1 → gives total number of toasts across all friends (since each toast requires one slice per friend, so per toast, n slices. So total number of toasts is total_slices // n. Which is the same as (total_slices //1 ) //n. \n\nWait, the note says that the limes are enough for 80 toasts. Which would be total_slices=80. So total_slices //n = 80//3=26. But the note says that limes are enough for 80 toasts. Which suggests that the note is thinking of total_slices //1 =80. And then dividing by n to get 80//3=26. Which is the same as the correct approach.\n\nBut in the note, they say that the limes are enough for 80 toasts, and the salt for 100 toasts. Then the min of 6, 80, 100 is 6. Divide by 3 (number of friends) gives 2. Which is correct.\n\nSo the note's explanation is not accurate in terms of the intermediate steps, but the final calculation is correct. So the way to calculate is:\n\nFor each resource, calculate the maximum number of toasts that can be made in total (across all friends), then divide by n (number of friends) to get the per-friend number of toasts. \n\nBut how to calculate the maximum number of toasts for each resource?\n\nLet's think:\n\nDrink: each toast requires nl ml per friend. So for t toasts, each friend needs t * nl ml. Total for all friends is n * t * nl. This must be <= total_drink (k*l). So t <= total_drink / (n * nl). So the maximum t is floor(total_drink / (n * nl)).\n\nBut alternatively, if we think that for each toast, each friend uses nl ml, then the total number of toasts across all friends is total_drink / nl. Because for each toast, each friend uses nl, so per toast, total is n * nl. So the total number of toasts is (total_drink) / (n * nl). Which is the same as before.\n\nBut the note's explanation seems to think that the drink allows (total_drink / nl) toasts, which is (k*l)/nl, and then divide by n to get the per-friend number of toasts. Which is the same as (k*l) / (n * nl). \n\nSo the correct approach is to compute for each resource, the maximum number of toasts that can be made, given that all friends make the same number of toasts. So the steps are:\n\nCompute for each resource:\n\ndrink_toasts = (k * l) // (n * nl)\n\nlime_toasts = (c * d) // n\n\nsalt_toasts = p // (n * np)\n\nThe answer is the minimum of these three values.\n\nYes. So in the first sample:\n\ndrink_toasts = 20 // (3 *3) = 20//9=2\n\nlime_toasts = (10*8)//3 = 80//3=26\n\nsalt_toasts = 100//(3*1) = 100//3=33\n\nmin(2, 26, 33) is 2. Which matches the sample output.\n\nSo the note's explanation was incorrect in the intermediate steps but the final calculation is correct.\n\nSo the correct approach is to compute the three values as above, then take the minimum.\n\nSo now, the code can be written as follows.\n\nRead the input values: n, k, l, c, d, p, nl, np.\n\nCalculate total_drink = k * l\n\ntotal_drink_toasts = total_drink // (n * nl)\n\ntotal_lime_slices = c * d\n\ntotal_lime_toasts = total_lime_slices // n\n\ntotal_salt = p\n\ntotal_salt_toasts = total_salt // (n * np)\n\nresult = min(total_drink_toasts, total_lime_toasts, total_salt_toasts)\n\nprint(result)\n\nYes.\n\nNow let's test the first sample input:\n\nSample input: 3 4 5 10 8 100 3 1\n\ntotal_drink = 4*5=20\n\ndrink_toasts = 20 // (3*3) = 20//9=2\n\nlime_toasts: 10*8=80 //3=26\n\nsalt_toasts: 100 // (3*1)=33. So min is 2. Correct.\n\nSecond sample input:\n\n['5 100 10 1 19 90 4 3']\n\nn=5, k=100, l=10 → total drink is 100*10=1000\n\ndrink_toasts: 1000 / (5 *4) = 1000 /20 =50 → 50.\n\nlime: c=1, d=19 → total slices 1*19=19. divided by n=5 → 19//5=3.\n\nsalt: p=90, divided by (5 *3)=15 → 90//15=6. So min(50,3,6) is 3 → output is 3. Which matches the sample.\n\nThird sample input: ['10 1000 1000 25 23 1 50 1']\n\nn=10, k=1000, l=1000 → total drink 1000*1000=1,000,000.\n\ndrink_toasts = 1e6 / (10 *50) = 1e6/(500) = 2000.\n\nlime: c=25, d=23 → 25*23=575. divided by n=10 → 575//10=57.\n\nsalt: p=1, divided by (10 *1) =10 → 1//10=0. So min(2000, 57, 0) is 0. Which matches the sample.\n\nSo the code works for the samples.\n\nNow, implement this in Python.\n\nRead the input line, split into integers. Then compute the three values.\n\nBut note that the input may have multiple test cases. Wait, looking at the example input:\n\nThe first line shows that the input is a list of multiple test cases? Or is it that the input is a single line per test case?\n\nWait the problem says:\n\nInput: The first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\nSo the input is a single line. But the sample input shows multiple lines. Wait, looking back:\n\nThe sample input shows:\n\nInput:\n\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\nBut that's probably a representation of multiple test cases. But according to the problem statement, the input is a single line. So perhaps the sample input is for multiple test cases, but the actual code should read one line per test case. Or perhaps the sample input is a list of inputs, each being a separate test case.\n\nWait the problem says:\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). \n\nSo the code should read one line from stdin, process it, and output one integer.\n\nBut looking at the sample input and output, it's possible that the sample input is showing multiple test cases. However, the problem says that the input is a single line. So perhaps the sample input is for multiple test cases, but the actual code should process one line at a time. However, in the problem statement, the input is described as a single line. So the code should read one line from input, process it, and output one integer.\n\nBut looking at the sample input, the user provided three test cases. But in reality, the code is supposed to read one line. So perhaps the sample input is a list of test cases, and the code should process each line as a separate test case. But the problem says that the input is a single line. So this is confusing.\n\nWait looking back at the problem statement:\n\nInput:\n\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\nSo the input is one line with 8 integers. The sample input shows three lines, but that's probably a mistake in formatting. For example, the first sample input line is \"3 4 5 10 8 100 3 1\", which is 8 numbers. The output is \"2\".\n\nSo the code should read one line, split into 8 integers, process them, and output one integer.\n\nBut in the sample input provided, there are three lines. But that's probably a way to show multiple test cases. But the actual code is supposed to handle one test case per input line. However, the problem statement says that the input is one line. So perhaps the sample input is showing multiple test cases, and the code should read each line as a separate test case. But the problem says that the input is a single line. So this is a bit unclear.\n\nBut according to the problem statement, the code should read from stdin. So the code should read one line from stdin, split into the 8 integers, compute the result, and print it.\n\nThus, the Python code will read one line from input, split into parts, process them.\n\nSo the code would be:\n\nRead the input line as a list of integers.\n\nThen compute:\n\nn, k, l, c, d, p, nl, np = map(int, input().split())\n\ntotal_drink = k * l\n\ndrink_toasts = total_drink // (n * nl)\n\nlime_toasts = (c * d) // n\n\nsalt_toasts = p // (n * np)\n\nresult = min(drink_toasts, lime_toasts, salt_toasts)\n\nprint(result)\n\nThat's the code.\n\nTesting with the first sample input line: '3 4 5 10 8 100 3 1' → outputs 2.\n\nYes.\n\nAnother test case: '5 100 10 1 19 90 4 3' → outputs 3",
    "response": "\n\nTo solve this problem, we need to determine the maximum number of toasts each friend can make given the constraints on the available resources: soft drinks, lime slices, and salt. Each toast requires a specific amount of drink, a slice of lime, and a certain amount of salt per friend.\n\n### Approach\n1. **Total Drink Calculation**: Calculate the total amount of drink available by multiplying the number of bottles by the milliliters per bottle.\n2. **Drink Requirement per Toast**: Determine how many toasts can be made with the available drink by dividing the total drink by the amount needed per toast for all friends.\n3. **Lime Slices Calculation**: Calculate the total number of lime slices available by multiplying the number of limes by the number of slices per lime.\n4. **Lime Requirement per Toast**: Determine how many toasts can be made with the available lime slices by dividing the total slices by the number of slices needed per toast for all friends.\n5. **Salt Calculation**: Determine how many toasts can be made with the available salt by dividing the total salt by the amount needed per toast for all friends.\n6. **Result Calculation**: The maximum number of toasts each friend can make is the minimum value derived from the drink, lime slices, and salt calculations.\n\n### Solution Code\n```python\nn, k, l, c, d, p, nl, np = map(int, input().split())\ntotal_drink = k * l\ndrink_toasts = total_drink // (n * nl)\nlime_toasts = (c * d) // n\nsalt_toasts = p // (n * np)\nprint(min(drink_toasts, lime_toasts, salt_toasts))\n```\n\n### Explanation\n1. **Input Reading**: The input consists of eight integers representing the number of friends, bottles of drink, milliliters per bottle, limes, slices per lime, grams of salt, milliliters of drink per toast per friend, and grams of salt per toast per friend.\n2. **Total Drink Calculation**: Multiply the number of bottles by the milliliters per bottle to get the total amount of drink available.\n3. **Drink Requirement**: Calculate how many toasts can be made with the available drink by dividing the total drink by the product of the number of friends and the drink required per toast per friend.\n4. **Lime Slices Calculation**: Multiply the number of limes by the number of slices per lime to get the total number of slices available.\n5. **Lime Requirement**: Calculate how many toasts can be made with the available slices by dividing the total slices by the number of friends.\n6. **Salt Requirement**: Calculate how many toasts can be made with the available salt by dividing the total salt by the product of the number of friends and the salt required per toast per friend.\n7. **Result**: The result is the minimum value of the three calculated values, ensuring that all resources are sufficient for the same number of toasts.",
    "ground_truth": "N/A",
    "extracted_answer": "n, k, l, c, d, p, nl, np = map(int, input().split())\ntotal_drink = k * l\ndrink_toasts = total_drink // (n * nl)\nlime_toasts = (c * d) // n\nsalt_toasts = p // (n * np)\nprint(min(drink_toasts, lime_toasts, salt_toasts))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 538,
        "completion_token_count": 616,
        "thoughts_token_count": 8191
    }
}