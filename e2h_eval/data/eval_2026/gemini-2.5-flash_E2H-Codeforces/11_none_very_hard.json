{
    "start": 1758011285.1841888,
    "end": 1758011293.6795301,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    line = input().split()\n    n, k, l, c, d, p, nl, np = map(int, line)\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = p // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these three\n    # However, the problem states \"provided they all drink the same amount\",\n    # and \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt\".\n    # This implies that the total resources are divided among 'n' friends, and each friend\n    # contributes to the total consumption.\n    # So, we calculate the total number of toasts possible for the *entire group* based on each resource,\n    # and then divide that by 'n' to find out how many toasts *each friend* can make if they all make the same amount.\n\n    # Re-evaluating the problem statement and example:\n    # \"Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n    # This \"6 toasts\" is the total number of toasts the *group* can make if each toast requires 3ml of drink.\n    # \"The limes are enough for 10 * 8 = 80 toasts\" (if each toast requires 1 slice).\n    # \"and the salt is enough for 100 / 1 = 100 toasts\" (if each toast requires 1g of salt).\n    # \"However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n\n    # This interpretation means we first find the maximum total number of *individual* toasts that can be made\n    # across all friends for each resource, and then the limiting factor is the minimum of these.\n    # Finally, this minimum total number of toasts is divided by the number of friends 'n' to find\n    # how many toasts *each* friend can make.\n\n    # Total toasts possible from drink for the entire group (if each toast uses nl ml)\n    total_possible_toasts_drink = (k * l) // nl\n\n    # Total toasts possible from lime for the entire group (if each toast uses 1 slice)\n    total_possible_toasts_lime = (c * d) // 1 # or simply c * d\n\n    # Total toasts possible from salt for the entire group (if each toast uses np grams)\n    total_possible_toasts_salt = p // np\n\n    # The limiting factor for the total number of individual toasts that can be made by the group\n    min_total_toasts_for_group = min(total_possible_toasts_drink, total_possible_toasts_lime, total_possible_toasts_salt)\n\n    # Since there are 'n' friends and they all make the same amount of toasts,\n    # divide the minimum total toasts by 'n' to get toasts per friend.\n    toasts_per_friend = min_total_toasts_for_group // n\n\n    print(toasts_per_friend)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    line = input().split()\n    n, k, l, c, d, p, nl, np = map(int, line)\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = p // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these three\n    # However, the problem states \"provided they all drink the same amount\",\n    # and \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt\".\n    # This implies that the total resources are divided among 'n' friends, and each friend\n    # contributes to the total consumption.\n    # So, we calculate the total number of toasts possible for the *entire group* based on each resource,\n    # and then divide that by 'n' to find out how many toasts *each friend* can make if they all make the same amount.\n\n    # Re-evaluating the problem statement and example:\n    # \"Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n    # This \"6 toasts\" is the total number of toasts the *group* can make if each toast requires 3ml of drink.\n    # \"The limes are enough for 10 * 8 = 80 toasts\" (if each toast requires 1 slice).\n    # \"and the salt is enough for 100 / 1 = 100 toasts\" (if each toast requires 1g of salt).\n    # \"However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n\n    # This interpretation means we first find the maximum total number of *individual* toasts that can be made\n    # across all friends for each resource, and then the limiting factor is the minimum of these.\n    # Finally, this minimum total number of toasts is divided by the number of friends 'n' to find\n    # how many toasts *each* friend can make.\n\n    # Total toasts possible from drink for the entire group (if each toast uses nl ml)\n    total_possible_toasts_drink = (k * l) // nl\n\n    # Total toasts possible from lime for the entire group (if each toast uses 1 slice)\n    total_possible_toasts_lime = (c * d) // 1 # or simply c * d\n\n    # Total toasts possible from salt for the entire group (if each toast uses np grams)\n    total_possible_toasts_salt = p // np\n\n    # The limiting factor for the total number of individual toasts that can be made by the group\n    min_total_toasts_for_group = min(total_possible_toasts_drink, total_possible_toasts_lime, total_possible_toasts_salt)\n\n    # Since there are 'n' friends and they all make the same amount of toasts,\n    # divide the minimum total toasts by 'n' to get toasts per friend.\n    toasts_per_friend = min_total_toasts_for_group // n\n\n    print(toasts_per_friend)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 548,
        "completion_token_count": 832,
        "thoughts_token_count": 0
    }
}