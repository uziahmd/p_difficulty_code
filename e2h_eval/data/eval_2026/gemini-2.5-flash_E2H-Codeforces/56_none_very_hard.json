{
    "start": 1758293695.6055837,
    "end": 1758293704.1801505,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    lines = sys.stdin.readlines()\n    \n    line_idx = 0\n    R, B = map(int, lines[line_idx].split())\n    line_idx += 1\n\n    rebels = []\n    for _ in range(R):\n        x, y = map(int, lines[line_idx].split())\n        rebels.append((x, y))\n        line_idx += 1\n\n    bases = []\n    for _ in range(B):\n        x, y = map(int, lines[line_idx].split())\n        bases.append((x, y))\n        line_idx += 1\n\n    if R != B:\n        print(\"No\")\n        return\n\n    N = R\n\n    # Function to check if two line segments (p1, q1) and (p2, q2) intersect\n    # A point (x, y) is on segment (p, q) if (x, y) is collinear with p and q\n    # AND x is between min(px, qx) and max(px, qx)\n    # AND y is between min(py, qy) and max(py, qy)\n    def on_segment(p, q, r):\n        if (r[0] <= max(p[0], q[0]) and r[0] >= min(p[0], q[0]) and\n                r[1] <= max(p[1], q[1]) and r[1] >= min(p[1], q[1])):\n            return True\n        return False\n\n    # To find orientation of ordered triplet (p, q, r).\n    # The function returns following values:\n    # 0 --> p, q and r are collinear\n    # 1 --> Clockwise\n    # 2 --> Counterclockwise\n    def orientation(p, q, r):\n        val = (q[1] - p[1]) * (r[0] - q[0]) - \\\n              (q[0] - p[0]) * (r[1] - q[1])\n        if val == 0:\n            return 0  # Collinear\n        return 1 if val > 0 else 2  # Clockwise or Counterclockwise\n\n    # The main function that returns true if line segment 'p1q1'\n    # and 'p2q2' intersect.\n    def do_intersect(p1, q1, p2, q2):\n        o1 = orientation(p1, q1, p2)\n        o2 = orientation(p1, q1, q2)\n        o3 = orientation(p2, q2, p1)\n        o4 = orientation(p2, q2, q1)\n\n        # General case\n        if o1 != 0 and o2 != 0 and o3 != 0 and o4 != 0 and \\\n           o1 != o2 and o3 != o4:\n            return True\n\n        # Special Cases\n        # p1, q1 and p2 are collinear and p2 lies on segment p1q1\n        if o1 == 0 and on_segment(p1, q1, p2):\n            return True\n\n        # p1, q1 and q2 are collinear and q2 lies on segment p1q1\n        if o2 == 0 and on_segment(p1, q1, q2):\n            return True\n\n        # p2, q2 and p1 are collinear and p1 lies on segment p2q2\n        if o3 == 0 and on_segment(p2, q2, p1):\n            return True\n\n        # p2, q2 and q1 are collinear and q1 lies on segment p2q2\n        if o4 == 0 and on_segment(p2, q2, q1):\n            return True\n\n        return False\n\n    # Check if a given permutation of bases forms a non-intersecting matching\n    def check_matching(perm):\n        for i in range(N):\n            for j in range(i + 1, N):\n                # Check intersection between (rebel[i], base[perm[i]])\n                # and (rebel[j], base[perm[j]])\n                if do_intersect(rebels[i], bases[perm[i]], rebels[j], bases[perm[j]]):\n                    return False\n        return True\n\n    # Use a recursive backtracking approach to try all permutations\n    \n    # rebel_used[i] = True if rebel i is used\n    # base_used[j] = True if base j is used\n    # current_matching: list of (rebel_idx, base_idx) pairs\n    \n    # This is not exactly a permutation of bases. It's a permutation of (rebel, base) pairs.\n    # We are looking for a perfect matching.\n    # The problem asks for a perfect matching such that no two paths intersect.\n    # This implies we need to find a permutation `p` of `[0, ..., N-1]`\n    # such that `(rebel[i], bases[p[i]])` are the segments, and they don't intersect.\n    \n    # Generate all permutations of base indices\n    import itertools\n    \n    base_indices = list(range(N))\n    for perm in itertools.permutations(base_indices):\n        if check_matching(list(perm)):\n            print(\"Yes\")\n            return\n\n    print(\"No\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    lines = sys.stdin.readlines()\n    \n    line_idx = 0\n    R, B = map(int, lines[line_idx].split())\n    line_idx += 1\n\n    rebels = []\n    for _ in range(R):\n        x, y = map(int, lines[line_idx].split())\n        rebels.append((x, y))\n        line_idx += 1\n\n    bases = []\n    for _ in range(B):\n        x, y = map(int, lines[line_idx].split())\n        bases.append((x, y))\n        line_idx += 1\n\n    if R != B:\n        print(\"No\")\n        return\n\n    N = R\n\n    # Function to check if two line segments (p1, q1) and (p2, q2) intersect\n    # A point (x, y) is on segment (p, q) if (x, y) is collinear with p and q\n    # AND x is between min(px, qx) and max(px, qx)\n    # AND y is between min(py, qy) and max(py, qy)\n    def on_segment(p, q, r):\n        if (r[0] <= max(p[0], q[0]) and r[0] >= min(p[0], q[0]) and\n                r[1] <= max(p[1], q[1]) and r[1] >= min(p[1], q[1])):\n            return True\n        return False\n\n    # To find orientation of ordered triplet (p, q, r).\n    # The function returns following values:\n    # 0 --> p, q and r are collinear\n    # 1 --> Clockwise\n    # 2 --> Counterclockwise\n    def orientation(p, q, r):\n        val = (q[1] - p[1]) * (r[0] - q[0]) - \\\n              (q[0] - p[0]) * (r[1] - q[1])\n        if val == 0:\n            return 0  # Collinear\n        return 1 if val > 0 else 2  # Clockwise or Counterclockwise\n\n    # The main function that returns true if line segment 'p1q1'\n    # and 'p2q2' intersect.\n    def do_intersect(p1, q1, p2, q2):\n        o1 = orientation(p1, q1, p2)\n        o2 = orientation(p1, q1, q2)\n        o3 = orientation(p2, q2, p1)\n        o4 = orientation(p2, q2, q1)\n\n        # General case\n        if o1 != 0 and o2 != 0 and o3 != 0 and o4 != 0 and \\\n           o1 != o2 and o3 != o4:\n            return True\n\n        # Special Cases\n        # p1, q1 and p2 are collinear and p2 lies on segment p1q1\n        if o1 == 0 and on_segment(p1, q1, p2):\n            return True\n\n        # p1, q1 and q2 are collinear and q2 lies on segment p1q1\n        if o2 == 0 and on_segment(p1, q1, q2):\n            return True\n\n        # p2, q2 and p1 are collinear and p1 lies on segment p2q2\n        if o3 == 0 and on_segment(p2, q2, p1):\n            return True\n\n        # p2, q2 and q1 are collinear and q1 lies on segment p2q2\n        if o4 == 0 and on_segment(p2, q2, q1):\n            return True\n\n        return False\n\n    # Check if a given permutation of bases forms a non-intersecting matching\n    def check_matching(perm):\n        for i in range(N):\n            for j in range(i + 1, N):\n                # Check intersection between (rebel[i], base[perm[i]])\n                # and (rebel[j], base[perm[j]])\n                if do_intersect(rebels[i], bases[perm[i]], rebels[j], bases[perm[j]]):\n                    return False\n        return True\n\n    # Use a recursive backtracking approach to try all permutations\n    \n    # rebel_used[i] = True if rebel i is used\n    # base_used[j] = True if base j is used\n    # current_matching: list of (rebel_idx, base_idx) pairs\n    \n    # This is not exactly a permutation of bases. It's a permutation of (rebel, base) pairs.\n    # We are looking for a perfect matching.\n    # The problem asks for a perfect matching such that no two paths intersect.\n    # This implies we need to find a permutation `p` of `[0, ..., N-1]`\n    # such that `(rebel[i], bases[p[i]])` are the segments, and they don't intersect.\n    \n    # Generate all permutations of base indices\n    import itertools\n    \n    base_indices = list(range(N))\n    for perm in itertools.permutations(base_indices):\n        if check_matching(list(perm)):\n            print(\"Yes\")\n            return\n\n    print(\"No\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 512,
        "completion_token_count": 1259,
        "thoughts_token_count": 0
    }
}