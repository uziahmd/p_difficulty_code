{
    "start": 1758293696.1475067,
    "end": 1758293703.642043,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef cross_product(o, a, b):\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\ndef segments_intersect(p1, q1, p2, q2):\n    o1 = cross_product(p1, q1, p2)\n    o2 = cross_product(p1, q1, q2)\n    o3 = cross_product(p2, q2, p1)\n    o4 = cross_product(p2, q2, q1)\n\n    if o1 > 0 and o2 < 0 and o3 > 0 and o4 < 0:\n        return True\n    if o1 < 0 and o2 > 0 and o3 < 0 and o4 > 0:\n        return True\n    \n    return False\n\ndef solve():\n    lines = sys.stdin.readlines()\n    line_idx = 0\n\n    while line_idx < len(lines):\n        R, B = map(int, lines[line_idx].split())\n        line_idx += 1\n\n        if R == 0 and B == 0:\n            break\n\n        rebels = []\n        for _ in range(R):\n            rebels.append(list(map(int, lines[line_idx].split())))\n            line_idx += 1\n\n        bases = []\n        for _ in range(B):\n            bases.append(list(map(int, lines[line_idx].split())))\n            line_idx += 1\n\n        if R != B:\n            sys.stdout.write(\"No\\n\")\n            continue\n\n        n = R\n        \n        # Sort points by angle around a central point to simplify non-intersecting matching\n        # For non-intersecting perfect matching, points must be \"interleaved\"\n        # when sorted by angle around a common interior point (if such a point exists).\n        # A simpler approach is to sort all 2N points by angle around their centroid.\n        # Then, if a non-intersecting perfect matching exists, it must connect\n        # adjacent points in this sorted order, or more generally,\n        # it must connect points such that the \"polygon\" formed by the segments\n        # is non-self-intersecting.\n        # This problem is a classic application of planar graph properties.\n        # For a perfect non-intersecting matching, if we sort all 2N points\n        # by angle around a point that is guaranteed to be inside the convex hull\n        # of all points (e.g., the centroid), then the matching must connect\n        # points that are \"interleaved\" in this sorted order.\n        # More specifically, if we sort all points (R and B) by angle around\n        # their centroid, a non-intersecting matching exists if and only if\n        # the points of one set (say, Rebels) appear interleaved with points\n        # of the other set (Bases) in the sorted list.\n        # That is, the sequence of types (R, B, R, B, ...) must alternate.\n\n        all_points = []\n        for i, p in enumerate(rebels):\n            all_points.append((p[0], p[1], 'R', i))\n        for i, p in enumerate(bases):\n            all_points.append((p[0], p[1], 'B', i))\n\n        # Calculate centroid of all points\n        cx = sum(p[0] for p in all_points) / (2 * n)\n        cy = sum(p[1] for p in all_points) / (2 * n)\n\n        # Sort points by angle around the centroid\n        all_points.sort(key=lambda p: (\n            p[0] - cx,  # Primary sort by x-coordinate relative to centroid\n            p[1] - cy   # Secondary sort by y-coordinate relative to centroid\n        ))\n\n        # This sorting strategy doesn't guarantee a specific angular order\n        # for points on the same ray from the centroid. A more robust angular sort:\n        import math\n        all_points.sort(key=lambda p: math.atan2(p[1] - cy, p[0] - cx))\n\n        # Check if types alternate\n        possible = True\n        for i in range(2 * n):\n            if all_points[i][2] == all_points[(i + 1) % (2 * n)][2]:\n                possible = False\n                break\n        \n        sys.stdout.write(\"Yes\\n\" if possible else \"No\\n\")\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef cross_product(o, a, b):\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\ndef segments_intersect(p1, q1, p2, q2):\n    o1 = cross_product(p1, q1, p2)\n    o2 = cross_product(p1, q1, q2)\n    o3 = cross_product(p2, q2, p1)\n    o4 = cross_product(p2, q2, q1)\n\n    if o1 > 0 and o2 < 0 and o3 > 0 and o4 < 0:\n        return True\n    if o1 < 0 and o2 > 0 and o3 < 0 and o4 > 0:\n        return True\n    \n    return False\n\ndef solve():\n    lines = sys.stdin.readlines()\n    line_idx = 0\n\n    while line_idx < len(lines):\n        R, B = map(int, lines[line_idx].split())\n        line_idx += 1\n\n        if R == 0 and B == 0:\n            break\n\n        rebels = []\n        for _ in range(R):\n            rebels.append(list(map(int, lines[line_idx].split())))\n            line_idx += 1\n\n        bases = []\n        for _ in range(B):\n            bases.append(list(map(int, lines[line_idx].split())))\n            line_idx += 1\n\n        if R != B:\n            sys.stdout.write(\"No\\n\")\n            continue\n\n        n = R\n        \n        # Sort points by angle around a central point to simplify non-intersecting matching\n        # For non-intersecting perfect matching, points must be \"interleaved\"\n        # when sorted by angle around a common interior point (if such a point exists).\n        # A simpler approach is to sort all 2N points by angle around their centroid.\n        # Then, if a non-intersecting perfect matching exists, it must connect\n        # adjacent points in this sorted order, or more generally,\n        # it must connect points such that the \"polygon\" formed by the segments\n        # is non-self-intersecting.\n        # This problem is a classic application of planar graph properties.\n        # For a perfect non-intersecting matching, if we sort all 2N points\n        # by angle around a point that is guaranteed to be inside the convex hull\n        # of all points (e.g., the centroid), then the matching must connect\n        # points that are \"interleaved\" in this sorted order.\n        # More specifically, if we sort all points (R and B) by angle around\n        # their centroid, a non-intersecting matching exists if and only if\n        # the points of one set (say, Rebels) appear interleaved with points\n        # of the other set (Bases) in the sorted list.\n        # That is, the sequence of types (R, B, R, B, ...) must alternate.\n\n        all_points = []\n        for i, p in enumerate(rebels):\n            all_points.append((p[0], p[1], 'R', i))\n        for i, p in enumerate(bases):\n            all_points.append((p[0], p[1], 'B', i))\n\n        # Calculate centroid of all points\n        cx = sum(p[0] for p in all_points) / (2 * n)\n        cy = sum(p[1] for p in all_points) / (2 * n)\n\n        # Sort points by angle around the centroid\n        all_points.sort(key=lambda p: (\n            p[0] - cx,  # Primary sort by x-coordinate relative to centroid\n            p[1] - cy   # Secondary sort by y-coordinate relative to centroid\n        ))\n\n        # This sorting strategy doesn't guarantee a specific angular order\n        # for points on the same ray from the centroid. A more robust angular sort:\n        import math\n        all_points.sort(key=lambda p: math.atan2(p[1] - cy, p[0] - cx))\n\n        # Check if types alternate\n        possible = True\n        for i in range(2 * n):\n            if all_points[i][2] == all_points[(i + 1) % (2 * n)][2]:\n                possible = False\n                break\n        \n        sys.stdout.write(\"Yes\\n\" if possible else \"No\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 502,
        "completion_token_count": 1071,
        "thoughts_token_count": 0
    }
}