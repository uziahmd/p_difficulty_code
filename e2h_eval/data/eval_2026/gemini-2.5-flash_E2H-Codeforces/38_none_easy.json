{
    "start": 1758293706.593332,
    "end": 1758293721.1074102,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    p = int(input())\n\n    if p == 0:\n        print(\"0 0\")\n        return\n\n    # Calculate min_nodes\n    # p-reachable means p pairs (u, v) with u < v are mutually reachable.\n    # This implies these u and v are in the same SCC.\n    # The number of pairs (u, v) with u < v in an SCC of size k is k * (k - 1) / 2.\n    # We want to find the smallest k such that k * (k - 1) / 2 >= p.\n    # Or, more generally, we want to find k1, k2, ..., km such that\n    # sum(ki * (ki - 1) / 2 for ki in k_list) = p and sum(ki) is minimized.\n    # To minimize sum(ki) for a fixed sum of ki*(ki-1)/2, we should make ki as large as possible.\n    # So we find the smallest k such that k * (k - 1) / 2 >= p.\n    \n    min_nodes_scc = 0\n    while min_nodes_scc * (min_nodes_scc - 1) // 2 < p:\n        min_nodes_scc += 1\n    \n    # The remaining nodes can be added as isolated nodes or part of a path.\n    # To maximize unidirectional pairs, we want to put the remaining nodes in a path\n    # and connect them to the SCC.\n    \n    # The minimum number of nodes will be min_nodes_scc.\n    # We can form a single SCC of size min_nodes_scc.\n    # This gives min_nodes_scc * (min_nodes_scc - 1) / 2 mutually reachable pairs.\n    # If this is exactly p, then we have min_nodes_scc nodes.\n    # If this is greater than p, we need to adjust.\n    # The problem states \"exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\"\n    # This means we need to find k_1, k_2, ..., k_m such that sum(k_i * (k_i - 1) / 2) = p.\n    # To minimize total nodes sum(k_i), we should use as few SCCs as possible, and make them as large as possible.\n    # So, we try to find the largest k such that k * (k - 1) // 2 <= p.\n    # Let this be k_max.\n    # Then p_remaining = p - k_max * (k_max - 1) // 2.\n    # We then find the largest k' such that k' * (k' - 1) // 2 <= p_remaining, and so on.\n    # This greedy approach works because f(k) = k*(k-1)/2 is convex, and we want to minimize sum(k_i) for a fixed sum(f(k_i)).\n    # It's better to have one large SCC than many small ones for the same number of pairs.\n    # For example, 3 nodes give 3 pairs. 2+2 nodes give 1+1=2 pairs.\n    \n    \n    current_p = p\n    nodes_in_sccs = 0\n    \n    scc_sizes = []\n    \n    while current_p > 0:\n        k = 0\n        while k * (k + 1) // 2 <= current_p: # (k+1)*k/2 is for k nodes, number of pairs u<v\n            k += 1\n        k -= 1 # k is now the largest integer such that k*(k-1)/2 pairs can be formed by k nodes\n               # (k-1) is the actual number of nodes in the SCC. Let's use k for number of nodes.\n               # k nodes give k*(k-1)/2 pairs.\n        \n        num_nodes_for_k_pairs = 0\n        while num_nodes_for_k_pairs * (num_nodes_for_k_pairs - 1) // 2 <= current_p:\n            num_nodes_for_k_pairs += 1\n        num_nodes_for_k_pairs -= 1 # This is the largest k such that k*(k-1)/2 <= current_p\n        \n        scc_sizes.append(num_nodes_for_k_pairs)\n        nodes_in_sccs += num_nodes_for_k_pairs\n        current_p -= num_nodes_for_k_pairs * (num_nodes_for_k_pairs - 1) // 2\n    \n    min_nodes = nodes_in_sccs\n\n    # Calculate max_unidirectional\n    # To maximize unidirectional pairs, we connect all SCCs into a single path.\n    # And then add any remaining nodes as a path connected to this structure.\n    \n    # Consider m SCCs with sizes s1, s2, ..., sm.\n    # Total nodes = S = sum(si).\n    # If we arrange them in a path: SCC1 -> SCC2 -> ... -> SCCm.\n    # A node u in SCC_i and a node v in SCC_j:\n    # If i < j, then u -> v (unidirectional).\n    # If i > j, then no path u -> v.\n    # The number of unidirectional pairs (u, v) where u is in SCC_i and v is in SCC_j (i < j)\n    # is sum_{i=1}^{m-1} sum_{j=i+1}^m (s_i * s_j).\n    # This is equivalent to (sum s_i)^2 - sum(s_i^2) / 2. No, it's not.\n    # It's (sum s_i)^2 - sum(s_i^2) / 2 is for undirected pairs.\n    # It's sum_{i<j} s_i * s_j.\n    # This sum is maximized when the sizes are as balanced as possible, or when there are fewer SCCs.\n    # In our case, scc_sizes are determined by p.\n    \n    # We have min_nodes nodes in total.\n    # All these nodes are part of some SCC.\n    # The maximum number of unidirectional pairs is achieved by arranging these SCCs in a line.\n    # Let the sizes of the SCCs be s_1, s_2, ..., s_m.\n    # The number of unidirectional pairs is sum_{1 <= i < j <= m} (s_i * s_j).\n    # This is ( (sum s_i)^2 - sum(s_i^2) ) / 2.\n    \n    total_nodes_sum = sum(scc_sizes)\n    sum_of_squares = sum(s * s for s in scc_sizes)\n    \n    max_unidirectional = (total_nodes_sum * total_nodes_sum - sum_of_squares) // 2\n\n    print(min_nodes, max_unidirectional)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    p = int(input())\n\n    if p == 0:\n        print(\"0 0\")\n        return\n\n    # Calculate min_nodes\n    # p-reachable means p pairs (u, v) with u < v are mutually reachable.\n    # This implies these u and v are in the same SCC.\n    # The number of pairs (u, v) with u < v in an SCC of size k is k * (k - 1) / 2.\n    # We want to find the smallest k such that k * (k - 1) / 2 >= p.\n    # Or, more generally, we want to find k1, k2, ..., km such that\n    # sum(ki * (ki - 1) / 2 for ki in k_list) = p and sum(ki) is minimized.\n    # To minimize sum(ki) for a fixed sum of ki*(ki-1)/2, we should make ki as large as possible.\n    # So we find the smallest k such that k * (k - 1) / 2 >= p.\n    \n    min_nodes_scc = 0\n    while min_nodes_scc * (min_nodes_scc - 1) // 2 < p:\n        min_nodes_scc += 1\n    \n    # The remaining nodes can be added as isolated nodes or part of a path.\n    # To maximize unidirectional pairs, we want to put the remaining nodes in a path\n    # and connect them to the SCC.\n    \n    # The minimum number of nodes will be min_nodes_scc.\n    # We can form a single SCC of size min_nodes_scc.\n    # This gives min_nodes_scc * (min_nodes_scc - 1) / 2 mutually reachable pairs.\n    # If this is exactly p, then we have min_nodes_scc nodes.\n    # If this is greater than p, we need to adjust.\n    # The problem states \"exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\"\n    # This means we need to find k_1, k_2, ..., k_m such that sum(k_i * (k_i - 1) / 2) = p.\n    # To minimize total nodes sum(k_i), we should use as few SCCs as possible, and make them as large as possible.\n    # So, we try to find the largest k such that k * (k - 1) // 2 <= p.\n    # Let this be k_max.\n    # Then p_remaining = p - k_max * (k_max - 1) // 2.\n    # We then find the largest k' such that k' * (k' - 1) // 2 <= p_remaining, and so on.\n    # This greedy approach works because f(k) = k*(k-1)/2 is convex, and we want to minimize sum(k_i) for a fixed sum(f(k_i)).\n    # It's better to have one large SCC than many small ones for the same number of pairs.\n    # For example, 3 nodes give 3 pairs. 2+2 nodes give 1+1=2 pairs.\n    \n    \n    current_p = p\n    nodes_in_sccs = 0\n    \n    scc_sizes = []\n    \n    while current_p > 0:\n        k = 0\n        while k * (k + 1) // 2 <= current_p: # (k+1)*k/2 is for k nodes, number of pairs u<v\n            k += 1\n        k -= 1 # k is now the largest integer such that k*(k-1)/2 pairs can be formed by k nodes\n               # (k-1) is the actual number of nodes in the SCC. Let's use k for number of nodes.\n               # k nodes give k*(k-1)/2 pairs.\n        \n        num_nodes_for_k_pairs = 0\n        while num_nodes_for_k_pairs * (num_nodes_for_k_pairs - 1) // 2 <= current_p:\n            num_nodes_for_k_pairs += 1\n        num_nodes_for_k_pairs -= 1 # This is the largest k such that k*(k-1)/2 <= current_p\n        \n        scc_sizes.append(num_nodes_for_k_pairs)\n        nodes_in_sccs += num_nodes_for_k_pairs\n        current_p -= num_nodes_for_k_pairs * (num_nodes_for_k_pairs - 1) // 2\n    \n    min_nodes = nodes_in_sccs\n\n    # Calculate max_unidirectional\n    # To maximize unidirectional pairs, we connect all SCCs into a single path.\n    # And then add any remaining nodes as a path connected to this structure.\n    \n    # Consider m SCCs with sizes s1, s2, ..., sm.\n    # Total nodes = S = sum(si).\n    # If we arrange them in a path: SCC1 -> SCC2 -> ... -> SCCm.\n    # A node u in SCC_i and a node v in SCC_j:\n    # If i < j, then u -> v (unidirectional).\n    # If i > j, then no path u -> v.\n    # The number of unidirectional pairs (u, v) where u is in SCC_i and v is in SCC_j (i < j)\n    # is sum_{i=1}^{m-1} sum_{j=i+1}^m (s_i * s_j).\n    # This is equivalent to (sum s_i)^2 - sum(s_i^2) / 2. No, it's not.\n    # It's (sum s_i)^2 - sum(s_i^2) / 2 is for undirected pairs.\n    # It's sum_{i<j} s_i * s_j.\n    # This sum is maximized when the sizes are as balanced as possible, or when there are fewer SCCs.\n    # In our case, scc_sizes are determined by p.\n    \n    # We have min_nodes nodes in total.\n    # All these nodes are part of some SCC.\n    # The maximum number of unidirectional pairs is achieved by arranging these SCCs in a line.\n    # Let the sizes of the SCCs be s_1, s_2, ..., s_m.\n    # The number of unidirectional pairs is sum_{1 <= i < j <= m} (s_i * s_j).\n    # This is ( (sum s_i)^2 - sum(s_i^2) ) / 2.\n    \n    total_nodes_sum = sum(scc_sizes)\n    sum_of_squares = sum(s * s for s in scc_sizes)\n    \n    max_unidirectional = (total_nodes_sum * total_nodes_sum - sum_of_squares) // 2\n\n    print(min_nodes, max_unidirectional)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 482,
        "completion_token_count": 1650,
        "thoughts_token_count": 0
    }
}