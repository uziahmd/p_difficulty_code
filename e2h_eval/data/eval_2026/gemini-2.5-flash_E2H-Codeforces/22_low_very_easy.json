{
    "start": 1758284843.9708955,
    "end": 1758284855.5486746,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**My Plan for Tackling This Competitive Programming Problem**\n\nOkay, so I've got this problem, and it's pretty straightforward.  It involves analyzing student grades across different subjects.  Let me break down my approach. First, I need a Python script to do this.\n\n**The Problem's Core:** I need to determine how many students are \"successful\" based on their performance. A student is \"successful\" if they are the \"best\" in at least one subject. \"Best\" means having the highest mark for that specific subject. The inputs are the number of students (`n`), the number of subjects (`m`), and a gradebook represented by a matrix of marks (1-9).\n\n**Breaking it Down:**  Let's walk through an example to solidify the logic. In this example, I would need to:\n1.  **Read the Input:** Get `n`, `m`, and the gradebook.\n2.  **Find the Max Per Subject:** For each subject, I'll need to find the highest mark achieved.\n3.  **Identify the \"Best\" Students:** Then, I compare each student's mark in a subject against the maximum for that subject.\n4.  **Determine Successful Students:** A student is successful if they're the best in at least one subject.\n5.  **Count Them:** Finally, I'll count the number of successful students.\n\n**Algorithm Design:**  Here's the plan for my Python script:\n1.  **Input:**  I'll read `n` and `m` first. Then I'll read the gradebook, which I'll represent as a list of lists of integers ( `grades`).  The structure `grades[i][j]` will store the grade of student `i` in subject `j`.\n2.  **Success Tracking:** I'll use a set or a boolean array (`is_successful`) to keep track of successful students. Initializing them to empty set or all False.\n3.  **Subject Iteration:** I will loop through each subject (from 0 to `m-1`).\n    *   **Max Finding:** Inside the subject loop, I'll iterate through all the students to find the maximum grade for that particular subject.\n    *   **Success Marking:** I'll iterate again through the students, checking if their grade in the current subject matches the maximum. If it does, I'll mark them as \"successful\".\n4.  **Counting:** Finally, the answer will be the length of the set or the count of True in `is_successful`.\n\n**Data Structure Choice:** The list of lists is definitely the most natural and efficient way to store the gradebook information. That will give me easy access to each student's marks in any given subject.  I am thinking this should be pretty quick to code and execute. Let's get to it.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    grades = []\n    for _ in range(n):\n        grades.append(sys.stdin.readline().strip())\n\n    # To keep track of successful students.\n    # We can use a set to store unique student indices,\n    # or a boolean array. A boolean array is simpler here.\n    is_successful = [False] * n\n\n    # Iterate through each subject\n    for j in range(m):\n        max_mark_for_subject = 0\n        # Find the maximum mark for the current subject\n        for i in range(n):\n            mark = int(grades[i][j])\n            if mark > max_mark_for_subject:\n                max_mark_for_subject = mark\n        \n        # Identify students who got the maximum mark for this subject\n        for i in range(n):\n            mark = int(grades[i][j])\n            if mark == max_mark_for_subject:\n                is_successful[i] = True\n    \n    # Count the number of successful students\n    successful_count = 0\n    for status in is_successful:\n        if status:\n            successful_count += 1\n            \n    print(successful_count)\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    grades = []\n    for _ in range(n):\n        grades.append(sys.stdin.readline().strip())\n\n    # To keep track of successful students.\n    # We can use a set to store unique student indices,\n    # or a boolean array. A boolean array is simpler here.\n    is_successful = [False] * n\n\n    # Iterate through each subject\n    for j in range(m):\n        max_mark_for_subject = 0\n        # Find the maximum mark for the current subject\n        for i in range(n):\n            mark = int(grades[i][j])\n            if mark > max_mark_for_subject:\n                max_mark_for_subject = mark\n        \n        # Identify students who got the maximum mark for this subject\n        for i in range(n):\n            mark = int(grades[i][j])\n            if mark == max_mark_for_subject:\n                is_successful[i] = True\n    \n    # Count the number of successful students\n    successful_count = 0\n    for status in is_successful:\n        if status:\n            successful_count += 1\n            \n    print(successful_count)\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 468,
        "completion_token_count": 334,
        "thoughts_token_count": 934
    }
}