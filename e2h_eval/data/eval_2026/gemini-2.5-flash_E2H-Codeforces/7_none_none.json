{
    "start": 1758011294.7827046,
    "end": 1758011334.8173966,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    if n < 7:\n        sys.stdout.write(\"NO\\n\")\n        return\n\n    # Case 1: m = 2 (2 levels of expansion)\n    # Total vertices = 1 + k + k*k = 1 + k + k^2\n    # We need to find if n = 1 + k + k^2 for some k > 1.\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s^2.\n    # s = sqrt(4n - 3)\n    # Then k = (-1 + s) / 2\n    # We need s to be an integer, s > 0, and (-1 + s) / 2 > 1.\n    # This means -1 + s > 2, so s > 3.\n    # Also, s must be odd for (-1 + s) to be even.\n    \n    discriminant = 4 * n - 3\n    s_approx = int(discriminant**0.5)\n    \n    for s in range(max(1, s_approx - 2), s_approx + 3):\n        if s * s == discriminant:\n            if s > 3 and (s - 1) % 2 == 0:\n                k = (s - 1) // 2\n                if k > 1:\n                    sys.stdout.write(\"YES\\n\")\n                    return\n\n    # Case 2: m >= 3 (3 or more levels of expansion)\n    # Total vertices = 1 + k + k^2 + ... + k^(m-1) = (k^m - 1) / (k - 1)\n    # We are looking for n = (k^m - 1) / (k - 1) for some k > 1 and m >= 3.\n    # This is equivalent to n * (k - 1) = k^m - 1.\n    # Since k >= 2, m >= 3:\n    # Smallest n for m=3, k=2 is (2^3 - 1) / (2 - 1) = 7.\n    # Smallest n for m=3, k=3 is (3^3 - 1) / (3 - 1) = 26 / 2 = 13.\n    # Smallest n for m=4, k=2 is (2^4 - 1) / (2 - 1) = 15.\n    \n    # Iterate over possible values of m.\n    # The maximum value of m is relatively small because k >= 2.\n    # If k = 2, n = 2^m - 1. So 2^m = n + 1. m = log2(n + 1).\n    # If n = 10^18, m approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So m goes up to about 60.\n    \n    # If k = 3, n = (3^m - 1) / 2. 3^m = 2n + 1. m = log3(2n + 1).\n    # If n = 10^18, m approx log3(2 * 10^18) = log3(2) + 18 * log3(10) approx 0.63 + 18 * 2.09 = 0.63 + 37.62 = 38.25.\n    # So m goes up to about 40 for k=3.\n    \n    # If k = 10^9, m = 3. n = 1 + k + k^2 approx k^2 = (10^9)^2 = 10^18.\n    # So m can be small (e.g., 3) for large k.\n    \n    # The maximum value of m is about 60.\n    for m in range(3, 61):\n        # We need to find k such that n = (k^m - 1) / (k - 1)\n        # n * (k - 1) = k^m - 1\n        # This is equivalent to finding integer root k > 1 for the polynomial:\n        # P(k) = k^m - n*k + (n - 1) = 0\n        \n        # We can use binary search for k.\n        # k must be at least 2.\n        # Upper bound for k:\n        # If m=3, n = 1 + k + k^2. So k^2 < n. k < sqrt(n).\n        # If n = 10^18, k < 10^9.\n        # A safe upper bound for k is n^(1/(m-1)).\n        # k^m - 1 approx k^m. n approx k^m / (k-1).\n        # If k is large, n approx k^(m-1). So k approx n^(1/(m-1)).\n        # For m=3, k approx n^(1/2). For m=60, k approx n^(1/59).\n        # n^(1/59) for n=10^18 is (10^18)^(1/59) = 10^(18/59) approx 10^0.3 = 2.\n        # So k can be large for small m, and small for large m.\n        \n        # Binary search range for k: [2, n^(1/2) + 2]\n        # A more practical upper bound: if k^m - 1 > n*(k-1), then k is too large.\n        # k^m - 1 > n*k - n\n        # k^m - n*k + n - 1 > 0\n        # For k=2, 2^m - 2n + n - 1 = 2^m - n - 1. If this is positive, k=2 is too large.\n        # If k=2, n = 2^m - 1.\n        # If n > 2^m - 1, then k must be > 2.\n        # If n < 2^m - 1, then k must be < 2 (not possible as k >= 2).\n        # So for a given m, if n < 2^m - 1, no solution for that m.\n        \n        # Lower bound for k is 2.\n        # Upper bound for k: n = (k^m - 1)/(k-1) > k^(m-1). So k < n^(1/(m-1)).\n        # A safe upper bound is min(2 * 10**9, int(n**(1.0/(m-1))) + 3).\n        # 10**18 is the max n. For m=3, k approx sqrt(10^18) = 10^9.\n        # For m=4, k approx (10^18)^(1/3) = 10^6.\n        # For m=5, k approx (10^18)^(1/4) = 10^4.5 approx 31622.\n        # Max k is 10^9.\n        \n        low = 2\n        high = min(2 * 10**9, int(n**(1.0/(m-1))) + 3) # Upper bound for k\n        \n        # Check high value specifically to avoid overflow in high * high * ...\n        # (k^m - 1) / (k - 1) = n\n        # This is equivalent to k^m - 1 = n * (k - 1)\n        # If k is too large, k^m - 1 will overflow.\n        # So we must cap high at a value where k^m does not overflow.\n        # For k=2*10^9, m=3, k^m = (2*10^9)^3 = 8 * 10^27, which overflows standard 64-bit int.\n        # Python integers handle arbitrary size, but the calculations are slow.\n        # We need to be careful with k^m.\n        # n is up to 10^18.\n        # If k^m - 1 = n * (k - 1), then k^m approx n * k.\n        # k^(m-1) approx n.\n        # So k approx n^(1/(m-1)).\n        # So k cannot exceed n^(1/(m-1)) significantly.\n        # Let's use a tighter upper bound for binary search.\n        # If m=3, k approx sqrt(n). Max sqrt(10^18) = 10^9.\n        # If m=4, k approx (10^18)^(1/3) = 10^6.\n        # The largest k occurs for m=3. So high can be around 10^9.\n        # Let's set high to 10^9 + 7 (a bit more than 10^9).\n        \n        # Let's use a more robust upper bound for k for binary search.\n        # k^m - 1 = n(k-1)\n        # k^m - nk + n - 1 = 0\n        # If k >= 2:\n        # k^(m-1) < n. So k < n^(1/(m-1)).\n        # For m=3, k < n^(1/2). Max k < 10^9.\n        # For m=60, k < n^(1/59). Max k < (10^18)^(1/59) approx 2.\n        # So the maximum k to check is 10^9 + 2.\n        \n        high = int(n**(1.0/(m-1))) + 2 if m > 1 else 2\n        high = min(high, 10**9 + 7) # Cap high to prevent k^m overflow for m=3\n        \n        # If n is very large and m is small, k could be large.\n        # Example: n = 10^18, m = 3. k approx 10^9.\n        # k^m is (10^9)^3 = 10^27. This will not overflow Python's arbitrary precision integers,\n        # but it will be slow.\n        # The number of iterations in binary search is log(high - low).\n        # log(10^9) approx 30.\n        # So for each m, we do 30 iterations. 60 * 30 = 1800 iterations.\n        # In each iteration, we calculate k^m.\n        # k^m can be calculated efficiently using pow(k, m).\n        \n        found_k = False\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n            \n            # Calculate (mid^m - 1) / (mid - 1)\n            # Check for overflow or too large values for mid^m\n            # If mid^(m-1) > n, then mid is too large.\n            # This is a better check than mid^m.\n            # mid^(m-1) can be up to 10^18 for m=3.\n            # mid^m can be up to 10^18 * 10^9 = 10^27.\n            \n            val = 0\n            try:\n                # Calculate sum of geometric series: 1 + mid + mid^2 + ... + mid^(m-1)\n                # To avoid overflow for mid^m, we can check mid^(m-1) first.\n                # If mid^(m-1) > n, then sum will be > n.\n                # If mid^(m-1) is already > n, it's too big.\n                # Use a threshold slightly larger than n to avoid floating point issues.\n                if m > 1:\n                    if mid > 1:\n                        # Direct calculation of sum of geometric series\n                        # k^m - 1 / k - 1\n                        # If mid is large, mid^m can be huge.\n                        # We need to check if mid^(m-1) exceeds n.\n                        # If mid > n^(1/(m-1)), then mid^(m-1) > n.\n                        # This check is done by `high` bound.\n                        # But what if mid^(m-1) is just below n, but mid^m overflows?\n                        # Python handles large integers, so overflow is not a problem.\n                        # Performance might be an issue.\n                        \n                        # Let's compute term by term and stop if it exceeds n.\n                        current_sum = 1\n                        current_power_of_k = 1\n                        for _ in range(1, m): # From k^1 to k^(m-1)\n                            # Check for potential overflow of current_power_of_k * mid\n                            # if current_power_of_k > n // mid (approx)\n                            # This avoids actual overflow if current_power_of_k * mid\n                            # were to exceed system limits (not an issue in Python, but good practice).\n                            # If current_power_of_k > n (since n is the target sum)\n                            # Or if current_power_of_k * mid would exceed n\n                            if current_power_of_k > n // mid: # Avoids current_power_of_k * mid > n.\n                                current_sum = n + 1 # Mark as too large\n                                break\n                            current_power_of_k *= mid\n                            current_sum += current_power_of_k\n                            if current_sum > n: # If sum exceeds n, it's too large\n                                break\n                        val = current_sum\n                    else: # mid == 1, not allowed as k > 1\n                        val = 0 # Invalid k\n                else: # m = 1, not allowed as m >= 3\n                    val = 0\n            except OverflowError:\n                val = n + 1 # Mark as too large\n            \n            if val == n:\n                found_k = True\n                break\n            elif val < n:\n                low = mid + 1\n            else: # val > n\n                high = mid - 1\n        \n        if found_k:\n            sys.stdout.write(\"YES\\n\")\n            return\n\n    sys.stdout.write(\"NO\\n\")\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    if n < 7:\n        sys.stdout.write(\"NO\\n\")\n        return\n\n    # Case 1: m = 2 (2 levels of expansion)\n    # Total vertices = 1 + k + k*k = 1 + k + k^2\n    # We need to find if n = 1 + k + k^2 for some k > 1.\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s^2.\n    # s = sqrt(4n - 3)\n    # Then k = (-1 + s) / 2\n    # We need s to be an integer, s > 0, and (-1 + s) / 2 > 1.\n    # This means -1 + s > 2, so s > 3.\n    # Also, s must be odd for (-1 + s) to be even.\n    \n    discriminant = 4 * n - 3\n    s_approx = int(discriminant**0.5)\n    \n    for s in range(max(1, s_approx - 2), s_approx + 3):\n        if s * s == discriminant:\n            if s > 3 and (s - 1) % 2 == 0:\n                k = (s - 1) // 2\n                if k > 1:\n                    sys.stdout.write(\"YES\\n\")\n                    return\n\n    # Case 2: m >= 3 (3 or more levels of expansion)\n    # Total vertices = 1 + k + k^2 + ... + k^(m-1) = (k^m - 1) / (k - 1)\n    # We are looking for n = (k^m - 1) / (k - 1) for some k > 1 and m >= 3.\n    # This is equivalent to n * (k - 1) = k^m - 1.\n    # Since k >= 2, m >= 3:\n    # Smallest n for m=3, k=2 is (2^3 - 1) / (2 - 1) = 7.\n    # Smallest n for m=3, k=3 is (3^3 - 1) / (3 - 1) = 26 / 2 = 13.\n    # Smallest n for m=4, k=2 is (2^4 - 1) / (2 - 1) = 15.\n    \n    # Iterate over possible values of m.\n    # The maximum value of m is relatively small because k >= 2.\n    # If k = 2, n = 2^m - 1. So 2^m = n + 1. m = log2(n + 1).\n    # If n = 10^18, m approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So m goes up to about 60.\n    \n    # If k = 3, n = (3^m - 1) / 2. 3^m = 2n + 1. m = log3(2n + 1).\n    # If n = 10^18, m approx log3(2 * 10^18) = log3(2) + 18 * log3(10) approx 0.63 + 18 * 2.09 = 0.63 + 37.62 = 38.25.\n    # So m goes up to about 40 for k=3.\n    \n    # If k = 10^9, m = 3. n = 1 + k + k^2 approx k^2 = (10^9)^2 = 10^18.\n    # So m can be small (e.g., 3) for large k.\n    \n    # The maximum value of m is about 60.\n    for m in range(3, 61):\n        # We need to find k such that n = (k^m - 1) / (k - 1)\n        # n * (k - 1) = k^m - 1\n        # This is equivalent to finding integer root k > 1 for the polynomial:\n        # P(k) = k^m - n*k + (n - 1) = 0\n        \n        # We can use binary search for k.\n        # k must be at least 2.\n        # Upper bound for k:\n        # If m=3, n = 1 + k + k^2. So k^2 < n. k < sqrt(n).\n        # If n = 10^18, k < 10^9.\n        # A safe upper bound for k is n^(1/(m-1)).\n        # k^m - 1 approx k^m. n approx k^m / (k-1).\n        # If k is large, n approx k^(m-1). So k approx n^(1/(m-1)).\n        # For m=3, k approx n^(1/2). For m=60, k approx n^(1/59).\n        # n^(1/59) for n=10^18 is (10^18)^(1/59) = 10^(18/59) approx 10^0.3 = 2.\n        # So k can be large for small m, and small for large m.\n        \n        # Binary search range for k: [2, n^(1/2) + 2]\n        # A more practical upper bound: if k^m - 1 > n*(k-1), then k is too large.\n        # k^m - 1 > n*k - n\n        # k^m - n*k + n - 1 > 0\n        # For k=2, 2^m - 2n + n - 1 = 2^m - n - 1. If this is positive, k=2 is too large.\n        # If k=2, n = 2^m - 1.\n        # If n > 2^m - 1, then k must be > 2.\n        # If n < 2^m - 1, then k must be < 2 (not possible as k >= 2).\n        # So for a given m, if n < 2^m - 1, no solution for that m.\n        \n        # Lower bound for k is 2.\n        # Upper bound for k: n = (k^m - 1)/(k-1) > k^(m-1). So k < n^(1/(m-1)).\n        # A safe upper bound is min(2 * 10**9, int(n**(1.0/(m-1))) + 3).\n        # 10**18 is the max n. For m=3, k approx sqrt(10^18) = 10^9.\n        # For m=4, k approx (10^18)^(1/3) = 10^6.\n        # For m=5, k approx (10^18)^(1/4) = 10^4.5 approx 31622.\n        # Max k is 10^9.\n        \n        low = 2\n        high = min(2 * 10**9, int(n**(1.0/(m-1))) + 3) # Upper bound for k\n        \n        # Check high value specifically to avoid overflow in high * high * ...\n        # (k^m - 1) / (k - 1) = n\n        # This is equivalent to k^m - 1 = n * (k - 1)\n        # If k is too large, k^m - 1 will overflow.\n        # So we must cap high at a value where k^m does not overflow.\n        # For k=2*10^9, m=3, k^m = (2*10^9)^3 = 8 * 10^27, which overflows standard 64-bit int.\n        # Python integers handle arbitrary size, but the calculations are slow.\n        # We need to be careful with k^m.\n        # n is up to 10^18.\n        # If k^m - 1 = n * (k - 1), then k^m approx n * k.\n        # k^(m-1) approx n.\n        # So k approx n^(1/(m-1)).\n        # So k cannot exceed n^(1/(m-1)) significantly.\n        # Let's use a tighter upper bound for binary search.\n        # If m=3, k approx sqrt(n). Max sqrt(10^18) = 10^9.\n        # If m=4, k approx (10^18)^(1/3) = 10^6.\n        # The largest k occurs for m=3. So high can be around 10^9.\n        # Let's set high to 10^9 + 7 (a bit more than 10^9).\n        \n        # Let's use a more robust upper bound for k for binary search.\n        # k^m - 1 = n(k-1)\n        # k^m - nk + n - 1 = 0\n        # If k >= 2:\n        # k^(m-1) < n. So k < n^(1/(m-1)).\n        # For m=3, k < n^(1/2). Max k < 10^9.\n        # For m=60, k < n^(1/59). Max k < (10^18)^(1/59) approx 2.\n        # So the maximum k to check is 10^9 + 2.\n        \n        high = int(n**(1.0/(m-1))) + 2 if m > 1 else 2\n        high = min(high, 10**9 + 7) # Cap high to prevent k^m overflow for m=3\n        \n        # If n is very large and m is small, k could be large.\n        # Example: n = 10^18, m = 3. k approx 10^9.\n        # k^m is (10^9)^3 = 10^27. This will not overflow Python's arbitrary precision integers,\n        # but it will be slow.\n        # The number of iterations in binary search is log(high - low).\n        # log(10^9) approx 30.\n        # So for each m, we do 30 iterations. 60 * 30 = 1800 iterations.\n        # In each iteration, we calculate k^m.\n        # k^m can be calculated efficiently using pow(k, m).\n        \n        found_k = False\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n            \n            # Calculate (mid^m - 1) / (mid - 1)\n            # Check for overflow or too large values for mid^m\n            # If mid^(m-1) > n, then mid is too large.\n            # This is a better check than mid^m.\n            # mid^(m-1) can be up to 10^18 for m=3.\n            # mid^m can be up to 10^18 * 10^9 = 10^27.\n            \n            val = 0\n            try:\n                # Calculate sum of geometric series: 1 + mid + mid^2 + ... + mid^(m-1)\n                # To avoid overflow for mid^m, we can check mid^(m-1) first.\n                # If mid^(m-1) > n, then sum will be > n.\n                # If mid^(m-1) is already > n, it's too big.\n                # Use a threshold slightly larger than n to avoid floating point issues.\n                if m > 1:\n                    if mid > 1:\n                        # Direct calculation of sum of geometric series\n                        # k^m - 1 / k - 1\n                        # If mid is large, mid^m can be huge.\n                        # We need to check if mid^(m-1) exceeds n.\n                        # If mid > n^(1/(m-1)), then mid^(m-1) > n.\n                        # This check is done by `high` bound.\n                        # But what if mid^(m-1) is just below n, but mid^m overflows?\n                        # Python handles large integers, so overflow is not a problem.\n                        # Performance might be an issue.\n                        \n                        # Let's compute term by term and stop if it exceeds n.\n                        current_sum = 1\n                        current_power_of_k = 1\n                        for _ in range(1, m): # From k^1 to k^(m-1)\n                            # Check for potential overflow of current_power_of_k * mid\n                            # if current_power_of_k > n // mid (approx)\n                            # This avoids actual overflow if current_power_of_k * mid\n                            # were to exceed system limits (not an issue in Python, but good practice).\n                            # If current_power_of_k > n (since n is the target sum)\n                            # Or if current_power_of_k * mid would exceed n\n                            if current_power_of_k > n // mid: # Avoids current_power_of_k * mid > n.\n                                current_sum = n + 1 # Mark as too large\n                                break\n                            current_power_of_k *= mid\n                            current_sum += current_power_of_k\n                            if current_sum > n: # If sum exceeds n, it's too large\n                                break\n                        val = current_sum\n                    else: # mid == 1, not allowed as k > 1\n                        val = 0 # Invalid k\n                else: # m = 1, not allowed as m >= 3\n                    val = 0\n            except OverflowError:\n                val = n + 1 # Mark as too large\n            \n            if val == n:\n                found_k = True\n                break\n            elif val < n:\n                low = mid + 1\n            else: # val > n\n                high = mid - 1\n        \n        if found_k:\n            sys.stdout.write(\"YES\\n\")\n            return\n\n    sys.stdout.write(\"NO\\n\")\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 3571,
        "thoughts_token_count": 0
    }
}