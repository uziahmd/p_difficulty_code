{
    "start": 1758011414.882878,
    "end": 1758011423.2313364,
    "start-formatted": "2025-09-16 17:30 KST",
    "end-formatted": "2025-09-16 17:30 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_by_weight = {1: [], 2: [], 3: []}\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        items_by_weight[w].append(c)\n\n    for w in items_by_weight:\n        items_by_weight[w].sort(reverse=True)\n\n    prefix_sums_1 = [0] * (len(items_by_weight[1]) + 1)\n    for i in range(len(items_by_weight[1])):\n        prefix_sums_1[i+1] = prefix_sums_1[i] + items_by_weight[1][i]\n\n    prefix_sums_2 = [0] * (len(items_by_weight[2]) + 1)\n    for i in range(len(items_by_weight[2])):\n        prefix_sums_2[i+1] = prefix_sums_2[i] + items_by_weight[2][i]\n\n    prefix_sums_3 = [0] * (len(items_by_weight[3]) + 1)\n    for i in range(len(items_by_weight[3])):\n        prefix_sums_3[i+1] = prefix_sums_3[i] + items_by_weight[3][i]\n\n    max_cost = 0\n\n    # Iterate over the number of items with weight 3\n    for count3 in range(len(items_by_weight[3]) + 1):\n        weight3 = count3 * 3\n        cost3 = prefix_sums_3[count3]\n\n        remaining_weight_after_3 = m - weight3\n        if remaining_weight_after_3 < 0:\n            break\n\n        # Iterate over the number of items with weight 2\n        # We can optimize this inner loop.\n        # For a fixed count3, we want to maximize cost2 + cost1\n        # given remaining_weight_after_3.\n        # This is a standard 0/1 knapsack for weights 1 and 2.\n        # Since we have sorted costs, we can use two pointers or binary search for count1.\n\n        current_cost_for_3 = cost3\n        \n        # Maximize cost from items of weight 1 and 2\n        # For a given remaining_weight_after_3, we want to pick some count2 items and some count1 items.\n        # Let's iterate on count2.\n        best_cost_for_1_and_2 = 0\n        \n        # Two pointers approach for count1 and count2\n        # We try to take as many weight 2 items as possible first, then fill with weight 1 items.\n        # Or, we iterate on count2, and for each count2, find the best count1.\n\n        # Let's try iterating count2 and finding best count1.\n        # This is O(N2 * N1) if N1 and N2 are sizes of lists.\n        # A more efficient way:\n        # For a fixed count3, we have remaining_weight_after_3.\n        # We want to find max(cost1 + cost2) such that 1*count1 + 2*count2 <= remaining_weight_after_3.\n        # We can iterate count2 from 0 up to min(len(items_by_weight[2]), remaining_weight_after_3 // 2).\n        # For each count2, calculate remaining_weight_for_1 = remaining_weight_after_3 - count2 * 2.\n        # Then, count1 = min(len(items_by_weight[1]), remaining_weight_for_1).\n        # This gives cost1 = prefix_sums_1[count1].\n\n        for count2 in range(len(items_by_weight[2]) + 1):\n            weight2 = count2 * 2\n            cost2 = prefix_sums_2[count2]\n\n            remaining_weight_after_2_and_3 = remaining_weight_after_3 - weight2\n            if remaining_weight_after_2_and_3 < 0:\n                break\n\n            count1 = min(len(items_by_weight[1]), remaining_weight_after_2_and_3)\n            cost1 = prefix_sums_1[count1]\n\n            current_total_cost = current_cost_for_3 + cost2 + cost1\n            max_cost = max(max_cost, current_total_cost)\n\n    sys.stdout.write(str(max_cost) + '\\n')\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_by_weight = {1: [], 2: [], 3: []}\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        items_by_weight[w].append(c)\n\n    for w in items_by_weight:\n        items_by_weight[w].sort(reverse=True)\n\n    prefix_sums_1 = [0] * (len(items_by_weight[1]) + 1)\n    for i in range(len(items_by_weight[1])):\n        prefix_sums_1[i+1] = prefix_sums_1[i] + items_by_weight[1][i]\n\n    prefix_sums_2 = [0] * (len(items_by_weight[2]) + 1)\n    for i in range(len(items_by_weight[2])):\n        prefix_sums_2[i+1] = prefix_sums_2[i] + items_by_weight[2][i]\n\n    prefix_sums_3 = [0] * (len(items_by_weight[3]) + 1)\n    for i in range(len(items_by_weight[3])):\n        prefix_sums_3[i+1] = prefix_sums_3[i] + items_by_weight[3][i]\n\n    max_cost = 0\n\n    # Iterate over the number of items with weight 3\n    for count3 in range(len(items_by_weight[3]) + 1):\n        weight3 = count3 * 3\n        cost3 = prefix_sums_3[count3]\n\n        remaining_weight_after_3 = m - weight3\n        if remaining_weight_after_3 < 0:\n            break\n\n        # Iterate over the number of items with weight 2\n        # We can optimize this inner loop.\n        # For a fixed count3, we want to maximize cost2 + cost1\n        # given remaining_weight_after_3.\n        # This is a standard 0/1 knapsack for weights 1 and 2.\n        # Since we have sorted costs, we can use two pointers or binary search for count1.\n\n        current_cost_for_3 = cost3\n        \n        # Maximize cost from items of weight 1 and 2\n        # For a given remaining_weight_after_3, we want to pick some count2 items and some count1 items.\n        # Let's iterate on count2.\n        best_cost_for_1_and_2 = 0\n        \n        # Two pointers approach for count1 and count2\n        # We try to take as many weight 2 items as possible first, then fill with weight 1 items.\n        # Or, we iterate on count2, and for each count2, find the best count1.\n\n        # Let's try iterating count2 and finding best count1.\n        # This is O(N2 * N1) if N1 and N2 are sizes of lists.\n        # A more efficient way:\n        # For a fixed count3, we have remaining_weight_after_3.\n        # We want to find max(cost1 + cost2) such that 1*count1 + 2*count2 <= remaining_weight_after_3.\n        # We can iterate count2 from 0 up to min(len(items_by_weight[2]), remaining_weight_after_3 // 2).\n        # For each count2, calculate remaining_weight_for_1 = remaining_weight_after_3 - count2 * 2.\n        # Then, count1 = min(len(items_by_weight[1]), remaining_weight_for_1).\n        # This gives cost1 = prefix_sums_1[count1].\n\n        for count2 in range(len(items_by_weight[2]) + 1):\n            weight2 = count2 * 2\n            cost2 = prefix_sums_2[count2]\n\n            remaining_weight_after_2_and_3 = remaining_weight_after_3 - weight2\n            if remaining_weight_after_2_and_3 < 0:\n                break\n\n            count1 = min(len(items_by_weight[1]), remaining_weight_after_2_and_3)\n            cost1 = prefix_sums_1[count1]\n\n            current_total_cost = current_cost_for_3 + cost2 + cost1\n            max_cost = max(max_cost, current_total_cost)\n\n    sys.stdout.write(str(max_cost) + '\\n')\n\nif __name__ == '__main__':\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 487,
        "completion_token_count": 1105,
        "thoughts_token_count": 0
    }
}