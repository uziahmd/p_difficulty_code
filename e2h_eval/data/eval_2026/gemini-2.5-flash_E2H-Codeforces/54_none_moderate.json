{
    "start": 1758293707.7176821,
    "end": 1758293736.7029524,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2 (arbitrary choice, but simplifies indexing)\n    v2 = 2\n\n    # Iterate through possible positions for v1\n    # v1 can be any vertex from 1 to n, except v2\n    # To simplify, let's fix v2 to be 2.\n    # Then v1 can be 1.\n    v1 = 1\n\n    # The angle at v2 is formed by segments v2-v1 and v2-v3.\n    # The number of vertices between v1 and v3 (excluding v1 and v3) determines the angle.\n    # Let k be the number of vertices on the arc from v1 to v3 (clockwise) that are not v1 or v3.\n    # So, k+1 is the number of sides of the polygon that form the arc.\n    # The central angle subtended by an arc with k+1 sides is (k+1) * (360 / n).\n    # The inscribed angle is half of the central angle.\n    # So, the angle at v2 is (k+1) * (180 / n).\n    # Here, v1, v2, v3 are distinct.\n    # v1 and v3 must be different from v2.\n    # Also, v1 and v3 must be different from each other.\n\n    # We fix v2 = 2.\n    # We fix v1 = 1.\n    # Now we need to find v3.\n    # v3 must be different from 1 and 2.\n    # The vertices are numbered 1 to n.\n    # The angle formed by (1, 2, v3) is the inscribed angle subtended by the arc from 1 to v3.\n    # The number of edges in the arc from 1 to v3 (clockwise) is (v3 - 1) if v3 > 1.\n    # If v3 < 1 (not possible with 1 to n numbering), or if we consider it going counter-clockwise.\n    # Let's consider the number of vertices on the arc from v1 to v3 (not including v1, v3)\n    # The number of edges between v1 and v3 is `num_edges`.\n    # The angle is `num_edges * (180 / n)`.\n    # `num_edges` can range from 1 to n-2.\n    # (If num_edges = 0, v1=v3, not allowed. If num_edges = n-1, v1,v2,v3 form a degenerate angle, not allowed for distinct vertices)\n\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Now we need to choose v3 such that v3 != 1 and v3 != 2.\n    # The possible values for v3 are from 3 to n.\n    # For each v3, the angle formed at v2 (vertex 2) by lines to v1 (vertex 1) and v3 (vertex v3)\n    # is the inscribed angle subtended by the arc from v1 to v3.\n    # The number of edges in this arc is (v3 - v1).\n    # So, num_edges = v3 - 1.\n    # The possible values for num_edges are from 2 to n-1.\n    # Since v3 must be different from v1 and v2, and v1=1, v2=2:\n    # v3 can be 3, 4, ..., n.\n    # So num_edges can be 2, 3, ..., n-1.\n    # The angle is `(num_edges) * (180 / n)`.\n\n    # Let's iterate `num_edges` from 1 to n-2.\n    # `num_edges` represents the number of sides of the polygon that form the arc between v1 and v3.\n    # The angle is `angle = num_edges * (180 / n)`.\n    # We need to find the `num_edges` that makes this angle closest to `a`.\n\n    # The possible angles are `k * (180 / n)` where k is an integer.\n    # k represents the number of sides between v1 and v3.\n    # k must be at least 1 (v1 and v3 are distinct).\n    # k must be at most n-2 (v1, v2, v3 are distinct, so there are at least 2 vertices not part of the arc v1-v3, one of which is v2, and another one is the \"other side\" of the polygon if v1 and v3 are adjacent to v2).\n    # More precisely, v1, v2, v3 must be distinct.\n    # If v2 is vertex 2, v1 is vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # If v3 is vertex `j` (where `j` is from 3 to n), then the arc is from 1 to `j`.\n    # The number of edges in this arc is `j - 1`.\n    # So, `k = j - 1`.\n    # The minimum `k` is when `j=3`, so `k=2`.\n    # The maximum `k` is when `j=n`, so `k=n-1`.\n    # However, if `k=n-1`, then v1 and v3 are adjacent, and v2 is the only vertex not on the arc. This means v1, v2, v3 form the entire polygon, which is not what we want.\n    # We need to ensure v1, v2, v3 are distinct.\n    # Let's fix v2 = 2.\n    # Let's fix v1 = 1.\n    # Then v3 can be 3, 4, ..., n.\n    # If v3 = 3, the angle is formed by (1, 2, 3). The arc is from 1 to 3, which has 2 edges. Angle = 2 * (180/n).\n    # If v3 = 4, the angle is formed by (1, 2, 4). The arc is from 1 to 4, which has 3 edges. Angle = 3 * (180/n).\n    # ...\n    # If v3 = n, the angle is formed by (1, 2, n). The arc is from 1 to n, which has n-1 edges. Angle = (n-1) * (180/n).\n    # So, `k` (number of edges in the arc from v1 to v3) can range from 2 to n-1.\n    # This range of `k` ensures v1, v2, v3 are distinct.\n    # v1=1, v2=2, v3=j.\n    # If j=1, not distinct from v1.\n    # If j=2, not distinct from v2.\n    # So j must be in [3, n].\n    # The number of edges in the arc from v1 to v3 is `j-1`.\n    # So `k` can be `3-1=2`, `4-1=3`, ..., `n-1`.\n    # So `k` ranges from 2 to n-1.\n\n    # Iterate `k` from 1 to n-2.\n    # The actual range for `k` is from 1 to n-2.\n    # If k=1, v1 and v3 are adjacent.\n    # Example: v2=2, v1=1, v3=3. The arc 1-3 has 2 edges. So k=2. Angle = 2 * (180/n).\n    # Example: v2=2, v1=1, v3=4. The arc 1-4 has 3 edges. So k=3. Angle = 3 * (180/n).\n    # Example: v2=2, v1=1, v3=n. The arc 1-n has n-1 edges. So k=n-1. Angle = (n-1) * (180/n).\n    # Wait, the number of edges between v1 and v3 is k.\n    # The vertices are 1, 2, ..., n.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # We want to find v3. v3 must be distinct from 1 and 2. So v3 can be from 3 to n.\n    # If v3 = 3, the angle is formed by (1, 2, 3). The arc between 1 and 3 (passing through no other vertices) has 2 edges.\n    # If v3 = 4, the angle is formed by (1, 2, 4). The arc between 1 and 4 has 3 edges.\n    # If v3 = `j`, the arc between 1 and `j` has `j-1` edges.\n    # So, `k = j-1`.\n    # The smallest `j` is 3, so smallest `k` is 2.\n    # The largest `j` is `n`, so largest `k` is `n-1`.\n    # So, `k` can be from 2 to `n-1`.\n    # The angle is `k * (180 / n)`.\n\n    # Let's check the constraint k <= n-2.\n    # If k = n-1, then v1 and v3 are adjacent (1 and n). The arc 1-n has n-1 edges.\n    # In this case, v1=1, v2=2, v3=n. This forms an angle.\n    # The problem states three distinct vertices.\n    # 1, 2, n are distinct for n >= 3.\n    # So k can indeed go up to n-1.\n\n    # Let's re-evaluate the range of k.\n    # The angle is formed by two sides from v2 to v1 and v2 to v3.\n    # The angle value depends on the number of vertices between v1 and v3 (excluding v1 and v3).\n    # Let this number be `m`.\n    # Then the angle is `(m+1) * (180 / n)`.\n    # v1, v2, v3 must be distinct.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Then v3 must be chosen from {3, 4, ..., n}.\n    # If v3 = 3, then `m` = 0 (no vertices between 1 and 3 on the shorter arc). Angle = (0+1) * (180/n) = 180/n.\n    # This is wrong. The angle is (number of edges in the arc between v1 and v3) * (180/n).\n    # If v1=1, v2=2, v3=3. The arc (1,3) has 2 edges (1-2 and 2-3). This is wrong too.\n    # The arc (1,3) has 2 edges (1-2 and 2-3) IF 2 is on the arc. But 2 is the vertex of the angle.\n    # The arc (1,3) means the arc that does NOT contain v2.\n    # Vertices are 1, 2, ..., n.\n    # Let v2 be vertex `i`.\n    # Let v1 be vertex `j`.\n    # Let v3 be vertex `k`.\n    # The angle at `i` is formed by segments `i-j` and `i-k`.\n    # The value of the angle is `(number of edges in the arc between j and k that does not contain i) * (180 / n)`.\n    # Let's fix v2 = 2.\n    # Let's fix v1 = 1.\n    # Now we need to find v3 from {3, ..., n}.\n    # The arc between 1 and v3 (not containing 2).\n    # If v3 = 3, the arc is (1, 3). It has 1 edge (1-3). Angle = 1 * (180/n).\n    # If v3 = 4, the arc is (1, 4). It has 2 edges (1-3, 3-4). Angle = 2 * (180/n).\n    # If v3 = `j`, the arc is (1, `j`). It has `j-2` edges. Angle = (j-2) * (180/n).\n    # So `k = j-2`.\n    # Smallest `j` is 3, so smallest `k` is 3-2 = 1.\n    # Largest `j` is `n`, so largest `k` is `n-2`.\n    # So, `k` (number of edges in the arc from v1 to v3, NOT containing v2) can range from 1 to n-2.\n\n    # Iterate `k` from 1 to n-2.\n    # Calculate `current_angle = k * (180 / n)`.\n    # Calculate `diff = abs(current_angle - a)`.\n    # If `diff < min_diff`, update `min_diff` and store `v1, v2, v3`.\n\n    # We can fix v2 = 2 and v1 = 1.\n    # Then for a given `k` (number of edges in the arc 1-v3), v3 = 2 + k.\n    # So, v1 = 1, v2 = 2, v3 = 2 + k.\n    # For this to be valid:\n    # v1=1, v2=2.\n    # v3 must be distinct from 1 and 2.\n    # So `2+k` must be != 1 and != 2.\n    # `2+k != 1` is true for k >= 1.\n    # `2+k != 2` is true for k >= 1.\n    # Also, v3 must be <= n. So `2+k <= n`, which means `k <= n-2`.\n    # So the range `k` from 1 to `n-2` is perfect.\n\n    for k in range(1, n - 1): # k from 1 to n-2\n        current_angle = k * (180 / n)\n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_v1 = 1\n            best_v2 = 2\n            best_v3 = 2 + k\n        # If diff is equal, we can take any. The problem says \"any of them\".\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2 (arbitrary choice, but simplifies indexing)\n    v2 = 2\n\n    # Iterate through possible positions for v1\n    # v1 can be any vertex from 1 to n, except v2\n    # To simplify, let's fix v2 to be 2.\n    # Then v1 can be 1.\n    v1 = 1\n\n    # The angle at v2 is formed by segments v2-v1 and v2-v3.\n    # The number of vertices between v1 and v3 (excluding v1 and v3) determines the angle.\n    # Let k be the number of vertices on the arc from v1 to v3 (clockwise) that are not v1 or v3.\n    # So, k+1 is the number of sides of the polygon that form the arc.\n    # The central angle subtended by an arc with k+1 sides is (k+1) * (360 / n).\n    # The inscribed angle is half of the central angle.\n    # So, the angle at v2 is (k+1) * (180 / n).\n    # Here, v1, v2, v3 are distinct.\n    # v1 and v3 must be different from v2.\n    # Also, v1 and v3 must be different from each other.\n\n    # We fix v2 = 2.\n    # We fix v1 = 1.\n    # Now we need to find v3.\n    # v3 must be different from 1 and 2.\n    # The vertices are numbered 1 to n.\n    # The angle formed by (1, 2, v3) is the inscribed angle subtended by the arc from 1 to v3.\n    # The number of edges in the arc from 1 to v3 (clockwise) is (v3 - 1) if v3 > 1.\n    # If v3 < 1 (not possible with 1 to n numbering), or if we consider it going counter-clockwise.\n    # Let's consider the number of vertices on the arc from v1 to v3 (not including v1, v3)\n    # The number of edges between v1 and v3 is `num_edges`.\n    # The angle is `num_edges * (180 / n)`.\n    # `num_edges` can range from 1 to n-2.\n    # (If num_edges = 0, v1=v3, not allowed. If num_edges = n-1, v1,v2,v3 form a degenerate angle, not allowed for distinct vertices)\n\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Now we need to choose v3 such that v3 != 1 and v3 != 2.\n    # The possible values for v3 are from 3 to n.\n    # For each v3, the angle formed at v2 (vertex 2) by lines to v1 (vertex 1) and v3 (vertex v3)\n    # is the inscribed angle subtended by the arc from v1 to v3.\n    # The number of edges in this arc is (v3 - v1).\n    # So, num_edges = v3 - 1.\n    # The possible values for num_edges are from 2 to n-1.\n    # Since v3 must be different from v1 and v2, and v1=1, v2=2:\n    # v3 can be 3, 4, ..., n.\n    # So num_edges can be 2, 3, ..., n-1.\n    # The angle is `(num_edges) * (180 / n)`.\n\n    # Let's iterate `num_edges` from 1 to n-2.\n    # `num_edges` represents the number of sides of the polygon that form the arc between v1 and v3.\n    # The angle is `angle = num_edges * (180 / n)`.\n    # We need to find the `num_edges` that makes this angle closest to `a`.\n\n    # The possible angles are `k * (180 / n)` where k is an integer.\n    # k represents the number of sides between v1 and v3.\n    # k must be at least 1 (v1 and v3 are distinct).\n    # k must be at most n-2 (v1, v2, v3 are distinct, so there are at least 2 vertices not part of the arc v1-v3, one of which is v2, and another one is the \"other side\" of the polygon if v1 and v3 are adjacent to v2).\n    # More precisely, v1, v2, v3 must be distinct.\n    # If v2 is vertex 2, v1 is vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # If v3 is vertex `j` (where `j` is from 3 to n), then the arc is from 1 to `j`.\n    # The number of edges in this arc is `j - 1`.\n    # So, `k = j - 1`.\n    # The minimum `k` is when `j=3`, so `k=2`.\n    # The maximum `k` is when `j=n`, so `k=n-1`.\n    # However, if `k=n-1`, then v1 and v3 are adjacent, and v2 is the only vertex not on the arc. This means v1, v2, v3 form the entire polygon, which is not what we want.\n    # We need to ensure v1, v2, v3 are distinct.\n    # Let's fix v2 = 2.\n    # Let's fix v1 = 1.\n    # Then v3 can be 3, 4, ..., n.\n    # If v3 = 3, the angle is formed by (1, 2, 3). The arc is from 1 to 3, which has 2 edges. Angle = 2 * (180/n).\n    # If v3 = 4, the angle is formed by (1, 2, 4). The arc is from 1 to 4, which has 3 edges. Angle = 3 * (180/n).\n    # ...\n    # If v3 = n, the angle is formed by (1, 2, n). The arc is from 1 to n, which has n-1 edges. Angle = (n-1) * (180/n).\n    # So, `k` (number of edges in the arc from v1 to v3) can range from 2 to n-1.\n    # This range of `k` ensures v1, v2, v3 are distinct.\n    # v1=1, v2=2, v3=j.\n    # If j=1, not distinct from v1.\n    # If j=2, not distinct from v2.\n    # So j must be in [3, n].\n    # The number of edges in the arc from v1 to v3 is `j-1`.\n    # So `k` can be `3-1=2`, `4-1=3`, ..., `n-1`.\n    # So `k` ranges from 2 to n-1.\n\n    # Iterate `k` from 1 to n-2.\n    # The actual range for `k` is from 1 to n-2.\n    # If k=1, v1 and v3 are adjacent.\n    # Example: v2=2, v1=1, v3=3. The arc 1-3 has 2 edges. So k=2. Angle = 2 * (180/n).\n    # Example: v2=2, v1=1, v3=4. The arc 1-4 has 3 edges. So k=3. Angle = 3 * (180/n).\n    # Example: v2=2, v1=1, v3=n. The arc 1-n has n-1 edges. So k=n-1. Angle = (n-1) * (180/n).\n    # Wait, the number of edges between v1 and v3 is k.\n    # The vertices are 1, 2, ..., n.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # We want to find v3. v3 must be distinct from 1 and 2. So v3 can be from 3 to n.\n    # If v3 = 3, the angle is formed by (1, 2, 3). The arc between 1 and 3 (passing through no other vertices) has 2 edges.\n    # If v3 = 4, the angle is formed by (1, 2, 4). The arc between 1 and 4 has 3 edges.\n    # If v3 = `j`, the arc between 1 and `j` has `j-1` edges.\n    # So, `k = j-1`.\n    # The smallest `j` is 3, so smallest `k` is 2.\n    # The largest `j` is `n`, so largest `k` is `n-1`.\n    # So, `k` can be from 2 to `n-1`.\n    # The angle is `k * (180 / n)`.\n\n    # Let's check the constraint k <= n-2.\n    # If k = n-1, then v1 and v3 are adjacent (1 and n). The arc 1-n has n-1 edges.\n    # In this case, v1=1, v2=2, v3=n. This forms an angle.\n    # The problem states three distinct vertices.\n    # 1, 2, n are distinct for n >= 3.\n    # So k can indeed go up to n-1.\n\n    # Let's re-evaluate the range of k.\n    # The angle is formed by two sides from v2 to v1 and v2 to v3.\n    # The angle value depends on the number of vertices between v1 and v3 (excluding v1 and v3).\n    # Let this number be `m`.\n    # Then the angle is `(m+1) * (180 / n)`.\n    # v1, v2, v3 must be distinct.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Then v3 must be chosen from {3, 4, ..., n}.\n    # If v3 = 3, then `m` = 0 (no vertices between 1 and 3 on the shorter arc). Angle = (0+1) * (180/n) = 180/n.\n    # This is wrong. The angle is (number of edges in the arc between v1 and v3) * (180/n).\n    # If v1=1, v2=2, v3=3. The arc (1,3) has 2 edges (1-2 and 2-3). This is wrong too.\n    # The arc (1,3) has 2 edges (1-2 and 2-3) IF 2 is on the arc. But 2 is the vertex of the angle.\n    # The arc (1,3) means the arc that does NOT contain v2.\n    # Vertices are 1, 2, ..., n.\n    # Let v2 be vertex `i`.\n    # Let v1 be vertex `j`.\n    # Let v3 be vertex `k`.\n    # The angle at `i` is formed by segments `i-j` and `i-k`.\n    # The value of the angle is `(number of edges in the arc between j and k that does not contain i) * (180 / n)`.\n    # Let's fix v2 = 2.\n    # Let's fix v1 = 1.\n    # Now we need to find v3 from {3, ..., n}.\n    # The arc between 1 and v3 (not containing 2).\n    # If v3 = 3, the arc is (1, 3). It has 1 edge (1-3). Angle = 1 * (180/n).\n    # If v3 = 4, the arc is (1, 4). It has 2 edges (1-3, 3-4). Angle = 2 * (180/n).\n    # If v3 = `j`, the arc is (1, `j`). It has `j-2` edges. Angle = (j-2) * (180/n).\n    # So `k = j-2`.\n    # Smallest `j` is 3, so smallest `k` is 3-2 = 1.\n    # Largest `j` is `n`, so largest `k` is `n-2`.\n    # So, `k` (number of edges in the arc from v1 to v3, NOT containing v2) can range from 1 to n-2.\n\n    # Iterate `k` from 1 to n-2.\n    # Calculate `current_angle = k * (180 / n)`.\n    # Calculate `diff = abs(current_angle - a)`.\n    # If `diff < min_diff`, update `min_diff` and store `v1, v2, v3`.\n\n    # We can fix v2 = 2 and v1 = 1.\n    # Then for a given `k` (number of edges in the arc 1-v3), v3 = 2 + k.\n    # So, v1 = 1, v2 = 2, v3 = 2 + k.\n    # For this to be valid:\n    # v1=1, v2=2.\n    # v3 must be distinct from 1 and 2.\n    # So `2+k` must be != 1 and != 2.\n    # `2+k != 1` is true for k >= 1.\n    # `2+k != 2` is true for k >= 1.\n    # Also, v3 must be <= n. So `2+k <= n`, which means `k <= n-2`.\n    # So the range `k` from 1 to `n-2` is perfect.\n\n    for k in range(1, n - 1): # k from 1 to n-2\n        current_angle = k * (180 / n)\n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_v1 = 1\n            best_v2 = 2\n            best_v3 = 2 + k\n        # If diff is equal, we can take any. The problem says \"any of them\".\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 3523,
        "thoughts_token_count": 0
    }
}