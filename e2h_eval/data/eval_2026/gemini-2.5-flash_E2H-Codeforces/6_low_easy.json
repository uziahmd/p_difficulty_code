{
    "start": 1758009281.151089,
    "end": 1758009317.8600144,
    "start-formatted": "2025-09-16 16:54 KST",
    "end-formatted": "2025-09-16 16:55 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Thinking Through the Competitive Programming Problem**\n\nOkay, so I've got this competitive programming problem in front of me. The core of it is finding two vouchers that meet specific criteria: their combined duration equals a target value `x`, they don't overlap, and their total cost is minimized. If no such pair exists, I need to output -1. Straightforward, right? Well, let's break it down.\n\nFirst off, I've got my inputs: the number of vouchers, `n`, the target duration `x`, and the details of each voucher (start time, end time, and cost). Then, I have my constraints: `n` and `x` are limited, and so are the values for the start times, end times, and costs.\n\nThe conditions for choosing two vouchers are crucial. They can't be the same, they have to be non-overlapping (one must finish before the other starts), their durations have to sum up to `x`, and I need to minimize the combined cost. My first instinct, the brute-force approach, would be to iterate through every possible pair. However, a quick calculation tells me that's going to be too slow, and will result in a time-out. I need an approach with `O(N log N)` or, ideally, `O(N)` complexity.\n\nI’ll define the duration of voucher `k` as `duration_k = rk - lk + 1`. Now the total duration condition is  `duration_i + duration_j == x`.\n\nLet's think. If I fix one voucher, say `i`, I can then look for another, `j`, that satisfies the duration requirement, doesn't overlap, and has a minimal cost given `costi`. The overlap constraint is the tricky part. It can either mean `i` ends before `j` begins (`ri < lj`), or `j` ends before `i` begins (`rj < li`). Both cases are symmetric, and I suspect some clever processing might get me there. If I can process the vouchers in some defined order, maybe sorting them by their start or end times, I could possibly eliminate that overlap check by considering the relative positions.\n\nSorting by start time (`li`) seems like a promising direction. If I iterate through the vouchers in this sorted order, I could keep track of relevant preceding vouchers and their properties. Maybe I can efficiently find the optimal `j` for each `i`?\n\nSo, if I'm at voucher `i`, with its start, end, and cost, I'm looking for a `j` such that `duration_j = x - duration_i` and the non-overlapping condition holds. With `i` sorted by `li`, if `j` ends before `i` begins, then `rj < li`, I can potentially optimize my search for these `j` vouchers. I need to keep the information about them in order.\n\nOkay, let's start implementing this with the sorting strategy.\n",
    "response": "The problem asks us to find two distinct, non-overlapping vouchers whose total duration is exactly `x` and whose combined cost is minimized.\n\nLet `duration_k = rk - lk + 1` for any voucher `k`. We are looking for vouchers `i` and `j` such that:\n1.  `i != j`\n2.  `duration_i + duration_j == x`\n3.  Vouchers `i` and `j` do not intersect. This means either `ri < lj` (voucher `i` ends before `j` starts) or `rj < li` (voucher `j` ends before `i` starts).\n4.  `costi + costj` is minimized.\n\nA brute-force `O(N^2)` approach would be too slow given `N <= 2 * 10^5`. We need a more efficient approach, likely `O(N log N)` or `O(N)`.\n\nLet's rephrase the non-overlapping condition. It means one voucher must entirely precede the other.\nConsider iterating through all vouchers. For each voucher `i = (li, ri, costi)`, we need to find a suitable voucher `j = (lj, rj, costj)`.\nThe required duration for `j` is `duration_j = x - duration_i`. If `duration_j <= 0`, then no such `j` can exist, so we skip `i`.\n\nWe can optimize by processing the vouchers in a specific order. Let's sort all vouchers by their start day `li`. If `li` are equal, sort by `ri`.\n\nWe can maintain a data structure that stores information about previously processed vouchers. This data structure should allow us to efficiently query for a voucher `j` that satisfies `rj < li` (for the current voucher `i`) and has the required `duration_j`.\n\nLet's use an array (or hash map) `min_cost_for_duration[d]` which stores the minimum cost of a voucher with duration `d` that has *already ended*.\nThe maximum possible value for `ri` (and `li`) is `2 * 10^5`. Let `MAX_DAY = 2 * 10^5`.\nThe maximum possible duration `x` is `2 * 10^5`.\n\nWe can iterate through the days from `1` to `MAX_DAY`. For each day `d_curr`:\n1.  **Update `min_cost_for_duration`**: For all vouchers `k` that *end* on `d_curr - 1` (i.e., `rk = d_curr - 1`), update `min_cost_for_duration[duration_k] = min(min_cost_for_duration[duration_k], cost_k)`. This ensures that `min_cost_for_duration[d]` always holds the minimum cost of a voucher with duration `d` that has finished by `d_curr - 1`.\n2.  **Process current vouchers**: For all vouchers `i` that *start* on `d_curr` (i.e., `li = d_curr`):\n    *   Calculate `duration_i = ri - li + 1`.\n    *   Calculate `required_duration_j = x - duration_i`.\n    *   If `required_duration_j > 0` and `required_duration_j <= MAX_DAY`:\n        *   Check `min_cost_for_duration[required_duration_j]`. If it's not infinity (meaning such a voucher `j` exists and has ended before `li`), then we have a potential pair `(i, j)`.\n        *   Update the overall minimum total cost `min_total_cost = min(min_total_cost, costi + min_cost_for_duration[required_duration_j])`.\n\nTo implement this efficiently:\n*   Group vouchers by their start day `li`. Let `vouchers_by_start_day[d]` be a list of `(ri, costi, duration)` for vouchers starting on day `d`.\n*   Group vouchers by their end day `ri`. Let `vouchers_by_end_day[d]` be a list of `(costi, duration)` for vouchers ending on day `d`.\n*   Initialize `min_cost_for_duration` array with a very large value (e.g., `float('inf')`). The size of this array should be `MAX_DAY + 1`.\n*   Initialize `min_total_cost` to a very large value.\n\nThe algorithm would be:\n1.  Read `n, x`.\n2.  Create `vouchers_by_start_day` and `vouchers_by_end_day` lists of lists (or dictionaries mapping day to list of vouchers). `MAX_DAY = 2 * 10^5`.\n3.  For each input voucher `(li, ri, costi)`:\n    *   `duration = ri - li + 1`.\n    *   Append `(ri, costi, duration)` to `vouchers_by_start_day[li]`.\n    *   Append `(costi, duration)` to `vouchers_by_end_day[ri]`.\n4.  Initialize `min_cost_for_duration = [float('inf')] * (MAX_DAY + 1)`.\n5.  Initialize `min_total_cost = float('inf')`.\n6.  Iterate `d_curr` from `1` to `MAX_DAY`:\n    *   **Process vouchers starting on `d_curr`**:\n        *   For each voucher `(ri, costi, duration_i)` in `vouchers_by_start_day[d_curr]`:\n            *   `required_duration_j = x - duration_i`.\n            *   If `1 <= required_duration_j <= MAX_DAY` and `min_cost_for_duration[required_duration_j]` is not `float('inf')`:\n                *   `min_total_cost = min(min_total_cost, costi + min_cost_for_duration[required_duration_j])`.\n    *   **Update `min_cost_for_duration` for vouchers ending on `d_curr`**:\n        *   For each voucher `(cost_k, duration_k)` in `vouchers_by_end_day[d_curr]`:\n            *   `min_cost_for_duration[duration_k] = min(min_cost_for_duration[duration_k], cost_k)`.\n\n7.  After the loop, if `min_total_cost` is still `float('inf')`, print `-1`. Otherwise, print `min_total_cost`.\n\n**Example Walkthrough**:\n`n=4, x=5`\nVouchers: `(1,3,4), (1,2,5), (5,6,1), (1,2,4)`\n\n1.  `MAX_DAY = 6` (max `ri` is 6).\n2.  `vouchers_by_start_day`:\n    *   `1: [(3,4,3), (2,5,2), (2,4,2)]`\n    *   `5: [(6,1,2)]`\n3.  `vouchers_by_end_day`:\n    *   `2: [(5,2), (4,2)]`\n    *   `3: [(4,3)]`\n    *   `6: [(1,2)]`\n4.  `min_cost_for_duration = [inf, inf, ..., inf]` (size 7)\n5.  `min_total_cost = inf`\n\nLoop `d_curr` from 1 to 6:\n\n*   `d_curr = 1`:\n    *   **Start day 1**:\n        *   Voucher `(3,4,3)`: `dur_i=3`, `req_dur_j=5-3=2`. `min_cost_for_duration[2]` is `inf`. No update.\n        *   Voucher `(2,5,2)`: `dur_i=2`, `req_dur_j=5-2=3`. `min_cost_for_duration[3]` is `inf`. No update.\n        *   Voucher `(2,4,2)`: `dur_i=2`, `req_dur_j=5-2=3`. `min_cost_for_duration[3]` is `inf`. No update.\n    *   **End day 1**: No vouchers.\n*   `d_curr = 2`:\n    *   **Start day 2**: No vouchers.\n    *   **End day 2**:\n        *   Voucher `(5,2)`: `min_cost_for_duration[2] = min(inf, 5) = 5`.\n        *   Voucher `(4,2)`: `min_cost_for_duration[2] = min(5, 4) = 4`.\n        *   `min_cost_for_duration` is now `[inf, inf, 4, inf, inf, inf, inf]`\n*   `d_curr = 3`:\n    *   **Start day 3**: No vouchers.\n    *   **End day 3**:\n        *   Voucher `(4,3)`: `min_cost_for_duration[3] = min(inf, 4) = 4`.\n        *   `min_cost_for_duration` is now `[inf, inf, 4, 4, inf, inf, inf]`\n*   `d_curr = 4`: No activity.\n*   `d_curr = 5`:\n    *   **Start day 5**:\n        *   Voucher `(6,1,2)`: `dur_i=2`, `req_dur_j=5-2=3`. `min_cost_for_duration[3]` is `4`.\n            *   `min_total_cost = min(inf, cost_i + min_cost_for_duration[3]) = min(inf, 1 + 4) = 5`.\n    *   **End day 5**: No activity.\n*   `d_curr = 6`:\n    *   **Start day 6**: No activity.\n    *   **End day 6**:\n        *   Voucher `(1,2)`: `min_cost_for_duration[2] = min(4, 1) = 1`. (This update doesn't affect `min_total_cost` as we already processed all future starting vouchers).\n\nFinal `min_total_cost = 5`.\n\n**Complexity Analysis**:\n*   Reading input and grouping vouchers: `O(N)`. `MAX_DAY` is `2 * 10^5`, so initializing lists is `O(MAX_DAY)`.\n*   Iterating `d_curr` from `1` to `MAX_DAY`: `O(MAX_DAY)` iterations.\n    *   Inside the loop, processing `vouchers_by_start_day[d_curr]` and `vouchers_by_end_day[d_curr]`: Each voucher is added to these lists once and processed once across all `d_curr`. So, the total work across all iterations for these steps is `O(N)`.\n*   Total time complexity: `O(N + MAX_DAY)`. Given `N, MAX_DAY <= 2 * 10^5`, this is efficient enough.\n*   Space complexity: `O(N + MAX_DAY)` for storing vouchers and `min_cost_for_duration`.\n\n```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    MAX_COORD = 2 * 10**5 # Maximum value for li or ri\n    \n    # vouchers_by_start_day[d] stores a list of (ri, costi, duration) for vouchers starting on day d\n    vouchers_by_start_day = [[] for _ in range(MAX_COORD + 1)]\n    # vouchers_by_end_day[d] stores a list of (costi, duration) for vouchers ending on day d\n    vouchers_by_end_day = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        li, ri, costi = map(int, sys.stdin.readline().split())\n        duration = ri - li + 1\n        vouchers_by_start_day[li].append((ri, costi, duration))\n        vouchers_by_end_day[ri].append((costi, duration))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher with duration 'd'\n    # that has already ended by the current day (d_curr - 1).\n    min_cost_for_duration = [float('inf')] * (MAX_COORD + 1)\n\n    min_total_cost = float('inf')\n\n    for d_curr in range(1, MAX_COORD + 1):\n        # Step 1: Process vouchers that start on d_curr\n        # For each voucher (i) starting on d_curr, we look for a previous voucher (j)\n        # such that j.r < i.l (which is d_curr).\n        # The min_cost_for_duration array already holds costs for vouchers that ended\n        # on or before d_curr - 1.\n        for ri, costi, duration_i in vouchers_by_start_day[d_curr]:\n            required_duration_j = x - duration_i\n            \n            # Ensure required_duration_j is valid (positive and within bounds)\n            if 1 <= required_duration_j <= MAX_COORD:\n                if min_cost_for_duration[required_duration_j] != float('inf'):\n                    min_total_cost = min(min_total_cost, costi + min_cost_for_duration[required_duration_j])\n        \n        # Step 2: Update min_cost_for_duration for vouchers that end on d_curr\n        # These vouchers are now candidates for future vouchers starting on d_curr + 1 or later.\n        for costi, duration_k in vouchers_by_end_day[d_curr]:\n            min_cost_for_duration[duration_k] = min(min_cost_for_duration[duration_k], costi)\n\n    if min_total_cost == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(min_total_cost) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    MAX_COORD = 2 * 10**5 # Maximum value for li or ri\n    \n    # vouchers_by_start_day[d] stores a list of (ri, costi, duration) for vouchers starting on day d\n    vouchers_by_start_day = [[] for _ in range(MAX_COORD + 1)]\n    # vouchers_by_end_day[d] stores a list of (costi, duration) for vouchers ending on day d\n    vouchers_by_end_day = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        li, ri, costi = map(int, sys.stdin.readline().split())\n        duration = ri - li + 1\n        vouchers_by_start_day[li].append((ri, costi, duration))\n        vouchers_by_end_day[ri].append((costi, duration))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher with duration 'd'\n    # that has already ended by the current day (d_curr - 1).\n    min_cost_for_duration = [float('inf')] * (MAX_COORD + 1)\n\n    min_total_cost = float('inf')\n\n    for d_curr in range(1, MAX_COORD + 1):\n        # Step 1: Process vouchers that start on d_curr\n        # For each voucher (i) starting on d_curr, we look for a previous voucher (j)\n        # such that j.r < i.l (which is d_curr).\n        # The min_cost_for_duration array already holds costs for vouchers that ended\n        # on or before d_curr - 1.\n        for ri, costi, duration_i in vouchers_by_start_day[d_curr]:\n            required_duration_j = x - duration_i\n            \n            # Ensure required_duration_j is valid (positive and within bounds)\n            if 1 <= required_duration_j <= MAX_COORD:\n                if min_cost_for_duration[required_duration_j] != float('inf'):\n                    min_total_cost = min(min_total_cost, costi + min_cost_for_duration[required_duration_j])\n        \n        # Step 2: Update min_cost_for_duration for vouchers that end on d_curr\n        # These vouchers are now candidates for future vouchers starting on d_curr + 1 or later.\n        for costi, duration_k in vouchers_by_end_day[d_curr]:\n            min_cost_for_duration[duration_k] = min(min_cost_for_duration[duration_k], costi)\n\n    if min_total_cost == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(min_total_cost) + \"\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 798,
        "completion_token_count": 3350,
        "thoughts_token_count": 764
    }
}