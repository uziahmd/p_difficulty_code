{
    "start": 1758294866.9797163,
    "end": 1758294941.7713249,
    "start-formatted": "2025-09-20 00:14 KST",
    "end-formatted": "2025-09-20 00:15 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Maximizing Daily Problem Difficulty for Optimal Profit**\n\nOkay, so I'm tackling this competitive programming problem. The goal is to maximize the total profit from solving problems over a set number of days. The profit for each day is determined by the highest difficulty problem solved on that day. So, the first thought is, to get the maximum total profit, I need to make the daily maximums as large as possible.  It's like, pick the 'best' problems for each day.\n\nThe core idea here is to grab the *k* largest difficulty problems and make sure each of them is the maximum for one of the *k* days.  If I can arrange the problem set into *k* segments, with each segment's maximum being one of these *k* largest problems, I'm golden.  Finding the sum of those largest problems then is the key.\n\nHow do I do this? Well, the strategy becomes pretty clear.  First, sort the problems by difficulty (in descending order, of course). Then, I take the *k* largest difficulties.  Then, figure out how to split the sequence of problems such that each of the *k* largest problems becomes the maximum within one of the segments.  It turns out, making cuts in the original problem sequence *just after* the indices of those largest problems guarantees that those difficulties are the maxima. I don't need to overthink it - the arrangement is inherent in the top *k* selections.\n\nSo, calculate the sum of the *k* largest, find their original indices. Sort the indices, and calculate the size of each segment by taking differences.  The segments, of course, are the problems solved on each day. It seems pretty elegant, and after checking several edge cases and example solutions, I am confident that I have an efficient and correct approach. The time complexity is dominated by sorting, so it's *O(N log N)*, which should be fine.\n",
    "response": "The problem asks us to partition `n` problems, given by their difficulties `a_1, ..., a_n`, into exactly `k` contiguous sequences (days). Each day, Polycarp solves a sequence of problems, and the \"profit\" for that day is the maximum difficulty among problems solved on that day. We want to maximize the total profit, which is the sum of daily profits, and output this maximum profit along with the number of problems solved each day.\n\n**Core Idea:**\nTo maximize the sum of `k` daily maximums, we should choose the `k` largest problem difficulties from the entire list `a`. Let these `k` largest difficulties be `M_1, M_2, ..., M_k`. The maximum possible total profit will be `sum(M_i)`. We need to show that we can always partition the problems in such a way that each of these `M_i` values becomes the maximum of one of the `k` days.\n\n**Strategy:**\n1.  **Identify the `k` largest difficulties:** Create pairs of `(difficulty, original_index)` for all problems. Sort these pairs in descending order of difficulty. Take the first `k` pairs. These `k` pairs represent the `k` largest difficulties and their original positions in the input array.\n2.  **Calculate maximum total profit:** Sum the difficulties from the `k` selected pairs. This is our maximum total profit.\n3.  **Determine problem distribution (`t_j` values):**\n    *   Extract the original indices of the `k` selected problems. Let these indices be `idx_1, idx_2, ..., idx_k`.\n    *   Sort these indices in ascending order: `p_1 < p_2 < ... < p_k`. These `p_j` values mark the positions of the chosen maximums.\n    *   We need to make `k-1` cuts in the problem sequence to create `k` days. A simple and valid way to do this is to make a cut immediately after each of the first `k-1` chosen maximums.\n    *   Specifically, the first day will include problems from index `0` up to `p_1`.\n    *   The second day will include problems from `p_1+1` up to `p_2`.\n    *   ...\n    *   The `j`-th day will include problems from `p_{j-1}+1` up to `p_j`.\n    *   The `k`-th day will include problems from `p_{k-1}+1` up to `n-1` (the end of the list).\n\n    This partitioning ensures that `a[p_j]` is the maximum for its respective day. Why? Because `a[p_j]` is one of the `k` largest values overall. Any problem `a[i]` within the same day's segment that is *not* one of the `k` largest values must have `a[i] <= a[p_j]`. If `a[i]` *is* one of the `k` largest values, its index `p_x` would have been chosen. Since `p_j` is the largest index in its segment among the chosen indices, `a[p_j]` will indeed be the maximum for that day.\n\n    To calculate the number of problems `t_j` for each day:\n    *   `t_1 = p_1 - (-1) = p_1 + 1` (problems from index 0 to `p_1`)\n    *   `t_j = p_j - p_{j-1}` for `j = 2, ..., k-1` (problems from `p_{j-1}+1` to `p_j`)\n    *   `t_k = (n-1) - p_{k-1}` (problems from `p_{k-1}+1` to `n-1`)\n\n**Example Walkthrough (`n=8, k=3, a = [5, 4, 2, 6, 5, 1, 9, 2]`):**\n\n1.  **Pairs (difficulty, index):** `[(5,0), (4,1), (2,2), (6,3), (5,4), (1,5), (9,6), (2,7)]`\n2.  **Sort by difficulty (descending):** `[(9,6), (6,3), (5,0), (5,4), (4,1), (2,2), (2,7), (1,5)]`\n3.  **Top `k=3` elements:** `[(9,6), (6,3), (5,0)]` (Note: If there are ties in difficulty, Python's stable sort or default tuple comparison will pick the one with the smaller index first. This is fine as any choice of `k` largest values works).\n4.  **Maximum total profit:** `9 + 6 + 5 = 20`.\n5.  **Original indices of top `k` elements:** `[6, 3, 0]`\n6.  **Sorted indices (`p`):** `[0, 3, 6]`\n7.  **Calculate `t_j` values:**\n    *   `prev_cut = -1`\n    *   For `p_1 = 0`: `t_1 = 0 - (-1) = 1`. `prev_cut = 0`.\n    *   For `p_2 = 3`: `t_2 = 3 - 0 = 3`. `prev_cut = 3`.\n    *   (Loop ends as we've processed `k-1 = 2` cuts)\n    *   Last day `t_3`: `n - 1 - prev_cut = 8 - 1 - 3 = 4`.\n    *   Resulting `t` values: `[1, 3, 4]`.\n\n    This means the distribution is:\n    *   Day 1: `a[0]` (`[5]`) - Max is 5.\n    *   Day 2: `a[1...3]` (`[4, 2, 6]`) - Max is 6.\n    *   Day 3: `a[4...7]` (`[5, 1, 9, 2]`) - Max is 9.\n    Total profit: `5 + 6 + 9 = 20`. This is a valid distribution.\n\n**Complexity:**\n*   Time: O(N log N) due to sorting the `N` problems.\n*   Space: O(N) for storing problem difficulties with their indices.\nGiven `N <= 2000`, this solution is efficient enough.\n\n```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Step 1: Create (difficulty, original_index) pairs\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Step 2: Sort by difficulty in descending order\n    # If difficulties are equal, the original index order is maintained by Python's stable sort,\n    # or by default tuple comparison (smaller index comes first).\n    # This doesn't affect the total profit, and for cuts, any choice is valid.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Step 3: Select the top k elements\n    top_k_elements = indexed_a[:k]\n\n    # Step 4: Calculate the maximum total profit\n    max_total_profit = sum(val for val, _ in top_k_elements)\n    print(max_total_profit)\n\n    # Step 5: Extract and sort the original indices of these k elements\n    cut_indices = sorted([idx for _, idx in top_k_elements])\n\n    # Step 6: Calculate the number of problems for each day\n    t_values = []\n    prev_cut = -1  # Represents the start of the first segment (index 0)\n\n    for i in range(k - 1):\n        current_cut = cut_indices[i]\n        # The segment goes from prev_cut + 1 to current_cut\n        # Number of problems: current_cut - (prev_cut + 1) + 1 = current_cut - prev_cut\n        t_values.append(current_cut - prev_cut)\n        prev_cut = current_cut\n    \n    # The last segment goes from prev_cut + 1 to n - 1\n    # Number of problems: (n - 1) - (prev_cut + 1) + 1 = n - 1 - prev_cut\n    t_values.append(n - 1 - prev_cut)\n\n    print(*(t_values))\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Step 1: Create (difficulty, original_index) pairs\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Step 2: Sort by difficulty in descending order\n    # If difficulties are equal, the original index order is maintained by Python's stable sort,\n    # or by default tuple comparison (smaller index comes first).\n    # This doesn't affect the total profit, and for cuts, any choice is valid.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Step 3: Select the top k elements\n    top_k_elements = indexed_a[:k]\n\n    # Step 4: Calculate the maximum total profit\n    max_total_profit = sum(val for val, _ in top_k_elements)\n    print(max_total_profit)\n\n    # Step 5: Extract and sort the original indices of these k elements\n    cut_indices = sorted([idx for _, idx in top_k_elements])\n\n    # Step 6: Calculate the number of problems for each day\n    t_values = []\n    prev_cut = -1  # Represents the start of the first segment (index 0)\n\n    for i in range(k - 1):\n        current_cut = cut_indices[i]\n        # The segment goes from prev_cut + 1 to current_cut\n        # Number of problems: current_cut - (prev_cut + 1) + 1 = current_cut - prev_cut\n        t_values.append(current_cut - prev_cut)\n        prev_cut = current_cut\n    \n    # The last segment goes from prev_cut + 1 to n - 1\n    # Number of problems: (n - 1) - (prev_cut + 1) + 1 = n - 1 - prev_cut\n    t_values.append(n - 1 - prev_cut)\n\n    print(*(t_values))\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 972,
        "completion_token_count": 2017,
        "thoughts_token_count": 8190
    }
}