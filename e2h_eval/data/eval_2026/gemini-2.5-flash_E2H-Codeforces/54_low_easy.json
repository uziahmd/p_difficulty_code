{
    "start": 1758284877.6021187,
    "end": 1758284897.426178,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Alright, let's break this down.**  I need to write a Python script for this \"Mister B and Angle in Polygon\" problem.  The core of it is finding three vertices in a regular n-gon that form an angle closest to a given target angle, `a`.  The n-gon has `n` sides, and `n` is between 3 and 10^5.  The target angle `a` is between 1 and 180 degrees.\n\nFirst, I need to remember the basics of angles in a regular polygon.  The central angle, the interior angle, all of that.  The key insight is about the inscribed angles. An inscribed angle is half of the central angle subtending the same arc.  If I can figure out the central angle associated with any three vertices, I know the inscribed angle.\n\nIt looks like I can simplify things by fixing one vertex, `v2`, as the vertex of the angle.  Without losing generality, I can set `v2` to be vertex number 2.  Then, I'll need to calculate the angles formed by vertices 1, 2, and any vertex 3 through n.  The crucial part is understanding the relationship between the distance (in terms of vertices) between `v1` and `v3` and the angle at `v2`. Since the central angle increases linearly with the number of sides covered, and the inscribed angle is half of the central angle, the calculation should be straightforward.  It's just the number of sides between my chosen `v1` and `v3` times `180/n` degrees.\n\nSo, I think I will iterate through possible vertex pairs around my fixed `v2`. For each pair, calculate the corresponding angle, and then keep track of the one that minimizes the absolute difference between that calculated angle and the target angle `a`. I need to handle the modular arithmetic correctly, especially when wrapping around the polygon. I should then be able to easily print the three vertices which give me the closest angle, and the problem will be solved.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    # The angle v1v2v3, where v2 is the vertex, is an inscribed angle.\n    # Its measure is half the measure of the central angle subtending the arc v1v3.\n    # If there are 'k' edges between v1 and v3 (along the arc not containing v2),\n    # the central angle is k * (360/n).\n    # So the inscribed angle is k * (180/n).\n    # 'k' can range from 1 to n-2.\n    # The smallest possible angle is 1 * (180/n).\n    # The largest possible angle is (n-2) * (180/n), which is the interior angle of the polygon.\n\n    # We can fix v2 to be vertex 2.\n    # We can fix v1 to be vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # If v3 is vertex (2 + k), then there are 'k' edges between v1 (vertex 1) and v3 (vertex 2+k)\n    # on the arc that does not contain v2 (vertex 2).\n    # Specifically, the path from v1 to v3 (not through v2) involves vertices 1, n, n-1, ..., 2+k.\n    # This is not the simplest way to count k.\n\n    # A simpler way:\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Let v3 be vertex `i`.\n    # The number of vertices on the arc from v1 to v3 (not including v1 and v3, and not including v2)\n    # determines the angle.\n    # The number of 'steps' along the perimeter from v1 to v3 (not passing through v2).\n    # If we fix v2 as vertex 2, and v1 as vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The arc between v1 and v3 (the one that doesn't contain v2) will span `i-1` edges\n    # if we consider the path 1 -> 2 -> ... -> i. This is wrong.\n\n    # Correct approach for k:\n    # Let v2 be the vertex.\n    # Let v1 and v3 be the other two vertices.\n    # The angle v1v2v3 depends on the number of edges 'k' on the arc v1v3 *not* containing v2.\n    # The value of k can range from 1 to n-2.\n    # For example, if v2=2, v1=1, v3=3, then k=1 (edge 1-3). Angle = 1 * (180/n).\n    # If v2=2, v1=1, v3=4, then k=2 (edges 1-3, 3-4). Angle = 2 * (180/n).\n    # ...\n    # If v2=2, v1=1, v3=n, then k=n-2 (edges 1-3, ..., (n-1)-n). Angle = (n-2) * (180/n).\n    # So the possible angles are `k * (180/n)` for `k` from 1 to n-2.\n\n    min_diff = float('inf')\n    best_k = -1\n\n    # Iterate through all possible values of k (number of edges on the arc v1v3)\n    # k ranges from 1 to n-2.\n    for k in range(1, n - 1):\n        current_angle = k * (180 / n)\n        diff = abs(current_angle - a)\n        if diff < min_diff:\n            min_diff = diff\n            best_k = k\n\n    # Now we have the optimal 'best_k'. We need to find v1, v2, v3.\n    # We can choose v2 = 2.\n    # We can choose v1 = 1.\n    # Then v3 should be the vertex such that the arc v1v3 (not containing v2) spans 'best_k' edges.\n    # If v1=1, v2=2, then v3 should be vertex (2 + best_k).\n    # This ensures that there are 'best_k' edges between 1 and (2+best_k) along the path 1 -> (n) -> (n-1) -> ... -> (2+best_k).\n    # No, this is simpler:\n    # If v2 is vertex 2.\n    # If v1 is vertex 1.\n    # Then v3 is vertex `2 + best_k`.\n    # Let's check:\n    # Vertices are 1, 2, ..., n.\n    # v1 = 1, v2 = 2.\n    # v3 = 2 + best_k.\n    # The vertices on the arc from v1 to v3 *not* containing v2 are 1, n, n-1, ..., 2+best_k.\n    # This is not directly `k` edges.\n\n    # Let's use a consistent numbering for vertices.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # The third vertex v3 must be distinct from v1 and v2.\n    # It must be some vertex `j` where `j` is from `3` to `n`.\n    # The angle `v1v2v3` means the arc `v1v3` (the one not containing `v2`) determines the angle.\n    # The arc `1 -> j` (not containing `2`) means the path `1, n, n-1, ..., j`.\n    # The number of edges in this path is `(n - 1) - (j - 1) + 1 = n - j + 1`. This is wrong.\n\n    # Let's use the definition of k: the number of edges between v1 and v3 along the arc not containing v2.\n    # If v2 is vertex 2.\n    # Let v1 be vertex 1.\n    # We want to find v3 such that the arc (1, v3) has `best_k` edges and does not contain 2.\n    # This means v3 should be `2 + best_k`.\n    # Example: n=4, best_k=1. Angle = 1 * (180/4) = 45.\n    # v2=2, v1=1. v3 = 2+1 = 3. Output: 1 2 3. Angle 1-2-3 is 45 degrees. Correct.\n    # Example: n=4, best_k=2. Angle = 2 * (180/4) = 90.\n    # v2=2, v1=1. v3 = 2+2 = 4. Output: 1 2 4. Angle 1-2-4 is 90 degrees. Correct.\n\n    # So, v1=1, v2=2, v3=2+best_k.\n    # These vertices are distinct:\n    # 1 != 2 (n >= 3)\n    # 1 != 2+best_k (best_k >= 1)\n    # 2 != 2+best_k (best_k >= 1)\n    # And 2+best_k <= n because best_k <= n-2. So 2+best_k <= n.\n    # All vertices are valid and distinct.\n\n    v1 = 1\n    v2 = 2\n    v3 = 2 + best_k\n\n    sys.stdout.write(f\"{v1} {v2} {v3}\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    # The angle v1v2v3, where v2 is the vertex, is an inscribed angle.\n    # Its measure is half the measure of the central angle subtending the arc v1v3.\n    # If there are 'k' edges between v1 and v3 (along the arc not containing v2),\n    # the central angle is k * (360/n).\n    # So the inscribed angle is k * (180/n).\n    # 'k' can range from 1 to n-2.\n    # The smallest possible angle is 1 * (180/n).\n    # The largest possible angle is (n-2) * (180/n), which is the interior angle of the polygon.\n\n    # We can fix v2 to be vertex 2.\n    # We can fix v1 to be vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # If v3 is vertex (2 + k), then there are 'k' edges between v1 (vertex 1) and v3 (vertex 2+k)\n    # on the arc that does not contain v2 (vertex 2).\n    # Specifically, the path from v1 to v3 (not through v2) involves vertices 1, n, n-1, ..., 2+k.\n    # This is not the simplest way to count k.\n\n    # A simpler way:\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Let v3 be vertex `i`.\n    # The number of vertices on the arc from v1 to v3 (not including v1 and v3, and not including v2)\n    # determines the angle.\n    # The number of 'steps' along the perimeter from v1 to v3 (not passing through v2).\n    # If we fix v2 as vertex 2, and v1 as vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The arc between v1 and v3 (the one that doesn't contain v2) will span `i-1` edges\n    # if we consider the path 1 -> 2 -> ... -> i. This is wrong.\n\n    # Correct approach for k:\n    # Let v2 be the vertex.\n    # Let v1 and v3 be the other two vertices.\n    # The angle v1v2v3 depends on the number of edges 'k' on the arc v1v3 *not* containing v2.\n    # The value of k can range from 1 to n-2.\n    # For example, if v2=2, v1=1, v3=3, then k=1 (edge 1-3). Angle = 1 * (180/n).\n    # If v2=2, v1=1, v3=4, then k=2 (edges 1-3, 3-4). Angle = 2 * (180/n).\n    # ...\n    # If v2=2, v1=1, v3=n, then k=n-2 (edges 1-3, ..., (n-1)-n). Angle = (n-2) * (180/n).\n    # So the possible angles are `k * (180/n)` for `k` from 1 to n-2.\n\n    min_diff = float('inf')\n    best_k = -1\n\n    # Iterate through all possible values of k (number of edges on the arc v1v3)\n    # k ranges from 1 to n-2.\n    for k in range(1, n - 1):\n        current_angle = k * (180 / n)\n        diff = abs(current_angle - a)\n        if diff < min_diff:\n            min_diff = diff\n            best_k = k\n\n    # Now we have the optimal 'best_k'. We need to find v1, v2, v3.\n    # We can choose v2 = 2.\n    # We can choose v1 = 1.\n    # Then v3 should be the vertex such that the arc v1v3 (not containing v2) spans 'best_k' edges.\n    # If v1=1, v2=2, then v3 should be vertex (2 + best_k).\n    # This ensures that there are 'best_k' edges between 1 and (2+best_k) along the path 1 -> (n) -> (n-1) -> ... -> (2+best_k).\n    # No, this is simpler:\n    # If v2 is vertex 2.\n    # If v1 is vertex 1.\n    # Then v3 is vertex `2 + best_k`.\n    # Let's check:\n    # Vertices are 1, 2, ..., n.\n    # v1 = 1, v2 = 2.\n    # v3 = 2 + best_k.\n    # The vertices on the arc from v1 to v3 *not* containing v2 are 1, n, n-1, ..., 2+best_k.\n    # This is not directly `k` edges.\n\n    # Let's use a consistent numbering for vertices.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # The third vertex v3 must be distinct from v1 and v2.\n    # It must be some vertex `j` where `j` is from `3` to `n`.\n    # The angle `v1v2v3` means the arc `v1v3` (the one not containing `v2`) determines the angle.\n    # The arc `1 -> j` (not containing `2`) means the path `1, n, n-1, ..., j`.\n    # The number of edges in this path is `(n - 1) - (j - 1) + 1 = n - j + 1`. This is wrong.\n\n    # Let's use the definition of k: the number of edges between v1 and v3 along the arc not containing v2.\n    # If v2 is vertex 2.\n    # Let v1 be vertex 1.\n    # We want to find v3 such that the arc (1, v3) has `best_k` edges and does not contain 2.\n    # This means v3 should be `2 + best_k`.\n    # Example: n=4, best_k=1. Angle = 1 * (180/4) = 45.\n    # v2=2, v1=1. v3 = 2+1 = 3. Output: 1 2 3. Angle 1-2-3 is 45 degrees. Correct.\n    # Example: n=4, best_k=2. Angle = 2 * (180/4) = 90.\n    # v2=2, v1=1. v3 = 2+2 = 4. Output: 1 2 4. Angle 1-2-4 is 90 degrees. Correct.\n\n    # So, v1=1, v2=2, v3=2+best_k.\n    # These vertices are distinct:\n    # 1 != 2 (n >= 3)\n    # 1 != 2+best_k (best_k >= 1)\n    # 2 != 2+best_k (best_k >= 1)\n    # And 2+best_k <= n because best_k <= n-2. So 2+best_k <= n.\n    # All vertices are valid and distinct.\n\n    v1 = 1\n    v2 = 2\n    v3 = 2 + best_k\n\n    sys.stdout.write(f\"{v1} {v2} {v3}\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 738,
        "completion_token_count": 1847,
        "thoughts_token_count": 790
    }
}