{
    "start": 1758009322.4926355,
    "end": 1758009366.4460506,
    "start-formatted": "2025-09-16 16:55 KST",
    "end-formatted": "2025-09-16 16:56 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Analyzing the Snowflake Vertex Formula**\n\nOkay, so I'm tackling this \"Rudolf and Snowflakes (hard version)\" problem. It looks like I need a Python script to figure out if a given number of vertices (`n`) can be constructed according to these snowflake rules.  Let's see, it boils down to understanding the math behind the snowflake's structure.\n\nThe basic idea is this: we start with one center vertex. Then, we connect it to `k` new vertices, where `k` is greater than 1. That gives us `1 + k` vertices.  But now we get to the fun part - the recursive step! Each of these initial `k` vertices, which are currently only connected to the center, gets connected to *another* `k` new vertices.  This process, which has to happen *at least* once (let's say it happens `d` times), is what determines the total number of vertices.\n\nLet's trace it out: after the first connection we get `1 + k` vertices.  Then, after the recursive step once, we add `k * k = k^2` new vertices, giving us `1 + k + k^2` vertices. Doing it again, we get `1 + k + k^2 + k^3` vertices. You can see the pattern. It's a geometric series!\n\nGeneralizing, if we apply the recursive step `d` times, the total number of vertices `n` will be the sum of a geometric series: `1 + k + k^2 + ... + k^(d+1)`.  The closed-form solution for this sum is `(k^(d+2) - 1) / (k - 1)`.\n\nSo, the core of the problem is: given an `n`, can we find integer values for `k` (greater than 1) and `d` (greater than or equal to 1) that satisfy this equation?  That's what the Python script needs to do - efficiently check different values of `k` and `d` to see if they produce the given `n`. The constraints are key here: `k > 1` and `d >= 1`.  A starting point will be `d=1`, which will result in `n = 1 + k + k^2`. I need to figure out how to efficiently search for `k` and `d` that will work. Time to get coding!\n",
    "response": "The problem defines a snowflake as an undirected graph with `n` vertices. Let's analyze its construction:\n1.  Starts with 1 vertex (the center).\n2.  The center connects to `k` new vertices, where `k > 1`.\n    *   Total vertices: `1 + k`.\n3.  This step is performed at least once: Each vertex connected to only one other vertex is connected to `k` more new vertices.\n\nLet `d` be the number of times this recursive step (rule 3) is applied. The problem states \"This step should be done at least once\", so `d >= 1`.\n\nLet's trace the total number of vertices `n`:\n*   **Initial:** 1 vertex (center).\n*   **After rule 2:** `k` new vertices are added, connected to the center. Total vertices: `1 + k`. These `k` vertices are leaves.\n*   **After 1st application of rule 3 (`d=1`):** Each of the `k` leaves connects to `k` new vertices. `k * k = k^2` new vertices are added.\n    *   Total vertices: `1 + k + k^2`.\n    *   These `k^2` vertices are now the leaves.\n*   **After 2nd application of rule 3 (`d=2`):** Each of the `k^2` leaves connects to `k` new vertices. `k^2 * k = k^3` new vertices are added.\n    *   Total vertices: `1 + k + k^2 + k^3`.\n    *   These `k^3` vertices are now the leaves.\n*   **After `d` applications of rule 3:** The total number of vertices `n` will be the sum of a geometric series:\n    `n = 1 + k + k^2 + ... + k^(d+1)`\n\nThis sum can be written as `n = (k^(d+2) - 1) / (k - 1)`.\nWe need to find if, for a given `n` (`1 <= n <= 10^18`), there exist integers `k` and `d` such that `k > 1` and `d >= 1` and the equation holds.\n\nLet `p = d + 1`. Since `d >= 1`, we have `p >= 2`.\nThe equation becomes `n = 1 + k + k^2 + ... + k^p`.\nThis can be rewritten as `n - 1 = k + k^2 + ... + k^p = k * (1 + k + ... + k^(p-1))`.\n\nWe can categorize the search for `k` and `p`:\n\n**Case 1: `p = 2` (i.e., `d = 1`)**\nThis is the smallest possible snowflake.\n`n = 1 + k + k^2`.\nRearranging, `k^2 + k + (1 - n) = 0`.\nThis is a quadratic equation for `k`. Using the quadratic formula:\n`k = (-1 ± sqrt(1 - 4 * 1 * (1 - n))) / 2`\n`k = (-1 ± sqrt(1 - 4 + 4n)) / 2`\n`k = (-1 ± sqrt(4n - 3)) / 2`\nFor `k` to be a valid integer `> 1`:\n1.  `4n - 3` must be a perfect square. Let `sqrt_val = sqrt(4n - 3)`.\n2.  `sqrt_val` must be an integer.\n3.  `(-1 + sqrt_val)` must be positive and even. Since `k > 1`, `sqrt_val` must be `> 3`.\n    If `sqrt_val` is an integer, `4n-3` has the same parity as `sqrt_val^2`. `4n-3` is always odd, so `sqrt_val` must be odd. If `sqrt_val` is odd, then `-1 + sqrt_val` is even, so `k` will be an integer.\n    We just need to check if `4n - 3` is a perfect square, calculate `k = (-1 + sqrt(4n - 3)) / 2`, and verify `k > 1`.\n    The maximum `n` is `10^18`, so `4n-3` can be up to `4 * 10^18`. Its square root can be up to `2 * 10^9`. This check is efficient.\n\n**Case 2: `p >= 3` (i.e., `d >= 2`)**\nHere `n = 1 + k + k^2 + ... + k^p`.\nSince `k > 1`, we have:\n`k^p < n`\n`k^p + k^(p-1) + ... + k + 1 = n`\nAlso, `n = 1 + k + ... + k^p < 1 + k + ... + k^p + k^(p+1) + ...`\n`n < sum_{i=0 to infinity} k^i = 1 / (1 - k)` (if `k < 1`, but `k > 1`).\nA tighter bound:\n`n = 1 + k + ... + k^p > k^p`\n`n = 1 + k + ... + k^p < 1 + k + ... + k^p + k^(p+1) = (k^(p+2) - 1) / (k-1)`\n`n < (k^(p+1) - 1) / (k-1) * k` is also not useful.\nA simpler bound:\n`n = 1 + k + k^2 + ... + k^p`.\nSince `k >= 2`, we have `n > k^p`.\nAlso, `n = 1 + k + ... + k^p < k^p + k^p + ... + k^p` (`p+1` times) = `(p+1)k^p`.\nSo, `k^p < n < (p+1)k^p`.\nFrom `k^p < n`, we get `k < n^(1/p)`.\nFrom `n < (p+1)k^p`, we get `k^p > n / (p+1)`, so `k > (n / (p+1))^(1/p)`.\n\nThe maximum value of `n` is `10^18`.\nIf `p` is large, `k` must be small.\nIf `p = 60` (approx `log_2(10^18)`), then `k` must be 2.\n`2^60 = (2^10)^6 = (1024)^6 approx (10^3)^6 = 10^18`.\nSo `p` can go up to about 60.\n\nWe can iterate `p` from `3` up to `60` (or `64` to be safe, as `2^63` is `9 * 10^18`).\nFor each `p`, we need to find `k`.\nWe know `k` is between `2` and `n^(1/p)`.\nThe maximum value for `n^(1/p)` when `p=3` is `(10^18)^(1/3) = 10^6`.\nSo, for each `p` from `3` to `60`, we need to search `k` in the range `[2, 10^6]`.\nThis search can be done efficiently using binary search for `k`.\nFor a fixed `p` and a candidate `k_mid`, we calculate `S = 1 + k_mid + ... + k_mid^p`.\n*   If `S == n`, we found a solution.\n*   If `S < n`, we need a larger `k`, so `low = k_mid + 1`.\n*   If `S > n`, we need a smaller `k`, so `high = k_mid - 1`.\n\nThe function `power_sum(k, p)` calculates `1 + k + ... + k^p`. It should handle potential overflow if `k^p` exceeds `n` or `10^18`.\nSince `n <= 10^18`, we can stop adding terms if the sum `S` exceeds `n`.\n\n**Summary of algorithm:**\n1.  Handle edge cases: `n=1, 2, 3, 4, 5, 6` are \"NO\".\n    *   `n=1`: `k>1, d>=1` impossible.\n    *   `n=2`: `1+k=2 => k=1` (not allowed). `1+k+k^2=2 => k^2+k-1=0` (no integer `k`).\n    *   Smallest snowflake `1+k+k^2`. For `k=2`, `n=1+2+4=7`. For `k=3`, `n=1+3+9=13`.\n    *   `n=6`: `k^2+k-5=0`, `D=1-4(-5)=21` not square.\n2.  **Check Case 1 (`p=2`):**\n    *   Calculate `val = 4n - 3`.\n    *   If `val < 0`, continue.\n    *   Calculate `sqrt_val = floor(sqrt(val))`.\n    *   If `sqrt_val * sqrt_val == val`:\n        *   Calculate `k = (-1 + sqrt_val) / 2`.\n        *   If `k` is an integer and `k > 1`, then `n` is a snowflake. Print \"YES\" and return.\n3.  **Check Case 2 (`p >= 3`):**\n    *   Iterate `p` from `3` to `60` (or `64`).\n    *   For each `p`, perform a binary search for `k` in the range `[2, 10^6]`.\n        *   `low = 2`, `high = 10^6`.\n        *   Inside binary search loop:\n            *   `k_mid = (low + high) // 2`.\n            *   Calculate `current_sum = 1`.\n            *   `term = 1`.\n            *   For `_` from `1` to `p`:\n                *   If `10^18 // k_mid < term` (potential overflow for `term * k_mid`), set `current_sum = n + 1` (to make it exceed `n`) and break.\n                *   `term *= k_mid`.\n                *   If `current_sum > n - term` (potential overflow for `current_sum + term`), set `current_sum = n + 1` and break.\n                *   `current_sum += term`.\n            *   If `current_sum == n`: Print \"YES\" and return.\n            *   If `current_sum < n`: `low = k_mid + 1`.\n            *   If `current_sum > n`: `high = k_mid - 1`.\n4.  If no `k, p` are found after checking both cases, print \"NO\".\n\nThe maximum value for `high` in binary search for `k` can be `n^(1/p)`. For `p=3`, `n^(1/3)` can be `10^6`. For `p=60`, `n^(1/60)` is `2`. So `[2, 10^6]` is a valid range for `k`.\n\n```python\nimport sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    # Case 1: p = 2 (d = 1), n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # k = (-1 + sqrt(1 - 4*(1-n))) / 2 = (-1 + sqrt(4n - 3)) / 2\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(discriminant**0.5)\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Check if k is an integer and k > 1\n            if (-1 + sqrt_discriminant) % 2 == 0:\n                k = (-1 + sqrt_discriminant) // 2\n                if k > 1:\n                    sys.stdout.write(\"YES\\n\")\n                    return\n\n    # Case 2: p >= 3 (d >= 2), n = 1 + k + k^2 + ... + k^p\n    # Iterate p from 3 up to a max value (log_2(10^18) is about 60)\n    # k can be at most n^(1/p). For p=3, k_max = (10^18)^(1/3) = 10^6.\n    # For p=60, k_max = (10^18)^(1/60) = 2.\n    # So k is in range [2, 10^6].\n    \n    # Max p to check: 2^p <= n => p <= log2(n). For n=10^18, log2(10^18) approx 59.79. So max_p is 59 or 60.\n    # Let's use 60 for safety.\n    \n    for p in range(3, 61): # p is the exponent of the last term (k^p)\n        low = 2\n        high = int(n**(1/p)) + 2 # Upper bound for k, add some buffer\n        # A tighter upper bound for k is max(2, int(n**(1/p)))\n        # However, k can be up to 10^6 when p=3.\n        # Max k_mid can be 10^6.\n        # Max k value to check is 10^6 (for p=3, n=10^18).\n        # For p=60, k can only be 2.\n        # So high can be capped at 10^6.\n        high = min(high, 10**6)\n\n        while low <= high:\n            k_mid = (low + high) // 2\n            if k_mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 1\n            term = 1\n            overflow = False\n\n            # Calculate 1 + k_mid + ... + k_mid^p\n            for _ in range(p): # Loop p times to get k_mid^1 to k_mid^p\n                # Check for overflow before multiplication\n                if n // k_mid < term: # term * k_mid would exceed n\n                    overflow = True\n                    break\n                term *= k_mid\n                \n                # Check for overflow before addition\n                if n - current_sum < term: # current_sum + term would exceed n\n                    overflow = True\n                    break\n                current_sum += term\n            \n            if overflow:\n                high = k_mid - 1 # k_mid is too large, sum exceeded n\n            elif current_sum == n:\n                sys.stdout.write(\"YES\\n\")\n                return\n            elif current_sum < n:\n                low = k_mid + 1\n            else: # current_sum > n\n                high = k_mid - 1\n\n    sys.stdout.write(\"NO\\n\")\n\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    # Case 1: p = 2 (d = 1), n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # k = (-1 + sqrt(1 - 4*(1-n))) / 2 = (-1 + sqrt(4n - 3)) / 2\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(discriminant**0.5)\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Check if k is an integer and k > 1\n            if (-1 + sqrt_discriminant) % 2 == 0:\n                k = (-1 + sqrt_discriminant) // 2\n                if k > 1:\n                    sys.stdout.write(\"YES\\n\")\n                    return\n\n    # Case 2: p >= 3 (d >= 2), n = 1 + k + k^2 + ... + k^p\n    # Iterate p from 3 up to a max value (log_2(10^18) is about 60)\n    # k can be at most n^(1/p). For p=3, k_max = (10^18)^(1/3) = 10^6.\n    # For p=60, k_max = (10^18)^(1/60) = 2.\n    # So k is in range [2, 10^6].\n    \n    # Max p to check: 2^p <= n => p <= log2(n). For n=10^18, log2(10^18) approx 59.79. So max_p is 59 or 60.\n    # Let's use 60 for safety.\n    \n    for p in range(3, 61): # p is the exponent of the last term (k^p)\n        low = 2\n        high = int(n**(1/p)) + 2 # Upper bound for k, add some buffer\n        # A tighter upper bound for k is max(2, int(n**(1/p)))\n        # However, k can be up to 10^6 when p=3.\n        # Max k_mid can be 10^6.\n        # Max k value to check is 10^6 (for p=3, n=10^18).\n        # For p=60, k can only be 2.\n        # So high can be capped at 10^6.\n        high = min(high, 10**6)\n\n        while low <= high:\n            k_mid = (low + high) // 2\n            if k_mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 1\n            term = 1\n            overflow = False\n\n            # Calculate 1 + k_mid + ... + k_mid^p\n            for _ in range(p): # Loop p times to get k_mid^1 to k_mid^p\n                # Check for overflow before multiplication\n                if n // k_mid < term: # term * k_mid would exceed n\n                    overflow = True\n                    break\n                term *= k_mid\n                \n                # Check for overflow before addition\n                if n - current_sum < term: # current_sum + term would exceed n\n                    overflow = True\n                    break\n                current_sum += term\n            \n            if overflow:\n                high = k_mid - 1 # k_mid is too large, sum exceeded n\n            elif current_sum == n:\n                sys.stdout.write(\"YES\\n\")\n                return\n            elif current_sum < n:\n                low = k_mid + 1\n            else: # current_sum > n\n                high = k_mid - 1\n\n    sys.stdout.write(\"NO\\n\")\n\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 568,
        "completion_token_count": 3690,
        "thoughts_token_count": 816
    }
}