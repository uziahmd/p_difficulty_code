{
    "start": 1758011745.9517658,
    "end": 1758011814.3828728,
    "start-formatted": "2025-09-16 17:35 KST",
    "end-formatted": "2025-09-16 17:36 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Alright, here's my breakdown of this coding challenge.**\n\nMy goal is to solve a competitive programming problem involving vouchers. The core is to find two non-intersecting vouchers whose durations sum to a target value, while minimizing their combined cost.\n\nMy strategy is to use a sweep-line approach. The naive solution of checking every pair is too slow (`O(n^2)`). The constraints suggest I should optimize the search. To achieve the required time complexity, I'll organize the vouchers.\n\nI'm thinking of creating two lists or structures to group the vouchers. `vouchers_by_start_day` will store vouchers by their starting day, and `vouchers_by_end_day` will group them by ending day. Then, I'll iterate through the days, simulating the sweep line.\n\nFor each day `d`, I'll do two things:\n\n1.  **Process vouchers starting on day `d`:** These are potential \"second\" vouchers (`j`). For each such voucher, I'll calculate the required duration of the \"first\" voucher (`i`) to reach the target duration `x`. I'll use a `min_cost_for_duration` array to efficiently look up the minimum cost of a voucher with that duration that *ended before day `d`*. If there's a valid \"first\" voucher, I'll update the overall minimum cost.\n2.  **Process vouchers ending on day `d`:**  I'll update the `min_cost_for_duration` array with the cost of any voucher *ending on that day* for each corresponding duration.\n\nThis effectively handles the non-intersection condition, considering the cases where one voucher ends before the other starts. Finally, the minimum cost found during the sweep-line iteration will be the answer. I'm confident that this approach will be efficient enough to solve the problem within the time constraints.\n",
    "response": "The problem asks us to find two distinct vouchers `i` and `j` such that:\n1. They do not intersect. This means either `r_i < l_j` (voucher `i` ends before voucher `j` starts) or `r_j < l_i` (voucher `j` ends before voucher `i` starts).\n2. The sum of their durations is exactly `x`. The duration of voucher `k` is `r_k - l_k + 1`.\n3. Their total cost `cost_i + cost_j` is minimized.\n\nIf no such pair exists, we should print -1.\n\nLet `MAX_COORD = 2 * 10^5` be the maximum possible day value.\nThe total number of vouchers `n` and the target duration `x` are also up to `2 * 10^5`.\n\nWe can solve this problem using a sweep-line algorithm. The idea is to iterate through each possible day from `1` to `MAX_COORD`. As we sweep through the days, we maintain information about vouchers that have already ended, and use this information to find potential pairs with vouchers that are about to start.\n\nLet's maintain an array `min_cost_for_duration[d]` which stores the minimum cost of a voucher with duration `d` that has *already ended* by the current sweep-line day. Initialize all values in `min_cost_for_duration` to infinity.\n\nWe will iterate `day` from `1` to `MAX_COORD`. For each `day`:\n\n1.  **Consider vouchers that start on `day`**: These are potential \"second\" vouchers (`j`) in a pair `(i, j)` where voucher `i` ends before voucher `j` starts (`r_i < l_j`). For each voucher `(l_j, r_j, c_j)` that starts on `day` (i.e., `l_j = day`):\n    *   Calculate its duration `D_j = r_j - l_j + 1`.\n    *   The required duration for the \"first\" voucher `i` is `D_i_target = x - D_j`.\n    *   If `D_i_target` is a valid positive duration (i.e., `1 <= D_i_target <= x`):\n        *   We look up `min_cost_for_duration[D_i_target]`. This value represents the minimum cost of a voucher `i` with duration `D_i_target` that has already ended by `day - 1`.\n        *   If `min_cost_for_duration[D_i_target]` is not infinity, it means we found a valid \"first\" voucher. The total cost for this pair would be `c_j + min_cost_for_duration[D_i_target]`. We update our overall minimum answer `ans = min(ans, c_j + min_cost_for_duration[D_i_target])`.\n\n2.  **Consider vouchers that end on `day`**: These are potential \"first\" vouchers (`i`) for future pairs. For each voucher `(l_i, r_i, c_i)` that ends on `day` (i.e., `r_i = day`):\n    *   Calculate its duration `D_i = r_i - l_i + 1`.\n    *   Update `min_cost_for_duration[D_i] = min(min_cost_for_duration[D_i], c_i)`. This ensures that for future days, `min_cost_for_duration[D_i]` holds the minimum cost of a voucher with duration `D_i` that has ended on or before the current `day`.\n\nThe initial value for `ans` should be infinity. If `ans` remains infinity after the sweep, it means no valid pair was found, and we print -1. Otherwise, we print `ans`.\n\n**Data Structures for efficient access:**\nTo efficiently retrieve vouchers starting or ending on a specific `day`, we can pre-process the input vouchers into two lists of lists (or dictionaries):\n*   `vouchers_by_start_day[day]`: A list of `(r, cost)` tuples for all vouchers that start on `day`.\n*   `vouchers_by_end_day[day]`: A list of `(l, cost)` tuples for all vouchers that end on `day`.\n\n**Detailed Algorithm:**\n\n1.  Initialize `MAX_COORD = 2 * 10^5`.\n2.  Create `vouchers_by_start_day = [[] for _ in range(MAX_COORD + 1)]` and `vouchers_by_end_day = [[] for _ in range(MAX_COORD + 1)]`.\n3.  Read `n` and `x`.\n4.  For each of the `n` vouchers `(l, r, cost)`:\n    *   Append `(r, cost)` to `vouchers_by_start_day[l]`.\n    *   Append `(l, cost)` to `vouchers_by_end_day[r]`.\n5.  Initialize `min_cost_for_duration = [float('inf')] * (x + 1)`.\n6.  Initialize `ans = float('inf')`.\n7.  Iterate `day` from `1` to `MAX_COORD`:\n    *   For each `(r_j, c_j)` in `vouchers_by_start_day[day]`:\n        *   `D_j = r_j - day + 1`\n        *   `D_i_target = x - D_j`\n        *   If `1 <= D_i_target <= x` and `min_cost_for_duration[D_i_target] != float('inf')`:\n            *   `ans = min(ans, c_j + min_cost_for_duration[D_i_target])`\n    *   For each `(l_i, c_i)` in `vouchers_by_end_day[day]`:\n        *   `D_i = day - l_i + 1`\n        *   If `1 <= D_i <= x`: # Only update for durations relevant to target `x`\n            *   `min_cost_for_duration[D_i] = min(min_cost_for_duration[D_i], c_i)`\n8.  If `ans == float('inf')`, print `-1`.\n9.  Else, print `ans`.\n\n**Complexity Analysis:**\n\n*   **Time Complexity:**\n    *   Populating `vouchers_by_start_day` and `vouchers_by_end_day`: `O(N)`.\n    *   The main sweep-line loop runs `MAX_COORD` times.\n    *   Inside the loop, each voucher `(l, r, cost)` is processed exactly twice: once when `day == l` (in `vouchers_by_start_day[day]`) and once when `day == r` (in `vouchers_by_end_day[day]`).\n    *   Each processing step involves constant time operations (array access, min).\n    *   Total time complexity: `O(MAX_COORD + N)`. Given `MAX_COORD = 2 * 10^5` and `N = 2 * 10^5`, this is approximately `4 * 10^5` operations, which is well within typical time limits (usually `10^8` operations per second).\n\n*   **Space Complexity:**\n    *   `vouchers_by_start_day` and `vouchers_by_end_day`: `O(MAX_COORD + N)` to store the lists and all voucher data.\n    *   `min_cost_for_duration`: `O(x)`, which is `O(MAX_COORD)`.\n    *   Total space complexity: `O(MAX_COORD + N)`. This is also acceptable.\n\nThis approach correctly handles both `r_i < l_j` and `r_j < l_i` because the sweep-line implicitly processes all possible temporal orderings. When `day` is `l_j`, `min_cost_for_duration[D_i_target]` contains minimum costs for vouchers `i` that have `r_i < l_j`.\n\n```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    MAX_COORD = 2 * 10**5\n\n    # vouchers_by_start_day[d] stores (r, cost) for vouchers starting on day d\n    vouchers_by_start_day = [[] for _ in range(MAX_COORD + 1)]\n    # vouchers_by_end_day[d] stores (l, cost) for vouchers ending on day d\n    vouchers_by_end_day = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers_by_start_day[l].append((r, cost))\n        vouchers_by_end_day[r].append((l, cost))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher with duration d\n    # that has ended by the current sweep-line day.\n    # Initialize with infinity for all durations up to x.\n    min_cost_for_duration = [float('inf')] * (x + 1)\n\n    ans = float('inf')\n\n    # Sweep through each day from 1 to MAX_COORD\n    for day in range(1, MAX_COORD + 1):\n        # Step 1: Process vouchers that start on 'day'\n        # These are potential 'second' vouchers (j) in a pair (i, j) where r_i < l_j\n        for r_j, c_j in vouchers_by_start_day[day]:\n            duration_j = r_j - day + 1\n            \n            # Calculate the required duration for the 'first' voucher (i)\n            duration_i_target = x - duration_j\n\n            # Check if duration_i_target is valid and if a suitable voucher 'i' has been found\n            if 1 <= duration_i_target <= x:\n                if min_cost_for_duration[duration_i_target] != float('inf'):\n                    ans = min(ans, c_j + min_cost_for_duration[duration_i_target])\n\n        # Step 2: Process vouchers that end on 'day'\n        # These are potential 'first' vouchers (i) for future pairs\n        for l_i, c_i in vouchers_by_end_day[day]:\n            duration_i = day - l_i + 1\n            \n            # Update min_cost_for_duration for this duration\n            # Only update if duration_i is relevant for target x\n            if 1 <= duration_i <= x:\n                min_cost_for_duration[duration_i] = min(min_cost_for_duration[duration_i], c_i)\n\n    if ans == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(ans) + \"\\n\")\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    MAX_COORD = 2 * 10**5\n\n    # vouchers_by_start_day[d] stores (r, cost) for vouchers starting on day d\n    vouchers_by_start_day = [[] for _ in range(MAX_COORD + 1)]\n    # vouchers_by_end_day[d] stores (l, cost) for vouchers ending on day d\n    vouchers_by_end_day = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers_by_start_day[l].append((r, cost))\n        vouchers_by_end_day[r].append((l, cost))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher with duration d\n    # that has ended by the current sweep-line day.\n    # Initialize with infinity for all durations up to x.\n    min_cost_for_duration = [float('inf')] * (x + 1)\n\n    ans = float('inf')\n\n    # Sweep through each day from 1 to MAX_COORD\n    for day in range(1, MAX_COORD + 1):\n        # Step 1: Process vouchers that start on 'day'\n        # These are potential 'second' vouchers (j) in a pair (i, j) where r_i < l_j\n        for r_j, c_j in vouchers_by_start_day[day]:\n            duration_j = r_j - day + 1\n            \n            # Calculate the required duration for the 'first' voucher (i)\n            duration_i_target = x - duration_j\n\n            # Check if duration_i_target is valid and if a suitable voucher 'i' has been found\n            if 1 <= duration_i_target <= x:\n                if min_cost_for_duration[duration_i_target] != float('inf'):\n                    ans = min(ans, c_j + min_cost_for_duration[duration_i_target])\n\n        # Step 2: Process vouchers that end on 'day'\n        # These are potential 'first' vouchers (i) for future pairs\n        for l_i, c_i in vouchers_by_end_day[day]:\n            duration_i = day - l_i + 1\n            \n            # Update min_cost_for_duration for this duration\n            # Only update if duration_i is relevant for target x\n            if 1 <= duration_i <= x:\n                min_cost_for_duration[duration_i] = min(min_cost_for_duration[duration_i], c_i)\n\n    if ans == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(ans) + \"\\n\")\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 799,
        "completion_token_count": 2600,
        "thoughts_token_count": 6312
    }
}