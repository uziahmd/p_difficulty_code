{
    "start": 1758293697.9036293,
    "end": 1758293706.26379,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    lines = sys.stdin.readlines()\n    \n    line_idx = 0\n    R, B = map(int, lines[line_idx].split())\n    line_idx += 1\n\n    rebels = []\n    for _ in range(R):\n        x, y = map(int, lines[line_idx].split())\n        rebels.append((x, y))\n        line_idx += 1\n\n    bases = []\n    for _ in range(B):\n        x, y = map(int, lines[line_idx].split())\n        bases.append((x, y))\n        line_idx += 1\n\n    if R != B:\n        print(\"No\")\n        return\n\n    num_points = R\n\n    # Function to check if two line segments intersect\n    def segments_intersect(p1, p2, p3, p4):\n        # Helper function to calculate orientation\n        def orientation(p, q, r):\n            val = (q[1] - p[1]) * (r[0] - q[0]) - \\\n                  (q[0] - p[0]) * (r[1] - q[1])\n            if val == 0: return 0  # Collinear\n            return 1 if val > 0 else 2 # Clockwise or Counterclockwise\n\n        # Helper function to check if point q lies on segment pr\n        def on_segment(p, q, r):\n            return (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and\n                    q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1]))\n\n        o1 = orientation(p1, p2, p3)\n        o2 = orientation(p1, p2, p4)\n        o3 = orientation(p3, p4, p1)\n        o4 = orientation(p3, p4, p2)\n\n        # General case\n        if o1 != 0 and o2 != 0 and o3 != 0 and o4 != 0 and \\\n           o1 != o2 and o3 != o4:\n            return True\n\n        # Special Cases\n        # p1, p2 and p3 are collinear and p3 lies on segment p1p2\n        if o1 == 0 and on_segment(p1, p3, p2): return True\n        # p1, p2 and p4 are collinear and p4 lies on segment p1p2\n        if o2 == 0 and on_segment(p1, p4, p2): return True\n        # p3, p4 and p1 are collinear and p1 lies on segment p3p4\n        if o3 == 0 and on_segment(p3, p1, p4): return True\n        # p3, p4 and p2 are collinear and p2 lies on segment p3p4\n        if o4 == 0 and on_segment(p3, p2, p4): return True\n\n        return False\n\n    # Function to check if a given permutation of bases forms a valid non-intersecting matching\n    def check_matching(permutation):\n        for i in range(num_points):\n            for j in range(i + 1, num_points):\n                r1 = rebels[i]\n                b1 = bases[permutation[i]]\n                r2 = rebels[j]\n                b2 = bases[permutation[j]]\n\n                if segments_intersect(r1, b1, r2, b2):\n                    return False\n        return True\n\n    # Use a recursive backtracking approach to try all permutations\n    \n    # visited_bases[i] is True if base i is already assigned\n    visited_bases = [False] * num_points\n    \n    # current_permutation[i] stores the index of the base assigned to rebel i\n    current_permutation = [-1] * num_points\n\n    def find_permutation(k): # k is the current rebel index to assign a base to\n        if k == num_points:\n            # All rebels have been assigned bases, check for intersections\n            return check_matching(current_permutation)\n\n        for i in range(num_points): # Try assigning base i to rebel k\n            if not visited_bases[i]:\n                visited_bases[i] = True\n                current_permutation[k] = i\n\n                # Optimization: Check for intersections with already assigned segments\n                is_valid_partial = True\n                for prev_k in range(k):\n                    r1 = rebels[prev_k]\n                    b1 = bases[current_permutation[prev_k]]\n                    r2 = rebels[k]\n                    b2 = bases[current_permutation[k]]\n                    \n                    if segments_intersect(r1, b1, r2, b2):\n                        is_valid_partial = False\n                        break\n                \n                if is_valid_partial:\n                    if find_permutation(k + 1):\n                        return True\n\n                visited_bases[i] = False # Backtrack\n                current_permutation[k] = -1 # Backtrack\n        return False\n\n    if find_permutation(0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    lines = sys.stdin.readlines()\n    \n    line_idx = 0\n    R, B = map(int, lines[line_idx].split())\n    line_idx += 1\n\n    rebels = []\n    for _ in range(R):\n        x, y = map(int, lines[line_idx].split())\n        rebels.append((x, y))\n        line_idx += 1\n\n    bases = []\n    for _ in range(B):\n        x, y = map(int, lines[line_idx].split())\n        bases.append((x, y))\n        line_idx += 1\n\n    if R != B:\n        print(\"No\")\n        return\n\n    num_points = R\n\n    # Function to check if two line segments intersect\n    def segments_intersect(p1, p2, p3, p4):\n        # Helper function to calculate orientation\n        def orientation(p, q, r):\n            val = (q[1] - p[1]) * (r[0] - q[0]) - \\\n                  (q[0] - p[0]) * (r[1] - q[1])\n            if val == 0: return 0  # Collinear\n            return 1 if val > 0 else 2 # Clockwise or Counterclockwise\n\n        # Helper function to check if point q lies on segment pr\n        def on_segment(p, q, r):\n            return (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and\n                    q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1]))\n\n        o1 = orientation(p1, p2, p3)\n        o2 = orientation(p1, p2, p4)\n        o3 = orientation(p3, p4, p1)\n        o4 = orientation(p3, p4, p2)\n\n        # General case\n        if o1 != 0 and o2 != 0 and o3 != 0 and o4 != 0 and \\\n           o1 != o2 and o3 != o4:\n            return True\n\n        # Special Cases\n        # p1, p2 and p3 are collinear and p3 lies on segment p1p2\n        if o1 == 0 and on_segment(p1, p3, p2): return True\n        # p1, p2 and p4 are collinear and p4 lies on segment p1p2\n        if o2 == 0 and on_segment(p1, p4, p2): return True\n        # p3, p4 and p1 are collinear and p1 lies on segment p3p4\n        if o3 == 0 and on_segment(p3, p1, p4): return True\n        # p3, p4 and p2 are collinear and p2 lies on segment p3p4\n        if o4 == 0 and on_segment(p3, p2, p4): return True\n\n        return False\n\n    # Function to check if a given permutation of bases forms a valid non-intersecting matching\n    def check_matching(permutation):\n        for i in range(num_points):\n            for j in range(i + 1, num_points):\n                r1 = rebels[i]\n                b1 = bases[permutation[i]]\n                r2 = rebels[j]\n                b2 = bases[permutation[j]]\n\n                if segments_intersect(r1, b1, r2, b2):\n                    return False\n        return True\n\n    # Use a recursive backtracking approach to try all permutations\n    \n    # visited_bases[i] is True if base i is already assigned\n    visited_bases = [False] * num_points\n    \n    # current_permutation[i] stores the index of the base assigned to rebel i\n    current_permutation = [-1] * num_points\n\n    def find_permutation(k): # k is the current rebel index to assign a base to\n        if k == num_points:\n            # All rebels have been assigned bases, check for intersections\n            return check_matching(current_permutation)\n\n        for i in range(num_points): # Try assigning base i to rebel k\n            if not visited_bases[i]:\n                visited_bases[i] = True\n                current_permutation[k] = i\n\n                # Optimization: Check for intersections with already assigned segments\n                is_valid_partial = True\n                for prev_k in range(k):\n                    r1 = rebels[prev_k]\n                    b1 = bases[current_permutation[prev_k]]\n                    r2 = rebels[k]\n                    b2 = bases[current_permutation[k]]\n                    \n                    if segments_intersect(r1, b1, r2, b2):\n                        is_valid_partial = False\n                        break\n                \n                if is_valid_partial:\n                    if find_permutation(k + 1):\n                        return True\n\n                visited_bases[i] = False # Backtrack\n                current_permutation[k] = -1 # Backtrack\n        return False\n\n    if find_permutation(0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 511,
        "completion_token_count": 1226,
        "thoughts_token_count": 0
    }
}