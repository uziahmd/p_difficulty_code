{
    "start": 1758011821.3865874,
    "end": 1758011942.7052052,
    "start-formatted": "2025-09-16 17:37 KST",
    "end-formatted": "2025-09-16 17:39 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Okay, here's the breakdown of my thought process for tackling this competitive programming problem.**\n\nFirst, I need to design an algorithm to determine if a snowflake with `n` vertices can be constructed according to the given rules. My initial thought is that I need to analyze the rules carefully to understand the construction process. It seems that a snowflake is built layer by layer, starting with a single central vertex.  I also see that `k` is key for determining the snowflake size.\n\nI'm thinking that I should analyze how the number of vertices grows with each step. I represent the number of times we apply the secondary step as `d`. It has to be greater than or equal to `1`. The number of vertices has to be calculated using the formula `(k^(d+2) - 1) / (k-1)` where k and d are integers where `k > 1` and `d >= 1`. This leads me to recognize that the total number of vertices forms a geometric series sum.\n\nNow that I have this formula, the problem boils down to finding whether there exist integers k and d that satisfies that the formula from the geometric series with the given number of vertices `n`. This means for a given `n`, I'm looking for k and d that meet the geometric sum's property.\n\nTo manage the computations, I need to constrain the search space. I start by focusing on the simplest case with `m = 3` which gives the equation `n = 1 + k + k^2`. This is a quadratic equation which I can solve with the quadratic formula.  I need to ensure that the solutions are valid, i.e., I need to make sure that `k > 1` is an integer. \n\nAfter checking `m = 3`, I need to check for different values of m which must be greater than or equal to 3. If m is greater than 3, n will grow very fast and also depend on the parameter `k`. Then I have to look at the ranges of k.\n\nI note that the constraint n is small (`n <= 10^18`), I should focus on the k and m values to be relatively small.  I see that I can find a max value for k using the number of vertices and the formula relating the values of m, k and n.\n\nFor a fixed m, I see that I can find a valid k using binary search. I decide to use binary search for a fixed `m`. To make it efficient, I need to also implement overflow checks to prevent errors when doing multiplications. In the binary search, I can iterate k from 2 up to sqrt(n).\n\nI optimize this by noticing that `m` cannot be very large since `n = 10^18`. So `2^m` must be less than `10^18 + 1`. This gives an upper bound for m. Also, `m > 3` will require smaller values of k.\n\nI iterate through different values of `m` from 3 to log base 2 of (`n + 1`) using the binary search to find an adequate `k`. After doing this, I'll be able to tell if a snowflake can be formed by using those two parameters, `m` and `k`.\n",
    "response": "The problem asks us to determine if a given integer `n` can be represented as the total number of vertices in a snowflake graph. A snowflake is constructed as follows:\n1.  Start with 1 central vertex.\n2.  Connect `k` new vertices to the central vertex, where `k > 1`. Total vertices: `1 + k`.\n3.  Perform the following step at least once: For each vertex connected to only one other vertex (a leaf), connect `k` more new vertices to it.\n\nLet `d` be the number of times step 3 is performed. Since `d >= 1`, the total number of vertices `n` can be expressed as a geometric sum:\n`n = 1 + k + k^2 + ... + k^(d+1)`\n\nLet `m = d + 2`. Since `d >= 1`, we must have `m >= 3`.\nSo, `n = sum_{i=0}^{m-1} k^i`, where `k > 1` and `m >= 3`.\nThis sum can also be written as `n = (k^m - 1) / (k - 1)`.\n\nWe need to check if there exist integers `k > 1` and `m >= 3` that satisfy this equation for a given `n` (`1 <= n <= 10^18`).\n\nLet's break this down into cases based on `m`:\n\n**Case 1: `m = 3`**\nIf `m = 3`, then `n = 1 + k + k^2`.\nThis is a quadratic equation in `k`: `k^2 + k + (1 - n) = 0`.\nUsing the quadratic formula, `k = (-1 +/- sqrt(1 - 4(1)(1 - n))) / 2 = (-1 +/- sqrt(4n - 3)) / 2`.\nSince `k > 1`, we only consider the positive root: `k = (-1 + sqrt(4n - 3)) / 2`.\nFor `k` to be a valid integer:\n1.  `4n - 3` must be a perfect square. Let `S = sqrt(4n - 3)`.\n2.  `S` must be an integer.\n3.  `S` must be odd, so that `S - 1` is even, making `(S - 1) / 2` an integer.\n4.  `k = (S - 1) / 2` must be `> 1`, which implies `S - 1 > 2`, so `S > 3`.\n\nWe check these conditions. If met, we found a valid `k` and `m=3`, so `n` is a snowflake.\n\n**Case 2: `m >= 4`**\nFor `m >= 4`, we iterate through possible values of `m`.\nWhat is the maximum possible value for `m`?\nSince `k >= 2`, we have `n = 1 + k + ... + k^(m-1) >= 1 + 2 + ... + 2^(m-1) = 2^m - 1`.\nSo, `2^m - 1 <= n`.\n`2^m <= n + 1`.\n`m <= log2(n + 1)`.\nGiven `n <= 10^18`, `log2(10^18 + 1) approx 59.79`. So, `m` can go up to `59`.\nWe can iterate `m` from `4` to `59`. This is a small range (about 56 values).\n\nFor each fixed `m`, we need to find if there's an integer `k > 1` such that `n = 1 + k + ... + k^(m-1)`.\nThe function `f(k) = 1 + k + ... + k^(m-1)` is strictly increasing for `k > 1`. This allows us to use binary search for `k`.\n\nWhat is the range for `k` in the binary search?\nWe know `k >= 2`.\nAlso, `k^(m-1) < n`. So `k < n^(1/(m-1))`.\nFor `n = 10^18`:\n*   If `m = 4`, `k < (10^18)^(1/3) = 10^6`.\n*   If `m = 59`, `k < (10^18)^(1/58) approx 2.04`. So `k` can only be `2`.\n\nThe upper bound for `k` in the binary search can be set to `min(int(n**(1.0/(m-1))) + 2, 2 * 10**6)`. The `2*10**6` is a safe overall upper bound, as `k` won't exceed `10^6` for `m>=4`. For smaller `m`, `n**(1.0/(m-1))` will be larger, and for larger `m`, it will be smaller.\n\nInside the binary search, for a `mid_k`, we need to calculate `sum_val = 1 + mid_k + ... + mid_k^(m-1)`.\nSince `mid_k^(m-1)` can exceed `10^18` (e.g., `(10^6)^3 = 10^18` for `m=4`, `k=10^6`), we must be careful about integer overflow. We can compute the sum iteratively, checking for overflow at each step:\n`current_sum = 1`\n`current_power = 1`\nFor `i` from `1` to `m-1`:\n    *   Check `current_power * mid_k`: If `current_power > n // mid_k`, then `current_power * mid_k` would exceed `n`.\n    *   `current_power *= mid_k`.\n    *   Check `current_sum + current_power`: If `current_sum > n - current_power`, then `current_sum + current_power` would exceed `n`.\n    *   `current_sum += current_power`.\nIf at any point `current_power` or `current_sum` would exceed `n`, we know `sum_val > n`.\n\n**Overall Complexity:**\n*   Case 1 (`m=3`): `O(1)` using `math.sqrt` and integer checks.\n*   Case 2 (`m >= 4`):\n    *   Outer loop for `m`: `log2(N)` iterations (approx 56).\n    *   Inner binary search for `k`: `log(max_k)` iterations. `max_k` is at most `10^6`, so `log(10^6)` is approx `20`.\n    *   Inside binary search, computing the sum: `m` iterations.\n    Total operations: `sum_{m=4}^{59} (log(n^(1/(m-1))) * m) = sum_{m=4}^{59} ((1/(m-1)) * log(n) * m)`.\n    This is roughly `log(n) * sum_{m=4}^{59} (m/(m-1))`. Since `m/(m-1)` is close to 1, this is approximately `log(n) * 56`.\n    `log(10^18) approx 60`. So, `60 * 56 = 3360` operations per test case.\n    With `T = 10^4` test cases, total operations are `3.36 * 10^7`, which is efficient enough.\n\n**Example Walkthroughs:**\n*   `n = 13`:\n    *   `m=3`: `4*13 - 3 = 49`. `sqrt(49) = 7`. `7` is odd and `> 3`. `k = (7-1)/2 = 3`. `k > 1`. YES.\n*   `n = 15`:\n    *   `m=3`: `4*15 - 3 = 57`. Not a perfect square.\n    *   `m=4`: Binary search for `k`. `low=2`, `high=min(int(15**(1/3))+2, 2*10^6)=min(2+2, 2*10^6)=4`.\n        *   `mid_k = (2+4)//2 = 3`. Sum `1+3+9+27 = 40 > 15`. `high = 2`.\n        *   `mid_k = (2+2)//2 = 2`. Sum `1+2+4+8 = 15`. `current_sum == n`. YES.\n*   `n = 10^18`:\n    *   `m=3`: `4*10^18 - 3`. This is not a perfect square. `sqrt(4*10^18 - 3)` is slightly less than `2*10^9`. `(2*10^9-1)^2 = 4*10^18 - 4*10^9 + 1`. `(2*10^9-2)^2 = 4*10^18 - 8*10^9 + 4`. Neither matches `4*10^18 - 3`. So `m=3` fails.\n    *   `m >= 4`: No `k` will be found. For `k=2`, `2^59-1 < 10^18` and `2^60-1 > 10^18`. So `k=2` won't work for any `m`. For `k >= 3`, `k^(m-1)` grows even faster, so `m` will be even smaller. It is very unlikely to find a match. The example output for `10^18` is NO.\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    # Case 1: m = 3 (n = 1 + k + k^2)\n    # This leads to k = (-1 + sqrt(4n - 3)) / 2\n    val_4n_minus_3 = 4 * n - 3\n    \n    # Check if 4n - 3 is non-negative (it will be for n >= 1)\n    # and if it's a perfect square.\n    if val_4n_minus_3 >= 0:\n        s_root_float = math.sqrt(val_4n_minus_3)\n        s_root_int = int(s_root_float)\n        \n        # Check if s_root_int is indeed the integer square root\n        if s_root_int * s_root_int == val_4n_minus_3:\n            # For k to be an integer, s_root_int must be odd.\n            # For k > 1, (s_root_int - 1) / 2 > 1 => s_root_int - 1 > 2 => s_root_int > 3.\n            if s_root_int % 2 == 1 and s_root_int > 3:\n                # k = (s_root_int - 1) // 2\n                # Since s_root_int > 3 and is odd, k will be an integer greater than 1.\n                print(\"YES\")\n                return\n\n    # Case 2: m >= 4\n    # n = 1 + k + k^2 + ... + k^(m-1)\n    # The maximum value for m is approx log2(n+1). For n=10^18, this is 59.\n    # The maximum value for k is approx n^(1/(m-1)). For m=4, k is up to 10^6.\n    \n    # Iterate m from 4 up to 59 (inclusive)\n    for m in range(4, 61): # m-1 will go up to 59\n        low = 2\n        # Calculate a safe upper bound for k for the binary search.\n        # k^(m-1) < n implies k < n^(1/(m-1)).\n        # Using math.pow for fractional exponentiation, then convert to int.\n        # Add a small buffer (+2) to ensure the true k is within the range.\n        # Cap high at a reasonable maximum (e.g., 2*10^6) as k won't exceed 10^6 for m>=4.\n        high = int(math.pow(n, 1.0 / (m - 1))) + 2\n        high = min(high, 2 * 10**6) \n\n        # If low somehow becomes greater than high, no valid k exists for this m.\n        if low > high:\n            continue\n\n        while low <= high:\n            mid_k = (low + high) // 2\n            \n            # mid_k must be > 1. Our low starts at 2, so this is mostly a safeguard.\n            if mid_k < 2:\n                low = 2\n                continue\n\n            current_sum = 1\n            current_power = 1\n            # Flag to indicate if sum calculation would exceed n or overflow\n            overflow_or_too_large = False\n\n            # Calculate 1 + mid_k + ... + mid_k^(m-1)\n            for _ in range(1, m): # Loop m-1 times for powers k^1 to k^(m-1)\n                # Check for potential overflow BEFORE multiplication: current_power * mid_k\n                # If current_power > n / mid_k, then current_power * mid_k > n.\n                # This also handles cases where mid_k is 0.\n                if mid_k == 0 or n // mid_k < current_power:\n                    overflow_or_too_large = True\n                    break\n                current_power *= mid_k\n\n                # Check for potential overflow BEFORE addition: current_sum + current_power\n                # If current_sum > n - current_power, then current_sum + current_power > n.\n                if n - current_power < current_sum:\n                    overflow_or_too_large = True\n                    break\n                current_sum += current_power\n            \n            if overflow_or_too_large or current_sum > n:\n                high = mid_k - 1\n            elif current_sum < n:\n                low = mid_k + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n    \n    # If no k, m pair was found after checking all possibilities\n    print(\"NO\")\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    # Case 1: m = 3 (n = 1 + k + k^2)\n    # This leads to k = (-1 + sqrt(4n - 3)) / 2\n    val_4n_minus_3 = 4 * n - 3\n    \n    # Check if 4n - 3 is non-negative (it will be for n >= 1)\n    # and if it's a perfect square.\n    if val_4n_minus_3 >= 0:\n        s_root_float = math.sqrt(val_4n_minus_3)\n        s_root_int = int(s_root_float)\n        \n        # Check if s_root_int is indeed the integer square root\n        if s_root_int * s_root_int == val_4n_minus_3:\n            # For k to be an integer, s_root_int must be odd.\n            # For k > 1, (s_root_int - 1) / 2 > 1 => s_root_int - 1 > 2 => s_root_int > 3.\n            if s_root_int % 2 == 1 and s_root_int > 3:\n                # k = (s_root_int - 1) // 2\n                # Since s_root_int > 3 and is odd, k will be an integer greater than 1.\n                print(\"YES\")\n                return\n\n    # Case 2: m >= 4\n    # n = 1 + k + k^2 + ... + k^(m-1)\n    # The maximum value for m is approx log2(n+1). For n=10^18, this is 59.\n    # The maximum value for k is approx n^(1/(m-1)). For m=4, k is up to 10^6.\n    \n    # Iterate m from 4 up to 59 (inclusive)\n    for m in range(4, 61): # m-1 will go up to 59\n        low = 2\n        # Calculate a safe upper bound for k for the binary search.\n        # k^(m-1) < n implies k < n^(1/(m-1)).\n        # Using math.pow for fractional exponentiation, then convert to int.\n        # Add a small buffer (+2) to ensure the true k is within the range.\n        # Cap high at a reasonable maximum (e.g., 2*10^6) as k won't exceed 10^6 for m>=4.\n        high = int(math.pow(n, 1.0 / (m - 1))) + 2\n        high = min(high, 2 * 10**6) \n\n        # If low somehow becomes greater than high, no valid k exists for this m.\n        if low > high:\n            continue\n\n        while low <= high:\n            mid_k = (low + high) // 2\n            \n            # mid_k must be > 1. Our low starts at 2, so this is mostly a safeguard.\n            if mid_k < 2:\n                low = 2\n                continue\n\n            current_sum = 1\n            current_power = 1\n            # Flag to indicate if sum calculation would exceed n or overflow\n            overflow_or_too_large = False\n\n            # Calculate 1 + mid_k + ... + mid_k^(m-1)\n            for _ in range(1, m): # Loop m-1 times for powers k^1 to k^(m-1)\n                # Check for potential overflow BEFORE multiplication: current_power * mid_k\n                # If current_power > n / mid_k, then current_power * mid_k > n.\n                # This also handles cases where mid_k is 0.\n                if mid_k == 0 or n // mid_k < current_power:\n                    overflow_or_too_large = True\n                    break\n                current_power *= mid_k\n\n                # Check for potential overflow BEFORE addition: current_sum + current_power\n                # If current_sum > n - current_power, then current_sum + current_power > n.\n                if n - current_power < current_sum:\n                    overflow_or_too_large = True\n                    break\n                current_sum += current_power\n            \n            if overflow_or_too_large or current_sum > n:\n                high = mid_k - 1\n            elif current_sum < n:\n                low = mid_k + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n    \n    # If no k, m pair was found after checking all possibilities\n    print(\"NO\")\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 3437,
        "thoughts_token_count": 8064
    }
}