{
    "start": 1758009486.5131147,
    "end": 1758009512.9761295,
    "start-formatted": "2025-09-16 16:58 KST",
    "end-formatted": "2025-09-16 16:58 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Solving the Selling Souvenirs Problem with Python**\n\nOkay, so I'm tackling this \"Selling Souvenirs\" problem, which feels a lot like a variation on the classic knapsack. Let me break down my thought process.\n\n**Understanding the Problem:**\n\nWe've got `n` souvenirs, each with a weight (`wi`) and a cost (`ci`). The goal is to choose a subset of these souvenirs such that their combined weight doesn't exceed a maximum limit `m`, while maximizing the total cost.  The constraints are the usual: `n` can be up to 100,000, `m` is up to 300,000, and the costs are pretty hefty – up to 10^9.\n\n**Initial Considerations:**\n\nMy initial instinct is to go for dynamic programming, a standard approach to knapsack problems. But the sheer size of `n` and `m` is giving me pause. An O(n\\*m) solution, which is typical for a knapsack, would be way too slow. It's looking like we'll have a time limit exceeded error.\n\n**Key Insight: Leveraging the Weights:**\n\nThen it hits me! The weights themselves (`wi`) are the real key. They're restricted to just 1, 2, or 3. This is our ticket to a more efficient solution.\n\n**Optimizing the Solution:**\n\nSince there are only three possible weights, I can categorize the souvenirs by weight. I'll make three lists: `costs_w1`, `costs_w2`, and `costs_w3`, to store the costs for souvenirs with weights 1, 2, and 3, respectively.  To get the most bang for our buck, I'll sort these lists in *descending* order, so I can start with the most expensive items in each weight category.\n\nNow, the problem boils down to deciding how many souvenirs of each weight to pick.  Let's say `k1`, `k2`, and `k3` represent the number of souvenirs we choose from `costs_w1`, `costs_w2`, and `costs_w3`.  Our constraints are:  `k1 + 2*k2 + 3*k3 <= m`. We also know that we want to maximize the sum of the costs.\n\nThis is where I'll use a prefix sum to reduce computational time. So I'll calculate `prefix_sum_w1`, `prefix_sum_w2`, and `prefix_sum_w3`.\n\n**Iteration Strategy:**\n\nGiven the weight constraints, it makes sense to iterate through the possible combinations of `k3`, `k2`, and `k1`. The maximum number of weight 3 items is just `m/3`, and same for weight 2 as `m/2`. This suggests we can significantly reduce the number of iterations by iterating based on the weights. From here, I will try to generate a working python script and return the maximum value.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    costs_w1 = []\n    costs_w2 = []\n    costs_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            costs_w1.append(c)\n        elif w == 2:\n            costs_w2.append(c)\n        else: # w == 3\n            costs_w3.append(c)\n\n    # Sort costs in descending order to pick most expensive items first\n    costs_w1.sort(reverse=True)\n    costs_w2.sort(reverse=True)\n    costs_w3.sort(reverse=True)\n\n    # Calculate prefix sums for quick sum retrieval\n    # prefix_sum_wx[i] will store the sum of the i most expensive items of weight x\n    # (0-indexed, so prefix_sum_wx[k] is sum of first k items)\n    prefix_sum_w1 = [0] * (len(costs_w1) + 1)\n    for i in range(len(costs_w1)):\n        prefix_sum_w1[i+1] = prefix_sum_w1[i] + costs_w1[i]\n\n    prefix_sum_w2 = [0] * (len(costs_w2) + 1)\n    for i in range(len(costs_w2)):\n        prefix_sum_w2[i+1] = prefix_sum_w2[i] + costs_w2[i]\n\n    prefix_sum_w3 = [0] * (len(costs_w3) + 1)\n    for i in range(len(costs_w3)):\n        prefix_sum_w3[i+1] = prefix_sum_w3[i] + costs_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate over the number of items of weight 3 (k3)\n    # k3 can range from 0 to min(len(costs_w3), m/3)\n    for k3 in range(len(costs_w3) + 1):\n        weight_k3 = k3 * 3\n        if weight_k3 > m:\n            break\n        \n        current_cost_k3 = prefix_sum_w3[k3]\n        remaining_weight_after_k3 = m - weight_k3\n\n        # Iterate over the number of items of weight 2 (k2)\n        # k2 can range from 0 to min(len(costs_w2), remaining_weight_after_k3 / 2)\n        for k2 in range(len(costs_w2) + 1):\n            weight_k2 = k2 * 2\n            if weight_k2 > remaining_weight_after_k3:\n                break\n            \n            current_cost_k2 = prefix_sum_w2[k2]\n            remaining_weight_after_k2_k3 = remaining_weight_after_k3 - weight_k2\n\n            # The number of items of weight 1 (k1) is determined by the remaining weight\n            # k1 should be as many as possible to maximize cost\n            k1 = min(len(costs_w1), remaining_weight_after_k2_k3)\n            current_cost_k1 = prefix_sum_w1[k1]\n\n            current_total_cost = current_cost_k1 + current_cost_k2 + current_cost_k3\n            max_total_cost = max(max_total_cost, current_total_cost)\n            \n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    costs_w1 = []\n    costs_w2 = []\n    costs_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            costs_w1.append(c)\n        elif w == 2:\n            costs_w2.append(c)\n        else: # w == 3\n            costs_w3.append(c)\n\n    # Sort costs in descending order to pick most expensive items first\n    costs_w1.sort(reverse=True)\n    costs_w2.sort(reverse=True)\n    costs_w3.sort(reverse=True)\n\n    # Calculate prefix sums for quick sum retrieval\n    # prefix_sum_wx[i] will store the sum of the i most expensive items of weight x\n    # (0-indexed, so prefix_sum_wx[k] is sum of first k items)\n    prefix_sum_w1 = [0] * (len(costs_w1) + 1)\n    for i in range(len(costs_w1)):\n        prefix_sum_w1[i+1] = prefix_sum_w1[i] + costs_w1[i]\n\n    prefix_sum_w2 = [0] * (len(costs_w2) + 1)\n    for i in range(len(costs_w2)):\n        prefix_sum_w2[i+1] = prefix_sum_w2[i] + costs_w2[i]\n\n    prefix_sum_w3 = [0] * (len(costs_w3) + 1)\n    for i in range(len(costs_w3)):\n        prefix_sum_w3[i+1] = prefix_sum_w3[i] + costs_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate over the number of items of weight 3 (k3)\n    # k3 can range from 0 to min(len(costs_w3), m/3)\n    for k3 in range(len(costs_w3) + 1):\n        weight_k3 = k3 * 3\n        if weight_k3 > m:\n            break\n        \n        current_cost_k3 = prefix_sum_w3[k3]\n        remaining_weight_after_k3 = m - weight_k3\n\n        # Iterate over the number of items of weight 2 (k2)\n        # k2 can range from 0 to min(len(costs_w2), remaining_weight_after_k3 / 2)\n        for k2 in range(len(costs_w2) + 1):\n            weight_k2 = k2 * 2\n            if weight_k2 > remaining_weight_after_k3:\n                break\n            \n            current_cost_k2 = prefix_sum_w2[k2]\n            remaining_weight_after_k2_k3 = remaining_weight_after_k3 - weight_k2\n\n            # The number of items of weight 1 (k1) is determined by the remaining weight\n            # k1 should be as many as possible to maximize cost\n            k1 = min(len(costs_w1), remaining_weight_after_k2_k3)\n            current_cost_k1 = prefix_sum_w1[k1]\n\n            current_total_cost = current_cost_k1 + current_cost_k2 + current_cost_k3\n            max_total_cost = max(max_total_cost, current_total_cost)\n            \n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nif __name__ == '__main__':\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 497,
        "completion_token_count": 905,
        "thoughts_token_count": 812
    }
}