{
    "start": 1758293693.6428797,
    "end": 1758293699.6903698,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:54 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2 (arbitrary choice, we can rotate the polygon)\n    # Fix v1 as vertex 1\n    v2 = 2\n    v1 = 1\n\n    # Iterate through possible v3 vertices\n    # v3 must be different from v1 and v2\n    # v3 must be from 3 to n\n    for k in range(1, n - 1): # k is the number of edges between v2 and v3\n        # The angle formed by vertices v1, v2, v3 (where v2 is the vertex)\n        # is given by (k * 180) / n\n        # This is because v1, v2, v3 form an isosceles triangle with center of polygon.\n        # The angle subtended by the arc v1v3 at the center is (k * 360) / n.\n        # The angle subtended by the arc v1v3 at any point on the circumference\n        # (like v2) is half of the central angle, so (k * 180) / n.\n        # Here, v1 is vertex 1, v2 is vertex 2.\n        # If v3 is vertex (2+k), then the arc length between v1 and v3 is k+1 edges.\n        # The angle subtended by the chord connecting vertex 1 and vertex (2+k) at vertex 2.\n        # The angle formed by three vertices v_i, v_j, v_k in a regular n-gon,\n        # where v_j is the vertex of the angle, is (number of edges between v_i and v_k,\n        # NOT passing through v_j) * 180 / n.\n        # Let's fix v2 as vertex 2.\n        # Let's fix v1 as vertex 1.\n        # Then v3 can be any vertex from 3 to n.\n        # The number of edges between v1 and v3 (not passing through v2) is (v3 - v1 - 1).\n        # So, the angle is (v3 - v1 - 1) * 180 / n.\n        # In our setup: v1=1, v2=2.\n        # v3 will be vertex (2 + k), where k is the number of vertices between v2 and v3.\n        # The vertices are 1, 2, ..., n.\n        # The angle <v1 v2 v3 is formed by edges v2-v1 and v2-v3.\n        # The number of polygon edges between v1 and v3 along the perimeter,\n        # NOT including v2, determines the angle.\n        # Let's say v1 is vertex 1, v2 is vertex 2.\n        # If v3 is vertex i, then the number of edges between 1 and i (excluding 2) is (i - 1 - 1) = i - 2.\n        # So the angle is (i - 2) * 180 / n.\n        # Here, i ranges from 3 to n.\n        # So k = i - 2 ranges from 1 to n - 2.\n\n        possible_angle = (k * 180) / n\n        diff = abs(possible_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_v1 = v1\n            best_v2 = v2\n            best_v3 = v2 + k\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2 (arbitrary choice, we can rotate the polygon)\n    # Fix v1 as vertex 1\n    v2 = 2\n    v1 = 1\n\n    # Iterate through possible v3 vertices\n    # v3 must be different from v1 and v2\n    # v3 must be from 3 to n\n    for k in range(1, n - 1): # k is the number of edges between v2 and v3\n        # The angle formed by vertices v1, v2, v3 (where v2 is the vertex)\n        # is given by (k * 180) / n\n        # This is because v1, v2, v3 form an isosceles triangle with center of polygon.\n        # The angle subtended by the arc v1v3 at the center is (k * 360) / n.\n        # The angle subtended by the arc v1v3 at any point on the circumference\n        # (like v2) is half of the central angle, so (k * 180) / n.\n        # Here, v1 is vertex 1, v2 is vertex 2.\n        # If v3 is vertex (2+k), then the arc length between v1 and v3 is k+1 edges.\n        # The angle subtended by the chord connecting vertex 1 and vertex (2+k) at vertex 2.\n        # The angle formed by three vertices v_i, v_j, v_k in a regular n-gon,\n        # where v_j is the vertex of the angle, is (number of edges between v_i and v_k,\n        # NOT passing through v_j) * 180 / n.\n        # Let's fix v2 as vertex 2.\n        # Let's fix v1 as vertex 1.\n        # Then v3 can be any vertex from 3 to n.\n        # The number of edges between v1 and v3 (not passing through v2) is (v3 - v1 - 1).\n        # So, the angle is (v3 - v1 - 1) * 180 / n.\n        # In our setup: v1=1, v2=2.\n        # v3 will be vertex (2 + k), where k is the number of vertices between v2 and v3.\n        # The vertices are 1, 2, ..., n.\n        # The angle <v1 v2 v3 is formed by edges v2-v1 and v2-v3.\n        # The number of polygon edges between v1 and v3 along the perimeter,\n        # NOT including v2, determines the angle.\n        # Let's say v1 is vertex 1, v2 is vertex 2.\n        # If v3 is vertex i, then the number of edges between 1 and i (excluding 2) is (i - 1 - 1) = i - 2.\n        # So the angle is (i - 2) * 180 / n.\n        # Here, i ranges from 3 to n.\n        # So k = i - 2 ranges from 1 to n - 2.\n\n        possible_angle = (k * 180) / n\n        diff = abs(possible_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_v1 = v1\n            best_v2 = v2\n            best_v3 = v2 + k\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 880,
        "thoughts_token_count": 0
    }
}