{
    "start": 1758294680.2260735,
    "end": 1758294713.8763468,
    "start-formatted": "2025-09-20 00:11 KST",
    "end-formatted": "2025-09-20 00:11 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**The Road to Maximum Profit: A House-Building Strategy**\n\nMy goal is to craft an efficient algorithm for maximizing profit in a house-building scenario. We're given *n* spots, each capable of supporting a house with a height ranging from 0 to *h*. The profit from a house is simply the square of its height. The challenge lies in adhering to *m* zoning restrictions that dictate the maximum height of the tallest house within specific ranges.\n\nGiven the small constraints of *n*, *h*, and *m* (all up to 50), I immediately suspect a polynomial-time solution is feasible. My initial thought is to devise an approach that might involve `O(n * h * m)` or something similar.\n\nThe constraints are as follows: for any spot *i*, the height *a_i* must be between 0 and *h*. Moreover, each restriction *j* imposes a cap *x_j* on the maximum height of any house within the interval [`l_j`, `r_j`].\n\nMy first step is to analyze the implications of these restrictions. A key insight is that if a spot *k* falls under multiple restrictions, its allowed height is the minimum of all the corresponding *x_j* values. This observation is crucial.\n\nThis leads to a systematic approach: for each spot *i*, I determine its maximum permitted height, considering both the global limit *h* and all applicable restrictions.  I calculate `max_h_i = min(h, min(x_j for all j such that l_j <= i <= r_j))`. If a spot has no restrictions, `max_h_i` becomes *h*.\n\nWith this information, I establish an `allowed_height` array. I start by assuming every spot can reach height *h*. Then, I iterate through all restrictions, updating the `allowed_height` of each spot within a restricted range to be the minimum of its current height and the restriction's height cap.\n\nThe logic is simple: once the `allowed_height[i]` for a location *i* has been determined by the above process, then the optimal height for location *i* is *exactly* `allowed_height[i]` to maximize the sum of squares, and so, the profit.\n\nTherefore, the total profit is simply the sum of the squares of the `allowed_height` values for all spots.\n\nI've tested this on the provided examples.  Furthermore, I've conducted a thorough complexity analysis. Initialization and profit calculation are both `O(n)`. Applying the `m` restrictions costs  `O(m * n)` in the worst-case scenario. This yields an overall complexity of `O(m * n)`. The space complexity is simply `O(n)` from the `allowed_height` array.\n\nI've examined edge cases, including scenarios where *m=0* (no restrictions), all restrictions are zero, single spot with various combinations and it appears to handle all of them correctly. The solution seems quite robust and well within the expected time limit for this problem. I have the Python code ready to go.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, h, m = map(int, sys.stdin.readline().split())\n\n    allowed_height = [h] * n\n\n    for _ in range(m):\n        l, r, x = map(int, sys.stdin.readline().split())\n        \n        l_idx = l - 1\n        r_idx = r - 1\n        \n        for i in range(l_idx, r_idx + 1):\n            allowed_height[i] = min(allowed_height[i], x)\n\n    total_profit = 0\n    for height in allowed_height:\n        total_profit += height * height\n\n    print(total_profit)\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, h, m = map(int, sys.stdin.readline().split())\n\n    allowed_height = [h] * n\n\n    for _ in range(m):\n        l, r, x = map(int, sys.stdin.readline().split())\n        \n        l_idx = l - 1\n        r_idx = r - 1\n        \n        for i in range(l_idx, r_idx + 1):\n            allowed_height[i] = min(allowed_height[i], x)\n\n    total_profit = 0\n    for height in allowed_height:\n        total_profit += height * height\n\n    print(total_profit)\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 859,
        "completion_token_count": 179,
        "thoughts_token_count": 3927
    }
}