{
    "start": 1758284849.4207277,
    "end": 1758284869.366026,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Problem-Solving Approach for House Building Profit Maximization**\n\nOkay, I've got this competitive programming problem to tackle. The core of it is maximizing profit from building houses, where the profit is directly related to the square of each house's height. We have `n` spots, each with a maximum height of `h`, and `m` zoning restrictions.\n\nMy first thought is that the constraints, with `n, h, m <= 50`, are really quite small. This tells me I can probably get away with a brute-force or dynamic programming solution that has a polynomial time complexity. Something like `O(n*h*m)` or even `O(n^3)` might be acceptable in this case.\n\nLet's break down these restrictions. Each spot has an inherent height limit of `h`. But the restrictions impose *further* constraints. Each restriction states that the tallest house within a given range has to be at most a certain height. So, the key is figuring out the *actual* maximum height allowed for each individual spot, considering all the restrictions.\n\nMy plan is to pre-compute this maximum allowed height. I'll create an array, `max_allowed_height`, initially filled with `h` for each spot. Then, for each restriction, I'll iterate through the spots within its range and update their `max_allowed_height` to be the minimum of their current value and the restriction's maximum height. This way, I'll ensure that the height of a house at spot `j` satisfies both the general height limit *and* all the applicable restrictions.\n\nOnce I have `max_allowed_height` for each spot, the next step is simple: to maximize the profit, I just need to build the tallest possible house at each spot. Since profit is the square of the height, and the square function is monotonically increasing, the optimal solution is to set the height of each house to its corresponding `max_allowed_height`.\n\nCrucially, this approach seems to work because the choice of height for one house doesn't directly influence the allowed height of other houses, except through the shared restrictions. By pre-computing `max_allowed_height`, I'm implicitly handling these shared restrictions correctly.\n",
    "response": "The problem asks us to maximize the total profit from building houses on `n` spots. For each spot `j`, we can build a house of integer height `a` between `0` and `h`, earning `a^2` dollars. We are given `m` zoning restrictions, each specifying that the tallest house within a certain range `[l_i, r_i]` must be at most `x_i`.\n\nLet's analyze the constraints on the height of a house at a specific spot `j`.\n1. **Global maximum height:** The height of any house `height[j]` must be between `0` and `h` (inclusive).\n2. **Zoning restrictions:** For each restriction `i` given by `(l_i, r_i, x_i)`, if spot `j` is within the range `[l_i, r_i]` (i.e., `l_i <= j <= r_i`), then `height[j]` must be at most `x_i`.\n\nCombining these, for each spot `j`, its height `height[j]` must satisfy:\n`0 <= height[j] <= h`\nAND\n`height[j] <= x_i` for every restriction `i` such that `l_i <= j <= r_i`.\n\nThis means that for each spot `j`, there is an absolute maximum height it can have. Let's call this `max_possible_height[j]`.\nInitially, we can set `max_possible_height[j] = h` for all spots `j` from `1` to `n`.\nThen, we iterate through all `m` restrictions. For each restriction `(l_i, r_i, x_i)`:\nFor every spot `k` from `l_i` to `r_i`, we update `max_possible_height[k] = min(max_possible_height[k], x_i)`.\n\nAfter processing all restrictions, `max_possible_height[j]` will hold the tightest upper bound for the height of the house at spot `j`, satisfying all global and local restrictions.\n\nNow, we need to choose the actual height `height[j]` for each spot `j` to maximize the total profit `sum(height[j]^2)`. Since `a^2` is an increasing function for `a >= 0`, to maximize `height[j]^2`, we should choose the largest possible `height[j]` that satisfies all constraints.\nThe largest possible `height[j]` is precisely `max_possible_height[j]`.\n\nTherefore, the optimal strategy is to set `height[j] = max_possible_height[j]` for each spot `j`. The total maximum profit will be `sum(max_possible_height[j]^2 for j in 1 to n)`.\n\nLet's walk through the process:\n1. Initialize an array `max_possible_height` of size `n+1` (using 1-based indexing for convenience) where `max_possible_height[j] = h` for all `j` from `1` to `n`.\n2. Read `m` restrictions. For each restriction `(l, r, x)`:\n   Iterate `j` from `l` to `r`.\n   Update `max_possible_height[j] = min(max_possible_height[j], x)`.\n3. Calculate the total profit: Initialize `total_profit = 0`.\n   Iterate `j` from `1` to `n`.\n   Add `max_possible_height[j]^2` to `total_profit`.\n4. Print `total_profit`.\n\n**Example 1:**\n`n=3, h=3, m=3`\nRestrictions:\n1. `(1, 1, 1)`\n2. `(2, 2, 3)`\n3. `(3, 3, 2)`\n\nInitialize `max_possible_height = [3, 3, 3]` (for spots 1, 2, 3).\n\nProcess restrictions:\n1. `(1, 1, 1)`: `max_possible_height[1] = min(max_possible_height[1], 1) = min(3, 1) = 1`.\n   `max_possible_height` is now `[1, 3, 3]`.\n2. `(2, 2, 3)`: `max_possible_height[2] = min(max_possible_height[2], 3) = min(3, 3) = 3`.\n   `max_possible_height` is still `[1, 3, 3]`.\n3. `(3, 3, 2)`: `max_possible_height[3] = min(max_possible_height[3], 2) = min(3, 2) = 2`.\n   `max_possible_height` is now `[1, 3, 2]`.\n\nCalculate total profit:\n`1^2 + 3^2 + 2^2 = 1 + 9 + 4 = 14`.\n\nThis matches the example output.\n\n**Complexity:**\n- Initialization: `O(n)`\n- Processing restrictions: `m` restrictions, each iterating at most `n` spots. Total `O(m * n)`.\n- Calculating profit: `O(n)`\nOverall time complexity: `O(n + m*n + n) = O(m*n)`.\nGiven `n, h, m <= 50`, `m*n` is at most `50 * 50 = 2500`, which is very efficient and well within typical time limits.\nSpace complexity: `O(n)` for `max_possible_height` array.\n\n```python\nimport sys\n\ndef solve():\n    n, h, m = map(int, sys.stdin.readline().split())\n\n    # Initialize max_possible_height for each spot\n    # Using 1-based indexing for spots 1 to n\n    # Each spot initially can have a height up to h\n    max_possible_height = [h] * (n + 1) \n\n    # Process m zoning restrictions\n    for _ in range(m):\n        l, r, x = map(int, sys.stdin.readline().split())\n        \n        # For each spot k within the range [l, r], \n        # its height must be at most x.\n        # So, update the max_possible_height for these spots.\n        for k in range(l, r + 1):\n            max_possible_height[k] = min(max_possible_height[k], x)\n            \n    # Calculate the total maximum profit\n    total_profit = 0\n    for i in range(1, n + 1):\n        # To maximize profit (a^2), choose the maximum allowed height\n        total_profit += max_possible_height[i] ** 2\n        \n    print(total_profit)\n\n# Call the solve function to run the solution\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, h, m = map(int, sys.stdin.readline().split())\n\n    # Initialize max_possible_height for each spot\n    # Using 1-based indexing for spots 1 to n\n    # Each spot initially can have a height up to h\n    max_possible_height = [h] * (n + 1) \n\n    # Process m zoning restrictions\n    for _ in range(m):\n        l, r, x = map(int, sys.stdin.readline().split())\n        \n        # For each spot k within the range [l, r], \n        # its height must be at most x.\n        # So, update the max_possible_height for these spots.\n        for k in range(l, r + 1):\n            max_possible_height[k] = min(max_possible_height[k], x)\n            \n    # Calculate the total maximum profit\n    total_profit = 0\n    for i in range(1, n + 1):\n        # To maximize profit (a^2), choose the maximum allowed height\n        total_profit += max_possible_height[i] ** 2\n        \n    print(total_profit)\n\n# Call the solve function to run the solution\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 869,
        "completion_token_count": 1606,
        "thoughts_token_count": 795
    }
}