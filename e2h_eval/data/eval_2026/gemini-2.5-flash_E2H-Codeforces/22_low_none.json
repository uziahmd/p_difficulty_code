{
    "start": 1758284847.9132462,
    "end": 1758284859.513323,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Thinking Through the \"Marks\" Problem in Python**\n\nOkay, so I've got this \"Marks\" problem.  It looks like a straightforward competitive programming challenge, and I'm aiming for a clean Python solution.  Let's break it down.\n\nFirst, I need to understand the input. I'll be given the number of students (`n`) and subjects (`m`), and then `n` lines, each representing a student's marks across the subjects.  The marks are single-digit characters, which simplifies things.  I'll probably use a list of strings, or a list of lists of integers, to store this \"gradebook\".  A list of strings seems simplest for now. `gradebook[i][j]` will give me student `i`'s mark for subject `j`.\n\nThe core concept is defining a \"successful\" student. A student is successful if they are the best in *at least one* subject.  \"Best\" means they got the *maximum* mark for that subject.  I need to output the total number of successful students.\n\nMy algorithm will involve these key steps.  First, reading the input and populating this `gradebook`. Then, I'll need to figure out the maximum mark for each subject.  I can iterate through each subject, and then iterate through all the students, tracking the highest mark I see.  This will give me a list, `max_marks_per_subject`, where `max_marks_per_subject[j]` is the maximum mark for subject `j`.\n\nNext comes the crucial part: identifying the successful students. I'll initialize a set called `successful_students` to keep track of their indices. Using a set is a good choice because it automatically handles duplicates. Then I'll iterate through each student and each subject, comparing the student's mark for a given subject to the maximum mark for that subject. If they are equal, the student is a winner for that subject, and I'll add their index to the `successful_students` set.  I could break out of the subject loop once a successful subject is found.\n\nFinally, I just need to count the size of that `successful_students` set and print it.\n\nLet's do a quick dry run using the provided sample input. In this sample, the marks are represented as \"223\", \"232\", and \"112\".  For subject 0, the max is 2. Subject 1, the max is 3. Subject 2, the max is 3.  The final successful set will contain student indices which will give the final number of successful students.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # Find the maximum mark for each subject\n    max_marks_per_subject = [0] * m\n    for j in range(m):  # Iterate through subjects\n        current_max = 0\n        for i in range(n):  # Iterate through students\n            mark = int(gradebook[i][j])\n            if mark > current_max:\n                current_max = mark\n        max_marks_per_subject[j] = current_max\n\n    # Identify successful students\n    # Use a set to store indices of successful students to avoid duplicates\n    successful_students = set()\n    for i in range(n):  # Iterate through students\n        for j in range(m):  # Iterate through subjects\n            mark = int(gradebook[i][j])\n            if mark == max_marks_per_subject[j]:\n                successful_students.add(i)\n                # Once a student is found to be best at one subject,\n                # they are successful. We can break and check the next student.\n                break \n    \n    print(len(successful_students))\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # Find the maximum mark for each subject\n    max_marks_per_subject = [0] * m\n    for j in range(m):  # Iterate through subjects\n        current_max = 0\n        for i in range(n):  # Iterate through students\n            mark = int(gradebook[i][j])\n            if mark > current_max:\n                current_max = mark\n        max_marks_per_subject[j] = current_max\n\n    # Identify successful students\n    # Use a set to store indices of successful students to avoid duplicates\n    successful_students = set()\n    for i in range(n):  # Iterate through students\n        for j in range(m):  # Iterate through subjects\n            mark = int(gradebook[i][j])\n            if mark == max_marks_per_subject[j]:\n                successful_students.add(i)\n                # Once a student is found to be best at one subject,\n                # they are successful. We can break and check the next student.\n                break \n    \n    print(len(successful_students))\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 458,
        "completion_token_count": 340,
        "thoughts_token_count": 923
    }
}