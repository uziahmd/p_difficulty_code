{
    "start": 1758018537.0445175,
    "end": 1758018546.0811849,
    "start-formatted": "2025-09-16 19:28 KST",
    "end-formatted": "2025-09-16 19:29 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    if n < 7:\n        sys.stdout.write(\"NO\\n\")\n        return\n\n    # Case 1: m = 2 (1 + k + k^2 vertices)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # k = (-1 + sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    # For k to be an integer > 1:\n    # 4n - 3 must be a perfect square, say s^2\n    # s must be odd, and s > 3\n    # k = (s - 1) / 2\n    \n    val = 4 * n - 3\n    s = int(val**0.5)\n    if s * s == val:\n        if (s - 1) % 2 == 0:\n            k = (s - 1) // 2\n            if k > 1:\n                sys.stdout.write(\"YES\\n\")\n                return\n\n    # Case 2: m >= 3\n    # n = 1 + k + k^2 + ... + k^m = (k^(m+1) - 1) / (k - 1)\n    # We need to find if such k > 1 and m >= 2 exist.\n    # m is the number of \"layers\" after the initial vertex.\n    # The problem states \"This step should be done at least once\",\n    # which means there's at least one layer of k vertices, and then\n    # at least one more layer of k*k vertices.\n    # So the smallest m is 2 (1 + k + k^2).\n    # The problem description says \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n    # Initial vertex (1) -> k new vertices (k)\n    # Each of these k new vertices is connected to 1 other vertex (the initial one).\n    # So each of these k vertices connects to k new vertices. Total k*k new vertices.\n    # Total vertices = 1 + k + k*k. This is for m=2.\n    # If this step is done again, each of the k*k new vertices connects to k new vertices.\n    # Total k*k*k new vertices. Total vertices = 1 + k + k*k + k*k*k. This is for m=3.\n    # So m is the number of terms after the initial 1.\n    # n = 1 + k + k^2 + ... + k^m. m >= 2.\n\n    # Iterate m from 3 up to a reasonable limit.\n    # For a fixed m, we need to find k such that n = (k^(m+1) - 1) / (k - 1).\n    # (k-1) * n = k^(m+1) - 1\n    # k^(m+1) - n*k + (n-1) = 0\n    #\n    # For m=3: n = 1 + k + k^2 + k^3\n    # For m=4: n = 1 + k + k^2 + k^3 + k^4\n    # ...\n    # k^m < n < k^(m+1) for k > 1.\n    # So k < n^(1/m).\n    # Maximum m: 2^m <= n. m <= log2(n).\n    # For n = 10^18, m <= log2(10^18) approx 18 * log2(10) approx 18 * 3.32 approx 59.\n    # So m goes from 3 to 59.\n\n    for m in range(3, 60): # m up to 59\n        # Find k for a fixed m\n        # n = (k^(m+1) - 1) / (k - 1)\n        # k must be > 1\n        \n        # Binary search for k\n        low = 2\n        high = int(n**(1/m)) + 2 # Upper bound for k, since k^m < n. Add a small buffer.\n        \n        # A more precise upper bound for k:\n        # k^m < n => k < n^(1/m)\n        # For m=3, k < (10^18)^(1/3) = 10^6\n        # For m=59, k < (10^18)^(1/59) approx 2\n        # So high can be set to 10^6 + 2 for safety.\n        # Max value of high is around 10^6.\n        # The number of iterations for binary search will be log(10^6) approx 20.\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(m + 1):\n                current_sum += term\n                if _ < m: # To avoid overflow on the last term calculation if term * mid overflows\n                    if mid > 0 and term > n // mid: # Check for overflow before multiplication\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                sys.stdout.write(\"YES\\n\")\n                return\n\n    sys.stdout.write(\"NO\\n\")\n\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    if n < 7:\n        sys.stdout.write(\"NO\\n\")\n        return\n\n    # Case 1: m = 2 (1 + k + k^2 vertices)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # k = (-1 + sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    # For k to be an integer > 1:\n    # 4n - 3 must be a perfect square, say s^2\n    # s must be odd, and s > 3\n    # k = (s - 1) / 2\n    \n    val = 4 * n - 3\n    s = int(val**0.5)\n    if s * s == val:\n        if (s - 1) % 2 == 0:\n            k = (s - 1) // 2\n            if k > 1:\n                sys.stdout.write(\"YES\\n\")\n                return\n\n    # Case 2: m >= 3\n    # n = 1 + k + k^2 + ... + k^m = (k^(m+1) - 1) / (k - 1)\n    # We need to find if such k > 1 and m >= 2 exist.\n    # m is the number of \"layers\" after the initial vertex.\n    # The problem states \"This step should be done at least once\",\n    # which means there's at least one layer of k vertices, and then\n    # at least one more layer of k*k vertices.\n    # So the smallest m is 2 (1 + k + k^2).\n    # The problem description says \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n    # Initial vertex (1) -> k new vertices (k)\n    # Each of these k new vertices is connected to 1 other vertex (the initial one).\n    # So each of these k vertices connects to k new vertices. Total k*k new vertices.\n    # Total vertices = 1 + k + k*k. This is for m=2.\n    # If this step is done again, each of the k*k new vertices connects to k new vertices.\n    # Total k*k*k new vertices. Total vertices = 1 + k + k*k + k*k*k. This is for m=3.\n    # So m is the number of terms after the initial 1.\n    # n = 1 + k + k^2 + ... + k^m. m >= 2.\n\n    # Iterate m from 3 up to a reasonable limit.\n    # For a fixed m, we need to find k such that n = (k^(m+1) - 1) / (k - 1).\n    # (k-1) * n = k^(m+1) - 1\n    # k^(m+1) - n*k + (n-1) = 0\n    #\n    # For m=3: n = 1 + k + k^2 + k^3\n    # For m=4: n = 1 + k + k^2 + k^3 + k^4\n    # ...\n    # k^m < n < k^(m+1) for k > 1.\n    # So k < n^(1/m).\n    # Maximum m: 2^m <= n. m <= log2(n).\n    # For n = 10^18, m <= log2(10^18) approx 18 * log2(10) approx 18 * 3.32 approx 59.\n    # So m goes from 3 to 59.\n\n    for m in range(3, 60): # m up to 59\n        # Find k for a fixed m\n        # n = (k^(m+1) - 1) / (k - 1)\n        # k must be > 1\n        \n        # Binary search for k\n        low = 2\n        high = int(n**(1/m)) + 2 # Upper bound for k, since k^m < n. Add a small buffer.\n        \n        # A more precise upper bound for k:\n        # k^m < n => k < n^(1/m)\n        # For m=3, k < (10^18)^(1/3) = 10^6\n        # For m=59, k < (10^18)^(1/59) approx 2\n        # So high can be set to 10^6 + 2 for safety.\n        # Max value of high is around 10^6.\n        # The number of iterations for binary search will be log(10^6) approx 20.\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(m + 1):\n                current_sum += term\n                if _ < m: # To avoid overflow on the last term calculation if term * mid overflows\n                    if mid > 0 and term > n // mid: # Check for overflow before multiplication\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                sys.stdout.write(\"YES\\n\")\n                return\n\n    sys.stdout.write(\"NO\\n\")\n\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 1411,
        "thoughts_token_count": 0
    }
}