{
    "start": 1758293693.5845342,
    "end": 1758293698.695513,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:54 KST",
    "gpu": 2,
    "pid": 32,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Array Stabilization\n\nYou are given an array $$$a$$$ consisting of $$$n$$$ integer numbers.Let instability of the array be the following value: $$$\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$$$.You have to remove exactly one element from this array to minimize instability of the resulting $$$(n-1)$$$-elements array. Your task is to calculate the minimum possible instability.\n\n## Input\nThe first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of elements in the array $$$a$$$.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — elements of the array $$$a$$$.\n\n## Output\nPrint one integer — the minimum possible instability of the array if you have to remove exactly one element from the array $$$a$$$.\n\n## Example\n### Input\n['4\\n1 3 3 7', '2\\n1 100000']\n\n### Output\n['2', '0']\n\n## Note\nIn the first example you can remove $$$7$$$ then instability of the remaining array will be $$$3 - 1 = 2$$$.In the second example you can remove either $$$1$$$ or $$$100000$$$ then instability of the remaining array will be $$$100000 - 100000 = 0$$$ and $$$1 - 1 = 0$$$ correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    # Case 1: Remove the smallest element\n    # The remaining array will be a[1], a[2], ..., a[n-1]\n    # Its instability will be a[n-1] - a[1]\n    instability_remove_min = a[n-1] - a[1]\n\n    # Case 2: Remove the largest element\n    # The remaining array will be a[0], a[1], ..., a[n-2]\n    # Its instability will be a[n-2] - a[0]\n    instability_remove_max = a[n-2] - a[0]\n\n    # The minimum instability will be the minimum of these two cases.\n    # Why only these two cases?\n    # To minimize max - min, we want to make max as small as possible\n    # and min as large as possible.\n    # If we remove an element x that is not the smallest or largest:\n    # The new min will still be a[0].\n    # The new max will still be a[n-1].\n    # The instability will be a[n-1] - a[0], which is the original instability.\n    # This value is always greater than or equal to instability_remove_min\n    # and instability_remove_max.\n    # Consider the sorted array a[0], a[1], ..., a[n-1].\n    # The maximum possible value is a[n-1] and the minimum is a[0].\n    # To minimize (max - min) in the remaining n-1 elements:\n    # We must either remove a[0] (the original minimum) or a[n-1] (the original maximum).\n    # If we remove a[0], the new minimum becomes a[1], and the maximum remains a[n-1].\n    # The instability is a[n-1] - a[1].\n    # If we remove a[n-1], the new maximum becomes a[n-2], and the minimum remains a[0].\n    # The instability is a[n-2] - a[0].\n    # If we remove any other element a[i] where 0 < i < n-1,\n    # the minimum remains a[0] and the maximum remains a[n-1].\n    # The instability would be a[n-1] - a[0].\n    # Since a[n-1] - a[0] >= a[n-1] - a[1] and a[n-1] - a[0] >= a[n-2] - a[0],\n    # removing an element from the middle will never yield a smaller instability\n    # than removing an endpoint.\n    # Therefore, we only need to consider removing the smallest or the largest element.\n\n    print(min(instability_remove_min, instability_remove_max))\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    # Case 1: Remove the smallest element\n    # The remaining array will be a[1], a[2], ..., a[n-1]\n    # Its instability will be a[n-1] - a[1]\n    instability_remove_min = a[n-1] - a[1]\n\n    # Case 2: Remove the largest element\n    # The remaining array will be a[0], a[1], ..., a[n-2]\n    # Its instability will be a[n-2] - a[0]\n    instability_remove_max = a[n-2] - a[0]\n\n    # The minimum instability will be the minimum of these two cases.\n    # Why only these two cases?\n    # To minimize max - min, we want to make max as small as possible\n    # and min as large as possible.\n    # If we remove an element x that is not the smallest or largest:\n    # The new min will still be a[0].\n    # The new max will still be a[n-1].\n    # The instability will be a[n-1] - a[0], which is the original instability.\n    # This value is always greater than or equal to instability_remove_min\n    # and instability_remove_max.\n    # Consider the sorted array a[0], a[1], ..., a[n-1].\n    # The maximum possible value is a[n-1] and the minimum is a[0].\n    # To minimize (max - min) in the remaining n-1 elements:\n    # We must either remove a[0] (the original minimum) or a[n-1] (the original maximum).\n    # If we remove a[0], the new minimum becomes a[1], and the maximum remains a[n-1].\n    # The instability is a[n-1] - a[1].\n    # If we remove a[n-1], the new maximum becomes a[n-2], and the minimum remains a[0].\n    # The instability is a[n-2] - a[0].\n    # If we remove any other element a[i] where 0 < i < n-1,\n    # the minimum remains a[0] and the maximum remains a[n-1].\n    # The instability would be a[n-1] - a[0].\n    # Since a[n-1] - a[0] >= a[n-1] - a[1] and a[n-1] - a[0] >= a[n-2] - a[0],\n    # removing an element from the middle will never yield a smaller instability\n    # than removing an endpoint.\n    # Therefore, we only need to consider removing the smallest or the largest element.\n\n    print(min(instability_remove_min, instability_remove_max))\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 463,
        "completion_token_count": 685,
        "thoughts_token_count": 0
    }
}