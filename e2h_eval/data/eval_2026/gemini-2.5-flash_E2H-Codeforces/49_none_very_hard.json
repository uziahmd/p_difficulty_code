{
    "start": 1758293760.9911823,
    "end": 1758293791.7983017,
    "start-formatted": "2025-09-19 23:56 KST",
    "end-formatted": "2025-09-19 23:56 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 0:\n        print(\"NO\")\n        return\n\n    if m == 0:\n        print(\"YES\")\n        print(\"1\" * (n * 2 - 1) if n > 0 else \"\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    visited_nodes = [False] * (n + 1)\n\n    def get_prime_factors(num):\n        factors = {}\n        d = 2\n        temp = num\n        while d * d <= temp:\n            while temp % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                temp //= d\n            d += 1\n        if temp > 1:\n            factors[temp] = factors.get(temp, 0) + 1\n        return factors\n\n    def merge_factors(factors1, factors2, op):\n        merged = {}\n        all_primes = sorted(list(set(factors1.keys()) | set(factors2.keys())))\n        for p in all_primes:\n            exp1 = factors1.get(p, 0)\n            exp2 = factors2.get(p, 0)\n            if op == 'gcd':\n                merged[p] = min(exp1, exp2)\n            elif op == 'lcm':\n                merged[p] = max(exp1, exp2)\n        return merged\n\n    def check_consistency(u_val, v_val, g, l):\n        if g == 0 or l == 0:\n            return False\n        if l % g != 0:\n            return False\n        if u_val == 0 or v_val == 0:\n            return False\n        \n        actual_gcd = 1\n        for p in get_prime_factors(u_val).keys() | get_prime_factors(v_val).keys():\n            exp_u = get_prime_factors(u_val).get(p, 0)\n            exp_v = get_prime_factors(v_val).get(p, 0)\n            actual_gcd *= (p ** min(exp_u, exp_v))\n\n        actual_lcm = 1\n        for p in get_prime_factors(u_val).keys() | get_prime_factors(v_val).keys():\n            exp_u = get_prime_factors(u_val).get(p, 0)\n            exp_v = get_prime_factors(v_val).get(p, 0)\n            actual_lcm *= (p ** max(exp_u, exp_v))\n\n        return actual_gcd == g and actual_lcm == l\n\n    def dfs(u, current_ans, current_visited_nodes):\n        current_visited_nodes[u] = True\n        \n        for v, g, l in adj[u]:\n            if not current_visited_nodes[v]:\n                # Try to determine ans[v]\n                if l % g != 0:\n                    return False\n                \n                prod = l // g\n                \n                u_factors = get_prime_factors(current_ans[u])\n                \n                possible_v_values = []\n                \n                # Iterate through all divisors of prod\n                # A = current_ans[u], B = ans[v]\n                # gcd(A,B) = g, lcm(A,B) = l\n                # A * B = gcd(A,B) * lcm(A,B)\n                # A * B = g * l\n                # B = (g * l) / A\n                \n                if (g * l) % current_ans[u] == 0:\n                    potential_v = (g * l) // current_ans[u]\n                    \n                    if check_consistency(current_ans[u], potential_v, g, l):\n                        possible_v_values.append(potential_v)\n                \n                if not possible_v_values:\n                    return False\n\n                # If there are multiple possibilities, we need to try them\n                # For this problem, we can just pick one if it works.\n                # Since we are doing DFS, we will assign one and backtrack if it fails.\n                \n                current_ans[v] = possible_v_values[0]\n                if not dfs(v, current_ans, current_visited_nodes):\n                    return False\n            else:\n                # v is already visited, check consistency\n                if not check_consistency(current_ans[u], current_ans[v], g, l):\n                    return False\n        return True\n\n    # Try to start DFS from each unvisited node\n    for i in range(1, n + 1):\n        if not visited_nodes[i]:\n            # For each connected component, we need to pick an initial value for one node.\n            # The problem statement implies we can pick any valid arrangement.\n            # Let's try to assign 1 to the first node in the component.\n            # If 1 doesn't work, we could try other values, but that might be too complex.\n            # A more robust approach would be to assign powers of primes.\n            # Let's try to assign a value that is a multiple of all g and a divisor of all l\n            # for its incident edges.\n            \n            # A better initial guess might be to find an 'anchor' node\n            # and set its value such that it's consistent with its neighbors.\n            # For simplicity, let's try 1 first, then 2, etc. up to 10^6.\n            # This is too slow.\n\n            # Instead of guessing a value, let's try to represent the values as prime factorizations.\n            # For each node `i`, we want to find `ans[i]` such that for every edge (u, v, g, l):\n            # `gcd(ans[u], ans[v]) = g` and `lcm(ans[u], ans[v]) = l`.\n            # This means `ans[u] * ans[v] = g * l`.\n            # Also, for each prime `p`, `min(exp_p(ans[u]), exp_p(ans[v])) = exp_p(g)`\n            # and `max(exp_p(ans[u]), exp_p(ans[v])) = exp_p(l)`.\n            \n            # Let `exp_p(x)` be the exponent of prime `p` in the prime factorization of `x`.\n            # We need to determine `exp_p(ans[i])` for all `i` and all relevant primes `p`.\n            \n            # We can use a 2-SAT like approach or just a system of constraints.\n            # For each prime `p`, and for each node `i`, let `x_i_p = exp_p(ans[i])`.\n            # For an edge (u, v, g, l) and prime p:\n            # `min(x_u_p, x_v_p) = exp_p(g)`\n            # `max(x_u_p, x_v_p) = exp_p(l)`\n            \n            # This implies:\n            # 1. `exp_p(g) <= x_u_p <= exp_p(l)`\n            # 2. `exp_p(g) <= x_v_p <= exp_p(l)`\n            # 3. `x_u_p + x_v_p = exp_p(g) + exp_p(l)` (since `A*B = gcd(A,B)*lcm(A,B)`)\n\n            # This can be solved independently for each prime `p`.\n            # For a fixed prime `p`, let `g_p = exp_p(g)` and `l_p = exp_p(l)`.\n            # We need `min(x_u_p, x_v_p) = g_p` and `max(x_u_p, x_v_p) = l_p`.\n            # This means the pair `(x_u_p, x_v_p)` must be either `(g_p, l_p)` or `(l_p, g_p)`.\n            # If `g_p == l_p`, then `x_u_p = x_v_p = g_p`.\n            # If `g_p > l_p`, it's impossible. (This should be caught by `l % g != 0` earlier).\n\n            # So for each prime `p`, and each node `i`, we need to find `x_i_p`.\n            # Initialize `x_i_p` to `None` for all `i, p`.\n            # For each edge (u, v, g, l):\n            #   For each prime `p` in `g` or `l`:\n            #     `g_p = exp_p(g)`, `l_p = exp_p(l)`\n            #     If `g_p > l_p`, impossible.\n            #     If `g_p == l_p`:\n            #       If `x_u_p` is known and `x_u_p != g_p`, impossible.\n            #       If `x_v_p` is known and `x_v_p != g_p`, impossible.\n            #       Set `x_u_p = g_p`, `x_v_p = g_p`. Propagate.\n            #     If `g_p < l_p`:\n            #       This means `(x_u_p, x_v_p)` is either `(g_p, l_p)` or `(l_p, g_p)`.\n            #       This is a 2-choice problem for each edge.\n            \n            # This is a graph problem for each prime.\n            # For a fixed prime `p`, let `val_i` be `x_i_p`.\n            # We need to assign `val_i` for all `i`.\n            # For each edge `(u, v, g, l)`:\n            #   `g_p = exp_p(g)`, `l_p = exp_p(l)`\n            #   If `g_p == l_p`: `val_u = g_p`, `val_v = g_p`.\n            #   If `g_p < l_p`: `(val_u, val_v)` must be `(g_p, l_p)` or `(l_p, g_p)`.\n            \n            # We can use BFS/DFS for each prime.\n            # For each prime `p`, and for each connected component in the graph:\n            #   Pick an arbitrary unassigned node `s` in the component.\n            #   Assign `x_s_p = exp_p(g_first_edge_incident_to_s)` or `x_s_p = exp_p(l_first_edge_incident_to_s)`.\n            #   Then propagate using BFS/DFS.\n            \n            # Let's collect all primes involved.\n            all_primes = set()\n            for u, v, g, l in edges:\n                for num in [g, l]:\n                    all_primes.update(get_prime_factors(num).keys())\n            \n            # Initialize `prime_exponents[node_id][prime]`\n            prime_exponents = [[None for _ in range(max(all_primes) + 1 if all_primes else 2)] for _ in range(n + 1)]\n            \n            possible = True\n            for p in sorted(list(all_primes)):\n                component_visited = [False] * (n + 1)\n                \n                for start_node in range(1, n + 1):\n                    if not component_visited[start_node]:\n                        q = []\n                        \n                        # If prime_exponents[start_node][p] is already determined by another component or edge\n                        # within this component (e.g., if it was part of a g_p == l_p constraint)\n                        # then use that value. Otherwise, we need to pick one.\n                        \n                        if prime_exponents[start_node][p] is None:\n                            # Try assigning the lower bound for the first encountered edge.\n                            # Find an edge incident to start_node.\n                            found_edge = False\n                            for neighbor, g_val, l_val in adj[start_node]:\n                                g_p_val = get_prime_factors(g_val).get(p, 0)\n                                l_p_val = get_prime_factors(l_val).get(p, 0)\n                                if g_p_val > l_p_val:\n                                    possible = False\n                                    break\n                                \n                                # If g_p_val == l_p_val, then start_node must be g_p_val.\n                                # If g_p_val < l_p_val, we can pick either g_p_val or l_p_val.\n                                # Let's pick g_p_val.\n                                prime_exponents[start_node][p] = g_p_val\n                                found_edge = True\n                                break\n                            if not possible: break\n                            if not found_edge: # start_node is isolated or has no edges for this prime\n                                prime_exponents[start_node][p] = 0 # Default to 0\n                        \n                        q.append(start_node)\n                        component_visited[start_node] = True\n\n                        while q:\n                            u = q.pop(0)\n                            \n                            for v, g_val, l_val in adj[u]:\n                                g_p_val = get_prime_factors(g_val).get(p, 0)\n                                l_p_val = get_prime_factors(l_val).get(p, 0)\n\n                                if g_p_val > l_p_val:\n                                    possible = False\n                                    break\n                                \n                                if prime_exponents[u][p] is None:\n                                    # This should not happen if we initialize start_node correctly.\n                                    # If it does, something is wrong with the logic or graph structure.\n                                    possible = False\n                                    break\n                                \n                                if prime_exponents[v][p] is None:\n                                    # Determine prime_exponents[v][p] based on u\n                                    # min(exp_u, exp_v) = g_p_val\n                                    # max(exp_u, exp_v) = l_p_val\n                                    exp_u = prime_exponents[u][p]\n                                    \n                                    if exp_u == g_p_val:\n                                        prime_exponents[v][p] = l_p_val\n                                    elif exp_u == l_p_val:\n                                        prime_exponents[v][p] = g_p_val\n                                    else:\n                                        # exp_u is neither g_p_val nor l_p_val, impossible.\n                                        possible = False\n                                        break\n                                    \n                                    q.append(v)\n                                    component_visited[v] = True\n                                else:\n                                    # v is already visited, check consistency\n                                    exp_u = prime_exponents[u][p]\n                                    exp_v = prime_exponents[v][p]\n                                    \n                                    if not (min(exp_u, exp_v) == g_p_val and max(exp_u, exp_v) == l_p_val):\n                                        possible = False\n                                        break\n                            if not possible: break\n                        if not possible: break\n                if not possible: break\n            \n            if not possible:\n                print(\"NO\")\n                return\n\n    # Reconstruct ans values from prime_exponents\n    for i in range(1, n + 1):\n        current_val = 1\n        if not all_primes:\n            ans[i] = 1\n            continue\n\n        for p in sorted(list(all_primes)):\n            if prime_exponents[i][p] is None:\n                # If a node is isolated or has no edges for a prime, its exponent can be 0.\n                prime_exponents[i][p] = 0\n            current_val *= (p ** prime_exponents[i][p])\n        ans[i] = current_val\n    \n    # Final check for all edges\n    for u, v, g, l in edges:\n        if not check_consistency(ans[u], ans[v], g, l):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*(ans[1:]))\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 0:\n        print(\"NO\")\n        return\n\n    if m == 0:\n        print(\"YES\")\n        print(\"1\" * (n * 2 - 1) if n > 0 else \"\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    visited_nodes = [False] * (n + 1)\n\n    def get_prime_factors(num):\n        factors = {}\n        d = 2\n        temp = num\n        while d * d <= temp:\n            while temp % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                temp //= d\n            d += 1\n        if temp > 1:\n            factors[temp] = factors.get(temp, 0) + 1\n        return factors\n\n    def merge_factors(factors1, factors2, op):\n        merged = {}\n        all_primes = sorted(list(set(factors1.keys()) | set(factors2.keys())))\n        for p in all_primes:\n            exp1 = factors1.get(p, 0)\n            exp2 = factors2.get(p, 0)\n            if op == 'gcd':\n                merged[p] = min(exp1, exp2)\n            elif op == 'lcm':\n                merged[p] = max(exp1, exp2)\n        return merged\n\n    def check_consistency(u_val, v_val, g, l):\n        if g == 0 or l == 0:\n            return False\n        if l % g != 0:\n            return False\n        if u_val == 0 or v_val == 0:\n            return False\n        \n        actual_gcd = 1\n        for p in get_prime_factors(u_val).keys() | get_prime_factors(v_val).keys():\n            exp_u = get_prime_factors(u_val).get(p, 0)\n            exp_v = get_prime_factors(v_val).get(p, 0)\n            actual_gcd *= (p ** min(exp_u, exp_v))\n\n        actual_lcm = 1\n        for p in get_prime_factors(u_val).keys() | get_prime_factors(v_val).keys():\n            exp_u = get_prime_factors(u_val).get(p, 0)\n            exp_v = get_prime_factors(v_val).get(p, 0)\n            actual_lcm *= (p ** max(exp_u, exp_v))\n\n        return actual_gcd == g and actual_lcm == l\n\n    def dfs(u, current_ans, current_visited_nodes):\n        current_visited_nodes[u] = True\n        \n        for v, g, l in adj[u]:\n            if not current_visited_nodes[v]:\n                # Try to determine ans[v]\n                if l % g != 0:\n                    return False\n                \n                prod = l // g\n                \n                u_factors = get_prime_factors(current_ans[u])\n                \n                possible_v_values = []\n                \n                # Iterate through all divisors of prod\n                # A = current_ans[u], B = ans[v]\n                # gcd(A,B) = g, lcm(A,B) = l\n                # A * B = gcd(A,B) * lcm(A,B)\n                # A * B = g * l\n                # B = (g * l) / A\n                \n                if (g * l) % current_ans[u] == 0:\n                    potential_v = (g * l) // current_ans[u]\n                    \n                    if check_consistency(current_ans[u], potential_v, g, l):\n                        possible_v_values.append(potential_v)\n                \n                if not possible_v_values:\n                    return False\n\n                # If there are multiple possibilities, we need to try them\n                # For this problem, we can just pick one if it works.\n                # Since we are doing DFS, we will assign one and backtrack if it fails.\n                \n                current_ans[v] = possible_v_values[0]\n                if not dfs(v, current_ans, current_visited_nodes):\n                    return False\n            else:\n                # v is already visited, check consistency\n                if not check_consistency(current_ans[u], current_ans[v], g, l):\n                    return False\n        return True\n\n    # Try to start DFS from each unvisited node\n    for i in range(1, n + 1):\n        if not visited_nodes[i]:\n            # For each connected component, we need to pick an initial value for one node.\n            # The problem statement implies we can pick any valid arrangement.\n            # Let's try to assign 1 to the first node in the component.\n            # If 1 doesn't work, we could try other values, but that might be too complex.\n            # A more robust approach would be to assign powers of primes.\n            # Let's try to assign a value that is a multiple of all g and a divisor of all l\n            # for its incident edges.\n            \n            # A better initial guess might be to find an 'anchor' node\n            # and set its value such that it's consistent with its neighbors.\n            # For simplicity, let's try 1 first, then 2, etc. up to 10^6.\n            # This is too slow.\n\n            # Instead of guessing a value, let's try to represent the values as prime factorizations.\n            # For each node `i`, we want to find `ans[i]` such that for every edge (u, v, g, l):\n            # `gcd(ans[u], ans[v]) = g` and `lcm(ans[u], ans[v]) = l`.\n            # This means `ans[u] * ans[v] = g * l`.\n            # Also, for each prime `p`, `min(exp_p(ans[u]), exp_p(ans[v])) = exp_p(g)`\n            # and `max(exp_p(ans[u]), exp_p(ans[v])) = exp_p(l)`.\n            \n            # Let `exp_p(x)` be the exponent of prime `p` in the prime factorization of `x`.\n            # We need to determine `exp_p(ans[i])` for all `i` and all relevant primes `p`.\n            \n            # We can use a 2-SAT like approach or just a system of constraints.\n            # For each prime `p`, and for each node `i`, let `x_i_p = exp_p(ans[i])`.\n            # For an edge (u, v, g, l) and prime p:\n            # `min(x_u_p, x_v_p) = exp_p(g)`\n            # `max(x_u_p, x_v_p) = exp_p(l)`\n            \n            # This implies:\n            # 1. `exp_p(g) <= x_u_p <= exp_p(l)`\n            # 2. `exp_p(g) <= x_v_p <= exp_p(l)`\n            # 3. `x_u_p + x_v_p = exp_p(g) + exp_p(l)` (since `A*B = gcd(A,B)*lcm(A,B)`)\n\n            # This can be solved independently for each prime `p`.\n            # For a fixed prime `p`, let `g_p = exp_p(g)` and `l_p = exp_p(l)`.\n            # We need `min(x_u_p, x_v_p) = g_p` and `max(x_u_p, x_v_p) = l_p`.\n            # This means the pair `(x_u_p, x_v_p)` must be either `(g_p, l_p)` or `(l_p, g_p)`.\n            # If `g_p == l_p`, then `x_u_p = x_v_p = g_p`.\n            # If `g_p > l_p`, it's impossible. (This should be caught by `l % g != 0` earlier).\n\n            # So for each prime `p`, and each node `i`, we need to find `x_i_p`.\n            # Initialize `x_i_p` to `None` for all `i, p`.\n            # For each edge (u, v, g, l):\n            #   For each prime `p` in `g` or `l`:\n            #     `g_p = exp_p(g)`, `l_p = exp_p(l)`\n            #     If `g_p > l_p`, impossible.\n            #     If `g_p == l_p`:\n            #       If `x_u_p` is known and `x_u_p != g_p`, impossible.\n            #       If `x_v_p` is known and `x_v_p != g_p`, impossible.\n            #       Set `x_u_p = g_p`, `x_v_p = g_p`. Propagate.\n            #     If `g_p < l_p`:\n            #       This means `(x_u_p, x_v_p)` is either `(g_p, l_p)` or `(l_p, g_p)`.\n            #       This is a 2-choice problem for each edge.\n            \n            # This is a graph problem for each prime.\n            # For a fixed prime `p`, let `val_i` be `x_i_p`.\n            # We need to assign `val_i` for all `i`.\n            # For each edge `(u, v, g, l)`:\n            #   `g_p = exp_p(g)`, `l_p = exp_p(l)`\n            #   If `g_p == l_p`: `val_u = g_p`, `val_v = g_p`.\n            #   If `g_p < l_p`: `(val_u, val_v)` must be `(g_p, l_p)` or `(l_p, g_p)`.\n            \n            # We can use BFS/DFS for each prime.\n            # For each prime `p`, and for each connected component in the graph:\n            #   Pick an arbitrary unassigned node `s` in the component.\n            #   Assign `x_s_p = exp_p(g_first_edge_incident_to_s)` or `x_s_p = exp_p(l_first_edge_incident_to_s)`.\n            #   Then propagate using BFS/DFS.\n            \n            # Let's collect all primes involved.\n            all_primes = set()\n            for u, v, g, l in edges:\n                for num in [g, l]:\n                    all_primes.update(get_prime_factors(num).keys())\n            \n            # Initialize `prime_exponents[node_id][prime]`\n            prime_exponents = [[None for _ in range(max(all_primes) + 1 if all_primes else 2)] for _ in range(n + 1)]\n            \n            possible = True\n            for p in sorted(list(all_primes)):\n                component_visited = [False] * (n + 1)\n                \n                for start_node in range(1, n + 1):\n                    if not component_visited[start_node]:\n                        q = []\n                        \n                        # If prime_exponents[start_node][p] is already determined by another component or edge\n                        # within this component (e.g., if it was part of a g_p == l_p constraint)\n                        # then use that value. Otherwise, we need to pick one.\n                        \n                        if prime_exponents[start_node][p] is None:\n                            # Try assigning the lower bound for the first encountered edge.\n                            # Find an edge incident to start_node.\n                            found_edge = False\n                            for neighbor, g_val, l_val in adj[start_node]:\n                                g_p_val = get_prime_factors(g_val).get(p, 0)\n                                l_p_val = get_prime_factors(l_val).get(p, 0)\n                                if g_p_val > l_p_val:\n                                    possible = False\n                                    break\n                                \n                                # If g_p_val == l_p_val, then start_node must be g_p_val.\n                                # If g_p_val < l_p_val, we can pick either g_p_val or l_p_val.\n                                # Let's pick g_p_val.\n                                prime_exponents[start_node][p] = g_p_val\n                                found_edge = True\n                                break\n                            if not possible: break\n                            if not found_edge: # start_node is isolated or has no edges for this prime\n                                prime_exponents[start_node][p] = 0 # Default to 0\n                        \n                        q.append(start_node)\n                        component_visited[start_node] = True\n\n                        while q:\n                            u = q.pop(0)\n                            \n                            for v, g_val, l_val in adj[u]:\n                                g_p_val = get_prime_factors(g_val).get(p, 0)\n                                l_p_val = get_prime_factors(l_val).get(p, 0)\n\n                                if g_p_val > l_p_val:\n                                    possible = False\n                                    break\n                                \n                                if prime_exponents[u][p] is None:\n                                    # This should not happen if we initialize start_node correctly.\n                                    # If it does, something is wrong with the logic or graph structure.\n                                    possible = False\n                                    break\n                                \n                                if prime_exponents[v][p] is None:\n                                    # Determine prime_exponents[v][p] based on u\n                                    # min(exp_u, exp_v) = g_p_val\n                                    # max(exp_u, exp_v) = l_p_val\n                                    exp_u = prime_exponents[u][p]\n                                    \n                                    if exp_u == g_p_val:\n                                        prime_exponents[v][p] = l_p_val\n                                    elif exp_u == l_p_val:\n                                        prime_exponents[v][p] = g_p_val\n                                    else:\n                                        # exp_u is neither g_p_val nor l_p_val, impossible.\n                                        possible = False\n                                        break\n                                    \n                                    q.append(v)\n                                    component_visited[v] = True\n                                else:\n                                    # v is already visited, check consistency\n                                    exp_u = prime_exponents[u][p]\n                                    exp_v = prime_exponents[v][p]\n                                    \n                                    if not (min(exp_u, exp_v) == g_p_val and max(exp_u, exp_v) == l_p_val):\n                                        possible = False\n                                        break\n                            if not possible: break\n                        if not possible: break\n                if not possible: break\n            \n            if not possible:\n                print(\"NO\")\n                return\n\n    # Reconstruct ans values from prime_exponents\n    for i in range(1, n + 1):\n        current_val = 1\n        if not all_primes:\n            ans[i] = 1\n            continue\n\n        for p in sorted(list(all_primes)):\n            if prime_exponents[i][p] is None:\n                # If a node is isolated or has no edges for a prime, its exponent can be 0.\n                prime_exponents[i][p] = 0\n            current_val *= (p ** prime_exponents[i][p])\n        ans[i] = current_val\n    \n    # Final check for all edges\n    for u, v, g, l in edges:\n        if not check_consistency(ans[u], ans[v], g, l):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*(ans[1:]))\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 552,
        "completion_token_count": 4011,
        "thoughts_token_count": 0
    }
}