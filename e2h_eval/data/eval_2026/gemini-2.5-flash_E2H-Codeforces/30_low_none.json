{
    "start": 1758285117.8387544,
    "end": 1758285139.3043153,
    "start-formatted": "2025-09-19 21:31 KST",
    "end-formatted": "2025-09-19 21:32 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Solving the TV Game Problem with Dynamic Programming**\n\nOkay, I'm facing the \"TV Game\" problem, and I need a Python script to solve it.  Let's break down my thought process.  The crux of the problem is optimizing the sum of two numbers, S1 and S2, built by Homer and Marge, respectively, by taking digits from a given number A.\n\n**Understanding the Problem:** I quickly grasp the rules.  We have Homer and Marge, a number A (with 2n digits), and the goal is to maximize the sum of their numbers (S1 + S2). The catch?  Each player takes n moves, selecting digits from the *left* of A.\n\n**Constraints Check:** `n` is up to 18, meaning we have up to 36 moves total. This impacts how I approach the problem. I need to make sure I consider the implications of `n` being as high as 18.  The key takeaway from the constraints is that while `S1` and `S2` could get large, the standard Python integers handle arbitrary precision, so overflow is not a direct concern.  Leading zeros are also allowed in A, S1, and S2, so I must take that into account as well.\n\n**Initial Considerations and Why Brute-Force Won't Work:** My first thought is brute force – trying every possible combination of moves.  But, I realize very quickly that with `2^(2n)` possible combinations, this is completely infeasible for `n=18`.  Even for smaller values of `n`, this will quickly become computationally intractable.\n\n**Dynamic Programming as the Solution:**  So, dynamic programming it is. The core idea is to build a `dp` table.  I'm initially thinking of a `dp[i][h_moves][m_moves]` state, but it hits me that `i` (current digit index) is redundant given `h_moves` and `m_moves` (Homer and Marge's moves).\n\n**Optimizing the DP State:** I need a more efficient representation. Instead of storing the sum, I need to store the actual `S1` and `S2` values at each stage. So, I consider `dp[h][m] = (S1, S2)`, where `h` and `m` represent the number of moves made by Homer and Marge, respectively. That sounds more accurate. The 'choice' (H or M) will guide how the numbers are built.\n\n**The Crucial Insight (and the Implementation Challenge):**  The key is recognizing that appending a digit to a number means multiplication by 10 and addition.  I need to ensure the `dp` table accurately reflects this. Storing only the sum (S1+S2) isn't sufficient to *reconstruct* the actual numbers, which is essential to determine how new digits are appended.  I need to maintain the *actual* values of `S1` and `S2`.\n\nNow I need to think about how to build this `dp` table in a bottom-up manner, considering the choices for each digit and maximizing the combined sum while keeping track of the individual numbers. I will have to refine how to store the results in each `dp` state.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    a_str = sys.stdin.readline().strip()\n\n    # dp[h_moves][m_moves] stores a tuple (s1_val, s2_val) representing\n    # the maximum S1 and S2 values after h_moves by Homer and m_moves by Marge.\n    # We initialize with (0, 0) for the base case (0 moves).\n    # All other states are initialized to (-1, -1) to signify not yet reachable or invalid.\n    dp = [[(-1, -1) for _ in range(n + 1)] for _ in range(n + 1)]\n    dp[0][0] = (0, 0)\n\n    # parent[h_moves][m_moves] stores the choice ('H' or 'M') that led to the\n    # maximum S1+S2 at this state, and the previous state (prev_h, prev_m).\n    # This is used for path reconstruction.\n    parent = [[None for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # Iterate through all possible numbers of moves\n    # h_idx: Homer's moves, m_idx: Marge's moves\n    for h_idx in range(n + 1):\n        for m_idx in range(n + 1):\n            # If this state is not reachable, skip it\n            if dp[h_idx][m_idx] == (-1, -1):\n                continue\n\n            # Current digit index in A\n            current_digit_idx = h_idx + m_idx\n            # If all 2n digits have been processed, we are done for this path\n            if current_digit_idx == 2 * n:\n                continue\n\n            # Get the current digit\n            digit = int(a_str[current_digit_idx])\n\n            # Option 1: Homer takes the current digit\n            if h_idx + 1 <= n: # If Homer can still make moves\n                s1_prev, s2_prev = dp[h_idx][m_idx]\n                s1_new = s1_prev * 10 + digit\n                s2_new = s2_prev\n                \n                # Check if this new state (h_idx+1, m_idx) is better than what's currently stored\n                # Or if it's the first time we reach this state\n                if dp[h_idx + 1][m_idx] == (-1, -1) or \\\n                   (s1_new + s2_new) > (dp[h_idx + 1][m_idx][0] + dp[h_idx + 1][m_idx][1]):\n                    dp[h_idx + 1][m_idx] = (s1_new, s2_new)\n                    parent[h_idx + 1][m_idx] = ('H', (h_idx, m_idx))\n\n            # Option 2: Marge takes the current digit\n            if m_idx + 1 <= n: # If Marge can still make moves\n                s1_prev, s2_prev = dp[h_idx][m_idx]\n                s1_new = s1_prev\n                s2_new = s2_prev * 10 + digit\n\n                # Check if this new state (h_idx, m_idx+1) is better than what's currently stored\n                # Or if it's the first time we reach this state\n                if dp[h_idx][m_idx + 1] == (-1, -1) or \\\n                   (s1_new + s2_new) > (dp[h_idx][m_idx + 1][0] + dp[h_idx][m_idx + 1][1]):\n                    dp[h_idx][m_idx + 1] = (s1_new, s2_new)\n                    parent[h_idx][m_idx + 1] = ('M', (h_idx, m_idx))\n\n    # Reconstruct the path\n    path = []\n    current_h, current_m = n, n # Start from the final state (n moves for each player)\n\n    while current_h > 0 or current_m > 0:\n        choice, (prev_h, prev_m) = parent[current_h][current_m]\n        path.append(choice)\n        current_h, current_m = prev_h, prev_m\n    \n    # The path is built in reverse, so reverse it to get the correct order\n    print(\"\".join(reversed(path)))\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    a_str = sys.stdin.readline().strip()\n\n    # dp[h_moves][m_moves] stores a tuple (s1_val, s2_val) representing\n    # the maximum S1 and S2 values after h_moves by Homer and m_moves by Marge.\n    # We initialize with (0, 0) for the base case (0 moves).\n    # All other states are initialized to (-1, -1) to signify not yet reachable or invalid.\n    dp = [[(-1, -1) for _ in range(n + 1)] for _ in range(n + 1)]\n    dp[0][0] = (0, 0)\n\n    # parent[h_moves][m_moves] stores the choice ('H' or 'M') that led to the\n    # maximum S1+S2 at this state, and the previous state (prev_h, prev_m).\n    # This is used for path reconstruction.\n    parent = [[None for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # Iterate through all possible numbers of moves\n    # h_idx: Homer's moves, m_idx: Marge's moves\n    for h_idx in range(n + 1):\n        for m_idx in range(n + 1):\n            # If this state is not reachable, skip it\n            if dp[h_idx][m_idx] == (-1, -1):\n                continue\n\n            # Current digit index in A\n            current_digit_idx = h_idx + m_idx\n            # If all 2n digits have been processed, we are done for this path\n            if current_digit_idx == 2 * n:\n                continue\n\n            # Get the current digit\n            digit = int(a_str[current_digit_idx])\n\n            # Option 1: Homer takes the current digit\n            if h_idx + 1 <= n: # If Homer can still make moves\n                s1_prev, s2_prev = dp[h_idx][m_idx]\n                s1_new = s1_prev * 10 + digit\n                s2_new = s2_prev\n                \n                # Check if this new state (h_idx+1, m_idx) is better than what's currently stored\n                # Or if it's the first time we reach this state\n                if dp[h_idx + 1][m_idx] == (-1, -1) or \\\n                   (s1_new + s2_new) > (dp[h_idx + 1][m_idx][0] + dp[h_idx + 1][m_idx][1]):\n                    dp[h_idx + 1][m_idx] = (s1_new, s2_new)\n                    parent[h_idx + 1][m_idx] = ('H', (h_idx, m_idx))\n\n            # Option 2: Marge takes the current digit\n            if m_idx + 1 <= n: # If Marge can still make moves\n                s1_prev, s2_prev = dp[h_idx][m_idx]\n                s1_new = s1_prev\n                s2_new = s2_prev * 10 + digit\n\n                # Check if this new state (h_idx, m_idx+1) is better than what's currently stored\n                # Or if it's the first time we reach this state\n                if dp[h_idx][m_idx + 1] == (-1, -1) or \\\n                   (s1_new + s2_new) > (dp[h_idx][m_idx + 1][0] + dp[h_idx][m_idx + 1][1]):\n                    dp[h_idx][m_idx + 1] = (s1_new, s2_new)\n                    parent[h_idx][m_idx + 1] = ('M', (h_idx, m_idx))\n\n    # Reconstruct the path\n    path = []\n    current_h, current_m = n, n # Start from the final state (n moves for each player)\n\n    while current_h > 0 or current_m > 0:\n        choice, (prev_h, prev_m) = parent[current_h][current_m]\n        path.append(choice)\n        current_h, current_m = prev_h, prev_m\n    \n    # The path is built in reverse, so reverse it to get the correct order\n    print(\"\".join(reversed(path)))\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 422,
        "completion_token_count": 1084,
        "thoughts_token_count": 779
    }
}