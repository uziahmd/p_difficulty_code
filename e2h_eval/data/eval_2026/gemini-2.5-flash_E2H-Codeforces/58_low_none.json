{
    "start": 1758284901.1992435,
    "end": 1758285051.2609193,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Analyzing the Minimum Edges to Create an Odd Cycle**\n\nOkay, I'm tackling this competitive programming problem. The goal is to figure out the fewest edges, `t`, I need to add to a given graph to make an odd-length cycle, and then count the ways to do so, `w`.\n\nFirst things first: I know a graph *already* has an odd cycle if and only if it's *not* bipartite. So, I need to check for that first. I'll use BFS or DFS to check for bipartiteness. I can color the nodes, and if I find a conflict during the traversal (an edge connecting two nodes of the same color), I immediately know the graph already contains an odd cycle. If that's the case, `t` is zero, and `w` is one (since I don't need to do anything). I'll need to check each connected component independently.\n\nIf the graph *is* bipartite, then things get interesting. I know to create an odd cycle, I have to add an edge between two vertices in the *same* partition set. Let's call them A and B. Adding an edge (u, v) where both u and v are in A (or both in B) will create an odd cycle. The length of the cycle will be `dist(u, v) + 1`, where `dist` is the shortest path distance. And since they are in the same partition, the distance must be even, and adding one will result in an odd cycle.\n\nNow, to find the *minimum* number of edges, `t`. The most straightforward case is if I can add just one edge to form an odd cycle. This means `t = 1`. For that to be possible, I need to find two nodes, `u` and `v`, that are:\n1.  In the *same* connected component.\n2.  In the *same* partition set (A or B).\n3.  Not already connected by an edge.\n\nIdeally, I want to minimize the length of the new odd cycle. The smallest odd cycle possible is length 3. This means `dist(u, v)` has to be 2. So, I need to look for pairs of nodes in the same partition with a distance of 2, and that aren't already connected. If I find such a pair, then `t = 1`, and I need to figure out how many ways I can choose this edge to calculate `w`.\n",
    "response": "The problem asks us to find the minimum number of edges `t` to add to a given undirected graph to form a simple odd-length cycle, and `w` the number of ways to do so. The graph can be disconnected, without parallel edges or loops.\n\nFirst, let's understand the properties of odd cycles. A graph contains an odd cycle if and only if it is not bipartite. If a graph is bipartite, adding an edge between two vertices within the same partition set will create an odd cycle. If an edge is added between vertices in different partition sets, the graph remains bipartite.\n\nWe can solve this problem by considering different values for `t` (number of added edges) in increasing order: 0, 1, 2, 3.\n\n**Step 0: Check if the graph already contains an odd cycle (t=0).**\nWe can use a Breadth-First Search (BFS) or Depth-First Search (DFS) to check if the graph is bipartite. During the traversal, we assign colors (e.g., 0 and 1) to vertices. For each connected component:\n1. Start BFS/DFS from an uncolored vertex, assigning it color 0.\n2. When traversing an edge `(u, v)`:\n   - If `v` is uncolored, assign `color[v] = 1 - color[u]` and add `v` to the queue/stack.\n   - If `v` is colored and `color[v] == color[u]`, then we have found an odd cycle. The graph is not bipartite.\n   - If `v` is colored and `color[v] != color[u]`, continue.\nIf we complete the traversal for all connected components without finding any `color[v] == color[u]` conflict, the graph is bipartite.\n\nIf an odd cycle is found (`t=0`), then `w=1` (there's only one way to add 0 edges). Print `0 1` and terminate.\n\n**Step 1: The graph is bipartite. Consider adding 1 edge (t=1).**\nIf the graph is bipartite, we need to add at least one edge. To form an odd cycle by adding a single edge `(u, v)`, `u` and `v` must belong to the same connected component and be in the same partition set of that component. The added edge `(u, v)` must not already exist.\n\nThe shortest possible odd cycle has length 3 (a triangle). If we add an edge `(u, v)`, it forms a triangle if `u` and `v` have a common neighbor `k`. In a bipartite graph, if `u` and `v` are in the same partition set, then any common neighbor `k` must be in the opposite partition set. This means `dist(u, k) = 1` and `dist(v, k) = 1`. Since `u` and `v` are in the same partition, `dist(u, v)` must be even. Here `dist(u, v) = 2` (path `u-k-v`). Adding edge `(u, v)` completes an odd cycle of length `2 + 1 = 3`.\n\nSo, `t=1` is possible if there exist two vertices `u, v` in the same connected component, in the same partition set, such that `dist(u, v) = 2` (i.e., they have a common neighbor), and `(u, v)` is not an existing edge.\nThe number of ways `w` for `t=1` would be the count of such pairs `(u, v)`.\nTo find these pairs efficiently:\nFor each connected component `C` that is bipartite:\n  Let its partitions be `P_0` and `P_1`.\n  Iterate through all vertices `u` in `C`. For each `u`, iterate through its neighbors `k`. For each neighbor `k`, iterate through `k`'s neighbors `v` (where `v != u`).\n  If `v` is in the same partition as `u` (i.e., `color[u] == color[v]`) and `(u, v)` is not an existing edge, then adding `(u, v)` forms an odd cycle of length 3. This contributes 1 to `w`.\n  We need to count unique pairs `(u, v)`, so we can add `(min(u, v), max(u, v))` to a set to avoid duplicates.\n\nA more efficient way to count such pairs:\nFor each connected component `C` with partitions `P_0` and `P_1`:\n  For each vertex `k` in `P_1` (or `P_0`):\n    Let `N(k)` be the set of neighbors of `k`. All neighbors `N(k)` are in `P_0`.\n    Any pair `u, v \\in N(k)` (`u != v`) can form an odd cycle of length 3 by adding `(u, v)`.\n    The number of such pairs for a given `k` is `|N(k)| * (|N(k)| - 1) / 2`.\n    Sum this value over all `k` in `P_1` (or `P_0`). This gives the total count of pairs `(u, v)` that are distance 2 apart and in the same partition.\n    This count `w` is the number of ways to add 1 edge to form a 3-cycle.\nIf `w > 0`, print `1 w` and terminate.\n\n**Step 2: The graph is bipartite, and no 3-cycle can be formed by adding 1 edge (t=2 or t=3).**\nThis means for all pairs `u, v` in the same partition and same component, `dist(u, v) > 2`.\nThis implies that every connected component is a tree or a collection of disjoint trees (i.e., no cycles at all, and no two nodes in the same partition are distance 2 apart).\nIf we add 1 edge, it must connect two vertices `u, v` in the same partition, `dist(u,v) >= 4`. This forms a cycle of length `dist(u,v)+1 >= 5`.\nThe problem asks for the minimum number of edges to form *any* odd cycle.\n\nConsider `t=2`.\nTo form an odd cycle with 2 added edges, say `(u, v)` and `(x, y)`:\nThe simplest odd cycle we can form with 2 edges is a 5-cycle. This means we might add edges `(u,v)` and `(v,x)` to form a `u-v-x` path, then connect `u` and `x` through a path of length 2 in the original graph. This doesn't seem to be the most general approach.\n\nA more general approach for `t=2`:\nWe can pick two vertices `u, v` from different connected components and add an edge `(u, v)`. This merges the two components. Now, if the merged component is not bipartite (i.e., if `u` and `v` were in \"effectively\" the same partition after merging), we might need to add another edge. This is getting complicated.\n\nLet's simplify:\nIf we add an edge `(u, v)` between two vertices `u, v` from *different* connected components, the graph remains bipartite (assuming `u` and `v` are assigned opposite colors).\nTo create an odd cycle, we need to connect two vertices `u, v` that are in the same partition set.\nIf all connected components are trees, and no two nodes in the same partition are distance 2 apart (which is true if `t=1` was not possible), we need to add at least 2 edges.\n\n**Subcase 2.1: Adding 2 edges (t=2).**\nThis is possible if there are at least two connected components.\nLet's say we have components `C_1` and `C_2`.\n`C_1` has partitions `P_{1,0}, P_{1,1}`.\n`C_2` has partitions `P_{2,0}, P_{2,1}`.\nWe can pick a vertex `u` from `P_{1,0}` and a vertex `v` from `P_{2,0}`. Add an edge `(u, v)`.\nThen, pick a vertex `x` from `P_{1,1}` and a vertex `y` from `P_{2,1}`. Add an edge `(x, y)`.\nNow, `u` and `x` are in `C_1` (different partitions). `v` and `y` are in `C_2` (different partitions).\nThe path `u - v - y - x` exists. `u` and `x` are in `C_1`, `v` and `y` are in `C_2`.\nThe original path `u - ... - x` in `C_1` has odd length.\nThe original path `v - ... - y` in `C_2` has odd length.\nIf we add `(u,v)` and `(x,y)`, the new path `u - v - y - x` has length 3.\nThe cycle `u - (path in C1) - x - y - v - u` has length `(dist_C1(u,x)) + 1 + 1 + 1`. This is `odd + 3 = even`. This doesn't work.\n\nHow about this:\nPick `u \\in P_{1,0}` and `v \\in P_{2,0}`. Add edge `(u, v)`.\nNow, `C_1` and `C_2` are merged. `u` and `v` are in the same partition.\nWe need to add another edge `(x, y)` such that `x, y` are in the same partition in the *new* graph.\nIf we add `(u, v)`, `C_1` and `C_2` become one component. `u` (from `P_{1,0}`) and `v` (from `P_{2,0}`) are now effectively in the same partition.\nIf we pick `x \\in P_{1,0}` and `y \\in P_{2,1}`. Add edge `(x, y)`.\nNow we have `u - v` and `x - y`.\nThe path `u - (path in C1) - x` has odd length.\nThe path `v - (path in C2) - y` has odd length.\nThe cycle `u - v - y - (path in C2) - v - u` is not right.\n\nA simpler way to form an odd cycle with 2 edges:\nWe need to connect two vertices in the same partition.\nIf we have two components `C_1` and `C_2`.\nPick `u \\in P_{1,0}`. Pick `v \\in P_{2,0}`. Add edge `(u, v)`.\nPick `x \\in P_{1,0}`. Pick `y \\in P_{2,0}`. Add edge `(x, y)`.\nThis only works if `u != x` and `v != y`.\nIf we add `(u,v)` and `(x,y)`, where `u, x \\in P_{1,0}` and `v, y \\in P_{2,0}` (and `u \\ne x, v \\ne y`).\nThe cycle `u - v - y - x - u` is an odd cycle of length 4, which is even. This doesn't work.\nThe cycle `u - v - y - (path in C2) - x - u` is also not necessarily odd.\n\nLet's rethink:\nIf `t=1` is not possible, it means there are no two vertices `u, v` in the same partition and same component such that `dist(u, v) = 2`.\nThis means all connected components are \"sparse\" in some sense.\nIf we add 2 edges, we want to create an odd cycle.\nThe smallest odd cycle is 3. If `t=1` didn't yield a 3-cycle, then we can't get a 3-cycle with `t=2` either, unless the 3-cycle itself uses one of the added edges internally to connect two parts of a path.\n\nWhat if we have multiple connected components?\nSuppose we have a component `C_1` with partitions `P_{1,0}, P_{1,1}`.\nAnd another component `C_2` with partitions `P_{2,0}, P_{2,1}`.\nWe can pick `u \\in P_{1,0}`, `v \\in P_{1,1}`.\nPick `x \\in P_{2,0}`, `y \\in P_{2,1}`.\nAdd edges `(u, x)` and `(v, y)`.\nNow, `u` and `v` are in `C_1`, `x` and `y` are in `C_2`.\nThe path `u - x - y - v` is formed. `u` and `v` are in different partitions in `C_1`. So `dist_{C_1}(u, v)` is odd.\nThe cycle `u - x - y - v - (path in C_1) - u` has length `1 + 1 + 1 + dist_{C_1}(u, v) = 3 + \\text{odd} = \\text{even}`. This doesn't work.\n\nThis is a classic construction for `t=2` to form an odd cycle:\nPick any two vertices `u, v` from different connected components. Add `(u, v)`. The graph is still bipartite if `u` and `v` are assigned opposite colors.\nNow we have one larger connected component.\nIf we pick two vertices `x, y` from the *same* component and *same* partition, and add `(x, y)`, we'll get an odd cycle.\nSo, if there are at least two connected components:\n1. Pick `u` from `C_i`, `v` from `C_j` (`i != j`). Add `(u, v)`.\n2. Now `C_i` and `C_j` are merged. This new component is bipartite.\n3. Pick `x, y` from this merged component, such that `x, y` are in the same partition set (in the merged component) and `x != y`. Add `(x, y)`.\nThis creates an odd cycle.\nThe minimum number of edges is 2.\nHow many ways?\nThis requires finding pairs of components, choosing `u, v`, then choosing `x, y`. This is complicated.\n\nLet's consider the conditions for `t=2` more simply.\nIf there exists at least one connected component that has at least 3 vertices (or at least 2 vertices in one partition set).\nSuppose component `C` has `|P_0| >= 2`. Let `u, v \\in P_0`.\nIf there's a path `u - k - v` (length 2), then `t=1` would have been possible.\nIf there's no path of length 2 between any two nodes in `P_0` (or `P_1`), then `t=1` is not possible.\nIn this case, if we add an edge `(u, v)` (where `u, v \\in P_0`), the resulting cycle `u - (path) - v - u` has length `dist(u, v) + 1`. Since `dist(u, v)` must be even and `dist(u, v) >= 4`, this forms an odd cycle of length at least 5.\nSo, if `t=1` is not possible, but there's at least one component with `|P_0| >= 2` or `|P_1| >= 2`, we can pick any `u, v` from the same partition in that component and add `(u, v)`. This forms an odd cycle.\nWait, this is `t=1` again. The condition for `t=1` was \"form a 3-cycle\". No, it was \"form an odd cycle\".\nSo, if there exists a component with `|P_0| >= 2` or `|P_1| >= 2`, we can pick any two `u, v` in the same partition and add an edge. This forms an odd cycle.\nThe number of ways `w` would be sum of `(|P_0| * (|P_0| - 1) / 2)` + `(|P_1| * (|P_1| - 1) / 2)` for each component, minus existing edges.\nThis is incorrect. The problem statement for `t=1` was \"minimum number of edges that should be added to the graph to form a simple cycle of an odd length\".\nThe `t=1` case should be: if there exists a component `C` with partitions `P_0, P_1` such that `|P_0| >= 2` or `|P_1| >= 2`, then we can pick `u, v` in the same partition (say `P_0`) and add edge `(u, v)`. This creates an odd cycle. The length of this cycle is `dist(u, v) + 1`. This is always odd.\nSo, `t=1` is possible if there is *any* component `C` with `|P_0| >= 2` or `|P_1| >= 2`.\nThe number of ways `w` for `t=1` would be the sum, over all components, of `(|P_0| * (|P_0| - 1) / 2)` + `(|P_1| * (|P_1| - 1) / 2)` (total possible edges within partitions) minus `m` (existing edges).\nThis is the correct logic for `t=1`.\n\nLet's refine the logic for `t=1`:\nIf the graph is bipartite, we need to add an edge `(u, v)` where `u` and `v` are in the same component and same partition set.\nThe number of such pairs `(u, v)` (where `u \\neq v` and `(u, v)` is not an existing edge) is `W_1`.\n`W_1 = \\sum_{C \\in Components} \\left( \\frac{|P_{C,0}|(|P_{C,0}|-1)}{2} + \\frac{|P_{C,1}|(|P_{C,1}|-1)}{2} \\right) - (\\text{number of existing edges between vertices of same partition})`.\nThe number of existing edges between vertices of the same partition is 0 in a bipartite graph. So `W_1` is just the sum of `(|P_0|(|P_0|-1)/2 + |P_1|(|P_1|-1)/2)` over all components.\nIf `W_1 > 0`, then `t=1` and `w=W_1`. Print `1 W_1` and terminate.\n\n**Step 3: The graph is bipartite, and `W_1 = 0`. This means `t=1` is not possible.**\nThis implies that for every connected component `C`, either `|P_{C,0}| < 2` or `|P_{C,1}| < 2`.\nSince `|P_{C,0}| + |P_{C,1}| = |V_C|` (vertices in component `C`), and `P_{C,0}, P_{C,1}` are non-empty for any component with at least one edge, this means each component must be a star graph or a single edge or an isolated vertex.\nSpecifically, for any component `C`:\n- If `|P_{C,0}| = 1` and `|P_{C,1}| = 1`, then `C` is a single edge.\n- If `|P_{C,0}| = 1` and `|P_{C,1}| > 1`, then `C` is a star graph with the center in `P_{C,0}`.\n- If `|P_{C,0}| > 1` and `|P_{C,1}| = 1`, then `C` is a star graph with the center in `P_{C,1}`.\n- If `|P_{C,0}| = 0` or `|P_{C,1}| = 0`, then `C` is a single isolated vertex.\nIn all these cases, we cannot pick two distinct vertices from the same partition set within a component. So `W_1 = 0`.\n\nNow we must add at least 2 edges.\n**Subcase 3.1: Adding 2 edges (t=2).**\nIf there are at least two connected components, we can achieve `t=2`.\nLet `C_1` and `C_2` be two distinct connected components.\nPick any vertex `u \\in C_1` and any vertex `v \\in C_2`. Add edge `(u, v)`.\nThis merges `C_1` and `C_2` into a new component `C'_{12}`.\nIn `C'_{12}`, `u` and `v` are now in different partitions (assuming `color[u]=0` and `color[v]=1` in their original components, the edge `(u,v)` maintains bipartiteness).\nHowever, we need to create an odd cycle. We need to add an edge between two vertices of the same partition.\nSince `W_1=0`, we cannot find two such vertices in any *original* component.\nBut if we connect `u \\in C_1` and `v \\in C_2`, now the combined component `C'_{12}` might have vertices in the same partition.\nExample: `C_1` is `A-B`, `C_2` is `X-Y`.\nPartitions: `C_1: {A}, {B}`; `C_2: {X}, {Y}`.\nAdd `(A, X)`. Now we have `B-A-X-Y`.\nIn this new component, `B` and `Y` are in the same partition. `A` and `X` are in the same partition.\nIf we add `(B, Y)` (second edge), we get `A-X-Y-B-A`. This is an odd cycle of length 4, which is even.\nThe cycle `A-X-Y-B-A` has length 4, which is even. The cycle `A-B-Y-X-A` also has length 4.\nThis construction does not work.\n\nThe correct `t=2` construction:\nIf there are at least two connected components, say `C_i` and `C_j`.\nPick any two vertices `u, v` from `C_i` such that `u \\in P_{i,0}` and `v \\in P_{i,1}`.\nPick any two vertices `x, y` from `C_j` such that `x \\in P_{j,0}` and `y \\in P_{j,1}`.\nAdd edges `(u, x)` and `(v, y)`.\nNow we have paths `u-x` and `v-y`.\nThe path `u - ... - v` in `C_i` has odd length.\nThe path `x - ... - y` in `C_j` has odd length.\nThe cycle `u - x - y - v - (path in C_i) - u` has length `1 + 1 + 1 + \\text{odd} = 3 + \\text{odd} = \\text{even}`. This is still not right.\n\nThe simplest way to form an odd cycle with 2 edges, when `t=1` is not possible (i.e. all components are star graphs or single edges):\nWe need to connect three vertices `a, b, c` such that `a-b`, `b-c` are existing paths, and we add `(a, c)`. This is `t=1`.\nIf `t=1` is not possible, we need to add 2 edges.\nIf we have at least 2 components, say `C_1` and `C_2`.\nPick any vertex `u` from `C_1` (say `u \\in P_{1,0}`).\nPick any vertex `v` from `C_2` (say `v \\in P_{2,0}`).\nAdd edge `(u, v)`.\nThe graph is still bipartite. We need to add a second edge.\nNow, `u` and `v` are in the same partition.\nIf we pick another vertex `x \\in C_1` (`x \\ne u`, `x \\in P_{1,0}`) and `y \\in C_2` (`y \\ne v`, `y \\in P_{2,0}`).\nAdd edge `(x, y)`.\nThen `u-v-y-x-u` is an even cycle.\nThe construction for `t=2` is usually:\nIf there are at least 2 components.\nPick `u \\in C_1` and `v \\in C_2`. Add `(u,v)`.\nPick `x \\in C_1` and `y \\in C_2`. Add `(x,y)`.\nThis creates a 4-cycle `u-v-y-x-u` (if `u!=x, v!=y`). This is an even cycle.\nThis is not working.\n\nLet's use the property that `W_1=0` means all components are \"degenerate\" in terms of bipartitions. Each `P_0` or `P_1` has at most one vertex.\nThis means each component is either:\n- An isolated vertex (`|P_0|=1, |P_1|=0` or `|P_0|=0, |P_1|=1`, or `|P_0|=1, |P_1|=1` but no edge. No, this is wrong. `|P_0|=1` and `|P_1|=0` implies it's a single vertex. `|P_0|=1` and `|P_1|=1` means it's an edge between them if they are connected.\nCorrectly, `W_1=0` means for every component `C`, `min(|P_{C,0}|, |P_{C,1}|) <= 1`.\nIf `|P_{C,0}| > 1` and `|P_{C,1}| > 1`, then `W_1 > 0`.\nSo, for each component `C`, either `|P_{C,0}| \\le 1` or `|P_{C,1}| \\le 1`.\nThis means each component is a star graph or a single edge or an isolated vertex.\nIf a component has at least 2 vertices, it must be a star graph (or an edge, which is a star graph with 2 vertices).\nExample: `1-2, 1-3, 1-4`. `P_0={1}, P_1={2,3,4}`. `|P_1| > 1`. So `W_1 > 0`. This is not the case where `W_1=0`.\nMy interpretation of `W_1=0` is wrong.\n`W_1 = 0` means that for every component `C`, `(|P_{C,0}| * (|P_{C,0}| - 1) / 2)` is 0 AND `(|P_{C,1}| * (|P_{C,1}| - 1) / 2)` is 0.\nThis implies that for every component `C`, `|P_{C,0}| < 2` AND `|P_{C,1}| < 2`.\nSo, for every component `C`, `|P_{C,0}| \\le 1` AND `|P_{C,1}| \\le 1`.\nThis means each connected component can have at most 2 vertices.\nIf a component has 0 vertices, it doesn't exist.\nIf a component has 1 vertex, it's an isolated vertex. `P_0={v}` or `P_1={v}`.\nIf a component has 2 vertices, it must be an edge `(u, v)`. `P_0={u}, P_1={v}`.\nSo, if `W_1=0`, the graph consists only of isolated vertices and/or disjoint edges.\n\nIf `W_1=0`:\n  If there are at least two connected components, say `C_i` and `C_j`.\n  Pick any `u \\in C_i` and any `v \\in C_j`. Add edge `(u, v)`.\n  Pick any `x \\in C_i` (`x \\ne u` if `C_i` has 2 vertices) and any `y \\in C_j` (`y \\ne v` if `C_j` has 2 vertices).\n  If `C_i` is an isolated vertex `u`, and `C_j` is an isolated vertex `v`. Add `(u, v)`.\n  This creates a component `u-v`. `P_0={u}, P_1={v}`. Still bipartite. `W_1` for this new component is 0.\n  We need to add 2 edges.\n  Consider `u \\in C_i`, `v \\in C_j`. Add `(u, v)`.\n  Consider `x \\in C_k` (`k \\ne i, k \\ne j`). Add `(u, x)`.\n  Now `C_i, C_j, C_k` are merged. `u` is connected to `v` and `x`.\n  `u-v` and `u-x` are edges.\n  The vertices `v` and `x` are in the same partition. If `v \\ne x`, we can add `(v, x)` to form a 3-cycle `u-v-x-u`.\n  This requires `t=2` (edges `(u,v)` and `(v,x)` or `(u,x)` and `(v,x)`).\n  This implies we need *three* distinct components `C_i, C_j, C_k`.\n  If we have three components `C_1, C_2, C_3`.\n  Pick `u \\in C_1`, `v \\in C_2`, `x \\in C_3`.\n  Add edge `(u, v)`. Add edge `(u, x)`.\n  Now `u, v, x` are in the same component. `u` is in one partition, `v` and `x` are in the other.\n  So `v` and `x` are in the same partition.\n  If `v \\ne x` (which is true since they are from different components), we can add `(v, x)` to form an odd cycle `u-v-x-u`.\n  This is `t=2` if we add `(u,v)` and `(u,x)`.\n  The number of ways `w` for `t=2` would be:\n  Count the number of ways to pick three distinct components `C_i, C_j, C_k`.\n  For each such triplet, pick `u \\in C_i`, `v \\in C_j`, `x \\in C_k`.\n  The edges to add are `(u, v)` and `(u, x)`.\n  Number of ways to choose 3 components: `N_C * (N_C - 1) * (N_C - 2) / 6`.\n  Number of ways to choose `u, v, x`: `|C_i| * |C_j| * |C_k|`.\n  Total `w = (N_C * (N_C - 1) * (N_C - 2) / 6) * (\\prod |C_i|)` (product over chosen components).\n  This is for `t=2`. This requires `N_C >= 3`.\n  If `N_C >= 3`, then `t=2` and `w = \\sum_{distinct C_i, C_j, C_k} (|C_i| \\cdot |C_j| \\cdot |C_k|)`.\n  This sum is hard to compute directly.\n  It is `N_C * (N_C-1) * (N_C-2) / 6` ways to choose the three components.\n  For each choice, say `C_a, C_b, C_c`:\n    Pick `u \\in C_a`, `v \\in C_b`, `x \\in C_c`.\n    Add `(u,v)` and `(u,x)`. This forms `u-v-x-u` cycle. Total `|C_a| * |C_b| * |C_c|` ways for this triplet.\n    But `u` could be from `C_b` or `C_c` too.\n    The choice of `u` (the central vertex) determines which component it comes from.\n    So, for each `u \\in V` (total `N` vertices):\n      If `u` is in component `C_i`. We need to pick two other components `C_j, C_k` (`j \\ne i, k \\ne i, j \\ne k`).\n      Number of ways to pick `C_j, C_k` from `N_C - 1` components is `(N_C - 1) * (N_C - 2) / 2`.\n      For each such pair `C_j, C_k`:\n        Pick `v \\in C_j` (`|C_j|` ways).\n        Pick `x \\in C_k` (`|C_k|` ways).\n        Add `(u, v)` and `(u, x)`. This forms a 3-cycle.\n        Total `w = \\sum_{u \\in V} \\left( \\sum_{distinct C_j, C_k \\text{ not containing } u} |C_j| \\cdot |C_k| \\right)`.\n    This sum can be computed more easily:\n    Let `S_1 = \\sum_{i=1}^{N_C} |C_i|`. This is `N`.\n    Let `S_2 = \\sum_{i=1}^{N_C} |C_i|^2`.\n    Let `S_3 = \\sum_{i=1}^{N_C} |C_i|^3`.\n    `w = \\sum_{i=1}^{N_C} |C_i| \\left( \\sum_{j \\ne i} |C_j| \\sum_{k \\ne i, k \\ne j} |C_k| \\right) / 2`.\n    This is `\\sum_{i=1}^{N_C} |C_i| \\left( (\\sum_{j \\ne i} |C_j|)^2 - \\sum_{j \\ne i} |C_j|^2 \\right) / 2`.\n    `\\sum_{j \\ne i} |C_j| = S_1 - |C_i|`.\n    `\\sum_{j \\ne i} |C_j|^2 = S_2 - |C_i|^2`.\n    So `w = \\sum_{i=1}^{N_C} |C_i| \\left( (S_1 - |C_i|)^2 - (S_2 - |C_i|^2) \\right) / 2`.\n    `w = \\sum_{i=1}^{N_C} |C_i| \\left( S_1^2 - 2 S_1 |C_i| + |C_i|^2 - S_2 + |C_i|^2 \\right) / 2`.\n    `w = \\sum_{i=1}^{N_C} |C_i| \\left( S_1^2 - S_2 - 2 S_1 |C_i| + 2 |C_i|^2 \\right) / 2`.\n    `w = (1/2) \\left( (S_1^2 - S_2) \\sum |C_i| - 2 S_1 \\sum |C_i|^2 + 2 \\sum |C_i|^3 \\right)`.\n    `w = (1/2) \\left( (S_1^2 - S_2) S_1 - 2 S_1 S_2 + 2 S_3 \\right)`.\n    `w = (1/2) \\left( S_1^3 - S_1 S_2 - 2 S_1 S_2 + 2 S_3 \\right)`.\n    `w = (1/2) \\left( S_1^3 - 3 S_1 S_2 + 2 S_3 \\right)`.\n    This is the number of ways to choose 3 distinct vertices `u, v, x` from 3 distinct components `C_i, C_j, C_k`, and add edges `(u,v)` and `(u,x)`.\n    This is `t=2`. If `N_C >= 3`, then `t=2` and `w` is this value. Print `2 w` and terminate.\n\n**Subcase 3.2: Adding 3 edges (t=3).**\nIf `W_1=0` and `N_C < 3`.\nThis means we have at most 2 connected components.\nSince `W_1=0`, each component has at most 2 vertices (isolated vertices or edges).\nIf `N_C = 0` or `N_C = 1`:\n  If `N_C = 0`, the graph is empty. This is not possible as `n >= 1`.\n  If `N_C = 1`: The graph is either an isolated vertex or a single edge.\n    - If it's an isolated vertex (e.g., node 1), we need to add 3 edges to form a 3-cycle. `(1,2), (2,3), (3,1)`. This requires `n >= 3`.\n    - If it's a single edge `(1,2)`. `P_0={1}, P_1={2}`. We need to add 2 edges to form a 3-cycle. `(1,3), (2,3)`. This requires `n >= 3`.\n    In this case (`N_C = 1` and `W_1=0`), we need to add 2 edges if `n \\ge 3`.\n    Number of ways `w` for `t=2`:\n      If the graph is an isolated vertex `u`: we need to pick two other vertices `v, x` not connected to `u` and add `(u,v), (v,x), (x,u)`. This is `t=3`.\n      If the graph is an edge `(u,v)`: we need to pick one other vertex `x` and add `(u,x), (v,x)`. This is `t=2`.\n      `w = (N-2)` ways to choose `x`.\n      Wait, `t=2` for an edge `u-v` requires `N >= 3`.\n      If `N=2` and graph is `1-2`, `t=3` (add `(1,3), (2,3), (3,1)`).\n      If `N=3` and graph is `1-2`, `t=2` (add `(1,3), (2,3)`). `w=1`.\n      If `N=3` and graph is `1` (isolated), `t=3` (add `(1,2), (2,3), (3,1)`). `w=1`.\n\nThis implies that if `W_1=0` and `N_C < 3`:\n  If `N_C = 2`:\n    Two components `C_1, C_2`. Each is an isolated vertex or an edge.\n    Example: `C_1 = {1}, C_2 = {2}`.\n    Add `(1,3), (2,3)`. This forms `1-3-2`. `t=2`.\n    We need `N >= 3` for this.\n    `w = (N - |C_1| - |C_2|)` for this case.\n    This is `t=2`.\n  If `N_C = 1`:\n    One component `C_1`. It's an isolated vertex or an edge.\n    If `C_1` is isolated vertex `u`. We need to add `(u,v), (v,x), (x,u)`. `t=3`.\n    This needs `N >= 3`. `w=1` (if `N=3`).\n    If `C_1` is an edge `u-v`. We need to add `(u,x), (v,x)`. `t=2`.\n    This needs `N >= 3`. `w = (N - 2)` ways to choose `x`.\n\nThis is quite messy. Let's simplify the `t` values.\n`t=0`: Graph already has an odd cycle. Check bipartiteness.\n`t=1`: Graph is bipartite. Add an edge `(u, v)` where `u, v` are in the same component and same partition.\n  Count `W_1 = \\sum_{C} (\\binom{|P_{C,0}|}{2} + \\binom{|P_{C,1}|}{2})`. If `W_1 > 0`, then `t=1, w=W_1`.\n`t=2`: Graph is bipartite, `W_1=0`. This means all components `C` have `|P_{C,0}| \\le 1` AND `|P_{C,1}| \\le 1`.\n  So all components are isolated vertices or single edges.\n  If there are at least two components (`N_C \\ge 2`):\n    Pick `u \\in C_i`, `v \\in C_j` (`i \\ne j`). Add `(u, v)`.\n    Now `C_i` and `C_j` are merged. This merged component is still bipartite.\n    Example: `C_1={1}, C_2={2}`. Add `(1,2)`. New component `1-2`.\n    Now pick a new vertex `x` (not in `C_1` or `C_2`). Add `(1,x)` and `(2,x)`.\n    This forms `1-2-x-1`, an odd cycle of length 3.\n    This requires `N - N_V \\ge 1` where `N_V` is total vertices in `C_i, C_j`.\n    This is `t=2`.\n    Number of ways `w` for `t=2`:\n      We need to pick two components `C_i, C_j`. There are `N_C * (N_C - 1) / 2` ways.\n      For each pair `(C_i, C_j)`, pick `u \\in C_i`, `v \\in C_j`. There are `|C_i| * |C_j|` ways.\n      Pick a third vertex `x` from `V \\setminus (C_i \\cup C_j)`. There are `N - |C_i| - |C_j|` ways.\n      Total `w = \\sum_{distinct C_i, C_j} (|C_i| \\cdot |C_j| \\cdot (N - |C_i| - |C_j|))`.\n      This is `t=2` if `N_C \\ge 2` and `N - \\sum |C_k| \\ge 1` (i.e. `N_isolated_vertices > 0`).\n      If `N - \\sum |C_k| = 0`, meaning all vertices are in some component, and all components are isolated vertices or edges.\n      Then we can't pick a \"new\" vertex `x`.\n      If `N_C \\ge 3`, we found `t=2` using `u \\in C_i, v \\in C_j, x \\in C_k`. Edges `(u,v), (u,x)`.\n      This is the correct `t=2` logic for `W_1=0`.\n      So, if `W_1=0`:\n        If `N_C \\ge 3`: `t=2`. `w = (1/2) * (S_1^3 - 3 S_1 S_2 + 2 S_3)`.\n        If `N_C = 2`: `C_1, C_2`.\n          If there are isolated vertices `N - |C_1| - |C_2| > 0`: `t=2`.\n          Pick `u \\in C_1`, `v \\in C_2`. Pick `x \\notin C_1 \\cup C_2`. Add `(u,x)` and `(v,x)`.\n          `w = |C_1| \\cdot |C_2| \\cdot (N - |C_1| - |C_2|)`.\n          If `N - |C_1| - |C_2| = 0`: This means `N = |C_1| + |C_2|`.\n            Then we have only two components, and no isolated vertices.\n            Example: `N=2`, `C_1={1}, C_2={2}`. `t=3`.\n            Example: `N=3`, `C_1={1}, C_2={2-3}`. `t=2`.\n            Pick `u \\in C_1`, `v \\in C_2`, `x \\in C_2` (`x \\ne v`). Add `(u,v), (u,x)`.\n            This is only possible if `|C_2| \\ge 2`.\n            But `W_1=0` implies `|P_{C,0}| \\le 1` and `|P_{C,1}| \\le 1`.\n            So `|C_2| \\le 2`. If `|C_2|=2`, it's an edge. `C_2={v, x}`.\n            So if `N_C = 2` and `N - |C_1| - |C_2| = 0`:\n              If `|C_1|=1, |C_2|=1`: `N=2`. `t=3`.\n              If `|C_1|=1, |C_2|=2`: `N=3`. `t=2`. `w = |C_1| \\cdot 1 = 1`. (`C_1={u}, C_2={v,x}`. Add `(u,v), (u,x)`).\n              If `|C_1|=2, |C_2|=1`: `N=3`. `t=2`. `w = |C_2| \\cdot 1 = 1`.\n              If `|C_1|=2, |C_2|=2`: `N=4`. `t=2`. `w = 2 \\cdot 1 + 2 \\cdot 1 = 4`.\n              (e.g., `C_1={u1, u2}, C_2={v1, v2}`. Add `(u1, v1), (u1, v2)` or `(u2, v1), (u2, v2)` or `(v1, u1), (v1, u2)` or `(v2, u1), (v2, u2)`.)\n              This is `t=2` if `N_C = 2` and at least one component has 2 vertices.\n              `w = |C_1| \\cdot (\\text{if } |C_2|=2 \\text{ then } 1 \\text{ else } 0) + |C_2| \\cdot (\\text{if } |C_1|=2 \\text{ then } 1 \\text{ else } 0)`.\n              This is `|C_1| \\cdot (\\text{num ways to pick 2 vertices from } C_2 \\text{ and 1 from } C_1)`.\n              No, it's `|C_1| \\cdot (\\text{num ways to pick 2 vertices from } C_2) \\cdot (\\text{num ways to pick 1 from } C_1)`.\n              If `C_1={u}, C_2={v,x}`. Add `(u,v), (u,x)`. `w=1`.\n              If `C_1={u1,u2}, C_2={v1,v2}`.\n                Pick `u \\in C_1` (2 ways). Say `u1`.\n                Pick `v,x \\in C_2` (1 way, `v1,v2`). Add `(u1,v1), (u1,v2)`.\n                Pick `u \\in C_2` (2 ways). Say `v1`.\n                Pick `v,x \\in C_1` (1 way, `u1,u2`). Add `(v1,u1), (v1,u2)`.\n                Total `w = 2+2=4`.\n              So `w = (\\text{if } |C_1|=2 \\text{ then } |C_2| \\text{ else } 0) + (\\text{if } |C_2|=2 \\text{ then } |C_1| \\text{ else } 0)`.\n              This is `t=2`.\n\n        If `N_C = 1`:\n          Component `C_1`. `|C_1| \\le 2`.\n          If `|C_1|=1`: Isolated vertex `u`. Needs `(u,v), (v,x), (x,u)`. `t=3`.\n          If `|C_1|=2`: Single edge `u-v`. Needs `(u,x), (v,x)`. `t=2`. `w = (N-2)`.\n          This is `t=2` if `N \\ge 3`.\n\nThis looks like a lot of branching. Let's make it simpler.\n\n**Algorithm structure:**\n\n1.  **Bipartiteness Check and Component Analysis:**\n    Perform BFS/DFS to identify connected components and check for bipartiteness.\n    For each component `C_i`:\n    -   Store its size `|V_i|`.\n    -   Store its partition sizes `|P_{i,0}|` and `|P_{i,1}|`.\n    -   If any component is not bipartite, `t=0, w=1`. Print `0 1` and exit.\n    Keep track of the total number of connected components `N_C`.\n    Keep track of `S_1 = \\sum |V_i| = N`.\n    Keep track of `S_2 = \\sum |V_i|^2`.\n    Keep track of `S_3 = \\sum |V_i|^3`.\n\n2.  **Calculate `W_1` (for `t=1`):**\n    `W_1 = \\sum_{i=1}^{N_C} \\left( \\frac{|P_{i,0}|(|P_{i,0}|-1)}{2} + \\frac{|P_{i,1}|(|P_{i,1}|-1)}{2} \\right)`.\n    If `W_1 > 0`, then `t=1, w=W_1`. Print `1 W_1` and exit.\n\n3.  **Handle `t=2` (when `W_1 = 0`):**\n    If `W_1 = 0`, it means for every component `C_i`, `|P_{i,0}| \\le 1` AND `|P_{i,1}| \\le 1`.\n    This implies each component `C_i` has at most 2 vertices.\n    -   If `|V_i|=1`, it's an isolated vertex.\n    -   If `|V_i|=2`, it's a single edge.\n    We need to find `t=2` ways.\n    **Case A: At least 3 components (`N_C \\ge 3`)**\n      We can choose three distinct components `C_i, C_j, C_k`.\n      Pick `u \\in C_i`, `v \\in C_j`, `x \\in C_k`. Add edges `(u, v)` and `(u, x)`. This forms a 3-cycle `u-v-x-u`.\n      The number of ways `w` is `(1/2) * (S_1^3 - 3 S_1 S_2 + 2 S_3)`.\n      Print `2 w` and exit.\n\n    **Case B: Exactly 2 components (`N_C = 2`)**\n      Let the components be `C_1` and `C_2`.\n      We need to form a 3-cycle using 2 added edges.\n      This requires a central vertex `u` and two other vertices `v, x` that are not adjacent to `u` and are not adjacent to each other.\n      The added edges are `(u, v)` and `(u, x)`.\n      Since `W_1=0`, we cannot pick `v, x` from the same partition within `C_1` or `C_2`.\n      We must pick `u` from one component (say `C_1`), and `v, x` from the other component (`C_2`).\n      This requires `|C_2| \\ge 2`.\n      If `|C_1|=1, |C_2|=1`, then `N=2`. We can't pick two vertices from `C_2`.\n      If `|C_1|=1, |C_2|=2`: `C_1={u_1}, C_2={v_1, v_2}`. Add `(u_1, v_1)` and `(u_1, v_2)`. `w=1`.\n      If `|C_1|=2, |C_2|=1`: `C_1={u_1, u_2}, C_2={v_1}`. Add `(v_1, u_1)` and `(v_1, u_2)`. `w=1`.\n      If `|C_1|=2, |C_2|=2`: `C_1={u_1, u_2}, C_2={v_1, v_2}`.\n        Pick `u_1 \\in C_1`. Add `(u_1, v_1), (u_1, v_2)`.\n        Pick `u_2 \\in C_1`. Add `(u_2, v_1), (u_2, v_2)`.\n        Pick `v_1 \\in C_2`. Add `(v_1, u_1), (v_1, u_2)`.\n        Pick `v_2 \\in C_2`. Add `(v_2, u_1), (v_2, u_2)`.\n        Total `w = 1+1+1+1 = 4`.\n      In general, `w = (|C_1| \\text{ if } |C_2|=2 \\text{ else } 0) + (|C_2| \\text{ if } |C_1|=2 \\text{ else } 0)`.\n      If `w > 0`, print `2 w` and exit.\n\n    **Case C: Exactly 1 component (`N_C = 1`)**\n      Let the component be `C_1`. Since `W_1=0`, `|C_1| \\le 2`.\n      If `|C_1|=1`: It's an isolated vertex `u`. We need to add 2 new vertices `v, x` and 3 edges `(u,v), (v,x), (x,u)`. This is `t=3`.\n      If `|C_1|=2`: It's a single edge `u-v`. We need to add 1 new vertex `x` and 2 edges `(u,x), (v,x)`. This forms a 3-cycle `u-x-v-u`.\n        This requires `N - |C_1| \\ge 1` (i.e., `N > 2`).\n        `w = N - |C_1|`.\n        If `N > 2`, print `2 w` and exit.\n\n4.  **Handle `t=3` (when `t=0, t=1, t=2` are not possible):**\n    This occurs when:\n    -   `W_1=0` (all components are isolated vertices or edges).\n    -   `N_C < 3`.\n    -   If `N_C=2`, then `|C_1|=1, |C_2|=1` (so `N=2`).\n    -   If `N_C=1`, then `|C_1|=1` (so `N=1`) OR `|C_1|=2` (so `N=2`), and `N - |C_1| = 0`.\n    In all these scenarios, we have at most 2 vertices in the graph, and they are either isolated or connected by a single edge.\n    To form an odd cycle of length 3, we need 3 vertices.\n    We must add 3 edges to form a triangle: `(1,2), (2,3), (3,1)`.\n    This requires `N \\ge 3`. If `N < 3`, it's impossible to form a 3-cycle.\n    The problem states \"more than one vertex\", so a 3-cycle is the minimum.\n    If `N < 3`, we cannot form a 3-cycle.\n    The minimum number of edges to add is 3.\n    This happens when `N_C \\le 2`, and we can't form a 3-cycle with 2 edges.\n    The only case left is when `N_C \\le 2` and `N \\le 2`.\n    If `N=1`, graph is `1`. We add `(1,2), (2,3), (3,1)`. `t=3, w=1`.\n    If `N=2`, graph is `1,2` (two isolated vertices). We add `(1,3), (2,3), (1,2)`. `t=3, w=1`.\n    If `N=2`, graph is `1-2` (one edge). We add `(1,3), (2,3), (1,3)` no, `(1,3), (2,3)` already `t=2`.\n    Ah, the `t=2` case for `N_C=1, |C_1|=2` requires `N > 2`. If `N=2`, then `N-|C_1|=0`, so `t=2` is not possible.\n    So, if `N \\le 2`, `t=3` and `w=1`.\n    If `N=1`, `C_1={1}`. `t=3, w=1`.\n    If `N=2`, `C_1={1}, C_2={2}` or `C_1={1,2}`. `t=3, w=1`.\n    Print `3 1` and exit.\n\nThis covers all cases.\n\n**Example 1: 4 4, 1-2, 1-3, 4-2, 4-3**\nAdj: `1:[2,3], 2:[1,4], 3:[1,4], 4:[2,3]`\nBFS from 1:\ncolor[1]=0\ncolor[2]=1, color[3]=1\nFrom 2: neighbor 4. color[4]=0.\nFrom 3: neighbor 4. color[4]=0. color[4] == color[3]. Conflict! Odd cycle (1-3-4-2-1, length 4, no. Wait, 1-3-4-2-1 is even. 1-2-4-3-1 is also even).\nLet's trace carefully:\n1. `q=[1]`, `color[1]=0`\n2. pop `1`. Neighbors `2,3`.\n   `color[2]=1`. `q=[2]`\n   `color[3]=1`. `q=[2,3]`\n3. pop `2`. Neighbors `1,4`.\n   `1` is colored `0`. `color[1]!=color[2]`. OK.\n   `color[4]=0`. `q=[3,4]`\n4. pop `3`. Neighbors `1,4`.\n   `1` is colored `0`. `color[1]!=color[3]`. OK.\n   `4` is colored `0`. `color[4]==color[3]`. **Conflict!** Odd cycle found.\n   The odd cycle is `3-4-2-1-3`. Path `3-4-2` has length 2. `3` and `2` are in the same partition. `color[3]=1, color[2]=1`.\n   Wait, `3` and `4` are connected. `color[3]=1, color[4]=0`. OK.\n   `2` and `4` are connected. `color[2]=1, color[4]=0`. OK.\n   `1` and `2` are connected. `color[1]=0, color[2]=1`. OK.\n   `1` and `3` are connected. `color[1]=0, color[3]=1`. OK.\n   The graph is bipartite:\n   Partition 0: {1,4}\n   Partition 1: {2,3}\n   All edges connect a P0 node to a P1 node. This graph IS bipartite.\n   My BFS trace was wrong.\n   `color[4]` was set to `0` from `2`. When `3` is processed, `color[3]=1`. Its neighbor `4` has `color[4]=0`. `color[3] != color[4]`. No conflict.\n   So, the graph is bipartite. `P_0={1,4}, P_1={2,3}`.\n   `N_C=1`.\n   `W_1 = (\\binom{2}{2} + \\binom{2}{2}) = (1+1) = 2`.\n   Since `W_1 > 0`, `t=1, w=2`. Print `1 2`. Correct.\n\n**Example 2: 3 3, 1-2, 2-3, 3-1**\nAdj: `1:[2,3], 2:[1,3], 3:[1,2]`\nBFS from 1:\ncolor[1]=0\ncolor[2]=1, color[3]=1\nFrom 2: neighbor 3. color[3]=1. `color[3]==color[2]`. **Conflict!** Odd cycle (1-2-3-1).\n`t=0, w=1`. Print `0 1`. Correct.\n\n**Example 3: 3 0**\nAdj: empty.\nBFS from 1: `C_1={1}`. `P_0={1}, P_1={}`.\nBFS from 2: `C_2={2}`. `P_0={2}, P_1={}`.\nBFS from 3: `C_3={3}`. `P_0={3}, P_1={}`.\nGraph is bipartite.\n`N_C=3`. Components: `{1}, {2}, {3}`.\n`W_1 = 0` (since `|P_0|=1, |P_1|=0` for all).\n`N_C=3`. So `t=2`.\n`S_1 = 1+1+1 = 3`.\n`S_2 = 1^2+1^2+1^2 = 3`.\n`S_3 = 1^3+1^3+1^3 = 3`.\n`w = (1/2) * (S_1^3 - 3 S_1 S_2 + 2 S_3) = (1/2) * (3^3 - 3*3*3 + 2*3) = (1/2) * (27 - 27 + 6) = 3`.\nPrint `2 3`.\nWait, example output is `3 1`. Why?\n\nMy `t=2` logic for `N_C \\ge 3` must be wrong.\nThe construction `u \\in C_i, v \\in C_j, x \\in C_k`. Add `(u,v)` and `(u,x)`. This forms `u-v-x-u`.\nThis is a 3-cycle. It uses 2 added edges.\nExample 3: `N=3`, `C_1={1}, C_2={2}, C_3={3}`.\n`u=1, v=2, x=3`. Add `(1,2)` and `(1,3)`. This forms `1-2-3-1`. This is a 3-cycle.\n`t=2`. `w=3`. (Choices for `u`: 1, 2, or 3. If `u=1`, `v,x` can be 2,3. If `u=2`, `v,x` can be 1,3. If `u=3`, `v,x` can be 1,2).\nSo `w=3`.\nThe example output `3 1` means `t=3`. This implies `t=2` is not possible.\nWhy is `t=2` not possible for `3 0`?\nThe problem states: \"simple cycle of an odd length, consisting of more than one vertex\".\nThe cycle `1-2-3-1` is simple, odd length, more than one vertex.\nWhat could be wrong?\n\"It is prohibited to add loops or parallel edges.\"\nMy construction adds `(1,2)` and `(1,3)`. These are not loops or parallel edges.\nMaybe the problem implies that the added edges must be part of *a* cycle, not necessarily a 3-cycle.\nThe example output `3 1` for `3 0` graph means we add `(1,2), (2,3), (3,1)`. This is `t=3`.\n\nPerhaps my logic for `t=2` is too aggressive.\nIf `W_1 = 0`, it means all components are isolated vertices or edges.\nIf `N_C \\ge 3`, we can pick `u \\in C_i, v \\in C_j, x \\in C_k`. Add `(u,v)` and `(u,x)`.\nThis creates a 3-cycle.\nThis seems correct to me.\nIs there any constraint I missed? \"simple cycle of an odd length, consisting of more than one vertex\".\nA 3-cycle is simple, odd, and has 3 vertices.\n\nLet's re-read the problem statement carefully.\n\"You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex.\"\n\"Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex).\"\n\"Two ways to add edges to the graph are considered equal if they have the same sets of added edges.\"\n\nConsider the `3 0` case. Graph has vertices `1,2,3` and no edges.\nMy logic: `t=2, w=3`. Added edges:\n1. `{(1,2), (1,3)}`\n2. `{(2,1), (2,3)}`\n3. `{(3,1), (3,2)}`\nThese are 3 distinct sets of edges, each forming a 3-cycle.\n\nWhy would the example say `3 1`?\nThis could mean that the problem implies that the cycle must involve *only* the added edges. This is not standard interpretation.\nIf it means \"form a simple cycle of an odd length, consisting of more than one vertex, *where all vertices in the cycle are new or previously isolated*\". This is also a strange interpretation.\n\nWhat if the graph has only isolated vertices?\n`N=3, M=0`. `C1={1}, C2={2}, C3={3}`.\nTo form a 3-cycle `1-2-3-1`, we need to add 3 edges `(1,2), (2,3), (3,1)`. This is `t=3`.\nThis is the only way to form a 3-cycle if all vertices are isolated.\nThis would make `t=3, w=1`. This matches the example.\n\nSo my `t=2` logic is wrong for graphs consisting entirely of isolated vertices.\nIn the `t=2` case `N_C \\ge 3`, my central vertex `u` is chosen from `C_i`. `v` from `C_j`, `x` from `C_k`.\nIf `C_i, C_j, C_k` are all isolated vertices, say `1, 2, 3`.\nWe pick `u=1, v=2, x=3`. Add `(1,2)` and `(1,3)`.\nThis forms a path `2-1-3`. This path is part of the cycle `1-2-3-1`.\nBut this requires vertex `2` and `3` to be connected, which is not true.\nThe cycle `u-v-x-u` requires `(v,x)` to be an edge.\nThe construction was: `u \\in C_i, v \\in C_j, x \\in C_k`. Add `(u,v)` and `(u,x)`.\nThis creates a path `v-u-x`. To close a 3-cycle, we need to add `(v,x)`. This would be `t=3`.\n\nAh, the \"odd cycle\" comes from connecting two vertices in the same partition.\nIf we add `(u,v)` and `(u,x)`, then `v` and `x` are in the same partition set (relative to `u`).\nIf `v` and `x` are already connected, then we form an odd cycle. But `v,x` are from different components, so they are not connected.\nSo, my `t=2` logic for `N_C \\ge 3` is indeed wrong. That construction requires 3 edges to form a 3-cycle.\n\nSo, if `W_1=0`, and all components are isolated vertices or edges.\n**Revised `t=2` logic:**\nWe need to add two edges `(a,b)` and `(c,d)` to form an odd cycle.\nThe simplest odd cycle is a 3-cycle. We need 3 vertices `x,y,z` and 3 edges `(x,y), (y,z), (z,x)`.\nIf `t=1` is not possible, we need to add 2 or 3 edges.\nIf we add 2 edges to form a 3-cycle `x-y-z-x`, one edge must be original.\nSuppose `(x,y)` is an existing edge. We add `(y,z)` and `(z,x)`. This is `t=2`.\nThis is possible if we have an existing edge `(x,y)` (a component of size 2, `C_i={x,y}`), and we pick a new vertex `z` (an isolated vertex `C_j={z}` or a vertex `z` from another component `C_j` where `|C_j|=1`).\nThis requires `N_C \\ge 2`.\nIf `N_C=1` and `|C_1|=2` (an edge `x-y`), and `N > 2` (there's at least one isolated vertex `z` not in `C_1`).\n  Then we add `(x,z)` and `(y,z)`. This forms `x-y-z-x`. `t=2`.\n  `w = N - 2`.\n  Example `N=3, M=1` (`1-2`). `C_1={1,2}, C_2={3}`. `w = 3-2 = 1`. Add `(1,3), (2,3)`. `t=2, w=1`.\n\nThis is the only `t=2` case I can find.\nSo, if `W_1=0`:\n  Count `num_edges_comp = ` number of components that are a single edge.\n  Count `num_isolated_comp = ` number of components that are a single isolated vertex.\n  If `num_edges_comp >= 1` and `num_isolated_comp >= 1`:\n    We can pick an edge `(u,v)` from `num_edges_comp` ways.\n    We can pick an isolated vertex `x` from `num_isolated_comp` ways.\n    Add `(u,x)` and `(v,x)`. This is `t=2`.\n    `w = num_edges_comp * num_isolated_comp * 2`. (Multiply by 2 because we can choose `u` from `(u,v)` in 2 ways). No, this is wrong.\n    `w = (\\text{number of edges}) * (\\text{number of isolated vertices})`.\n    Number of edges is `m`. But `m` might be 0.\n    The number of edges in the graph is `m`.\n    `w = m * (N - 2*m)`. (Number of edges `m`, number of isolated vertices `N-2m`).\n    If `m > 0` and `N - 2*m > 0`, then `t=2`. Print `2 w` and exit.\n\n4.  **Final `t=3` (when `t=0, t=1, t=2` are not possible):**\n    This means the graph is bipartite, `W_1=0`, and either:\n    -   `m=0` (all vertices isolated, like `3 0` example).\n    -   `N-2m=0` (all vertices are part of an edge, no isolated vertices). E.g. `N=4, M=2` (`1-2, 3-4`).\n    In these cases, we must add 3 edges to form a 3-cycle.\n    This requires `N \\ge 3`.\n    If `N < 3`, it's not possible to form a 3-cycle.\n    The minimum number of edges is 3. `w=1`.\n    This covers the `3 0` example. `m=0`, so `t=2` is not possible by the above logic.\n    So `t=3, w=1`. Print `3 1`. This matches the example.\n\n**Revised Algorithm Structure:**\n\n1.  **Bipartiteness Check and Component Analysis:**\n    Perform BFS/DFS.\n    `adj` list, `color` array (initially -1), `visited` array (initially False).\n    `components_info = []` (list of `(size, P0_size, P1_size)` for each component).\n    `has_odd_cycle = False`.\n    For each vertex `i` from 1 to `N`:\n        If `i` is not `visited`:\n            `current_component_size = 0`.\n            `p0_count = 0`, `p1_count = 0`.\n            `q = collections.deque([(i, 0)])`. `visited[i] = True`. `color[i] = 0`.\n            While `q`:\n                `u, c = q.popleft()`.\n                `current_component_size += 1`.\n                If `c == 0`: `p0_count += 1`. Else: `p1_count += 1`.\n                For `v` in `adj[u]`:\n                    If `v` is not `visited`:\n                        `visited[v] = True`. `color[v] = 1 - c`. `q.append((v, 1-c))`.\n                    Else if `color[v] == c`:\n                        `has_odd_cycle = True`. Break loops.\n            If `has_odd_cycle`: Break outer loop.\n            `components_info.append((current_component_size, p0_count, p1_count))`.\n\n2.  **Handle `t=0`:**\n    If `has_odd_cycle`: Print `0 1` and exit.\n\n3.  **Handle `t=1`:**\n    `W1 = 0`.\n    For `(size, p0, p1)` in `components_info`:\n        `W1 += (p0 * (p0 - 1) // 2)`.\n        `W1 += (p1 * (p1 - 1) // 2)`.\n    If `W1 > 0`: Print `1 W1` and exit.\n\n4.  **Handle `t=2`:**\n    Now `W1 = 0`. This implies all components are isolated vertices or single edges.\n    `num_isolated_vertices = 0`.\n    `num_edges = 0`.\n    For `(size, p0, p1)` in `components_info`:\n        If `size == 1`: `num_isolated_vertices += 1`.\n        Else if `size == 2`: `num_edges += 1`.\n    (Note: `num_isolated_vertices` here is count of components, not total vertices.)\n    (The total number of isolated vertices is `num_isolated_vertices`).\n    (The total number of edges is `m`).\n\n    If `num_edges > 0` and `num_isolated_vertices > 0`:\n        `w = m * num_isolated_vertices`. (Each existing edge can be connected to any isolated vertex to form a 3-cycle).\n        Print `2 w` and exit.\n\n5.  **Handle `t=3`:**\n    This means `t=0, t=1, t=2` were not possible.\n    This implies `W1=0`, and either `num_edges=0` (all isolated vertices) OR `num_isolated_vertices=0` (all vertices are part of edges).\n    In both cases, we need to add 3 edges to form a 3-cycle.\n    This requires `N >= 3`.\n    `w = 1`. (Only one way to choose 3 vertices and connect them in a cycle).\n    Print `3 1` and exit.\n\nThis logic seems consistent with all examples and edge cases.\n\nLet's recheck `N` vs `num_isolated_vertices` in step 4.\n`num_isolated_vertices` is the count of *components* that are single isolated vertices.\nThe total count of isolated vertices is `num_isolated_vertices`.\nThe total count of vertices in edges is `2 * m`.\nSo, `N = (\\text{total vertices in isolated components}) + (\\text{total vertices in edge components})`.\n`N = num_isolated_vertices + 2*m`.\nIf `num_edges > 0` and `num_isolated_vertices > 0`:\n  `w = m * num_isolated_vertices`. This is correct.\n  `m` is the count of existing edges.\n  `num_isolated_vertices` is the count of isolated vertices.\n\nFinal check of step 4:\n`num_isolated_vertices` is the number of components that are isolated vertices.\n`num_edges` is the number of components that are single edges.\nSo, `N = num_isolated_vertices + 2 * num_edges`.\n`m = num_edges`.\nSo `num_isolated_vertices = N - 2*m`.\nThe condition `num_edges > 0` and `num_isolated_vertices > 0` is equivalent to `m > 0` and `N - 2*m > 0`.\nThis looks correct.\n\n```python\nimport sys\nimport collections\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        edges.append(tuple(sorted((u, v)))) # Store sorted tuple to represent unique edge\n\n    # Step 1: Bipartiteness Check and Component Analysis\n    color = [-1] * (n + 1) # -1: uncolored, 0: color A, 1: color B\n    visited = [False] * (n + 1)\n    \n    components_info = [] # List of (size, p0_count, p1_count) for each component\n    has_odd_cycle = False\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            current_component_size = 0\n            p0_count = 0\n            p1_count = 0\n            \n            q = collections.deque([(i, 0)]) # (vertex, assigned_color)\n            visited[i] = True\n            color[i] = 0\n            \n            component_bipartite = True\n            \n            component_nodes = [] # To keep track of nodes in current component for later analysis\n            \n            while q:\n                u, c = q.popleft()\n                current_component_size += 1\n                component_nodes.append(u)\n\n                if c == 0:\n                    p0_count += 1\n                else:\n                    p1_count += 1\n\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        color[v] = 1 - c\n                        q.append((v, 1 - c))\n                    elif color[v] == c:\n                        component_bipartite = False\n            \n            if not component_bipartite:\n                has_odd_cycle = True\n                break # Found an odd cycle in one component, no need to check others\n            \n            components_info.append((current_component_size, p0_count, p1_count))\n\n    # Step 2: Handle t=0\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # Step 3: Handle t=1\n    # Graph is bipartite. Check if adding 1 edge can create an odd cycle.\n    # An odd cycle is created by adding an edge between two vertices in the same partition set of a component.\n    W1 = 0\n    for size, p0, p1 in components_info:\n        W1 += (p0 * (p0 - 1) // 2)\n        W1 += (p1 * (p1 - 1) // 2)\n    \n    if W1 > 0:\n        print(\"1\", W1)\n        return\n\n    # Step 4: Handle t=2\n    # W1 is 0. This means for every component C_i, |P_{i,0}| <= 1 AND |P_{i,1}| <= 1.\n    # So, each component is either an isolated vertex (size 1) or a single edge (size 2).\n    \n    num_isolated_components = 0 # Count of components that are single isolated vertices\n    num_edge_components = 0     # Count of components that are single edges\n\n    for size, p0, p1 in components_info:\n        if size == 1:\n            num_isolated_components += 1\n        elif size == 2: # p0=1, p1=1\n            num_edge_components += 1\n    \n    # To form a 3-cycle with 2 added edges, we need an existing edge (u,v) and an isolated vertex x.\n    # We add edges (u,x) and (v,x).\n    \n    # `m` is the total number of existing edges in the graph.\n    # `num_isolated_components` is the total number of isolated vertices in the graph.\n    \n    if m > 0 and num_isolated_components > 0:\n        w = m * num_isolated_components\n        print(\"2\", w)\n        return\n\n    # Step 5: Handle t=3\n    # If we reached here, t=0, t=1, t=2 are not possible.\n    # This means the graph is bipartite, W1=0, and either:\n    #   - m=0 (all vertices are isolated)\n    #   - num_isolated_components=0 (all vertices are part of existing edges)\n    # In both cases, we need to add 3 edges to form a 3-cycle.\n    # This requires at least 3 vertices in total (N >= 3).\n    # The only way is to add (v1,v2), (v2,v3), (v3,v1) for some 3 distinct vertices.\n    # There is only 1 way to choose the set of 3 edges.\n    print(\"3 1\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport collections\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        edges.append(tuple(sorted((u, v)))) # Store sorted tuple to represent unique edge\n\n    # Step 1: Bipartiteness Check and Component Analysis\n    color = [-1] * (n + 1) # -1: uncolored, 0: color A, 1: color B\n    visited = [False] * (n + 1)\n    \n    components_info = [] # List of (size, p0_count, p1_count) for each component\n    has_odd_cycle = False\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            current_component_size = 0\n            p0_count = 0\n            p1_count = 0\n            \n            q = collections.deque([(i, 0)]) # (vertex, assigned_color)\n            visited[i] = True\n            color[i] = 0\n            \n            component_bipartite = True\n            \n            component_nodes = [] # To keep track of nodes in current component for later analysis\n            \n            while q:\n                u, c = q.popleft()\n                current_component_size += 1\n                component_nodes.append(u)\n\n                if c == 0:\n                    p0_count += 1\n                else:\n                    p1_count += 1\n\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        color[v] = 1 - c\n                        q.append((v, 1 - c))\n                    elif color[v] == c:\n                        component_bipartite = False\n            \n            if not component_bipartite:\n                has_odd_cycle = True\n                break # Found an odd cycle in one component, no need to check others\n            \n            components_info.append((current_component_size, p0_count, p1_count))\n\n    # Step 2: Handle t=0\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # Step 3: Handle t=1\n    # Graph is bipartite. Check if adding 1 edge can create an odd cycle.\n    # An odd cycle is created by adding an edge between two vertices in the same partition set of a component.\n    W1 = 0\n    for size, p0, p1 in components_info:\n        W1 += (p0 * (p0 - 1) // 2)\n        W1 += (p1 * (p1 - 1) // 2)\n    \n    if W1 > 0:\n        print(\"1\", W1)\n        return\n\n    # Step 4: Handle t=2\n    # W1 is 0. This means for every component C_i, |P_{i,0}| <= 1 AND |P_{i,1}| <= 1.\n    # So, each component is either an isolated vertex (size 1) or a single edge (size 2).\n    \n    num_isolated_components = 0 # Count of components that are single isolated vertices\n    num_edge_components = 0     # Count of components that are single edges\n\n    for size, p0, p1 in components_info:\n        if size == 1:\n            num_isolated_components += 1\n        elif size == 2: # p0=1, p1=1\n            num_edge_components += 1\n    \n    # To form a 3-cycle with 2 added edges, we need an existing edge (u,v) and an isolated vertex x.\n    # We add edges (u,x) and (v,x).\n    \n    # `m` is the total number of existing edges in the graph.\n    # `num_isolated_components` is the total number of isolated vertices in the graph.\n    \n    if m > 0 and num_isolated_components > 0:\n        w = m * num_isolated_components\n        print(\"2\", w)\n        return\n\n    # Step 5: Handle t=3\n    # If we reached here, t=0, t=1, t=2 are not possible.\n    # This means the graph is bipartite, W1=0, and either:\n    #   - m=0 (all vertices are isolated)\n    #   - num_isolated_components=0 (all vertices are part of existing edges)\n    # In both cases, we need to add 3 edges to form a 3-cycle.\n    # This requires at least 3 vertices in total (N >= 3).\n    # The only way is to add (v1,v2), (v2,v3), (v3,v1) for some 3 distinct vertices.\n    # There is only 1 way to choose the set of 3 edges.\n    print(\"3 1\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 594,
        "completion_token_count": 19785,
        "thoughts_token_count": 835
    }
}