{
    "start": 1758293728.097006,
    "end": 1758293739.8472695,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 0:\n        print(\"NO\")\n        return\n\n    if m == 0:\n        print(\"YES\")\n        print(\"1\" * (n * 2 - 1))\n        return\n\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        edges.append((u - 1, v - 1, g, l))\n\n    adj = [[] for _ in range(n)]\n    for u, v, g, l in edges:\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    ans = [-1] * n\n    \n    def get_prime_factors(num):\n        factors = {}\n        d = 2\n        temp = num\n        while d * d <= temp:\n            while temp % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                temp //= d\n            d += 1\n        if temp > 1:\n            factors[temp] = factors.get(temp, 0) + 1\n        return factors\n\n    all_primes = set()\n    for _, _, g, l in edges:\n        for p in get_prime_factors(g):\n            all_primes.add(p)\n        for p in get_prime_factors(l):\n            all_primes.add(p)\n    all_primes = sorted(list(all_primes))\n\n    def check_consistency(current_ans):\n        for u, v, g, l in edges:\n            if current_ans[u] != -1 and current_ans[v] != -1:\n                if gcd(current_ans[u], current_ans[v]) != g or lcm(current_ans[u], current_ans[v]) != l:\n                    return False\n        return True\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        if a == 0 or b == 0:\n            return 0\n        return (a * b) // gcd(a, b)\n\n    for start_node in range(n):\n        if ans[start_node] != -1:\n            continue\n\n        q = [start_node]\n        ans[start_node] = 1 # Initialize with 1, will be adjusted by prime factors\n        visited_in_component = {start_node}\n        \n        component_nodes = [start_node]\n        head = 0\n        while head < len(q):\n            u = q[head]\n            head += 1\n            for v, g, l in adj[u]:\n                if v not in visited_in_component:\n                    visited_in_component.add(v)\n                    q.append(v)\n                    component_nodes.append(v)\n        \n        # For each prime factor, solve for exponents\n        for p in all_primes:\n            \n            p_ans = [-1] * n\n            p_ans[start_node] = 0 # exponent for p\n            \n            q_p = [(start_node, 0)] # (node, exponent)\n            visited_p = {start_node}\n            \n            head_p = 0\n            while head_p < len(q_p):\n                u, u_exp = q_p[head_p]\n                head_p += 1\n                \n                for v, g, l in adj[u]:\n                    g_exp = get_prime_factors(g).get(p, 0)\n                    l_exp = get_prime_factors(l).get(p, 0)\n\n                    if g_exp > l_exp: # Invalid GCD/LCM pair\n                        print(\"NO\")\n                        return\n\n                    # exp_u = min(exp_u, exp_v) = g_exp\n                    # exp_u = max(exp_u, exp_v) = l_exp\n                    # This means {exp_u, exp_v} must be {g_exp, l_exp}\n                    \n                    if v not in visited_p:\n                        # We know u_exp, and {u_exp, v_exp} must be {g_exp, l_exp}\n                        # So v_exp must be the other value\n                        \n                        if u_exp == g_exp:\n                            v_exp = l_exp\n                        elif u_exp == l_exp:\n                            v_exp = g_exp\n                        else: # u_exp is neither g_exp nor l_exp, impossible\n                            print(\"NO\")\n                            return\n                        \n                        p_ans[v] = v_exp\n                        visited_p.add(v)\n                        q_p.append((v, v_exp))\n                    else:\n                        # Check consistency\n                        v_exp = p_ans[v]\n                        \n                        if not ((u_exp == g_exp and v_exp == l_exp) or \\\n                                (u_exp == l_exp and v_exp == g_exp)):\n                            print(\"NO\")\n                            return\n            \n            # Apply exponents to overall answer\n            for node_idx in component_nodes:\n                if p_ans[node_idx] == -1: # Some node in component not reached by BFS for this prime\n                    # This means the prime factor p does not appear in any g/l involving this node\n                    # So its exponent must be 0 for this node\n                    p_ans[node_idx] = 0\n\n                ans[node_idx] *= (p ** p_ans[node_idx])\n\n    # Final check\n    for u, v, g, l in edges:\n        if ans[u] == -1 or ans[v] == -1:\n            # This should not happen if all nodes are part of some component\n            # and component_nodes logic is correct.\n            # If a node is isolated and not part of any edge, its ans[node] remains -1\n            # We can set it to 1\n            if ans[u] == -1: ans[u] = 1\n            if ans[v] == -1: ans[v] = 1\n\n        if gcd(ans[u], ans[v]) != g or lcm(ans[u], ans[v]) != l:\n            print(\"NO\")\n            return\n\n    # For any unvisited nodes (isolated nodes without any edges), set their value to 1\n    for i in range(n):\n        if ans[i] == -1:\n            ans[i] = 1\n\n    print(\"YES\")\n    print(*(ans))\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 0:\n        print(\"NO\")\n        return\n\n    if m == 0:\n        print(\"YES\")\n        print(\"1\" * (n * 2 - 1))\n        return\n\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        edges.append((u - 1, v - 1, g, l))\n\n    adj = [[] for _ in range(n)]\n    for u, v, g, l in edges:\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    ans = [-1] * n\n    \n    def get_prime_factors(num):\n        factors = {}\n        d = 2\n        temp = num\n        while d * d <= temp:\n            while temp % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                temp //= d\n            d += 1\n        if temp > 1:\n            factors[temp] = factors.get(temp, 0) + 1\n        return factors\n\n    all_primes = set()\n    for _, _, g, l in edges:\n        for p in get_prime_factors(g):\n            all_primes.add(p)\n        for p in get_prime_factors(l):\n            all_primes.add(p)\n    all_primes = sorted(list(all_primes))\n\n    def check_consistency(current_ans):\n        for u, v, g, l in edges:\n            if current_ans[u] != -1 and current_ans[v] != -1:\n                if gcd(current_ans[u], current_ans[v]) != g or lcm(current_ans[u], current_ans[v]) != l:\n                    return False\n        return True\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        if a == 0 or b == 0:\n            return 0\n        return (a * b) // gcd(a, b)\n\n    for start_node in range(n):\n        if ans[start_node] != -1:\n            continue\n\n        q = [start_node]\n        ans[start_node] = 1 # Initialize with 1, will be adjusted by prime factors\n        visited_in_component = {start_node}\n        \n        component_nodes = [start_node]\n        head = 0\n        while head < len(q):\n            u = q[head]\n            head += 1\n            for v, g, l in adj[u]:\n                if v not in visited_in_component:\n                    visited_in_component.add(v)\n                    q.append(v)\n                    component_nodes.append(v)\n        \n        # For each prime factor, solve for exponents\n        for p in all_primes:\n            \n            p_ans = [-1] * n\n            p_ans[start_node] = 0 # exponent for p\n            \n            q_p = [(start_node, 0)] # (node, exponent)\n            visited_p = {start_node}\n            \n            head_p = 0\n            while head_p < len(q_p):\n                u, u_exp = q_p[head_p]\n                head_p += 1\n                \n                for v, g, l in adj[u]:\n                    g_exp = get_prime_factors(g).get(p, 0)\n                    l_exp = get_prime_factors(l).get(p, 0)\n\n                    if g_exp > l_exp: # Invalid GCD/LCM pair\n                        print(\"NO\")\n                        return\n\n                    # exp_u = min(exp_u, exp_v) = g_exp\n                    # exp_u = max(exp_u, exp_v) = l_exp\n                    # This means {exp_u, exp_v} must be {g_exp, l_exp}\n                    \n                    if v not in visited_p:\n                        # We know u_exp, and {u_exp, v_exp} must be {g_exp, l_exp}\n                        # So v_exp must be the other value\n                        \n                        if u_exp == g_exp:\n                            v_exp = l_exp\n                        elif u_exp == l_exp:\n                            v_exp = g_exp\n                        else: # u_exp is neither g_exp nor l_exp, impossible\n                            print(\"NO\")\n                            return\n                        \n                        p_ans[v] = v_exp\n                        visited_p.add(v)\n                        q_p.append((v, v_exp))\n                    else:\n                        # Check consistency\n                        v_exp = p_ans[v]\n                        \n                        if not ((u_exp == g_exp and v_exp == l_exp) or \\\n                                (u_exp == l_exp and v_exp == g_exp)):\n                            print(\"NO\")\n                            return\n            \n            # Apply exponents to overall answer\n            for node_idx in component_nodes:\n                if p_ans[node_idx] == -1: # Some node in component not reached by BFS for this prime\n                    # This means the prime factor p does not appear in any g/l involving this node\n                    # So its exponent must be 0 for this node\n                    p_ans[node_idx] = 0\n\n                ans[node_idx] *= (p ** p_ans[node_idx])\n\n    # Final check\n    for u, v, g, l in edges:\n        if ans[u] == -1 or ans[v] == -1:\n            # This should not happen if all nodes are part of some component\n            # and component_nodes logic is correct.\n            # If a node is isolated and not part of any edge, its ans[node] remains -1\n            # We can set it to 1\n            if ans[u] == -1: ans[u] = 1\n            if ans[v] == -1: ans[v] = 1\n\n        if gcd(ans[u], ans[v]) != g or lcm(ans[u], ans[v]) != l:\n            print(\"NO\")\n            return\n\n    # For any unvisited nodes (isolated nodes without any edges), set their value to 1\n    for i in range(n):\n        if ans[i] == -1:\n            ans[i] = 1\n\n    print(\"YES\")\n    print(*(ans))\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 551,
        "completion_token_count": 1586,
        "thoughts_token_count": 0
    }
}