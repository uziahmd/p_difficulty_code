{
    "start": 1758011286.1701846,
    "end": 1758011295.4759955,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 13,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Chord\n\nVasya studies music. He has learned lots of interesting stuff. For example, he knows that there are 12 notes: C, C#, D, D#, E, F, F#, G, G#, A, B, H. He also knows that the notes are repeated cyclically: after H goes C again, and before C stands H. We will consider the C note in the row's beginning and the C note after the H similar and we will identify them with each other. The distance between the notes along the musical scale is measured in tones: between two consecutive notes there's exactly one semitone, that is, 0.5 tone. The distance is taken from the lowest tone to the uppest one, that is, the distance between C and E is 4 semitones and between E and C is 8 semitonesVasya also knows what a chord is. A chord is an unordered set of no less than three notes. However, for now Vasya only works with triads, that is with the chords that consist of exactly three notes. He can already distinguish between two types of triads — major and minor.Let's define a major triad. Let the triad consist of notes X, Y and Z. If we can order the notes so as the distance along the musical scale between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones, then the triad is major. The distance between X and Z, accordingly, equals 7 semitones.A minor triad is different in that the distance between X and Y should be 3 semitones and between Y and Z — 4 semitones.For example, the triad \"C E G\" is major: between C and E are 4 semitones, and between E and G are 3 semitones. And the triplet \"C# B F\" is minor, because if we order the notes as \"B C# F\", than between B and C# will be 3 semitones, and between C# and F — 4 semitones.Help Vasya classify the triad the teacher has given to him.\n\n## Input\nThe only line contains 3 space-separated notes in the above-given notation.\n\n## Output\nPrint \"major\" if the chord is major, \"minor\" if it is minor, and \"strange\" if the teacher gave Vasya some weird chord which is neither major nor minor. Vasya promises you that the answer will always be unambiguous. That is, there are no chords that are both major and minor simultaneously.\n\n## Example\n### Input\n['C E G', 'C# B F', 'A B H']\n\n### Output\n['major', 'minor', 'strange']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    notes_input = input().split()\n\n    note_to_semitone = {\n        \"C\": 0, \"C#\": 1, \"D\": 2, \"D#\": 3, \"E\": 4, \"F\": 5,\n        \"F#\": 6, \"G\": 7, \"G#\": 8, \"A\": 9, \"B\": 10, \"H\": 11\n    }\n\n    semitones = [note_to_semitone[n] for n in notes_input]\n\n    def get_distance(n1, n2):\n        return (n2 - n1 + 12) % 12\n\n    # Iterate through all 6 permutations to find a valid ordering\n    # For a triad {X, Y, Z}, there are 3 choices for X.\n    # Once X is chosen, there are 2 choices for Y. Z is then fixed.\n    # Total 3 * 2 = 6 permutations.\n    # Alternatively, we can just sort the semitones and check cyclic shifts.\n    # Let the sorted semitones be s1, s2, s3.\n    # The possible intervals are (s2-s1), (s3-s2), (s1-s3+12)\n    # Or (s3-s1), (s1-s2+12), (s2-s3+12) etc.\n    # A simpler approach: pick one note as the root (X).\n    # Then check the distances to the other two notes.\n    # There are 3 choices for X. For each choice, we check if it forms a major/minor chord.\n\n    for i in range(3):\n        x_semitone = semitones[i]\n        other_semitones = sorted([semitones[j] for j in range(3) if j != i])\n\n        # Case 1: X is the root, Y is the next note, Z is the third.\n        # The two distances are d1 = dist(X, Y) and d2 = dist(Y, Z)\n        # The notes in order are X, Y, Z.\n        # We need to find Y and Z from other_semitones.\n        # There are two ways to assign Y and Z from the remaining two notes.\n\n        # Try (X, other_semitones[0], other_semitones[1])\n        y_semitone_1 = other_semitones[0]\n        z_semitone_1 = other_semitones[1]\n\n        d_xy_1 = get_distance(x_semitone, y_semitone_1)\n        d_yz_1 = get_distance(y_semitone_1, z_semitone_1)\n\n        if (d_xy_1 == 4 and d_yz_1 == 3):\n            print(\"major\")\n            return\n        if (d_xy_1 == 3 and d_yz_1 == 4):\n            print(\"minor\")\n            return\n\n        # Try (X, other_semitones[1], other_semitones[0])\n        y_semitone_2 = other_semitones[1]\n        z_semitone_2 = other_semitones[0]\n\n        d_xy_2 = get_distance(x_semitone, y_semitone_2)\n        d_yz_2 = get_distance(y_semitone_2, z_semitone_2)\n\n        if (d_xy_2 == 4 and d_yz_2 == 3):\n            print(\"major\")\n            return\n        if (d_xy_2 == 3 and d_yz_2 == 4):\n            print(\"minor\")\n            return\n\n    print(\"strange\")\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    notes_input = input().split()\n\n    note_to_semitone = {\n        \"C\": 0, \"C#\": 1, \"D\": 2, \"D#\": 3, \"E\": 4, \"F\": 5,\n        \"F#\": 6, \"G\": 7, \"G#\": 8, \"A\": 9, \"B\": 10, \"H\": 11\n    }\n\n    semitones = [note_to_semitone[n] for n in notes_input]\n\n    def get_distance(n1, n2):\n        return (n2 - n1 + 12) % 12\n\n    # Iterate through all 6 permutations to find a valid ordering\n    # For a triad {X, Y, Z}, there are 3 choices for X.\n    # Once X is chosen, there are 2 choices for Y. Z is then fixed.\n    # Total 3 * 2 = 6 permutations.\n    # Alternatively, we can just sort the semitones and check cyclic shifts.\n    # Let the sorted semitones be s1, s2, s3.\n    # The possible intervals are (s2-s1), (s3-s2), (s1-s3+12)\n    # Or (s3-s1), (s1-s2+12), (s2-s3+12) etc.\n    # A simpler approach: pick one note as the root (X).\n    # Then check the distances to the other two notes.\n    # There are 3 choices for X. For each choice, we check if it forms a major/minor chord.\n\n    for i in range(3):\n        x_semitone = semitones[i]\n        other_semitones = sorted([semitones[j] for j in range(3) if j != i])\n\n        # Case 1: X is the root, Y is the next note, Z is the third.\n        # The two distances are d1 = dist(X, Y) and d2 = dist(Y, Z)\n        # The notes in order are X, Y, Z.\n        # We need to find Y and Z from other_semitones.\n        # There are two ways to assign Y and Z from the remaining two notes.\n\n        # Try (X, other_semitones[0], other_semitones[1])\n        y_semitone_1 = other_semitones[0]\n        z_semitone_1 = other_semitones[1]\n\n        d_xy_1 = get_distance(x_semitone, y_semitone_1)\n        d_yz_1 = get_distance(y_semitone_1, z_semitone_1)\n\n        if (d_xy_1 == 4 and d_yz_1 == 3):\n            print(\"major\")\n            return\n        if (d_xy_1 == 3 and d_yz_1 == 4):\n            print(\"minor\")\n            return\n\n        # Try (X, other_semitones[1], other_semitones[0])\n        y_semitone_2 = other_semitones[1]\n        z_semitone_2 = other_semitones[0]\n\n        d_xy_2 = get_distance(x_semitone, y_semitone_2)\n        d_yz_2 = get_distance(y_semitone_2, z_semitone_2)\n\n        if (d_xy_2 == 4 and d_yz_2 == 3):\n            print(\"major\")\n            return\n        if (d_xy_2 == 3 and d_yz_2 == 4):\n            print(\"minor\")\n            return\n\n    print(\"strange\")\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 671,
        "completion_token_count": 897,
        "thoughts_token_count": 0
    }
}