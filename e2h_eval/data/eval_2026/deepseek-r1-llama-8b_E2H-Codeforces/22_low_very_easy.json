{
    "start": 1758278303.4250422,
    "end": 1758278505.6058068,
    "start-formatted": "2025-09-19 19:38 KST",
    "end-formatted": "2025-09-19 19:41 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I need to solve this programming problem. Let me read the problem statement carefully.\n\nThe task is to find the number of successful students in a group. A student is considered successful if there's at least one subject where they are the best. Being the best means that no other student has a higher mark in that subject.\n\nHmm, so for each subject, I need to determine which student has the highest mark. Then, for each student, check if they are the top in any subject.\n\nLet me think about the steps I need to take.\n\nFirst, I'll read the input. The input starts with two integers n and m. Then there are n lines, each representing a student's grades for m subjects. Each line is a string of m characters, each being a digit from 1 to 9.\n\nFor each subject (from 0 to m-1), I need to find the maximum mark. Then, for each student, if they have that maximum in at least one subject, they are successful.\n\nWait, no. For each subject, the student who has the highest mark in that subject is the best. So for each subject, we find the maximum, and note which student(s) have that max. But only one student can be the best for each subject because if multiple students have the same max, then none of them are the best—since the condition says \"no student got a higher mark\". Oh wait, no: the condition is that a student is the best in a subject if there's no student with a higher mark. So if two students have the same max, neither is the best for that subject. Because someone else has the same as the max but not higher.\n\nSo for each subject, the best student is the one who has the highest mark, and only if they are the sole highest. If there's a tie, no one is the best for that subject.\n\nWait, no. Wait the problem says: \"a student is the best at a subject if there is no student who got a higher mark for this subject.\" So even if another student has the same mark, it's allowed, but if someone has a higher, then you're not the best.\n\nSo for example, if in a subject, all students have 5 except one who has 6, then the student with 6 is the best. But if two students have 6 and others have lower, then for that subject, no one is the best because there are multiple students with 6.\n\nWait, that's an important point. So for a subject, the maximum is found. If only one student has that maximum, that student is the best for that subject. Otherwise, if multiple students have the maximum, then no one is the best for that subject.\n\nSo for each subject, I need to:\n\n1. Find the maximum mark among all students.\n2. Count how many students have that maximum mark.\n3. If the count is exactly 1, then that student is the best for that subject.\n4. Else, no one is the best for that subject.\n\nOnce I know for each subject who is the best, I can track for each student whether they are the best in any subject.\n\nSo the plan is:\n\n- Read n and m.\n- Read each student's grades into a list of strings or a list of lists.\n- For each subject (from 0 to m-1):\n   - Iterate through all students' marks in that subject.\n   - Find the maximum mark.\n   - Check how many students have this maximum.\n   - If only one, add that student to a set of bests for that subject.\n- Then, for each student, check if they are in any of the bests for their subjects.\n- Count the total number of such students.\n\nSo let's break it down step by step.\n\nReading the input:\n\nWe have n students, each with m subjects. Each subject's mark is a character, so for a student's string, the i-th character is the mark for the i-th subject.\n\nSo, for example, the first sample input is:\n\n3 3\n\n223\n\n232\n\n112\n\nSo the students are:\n\nStudent 0: '2','2','3'\n\nStudent 1: '2','3','2'\n\nStudent 2: '1','1','2'\n\nNow, for each subject:\n\nSubject 0: the marks are 2, 2, 1.\n\nThe maximum is 2, and it occurs in students 0 and 1. So no one is the best in subject 0.\n\nSubject 1: the marks are 2,3,1.\n\nMax is 3, only student 1 has it. So student 1 is best in subject 1.\n\nSubject 2: the marks are 3,2,2.\n\nMax is 3, only student 0. So student 0 is best in subject 2.\n\nSo the students:\n\nStudent 0 is best in subject 2.\n\nStudent 1 is best in",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark in that subject.\n\n### Approach\n1. **Read Input**: First, read the number of students `n` and the number of subjects `m`. Then, read each student's grades for `m` subjects.\n2. **Track Best Students per Subject**: For each subject, determine the maximum mark and check how many students achieved this maximum. If only one student achieved the maximum, mark that student as the best in that subject.\n3. **Determine Successful Students**: For each student, check if they are marked as the best in any subject. Count such students as successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\nstudents = [input().strip() for _ in range(n)]\n\nbest_in_subject = [set() for _ in range(m)]\n\nfor i in range(m):\n    max_mark = -1\n    best_student = None\n    for j in range(n):\n        mark = int(students[j][i])\n        if mark > max_mark:\n            max_mark = mark\n            best_student = j\n        elif mark == max_mark:\n            if best_student is not None:\n                pass  # multiple students have the same max, so no one is best\n            else:\n                best_student = j  # first occurrence, but still not unique\n    if best_student is not None and best_student == (max_mark == max_mark):\n        best_in_subject[i].add(best_student)\n\nsuccessful = 0\nfor j in range(n):\n    for i in range(m):\n        if j in best_in_subject[i]:\n            successful += 1\n            break\n\nprint(successful)\n```\n\n### Explanation\n- **Reading Input**: The input is read and stored in a list of strings where each string represents a student's grades across all subjects.\n- **Tracking Best Students**: For each subject, we iterate through each student's mark to find the maximum mark. If only one student achieves this maximum, they are marked as the best for that subject.\n- **Counting Successful Students**: We then check each student to see if they are the best in any subject. If they are, they are counted as successful.\n\nThis approach efficiently determines the number of successful students by leveraging nested loops and sets to track the best-performing students in each subject.",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\nstudents = [input().strip() for _ in range(n)]\n\nbest_in_subject = [set() for _ in range(m)]\n\nfor i in range(m):\n    max_mark = -1\n    best_student = None\n    for j in range(n):\n        mark = int(students[j][i])\n        if mark > max_mark:\n            max_mark = mark\n            best_student = j\n        elif mark == max_mark:\n            if best_student is not None:\n                pass  # multiple students have the same max, so no one is best\n            else:\n                best_student = j  # first occurrence, but still not unique\n    if best_student is not None and best_student == (max_mark == max_mark):\n        best_in_subject[i].add(best_student)\n\nsuccessful = 0\nfor j in range(n):\n    for i in range(m):\n        if j in best_in_subject[i]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 431,
        "completion_token_count": 517,
        "thoughts_token_count": 1025
    }
}