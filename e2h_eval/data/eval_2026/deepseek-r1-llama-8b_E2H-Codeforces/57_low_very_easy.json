{
    "start": 1758278320.0142689,
    "end": 1758278558.4907715,
    "start-formatted": "2025-09-19 19:38 KST",
    "end-formatted": "2025-09-19 19:42 KST",
    "gpu": 2,
    "pid": 57,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Olympiad\n\nA boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya's chances.Help Vasya's teacher, find two numbers — the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours (the first place has the participant who has got the most points). If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.\n\n## Input\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.The second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.The third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.The participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x.\n\n## Output\nPrint two space-separated integers — the best and the worst place Vasya could have got on the Olympiad.\n\n## Example\n### Input\n['5 2\\n1 1 1 1 1\\n1 1 1 1 1', '6 7\\n4 3 5 6 4 4\\n8 6 0 4 3 4']\n\n### Output\n['1 5', '1 5']\n\n## Note\nIn the first text sample all 5 participants earn 2 points each in any case. Depending on the jury's decision, Vasya can get the first (the best) as well as the last (the worst) fifth place.In the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that — {4:8, 6:4, 3:6, 4:4, 4:3, 5:0}.In this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour.In the worst case scenario Vasya can get the fifth place if the table looks like that — {4:8, 4:6, 6:4, 5:4, 4:3, 3:0}, and he earned 4 and 3 points in the first and second tours, correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let me read it carefully.\n\nThe problem is about an Olympiad where participants' results from two tours are given. But the problem is that the teacher only has the points for each tour, not which participant got which. The teacher knows that Vasya's total (sum of his two scores) is at least x. We need to find the best and worst possible places Vasya could have gotten.\n\nHmm. So, the key here is to figure out all possible ways to pair the a_i and b_j such that their sum is at least x, and then determine how many participants have a higher or equal sum than Vasya's sum. Wait, no, because the participants are sorted by their total sum in descending order. So, the best place is when Vasya's sum is as high as possible, making him as high as possible in the rankings. The worst place is when his sum is as low as possible but still ≥x, which would make him as low as possible in the rankings.\n\nWait, no. Wait, to get the best possible rank, we want Vasya to have the maximum possible sum. Because that way, he can be in the top positions. For the worst possible rank, we want his sum to be as small as possible (but ≥x), which would put him as far down as possible.\n\nBut wait, the participants' points are given in arbitrary order for each tour. So the a list is the first tour points, but the order is unknown which corresponds to which participant. Similarly for the b list.\n\nSo, for each participant, their total is a_i + b_j, but the a's and b's are just lists; the actual pairing isn't known.\n\nWait, no. Each participant took both tours. So each a_i and b_j must be paired with exactly one participant, but the way they're paired isn't given. So the problem is that we have to assign each a to a unique b, but since the order is arbitrary, the pairing can vary, leading to different possible total sums for each participant.\n\nSo, the task is: find all possible pairings of a and b, compute the sum for each participant, sort them, and then see what's the best and worst possible rank for Vasya.\n\nBut wait, n can be up to 105, which is manageable. But trying all possible permutations is impossible because 105! is way too big.\n\nSo, we need a smarter approach.\n\nLet me think about the best possible rank for Vasya. To maximize his rank, he should have the highest possible sum. So, to find the maximum possible sum that Vasya can have, given that the sum is at least x. Then, among all participants, how many have a sum higher than this? That gives his best rank.\n\nWait, no. Because the maximum sum possible for Vasya would be when he has the largest possible a_i plus the largest possible b_j. But wait, each a and b is used exactly once. So, if we pick a_i as the maximum a, and b_j as the maximum b, then that's one possibility. But perhaps there's another pairing where some other a and b are assigned in a way that allows Vasya to have a higher sum.\n\nWait, no. Because the maximum possible sum for Vasya is when he gets the maximum a and maximum b. Because any other assignment would give him less than or equal to that.\n\nWait, let me clarify. Let's say the a list is [a1, a2, ..., an], and the b list is [b1, b2, ..., bn]. The maximum sum Vasya can have is max_a + max_b. Because if he takes the maximum a and maximum b, that's the highest possible sum. Any other pairing would give him a lower sum.\n\nSo, to find the best possible rank, we can compute the maximum possible sum that Vasya can have, which is (max_a + max_b). Then, count how many participants have a sum strictly greater than this. That would be the number of people above him, so his rank would be (count + 1). Because if others have higher sums, he is after them.\n\nWait, but wait. Suppose multiple participants can have the same sum as the maximum. Then, the jury can arrange their ranks in any way, so Vasya could be first, or last among those with the same sum. So, for the best case, we assume he is first. For the worst case, he is last among those with the same sum.\n\nWait, but for the best possible rank, we want as few as possible people above him. So, for the maximum sum, we can have Vasya being first. So, the best rank is 1.\n\nWait, that makes sense. Because if you have the maximum sum, you can be placed first.\n\nWait, but what if someone",
    "response": "To solve this problem, we need to determine the best and worst possible ranks Vasya could achieve in an Olympiad based on his scores from two tours. The key is to consider all possible pairings of participants' scores from the two tours and determine how these pairings affect Vasya's rank.\n\n### Approach\n1. **Understanding the Problem**: Each participant's total score is the sum of their scores from the two tours. The goal is to find the best and worst possible ranks Vasya can achieve given that his total score is at least `x`.\n\n2. **Best Possible Rank**: To maximize Vasya's rank, he should have the highest possible total score. This can be achieved by pairing the highest score from the first tour with the highest score from the second tour.\n\n3. **Worst Possible Rank**: To minimize Vasya's rank, he should have the lowest possible total score while still being at least `x`. This involves finding the minimum possible sum that is not less than `x` and then determining how many participants have higher or equal sums.\n\n### Solution Code\n```python\nn, x = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Best case: Vasya has the maximum possible sum\nmax_a = max(a)\nmax_b = max(b)\nbest_sum = max_a + max_b\n\n# Count how many participants can have a sum strictly greater than best_sum\nparticipants_with_higher_sum = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        current_sum = a[i] + b[j]\n        if current_sum > best_sum:\n            participants_with_higher_sum += 1\n\nbest_rank = participants_with_higher_sum + 1\n\n# Worst case: Vasya's sum is as small as possible >=x\nmin_possible_sum = float('inf')\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        s = a[i] + b[j]\n        if s >= x:\n            if s < min_possible_sum:\n                min_possible_sum = s\n\n# Now count how many have sum > min_possible_sum\n# Also include Vasya's sum (since it's >=x)\nworse_rank = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        s = a[i] + b[j]\n        if s > min_possible_sum:\n            worse_rank += 1\n# Since Vasya's sum is min_possible_sum, and others can have higher, the number of people above him is worse_rank, so his rank is worse_rank + 1\nworse_rank += 1\n\nprint(best_rank, worse_rank)\n```\n\n### Explanation\n- **Best Rank Calculation**: By pairing the highest scores from both tours, we determine the maximum possible sum Vasya can have. We then count how many participants can have a higher sum than this maximum, which gives us the number of participants above Vasya, leading to his best possible rank.\n\n- **Worst Rank Calculation**: We find the smallest possible sum for Vasya that is still at least `x`. We then count how many participants can have a higher sum than this minimum, plus one to include Vasya himself, giving us his worst possible rank.\n\nThis approach efficiently determines the best and worst ranks by considering all possible pairings and leveraging the constraints provided.",
    "ground_truth": "N/A",
    "extracted_answer": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Best case: Vasya has the maximum possible sum\nmax_a = max(a)\nmax_b = max(b)\nbest_sum = max_a + max_b\n\n# Count how many participants can have a sum strictly greater than best_sum\nparticipants_with_higher_sum = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        current_sum = a[i] + b[j]\n        if current_sum > best_sum:\n            participants_with_higher_sum += 1\n\nbest_rank = participants_with_higher_sum + 1\n\n# Worst case: Vasya's sum is as small as possible >=x\nmin_possible_sum = float('inf')\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        s = a[i] + b[j]\n        if s >= x:\n            if s < min_possible_sum:\n                min_possible_sum = s\n\n# Now count how many have sum > min_possible_sum\n# Also include Vasya's sum (since it's >=x)\nworse_rank = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        s = a[i] + b[j]\n        if s > min_possible_sum:\n            worse_rank += 1\n# Since Vasya's sum is min_possible_sum, and others can have higher, the number of people above him is worse_rank, so his rank is worse_rank + 1\nworse_rank += 1\n\nprint(best_rank, worse_rank)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 787,
        "completion_token_count": 733,
        "thoughts_token_count": 1025
    }
}