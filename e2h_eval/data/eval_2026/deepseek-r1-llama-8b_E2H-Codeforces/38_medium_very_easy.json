{
    "start": 1758284090.4067397,
    "end": 1758286427.9934654,
    "start-formatted": "2025-09-19 21:14 KST",
    "end-formatted": "2025-09-19 21:53 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let me read it carefully.\n\nThe problem is about directed graphs and something called p-reachable. Hmm, I need to find two things: the minimum number of nodes required to create a p-reachable graph, and then, among all such minimal graphs, find the maximum number of unidirectional pairs.\n\nLet's break down what a p-reachable graph is. An ordered pair (u, v) is unidirectional if u ≠ v, there's a path from u to v, and no path from v to u. So, for a graph to be p-reachable, it must have exactly p such pairs where u < v and they are reachable in both directions? Wait, wait. No, wait. Wait, the definition says that in a p-reachable graph, there are exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other. Oh right, because u and v being reachable in both directions would imply that (u, v) and (v, u) are both paths, but since u < v, we only count (u, v).\n\nWait, no. Wait, the condition is that u and v are reachable from each other. So the pair (u, v) is counted if u can reach v and v can reach u. But since it's an ordered pair (u, v), maybe the direction matters here. Or perhaps not—since the reachability is mutual, but the pair is (u, v) with u < v.\n\nWait, no. The problem says \"ordered pair of nodes (u, v)\" where u ≠ v, there exists a path from u to v, and no path from v to u. Wait, no. Wait, no, that's for unidirectional pairs. The p-reachable is defined as having exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other.\n\nSo, for a pair (u, v) where u < v, if u can reach v and v can reach u, then this contributes 1 to p. So the total p is the number of such pairs.\n\nSo the graph must have exactly p such pairs.\n\nOur task is to find the minimal number of nodes n such that there exists a graph with n nodes that has exactly p such pairs. Then, among all such graphs with minimal n, find the maximum possible number of unidirectional pairs.\n\nWait, but how do the unidirectional pairs factor into this? Because for each pair (u, v) where u < v, it can either be bidirectional (both u→v and v→u exist, contributing 1 to p) or unidirectional (only one direction exists, so it's not counted in p).\n\nWait, no. Wait, the p is the count of pairs (u, v) where u < v, and u and v are mutually reachable. So, for each such pair, it's counted once. So the p is the number of such bidirectional edges in terms of reachability.\n\nSo, the first part of the problem is to find the minimal n such that there exists a graph with n nodes, and the number of such (u, v) pairs is exactly p.\n\nThen, among all such graphs with minimal n, we need to find the maximum number of unidirectional pairs. Unidirectional pairs are those (u, v) where u != v, there's a path from u to v, but no path from v to u.\n\nBut wait, for the second part, the unidirectional pairs are any (u, v) where u can reach v but v cannot reach u. So including those where u < v or u > v.\n\nSo, to compute the maximum number of unidirectional pairs, we need to consider all possible ordered pairs (u, v) where u != v, and count how many are unidirectional.\n\nBut the p is given, which is the number of (u, v) pairs with u < v and mutual reachability. So for the second part, after finding the minimal n, we need to arrange the graph in such a way that as many as possible of the non-p (u, v) pairs are unidirectional.\n\nHmm.\n\nLet's think about the first part: finding the minimal n for a given p.\n\nWhat's the structure of the graph that minimizes n for a given p?\n\nI think that the minimal n is achieved by a graph where the strongly connected components are as small as possible. Because each strongly connected component contributes a certain number of pairs to p.\n\nWait, perhaps arranging the graph as a collection of chains or trees, but I'm not sure.\n\nAlternatively, perhaps the minimal n is determined by the triangular number.\n\nWait, let's think of the simplest case. For p=0: the graph has no bidirectional pairs. So, the graph can have no edges, but also, it can't have any edges that form a mutual reachability. So, perhaps a DAG where all edges go in one direction.\n\nWait, but for p=0, the output is 0 0, as per the example.\n\nWait, no. The sample input had p=3, output was 3 0, etc. Wait, when p=0, the minimal number of nodes is 0? Or perhaps 1 node can't have any edges, but n=0 is allowed?\n\nWait, the problem statement says the graph can have zero nodes, which would have p=0. So yes.\n\nSo for p=0, the minimal n is 0, and the maximum unidirectional pairs is also 0.\n\nSo back to general p.\n\nLet me try small values.\n\nFor p=1: what's the minimal n?\n\nWe need exactly one pair (u, v) where u < v and u and v can reach each other.\n\nSo, for n=2: two nodes. If there's an edge from u to v and an edge from v to u, then (u, v) is a bidirectional pair, so p=1.\n\nIs there a way to get p=1 with fewer nodes? No, because n=1 can't have any edges, so p=0.\n\nThus, minimal n is 2.\n\nWait, but for p=1, what's the maximum number of unidirectional pairs?\n\nIn the graph where both edges are present, the only pair is (u, v). Since u can reach v and v can reach u, it's a mutual pair. So the unidirectional pairs are zero. But perhaps another graph structure could have more unidirectional pairs?\n\nWait, but for n=2, the only possible pair is (u, v), which is mutual, so no unidirectional pairs. So the maximum is 0.\n\nSo, for p=1, the output is 2 0.\n\nAnother test case: p=3.\n\nSample output was 3 0.\n\nSo, for p=3, the minimal n is 3.\n\nHow does that happen?\n\nIn a graph with 3 nodes, how can we have exactly 3 such pairs.\n\nWait, in a complete graph where every pair is connected both ways, the number of such pairs is C(3,2) = 3. So p=3.\n\nThus, n=3.\n\nNow, the maximum unidirectional pairs is 0, because all pairs are mutual.\n\nSo the output is 3 0.\n\nAnother example: p=4.\n\nWhat's the minimal n?\n\nLooking at the sample, when p=4, output is 5 6.\n\nWait, why 5?\n\nWait, perhaps the minimal n is the triangular number plus something.\n\nWait, the sample says for p=4, the minimal n is 5, and the maximum unidirectional pairs is 6.\n\nHmm, let's think about how to construct a graph with 5 nodes that has exactly 4 such pairs.\n\nWait, perhaps the graph is a chain of 5 nodes: 1 → 2 → 3 → 4 → 5. In this case, for each i < j, there's a path from i to j, but no path from j to i. So for all i < j, (i, j) is unidirectional. So the number of such pairs is C(5,2)=10. But that's way larger than 4.\n\nWait, that's not the case. So perhaps the graph isn't a chain.\n\nAlternatively, perhaps it's a graph where some of the pairs are mutual.\n\nWait, let's think: for 5 nodes, how can we have exactly 4 mutual pairs.\n\nWait, perhaps we have a graph where four pairs are mutual, and the rest are unidirectional or whatever.\n\nBut I'm not sure. Maybe the minimal n is determined by the formula for the maximal number of mutual pairs.\n\nWait, perhaps the minimal n is the smallest integer m such that m*(m-1)/2 >= p.\n\nBecause, the maximal number of mutual pairs in a complete graph is C(m,2) = m(m-1)/2.\n\nSo, for p=3, m=3 gives 3, which is exactly p.\n\nFor p=4, m=5 gives 10, which is more than 4. But why would m=5 be the minimal n?\n\nWait, perhaps I'm thinking about this wrong. Maybe the minimal n is the smallest m such that C(m, 2) ≥ p.\n\nWait, for p=3: C(3,2)=3, which equals p. So n=3.\n\nFor p=4: C(4,2)=6>4. So n=4.\n\nBut sample says for p=4, the minimal n is 5, which contradicts this.\n\nWait, the sample for p=4 outputs 5 6. So that suggests that for p=4, the minimal n is 5.\n\nHmm, so perhaps my initial approach is incorrect.\n\nWait, perhaps the minimal n is the smallest m such that the sum from k=1 to m-1 of k(k+1)/2 >= p.\n\nNo, that might complicate things.\n\nAlternatively, perhaps the minimal n is the minimal m where m(m-1)/2 >= p.\n\nWait, for p=4: 4*3/2=6 >=4. So m=4.\n\nBut sample says m=5.\n\nWait, that's conflicting.\n\nWait, perhaps the minimal n is determined differently. Let me think again.\n\nThe problem is to have exactly p pairs (u, v) with u < v and u and v are mutually reachable.\n\nEach such pair corresponds to a strongly connected component (SCC) containing both u and v, and the size of that SCC is at least 2.\n\nWait, no. Because if u and v are in different SCCs, but u can reach v and v can reach u, then they form a single SCC.\n\nWait, no, because if u can reach v and v can reach u, then their SCC is the same.\n\nSo, each pair (u, v) where u < v and they are mutually reachable implies that u and v are in the same SCC.\n\nSo, the number of such pairs is the sum over each SCC of C(k, 2), where k is the size of the SCC.\n\nBecause within each SCC, every pair of nodes is mutually reachable.\n\nTherefore, the total p is the sum of C(k_i, 2) for each SCC i.\n\nSo, to find the minimal n, we need to partition p into sums of triangular numbers (C(k,2)) such that the sum is p, and the total number of nodes is minimized.\n\nBecause each SCC contributes C(k,2) to p, and the sum of these is p.\n\nSo, the problem reduces to expressing p as a sum of C(k_i, 2) where the sum of k_i is minimized.\n\nAh, now this makes sense.\n\nSo the minimal number of nodes is the minimal sum of k_i where sum of C(k_i, 2) = p.\n\nSo, to find the minimal n, we need to represent p as the sum of as few triangular numbers as possible, using the largest possible terms first.\n\nBecause C(k,2) increases with k, so to minimize the sum of k_i, we should maximize the individual k_i.\n\nWait, because for a given contribution to p, a larger k contributes more, thus allowing us to use fewer terms.\n\nSo, the strategy is to take the largest possible k where C(k,2) ≤ remaining p, subtract C(k,2) from p, add k to the sum, and repeat until p is zero.\n\nThis will give the minimal number of nodes.\n\nFor example:\n\np=3:\n\nC(3,2)=3, which equals p. So n=3.\n\np=4:\n\nWe can take C(3,2)=3, leaving 1. Then, C(2,2)=1, so sum is 3+2=5 nodes. So minimal n is 5.\n\nWhich matches the sample.\n\nSimilarly, for p=6: C(4,2)=6, so n=4.\n\nFor p=7: C(4,2)=6, leaving 1. So add 2, total n=4+2=6.\n\nYes.\n\nSo, the minimal n is computed as follows:\n\nInitialize sum_n = 0, p_remaining = p.\n\nWhile p_remaining > 0:\n\n   find the largest k where C(k,2) ≤ p_remaining.\n\n   sum_n +=k\n\n   p_remaining -= C(k,2)\n\nSo, that's the process.\n\nNow, the second part: among all graphs with minimal n, find the maximum number of unidirectional pairs.\n\nUnidirectional pairs are any ordered pairs (u, v) where u != v, u can reach v, but v cannot reach u.\n\nThese can include pairs where u < v and others.\n\nSo, the goal is to arrange the graph in such a way that the number of unidirectional pairs is maximized, given that the sum of C(k_i, 2) equals p.\n\nTo maximize the number of unidirectional pairs, we want as many as possible of the non-p pairs to be unidirectional.\n\nWait, but how?\n\nEach node can be part of multiple unidirectional pairs.\n\nSo, perhaps the optimal arrangement is a DAG, where the graph is a collection of sources pointing to sinks, but arranged in a way that maximizes the number of unidirectional edges.\n\nWait, but perhaps the graph is a DAG with as many edges as possible in one direction, but ensuring that the sum of C(k_i, 2) equals p.\n\nWait, perhaps the graph is a linear chain, but that might not be optimal.\n\nAlternatively, perhaps the graph is structured as a collection of chains, but I'm not sure.\n\nAlternatively, perhaps the graph is a collection of edges where each edge is directed, but without forming cycles except within SCCs.\n\nWait, but the p is determined by the sum of C(k_i, 2), so the way the graph is structured affects how many unidirectional pairs are possible.\n\nSo, to maximize the number of unidirectional pairs, we need to arrange the graph in such a way that outside of the SCCs, as many as possible of the edges are directed in one way, contributing to unidirectional pairs.\n\nWait, perhaps the graph is a set of DAG edges between the SCCs, arranged in a way that maximizes the number of unidirectional pairs.\n\nWait, for example, suppose we have several SCCs, each being a single node. Then, the number of unidirectional pairs is the number of edges from one SCC to another, where the edge is directed, but not vice versa.\n\nBut wait, in that case, the number of unidirectional pairs would be the number of edges directed from a lower-ranked SCC to a higher-ranked SCC, but not the reverse.\n\nWait, perhaps the optimal arrangement is to have the graph consist of a single source component, which points to all other components, which are sinks. That way, all edges are directed towards the sink components, maximizing the number of unidirectional pairs.\n\nBut I'm not sure.\n\nWait, let's think of an example.\n\nSuppose p=3, minimal n=3. So the graph is a triangle, each node can reach the others. So all pairs are mutual, leading to 0 unidirectional pairs.\n\nAlternatively, perhaps another structure for p=3 with n=3.\n\nWait, but for n=3, the minimal sum is 3, which can only be achieved if the graph is a triangle.\n\nSo, in that case, all pairs are mutual, so unidirectional pairs are zero.\n\nSo, no way to have more unidirectional pairs in this case.\n\nAnother example: p=4, minimal n=5.\n\nWhat's the structure of this graph?\n\nWe have 5 nodes, sum of C(k_i, 2)=4.\n\nWait, wait, wait, no. Wait, the sum of C(k_i, 2) must equal p.\n\nWait, for p=4, the sum of C(k_i, 2) is 4. How can that be?\n\nBecause C(3,2)=3, and then C(2,2)=1, sum is 4.\n\nSo, the graph has two SCCs: one of size 3, another of size 2.\n\nSo, the 3-node component contributes 3 pairs, and the 2-node component contributes 1, making a total of 4.\n\nSo, the 3-node component is a strongly connected component, and the 2-node is another.\n\nNow, how to arrange the edges between these two components.\n\nBetween the 3-node and 2-node components, we can have edges in either direction.\n\nIf all edges go from the 3-node to the 2-node, then the 2-node can't reach back.\n\nEach of the 3 nodes can reach each of the 2 nodes, but the 2 nodes can't reach the 3 nodes.\n\nSo, for each of the 3 nodes u, and each of the 2 nodes v, (u, v) is an unidirectional pair, because u can reach v but v can't reach u.\n\nSo, for each of the 3*2 =6 pairs, it's unidirectional.\n\nAdditionally, within the 3-node component, there are 3 mutual pairs.\n\nWithin the 2-node component, 1 mutual pair.\n\nSo, the total unidirectional pairs is 6.\n\nWhich matches the sample.\n\nSo, the maximum number of unidirectional pairs is 6.\n\nSo, the approach for the second part is to arrange the graph as a DAG, where all edges go from the larger SCCs to the smaller ones, but in reality, it's more about the directionality between components.\n\nWait, but in the case above, the 3-node component is larger than the 2-node, but edges go from 3-node to 2-node. So the direction is from a larger component to a smaller one.\n\nBut that's just one possibility.\n\nSo, the key idea is to arrange the components in a way that maximizes the number of edges from higher components to lower ones, ensuring that the lower components cannot reach back.\n\nWait, but how?\n\nPerhaps, the optimal structure is to have all components arranged in a linear order, where each component only points to the next one. But I'm not sure.\n\nAlternatively, perhaps the maximum number of unidirectional pairs is achieved when all the edges between components are directed in a single direction, say from A to B, but not the other way.\n\nIn that case, the number of unidirectional pairs would be the product of the sizes of the components in the direction of the edges.\n\nSo, for the example of p=4, with components of size 3 and 2, if all edges are from 3-component to 2-component, then 3*2=6 unidirectional pairs.\n\nWhich is the maximum possible.\n\nSo, the approach is to arrange the components in such a way that the sum of the products of their sizes in the direction of edges is as large as possible.\n\nSo, the problem reduces to:\n\nOnce we have the minimal n, decomposed into components of sizes k_1, k_2, ..., k_m, such that sum C(k_i, 2) = p, and sum k_i =n.\n\nWe need to arrange the edges between the components such that the number of unidirectional pairs is maximized.\n\nThis is equivalent to choosing a DAG where all edges go from a component earlier in the order to later components, and the number of such directed edges is the sum of the products of the sizes of the components.\n\nWait, no. Because each edge from a node in A to a node in B contributes one unidirectional pair (A,B). So, the total number is the sum of a*b for each directed edge from A to B.\n\nBut the maximum is achieved when as many as possible edges are directed from earlier components to later ones.\n\nWait, perhaps arranging the components in a linear order, and directing all edges from earlier to later.\n\nSo, the number of unidirectional pairs would be the sum of a_i * a_j for all i < j, where a_i and a_j are the sizes of the components.\n\nBecause each component i can reach component j, but not vice versa.\n\nSo, for each pair of components i and j with i < j, the number of unidirectional pairs is a_i * a_j.\n\nThe total is the sum over all i < j of a_i * a_j.\n\nWhich is equal to (sum a_i)^2 - sum (a_i^2) ) / 2.\n\nBut sum a_i is n, so the total is (n^2 - sum a_i^2)/2.\n\nThus, to maximize the number of unidirectional pairs, we need to minimize sum a_i squared.\n\nBecause the total is (n² - sum a_i²)/2.\n\nSince n is fixed, the maximum occurs when sum a_i squared is as small as possible.\n\nSo, the problem reduces to: given a decomposition into components where sum C(k_i, 2) = p, find the decomposition that minimizes the sum of squares of the component sizes.\n\nThus, the second part is to find the decomposition into components (with sum C(k_i, 2) = p) that minimizes the sum of squares of the component sizes.\n\nBecause that will maximize the number of unidirectional pairs.\n\nSo, the steps are:\n\n1. For a given p, find the minimal n, which is done by representing p as the sum of C(k_i, 2) where each term is as large as possible.\n\n2. Once the component sizes are determined, arrange them in a way that sum of squares is minimized.\n\nWait, but what's the best way to minimize sum of squares? It's known that for a fixed sum, the sum of squares is minimized when the numbers are as equal as possible.\n\nBut in our case, the sum of k_i is fixed (n), and the sum of C(k_i, 2) is fixed (p).\n\nSo, to minimize sum of squares, given the constraints.\n\nBut how?\n\nHmm.\n\nWait, sum of squares is minimized when the component sizes are as equal as possible, subject to the constraints.\n\nBut the constraints are that sum C(k_i, 2) = p.\n\nSo, perhaps, the way to minimize sum of squares is to have the component sizes as equal as possible.\n\nBut perhaps it's better to have as few components as possible, but that depends on the p.\n\nAlternatively, perhaps the optimal decomposition is to have as many components as possible of the same size, but I'm not sure.\n\nLet me think with examples.\n\nExample 1: p=4.\n\nDecomposition is 3 and 2. Sum of squares is 9 +4=13.\n\nIf I arrange as 2 and 2, then sum C(k_i, 2) is 1+1=2 <4. Not enough.\n\nSo, to get sum C(k_i, 2)=4, 3 and 2 is the only option.\n\nSum of squares is 13.\n\nAnother option: 4 and 0. No, because 0 doesn't contribute.\n\nWait, 4: C(4,2)=6>4. So no.\n\nAlternatively, 3, 1: C(3,2)+C(1,2)=3+0=3<4. So, no.\n\nSo, the only decomposition is 3 and 2.\n\nSum of squares 13.\n\nSo, in this case, the sum is fixed.\n\nAnother example: p=5.\n\nPossible decompositions:\n\nOption 1: 3 and 2 (sum C=3+1=4 <5. No.\n\nOption 2: 4 and 1: C(4,2)=6, which is larger than 5. No.\n\nOption 3: 3,1,1: C(3,2)+C(1,2)+C(1,2) =3+0+0=3<5.\n\nNo.\n\nOption4: 2,2,1: sum C=1+1+0=2<5.\n\nNo.\n\nWait, perhaps 4 and 1 is too big.\n\nWait, perhaps 3,2: sum is 3+1=4, which is less than 5.\n\nSo, not enough.\n\nWait, perhaps 4 and 1 is not the way.\n\nHmm.\n\nWait, perhaps the decomposition is 4 and 1: C(4,2)=6>5, which is not allowed.\n\nSo, perhaps the next option is to have 3 and 2, and then see if we can split further.\n\nWait, 3,2,0: sum C=3+1=4.\n\nStill not enough.\n\nWait, perhaps 3,3: C(3,2)*2=3*2=6>5. No.\n\nAlternatively, 2,2,1: sum C=1+1+0=2.\n\nNo.\n\nHmm, perhaps p=5 requires a different approach.\n\nWait, perhaps the decomposition is 3,2,0, but that's not allowed.\n\nAlternatively, perhaps the decomposition is 3,1,1: sum C=3+0+0=3.\n\nNo.\n\nWait, perhaps I made a mistake earlier.\n\nWait, for p=5, how can we represent it as sum of C(k_i, 2)?\n\nLet me see:\n\nC(4,2)=6>5.\n\nC(3,2)=3.\n\nSo, 3 + 1 +1 =5.\n\nBecause 3 comes from C(3,2), and the 1's come from C(2,2)=1 each.\n\nSo, 3+1+1=5.\n\nThus, the decomposition is 3,2,2.\n\nWait, no: 3,2,2.\n\nBecause C(3,2)=3, C(2,2)=1 each. 3+1+1=5.\n\nThus, the sum is 3+2+2=7 nodes.\n\nWait, that can't be right because 3+2+2=7 is more than the minimal n.\n\nWait, perhaps I'm getting confused.\n\nWait, the minimal n is determined by the decomposition into C(k_i, 2) summing to p.\n\nSo, for p=5, the decomposition is 3 and 2, which sum to 3+1=4. Which is less than 5. So, no.\n\nAlternatively, perhaps 3,2,0 is 3+1+0=4.\n\nNo.\n\nWait, perhaps the decomposition is 4 and 1, but that's 6>5.\n\nNo.\n\nHmm, perhaps for p=5, the decomposition is 3, 2, and 0, but that's not allowed.\n\nAlternatively, perhaps the decomposition is 2, 2, 1: sum C=1+1+0=2.\n\nNo.\n\nWait, perhaps I need to think differently.\n\nWait, perhaps the decomposition is 3, 2, and 0, but that's not valid because the 0 component doesn't contribute.\n\nAlternatively, perhaps I'm missing a way to represent 5 as a sum of C(k_i, 2).\n\nWait, 5 can be written as 3 + 1 + 1.\n\nBecause C(3,2)=3, and each 1 is C(1,2)=0. So 3+0+0=3<5.\n\nNot enough.\n\nAlternatively, perhaps 2 + 2 + 1: C(2,2)=1 each, sum 1+1+0=2<5.\n\nNo.\n\nHmm, perhaps p=5 requires a decomposition that includes a 3 and a 2, but then another 2.\n\nSo, 3,2,2: sum C=3+1+1=5.\n\nThus, the component sizes are 3, 2, 2.\n\nSo, sum of squares is 9 +4 +4=17.\n\nThus, the number of unidirectional pairs is (n^2 - sum a_i^2)/2.\n\nn is 3+2+2=7.\n\nSo, n²=49.\n\nsum a_i^2=17.\n\nSo, (49 -17)/2=32/2=16.\n\nThus, the maximum unidirectional pairs is 16.\n\nSo, that's the approach.\n\nBut the question is, how to find the decomposition into C(k_i, 2) that sum to p, and whose sum of squares is minimized.\n\nWhich would allow us to compute the maximum number of unidirectional pairs.\n\nSo, the algorithm for the second part is:\n\nOnce the component sizes are determined as the decomposition into C(k_i, 2) summing to p, arrange the components such that the sum of squares is minimized.\n\nAnd then, the maximum unidirectional pairs is (n² - sum_a_i_squared) // 2.\n\nSo, putting it all together.\n\nNow, the plan is:\n\nGiven p:\n\n1. Compute the minimal n by greedily taking the largest possible k where C(k,2) ≤ remaining p.\n\n2. Once the component sizes are determined, arrange them into a list.\n\n3. Compute the sum of squares of these component sizes.\n\n4. The maximum unidirectional pairs is (n² - sum_squares) // 2.\n\nNow, the code needs to implement this.\n\nSo, how to implement step 1?\n\nWe can loop, subtracting the largest possible C(k,2) from p, until p becomes zero.\n\nEach time, find the maximum k where k*(k-1)/2 ≤ current_p.\n\nWe can compute this k as the floor of (sqrt(8*p +1) +1)/2.\n\nWait, because solving k^2 -k -2p =0, the positive root is [1 + sqrt(1+8p)]/2.\n\nSo, k is the floor of that.\n\nSo, for each step:\n\ncurrent_p = p_remaining\n\nk = (1 + sqrt(1 + 8*current_p)) // 2\n\nif (k*(k-1)//2) > current_p:\n\n   k -=1\n\nthen subtract C(k,2) from p_remaining, and add k to sum_n.\n\nRepeat until p_remaining is zero.\n\nOnce we have the list of k_i's, sum their squares.\n\nCompute (sum_n^2 - sum_squares) // 2.\n\nThat's the maximum number of unidirectional pairs.\n\nSo, the code can be written as:\n\nRead p.\n\nIf p ==0:\n\n   print 0 0.\n\nElse:\n\n   compute the decomposition into k_i's.\n\n   sum_n is the sum of k_i's.\n\n   sum_squares is sum of (k_i)^2.\n\n   unidirectional_pairs = (sum_n^2 - sum_squares) // 2.\n\n   print sum_n and unidirectional_pairs.\n\nSo, the code can be written accordingly.\n\nTesting the sample inputs.\n\nSample Input 1: 3.\n\nDecomposition: k=3, since C(3,2)=3=p.\n\nsum_n=3.\n\nsum_squares=9.\n\nunidirectional_pairs=(9-9)/2=0.\n\nWhich matches the sample.\n\nSample Input 2:4.\n\nDecomposition: 3, then 1 (since 3+1=4).\n\nsum_n=4.\n\nsum_squares=9+1=10.\n\nunidirectional_pairs=(16-10)/2=3.\n\nWait, but sample output is 5 6.\n\nWait, wait, wait, no, wait.\n\nWait, wait, for p=4, the decomposition is 3 and 2.\n\nWait, wait, no. Because 3 + 2 =5 nodes.\n\nWait, what's wrong here.\n\nWait, earlier analysis said that for p=4, the decomposition is 3 and 2, since C(3,2)=3, C(2,2)=1, sum 4.\n\nWait, but according to the code I wrote, the decomposition would be:\n\ncurrent_p=4.\n\nk=(1+sqrt(33))/2 ~ (1+5.744)/2= ~3.372, floor to 3.\n\nC(3,2)=3 ≤4.\n\nsubtract 3, p_remaining=1.\n\nnext, k=(1+sqrt(9))/2= (1+3)/2=2.\n\nC(2,2)=1 ≤1.\n\nsubtract 1, p_remaining=0.\n\nsum_n=3+2=5.\n\nsum_squares=9+4=13.\n\nunidirectional_pairs=(25-13)/2=12/2=6.\n\nWhich matches the sample.\n\nSo, the code correctly handles that.\n\nAnother test case: p=0.\n\nOutput 0 0.\n\nAnother test case: p=1.\n\nDecomposition: k=2, since C(2,2)=1.\n\nsum_n=2.\n\nsum_squares=4.\n\nunidirectional_pairs=(4-4)/2=0.\n\nWhich is correct.\n\nAnother test case: p=2.\n\nDecomposition: k=2 (C(2,2)=1), then remaining p=1.\n\nk=2 again, C(2,2)=1, subtract, sum_n=2+2=4.\n\nsum_squares=4+4=8.\n\nunidirectional_pairs=(16-8)/2=4.\n\nWhich is the maximum possible.\n\nBecause the graph consists of two components of size 2.\n\nEdges are directed from one component to the other, so each of the 4 pairs (u from first, v from second) is unidirectional.\n\nSo, 4 unidirectional pairs.\n\nYes.\n\nSo, the code seems correct.\n\nNow, let's write the Python code.\n\nWe'll handle the case when p=0 separately.\n\nElse, proceed with the decomposition.\n\nBut wait, when p is 0, the minimal n is 0, and the maximum unidirectional pairs is 0.\n\nSo, the code can proceed as:\n\nRead p.\n\nif p ==0:\n\n   print(\"0 0\")\n\nelse:\n\n   compute the decomposition.\n\nSo, let's implement the decomposition.\n\nImplementing the decomposition:\n\nInitialize sum_n =0, sum_squares=0, p_remaining =p.\n\nwhile p_remaining >0:\n\n   current_p = p_remaining.\n\n   # find maximum k where k*(k-1)/2 <= current_p.\n\n   # compute k.\n\n   # solve k^2 -k - 2*current_p =0.\n\n   # positive root is (1 + sqrt(1 +8*current_p )) / 2.\n\n   k = int( (1 + (1 + 8 * current_p)**0.5 ) // 2 )\n\n   # check if k*(k-1)/2 <= current_p.\n\n   while True:\n\n       c = k*(k-1)//2\n\n       if c == current_p:\n\n           break\n\n       elif c < current_p:\n\n           break\n\n       else:\n\n           k -=1\n\n   # Now, k is the maximum possible.\n\n   sum_n +=k\n\n   sum_squares +=k*k\n\n   p_remaining -= c\n\nOnce done, compute unidirectional_pairs = (sum_n^2 - sum_squares) //2.\n\nPrint sum_n and unidirectional_pairs.\n\nWait, but for cases where current_p is zero, like after subtracting, but that's handled.\n\nWait, but what if current_p is zero? Because p_remaining starts as zero, but the loop doesn't run.\n\nSo, code seems okay.\n\nLet's test for p=5.\n\nDecomposition:\n\np=5.\n\nFirst iteration: current_p=5.\n\nk = (1 + sqrt(41))/2 ≈ (1+6.403)/2≈3.701, floor to 3.\n\nC(3,2)=3 ≤5.\n\nsubtract 3, p_remaining=2.\n\nSecond iteration: current_p=2.\n\nk = (1+sqrt(17))/2≈ (1+4.123)/2≈2.56, floor to 2.\n\nC(2,2)=1 ≤2.\n\nsubtract 1, p_remaining=1.\n\nThird iteration: current_p=1.\n\nk= (1+3)/2=2.\n\nC(2,2)=1 ≤1.\n\nsubtract, p_remaining=0.\n\nsum_n=3+2+2=7.\n\nsum_squares=9+4+4=17.\n\nunidirectional_pairs=(49-17)/2=16.\n\nWhich is correct.\n\nAnother test case: p=6.\n\nDecomposition: k=4, since C(4,2)=6.\n\nsum_n=4.\n\nsum_squares=16.\n\nunidirectional_pairs=(16-16)/2=0.\n\nBecause all pairs are mutual.\n\nSo, output is 4 0.\n\nAnother test case: p=7.\n\nDecomposition:\n\np=7.\n\nFirst, current_p=7.\n\nk = (1 + sqrt(57))/2≈ (1+7.55)/2≈4.275, floor to4.\n\nC(4,2)=6 ≤7.\n\nsubtract 6, p_remaining=1.\n\nNext, current_p=1.\n\nk=2, C=1.\n\nsubtract, p_remaining=0.\n\nsum_n=4+2=6.\n\nsum_squares=16+4=20.\n\nunidirectional_pairs=(36-20)/2=16/2=8.\n\nSo, output is 6 8.\n\nWhich seems correct.\n\nThus, the code should handle all cases.\n\nNow, implementing this in Python.\n\nEdge Cases:\n\n- p=0: output 0 0.\n\n- p=1: output 2 0.\n\n- p=2: output 4 4.\n\n- p=3: 3 0.\n\n- p=4:5 6.\n\nSo, the code is as follows.\n",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and, among all such graphs with the minimum number of nodes, find the maximum number of unidirectional pairs.\n\n### Approach\n\n1. **Understanding p-reachable Graphs**: A p-reachable graph has exactly `p` ordered pairs `(u, v)` where `u < v` and both nodes are mutually reachable. This means each pair contributes to the count of mutual reachability.\n\n2. **Decomposition into Strongly Connected Components (SCCs)**: To minimize the number of nodes, we decompose `p` into sums of triangular numbers (since each SCC of size `k` contributes `C(k, 2)` to `p`). We use the largest possible SCC sizes first to minimize the total number of nodes.\n\n3. **Maximizing Unidirectional Pairs**: Once we have the minimal number of nodes, we need to structure the graph to maximize unidirectional pairs. This is achieved by arranging the SCCs in a way that maximizes the number of edges directed from one component to another, thus creating as many unidirectional pairs as possible.\n\n### Solution Code\n\n```python\nimport math\n\ndef main():\n    import sys\n    input = sys.stdin.read().strip()\n    p = int(input)\n    \n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    sum_n = 0\n    sum_squares = 0\n    p_remaining = p\n    \n    while p_remaining > 0:\n        current_p = p_remaining\n        # Calculate the maximum k where k*(k-1)/2 <= current_p\n        sqrt_val = math.sqrt(1 + 8 * current_p)\n        k = int((1 + sqrt_val) // 2)\n        # Ensure k is correct\n        while True:\n            c = k * (k - 1) // 2\n            if c == current_p:\n                break\n            elif c < current_p:\n                break\n            else:\n                k -= 1\n        # Add to sum_n and sum_squares\n        sum_n += k\n        sum_squares += k * k\n        p_remaining -= c\n    \n    # Compute the maximum number of unidirectional pairs\n    unidirectional = (sum_n * sum_n - sum_squares) // 2\n    print(f\"{sum_n} {unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Reading Input**: The input is read and converted to an integer `p`.\n\n2. **Handling Zero Case**: If `p` is zero, the output is immediately \"0 0\" since no nodes are needed and there are no unidirectional pairs.\n\n3. **Decomposition Loop**: The loop decomposes `p` into sums of triangular numbers. For each iteration, it finds the largest `k` such that `C(k, 2)` is less than or equal to the remaining `p`. This `k` is added to the total nodes and squares, and `p` is reduced by `C(k, 2)`.\n\n4. **Calculating Unidirectional Pairs**: Using the formula derived from the decomposition, the maximum number of unidirectional pairs is calculated as `(n² - sum_squares) // 2`, where `n` is the total number of nodes.\n\nThis approach ensures that we find the minimal number of nodes and maximize unidirectional pairs efficiently.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef main():\n    import sys\n    input = sys.stdin.read().strip()\n    p = int(input)\n    \n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    sum_n = 0\n    sum_squares = 0\n    p_remaining = p\n    \n    while p_remaining > 0:\n        current_p = p_remaining\n        # Calculate the maximum k where k*(k-1)/2 <= current_p\n        sqrt_val = math.sqrt(1 + 8 * current_p)\n        k = int((1 + sqrt_val) // 2)\n        # Ensure k is correct\n        while True:\n            c = k * (k - 1) // 2\n            if c == current_p:\n                break\n            elif c < current_p:\n                break\n            else:\n                k -= 1\n        # Add to sum_n and sum_squares\n        sum_n += k\n        sum_squares += k * k\n        p_remaining -= c\n    \n    # Compute the maximum number of unidirectional pairs\n    unidirectional = (sum_n * sum_n - sum_squares) // 2\n    print(f\"{sum_n} {unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 476,
        "completion_token_count": 731,
        "thoughts_token_count": 8181
    }
}