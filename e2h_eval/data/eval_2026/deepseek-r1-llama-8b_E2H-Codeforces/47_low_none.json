{
    "start": 1758278298.157417,
    "end": 1758278514.686244,
    "start-formatted": "2025-09-19 19:38 KST",
    "end-formatted": "2025-09-19 19:41 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I need to solve this problem where Neko wants to find the smallest non-negative integer k such that the LCM of (a + k) and (b + k) is minimized. And if there are multiple k's that give the same minimal LCM, choose the smallest one.\n\nHmm, let's think about this. The first thing I notice is that a + k and b + k can be rewritten in terms of their difference. Let me denote d as the absolute difference between a and b. So, d = |a - b|. Without loss of generality, let's assume that a <= b. Then, when we add k to both, their difference remains the same. Wait, no, because a + k and b + k: their difference is still (b - a). So the difference is fixed as d.\n\nSo the problem reduces to finding two numbers x and y such that x = a + k, y = b + k, which means x and y differ by d. We want to minimize LCM(x, y). Since d is fixed, the LCM depends on how x and y relate in terms of their greatest common divisor (GCD).\n\nWait, right! Because for any two numbers x and y, LCM(x, y) = (x * y) / GCD(x, y). So to minimize the LCM, we need to maximize the GCD. Because the product x*y is fixed up to some factors based on d, but wait no, because x and y are not fixed. Wait, no, because x and y are a function of k. Hmm, maybe I'm thinking about it wrong.\n\nAlternatively, since x and y differ by d, perhaps their GCD is related to the GCD of d and x or something like that. Let me think.\n\nLet me denote g as the GCD of x and y. Then, x = g * m, y = g * n, where m and n are coprime integers. Also, since y - x = d, we have g*(n - m) = d. So, g must be a divisor of d.\n\nSo, the GCD of x and y is g, which is a divisor of d. Therefore, to maximize g, we should look for the largest possible divisor of d.\n\nWait, but what's the maximum possible g? It depends on how m and n are chosen. Let me see.\n\nSo for each possible divisor g of d, I can compute the minimal possible x and y such that x = g * m, y = g * n, with n > m (since x < y), and m and n are coprime, and g * (n - m) = d.\n\nSo for each g dividing d, the minimal product (and thus minimal LCM) would be achieved when m and n are as small as possible. Since m and n are coprimes and positive integers, the smallest possible is m=1, n= (d/g) + 1? Or wait, maybe m and n are just consecutive integers?\n\nWait, no, because m and n must satisfy n - m = d/(g). So for a given g, d/g must be an integer. Let me denote s = d/g. So n = m + s.\n\nBut since m and n must be coprime, the minimal scenario is when m=1 and n=s+1, as long as s+1 is coprime with 1, which it always is.\n\nWait, no. For example, suppose s=2, then n = m+2. So m=1, n=3. Their GCD is 1, which is good. Alternatively, if s=4, m=1, n=5: also coprime.\n\nSo for a given g, the minimal x and y would be x = g*1, y = g*(s+1) = g*(d/g +1) = d + g. So x = g, y = d + g.\n\nWait, but wait: since x = a +k and y = b +k, and a <= b, so x = a +k, y = b +k. But if a +k is less than b +k, then their difference is b - a = d.\n\nSo in the case where g is a divisor of d, then x must be a multiple of g, and y must be a multiple of g as well. So the minimal x and y would be as I thought: x = g, y = g + s*g = g(s +1) ?\n\nWait, maybe I'm getting this a bit mixed up. Let's try to formalize it.\n\nWe have x = a +k, y = b +k. The difference is y -x = d. So for x and y to have GCD g, which is a divisor of d, x must be a multiple of g, say",
    "response": "To solve this problem, we need to find the smallest non-negative integer \\( k \\) such that the least common multiple (LCM) of \\( a + k \\) and \\( b + k \\) is minimized. If there are multiple values of \\( k \\) that yield the same minimal LCM, we should choose the smallest \\( k \\).\n\n### Approach\n1. **Problem Analysis**: The key insight is that the difference between \\( a \\) and \\( b \\), denoted as \\( d \\), remains constant for any \\( k \\). This difference \\( d \\) is crucial because it helps us determine the possible values of \\( k \\) that minimize the LCM.\n\n2. **Divisors of \\( d \\)**: For each divisor \\( g \\) of \\( d \\), we can express \\( x = a + k \\) and \\( y = b + k \\) as multiples of \\( g \\). This is because the GCD of \\( x \\) and \\( y \\) must be a divisor of \\( d \\).\n\n3. **Minimize LCM**: By iterating over all divisors of \\( d \\), we can compute the corresponding \\( k \\) values that minimize the LCM. For each divisor \\( g \\), the minimal LCM is achieved when \\( x \\) and \\( y \\) are as small as possible.\n\n4. **Optimal \\( k \\)**: The optimal \\( k \\) is determined by finding the smallest \\( k \\) that results in the minimal LCM. This involves checking each divisor of \\( d \\) and computing the corresponding \\( k \\) to find the smallest one.\n\n### Solution Code\n```python\nimport math\n\ndef find_min_k(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    min_lcm = float('inf')\n    best_k = 0\n\n    for g in range(1, int(math.isqrt(d)) + 1):\n        if d % g != 0:\n            continue\n        s = d // g\n        m = 1\n        n = s + 1\n        if math.gcd(m, n) != 1:\n            continue\n        x = g * m\n        y = g * n\n        lcm = (x * y) // g\n        current_k = x - a\n        if current_k < 0:\n            continue\n        if lcm < min_lcm or (lcm == min_lcm and current_k < best_k):\n            min_lcm = lcm\n            best_k = current_k\n        if current_k > 0:\n            break\n    return best_k\n\n# Read input\na, b = map(int, input().split())\nprint(find_min_k(a, b))\n```\n\n### Explanation\n1. **Reading Input**: The input consists of two integers \\( a \\) and \\( b \\).\n2. **Special Case Handling**: If \\( a \\) equals \\( b \\), the answer is immediately 0 since the LCM is just \\( a \\) (or \\( b \\)).\n3. **Difference Calculation**: Compute the absolute difference \\( d \\) between \\( a \\) and \\( b \\).\n4. **Divisors Check**: Iterate through all possible divisors of \\( d \\) to find the optimal \\( k \\).\n5. **Compute LCM**: For each divisor \\( g \\), compute the corresponding \\( k \\) and check if it results in a smaller LCM than previously found.\n6. **Output Result**: Print the smallest \\( k \\) that achieves the minimal LCM.\n\nThis approach efficiently narrows down the possible values of \\( k \\) by leveraging the properties of divisors and the relationship between LCM and GCD, ensuring an optimal solution.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef find_min_k(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    min_lcm = float('inf')\n    best_k = 0\n\n    for g in range(1, int(math.isqrt(d)) + 1):\n        if d % g != 0:\n            continue\n        s = d // g\n        m = 1\n        n = s + 1\n        if math.gcd(m, n) != 1:\n            continue\n        x = g * m\n        y = g * n\n        lcm = (x * y) // g\n        current_k = x - a\n        if current_k < 0:\n            continue\n        if lcm < min_lcm or (lcm == min_lcm and current_k < best_k):\n            min_lcm = lcm\n            best_k = current_k\n        if current_k > 0:\n            break\n    return best_k\n\n# Read input\na, b = map(int, input().split())\nprint(find_min_k(a, b))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 383,
        "completion_token_count": 782,
        "thoughts_token_count": 1025
    }
}