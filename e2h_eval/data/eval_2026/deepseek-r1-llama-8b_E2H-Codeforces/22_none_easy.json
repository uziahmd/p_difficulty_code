{
    "start": 1758292094.1714437,
    "end": 1758292145.4183393,
    "start-formatted": "2025-09-19 23:28 KST",
    "end-formatted": "2025-09-19 23:29 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef find_successful_students():\n    # Read the number of students and subjects\n    n, m = map(int, input().split())\n\n    # Initialize a set to store the best marks for each subject\n    best_marks = {}\n\n    # Iterate over each student's grades\n    for _ in range(n):\n        # Read the student's grades\n        grades = input()\n\n        # Iterate over each subject\n        for j in range(m):\n            # Get the current mark\n            mark = int(grades[j])\n\n            # If this is the first mark for this subject or it's better than the current best mark\n            if j not in best_marks or mark > best_marks[j]:\n                # Update the best mark for this subject\n                best_marks[j] = mark\n\n    # Initialize a set to store the successful students\n    successful_students = set()\n\n    # Iterate over each student's grades again\n    for i in range(n):\n        # Assume the student is not successful\n        is_successful = False\n\n        # Iterate over each subject\n        for j in range(m):\n            # If the student has the best mark for this subject\n            if int(input()[j]) == best_marks[j]:\n                # Mark the student as successful\n                is_successful = True\n                break\n\n        # If the student is successful, add them to the set\n        if is_successful:\n            successful_students.add(i + 1)\n\n    # Return the number of successful students\n    return str(len(successful_students))\n\n\nif __name__ == \"__main__\":\n    t = 1\n    for _ in range(t):\n        print(find_successful_students())\n```\n\nThis script first reads the number of students and subjects from the input. It then initializes a set `best_marks` to store the best marks for each subject. The script then iterates over each student's grades, updating the best marks for each subject as needed.\n\nNext, the script initializes a set `successful_students` to store the successful students. It then iterates over each student's grades again, checking if the student has the best mark for each subject. If a student is found to be successful, they are added to the `successful_students` set.\n\nFinally, the script returns the number of successful students, which is the size of the `successful_students` set. The result is printed to the standard output.\n\nNote that this script assumes that the input is well-formed and does not contain any errors. In a real-world scenario, you would want to add error handling code to handle potential issues with the input.",
    "ground_truth": "N/A",
    "extracted_answer": "def find_successful_students():\n    # Read the number of students and subjects\n    n, m = map(int, input().split())\n\n    # Initialize a set to store the best marks for each subject\n    best_marks = {}\n\n    # Iterate over each student's grades\n    for _ in range(n):\n        # Read the student's grades\n        grades = input()\n\n        # Iterate over each subject\n        for j in range(m):\n            # Get the current mark\n            mark = int(grades[j])\n\n            # If this is the first mark for this subject or it's better than the current best mark\n            if j not in best_marks or mark > best_marks[j]:\n                # Update the best mark for this subject\n                best_marks[j] = mark\n\n    # Initialize a set to store the successful students\n    successful_students = set()\n\n    # Iterate over each student's grades again\n    for i in range(n):\n        # Assume the student is not successful\n        is_successful = False\n\n        # Iterate over each subject\n        for j in range(m):\n            # If the student has the best mark for this subject\n            if int(input()[j]) == best_marks[j]:\n                # Mark the student as successful\n                is_successful = True\n                break\n\n        # If the student is successful, add them to the set\n        if is_successful:\n            successful_students.add(i + 1)\n\n    # Return the number of successful students\n    return str(len(successful_students))\n\n\nif __name__ == \"__main__\":\n    t = 1\n    for _ in range(t):\n        print(find_successful_students())",
    "score": -1,
    "metadata": {
        "prompt_token_count": 460,
        "completion_token_count": 525,
        "thoughts_token_count": 0
    }
}