{
    "start": 1758278097.5591614,
    "end": 1758278259.687274,
    "start-formatted": "2025-09-19 19:34 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I need to solve this programming problem. Let me read it carefully.\n\nThe problem is about maximizing the profit from building houses on a street with certain restrictions. Each house can be built on a spot, and each spot can have a height between 0 and h. The profit for a house of height a is a squared. But there are m restrictions. Each restriction says that in a certain range [l_i, r_i], the tallest house must be at most x_i.\n\nHmm, the goal is to choose the heights for each spot such that all restrictions are satisfied and the total profit is maximized.\n\nLet me think about how to model this.\n\nI think this is an optimization problem with constraints. The variables are the heights of each spot (h1, h2, ..., hn), each ranging from 0 to h. The objective is to maximize the sum of squares of these variables. The constraints are that for each restriction i, the maximum of h_l to h_r is <= x_i.\n\nThis seems like a problem that can be solved with dynamic programming or memoization, considering the constraints. But given the small constraints (n, h, m up to 50), maybe a brute-force approach is feasible, but even better would be to find a way to represent the state efficiently.\n\nWait, but n is up to 50. Trying all possible combinations of heights is impossible because each spot has h+1 options, leading to (h+1)^n possibilities which for h=50 is 3.9e+18. That's way too big.\n\nSo I need a smarter approach.\n\nAnother thought: for each position, the optimal choice depends on the constraints that affect it. Maybe we can model the problem by considering each spot and determining the maximum allowed height based on all applicable restrictions.\n\nBut the issue is that the restrictions are on ranges, and multiple restrictions may apply to a single spot. For example, a spot might be part of multiple ranges, each with their own x_i. The height of that spot must satisfy all those x_i's, but since each restriction requires the maximum in its range to be <= x_i, the actual limiting factor for a spot's height is the minimum of all x_i's that apply to it.\n\nWait, no. Because for a particular spot, say spot k, any restriction that includes k in its [l_i, r_i] will impose that the height of k cannot exceed x_i. But if another restriction includes k and has a lower x_j, then the maximum allowed for k is min(x_i, x_j, ...). So the maximum possible height for spot k is the minimum of x_i across all restrictions that include k.\n\nWait, no, that's not correct. Because each restriction imposes that the maximum in its range is <= x_i. So for a spot k, the maximum possible height is the minimum x_i among all restrictions where l_i <=k <= r_i. Because if any of those x_i is less than the others, then the maximum allowed is that x_i.\n\nFor example, suppose spot 2 is covered by two restrictions: one with x=5 and another with x=3. Then the maximum height for spot 2 must be <=3, because otherwise the second restriction would be violated.\n\nYes, that makes sense. So for each spot k, the maximum allowed height is the minimum of x_i across all restrictions that include k in their [l_i, r_i]. However, also, each spot's height cannot exceed h. So the effective maximum for spot k is the minimum between h and the minimum x_i of all applicable restrictions.\n\nWait, but wait: the x_i could be zero. So for any spot covered by a restriction with x_i=0, the height must be zero.\n\nSo the first step is to compute, for each spot k, the maximum allowed height, which is the minimum of all x_i where l_i <=k <=r_i, and also not exceeding h.\n\nSo let's process all restrictions and for each spot, determine the minimal x_i that applies to it. If a spot is not covered by any restriction, then its maximum allowed height is h.\n\nOnce we have for each spot the maximum allowed height, then the problem reduces to choosing the height for each spot as high as possible (to maximize the sum of squares) but not exceeding the computed maximum for that spot.\n\nBecause higher a gives a^2, which increases with a.\n\nSo, for each spot, the optimal choice is to set its height as high as possible, which is the computed maximum.\n\nWait, but wait. What if two spots are in the same restriction? For example, a restriction covers spots 1-3 with x=5. Then each of these spots can be up to 5. But suppose another restriction covers spots 2-4 with x=3. Then spot 2 is limited to 3, spot 3 is limited to 3, but spot 4 is only limited by the second restriction (x=",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. Each house can have a height between 0 and a given maximum value, and each restriction limits the maximum height in a specific range.\n\n### Approach\n1. **Identify Restrictions for Each Spot**: For each spot, determine the minimum height allowed by all applicable restrictions. This is done by taking the minimum value of all restrictions that include the spot in their range.\n2. **Compute Maximum Allowed Height**: For each spot, the maximum allowed height is the minimum of the computed restrictions and the overall maximum height allowed.\n3. **Calculate Profit**: Once the maximum allowed heights for each spot are determined, calculate the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\nmax_heights = [h] * (n + 1)  # Using 1-based indexing\n\nfor l, r, x in restrictions:\n    for k in range(l, r + 1):\n        if max_heights[k] > x:\n            max_heights[k] = x\n\ntotal_profit = 0\nfor k in range(1, n + 1):\n    total_profit += max_heights[k] ** 2\n\nprint(total_profit)\n```\n\n### Explanation\n- **Reading Input**: The input consists of the number of spots, the maximum height, and the number of restrictions. Each restriction specifies a range and a maximum height.\n- **Processing Restrictions**: For each restriction, update the maximum allowed height for each spot in the specified range.\n- **Calculating Profit**: After determining the maximum allowed heights for each spot, compute the total profit by summing the squares of these heights.\n\nThis approach ensures that all restrictions are respected while maximizing the profit from the housing project.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\nmax_heights = [h] * (n + 1)  # Using 1-based indexing\n\nfor l, r, x in restrictions:\n    for k in range(l, r + 1):\n        if max_heights[k] > x:\n            max_heights[k] = x\n\ntotal_profit = 0\nfor k in range(1, n + 1):\n    total_profit += max_heights[k] ** 2\n\nprint(total_profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 812,
        "completion_token_count": 416,
        "thoughts_token_count": 1025
    }
}