{
    "start": 1758278368.8216898,
    "end": 1758278629.9265277,
    "start-formatted": "2025-09-19 19:39 KST",
    "end-formatted": "2025-09-19 19:43 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, so I need to solve this problem where given two integers a and b, I have to find the smallest non-negative integer k such that the LCM of (a+k) and (b+k) is minimized. And if there are multiple k's that give the same minimal LCM, pick the smallest one.\n\nHmm. Let me think about how to approach this.\n\nFirst, let's understand what's happening when we add k to both a and b. The new numbers are a + k and b + k. But wait, since a and b could be in any order, maybe I should first compute the difference between them. Oh right, because if a is larger than b, then adding k to both doesn't change their order. Wait no, if a > b, then a +k is still bigger than b +k. So the LCM would be a +k if they are coprime, but maybe not.\n\nWait, actually, the LCM of two numbers x and y is (x*y)/GCD(x,y). So, for a +k and b +k, their GCD is important here.\n\nLet me denote d = |a - b|. Because when you add k to both, the difference remains the same as d. So the GCD of (a +k) and (b +k) would be the same as the GCD of (d, (a +k) - (b +k)) which simplifies to GCD(d, a - b). Since d is fixed, the GCD depends on the difference between a and b.\n\nWait, no. Let me see: the GCD of (a +k) and (b +k) is equal to the GCD of (a +k, (b +k) - (a +k)) ) = GCD(a +k, b -a). Because (b +k) - (a +k) is b -a.\n\nSo regardless of k, the GCD of the two terms is GCD(d, a +k), where d is |a -b|.\n\nWait, because if a > b, then d is a - b. Then (a +k) - (b +k) = a - b = d. So the GCD is GCD(d, a +k - (b +k)) = GCD(d, a -b) = GCD(d, d) = d. Wait, no, that's only if a -b is positive. Wait, I'm getting confused.\n\nWait, let's say a >= b. Then a +k and b +k: their difference is a - b. So GCD(a +k, b +k) = GCD(b +k, a +k - (b +k)) = GCD(b +k, a - b). So it's the GCD of (a - b) and (b +k).\n\nBut a -b is fixed, let's call it d. So GCD(d, b +k).\n\nSimilarly, if a < b, then d is b -a, and GCD is GCD(d, a +k).\n\nSo in either case, the GCD of the two terms is GCD(d, s), where s is either a +k or b +k, depending on which is larger.\n\nWait, perhaps I can model this as follows: Let me assume that a >= b. So d = a - b. Then the GCD is GCD(d, b +k).\n\nBecause (a +k) = (b +k) + d, so the GCD is GCD(d, b +k).\n\nSo the LCM is (a +k) * (b +k) / GCD(d, b +k).\n\nHmm. So to minimize the LCM, perhaps I can find the value of k where the product (a +k)(b +k) is minimized, given that their GCD with d is as large as possible. Because a higher GCD would reduce the LCM.\n\nAlternatively, since d is fixed, the GCD can't be larger than d. So perhaps the optimal k is such that (b +k) is a multiple of some divisor of d.\n\nWait, that makes sense. Because if (b +k) is divisible by a divisor g of d, then the GCD will be at least g, which could help reduce the LCM.\n\nSo perhaps the strategy is to find all divisors of d, then for each divisor g, find the smallest k such that (b +k) is divisible by g. Then compute the LCM for each such k and choose the one that gives the minimal LCM.\n\nWait, but d could be zero? No, because a and b are different. Or wait, if a equals b, then d is zero. In that case, adding k to both a and b gives a +k and b +k which are equal. So",
    "response": "To solve this problem, we need to find the smallest non-negative integer \\( k \\) such that the least common multiple (LCM) of \\( a + k \\) and \\( b + k \\) is minimized. If there are multiple values of \\( k \\) that yield the same minimal LCM, we should choose the smallest \\( k \\).\n\n### Approach\n1. **Problem Analysis**: The key insight is that the difference between \\( a \\) and \\( b \\) remains constant when \\( k \\) is added to both. This difference, \\( d = |a - b| \\), helps us determine the greatest common divisor (GCD) of \\( a + k \\) and \\( b + k \\).\n2. **Divisors of \\( d \\)**: The GCD of \\( a + k \\) and \\( b + k \\) will be a divisor of \\( d \\). Therefore, we need to consider all divisors of \\( d \\) to find potential values of \\( k \\) that minimize the LCM.\n3. **Finding Optimal \\( k \\)**: For each divisor \\( g \\) of \\( d \\), we compute the smallest \\( k \\) such that \\( (b + k) \\) is divisible by \\( g \\). We then evaluate the LCM for each such \\( k \\) and select the one that gives the smallest LCM.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef minimal_lcm(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    if d == 0:\n        return 0\n    divisors = set()\n    for i in range(1, int(math.isqrt(d)) + 1):\n        if d % i == 0:\n            divisors.add(i)\n            divisors.add(d // i)\n    min_lcm = float('inf')\n    best_k = 0\n    for g in divisors:\n        # Compute k such that (b + k) is divisible by g\n        # Since a >= b, we assume a >= b, so d = a - b\n        if a > b:\n            s = b % g\n            k = g - s if s != 0 else 0\n        else:\n            s = a % g\n            k = g - s if s != 0 else 0\n        current_a = a + k\n        current_b = b + k\n        current_gcd = math.gcd(current_a, current_b)\n        current_lcm = (current_a * current_b) // current_gcd\n        if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n            min_lcm = current_lcm\n            best_k = k\n    return best_k\n\ndef main():\n    input_line = sys.stdin.read().strip()\n    a, b = map(int, input_line.split())\n    print(minimal_lcm(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input consists of two integers \\( a \\) and \\( b \\).\n2. **Special Case Handling**: If \\( a \\) equals \\( b \\), the optimal \\( k \\) is 0 because the LCM of two equal numbers is the number itself.\n3. **Divisor Calculation**: Compute all divisors of the absolute difference \\( d \\) between \\( a \\) and \\( b \\).\n4. **Optimal \\( k \\) Calculation**: For each divisor \\( g \\) of \\( d \\), determine the smallest \\( k \\) such that \\( (b + k) \\) is divisible by \\( g \\). Compute the LCM for each valid \\( k \\) and track the smallest LCM and corresponding \\( k \\).\n5. **Output**: Print the smallest \\( k \\) that achieves the minimal LCM.\n\nThis approach efficiently narrows down the potential values of \\( k \\) by leveraging the properties of divisors and GCD, ensuring an optimal solution.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef minimal_lcm(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    if d == 0:\n        return 0\n    divisors = set()\n    for i in range(1, int(math.isqrt(d)) + 1):\n        if d % i == 0:\n            divisors.add(i)\n            divisors.add(d // i)\n    min_lcm = float('inf')\n    best_k = 0\n    for g in divisors:\n        # Compute k such that (b + k) is divisible by g\n        # Since a >= b, we assume a >= b, so d = a - b\n        if a > b:\n            s = b % g\n            k = g - s if s != 0 else 0\n        else:\n            s = a % g\n            k = g - s if s != 0 else 0\n        current_a = a + k\n        current_b = b + k\n        current_gcd = math.gcd(current_a, current_b)\n        current_lcm = (current_a * current_b) // current_gcd\n        if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n            min_lcm = current_lcm\n            best_k = k\n    return best_k\n\ndef main():\n    input_line = sys.stdin.read().strip()\n    a, b = map(int, input_line.split())\n    print(minimal_lcm(a, b))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 392,
        "completion_token_count": 847,
        "thoughts_token_count": 1025
    }
}