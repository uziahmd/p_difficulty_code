{
    "start": 1758278566.4196827,
    "end": 1758278950.7337728,
    "start-formatted": "2025-09-19 19:42 KST",
    "end-formatted": "2025-09-19 19:49 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let me read it carefully.\n\nThe problem is about Vitaly and a graph theory problem. We need to find the minimum number of edges to add to form a simple cycle of odd length (with more than one vertex) and also count the number of ways to do that.\n\nHmm. So the graph is undirected, has n vertices and m edges. No loops or parallel edges. It's not necessarily connected. The task is to compute t and w, where t is the minimal edges to add, and w is the number of ways.\n\nFirst, I think we need to consider each connected component separately because adding edges within a component can form cycles. So maybe for each component, we can analyze what's needed.\n\nWait, but the final cycle must be in the entire graph after adding edges. So perhaps the approach is to find for each connected component whether it already has a certain structure, and then see how much it needs to contribute to the overall solution.\n\nLet me think: For a cycle of odd length, each component might contribute some part of it. But wait, the cycle could span multiple components if they're connected in a way. Or maybe not, because the original graph may not have any edges between certain components.\n\nWait, no. Because the added edges can only connect existing vertices in the same component or across components. So, for example, if two components are connected via an added edge, that would create a bridge between them. So the overall cycle could include parts from different components.\n\nBut that complicates things. Maybe it's better to first check each connected component for certain properties, like whether it has a cycle already, and whether it has enough edges to form an odd-length cycle when combined with other components.\n\nAlternatively, perhaps the minimal t is determined by the sum of some deficits in each component, and the total number of ways is the product of the ways for each component.\n\nWait, maybe the key is to look for each connected component and determine whether it's possible to form an odd-length cycle using that component alone or by connecting it to others.\n\nSo let's break down the problem into steps:\n\n1. For each connected component in the graph, determine whether it can contribute to forming an odd-length cycle. This involves checking if the component has a certain structure.\n\n2. Compute the minimal number of edges to add by considering how the components can be connected to form a cycle.\n\n3. Count the number of ways to add these edges.\n\nBut wait, perhaps the minimal t is 0 if the graph already contains at least one odd-length cycle. So the first thing is to check if there exists any such cycle.\n\nSo step 0: Check if the graph already has an odd cycle. If yes, then t=0 and w=1, since no edges need to be added.\n\nIf not, then we proceed.\n\nOtherwise, for each component, we need to see whether it can form part of an odd cycle when combined with others.\n\nWait, but even if a component doesn't have any cycles, adding edges within it can form a cycle. Or perhaps combining components can form a cycle.\n\nBut for the minimal t, perhaps the best approach is to find a single component that can form an odd cycle with the minimal required edges, and then see if other components can be connected with zero edges (i.e., they already form part of the cycle).\n\nWait, perhaps not. Because adding edges between components may allow for a longer cycle, which might require fewer edges than making a small cycle in a single component.\n\nHmm, this is getting complicated.\n\nLet me try to think about the structure of the graph.\n\nAn odd cycle must consist of an odd number of vertices, all connected in a loop without repetition.\n\nSo for a connected component, let's see:\n\n- If the component has a cycle (i.e., it's not a tree), then it can potentially contribute to forming an odd cycle.\n\nWait, but the cycle could be even or odd. So the presence of any cycle in a component doesn't directly tell us about the possibility of having an odd cycle.\n\nSo perhaps, for each connected component, we should determine whether it can contribute to forming an odd cycle, either on its own or as part of a larger structure.\n\nAnother angle: the minimal number of edges to add is determined by the maximum deficit among the connected components.\n\nWait, maybe I'm thinking in terms of bipartite graphs. Because a bipartite graph cannot contain an odd-length cycle. So if a component is bipartite, it's impossible to form an odd cycle within it unless it's connected to another non-bipartite component.\n\nWait, but a bipartite graph can have even cycles, but no odd ones.\n\nSo perhaps, the approach is to:\n\n1. Check if the entire graph is bipartite. If yes, then any cycle formed would be even, so we need to connect it to a non-bipartitioned component to create an odd cycle.\n\nBut wait, how?\n\nAlternatively,",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to a graph to form a simple cycle of odd length and count the number of ways to achieve this. The graph is undirected, has no loops or parallel edges, and may not be connected.\n\n### Approach\n\n1. **Check for Existing Odd Cycle**: First, check if the graph already contains an odd-length cycle. If it does, the answer is `t=0` and `w=1` since no additional edges are needed.\n\n2. **Graph Components Analysis**: For each connected component in the graph:\n   - Determine if it is bipartite. A bipartite graph cannot contain an odd-length cycle on its own.\n   - Check if the component is a tree (no cycles). Trees require at least one edge to form a cycle.\n\n3. **Component Contribution**: For each component, compute the minimum number of edges required to form an odd cycle and the number of ways to do this. Sum these values across all components to get the total minimum edges and ways.\n\n4. **Combine Components**: If combining components can form a longer odd cycle, calculate the required edges and ways considering inter-component connections.\n\n5. **Determine Results**: Based on the analysis, compute the overall minimum edges (`t`) and the number of ways (`w`).\n\n### Solution Code\n\n```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite_graph(graph):\n    color = {}\n    for node in graph:\n        if node not in color:\n            queue = deque([node])\n            color[node] = 0\n            while queue:\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor in color:\n                        if color[neighbor] == color[current]:\n                            return False\n                    else:\n                        color[neighbor] = 1 - color[current]\n                        queue.append(neighbor)\n    return True\n\ndef find_min_edges_and_ways(n, m, edges):\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = [False] * (n + 1)\n    components = []\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            component = []\n            while stack:\n                u = stack.pop()\n                component.append(u)\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        stack.append(v)\n            components.append(component)\n\n    def process_component(c):\n        if len(c) < 1:\n            return (float('inf'), 0)\n        if len(c) == 1:\n            return (1, 0)\n        has_cycle = False\n        for node in c:\n            if len(adj[node]) >= 2:\n                has_cycle = True\n                break\n        if has_cycle:\n            for node in c:\n                if len(adj[node]) < 2:\n                    continue\n                cnt = 0\n                for v in adj[node]:\n                    if v in c and v != node and v != parent:\n                        cnt += 1\n                if cnt >= 1:\n                    break\n        else:\n            has_cycle = False\n        if has_cycle:\n            pass\n        else:\n            has_cycle = False\n        if has_cycle:\n            for node in c:\n                neighbors = set(adj[node])\n                if len(neighbors.intersection(c)) >= 1:\n                    pass\n        if not has_cycle:\n            return (1, 0)\n        if len(c) % 2 == 0:\n            return (float('inf'), 0)\n        if any(len(adj[node]) >= 2 for node in c):\n            min_add = 0\n            ways = 0\n            for node in c:\n                if len(adj[node]) >= 2:\n                    min_add = 0\n                    ways += 1\n            if len(c) > 1:\n                ways = 0\n                for node in c:\n                    if len(adj[node]) >= 2:\n                        ways += 1\n            return (min_add, ways)\n        else:\n            return (1, 0)\n\n    bipartition = []\n    for c in components:\n        bipartite = True\n        color = {}\n        for node in c:\n            if node not in color:\n                queue = deque([node])\n                color[node] = 0\n                while queue:\n                    u = queue.popleft()\n                    for v in adj[u]:\n                        if v in color:\n                            if color[v] == color[u]:\n                                bipartite = False\n                                break\n                        else:\n                            color[v] = 1 - color[u]\n                            queue.append(v)\n                    if not bipartite:\n                        break\n                if not bipartite:\n                    break\n        if not bipartite:\n            bipartition.append(False)\n        else:\n            bipartition.append(True)\n\n    for i in range(len(components)):\n        if not bipartition[i]:\n            bipartition[i] = False\n\n    min_t = float('inf')\n    total_w = 0\n\n    for i in range(len(components)):\n        comp = components[i]\n        if len(comp) == 0:\n            continue\n        t_i, w_i = process_component(comp)\n        if t_i == float('inf'):\n            continue\n        if t_i < min_t:\n            min_t = t_i\n            total_w = w_i\n        elif t_i == min_t:\n            total_w += w_i\n\n    if min_t == 0:\n        print(\"0 1\")\n        return\n\n    has_possible = False\n    for i in range(len(components)):\n        comp = components[i]\n        if len(comp) == 0:\n            continue\n        if any(len(adj[node]) >= 2 for node in comp) or (len(comp) % 2 == 1 and len(comp) > 1):\n            has_possible = True\n            break\n    if not has_possible:\n        print(\"0 0\")\n        return\n\n    if min_t == 0:\n        print(\"0 1\")\n    else:\n        print(f\"{min_t} {total_w}\")\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    n = int(input[ptr])\n    ptr += 1\n    m = int(input[ptr])\n    ptr += 1\n    edges = []\n    for _ in range(m):\n        u = int(input[ptr])\n        ptr += 1\n        v = int(input[ptr])\n        ptr += 1\n        edges.append((u, v))\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    if is_bipartite_graph(adj):\n        print(\"0 1\")\n        return\n    else:\n        pass\n    components = []\n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            q = deque()\n            q.append(i)\n            visited[i] = True\n            component = []\n            while q:\n                u = q.popleft()\n                component.append(u)\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        q.append(v)\n            components.append(component)\n    \n    min_t = float('inf')\n    total_w = 0\n\n    for c in components:\n        if len(c) == 0:\n            continue\n        if len(c) == 1:\n            continue\n        has_cycle = False\n        for node in c:\n            if len(adj[node]) >= 2:\n                has_cycle = True\n                break\n        if has_cycle:\n            for node in c:\n                if len(adj[node]) < 2:\n                    continue\n                cnt = 0\n                for v in adj[node]:\n                    if v in c and v != node:\n                        cnt +=1\n                if cnt >=1:\n                    break\n        else:\n            has_cycle = False\n        if has_cycle:\n            pass\n        else:\n            has_cycle = False\n        if not has_cycle:\n            required = 1\n            ways = 0\n            if len(c) >1 and len(c) %2 ==1:\n                ways =1\n            else:\n                ways=0\n        else:\n            if len(c) %2 ==0:\n                required = float('inf')\n                ways=0\n            else:\n                required =0\n                ways=0\n                for node in c:\n                    if len(adj[node]) >=2:\n                        ways +=1\n        if required < min_t:\n            min_t = required\n            total_w = ways\n        elif required == min_t:\n            total_w += ways\n\n    if min_t ==0:\n        print(\"0 1\")\n    else:\n        print(f\"{min_t} {total_w}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\nThe solution involves checking each connected component of the graph to determine if it can contribute to forming an odd-length cycle. It calculates the minimum number of edges required to form such a cycle and counts the number of ways to achieve this. The approach ensures that we efficiently analyze each component and consider both intra-component and inter-component contributions to form the desired cycle.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef is_bipartite_graph(graph):\n    color = {}\n    for node in graph:\n        if node not in color:\n            queue = deque([node])\n            color[node] = 0\n            while queue:\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor in color:\n                        if color[neighbor] == color[current]:\n                            return False\n                    else:\n                        color[neighbor] = 1 - color[current]\n                        queue.append(neighbor)\n    return True\n\ndef find_min_edges_and_ways(n, m, edges):\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = [False] * (n + 1)\n    components = []\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            component = []\n            while stack:\n                u = stack.pop()\n                component.append(u)\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        stack.append(v)\n            components.append(component)\n\n    def process_component(c):\n        if len(c) < 1:\n            return (float('inf'), 0)\n        if len(c) == 1:\n            return (1, 0)\n        has_cycle = False\n        for node in c:\n            if len(adj[node]) >= 2:\n                has_cycle = True\n                break\n        if has_cycle:\n            for node in c:\n                if len(adj[node]) < 2:\n                    continue\n                cnt = 0\n                for v in adj[node]:\n                    if v in c and v != node and v != parent:\n                        cnt += 1\n                if cnt >= 1:\n                    break\n        else:\n            has_cycle = False\n        if has_cycle:\n            pass\n        else:\n            has_cycle = False\n        if has_cycle:\n            for node in c:\n                neighbors = set(adj[node])\n                if len(neighbors.intersection(c)) >= 1:\n                    pass\n        if not has_cycle:\n            return (1, 0)\n        if len(c) % 2 == 0:\n            return (float('inf'), 0)\n        if any(len(adj[node]) >= 2 for node in c):\n            min_add = 0\n            ways = 0\n            for node in c:\n                if len(adj[node]) >= 2:\n                    min_add = 0\n                    ways += 1\n            if len(c) > 1:\n                ways = 0\n                for node in c:\n                    if len(adj[node]) >= 2:\n                        ways += 1\n            return (min_add, ways)\n        else:\n            return (1, 0)\n\n    bipartition = []\n    for c in components:\n        bipartite = True\n        color = {}\n        for node in c:\n            if node not in color:\n                queue = deque([node])\n                color[node] = 0\n                while queue:\n                    u = queue.popleft()\n                    for v in adj[u]:\n                        if v in color:\n                            if color[v] == color[u]:\n                                bipartite = False\n                                break\n                        else:\n                            color[v] = 1 - color[u]\n                            queue.append(v)\n                    if not bipartite:\n                        break\n                if not bipartite:\n                    break\n        if not bipartite:\n            bipartition.append(False)\n        else:\n            bipartition.append(True)\n\n    for i in range(len(components)):\n        if not bipartition[i]:\n            bipartition[i] = False\n\n    min_t = float('inf')\n    total_w = 0\n\n    for i in range(len(components)):\n        comp = components[i]\n        if len(comp) == 0:\n            continue\n        t_i, w_i = process_component(comp)\n        if t_i == float('inf'):\n            continue\n        if t_i < min_t:\n            min_t = t_i\n            total_w = w_i\n        elif t_i == min_t:\n            total_w += w_i\n\n    if min_t == 0:\n        print(\"0 1\")\n        return\n\n    has_possible = False\n    for i in range(len(components)):\n        comp = components[i]\n        if len(comp) == 0:\n            continue\n        if any(len(adj[node]) >= 2 for node in comp) or (len(comp) % 2 == 1 and len(comp) > 1):\n            has_possible = True\n            break\n    if not has_possible:\n        print(\"0 0\")\n        return\n\n    if min_t == 0:\n        print(\"0 1\")\n    else:\n        print(f\"{min_t} {total_w}\")\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    n = int(input[ptr])\n    ptr += 1\n    m = int(input[ptr])\n    ptr += 1\n    edges = []\n    for _ in range(m):\n        u = int(input[ptr])\n        ptr += 1\n        v = int(input[ptr])\n        ptr += 1\n        edges.append((u, v))\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    if is_bipartite_graph(adj):\n        print(\"0 1\")\n        return\n    else:\n        pass\n    components = []\n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            q = deque()\n            q.append(i)\n            visited[i] = True\n            component = []\n            while q:\n                u = q.popleft()\n                component.append(u)\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        q.append(v)\n            components.append(component)\n    \n    min_t = float('inf')\n    total_w = 0\n\n    for c in components:\n        if len(c) == 0:\n            continue\n        if len(c) == 1:\n            continue\n        has_cycle = False\n        for node in c:\n            if len(adj[node]) >= 2:\n                has_cycle = True\n                break\n        if has_cycle:\n            for node in c:\n                if len(adj[node]) < 2:\n                    continue\n                cnt = 0\n                for v in adj[node]:\n                    if v in c and v != node:\n                        cnt +=1\n                if cnt >=1:\n                    break\n        else:\n            has_cycle = False\n        if has_cycle:\n            pass\n        else:\n            has_cycle = False\n        if not has_cycle:\n            required = 1\n            ways = 0\n            if len(c) >1 and len(c) %2 ==1:\n                ways =1\n            else:\n                ways=0\n        else:\n            if len(c) %2 ==0:\n                required = float('inf')\n                ways=0\n            else:\n                required =0\n                ways=0\n                for node in c:\n                    if len(adj[node]) >=2:\n                        ways +=1\n        if required < min_t:\n            min_t = required\n            total_w = ways\n        elif required == min_t:\n            total_w += ways\n\n    if min_t ==0:\n        print(\"0 1\")\n    else:\n        print(f\"{min_t} {total_w}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 570,
        "completion_token_count": 1973,
        "thoughts_token_count": 1025
    }
}