{
    "start": 1758284201.766568,
    "end": 1758286637.0214717,
    "start-formatted": "2025-09-19 21:16 KST",
    "end-formatted": "2025-09-19 21:57 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let me read it carefully.\n\nThe problem is about directed graphs and something called p-reachable. Hmm, I need to find two things: the minimum number of nodes required to create a p-reachable graph, and then, among all such minimal graphs, find the maximum number of unidirectional pairs.\n\nLet's break down what a p-reachable graph is. An ordered pair (u, v) is unidirectional if u ≠ v, there's a path from u to v, and no path from v to u. So, for the graph to be p-reachable, it must have exactly p such pairs where u < v and they are reachable in both directions? Wait, wait. No, wait. Wait, the definition says that in a p-reachable graph, there are exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other. Oh right, because u and v being reachable in both directions would imply that (u, v) and (v, u) are both paths, but since u < v, we only count (u, v).\n\nWait, no. Because in the definition, it's about pairs where u < v and they are reachable from each other. So, if u can reach v and v can reach u, then (u, v) is one such pair. But if u can't reach v or vice versa, then it's not counted. So, the p refers to the number of such pairs in the graph.\n\nSo, the task is to construct a directed graph with as few nodes as possible, such that the number of these (u, v) pairs is exactly p. Then, among all such minimal graphs, find the one with the maximum number of unidirectional pairs.\n\nHmm. Okay, let's think about how to model this.\n\nFirst, I need to find the minimal number of nodes n such that the number of unordered pairs {u, v} where u < v and u can reach v (and v can reach u?) is exactly p. Or wait, no. Because the definition is about ordered pairs where u < v and they are mutually reachable. So for each such pair (u, v), u can reach v, and v can reach u. So, for each such pair, both (u, v) and (v, u) are paths, but since u < v, only (u, v) counts towards p.\n\nWait, no. The problem says \"there exists a path from u to v, and there are no paths from v to u.\" That's for unidirectional pairs. But for p-reachable, it's about the number of (u, v) pairs where u < v and u and v are reachable from each other. So, u can reach v and v can reach u, making them strongly connected. So each such pair contributes 1 to p.\n\nWait, but in that case, the number of such pairs is equal to the number of edges in the strongly connected components' condensation. Or perhaps not exactly, but let's think differently.\n\nAlternatively, for a strongly connected component (SCC), any two distinct nodes u and v in the same SCC will form a pair (u, v) where u can reach v and v can reach u. So, the number of such pairs is C(k, 2) where k is the size of the SCC. So, if the graph is composed of multiple SCCs, each of which is a single node, then the number of such pairs is zero. But if some SCCs have size >=2, then their contribution is C(k, 2).\n\nWait, but in a graph where all nodes are in a single SCC, the number of such pairs is n choose 2, where n is the total number of nodes. So, for example, if n=3, all in one SCC, then p = 3*2/2 =3.\n\nIn the first sample input, p=3, the minimal n is 3, which makes sense because all three nodes form a single SCC, giving 3 pairs.\n\nBut when p increases beyond that, say p=4, perhaps the minimal n is 5, as in the sample. So, how do we model this?\n\nI think the approach is to find the minimal n such that the sum of C(k_i, 2) over all SCCs equals p. Each SCC contributes C(k_i, 2) to p.\n\nWait, but the way the problem is phrased, each (u, v) pair with u < v and u and v reachable from each other adds 1 to p. So, the total p is the sum for each SCC of the number of such pairs within that SCC. Because if u and v are in the same SCC, then they are mutually reachable, contributing 1 to p.\n\nSo, the minimal n is the smallest n such that the sum of C(k_i, 2) across all SCCs is exactly p.\n\nWait, but how do we arrange the SCCs to get that sum. To minimize n, perhaps we should maximize the sum for each k_i as much as possible. So, to minimize the number of nodes, we should make the SCCs as large as possible.\n\nWait, but wait. For example, suppose we have two nodes in one SCC. Then, the contribution is 1 (since C(2,2)=1). If we have three nodes in another SCC, contribution is 3 (C(3,2)=3). So, to reach p=4, perhaps n=5 isn't necessary. Wait, but perhaps it's better to have more small SCCs.\n\nWait, maybe not. Let's think: for a given p, what is the minimal n.\n\nLet me consider that the sum of C(k_i, 2) is p. We need to find the minimal n, which is the sum of k_i, such that the sum of k_i*(k_i-1)/2 equals p.\n\nWe want to choose the k_i's such that their sum of C(k_i,2) is p, and the sum of k_i is minimized.\n\nThis is equivalent to finding a partition of p into terms of the form t*(t-1)/2, such that the sum of the square roots of 2p +1 (approximate) is minimized.\n\nWait, no. Wait, for each term C(k,2) = k*(k-1)/2. Let me denote s = C(k,2). So, for each s_i, which is a triangular number, we have s_1 + s_2 + ... + s_m = p. And the sum of the k_i's is sum(sqrt(2*s_i + 0.25) + 0.5), but perhaps that's complicating.\n\nAlternatively, each s_i is a triangular number. So, the problem reduces to expressing p as the sum of triangular numbers, and finding the minimal sum of k_i's where C(k_i,2) sums to p.\n\nWait, but I'm not sure. Maybe another approach is to represent p as the sum of as many 1's as possible, since C(2,2)=1, which uses 2 nodes per 1. Alternatively, using larger k_i's may give more per node.\n\nWait, for example:\n\nIf I have a group of 3 nodes, that contributes 3 to p, while using 3 nodes. So per node, it's 1 per node.\n\nIf I have groups of 2, each group contributes 1 and uses 2 nodes. So, 1 per 2 nodes.\n\nThus, using larger groups is more efficient in terms of p per node. So, to minimize the number of nodes, we should maximize the use of larger groups.\n\nSo, the strategy is to use as few groups as possible, making each group as large as possible.\n\nWait, but perhaps for certain p, it's better to mix different group sizes. For example, maybe p=4 can be achieved by either two groups of 2 (each contributing 1, total 2) using 4 nodes, or one group of 3 (contributing 3) and one group of 1 (contributing 0). Wait, but group of 1 contributes 0, so that's not helpful.\n\nWait, no. Wait, the group of 3 contributes 3, which is larger than 4. So, perhaps not.\n\nWait, let's see: for p=4, what is the minimal n.\n\nOption 1: two groups of 2 nodes each. Each contributes 1, so 2 in total. So, n=4.\n\nOption 2: one group of 3, contributing 3, which is larger than 4. So, that's not acceptable.\n\nOption 3: a group of 2 (contribution 1) and a group of 3 (contribution 3), but that's 5, which is larger than 4.\n\nWait, so for p=4, the minimal n is 4. Because 2 groups of 2 contribute 1+1=2, which is less than 4. So that's not enough. Hmm, perhaps my initial reasoning is wrong.\n\nWait, no. Wait, no. Wait, for p=4, can I have one group of 4? That contributes C(4,2)=6, which is larger than 4. So that's not helpful.\n\nAlternatively, perhaps the group sizes can be 3 and 2: 3 contributes 3, 2 contributes 1. So 3+1=4. So, the sum of group contributions is 4. Then, the total nodes is 3+2=5.\n\nBut that's worse than having two groups of 2, which gives 2 groups contributing 2, requiring 4 nodes.\n\nWait, but 2 is less than 4. So, that's not sufficient. So perhaps that's not the way.\n\nWait, maybe I'm misunderstanding the problem.\n\nWait, the sum of C(k_i, 2) must be exactly p.\n\nSo, for p=4, what is the minimal n?\n\nLet me try various group combinations.\n\nCase 1: one group of size 4. C(4,2)=6>4. Not good.\n\nCase 2: two groups: 3 and 1. C(3,2)=3, C(1,2)=0. Sum is 3<4. So no.\n\nCase 3: two groups: 3 and 2. Sum is 3+1=4. So total nodes 5.\n\nCase 4: three groups: 2, 2, 0. But group sizes can't be zero. So, 2, 2, 1: sum is 1+1+0=2<4.\n\nAlternatively, four groups: four groups of 2: but 4 groups of 2 would contribute 4, but each group requires 2 nodes, so total 8 nodes, which is more than 5.\n\nWait, but wait. How about a group of size 3 (contribution 3) and a group of size 2 (contribution 1). Total 4. So, n=5.\n\nIs there a way to get p=4 with fewer nodes?\n\nAnother possibility: group sizes 4 and 1. Wait, 4's contribution is 6, which is too big.\n\nAlternatively, group sizes 3 and 1: 3+0=3<4.\n\nWhat about group sizes 2 and 3: same as before.\n\nWait, perhaps the minimal n is 5 for p=4.\n\nBut in the sample, when p=4, the output is 5 nodes. So yes.\n\nSo, the minimal n for p=4 is 5.\n\nSo, the first part of the problem is to compute n, the minimal number of nodes such that the sum of C(k_i, 2) equals p.\n\nNow, the second part is, among all such minimal n graphs, find the maximum number of unidirectional pairs.\n\nAn unidirectional pair is an ordered pair (u, v) where u≠v, u can reach v, and v cannot reach u. So, for each such pair, it's counted once.\n\nBut in the p-reachable graph, the (u, v) pairs where u < v and u and v are reachable from each other are exactly p. So, in the minimal graph, the sum of C(k_i, 2) is p.\n\nSo, the unidirectional pairs are the number of ordered pairs (u, v) where u≠v, u can reach v, and v cannot reach u, and u < v.\n\nWait, no. Because in the definition, the unidirectional pairs are any (u, v) where u≠v, u can reach v, and v cannot reach u. So, regardless of whether u < v or not.\n\nSo, the total number of unidirectional pairs is the number of such ordered pairs.\n\nBut in the p-reachable graph, the number of pairs (u, v) with u < v and u and v reachable is p. But that doesn't directly help with the unidirectional pairs.\n\nWait, perhaps I should model the graph as a DAG of its SCCs. Each SCC is a node, and edges between them represent reachability. So, the condensation is a DAG.\n\nIn this DAG, each edge from A to B means that every node in A can reach every node in B, but not vice versa.\n\nSo, the unidirectional pairs are the pairs (u, v) where u is in a component A, v is in a component B, and there is a path from A to B in the condensation, but no path back.\n\nBut in this case, u can reach v, and v cannot reach u.\n\nSo, the total number of unidirectional pairs is the sum over all pairs of components A and B where A has an edge to B in the condensation, of |A| * |B|.\n\nBecause for each u in A and v in B, (u, v) is an unidirectional pair.\n\nSo, to maximize the number of unidirectional pairs, we need to maximize the number of such cross-component edges in the condensation.\n\nIn the minimal n graph, the condensation is a DAG, and each component is a single node.\n\nSo, our goal is to arrange the components in the DAG such that the sum of |A| * |B| over all ordered pairs (A, B) where A has an edge to B is maximized.\n\nAdditionally, the sum of C(k_i, 2) for all i must equal p.\n\nSo, the problem reduces to:\n\nFind a partition of the nodes into m components, each of size k_1, k_2, ..., k_m, such that sum_{i < j} k_i k_j = p, and the sum of k_i is minimized.\n\nWait, because sum_{i < j} k_i k_j = (sum k_i)^2 - sum k_i^2)/2. So, sum_{i<j} k_i k_j = (n^2 - sum k_i^2)/2.\n\nBut we need sum_{i<j} k_i k_j = p.\n\nSo, the condition is that (n^2 - sum(k_i^2)) / 2 = p.\n\nBut since n = sum(k_i), this can be rewritten as:\n\nn^2 - sum(k_i^2) = 2p.\n\nSo, sum(k_i^2) = n^2 - 2p.\n\nOur goal is to find the minimal n such that this equation holds, along with the sum of C(k_i, 2) = p.\n\nWait, but earlier, I thought that the sum of C(k_i, 2) is p. Because each component contributes C(k_i, 2) to the p-reachable count.\n\nYes, because for each component, the number of ordered pairs (u, v) where u < v and u and v are reachable is C(k_i, 2). So, the sum is p.\n\nSo, the sum of C(k_i, 2) = p.\n\nWhich is equivalent to sum( k_i (k_i -1) / 2 ) = p.\n\nMultiply both sides by 2: sum( k_i (k_i -1) ) = 2p.\n\nBut also, sum(k_i) = n.\n\nWe have:\n\nsum(k_i^2 - k_i) = 2p.\n\nSo, sum(k_i^2) - sum(k_i) = 2p.\n\nBut sum(k_i) = n, so sum(k_i^2) = n + 2p.\n\nAnd from the earlier equation, sum(k_i^2) = n^2 - 2p.\n\nSo, substituting:\n\nn + 2p = n^2 - 2p.\n\nRearranging:\n\nn^2 - n -4p =0.\n\nSolving for n:\n\nn = [1 + sqrt(1 + 16p)] / 2.\n\nWait, wait. Let me check:\n\nFrom sum(k_i^2) = n^2 - 2p (from the condensation DAG) and sum(k_i^2) = n + 2p (from the sum of C(k_i, 2)).\n\nSo,\n\nn^2 - 2p = n + 2p.\n\nBringing all terms to left:\n\nn^2 - n -4p = 0.\n\nSo, quadratic equation in n: n^2 -n -4p =0.\n\nThe solution is n = [1 + sqrt(1 +16p)] / 2.\n\nBut wait, this is under the assumption that the components form a linear chain in the condensation DAG. Because, in that case, the sum of k_i^2 is n^2 - 2p.\n\nWait, perhaps I'm getting ahead of myself.\n\nWait, perhaps the key insight is that the minimal n is floor((1 + sqrt(1 + 8p))/2) + something, but perhaps not.\n\nWait, let's take p=3.\n\nn^2 -n -12=0.\n\nSolution: [1 + sqrt(49)]/2 = (1+7)/2=4. So n=4. But in the sample, the minimal n is 3.\n\nSo, that suggests that my approach is incorrect.\n\nWait, that's a problem.\n\nSo, perhaps my initial assumption that sum(k_i^2) = n^2 - 2p is wrong.\n\nWait, perhaps I made a mistake in the earlier steps.\n\nLet me rederive.\n\nWe have two equations:\n\n1. sum(C(k_i, 2)) = p → sum(k_i (k_i -1)/2 ) = p → sum(k_i^2 -k_i) = 2p.\n\n2. sum(k_i^2) = n^2 - 2p (from the condensation DAG's edges leading to maximum unidirectional pairs).\n\nSo, from equation 1: sum(k_i^2) - sum(k_i) = 2p.\n\nBut sum(k_i) = n, so equation becomes sum(k_i^2) = n + 2p.\n\nEquation 2 says sum(k_i^2) = n^2 - 2p.\n\nSo, equate them:\n\nn + 2p = n^2 - 2p → n^2 -n -4p =0.\n\nSo, the solution is n=(1 + sqrt(1 +16p))/2.\n\nBut for p=3:\n\nn=(1 + sqrt(49))/2 = (8)/2=4.\n\nBut the sample shows that for p=3, the minimal n is 3.\n\nSo, this suggests that my model is incorrect.\n\nHmm, so perhaps my approach is wrong.\n\nAlternative approach: perhaps the minimal n is determined by the fact that the graph is a DAG of SCCs, and the number of pairs (u, v) in the same component is p.\n\nBut perhaps the condensation DAG isn't a straight line. Maybe it's a tree or something else.\n\nWait, but to maximize the number of unidirectional pairs, perhaps the condensation DAG should be a linear chain. Because that would maximize the number of edges between components, thus increasing the product of their sizes.\n\nWait, perhaps the minimal n is the smallest n such that there exists a partition of n into m integers k_1, k_2, ..., k_m, where the sum of C(k_i, 2) is p, and the sum of k_i is minimized.\n\nBut then, how to find such a partition.\n\nAlternatively, perhaps the minimal n is the minimal integer such that the maximum triangular number less than or equal to p is achieved by grouping as many nodes as possible.\n\nWait, perhaps for p=3, the minimal n is 3, with one group of 3 nodes. Because C(3,2)=3=p.\n\nFor p=4, the minimal n is 5: one group of 3 and one of 2, which contributes 3+1=4.\n\nWait, but 3+1=4, but 3+1=4? Wait, 3+1=4 in terms of C(k_i, 2)? No, 3+1=4 is 3+1=4. Yes.\n\nSo, for p=4, n=5.\n\nSo, the minimal n seems to be the smallest n where the sum of C(k_i, 2) is at least p, but arranged in a way that minimizes n.\n\nWait, but for p=4, is there a way to have n=4?\n\nSuppose we have two groups: one of 3 and one of 1. C(3,2)=3, C(1,2)=0. Sum is 3<4.\n\nNot enough.\n\nOr, two groups of 2 and 2: each contributes 1, sum is 2<4.\n\nNo.\n\nThree groups: 2,2,1: sum is 1+1+0=2<4.\n\nNo.\n\nSo, no, n=5 is needed.\n\nSo, the minimal n is 5.\n\nSo, the previous approach where n=(1+sqrt(1+16p))/2 was wrong.\n\nThus, perhaps the correct approach is to find the minimal n such that the sum of C(k_i, 2) >= p, and then adjust.\n\nWait, but how to find the minimal n.\n\nWait, perhaps the minimal n is the minimal integer for which the maximum possible sum of C(k_i, 2) is at least p.\n\nWait, the maximum sum for a given n is achieved when as many nodes as possible are grouped into as few components as possible.\n\nWait, for example, for n=3: maximum sum is 3 (all in one group).\n\nFor n=4: maximum sum is 6 (one group of 4, C(4,2)=6).\n\nWait, but for n=4, the sum can be as high as 6, but if p is 4, that's more than p=4.\n\nSo, perhaps the minimal n is the minimal n where the maximal sum of C(k_i, 2) is >=p.\n\nWait, no, because in some cases, it's possible to have a lower n with a sum exactly p.\n\nSo, perhaps the minimal n is the minimal n such that there exists a partition of n into m parts, where the sum of C(k_i, 2) is p.\n\nSo, perhaps to find n, we can start from the minimal possible and see if a partition exists.\n\nBut for programming purposes, this could be time-consuming.\n\nAlternatively, perhaps there's a mathematical way to find n.\n\nWait, perhaps the minimal n is the smallest n for which the sum of C(k_i, 2) can be arranged to be exactly p.\n\nBut I'm stuck on how to model this.\n\nWait, perhaps I can model the problem as follows:\n\nWe need to find the minimal n such that there exists a set of integers k_1, k_2, ..., k_m where sum(k_i) = n and sum(k_i (k_i -1)/2) = p.\n\nWe need to find the minimal n for given p.\n\nThen, for the second part, among all such partitions, find the one that maximizes the number of unidirectional pairs, which is the sum over all pairs (A,B) in the condensation DAG where A comes before B (i.e., A is reachable from B) of |A| * |B|.\n\nWhich is equivalent to (sum_{i < j} a_i a_j) where a_i is the size of each component, and the components are ordered in the condensation DAG.\n\nWait, but in the condensation DAG, the edges are such that if component A is reachable from component B, then there's an edge from B to A in the DAG.\n\nWait, no, in the condensation DAG, edges go from earlier components to later ones. So, for the maximum number of unidirectional pairs, the condensation DAG should be a linear chain, so that all possible edges are present, maximizing the sum of a_i * a_j for i < j.\n\nWait, because in a linear chain, all components are ordered, and each component has edges to all subsequent components.\n\nSo, the number of unidirectional pairs is the sum of a_i * a_j for i < j.\n\nWhich is (sum a_i)^2 - sum a_i^2) / 2.\n\nSince sum a_i is n, and sum a_i^2 is fixed as n + 2p (from earlier), then the number of unidirectional pairs is (n^2 - (n + 2p)) / 2 = (n^2 -n -2p)/2.\n\nWait, but earlier I had sum(k_i^2) = n^2 - 2p, but that came from the condition in the condensation DAG.\n\nWait, perhaps I'm mixing up equations.\n\nAlternatively, perhaps the maximum number of unidirectional pairs is achieved when the condensation DAG is a linear chain, which allows the maximum possible product terms.\n\nSo, the maximum is (sum a_i)^2 - sum a_i^2 all divided by 2.\n\nWhich is (n² - sum a_i²)/2.\n\nSo, if I can express sum a_i² in terms of n and p, then I can compute the maximum.\n\nBut from earlier, I have sum a_i² = n + 2p.\n\nSo, substituting:\n\nMax unidirectional pairs = (n² - (n + 2p)) / 2 = (n² -n -2p)/2.\n\nSo, the maximum number is (n² -n -2p)/2.\n\nSo, for the sample input where p=3:\n\nn=3, sum a_i² = 3 + 6 =9. So, 9=3². Then, max unidirectional pairs is (9-3-6)/2=0/2=0. Which matches the sample.\n\nFor p=4:\n\nn=5, sum a_i²=5+8=13.\n\nMax unidirectional pairs: (25 -5 -8)/2=12/2=6. Which matches the sample.\n\nSo, this seems to hold.\n\nSo, the steps are:\n\n1. Find the minimal n such that there exists a partition of n into k_1, k_2, ..., k_m where sum(k_i choose 2) = p.\n\n2. Compute the maximum number of unidirectional pairs as (n² -n -2p)/2.\n\nSo, the problem reduces to finding the minimal n for given p.\n\nSo, now the main challenge is to compute the minimal n.\n\nHow?\n\nWe can model the problem as finding the minimal n where the sum of C(k_i, 2) is p.\n\nThis is similar to finding the minimal number of coins, but with triangular numbers.\n\nEach C(k_i,2) is a triangular number, and we want to sum to p.\n\nBut how?\n\nWe can think of it as trying to find the minimal n, which is the sum of k_i's, where the sum of C(k_i, 2) is p.\n\nEach k_i is at least 1, except perhaps for one component which can be zero? No, because each component must have at least one node.\n\nWait, each component must have at least one node. So, each k_i ≥1.\n\nSo, the problem is to find a set of integers k_1, k_2, ..., k_m, all ≥1, such that sum_{i} C(k_i, 2) = p.\n\nAnd the sum of k_i is minimal.\n\nSo, the minimal sum is achieved when the k_i are as large as possible.\n\nBecause for a given sum of C(k_i, 2), larger k_i's give smaller n.\n\nSo, the strategy is to use as few components as possible, making each component as large as possible.\n\nSo, the approach is to find the largest possible k such that C(k, 2) ≤ p.\n\nOnce found, subtract C(k,2) from p and repeat.\n\nWait, but perhaps that's not optimal.\n\nWait, perhaps the minimal n is achieved when the components are as large as possible.\n\nSo, for example, for p=3: one component of 3, sum is 3, n=3.\n\nFor p=4: one component of 3 (contribution 3), then a component of 2 (contribution 1). So, sum is 4, n=5.\n\nWait, but 3+1=4, but that's not allowed because C(1,2)=0, but that doesn't help.\n\nSo, perhaps the way to proceed is to greedily take the largest possible k_i's.\n\nBut I'm not sure.\n\nAlternatively, perhaps the minimal n is the smallest integer such that the sum of C(k_i, 2) can be p.\n\nWait, but how?\n\nWait, perhaps it's easier to model this as solving for n and m.\n\nWait, another approach: the sum of C(k_i, 2) can be written as sum(k_i^2 -k_i)/2.\n\nSo, sum(k_i^2 -k_i) = 2p.\n\nBut sum(k_i) =n, so sum(k_i^2) = 2p + n.\n\nAlso, sum(k_i^2) = (sum k_i)^2 - 2 sum_{i<j} k_i k_j.\n\nBut sum(k_i^2) is known as 2p +n, and sum k_i is n.\n\nSo, sum(k_i^2) = n^2 - 2 sum_{i<j} k_i k_j = 2p +n.\n\nThus,\n\nsum_{i<j} k_i k_j = (n^2 - (2p +n )) / 2.\n\nBut wait, I'm not sure if this helps.\n\nAlternatively, perhaps the minimal n is the smallest n where the maximum possible sum of C(k_i, 2) is at least p.\n\nWait, the maximum sum is achieved when all nodes are in a single component, giving C(n,2).\n\nSo, for n to be minimal, we need C(n,2) ≥p.\n\nSo, n is the smallest integer such that C(n,2) ≥p.\n\nBut wait, for p=4, C(3,2)=3 <4, so n must be 4, but C(4,2)=6≥4.\n\nBut earlier, for p=4, the minimal n is 5, not 4. So, that approach is wrong.\n\nHmm, perhaps the issue is that when n=4, the maximum sum is 6, which is larger than p=4. But the sum can be adjusted by splitting into components.\n\nSo, the minimal n is not necessarily the minimal n where C(n,2)>=p, because you can split into components to get the exact p.\n\nSo, perhaps the correct approach is to find the minimal n where the sum of C(k_i, 2) can be p.\n\nSo, perhaps the minimal n is the smallest integer such that the sum of C(k_i, 2) can reach p, possibly by splitting into multiple components.\n\nBut how to model this.\n\nAlternative idea: the minimal n is such that the minimal possible sum of C(k_i, 2) is less than or equal to p.\n\nBut the minimal sum occurs when all k_i are 2, except one, giving a sum of (m-1)*1 + 0.\n\nWait, no. For example, for n=4, the minimal sum is 2 (two groups of 2).\n\nWait, but that's not correct. For n=4, the minimal sum is 2, but for p=4, we need sum=4.\n\nSo, perhaps the minimal n is determined by the following:\n\nWe can write p as a sum of triangular numbers, and find the minimal n.\n\nBut this seems computationally intensive.\n\nPerhaps another approach is to model this as a dynamic programming problem.\n\nBut for programming competition purposes, perhaps we can find a formula.\n\nWait, perhaps the minimal n is the minimal integer n where the maximum sum of C(k_i, 2) is ≥p, and the minimal n can be found via the equation derived earlier.\n\nWait, but earlier, the equation led to n^2 -n -4p=0, which for p=3 gives n=4, but the correct n is 3.\n\nSo, perhaps that approach is incorrect.\n\nAnother idea: considering that each component contributes C(k_i,2) = (k_i^2 -k_i)/2, and summing over all components gives p.\n\nWe can write the equation as sum(k_i^2) - sum(k_i) = 2p.\n\nBut sum(k_i) =n, so sum(k_i^2) =n + 2p.\n\nAlso, since sum(k_i^2) is at least (sum k_i)^2 / m, by Cauchy-Schwarz, where m is the number of components.\n\nBut I'm not sure.\n\nAlternatively, perhaps the minimal n is the minimal n such that the maximum possible sum of C(k_i, 2) is ≥p, and that sum can be adjusted to p by splitting components.\n\nBut again, not sure.\n\nWait, perhaps for each p, the minimal n is the smallest integer for which the sum of C(k_i, 2) can be p, and this can be found by binary search.\n\nBut for programming purposes, perhaps it's better to find a formula.\n\nAlternatively, perhaps the minimal n is the smallest n where the maximum possible sum of C(k_i, 2) (which is C(n,2)) is ≥ p, and that n is the minimal such that C(n,2) ≥p.\n\nBut as before, for p=4, C(3,2)=3 <4, so n=4, but C(4,2)=6≥4. So, can we split n=4 into components that sum to 4.\n\nYes: split into 3 and 1: 3+0=3 <4. No.\n\nOr 2 and 2: sum is 2 <4. No.\n\nOr 4: C(4,2)=6>4.\n\nSo, perhaps we need to split into more components.\n\nLike 3 and 2: sum is 3+1=4. So, n=5.\n\nSo, for p=4, n=5.\n\nHmm.\n\nWait, perhaps the minimal n is the minimal n where the sum of C(k_i,2) can be p, and this sum is achieved by grouping the nodes into components as large as possible.\n\nSo, the algorithm could be:\n\n1. Start with the largest possible component, subtract its C(k,2) from p.\n\n2. Repeat until p is zero.\n\nBut the question is, what is the largest possible component that can be used.\n\nWait, for example, for p=4.\n\nTake the largest possible k where C(k,2) ≤ current p.\n\nC(3,2)=3 ≤4. Subtract 3, remaining p=1.\n\nNow, take largest possible k where C(k,2) ≤1: k=2, C(2,2)=1.\n\nSubtract 1, p=0.\n\nTotal components:3 and 2, sum n=5.\n\nWhich is correct.\n\nAnother example: p=5.\n\nLargest k where C(k,2) ≤5 is 3 (3).\n\nSubtract 3, p=2.\n\nLargest k where C(k,2) ≤2: 2.\n\nSubtract 1, p=1.\n\nLargest k where C(k,2) ≤1:2.\n\nSubtract 1, p=0.\n\nComponents:3,2,2. Sum n=7.\n\nBut is there a way to get a smaller n?\n\nAlternative: 4 and 1.\n\nC(4,2)=6>5. So no.\n\nOr 3 and 2: sum 3+1=4<5.\n\nNo.\n\nWait, but wait, perhaps another approach: 3 and 3.\n\nC(3,2)=3, sum 6>5. No.\n\nAlternatively, 3 and 2 and 1: sum 3+1+0=4<5. No.\n\nSo, seems like n=7 is required.\n\nBut let's see: what is the equation n² -n -4p =0.\n\np=5: n² -n -20=0.\n\nDiscriminant:1 +80=81 → sqrt(81)=9. So, n=(1+9)/2=5.\n\nBut for p=5, n=5 is not possible.\n\nBecause C(5,2)=10>5.\n\nSo, the earlier approach of n=(1+sqrt(1+16p))/2 is invalid.\n\nThus, perhaps the minimal n can't be found via that formula.\n\nSo, perhaps the correct approach is to greedily take the largest possible k_i's until p is exhausted.\n\nSo, the algorithm is:\n\nInitialize n=0, p_remaining = p.\n\nWhile p_remaining >0:\n\n   find the largest k where C(k,2) ≤ p_remaining.\n\n   subtract C(k,2) from p_remaining.\n\n   add k to the list of components.\n\n   add k to n.\n\nFinally, return n.\n\nSo, for p=3:\n\nLargest k is 3, C(3,2)=3. Subtract, p=0. n=3.\n\nFor p=4:\n\nLargest k is 3, subtract 3. p=1.\n\nLargest k is 2, subtract 1. p=0. n=3+2=5.\n\nFor p=5:\n\nLargest k=3, subtract 3. p=2.\n\n",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and, among all such graphs with the minimum number of nodes, find the maximum number of unidirectional pairs.\n\n### Approach\n1. **Understanding p-reachable Graph**: A directed graph is p-reachable if it contains exactly `p` ordered pairs `(u, v)` such that `u < v` and both nodes are reachable from each other. This implies that the graph can be decomposed into strongly connected components (SCCs), where each SCC contributes to the count of such pairs.\n\n2. **Finding Minimum Nodes**: The goal is to find the smallest number of nodes `n` such that the sum of combinations of component sizes taken two at a time equals `p`. This is achieved by greedily selecting the largest possible component size at each step until the required `p` is reached.\n\n3. **Maximizing Unidirectional Pairs**: To maximize the number of unidirectional pairs, the graph should be structured as a linear chain of SCCs in its condensation. This structure maximizes the product of component sizes, leading to the maximum number of unidirectional pairs.\n\n### Solution Code\n```python\nimport math\n\ndef minimal_n(p):\n    if p == 0:\n        return 0\n    n = 0\n    remaining_p = p\n    while remaining_p > 0:\n        max_k = 0\n        for k in range(1, int(math.isqrt(remaining_p)) + 1):\n            current = k * (k - 1) // 2\n            if current <= remaining_p:\n                max_k = k\n            else:\n                break\n        if max_k == 0:\n            break\n        remaining_p -= max_k * (max_k - 1) // 2\n        n += max_k\n    return n\n\ndef max_unidirectional(n, p):\n    return (n * n - n - 2 * p) // 2\n\np = int(input())\nif p == 0:\n    print(\"0 0\")\nelse:\n    n = minimal_n(p)\n    print(f\"{n} {max_unidirectional(n, p)}\")\n```\n\n### Explanation\n1. **Reading Input**: The input value `p` is read and checked for the special case where `p` is zero.\n\n2. **Calculating Minimum Nodes**: The function `minimal_n` calculates the minimum number of nodes required by iteratively selecting the largest possible component size until the sum of combinations equals `p`.\n\n3. **Calculating Maximum Unidirectional Pairs**: The function `max_unidirectional` computes the maximum number of unidirectional pairs using the formula derived from the structure of the condensation DAG, which is a linear chain of SCCs.\n\nThis approach efficiently determines the minimum number of nodes and the maximum number of unidirectional pairs for any given `p`, ensuring optimal performance even for large values.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef minimal_n(p):\n    if p == 0:\n        return 0\n    n = 0\n    remaining_p = p\n    while remaining_p > 0:\n        max_k = 0\n        for k in range(1, int(math.isqrt(remaining_p)) + 1):\n            current = k * (k - 1) // 2\n            if current <= remaining_p:\n                max_k = k\n            else:\n                break\n        if max_k == 0:\n            break\n        remaining_p -= max_k * (max_k - 1) // 2\n        n += max_k\n    return n\n\ndef max_unidirectional(n, p):\n    return (n * n - n - 2 * p) // 2\n\np = int(input())\nif p == 0:\n    print(\"0 0\")\nelse:\n    n = minimal_n(p)\n    print(f\"{n} {max_unidirectional(n, p)}\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 476,
        "completion_token_count": 616,
        "thoughts_token_count": 8193
    }
}