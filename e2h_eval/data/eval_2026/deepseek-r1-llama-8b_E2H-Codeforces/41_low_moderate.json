{
    "start": 1758278106.189655,
    "end": 1758278270.0121858,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, so I have this problem to solve, and I need to figure out the best approach. Let's read the problem carefully.\n\nWe have n spots on a street where we can build houses. Each spot can have a height between 0 and h. The goal is to maximize the profit, which is the sum of squares of each house's height. \n\nBut there are m restrictions. Each restriction says that in a certain range [l_i, r_i], the tallest house must be at most x_i. So for each such restriction, the maximum height in that interval can't exceed x_i.\n\nHmm, the challenge is to assign heights to each spot such that all restrictions are satisfied and the profit is maximized.\n\nLet me think about how to model this. Since n and m are up to 50, maybe a dynamic programming approach is feasible. Because the constraints are small, perhaps a bitmask or some state representation could work.\n\nWait, but with n=50, the state space might get too big if we try to represent it as a DP with position and some other variables. Alternatively, maybe we can model the problem by considering the intervals and their constraints, and find for each spot what's the maximum possible height it can take without violating any constraints.\n\nAnother thought: each restriction applies to a range, and each such range imposes a maximum on the maximum within it. So for each spot, its maximum possible height is the minimum of h and all the x_i that apply to it. Wait, no. Because a spot can be covered by multiple ranges. For example, if a spot is included in two restrictions, then the height must be <= the minimum of both x_i's for those restrictions. So for each spot i, the maximum allowed height is the minimum of all x_j where j covers i, or h if it's not covered by any restriction.\n\nYes, that makes sense. Because if a spot is part of multiple restrictions, the most restrictive one (smallest x_i) will limit its maximum height. If it's not covered by any restriction, then it can be up to h.\n\nSo the first step is to compute, for each spot i, the maximum height it can have. This is min(h, the minimal x_i from all restrictions that include i).\n\nWait, but wait. Suppose a spot is in two overlapping restrictions. Like, for spot 3, one restriction is l=2, r=4, x=5, and another is l=3, r=3, x=4. Then for spot 3, the maximum height is the minimum of 5 and 4, which is 4. Because the second restriction requires that in 3-3, the max is at most 4, which is stricter than the first.\n\nSo for each spot, the maximum allowed height is the minimum of h and all x_i's from the restrictions that cover it. So first, I can precompute for each spot the maximum allowed height based on the restrictions.\n\nOnce I know the maximum allowed height for each spot, the problem reduces to choosing for each spot a height between 0 and its maximum, such that the sum of squares is maximized. But wait, because the restrictions are about the maximum in a range, not individual spots. So even if I set each spot's height to its maximum, I might violate some restriction if the maximum in that range exceeds x_i.\n\nWait, no. Because when I computed the maximum allowed height for each spot, that's already considering all applicable x_i's. So if for a spot, the maximum allowed is s_i = min(h, min of x's covering it), then setting each spot to s_i will satisfy all restrictions. Because for any restriction [l, r], the maximum in that range is the maximum of s_l, s_{l+1}, ..., s_r. Which is <= the minimal x_i in that range, because each s_i is <= that x_i.\n\nWait, no. Because the minimal x_i in a restriction's range is the maximum allowed for that spot in that restriction. So the maximum in the range can't exceed the minimal x_i of that restriction.\n\nWait, no. Let me think again.\n\nSuppose a restriction is [l, r] with x_i. For each spot in [l, r], their maximum allowed is at most x_i. So the maximum height in the range is the maximum of s_l, s_{l+1}, ..., s_r, which is <= x_i for that restriction.\n\nBecause for each spot in [l, r], s_i <= x_i, because x_i is part of the min calculation for s_i only if the spot is covered by this restriction. So for that particular restriction, the maximum of s's in [l, r] is <= x_i, which satisfies the restriction.\n\nTherefore, if we set each spot to its maximum allowed s_i, then all restrictions are satisfied.\n\nSo the problem simplifies to: assign each spot i a height a_i,",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction limits the maximum height in a specific range.\n\n### Approach\n1. **Identify Maximum Allowed Heights**: For each spot, determine the maximum height it can have based on the restrictions. This is done by taking the minimum of the maximum allowed height `h` and the smallest value of `x_i` from all applicable restrictions.\n2. **Calculate Profit**: Once we have the maximum allowed heights for each spot, the problem reduces to maximizing the sum of squares of these heights. Since each spot's height is already constrained by the most restrictive restriction, setting each spot to its maximum allowed height will satisfy all restrictions and yield the highest possible profit.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l-1, r-1, x))  # converting to 0-based\n\nmax_heights = [h] * n\nfor l, r, x in restrictions:\n    for i in range(l, r+1):\n        if max_heights[i] > x:\n            max_heights[i] = x\n\nprofit = sum(a*a for a in max_heights)\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The input consists of the number of spots `n`, the maximum height `h`, and the number of restrictions `m`. Each restriction specifies a range `[l, r]` and a maximum height `x`.\n2. **Adjusting Heights Based on Restrictions**: For each spot, adjust its maximum allowed height to be the minimum of `h` and the smallest `x` value from all applicable restrictions. This ensures that all restrictions are satisfied.\n3. **Calculating Profit**: Compute the sum of the squares of these adjusted heights to get the maximum profit.\n\nThis approach efficiently ensures that all restrictions are met while maximizing the profit from the given constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l-1, r-1, x))  # converting to 0-based\n\nmax_heights = [h] * n\nfor l, r, x in restrictions:\n    for i in range(l, r+1):\n        if max_heights[i] > x:\n            max_heights[i] = x\n\nprofit = sum(a*a for a in max_heights)\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 812,
        "completion_token_count": 445,
        "thoughts_token_count": 1025
    }
}