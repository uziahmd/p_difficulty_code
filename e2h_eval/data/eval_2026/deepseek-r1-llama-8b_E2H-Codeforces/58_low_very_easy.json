{
    "start": 1758278558.491215,
    "end": 1758278853.8243284,
    "start-formatted": "2025-09-19 19:42 KST",
    "end-formatted": "2025-09-19 19:47 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let me read it carefully.\n\nThe problem is about Vitaly and a graph theory problem. We need to find the minimum number of edges to add to form a simple cycle of odd length, with more than one vertex. And also count the number of ways to do this.\n\nHmm. So the graph is undirected, no loops or parallel edges. It's not necessarily connected.\n\nFirst, I think I should understand what's required. We need to find the smallest t such that adding t edges can form an odd-length cycle (at least 3 vertices). Also, w is the number of ways to achieve this.\n\nWait, but how? Because adding edges could create multiple possible cycles. But the key is that the resulting cycle must be simple (no repeated vertices) and of odd length.\n\nSo, the approach is:\n\n1. For each connected component in the graph, determine if it already has a cycle. If it's a tree (no cycles), then we need to find ways to add edges to form a cycle.\n\nBut wait, since the problem allows adding edges across different components as well, perhaps even combining components into a single cycle.\n\nWait, but adding edges between two components might not help unless the combined structure can form an odd cycle.\n\nAlternatively, maybe the best way is to consider all possible ways that adding edges can create an odd cycle.\n\nBut perhaps the optimal way is to look for the minimal steps needed.\n\nLet me think about the steps:\n\n- For each connected component, check if it's possible to form an odd cycle by adding edges within it.\n\nBecause adding edges across components might require more steps.\n\nFor example, suppose a component is a tree with n nodes. To form a cycle, you need to add at least one edge. But whether that edge creates an odd cycle depends on the number of nodes.\n\nWait, no. Wait, any tree with n nodes will have exactly n-1 edges. Adding one edge creates a single cycle, which is a tree plus one edge.\n\nThe cycle's length is equal to the number of edges in the cycle, which is the number of nodes in the cycle minus 1.\n\nWait, but for a tree plus one edge, the cycle formed has a certain length. How can we know if it's odd?\n\nHmm, perhaps for each connected component, if it's possible to form an odd cycle within it, that requires adding a certain number of edges, and then among all components, we find the minimal t.\n\nWait, but it's possible that adding edges between components can create an odd cycle with fewer total added edges.\n\nNo, because connecting two components would require at least one edge, but that may not form a cycle on its own. For example, connecting two trees: after adding an edge between them, they form a larger component, but unless that forms a cycle.\n\nWait, adding an edge between two trees doesn't form a cycle unless the new edge connects two nodes that are already in a cycle. Wait, no. Suppose two trees: A and B. Adding an edge between a node from A and a node from B doesn't form a cycle because there's no path connecting those two nodes before. So the new edge is just a bridge.\n\nSo, to form a cycle, you need at least one component that can form a cycle when edges are added.\n\nSo, perhaps the minimal t can be found by considering each connected component separately and seeing what's the minimal edges needed to form an odd cycle within that component, and then take the minimal across all components. Additionally, perhaps combining two components could lead to a lower t.\n\nWait, but how? Because adding one edge to connect two components won't form a cycle. You'd need more edges.\n\nFor example, suppose you have two components, each of which can form a cycle with 2 edges added. Then, connecting them with one edge gives a structure that may not form a cycle. Unless the two components are each acyclic (trees) and the new edge forms a bridge, but that wouldn't make a cycle.\n\nSo perhaps the minimal t is determined by the individual components.\n\nSo, the plan is:\n\n1. For each connected component, compute the minimal number of edges needed to form an odd cycle in that component.\n\n2. The overall minimal t is the minimal among all these values.\n\nAdditionally, the number of ways to form such a cycle is the sum of the ways for each component, but only for those components that contribute to the minimal t.\n\nWait, no. Because adding edges to one component doesn't affect others, except that if the component contributes to the minimal t, then each way within that component is considered a separate way.\n\nBut if multiple components can contribute to the minimal t, then the total number of ways is the product of the number of ways for each component, right?\n\nWait, no. Because the problem requires forming a single cycle. So, you can't have multiple cycles; you have to choose one component to add edges to, and thus the number of ways is",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to a graph to form a simple cycle of odd length and count the number of ways to achieve this. The graph is undirected, has no loops or parallel edges, and may not be connected.\n\n### Approach\n1. **Identify Connected Components**: The graph can be decomposed into its connected components. Each component will be analyzed separately.\n2. **Check for Cycles in Components**: For each component, determine if it can form an odd-length cycle by adding the minimum number of edges.\n3. **Determine Minimum Edges and Ways**:\n   - If a component already contains an odd-length cycle, no edges need to be added.\n   - If a component is a tree (no cycles), calculate the minimum edges required to form an odd-length cycle within that component.\n   - For each component, compute the number of ways to form such a cycle.\n4. **Combine Results**: The overall minimum edges required is the smallest value across all components. The total number of ways is the product of the ways from the components contributing to this minimum.\n\n### Solution Code\n```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        edges[a].append(b)\n        edges[b].append(a)\n    \n    visited = [False] * (n+1)\n    components = []\n    for v in range(1, n+1):\n        if not visited[v]:\n            q = deque()\n            q.append(v)\n            visited[v] = True\n            comp = []\n            while q:\n                u = q.popleft()\n                comp.append(u)\n                for nei in edges[u]:\n                    if not visited[nei]:\n                        visited[nei] = True\n                        q.append(nei)\n            components.append(comp)\n    \n    res_t = float('inf')\n    res_w = 0\n\n    for comp in components:\n        k = len(comp)\n        if k < 2:\n            continue\n        if k == 2:\n            if 1 in comp:\n                pass\n            else:\n                continue\n        has_cycle = False\n        for node in comp:\n            if len(edges[node]) >= 2 and (edges[node][0] != node and edges[node][1] != node):\n                has_cycle = True\n                break\n        if has_cycle:\n            t_comp = 0\n            w_comp = 1\n        else:\n            if k == 1:\n                continue\n            if k == 0:\n                continue\n            if k == 1:\n                continue\n            if k == 0:\n                continue\n            if k == 1:\n                continue\n            if k == 2:\n                if any(len(edges[node]) == 1 for node in comp):\n                    t_comp = 1\n                    ways = 0\n                    for node in comp:\n                        if len(edges[node]) == 1:\n                            ways += 1\n                    if ways > 0:\n                        if t_comp < res_t or (t_comp == res_t and ways > res_w):\n                            res_t = t_comp\n                            res_w = ways\n                else:\n                    t_comp = 0\n                    ways = 1\n                    if t_comp < res_t or (t_comp == res_t and ways > res_w):\n                        res_t = t_comp\n                        res_w = ways\n                continue\n            else:\n                degrees = defaultdict(int)\n                for node in comp:\n                    degrees[len(edges[node])] += 1\n                if degrees.get(2, 0) > 0:\n                    t_comp = 0\n                    ways = 1\n                else:\n                    t_comp = 1\n                    ways = 0\n                    for node in comp:\n                        if len(edges[node]) == 1:\n                            ways += 1\n                    if degrees.get(1, 0) == 0:\n                        if any(len(edges[node]) >= 2 for node in comp):\n                            t_comp = 1\n                            ways = sum(1 for node in comp if len(edges[node]) == 1)\n                        else:\n                            t_comp = 1\n                            ways = 0\n                if t_comp < res_t or (t_comp == res_t and ways > res_w):\n                    res_t = t_comp\n                    res_w = ways\n    print(f\"{res_t} {res_w}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of vertices and edges.\n2. **Building the Graph**: The graph is represented using an adjacency list.\n3. **Finding Connected Components**: Using BFS, each connected component is identified.\n4. **Checking for Cycles**: For each component, we check if it can form an odd-length cycle by examining the degrees of nodes and existing edges.\n5. **Calculating Minimum Edges and Ways**: For each component, the minimum edges required to form an odd cycle and the number of ways to do so are computed.\n6. **Combining Results**: The results from each component are combined to find the overall minimum edges and ways.\n\nThis approach ensures that we efficiently determine the solution by considering each component individually and combining their results to find the optimal solution.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        edges[a].append(b)\n        edges[b].append(a)\n    \n    visited = [False] * (n+1)\n    components = []\n    for v in range(1, n+1):\n        if not visited[v]:\n            q = deque()\n            q.append(v)\n            visited[v] = True\n            comp = []\n            while q:\n                u = q.popleft()\n                comp.append(u)\n                for nei in edges[u]:\n                    if not visited[nei]:\n                        visited[nei] = True\n                        q.append(nei)\n            components.append(comp)\n    \n    res_t = float('inf')\n    res_w = 0\n\n    for comp in components:\n        k = len(comp)\n        if k < 2:\n            continue\n        if k == 2:\n            if 1 in comp:\n                pass\n            else:\n                continue\n        has_cycle = False\n        for node in comp:\n            if len(edges[node]) >= 2 and (edges[node][0] != node and edges[node][1] != node):\n                has_cycle = True\n                break\n        if has_cycle:\n            t_comp = 0\n            w_comp = 1\n        else:\n            if k == 1:\n                continue\n            if k == 0:\n                continue\n            if k == 1:\n                continue\n            if k == 0:\n                continue\n            if k == 1:\n                continue\n            if k == 2:\n                if any(len(edges[node]) == 1 for node in comp):\n                    t_comp = 1\n                    ways = 0\n                    for node in comp:\n                        if len(edges[node]) == 1:\n                            ways += 1\n                    if ways > 0:\n                        if t_comp < res_t or (t_comp == res_t and ways > res_w):\n                            res_t = t_comp\n                            res_w = ways\n                else:\n                    t_comp = 0\n                    ways = 1\n                    if t_comp < res_t or (t_comp == res_t and ways > res_w):\n                        res_t = t_comp\n                        res_w = ways\n                continue\n            else:\n                degrees = defaultdict(int)\n                for node in comp:\n                    degrees[len(edges[node])] += 1\n                if degrees.get(2, 0) > 0:\n                    t_comp = 0\n                    ways = 1\n                else:\n                    t_comp = 1\n                    ways = 0\n                    for node in comp:\n                        if len(edges[node]) == 1:\n                            ways += 1\n                    if degrees.get(1, 0) == 0:\n                        if any(len(edges[node]) >= 2 for node in comp):\n                            t_comp = 1\n                            ways = sum(1 for node in comp if len(edges[node]) == 1)\n                        else:\n                            t_comp = 1\n                            ways = 0\n                if t_comp < res_t or (t_comp == res_t and ways > res_w):\n                    res_t = t_comp\n                    res_w = ways\n    print(f\"{res_t} {res_w}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 570,
        "completion_token_count": 1134,
        "thoughts_token_count": 1025
    }
}