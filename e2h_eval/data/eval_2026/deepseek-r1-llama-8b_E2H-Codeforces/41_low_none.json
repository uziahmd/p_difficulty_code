{
    "start": 1758278112.6577756,
    "end": 1758278274.59795,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I have this problem to solve, and I need to figure out the best approach. Let's read the problem carefully.\n\nWe have n spots on a street where we can build houses. Each spot can have a height between 0 and h. The goal is to maximize the profit, which is the sum of squares of each house's height. \n\nBut there are m restrictions. Each restriction says that in a certain range [l_i, r_i], the tallest house must be at most x_i. So for each such restriction, the maximum height in that interval can't exceed x_i.\n\nHmm, the challenge is to assign heights to each spot such that all restrictions are satisfied and the profit is maximized.\n\nLet me think about how to model this. Since n and m are up to 50, maybe a dynamic programming approach is feasible. Because the constraints are small, even O(n^3) might work.\n\nWait, but what's the state? Maybe the state can represent the current position in the street and some information about the previous constraints that affect future choices.\n\nAlternatively, perhaps the problem can be modeled as intervals with constraints, and for each position, the height is determined by the most restrictive constraint that covers it.\n\nYes, because for each spot i, the maximum possible height it can have is the minimum of x_j for all restrictions that include i, and also not exceeding h. But wait, no—because the x_j's may apply to different ranges, and for a particular spot, multiple restrictions may apply. So the height at spot i can't exceed any of the x_j's for restrictions that cover i. Therefore, the maximum possible height at i is the minimum of all x_j's where l_j <=i <= r_j, plus possibly considering h.\n\nWait, no. Because for each restriction, the maximum allowed height in that range is x_i. So for spot i, the maximum possible height is the minimum x_j among all restrictions that include i. But if there are no restrictions covering i, then it's just h.\n\nSo, first, for each spot i, compute the maximum possible height it can have, which is the minimum x from all restrictions that include i. If there are none, then it's h.\n\nOnce we know the maximum possible height for each spot, we can choose for each spot a height a_i between 0 and its maximum possible (inclusive). The goal is to choose a_i's such that the sum of a_i squared is as large as possible.\n\nWait, that makes sense. Because each a_i can't be higher than the minimum of the restrictions' x_j's that cover it. So the maximum possible a_i is min_x, which is the smallest x across all applicable restrictions. So for each spot, the maximum allowed is the minimum of x's of the restrictions that include it, or h otherwise.\n\nWait, but the restrictions might overlap. For example, a spot could be covered by multiple restrictions, each imposing their own x. So the spot's height must satisfy all those x's. Hence, the maximum possible is the minimum of all such x's.\n\nSo the first step is to process each spot and find the minimum x from all applicable restrictions. Let's call this max_height[i] for each spot i.\n\nOnce we have max_height[i], the problem reduces to choosing a_i as high as possible, but not exceeding max_height[i], to maximize the sum of squares.\n\nBecause the square function is increasing for non-negative numbers, to maximize the sum, each a_i should be as large as possible, i.e., equal to max_height[i]. Because a higher a_i gives a larger square contribution.\n\nWait, yes! Because for any a_i less than max_height[i], we can increase it without violating any constraints and thus get a higher profit.\n\nSo the optimal solution is to set each a_i to its max_height[i].\n\nThen the total profit is the sum of squares of each max_height[i].\n\nBut wait, is that correct?\n\nLet me see the example given.\n\nIn the first example:\n\nn=3, h=3, m=3.\n\nRestrictions:\n1 1 1: spot 1's max is 1.\n2 2 3: spot 2's max is 3.\n3 3 2: spot 3's max is 2.\n\nSo the heights would be [1,3,2], which gives 1+9+4=14, which matches the sample output.\n\nIn the second example:\n\nn=4, h=10, m=2.\n\nRestriction 1: 2-3, x=8. So spots 2 and 3 can be up to 8.\n\nRestriction 2: 3-4, x=7. So spots 3 and 4 can be up to 7.\n\nSpot 1 has no restrictions, so its max is 10.\n\nSo the heights are [10,8,7,7], sum is 100 +64 +49",
    "response": "To solve this problem, we need to determine the maximum profit possible from building houses on a street with given constraints. Each house's height contributes to the profit based on the square of its height, and there are restrictions on the maximum height allowed in certain ranges.\n\n### Approach\n1. **Identify Constraints**: For each spot on the street, determine the minimum height constraint imposed by all applicable restrictions. This ensures that each spot's height does not exceed any of the restrictions that cover it.\n2. **Maximize Heights**: To maximize the profit, each spot should be assigned the highest possible height allowed by its constraints. This is because the square function grows faster for larger values, so maximizing each height will yield the highest possible sum of squares.\n3. **Compute Profit**: Once the optimal heights for each spot are determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nmax_height = [h] * (n + 1)  # 1-based indexing\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    for i in range(l, r + 1):\n        if x < max_height[i]:\n            max_height[i] = x\n\n# Now, each spot can be up to max_height[i], but no more than h\nprofit = sum(a * a for a in max_height[1:n+1])\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The input consists of the number of spots, maximum height, and number of restrictions. Each restriction specifies a range and a maximum height.\n2. **Processing Restrictions**: For each restriction, update the maximum allowable height for each spot in the specified range. This ensures that each spot's height respects all applicable restrictions.\n3. **Calculating Profit**: After determining the maximum allowable heights for each spot, compute the total profit by summing the squares of these heights.\n\nThis approach efficiently processes each restriction and ensures that the heights are maximized within the constraints, leading to the optimal profit.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nmax_height = [h] * (n + 1)  # 1-based indexing\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    for i in range(l, r + 1):\n        if x < max_height[i]:\n            max_height[i] = x\n\n# Now, each spot can be up to max_height[i], but no more than h\nprofit = sum(a * a for a in max_height[1:n+1])\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 803,
        "completion_token_count": 433,
        "thoughts_token_count": 1025
    }
}