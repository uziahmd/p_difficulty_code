{
    "start": 1758103652.468154,
    "end": 1758103762.6633663,
    "start-formatted": "2025-09-17 19:07 KST",
    "end-formatted": "2025-09-17 19:09 KST",
    "gpu": 2,
    "pid": 7,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I have this problem where I need to determine if a given number of vertices n can form a snowflake graph as defined. Hmm, let's break down the problem.\n\nFrom the problem statement, a snowflake is built in a specific way. It starts with one vertex. Then, each time, every \"leaf\" node (a node connected to only one other) adds k new children. And this step is done at least once. So the structure is kind of like a tree where each branch has k levels, and all the leaves are at the same depth.\n\nWait, but how does the structure look? Let's think about it step by step.\n\nThe initial step creates 1 vertex. Then, in the first expansion, each leaf (which is just the initial node since it's connected to k new nodes) adds k children. So after the first expansion, there are 1 + k nodes. But wait, no—wait, the initial node connects to k new nodes, so that's k edges. So total nodes after first expansion is 1 + k.\n\nThen, the next step: each of those k nodes is a leaf (each connected only to the initial node), so each adds k children. So each contributes k new nodes. So after the second expansion, each of the k nodes becomes a parent to k new nodes. So the number of nodes added is k * k = k². So total nodes now are 1 + k + k².\n\nWait, but the problem says that the step should be done at least once. So the minimum steps after the initial setup are one more expansion. So the minimal snowflake has 1 + k + k² nodes? Or wait, maybe I'm misunderstanding the process.\n\nWait, perhaps the initial step is the first step. Let me read the problem again.\n\nInitially, there's one vertex. Then, the initial is connected to k new ones (k>1). So after step 1, total nodes are 1 + k.\n\nThen, each of these k nodes is connected to k new ones, so each adds k nodes. So step 2 adds k*k nodes. So total nodes after step 2: 1 + k + k^2.\n\nBut the process must do this step at least once. So the minimal snowflake would have gone through step 2, right? Because the initial step (connecting the initial to k nodes) is the first step, and then step two is done at least once.\n\nWait, the problem says: \"This step should be done at least once.\" So the initial step is the first, then the step of adding to each leaf is done at least once. So the minimal structure is when step two is done once.\n\nSo for k=2, the minimal snowflake would have 1 (initial) + 2 (step 1) + 2*2=4 (step 2) = 7 nodes. Wait, but looking at the example input:\n\nIn the sample input, when n=6, the output is YES. How?\n\nWait, let's see the sample input:\n\nInput:\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\nOutput:\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nSo for n=6, the output is YES. Let's see why.\n\nHmm, perhaps my understanding of the structure is incorrect. Maybe the process allows for multiple layers beyond the first step.\n\nWait, perhaps the initial step is creating the first level of leaves. Then, each of those leaves can be expanded further. So for example, for k=3:\n\n- Initial node (1)\n- Step 1: add 3 nodes → 4 total\n- Step 2: expand each of the 3 leaves, adding 3 each → 3*3=9 added → total 13\n- Step 3: expand each of the 12 leaves (from step 2) → 3*12=36 added → total 49.\n\nSo for n=6, maybe there's a structure that fits. Let me think.\n\nWait, another approach: the snowflake is a rooted tree where all the leaves are at the same level. The structure is such that the root has degree k, and each of its children also have degree k, except for the leaves which have degree 1.\n\nSo the total number of nodes in the snowflake is 1 + m*k, where m is the number of 'layers' of internal nodes. Wait, not exactly sure.\n\nAlternatively, the snowflake can be viewed as a k-ary tree of height h, where h is the number of layers. The root is layer 0, each non-leaf node has k children, and leaves are at layer h.\n\nWait, but for the snowflake, the initial step is the root (layer 0). Then, layer 1 has k nodes",
    "response": "To solve this problem, we need to determine if a given number of vertices \\( n \\) can form a snowflake graph as defined. A snowflake graph is constructed in a specific hierarchical manner, and our task is to check if such a structure can exist for the given \\( n \\).\n\n### Approach\nThe snowflake graph starts with one vertex and then expands by adding layers of nodes. Each layer adds \\( k \\) new children to each leaf node, where \\( k > 1 \\). The process must be done at least once beyond the initial setup.\n\nThe key insight is that the number of vertices \\( n \\) in a valid snowflake graph must fit the form:\n\\[ n = 1 + k + k^2 + k^3 + \\ldots + k^m \\]\nwhere \\( m \\geq 2 \\) (since the step of expanding leaves must be done at least once).\n\nWe can generalize this to check if \\( n \\) can be expressed as:\n\\[ n = \\frac{k^{m+1} - 1}{k - 1} \\]\nfor some \\( k > 1 \\) and \\( m \\geq 1 \\).\n\nTo efficiently check this for large \\( n \\) (up to \\( 10^{18} \\)), we iterate over possible values of \\( k \\) and check if \\( n \\) fits the required form.\n\n### Solution Code\n```python\nimport sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Check if n is a power of a form like (k^(m+1)-1)/(k-1)\n    max_k = int(n ** 0.5) + 1\n    for k in range(2, max_k):\n        m = 1\n        total = 1 + k  # after first expansion\n        while True:\n            next_total = total + k * m\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            m += 1\n            total = next_total\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```\n\n### Explanation\n1. **Reading Input:** We read the number of test cases and each value of \\( n \\).\n2. **Check Function:** For each \\( n \\), we check if it can be represented as a sum of powers of \\( k \\) starting from 1.\n3. **Iterate Over Possible k:** We iterate over possible values of \\( k \\) from 2 up to the square root of \\( n \\) to limit the search space.\n4. **Check Each k:** For each \\( k \\), we simulate the expansion process and see if the total number of nodes matches \\( n \\).\n\nThis approach ensures that we efficiently check all possible values of \\( k \\) and determine if a valid snowflake graph can be formed for the given \\( n \\).",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Check if n is a power of a form like (k^(m+1)-1)/(k-1)\n    max_k = int(n ** 0.5) + 1\n    for k in range(2, max_k):\n        m = 1\n        total = 1 + k  # after first expansion\n        while True:\n            next_total = total + k * m\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            m += 1\n            total = next_total\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 526,
        "completion_token_count": 643,
        "thoughts_token_count": 1025
    }
}