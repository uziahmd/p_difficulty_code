{
    "start": 1758099653.2207303,
    "end": 1758099673.2224584,
    "start-formatted": "2025-09-17 18:00 KST",
    "end-formatted": "2025-09-17 18:01 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef is_snowflake(n):\n    if n < 2:\n        return False\n    # Try all possible k > 1\n    # The snowflake structure can be viewed as a tree with certain properties\n    # Let's find all possible k such that the total number of nodes is n\n    # We can use binary search to find possible values of k\n    # For a given k, the number of nodes in the snowflake is:\n    # 1 (root) + k + k^2 + ... + k^m = (k^(m+1) - 1) / (k - 1)\n    # We need to check if there exists m >= 1 and k > 1 such that the sum equals n\n    # We'll try small k values up to some limit (since for large k, the sum grows quickly)\n\n    # Try k from 2 to 100 (as higher k will make the sum grow too fast for n <= 1e18)\n    for k in range(2, 101):\n        total = 1  # root\n        current = k\n        while True:\n            if total == n:\n                return True\n            if total > n:\n                break\n            total += current\n            current *= k\n    return False\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(data[i])\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake(n):\n    if n < 2:\n        return False\n    # Try all possible k > 1\n    # The snowflake structure can be viewed as a tree with certain properties\n    # Let's find all possible k such that the total number of nodes is n\n    # We can use binary search to find possible values of k\n    # For a given k, the number of nodes in the snowflake is:\n    # 1 (root) + k + k^2 + ... + k^m = (k^(m+1) - 1) / (k - 1)\n    # We need to check if there exists m >= 1 and k > 1 such that the sum equals n\n    # We'll try small k values up to some limit (since for large k, the sum grows quickly)\n\n    # Try k from 2 to 100 (as higher k will make the sum grow too fast for n <= 1e18)\n    for k in range(2, 101):\n        total = 1  # root\n        current = k\n        while True:\n            if total == n:\n                return True\n            if total > n:\n                break\n            total += current\n            current *= k\n    return False\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(data[i])\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 565,
        "completion_token_count": 374,
        "thoughts_token_count": 0
    }
}