{
    "start": 1758300963.104711,
    "end": 1758304803.8276665,
    "start-formatted": "2025-09-20 01:56 KST",
    "end-formatted": "2025-09-20 03:00 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing:\n - An odd cycle must have at least 3 edges (triangle) but can be larger.\n\n Steps:\n\n 1. If the graph already contains an odd-length cycle, then t=0 and w=1? \n    However, note: the problem says \"form a simple cycle of an odd length\", and if there is one already then we don't need to add any edge.\n\n    But wait: the problem says \"the minimum number of edges that must be added\", so if the graph already has an odd cycle, then t=0.\n\n    However, note that the example input:\n        \"3 3\\n1 2\\n2 3\\n3 1\" -> Output \"0 1\"\n\n    So we must check for existing odd cycles.\n\n 2. Otherwise, we consider adding edges.\n\n Let's break down:\n\n Case 1: The graph is empty (n vertices, m=0). Then we must form an odd cycle. The smallest odd cycle is a triangle (3 edges). \n        But note: we can also form a 5-cycle? However, the minimal number of edges to add is 3 (for a triangle). \n        However, note that we might form a cycle by connecting three vertices that are not connected? But wait, we are allowed to add edges arbitrarily.\n\n        Actually, the minimal odd cycle is of length 3 (triangle). So we need to form a triangle.\n\n        How many ways? We choose 3 distinct vertices from n. The number of ways is C(n,3). However, wait: the problem says \"It is prohibited to add loops or parallel edges\", and we are only adding edges that are not present. In an empty graph, all edges are absent.\n\n        But note: the graph has n vertices. We can choose any 3 distinct vertices and add the three edges of the triangle. However, the problem says \"two ways to add edges are considered equal if they have the same sets of added edges\". So each set of three edges (which forms a triangle) is a distinct set.\n\n        However, wait: the problem says \"minimum number of edges that must be added\". So we are only considering the minimal t. \n\n        But note: we can also form an odd cycle by adding more than 3 edges? However, the minimal t is 3. So we are only interested in t=3.\n\n        However, consider: what if the graph has two vertices and we want to form an odd cycle? Then we cannot form a cycle of odd length with 3 edges because we need 3 vertices. Similarly, if n<3, then we cannot form a cycle? \n\n        The problem states: \"simple cycle of an odd length, consisting of more than one vertex\". The smallest cycle is of length 3 (triangle) which is odd. So:\n\n        - If n < 3: then no cycle exists. We must add edges until we get a cycle. But note: a cycle must have at least 3 edges and 3 distinct vertices. So if n<3, we cannot form a cycle? \n\n        However, note: the graph is given with n vertices. For example, if n=1, then even after adding edges we cannot form a cycle (because cycle requires at least 3 edges and 3 vertices). Similarly, n=2: we can add edges to form a cycle? But a cycle requires at least 3 edges and 3 vertices.\n\n        Therefore, if n < 3, then we cannot form a cycle. But wait, the problem says \"to form a simple cycle of an odd length\", so if n<3, then we cannot form such a cycle. However, note that we are allowed to add edges arbitrarily (but without parallel edges or loops). But we cannot form a cycle if we don't have 3 vertices. \n\n        Actually, the cycle must consist of more than one vertex (so at least two) but the minimal cycle is 3. So:\n\n        Conditions for forming a cycle: at least 3 vertices.\n\n        Therefore, if n < 3, then we must add edges until we have at least 3 vertices? But wait, we have fixed n vertices. So we cannot change the number of vertices.\n\n        So if n < 3, then it is impossible to form a cycle? \n\n        However, note: the problem does not say we can add vertices, only edges. So we must use the existing n vertices.\n\n        Thus, for n=0,1,2: we cannot form a cycle.\n\n        But wait, the example input: \n            \"3 0\" -> Output \"3 1\"\n\n        So for n=3 and m=0, we can form a triangle (3 edges) and there is 1 way.\n\n        What about n=2? Then we have two vertices. We cannot form a cycle (needs 3 vertices). So we must consider: what is the minimal number of edges to add to form a cycle? Since we cannot form a cycle with 2 vertices, we must first have at least 3 vertices. But we only have 2. Therefore, we must consider: we cannot form a cycle with 2 vertices.\n\n        However, note: the problem says \"the graph isn't necessarily connected\", but we are limited to the given n vertices.\n\n        Therefore, if n < 3, then we cannot form a cycle. Then what should we output?\n\n        According to the problem, we are to output t (minimum number of edges to add) and w (number of ways). \n\n        But note: the problem says \"to form a cycle of an odd length\", so if n<3, then we cannot form a cycle. Then is the answer undefined? \n\n        Actually, reading the problem statement: \"You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length\".\n\n        So if it is impossible to form such a cycle, then we must consider: is there a possibility to form an odd cycle by adding edges? \n\n        However, note: an odd cycle must have an odd number of edges and must be a cycle (so at least 3 edges). And we cannot form a cycle with less than 3 vertices. Therefore, if n<3, we cannot form a cycle.\n\n        But wait: the problem doesn't specify that we must form a cycle using the entire graph? No, we can form a cycle on a subset of vertices. However, a cycle of k vertices requires k distinct vertices and k edges (if we consider the cycle as having k edges). \n\n        Therefore, we require at least 3 vertices to form a cycle.\n\n        So if n>=3, then we can form a cycle if we have 3 or more vertices.\n\n        However, note: the graph might already have some edges.\n\n Approach:\n\n Step 1: Check if the graph already has an odd cycle.\n\n   How? We can use bipartite coloring. A graph is bipartite if and only if it contains no odd cycles. So if the graph is bipartite, then there is no odd cycle.\n\n   But note: the graph is not necessarily connected. So we have to check each connected component.\n\n   Steps for checking bipartiteness:\n\n      For each connected component, do BFS/DFS and assign colors (say 0 and 1). If we find an edge connecting two nodes of the same color, then the graph is not bipartite and hence contains an odd cycle.\n\n   If the graph is not bipartite (i.e., contains an odd cycle), then t=0 and w=1.\n\n Step 2: If the graph is bipartite, then we need to consider adding edges.\n\n   In a bipartite graph, all cycles are even. Therefore, we cannot form an odd cycle by adding zero edges.\n\n   Now, what is the minimal number of edges to add to create an odd cycle?\n\n   Consider: We can create an odd cycle by connecting two vertices in the same part (in the same bipartition) of the same connected component. Why? Because then we would form a cycle of odd length.\n\n   Example: Suppose we have a connected bipartite graph with parts A and B. Consider two vertices u and v in A. Currently, the distance between u and v is even (since they are in the same part). If we add an edge between u and v, then we create a cycle: the path from u to v (even length) plus the direct edge (length 1, odd) gives an odd cycle.\n\n   So adding one edge within a part creates an odd cycle.\n\n   But wait: is it always possible to create an odd cycle by adding just one edge? \n\n        Condition: There must exist at least one edge that we can add (within the same part) that will complete an odd cycle. However, note: if we add an edge between two vertices in the same part, then the cycle formed is the existing path (which is even) plus the new edge (odd) so total odd.\n\n        However, we must ensure that the two vertices are in the same component (otherwise, adding an edge between two disconnected components will not form a cycle). \n\n        Therefore, we only consider edges that connect two vertices in the same connected component and in the same part.\n\n   But note: what if the graph is disconnected? Then we can also form a cycle by connecting two vertices in different components? \n\n        Actually, if we connect two vertices from different components, then we don't form a cycle (we just merge two components). So we must form the cycle within one connected component.\n\n   Therefore, the minimal t is 1 if there exists at least one pair of vertices in the same part (same connected component) that are not adjacent (but we can only add edges that are not present). However, note that the graph is bipartite so there are no edges within the same part originally.\n\n   But wait: the graph is bipartite, so there are no edges within the same part. Therefore, every pair of vertices in the same part is non-adjacent, so we can add an edge between any two.\n\n   However, we must check: if there exists at least one connected component that has at least two vertices in one part, then we can add an edge to form an odd cycle. \n\n        Note: if a connected bipartite component has |A| >= 2, then we can choose any two distinct vertices in A to form an edge, and that edge would create an odd cycle.\n\n   But wait: what if the component has only one vertex? Then we cannot form an edge (since an edge requires two distinct vertices). So we ignore components that have only one vertex.\n\n   Therefore, if there is at least one connected component that has at least two vertices in one part (meaning |A|>=2 or |B|>=2), then t=1.\n\n   However, what if the graph has multiple components, and none of them has two vertices in the same part? \n\n        Example: two isolated vertices (each is a component) -> then each component is bipartite (trivially). But each component has one vertex, so no two vertices in the same part. Then we cannot form an odd cycle by adding one edge? \n\n        But wait: we can form an odd cycle by adding two edges? \n\n        Example: n=4, and the graph is two disjoint edges (so two edges, four vertices). This graph is bipartite. Now, if we add two edges, can we form an odd cycle?\n\n        Actually, we can form a triangle by adding two edges? \n\n        Consider: vertices {a,b,c,d}. The graph has edges (a-b) and (c-d). Now, if we add edges (b-c) and (a-d), then we don't form a cycle. Alternatively, if we add edges (a-c) and (b-d), then we have two cycles: a-b-d-c-a (even) and a-c-b-d-a (even). \n\n        Alternatively, we can form a cycle of length 5? But we have only 4 vertices.\n\n        Actually, the minimal odd cycle we can form is a triangle. To form a triangle, we need three vertices. We can choose three vertices from the four. For example, take vertices a,b,c. Then we have edges (a-b) and we need to add (a-c) and (b-c) to form a triangle. But wait, that requires two edges. \n\n        However, we can also form a cycle of length 5? But 5 requires 5 edges? Actually, a cycle of length 5 is a pentagon, which requires 5 edges. But we can form a cycle by adding two edges? \n\n        Actually, the minimal odd cycle we can form is a triangle (3 edges) but we already have one edge, so we need to add two edges. \n\n        But wait: we are allowed to add edges arbitrarily. However, we are looking for the minimal number of edges to add. \n\n        Now, what is the minimal t?\n\n        Case 1: t=0 -> already exists an odd cycle (we checked, so no).\n        Case 2: t=1 -> if there exists an edge we can add that creates an odd cycle (within the same component). But if there is no component with at least two vertices in the same part, then we cannot do that.\n\n        Then we must consider t=2.\n\n        However, note: we can also form an odd cycle by adding two edges that together form a triangle? But wait, we can also form a cycle of length 5 (which is odd) by adding two edges? \n\n        Actually, let's think:\n\n          We have a graph with no odd cycle (bipartite). We want to form an odd cycle.\n\n          Option 1: Add one edge within a part (if exists) -> odd cycle.\n          Option 2: If we don't have two vertices in the same part (in the same component), then we must use edges from different components? \n\n          But wait, if the graph is disconnected, then we can also consider connecting two components to form an odd cycle.\n\n          Example: two components, both being edges (so two edges, four vertices). We can form a triangle by connecting two of the four vertices? But wait, we don't have a third vertex that is connected appropriately.\n\n          Actually, we can form an odd cycle by connecting two edges from two different components in a way that forms an odd cycle. \n\n          Example: two components, each being an edge: \n             Component1: {a, b} with edge (a-b)\n             Component2: {c, d} with edge (c-d)\n\n          Now, if we add an edge from a to c, then we don't have a cycle. Then we add an edge from b to d, then we have a cycle: a-b-d-c-a. This cycle has length 4 (even). \n\n          Alternatively, if we add an edge from a to c and from a to d, then we have:\n             Edges: (a-b), (c-d), (a-c), (a-d)\n             Then consider the cycle: a-c-d-a: length 3 (odd). So we form a triangle.\n\n          So we added two edges (a-c and a-d) and we got a triangle (a,c,d). \n\n          How did we choose these two edges? We chose two edges from one vertex (a) in one component to two vertices (c and d) in the other component.\n\n          Alternatively, we can choose two edges from a vertex in one component to two vertices in the same component? But wait, we are in a bipartite graph and the component is bipartite. \n\n          Actually, the above example: we used two edges from a vertex in component1 to two vertices in component2. \n\n          Conditions: \n            - We choose a vertex from one component and two vertices from another component (or from the same component? but wait, if we choose two vertices from the same component, then we must be cautious because they are in the same bipartite part or not.\n\n          However, note: we cannot use two edges from the same vertex to two vertices in the same component? Because if the two vertices are in the same component, then we can check the bipartite coloring.\n\n          Actually, if we have two vertices in the same component, we know the graph is bipartite so the two vertices are either in the same part or different parts. \n\n          But wait, in the same component, if we take two vertices from the same part, then we cannot add an edge between them (because we are considering adding one edge for t=1, but we are now considering two edges). \n\n          Alternatively, if we take two vertices from the same component that are in different parts, then adding an edge between them would create an even cycle? Actually, no: the existing path is odd (because they are in different parts) and then adding an edge (1) would make an even cycle? \n\n          Actually, the parity of the cycle: \n            Let the two vertices be u and v. The distance between u and v is odd (since they are in different parts). Then adding an edge (u-v) gives a cycle of length (odd + 1) = even.\n\n          So adding an edge between two vertices in different parts (same component) gives an even cycle.\n\n          Therefore, to form an odd cycle by two edges, we must connect two components? Or use two edges in a more complex way.\n\n          Another idea: we can form an odd cycle by connecting two edges that together form a triangle. \n\n          Example: We have three vertices: a, b, c. They are not connected. Then we add edges (a-b) and (b-c). Then we have a path, but not a cycle. Then we must add (a-c) to form a triangle? \n\n          Actually, we can form a triangle by adding all three edges. But we want minimal edges.\n\n          Alternatively, if we have two vertices in one component and two vertices in another, we can form a triangle by connecting one vertex from the first to two vertices in the second, and then the two vertices in the second are already connected by an edge? \n\n          Actually, let me reexamine:\n\n          We are allowed to add edges arbitrarily (as long as no parallel or loop). We are to minimize the number of edges.\n\n          Known: \n            - t=0: already an odd cycle.\n            - t=1: if there exists a pair of vertices in the same part (same component) that are not adjacent (but in a bipartite graph, they are not adjacent by definition). Then we can add one edge.\n\n          So the minimal t is 1 if there exists at least one connected component that has at least two vertices in one part.\n\n          Now, what if no component has two vertices in the same part? Then every component is a single vertex or an edge (because in a bipartite graph, the parts must be of size 1 and 1 for edges, or 1 and 0 for isolated vertices). \n\n          Then the graph is a disjoint union of edges and isolated vertices.\n\n          Then, the minimal t is 2? \n\n          Example: two edges (four vertices) as above. Then we can form a triangle by adding two edges: connecting one vertex from one edge to two vertices from the other edge.\n\n          How many ways to add two edges to form an odd cycle?\n\n          In the example: \n            Component1: {a, b} (edge a-b)\n            Component2: {c, d} (edge c-d)\n\n          We need to form a triangle. We can choose a triangle by selecting three vertices. The triangle can be:\n\n            Option 1: Use two vertices from Component1 and one from Component2: \n                But Component1 has two vertices (a,b). We need to form a triangle with two from Component1 and one from Component2. Then we need to connect the two from Component1 to the one from Component2. However, the two from Component1 are in the same part (because the edge is bipartite: say a in part0, b in part1). Then the one from Component2 can be in either part? Actually, we don't know the coloring of Component2, but we can assign arbitrarily (but the graph is bipartite so we assign consistently). \n\n            However, note: we are free to assign the coloring for each component independently. But the condition for the entire graph being bipartite is independent for components.\n\n          Actually, we don't care about the exact coloring, but we know that in Component1: a and b are adjacent, so they are in different parts. Similarly, Component2: c and d are in different parts.\n\n          Now, to form a triangle, we can choose:\n\n            - Three vertices: a, b, and one from Component2 (say c). Then we need to add edges (a-c) and (b-c). But wait, the edge (a-c) and (b-c) are two edges. Then we have a cycle: a-b-c-a. The cycle length is 3 (odd). \n\n            But wait, is this cycle formed? We have edges: \n                Original: a-b, c-d (and the rest are absent)\n                Added: a-c, b-c.\n\n            Then the cycle a-b-c-a: edges a-b, b-c, c-a. Yes.\n\n            Similarly, we can choose a, b, and d: then add edges (a-d) and (b-d) -> cycle a-b-d-a.\n\n            Also, we can choose two vertices from Component2 and one from Component1. \n                For example, choose a (from Component1) and c, d (from Component2). Then we add edges (a-c) and (a-d). Then cycle: a-c-d-a (edges a-c, c-d, d-a). The cycle length is 3 (odd). \n\n            But wait, the original graph has an edge (c-d). So we don't need to add (c-d). Then the cycle a-c-d-a uses the existing edge (c-d) and the two added edges (a-c, a-d). \n\n            Therefore, the two possibilities for a triangle:\n\n                Type1: Use one edge from Component1 and two edges from Component2 (via one vertex from Component1 and two from Component2) OR\n                Type2: Use one edge from Component2 and two edges from Component1 (via one vertex from Component2 and two from Component1)\n\n            Actually, the two examples above are:\n\n                Example1: use two vertices from Component1 and one from Component2: two edges added (connecting the one from Component2 to the two from Component1).\n                Example2: use two vertices from Component2 and one from Component1: two edges added (connecting the one from Component1 to the two from Component2).\n\n            Also, we can use two edges from two different components? Actually, we can also use two edges from the same component? \n\n            But wait, each component is bipartite and has no odd cycle. In a component that is an edge (two vertices, two parts), we cannot form an odd cycle by adding one edge (because the two vertices are in different parts, so adding an edge would form an even cycle). Similarly, we cannot form an odd cycle by adding two edges within the same component? \n\n            Example: Component1: {a,b} (edge exists). Now, if we add two edges from a and b to a third vertex (but wait, we don't have a third vertex in Component1). \n\n            Therefore, we must use vertices from at least two components.\n\n          Now, how to count the ways for t=2?\n\n          Conditions for t=2:\n\n            We must form a triangle. We need three distinct vertices. The triangle must include edges that connect the three vertices. \n\n            However, note: the three vertices might not be entirely in the same component. \n\n            Actually, the triangle must have three edges. We start with a graph that is bipartite. We are going to add two edges. The triangle must be formed by two added edges and one existing edge? Or two added edges and one existing edge? Or three added edges? \n\n            But note: we are adding two edges. So we can only add two edges. Then the triangle must have two edges from our addition and one edge that is already present.\n\n            Therefore, the existing edge must be one edge of the triangle.\n\n            So the three vertices must form a triangle, and one of the three edges must already exist. Then we add the other two.\n\n            So we are looking for triangles (three vertices) that have exactly one edge already present.\n\n            Then the two edges we add are the other two edges of the triangle.\n\n            But note: the graph is bipartite, so the triangle must be an odd cycle. However, the existing edge is one edge of the triangle. The triangle is a 3-cycle (odd). \n\n            How to form such a triangle?\n\n            We need to choose three vertices that form a triangle and that have exactly one edge in the original graph.\n\n            Then, the two edges we add are the other two edges.\n\n            But note: the graph is bipartite, so the three vertices must be colored with two colors. In a triangle, the three vertices must be colored with three colors? Actually, no: a triangle is an odd cycle and cannot be colored with two colors. \n\n            But wait: the original graph is bipartite, so the three vertices must be colored with two colors. Then the triangle must have two vertices of the same color? Then the edge between the two same-colored vertices cannot exist (because the graph is bipartite). However, we are going to add edges arbitrarily (ignoring the bipartite condition for the moment because we are breaking it). \n\n            But note: the condition for the graph being bipartite is that we don't have an odd cycle. After adding two edges, we are creating an odd cycle. \n\n            However, the three vertices must be such that they are not all pairwise adjacent. \n\n            How to choose three vertices?\n\n            Let the three vertices be u, v, w.\n\n            Without loss of generality, assume the existing edge is between u and v.\n\n            Then the two edges we add are (u-w) and (v-w).\n\n            Conditions for the graph being bipartite initially: \n\n                The graph is bipartite, so the entire graph can be colored with two colors.\n\n                The three vertices u, v, w must be colored such that u and v are adjacent so they are different colors. Then w must be colored differently from u and v? But u and v are different, so w must be the same as one of them. \n\n                Then the edge between u and w (if we add it) would be between two vertices of the same color? Then after adding, we break the bipartite condition. Similarly for v and w.\n\n            So the three vertices must be such that two of them (u and v) are adjacent and the third (w) is not adjacent to either? \n\n            But note: the graph is bipartite, so if w is connected by an edge to u (which is one color) then w must be the other color. But then the edge between v and w (same as u's color? no: u and v are different, so w's color is the same as u's) then edge v-w is between two different colors? \n\n            Actually, let's color:\n\n                Let u: color0, v: color1 (because they are adjacent). Then w must be assigned a color. Since the graph is bipartite, we can assign w arbitrarily? But wait, the graph is bipartite and we haven't considered edges from w to others. \n\n            However, we are only concerned with the three vertices. The existing edges in the graph might constrain the coloring of w. \n\n            But note: we are counting the ways to add two edges that form a triangle with exactly one existing edge. The existing edges in the graph (other than the one we are using) might affect the bipartite coloring, but we are going to break the bipartite property by adding two edges.\n\n            However, for the purpose of forming the triangle, we don't care about the rest of the graph, but the three vertices must be chosen such that the existing edge is present and the other two edges are absent.\n\n            But note: the graph is bipartite, so there are no edges between two vertices of the same color. Therefore, the two edges we wish to add (u-w and v-w) must not be present (because if they were present, then the graph would not be bipartite, but wait: the graph is bipartite, so they are not present). \n\n            However, there might be edges from w to other vertices, but that doesn't matter for the triangle.\n\n            But wait: what if the three vertices are not connected to the rest of the graph? Actually, we are only concerned with the three vertices and the edges between them.\n\n            Therefore, the condition for the three vertices is:\n\n                - There is exactly one edge among the three: say (u,v) exists, and (u,w) and (v,w) do not exist.\n\n            Then we can add the two edges (u,w) and (v,w) to form the triangle.\n\n            But note: the graph is bipartite, so the edge (u,w) and (v,w) are not present because they would connect two vertices of the same color (if w is colored the same as u, then (u,w) is forbidden; if w is colored the same as v, then (v,w) is forbidden). \n\n            However, wait: the bipartite coloring is fixed. The color of w is fixed by the bipartite condition. \n\n            How is w colored? \n\n                Initially, the graph is bipartite. The three vertices u, v, w might be in different components. \n\n            If they are in the same component, then the coloring is fixed. \n\n            But if they are in different components, then we can assign the color of w arbitrarily? \n\n            Actually, no: the bipartite coloring is defined for the entire graph. But when we break the graph by adding edges, the coloring might change. However, for the purpose of the problem, we are only counting the ways to add edges (without violating the no-parallel and no-loop condition). \n\n            But note: the problem does not require the graph to remain bipartite. We are breaking it.\n\n            However, we are counting the minimal t and the number of ways for minimal t.\n\n            Therefore, we must consider:\n\n                t=0: already exists an odd cycle.\n\n                t=1: if there exists at least one edge we can add (within the same part of the same component) that creates an odd cycle.\n\n                t=2: otherwise, we must form an odd cycle by adding two edges. This can be done by:\n\n                    a) Forming a triangle with exactly one edge already present (so we add two edges). \n\n                    b) Forming an odd cycle of length greater than 3 (like 5) by adding two edges? \n\n            But note: is there a way to form an odd cycle of length 5 by adding two edges? \n\n            Example: a path of 4 vertices (even cycle if completed? Actually, a path of 4 vertices (with 3 edges) is not a cycle. \n\n            Let me try: \n\n                Original graph: a path of 4 vertices: a-b-c-d (edges: a-b, b-c, c-d). This graph is bipartite. \n\n                We want to form an odd cycle. \n\n                We can add two edges: for example, a-c and b-d. Then we have cycles: \n                    a-b-c-a (cycle of length 3, odd) -> so we actually form a triangle.\n\n                Alternatively, we can form a cycle of length 5: a-b-c-d-a? Then we need to add edges (a-c) and (d-b)? \n\n                Actually, to form a 5-cycle: a-b-c-d-a, we need edges: a-b, b-c, c-d, d-a, and we are missing a-d and also we have the existing edges. Actually, we have a-b, b-c, c-d. Then we need to add a-d and then the cycle is a-b-c-d-a (length 4) -> wait, that's even.\n\n                Alternatively, we can form a cycle: a-b-c-d-b? That's not a simple cycle.\n\n                Actually, a simple cycle of length 5 would require 5 edges. We have 3 edges, and we add two: total 5 edges. But the cycle is of length 5 (odd). \n\n                How to form a 5-cycle? \n\n                    We need to connect the four vertices in a cycle: a-b-c-d-e (but we don't have e). \n\n                Alternatively, if we have five vertices, we can form a 5-cycle by adding two edges to a 3-path? \n\n            However, note: we are minimizing the number of edges. \n\n            Claim: The minimal t is either 0, 1, or 2.\n\n            Why not more? \n\n            We have shown:\n\n                t=0: already exists.\n\n                t=1: if there is a pair of vertices in the same part (same component) that are not adjacent (which they aren't in a bipartite graph) then we can add one edge.\n\n                Otherwise (no component has two vertices in the same part) then the graph is a disjoint union of edges and isolated vertices. Then we must form a triangle (which requires two edges) because:\n\n                    - We cannot form a cycle of length 3 by adding one edge (because we don't have two vertices in the same part in the same component).\n\n                    - We cannot form a cycle of length 5 by adding one edge (because we don't have enough vertices or structure).\n\n            But wait: what if the graph has more than two components? \n\n            Example: three isolated vertices. Then we have three components, each of one vertex. Then we cannot form a cycle by adding one edge (because we need two edges for a triangle). \n\n            Therefore, for three isolated vertices (n=3, m=0):\n\n                t=3 (because we must add three edges to form a triangle).\n\n            However, wait: the example input: \n                \"3 0\" -> Output \"3 1\"\n\n            So in this case, t=3.\n\n            Now, let's summarize:\n\n                Let the graph be given.\n\n                Step 1: Check for existing odd cycle (by testing bipartiteness). If found, output \"0 1\".\n\n                Step 2: If the graph is bipartite, then:\n\n                    Let the graph have several connected components.\n\n                    Let comp[i] be the i-th connected component, and for each component, we have two parts: part0 and part1.\n\n                    Count for each component: \n                        count0 = number of vertices in part0\n                        count1 = number of vertices in part1\n\n                    Then:\n\n                    Option t=1: \n                        If any component has count0>=2 OR count1>=2, then we can form an odd cycle by adding one edge (within the same part). \n\n                    Then t=1, and the number of ways w is the sum over all components of C(count0,2) + C(count1,2) [but note: the graph is bipartite, so edges within the same part are absent, and we can add any edge between two vertices in the same part, and each such edge would form an odd cycle].\n\n                    Option t=2:\n                        Otherwise (all components have at most one vertex in each part) then we cannot form an odd cycle by adding one edge.\n\n                        Then we consider t=2.\n\n                        However, note: we can form an odd cycle by adding two edges (forming a triangle) if there exists three vertices (not necessarily in the same component) that have exactly one edge in the original graph.\n\n                        But wait: the graph is a disjoint union of edges and isolated vertices. Then the edges are the only edges present.\n\n                        How many ways to form a triangle with exactly one edge?\n\n                            We need to choose an existing edge (u-v). Then we need to choose a third vertex w (distinct from u and v) such that the edges (u-w) and (v-w) are absent.\n\n                            Then we can add (u-w) and (v-w) to form the triangle.\n\n                        However, note: the graph is bipartite, so the edge (u-w) and (v-w) must not be present (because they would connect two vertices of the same color? Actually, the coloring: u and v are adjacent so they are different colors. w must be colored arbitrarily? \n\n                        But wait: the entire graph is bipartite. The third vertex w must be colored according to its component. \n\n                        Actually, we can choose w from any other component (or same component? but wait, if u and v are from an edge, then they form a component of two vertices. Then w must be from a different component.\n\n                        Then the condition for the edge (u-w) and (v-w): since u and v are in different components, there is no constraint from the bipartite condition (because the two components are independent). However, the graph is bipartite, so the edges (u-w) and (v-w) are absent (because we don't have any edge between components? Actually, the graph is initially without edges between components, so they are absent).\n\n                        Then, the number of ways is:\n\n                            For each existing edge (u-v): \n                                Let w be any vertex not in the component of {u,v}. But note: the graph is disjoint, so the component of {u,v} is just these two. Then the available w are the remaining n-2 vertices.\n\n                            However, wait: we cannot choose w from the same component? Because the component of {u,v} has only two vertices, so w must be from the rest.\n\n                            But note: if there are multiple edges, we can use any edge and then any vertex outside.\n\n                            However, wait: the triangle must have exactly one edge (the existing one). Then we must avoid having the other edges present. \n\n                            But the other edges (u-w) and (v-w) are absent because the graph is bipartite and the components are disjoint. \n\n                            Therefore, for each existing edge (u-v) and for each vertex w not in {u,v}, we can form a triangle by adding (u-w) and (v-w). \n\n                            But wait: what if w is in a component",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length, and the number of ways to achieve this with the minimal edge additions. The solution involves checking for existing odd cycles and, if none exist, determining the minimal edges required to form one by leveraging bipartite graph properties.\n\n### Approach\n1. **Check for Existing Odd Cycles**: The graph is bipartite if and only if it contains no odd cycles. We perform a bipartite check using BFS or DFS for each connected component. If any component is not bipartite, the graph already contains an odd cycle, so the answer is `0 1`.\n\n2. **Bipartite Graph Handling**: If the graph is bipartite:\n   - **t=1**: If any connected component has at least two vertices in the same part (color), adding an edge between them forms an odd cycle. The number of ways is the sum of combinations of choosing two vertices from each part across all components.\n   - **t=2**: If no component has two vertices in the same part, we need to form a triangle (odd cycle) by adding two edges. This involves selecting an existing edge (u-v) and a third vertex w not in their component, then adding edges (u-w) and (v-w). The number of ways is the product of the number of existing edges and the number of vertices outside their component.\n   - **t=3**: If the graph has fewer than three vertices, forming an odd cycle requires adding three edges to create a triangle. The number of ways is the combination of choosing three vertices from the graph.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_count += 1\n            colors = [0] * (n+1)\n            q = deque([i])\n            visited[i] = True\n            color[i] = 0\n            comp_nodes = []\n            comp_nodes.append(i)\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = 1 - color[node]\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_t1 = 0\n    comp_info = []\n    for i in range(1, n+1):\n        c = color[i]\n        comp_num = comp_id[i]\n        if len(comp_info) < comp_num:\n            comp_info.append({'count0':0, 'count1':0})\n        comp_info[comp_num-1]['count' + str(c)] += 1\n        \n    for i in range(len(comp_info)):\n        count0 = comp_info[i]['count0']\n        count1 = comp_info[i]['count1']\n        total_ways_t1 += count0*(count0-1)//2\n        total_ways_t1 += count1*(count1-1)//2\n        \n    if total_ways_t1 > 0:\n        print(\"1 \" + str(total_ways_t1))\n        return\n        \n    total_edges = m\n    t2_ways = 0\n    for i in range(1, n+1):\n        if not graph[i]:\n            continue\n        for j in graph[i]:\n            if comp_id[i] != comp_id[j]:\n                continue\n            w = n - len(components[comp_id[i]-1])\n            if w > 0:\n                t2_ways += total_edges * w\n                \n    if t2_ways > 0:\n        print(\"2 \" + str(t2_ways // 2))\n        return\n        \n    if n >= 3:\n        t3_ways = (n * (n-1) * (n-2)) // 6\n        print(\"3 \" + str(t3_ways))\n        return\n        \n    if n == 1 or n == 2:\n        if n == 1:\n            print(\"3 0\")\n        else:\n            print(\"2 0\")\n        return\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The code checks if the graph is bipartite by attempting to color each connected component with two colors. If any component cannot be colored without conflicts, an odd cycle exists, and the answer is `0 1`.\n2. **t=1 Calculation**: For each bipartite component, count vertices in each color. The number of ways to add one edge within the same color is the sum of combinations of vertices in each color.\n3. **t=2 Calculation**: If no component allows a single-edge addition, the code counts ways to form a triangle by adding two edges. This involves selecting an existing edge and a vertex from another component.\n4. **t=3 Calculation**: If the graph has fewer than three vertices, forming a triangle requires three edges. The number of ways is the combination of choosing three vertices from the graph.\n5. **Edge Cases**: Handles scenarios where the graph has isolated vertices or insufficient vertices to form a cycle, ensuring correct minimal edge counts and ways.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_count += 1\n            colors = [0] * (n+1)\n            q = deque([i])\n            visited[i] = True\n            color[i] = 0\n            comp_nodes = []\n            comp_nodes.append(i)\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = 1 - color[node]\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_t1 = 0\n    comp_info = []\n    for i in range(1, n+1):\n        c = color[i]\n        comp_num = comp_id[i]\n        if len(comp_info) < comp_num:\n            comp_info.append({'count0':0, 'count1':0})\n        comp_info[comp_num-1]['count' + str(c)] += 1\n        \n    for i in range(len(comp_info)):\n        count0 = comp_info[i]['count0']\n        count1 = comp_info[i]['count1']\n        total_ways_t1 += count0*(count0-1)//2\n        total_ways_t1 += count1*(count1-1)//2\n        \n    if total_ways_t1 > 0:\n        print(\"1 \" + str(total_ways_t1))\n        return\n        \n    total_edges = m\n    t2_ways = 0\n    for i in range(1, n+1):\n        if not graph[i]:\n            continue\n        for j in graph[i]:\n            if comp_id[i] != comp_id[j]:\n                continue\n            w = n - len(components[comp_id[i]-1])\n            if w > 0:\n                t2_ways += total_edges * w\n                \n    if t2_ways > 0:\n        print(\"2 \" + str(t2_ways // 2))\n        return\n        \n    if n >= 3:\n        t3_ways = (n * (n-1) * (n-2)) // 6\n        print(\"3 \" + str(t3_ways))\n        return\n        \n    if n == 1 or n == 2:\n        if n == 1:\n            print(\"3 0\")\n        else:\n            print(\"2 0\")\n        return\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1323,
        "thoughts_token_count": 8191
    }
}