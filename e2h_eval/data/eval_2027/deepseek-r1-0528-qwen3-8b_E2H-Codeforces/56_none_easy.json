{
    "start": 1758293045.521262,
    "end": 1758293106.7092142,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:45 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nfrom itertools import permutations\n\ndef read_points(n):\n    points = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        points.append((x, y))\n    return points\n\ndef is_non_intersecting(p1, p2, p3, p4):\n    # Check if line segments (p1,p2) and (p3,p4) intersect\n    def orientation(p, q, r):\n        val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n        if val == 0:\n            return 0  # colinear\n        return 1 if val > 0 else 2  # clock or counterclock wise\n\n    o1 = orientation(p1, p2, p3)\n    o2 = orientation(p1, p2, p4)\n    o3 = orientation(p3, p4, p1)\n    o4 = orientation(p3, p4, p2)\n\n    if o1 != o2 and o3 != o4:\n        return True  # Segments intersect\n\n    if o1 == 0 and on_segment(p1, p3, p2):\n        return True\n    if o2 == 0 and on_segment(p1, p4, p2):\n        return True\n    if o3 == 0 and on_segment(p3, p1, p4):\n        return True\n    if o4 == 0 and on_segment(p3, p2, p4):\n        return True\n\n    return False\n\ndef on_segment(p, q, r):\n    return (min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and\n            min(p[1], r[1]) <= q[1] <= max(p[1], r[1]))\n\ndef main():\n    R, B = map(int, sys.stdin.readline().split())\n    rebels = read_points(R)\n    bases = read_points(B)\n\n    if R != B:\n        print(\"No\")\n        return\n\n    for perm in permutations(bases):\n        valid = True\n        for i in range(R):\n            for j in range(i + 1, R):\n                if is_non_intersecting(rebels[i], rebels[j], perm[i], perm[j]):\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom itertools import permutations\n\ndef read_points(n):\n    points = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        points.append((x, y))\n    return points\n\ndef is_non_intersecting(p1, p2, p3, p4):\n    # Check if line segments (p1,p2) and (p3,p4) intersect\n    def orientation(p, q, r):\n        val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n        if val == 0:\n            return 0  # colinear\n        return 1 if val > 0 else 2  # clock or counterclock wise\n\n    o1 = orientation(p1, p2, p3)\n    o2 = orientation(p1, p2, p4)\n    o3 = orientation(p3, p4, p1)\n    o4 = orientation(p3, p4, p2)\n\n    if o1 != o2 and o3 != o4:\n        return True  # Segments intersect\n\n    if o1 == 0 and on_segment(p1, p3, p2):\n        return True\n    if o2 == 0 and on_segment(p1, p4, p2):\n        return True\n    if o3 == 0 and on_segment(p3, p1, p4):\n        return True\n    if o4 == 0 and on_segment(p3, p2, p4):\n        return True\n\n    return False\n\ndef on_segment(p, q, r):\n    return (min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and\n            min(p[1], r[1]) <= q[1] <= max(p[1], r[1]))\n\ndef main():\n    R, B = map(int, sys.stdin.readline().split())\n    rebels = read_points(R)\n    bases = read_points(B)\n\n    if R != B:\n        print(\"No\")\n        return\n\n    for perm in permutations(bases):\n        valid = True\n        for i in range(R):\n            for j in range(i + 1, R):\n                if is_non_intersecting(rebels[i], rebels[j], perm[i], perm[j]):\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 488,
        "completion_token_count": 564,
        "thoughts_token_count": 0
    }
}