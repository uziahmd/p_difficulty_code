{
    "start": 1758294370.4466329,
    "end": 1758296405.3902366,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:40 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n We are given: n, h, m and then m lines of [l, r, x]\n Since n, m <= 50, we can use dynamic programming or iterate over possibilities, but note that the restrictions might overlap.\n\n Idea:\n We have to assign a height for each spot from 0 to h (with the condition that the house at spot i must be at most h).\n However, there are m restrictions that say: for each restriction i, the maximum height in [l_i, r_i] is at most x_i.\n\n We can think of it as: each house has a base maximum height of h (from the problem statement). Then, each restriction imposes that within its interval, no house can exceed x_i.\n\n But note: multiple restrictions may apply to the same house. The house must satisfy all restrictions that cover it. Therefore, for each house i, the maximum allowed height is the minimum value between h and the minimum of x_i from all restrictions that cover i.\n\n However, wait: is that correct? Actually, no. Because the restrictions are independent and we cannot simply take the minimum of all restrictions covering a house because if a house is covered by two restrictions, then the house must be ≤ min(x_i for those restrictions) and also ≤ h.\n\n But note: the problem says \"the tallest house from spots l_i to r_i (inclusive) must be at most x_i\". So for a house at position j, if it is included in a restriction (l_i, r_i, x_i), then the house at j must be ≤ x_i. And if there are multiple, then the house must be ≤ the minimum x_i of the restrictions that include j? \n\n However, consider: if we set a house to a value, then every restriction that covers it must have that value ≤ x_i. Therefore, the house must be ≤ the minimum x_i among all restrictions that include it, and also ≤ h.\n\n But note: the restrictions are not necessarily independent. There might be two restrictions that don't directly impose on the same house but interact via the entire segment.\n\n However, the problem does not require that we set the same house to the minimum of all restrictions? Actually, yes: because if a house is in two segments, then it must be ≤ the minimum x_i of the two restrictions.\n\n However, there is a catch: what if two restrictions impose conflicting constraints? Actually, the problem doesn't say they are consistent. But note the input constraints: the restrictions are given and we must satisfy all. If there is an inconsistency (like a house must be ≤ 1 and also ≤ 2 and then another restriction requires ≥2? No, because the constraints are only upper bounds. So if one restriction says ≤1 and another says ≤2, then the house must be ≤1. But if one restriction says ≤1 and another says ≤0, then the house must be ≤0.\n\n However, note: the problem does not say that the restrictions are consistent. But since we are maximizing profit, we must choose heights that satisfy all restrictions. If a house is forced to be 0 by one restriction and we have no other constraint, then we set it to 0.\n\n But wait: what if two restrictions give different constraints on the same house? We take the minimum. However, what if two restrictions don't cover the same house? Then we don't need to combine them for that house.\n\n However, the catch is that the entire street must satisfy all restrictions. So we cannot assign independently per house without considering the entire set of restrictions.\n\n Alternate approach:\n\n Step 1: Precompute for each house i, the maximum allowed height. Let max_allowed[i] = min(h, min_{for each restriction j that covers i} (x_j))\n\n However, wait: is that sufficient? Consider two restrictions that do not cover the same house but together force a constraint? Actually, no: the restrictions are about entire intervals. But note: the assignment must satisfy all restrictions. The above Step 1 would set each house to at most the minimum of all x_i from restrictions that cover it (and h). Then, we can set each house independently to any value from 0 to max_allowed[i]. Then the profit for house i would be (value)^2.\n\n But wait: is that correct? Consider a restriction: \"from l to r, the tallest house must be ≤ x\". If we set each house independently to the minimum of the restrictions that cover it, then the entire interval [l, r] will have all houses ≤ some value which is at most the minimum x_i in the restrictions covering that interval? Actually, no: because the restriction says the tallest house in [l, r] must be ≤ x_i. If we set each house in [l, r] to at most x_i, then the tallest house is ≤ x_i. But note: the same house might be constrained by multiple restrictions, so we set it to the minimum of all x_i that cover it",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built. Each house's height must comply with all restrictions that apply to its position.\n\n### Approach\n1. **Problem Analysis**: The problem involves assigning heights to houses such that each house's height does not exceed the minimum value among all restrictions covering its position and the global maximum height `h`. The goal is to maximize the sum of the squares of these heights.\n2. **Key Insight**: For each house position, the maximum allowable height is determined by the smallest value between `h` and the minimum of all `x_i` from restrictions that include this position. This ensures all restrictions are satisfied.\n3. **Algorithm Selection**: We preprocess each house's maximum allowable height by checking all relevant restrictions. Then, for each house, we choose the optimal height (from 0 to its maximum allowable height) that maximizes its contribution to the total profit. Since the profit function is convex (quadratic), the optimal height for each house is simply its maximum allowable height, as higher values yield higher profits.\n4. **Complexity Analysis**: The algorithm involves processing each house and each restriction once, leading to a time complexity of O(n*m), where `n` is the number of houses and `m` is the number of restrictions. Given the constraints (n, m ≤ 50), this approach is efficient.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    max_allowed = [h] * n\n    \n    for l, r, x_val in restrictions:\n        for i in range(l-1, r):\n            if x_val < max_allowed[i]:\n                max_allowed[i] = x_val\n    \n    total_profit = 0\n    for height in max_allowed:\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of houses `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Processing Restrictions**: For each restriction, the code checks all house positions covered by the restriction and updates their maximum allowable height to the minimum value encountered.\n3. **Calculating Profit**: After determining the maximum allowable height for each house, the code calculates the profit by summing the squares of these heights.\n4. **Output**: The total profit is printed as the result.\n\nThis approach efficiently ensures all restrictions are met while maximizing the profit by leveraging the properties of the quadratic profit function. The solution is both straightforward and optimal for the given problem constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    max_allowed = [h] * n\n    \n    for l, r, x_val in restrictions:\n        for i in range(l-1, r):\n            if x_val < max_allowed[i]:\n                max_allowed[i] = x_val\n    \n    total_profit = 0\n    for height in max_allowed:\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 814,
        "completion_token_count": 658,
        "thoughts_token_count": 1023
    }
}