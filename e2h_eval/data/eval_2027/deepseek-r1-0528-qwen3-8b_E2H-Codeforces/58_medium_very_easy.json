{
    "start": 1758300600.3721335,
    "end": 1758304456.6505415,
    "start-formatted": "2025-09-20 01:50 KST",
    "end-formatted": "2025-09-20 02:54 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing the problem:\n\n 1. If the graph already contains an odd-length cycle, then we don't need to add any edge (t=0). However, note that the problem says \"minimum number of edges to be added\", so if there's an odd cycle we can say t=0.\n\n 2. But note: the problem is asking for a simple cycle of odd length (more than one vertex). In graph theory, the smallest odd cycle is a triangle (length 3).\n\n 3. However, note that the graph might not be connected.\n\n Steps:\n\n We have to consider two main cases:\n\n Case 0: The graph already has an odd cycle -> then t=0, and w = 1 (if there's at least one) but actually we have to count the number of ways to add 0 edges? \n   But wait: the problem says \"minimum number of edges that must be added\", so if we already have an odd cycle, then we don't need to add any edge. \n   However, the problem also says \"to form a cycle of an odd length\", so if the graph already has one, then we don't need to add any edge. \n\n But note: the example input includes:\n   Input: '3 3\\n1 2\\n2 3\\n3 1' -> Output: '0 1'\n\n So, we need to check for the existence of an odd cycle.\n\n However, note that the problem asks for the minimum number of edges to add. It might be that we don't need to add any edge (if an odd cycle exists). \n\n How do we check for an odd cycle?\n   We can use BFS/DFS with colors (bipartite check). If the graph is not bipartite, then it contains an odd cycle.\n\n But note: the graph might be disconnected. So we have to check for each connected component.\n\n Let me restate:\n\n   Step 1: Check if the graph has any odd cycle (i.e., is the graph bipartite? If no, then there is an odd cycle -> t=0 and w=1? \n        However, note: the problem does not ask for the number of odd cycles, but the number of ways to add t edges (which in this case is 0) such that the graph forms an odd cycle. \n        But wait, if the graph already has an odd cycle, then we don't add any edge. So there is exactly 1 way to add 0 edges (do nothing) but only if the graph already has an odd cycle.\n\n   However, consider: what if the graph doesn't have an odd cycle? Then we have to add at least one edge.\n\n Case 1: t=0\n   Condition: graph is not bipartite (has an odd cycle)\n\n Case 2: t>=1\n\n   What are the possibilities?\n\n   We are allowed to add edges arbitrarily (without creating parallel edges or loops). We want the minimum number of edges to add to create an odd cycle.\n\n   Observation: \n\n   - The smallest odd cycle is a triangle (3 edges). But note: we might already have two edges of a triangle and need to add the third. Or we might have a path of two edges and we add one edge to complete a triangle? \n\n   However, note: the graph might have multiple components, and we are allowed to add edges arbitrarily (even between components). \n\n   But note: the problem says \"simple cycle of odd length\". \n\n   Possibilities for t=1:\n\n     Adding one edge might create an odd cycle. When?\n\n        Consider: if we have three vertices {a, b, c} such that edges (a,b) and (b,c) exist, then adding edge (a,c) would form a triangle (odd cycle). But note: we might also have an even cycle that becomes an odd cycle by adding an edge? \n\n        Actually, consider a square (4-cycle) which is even. If we add a diagonal, then we get two triangles (one of which is odd) and the square is broken. So adding one edge to an even cycle might create an odd cycle.\n\n        Example: \n          Graph: a-b-c-d (cycle of 4) and we add a-c. Then we have the cycle a-b-c-a (triangle) and cycle a-d-c-a (triangle). So one edge creates two odd cycles.\n\n        But note: the problem does not require the entire graph to become cyclic, just that after adding the edges, there exists at least one odd cycle.\n\n        So the minimal t could be 1.\n\n        Conditions for t=1:\n\n          There must exist an edge (u, v) that we can add such that in the graph the addition of (u,v) completes an odd cycle.\n\n          How can one edge create an odd cycle?\n\n          Consider: if there exists a path of even length (number of edges) between u and v, then adding (u,v) would form a cycle of odd length (because even + 1 = odd). \n          Conversely, if there is a path of odd length between u and v, then adding (u,v) would form a cycle of even length.\n\n          Therefore, to form an odd cycle by adding one edge (u,v), we require that the distance between u and v in the graph is even (so that the cycle length is even+1 which is odd).\n\n        However, note: we are allowed to add edges arbitrarily (any pair of vertices). But we cannot add an edge that already exists.\n\n        So, the minimal t is 1 if there exists at least one pair of distinct vertices (u, v) (with u < v) such that:\n            (u, v) is not present in the graph, and the distance between u and v (in the same connected component) is even.\n\n        But note: the graph might be disconnected. Then, the distance between u and v is defined only if they are in the same component. For different components, the distance is undefined (or we can consider it as infinity). \n\n        However, if we connect two vertices from different components, then the cycle we form must involve both components? Actually, no: because we are only adding one edge, we cannot form a cycle that involves two components (since a cycle requires the vertices to be connected in a closed loop). \n\n        Therefore, the edge must be within the same connected component? Actually, no: consider two separate triangles (each a connected component). Then if we connect two vertices from different triangles, we don't necessarily form a cycle. \n\n        But wait, if we have two connected components, each being a bipartite graph (so no odd cycle) and we connect two vertices from the same bipartition set (same color) of the two components? \n\n        Actually, the condition for forming an odd cycle when adding an edge (u, v) is that the distance from u to v (if they are in the same component) is even. \n\n        However, if they are in different components, then the distance is not defined (we can consider the distance as infinite). But then adding an edge between two different components doesn't form a cycle at all. \n\n        So, to form a cycle by adding one edge, the two vertices must be in the same connected component.\n\n        Therefore, the minimal t is 1 if there exists at least one edge (u, v) (not present) such that u and v are in the same connected component and the distance between u and v is even.\n\n        How many ways are there to add one edge to form an odd cycle?\n\n          We have to count the number of pairs (u, v) (with u < v) such that:\n            - (u, v) is not present in the graph.\n            - u and v are in the same connected component.\n            - the distance between u and v is even.\n\n        But note: the graph is undirected and without self-loops.\n\n        However, note: if the graph is bipartite (so no odd cycle), then the entire graph is bipartite. Then in each connected component, we can color the graph with two colors. Then the distance between two nodes in the same bipartite set is even, and between two nodes in different sets is odd.\n\n        Therefore, for a connected bipartite graph (with two parts, say part0 and part1), the pairs (u, v) that have even distance are the pairs within part0 and within part1.\n\n        So, the total ways for one edge addition is the sum over each connected component (which is bipartite) of:\n            ways_component = (size_component0 * size_component0 + size_component1 * size_component1)  [but wait: the edges we can add are only the missing ones]\n\n        However, note: the graph already has some edges. We are only counting the missing edges that satisfy the condition (even distance). \n\n        But wait: in the entire graph, the condition for forming an odd cycle by adding an edge (u,v) is that the distance between u and v is even (and they are in the same component). \n\n        However, the entire graph is bipartite (because we are in the case where there was no odd cycle). Then we can break the graph into connected components, each being bipartite.\n\n        But note: the graph might not be connected. Each connected component is bipartite (because the whole graph is bipartite? Actually, the graph is bipartite if and only if each connected component is bipartite). \n\n        So, we can compute for each connected component the two parts. Then, the number of edges we can add in that component that would create an odd cycle is the number of pairs of nodes in the same part (because then the distance is even) MINUS the edges that are already present.\n\n        But wait: the graph might have edges that are present. We cannot count edges that are already present.\n\n        However, note: the graph is given and we know which edges are present. We cannot simply use the part sizes because the graph might not be complete.\n\n        Alternative approach for t=1:\n\n          We are going to:\n\n          Step 1: Check if the graph is bipartite. If not, output (0,1).\n\n          Step 2: If the graph is bipartite, then we break the graph into connected components and for each component, we know the two parts.\n\n          Then, the condition for an edge (u, v) to create an odd cycle is that u and v are in the same part of the same component.\n\n          But note: the edge must not be present.\n\n          So, for each connected component, let the two parts be A and B (sizes |A| and |B|). Then, the total possible edges that we can add within A is C(|A|,2) minus the existing edges within A? \n\n          However, wait: in a bipartite graph, there are no edges within A or within B. Because the graph is bipartite. So the graph does not have any edges within A or within B.\n\n          But wait: the graph is given and we know the edges. However, the graph is bipartite, so by definition there are no edges within A or within B. \n\n          Then, the edges that are missing in the graph are all the edges that are not present. And the edges that are present are only between A and B.\n\n          Therefore, the edges we are allowed to add are:\n\n            All edges within A (because none are present) and all edges within B (because none are present) and all edges between A and B that are not present? \n\n          However, note: the problem forbids adding parallel edges, so we can only add edges that are not present. Since the graph is bipartite, the edges that are present are only between A and B. Therefore, the edges that are missing are:\n\n            Within A: all edges (because there are none) -> C(|A|,2)\n            Within B: all edges -> C(|B|,2)\n            Between A and B: we have to subtract the edges that are already present.\n\n          But note: the condition for forming an odd cycle by adding an edge (u, v) is that u and v are in the same part (so either both in A or both in B). \n\n          Therefore, the edges that would form an odd cycle are the edges we add within A and within B (because then the distance between u and v is even, and adding (u,v) makes an odd cycle).\n\n          However, wait: adding an edge between two nodes in A (which are in the same part) will form an odd cycle? \n\n          Example: Let the component be a single edge: then we have two nodes (say node1 in A, node2 in B) and no other nodes. Then the two parts are A={node1} and B={node2}. Then the edges that we can add are:\n            Within A: C(1,2)=0, within B: C(1,2)=0, and the edge between A and B is already present. Then we cannot add any edge? \n\n          Then what? Then the minimal t would be 2? \n\n          Example: Consider two triangles (two connected components, each a triangle). But wait, a triangle is not bipartite. So our graph is bipartite, so no triangle. \n\n          Actually, we are in the bipartite case, so no triangles. \n\n          Example: Two connected components, each being a single edge (so two edges). Then the graph has 4 nodes: {a,b} and {c,d}. \n          Component1: a-b, so A1={a}, B1={b}\n          Component2: c-d, so A2={c}, B2={d}\n\n          Now, we can add an edge within a component: \n            Component1: we can add edge (a,a) -> not allowed (loop). Or (a,b) is already present. So no edge to add in component1? \n            Component2: similarly, no edge to add.\n\n          Then we can add edges between components? But wait, the condition for forming an odd cycle requires that the two vertices are in the same connected component? \n\n          Actually, no: the cycle must be formed by the edges we add. But if we add an edge between two components, then we don't form a cycle until we have a path connecting the two endpoints of the edge. \n\n          However, note: we are only adding one edge. So if we add an edge between two vertices from two different components, then the graph becomes connected and we have a new component? Actually, the graph remains with one component? No, we merge two components. But then the cycle would require more edges. \n\n          Therefore, we cannot form a cycle by adding one edge between two components. \n\n          Then, how do we form an odd cycle? \n\n          We must form a cycle entirely within one connected component. \n\n          So, the edge we add must be within the same connected component. \n\n          Therefore, the minimal t is 1 only if there is at least one connected component that has at least one missing edge (within the same part) and the distance between those two vertices is even (which is always true for same part in bipartite graph). \n\n          But wait: in a bipartite graph, the distance between two nodes in the same part is even. So the condition is satisfied.\n\n          However, note: the graph is bipartite, so there are no edges within the same part. Therefore, the number of edges we can add in a component to form an odd cycle is the number of edges that are missing in the same part, which is C(|A|,2) + C(|B|,2) for that component.\n\n          But wait: the entire graph is bipartite, so the graph has no edges within A or within B. Therefore, the graph has no edges in the same part. \n\n          Then the total ways for t=1 is the sum over all connected components of [C(|A|,2) + C(|B|,2)].\n\n          However, wait: what if the graph is not complete? But the graph being bipartite doesn't mean it is complete. Actually, we are counting the edges that are missing in the same part. Since the graph is bipartite, the edges within A and within B are not present, and we can add them arbitrarily (as long as they are not present). But the graph doesn't have any edges within A or B, so all these edges are missing.\n\n          Therefore, the total ways for t=1 is the sum for each component i of [ (|A_i|*(|A_i|-1)//2 + (|B_i|*(|B_i|-1)//2 ).\n\n          But wait: is that correct? \n\n          Example: two-node graph (one edge). Then we have two nodes (a,b) and the edge (a,b). Then the graph is bipartite, with A={a}, B={b}. Then the ways for this component is (0 + 0) = 0. \n\n          Then we have to look at the entire graph: maybe another component? \n\n          Example: two-node graph with no edges. Then we have two nodes (a,b). Then the graph is bipartite, and the two parts are {a} and {b}. Then the ways for this component is 0 (because C(1,2)=0 and C(1,2)=0). \n\n          But wait, we can add the edge (a,b) and that would form an even cycle? \n\n          Actually, the cycle formed by adding (a,b) to two nodes is a cycle of length 2? But the problem states: \"simple cycle of an odd length, consisting of more than one vertex\". \n\n          A cycle must have at least 3 edges (3 vertices). So two nodes and one edge don't form a cycle. \n\n          Therefore, we cannot form a cycle by adding one edge to two nodes.\n\n          So we must have at least three nodes to form a cycle.\n\n          Correction: \n\n          The cycle must have more than one vertex (which is trivial) but typically a cycle has at least 3 edges (so 3 vertices). \n\n          Actually, the problem says: \"a simple cycle of an odd length\", and the length is the number of edges (or vertices). Typically, a cycle of length 3 is a triangle.\n\n          Therefore, we need at least three vertices to form a cycle.\n\n          So, for a component with two nodes, we cannot form a cycle by adding one edge (because we only have two nodes, and adding an edge gives two edges between two nodes, but that is not a cycle (it's just an edge and we cannot traverse a cycle of two edges because that would require two edges between two nodes, which is not allowed by the problem (no parallel edges) and also a cycle must have distinct vertices). \n\n          Therefore, we need at least three nodes in the same connected component to form a cycle by adding one edge.\n\n          In fact, the minimal cycle is a triangle, so we need three distinct nodes. \n\n          Then, the condition for a component is that it has at least three nodes. Then, the edges we can add are the edges within the same part (so if the component has three nodes, say two in A and one in B, then we can add edges within A (which is two nodes) and within B (one node, so 0). \n\n          Example: three nodes, two in A and one in B. Then the graph is bipartite, so edges are only between A and B. Then the edges present are from the two A's to the one B. So the graph has two edges. \n\n          Then, the edges we can add are the edge between the two A's (which is missing). Then adding that edge forms a triangle (which is odd). \n\n          Therefore, the formula for a component is: \n            ways_component = (number of edges we can add within the same part) = (C(|A|,2) + C(|B|,2))\n\n          But note: the graph is bipartite, so the graph does not contain edges within A or B, so we can add all C(|A|,2)+C(|B|,2) edges, and each one will form an odd cycle (because the distance between two nodes in A is even, so adding the edge forms an odd cycle).\n\n          However, wait: what if the graph is not complete? Actually, the graph being bipartite doesn't require that all edges between A and B are present. But we are only concerned with the edges within A and B (which are absent). \n\n          But note: the graph might not have all the edges between A and B. However, the condition for forming an odd cycle by adding an edge (u,v) is independent of the other edges. \n\n          However, the distance between two nodes in A: even. So the cycle created by adding (u,v) will be: the path from u to v (which is even) plus the edge (u,v) (which is one) -> odd. \n\n          But note: the existence of the path from u to v is guaranteed because they are in the same connected component (and we are in the bipartite graph, so the entire component is connected). \n\n          Therefore, the condition holds.\n\n          So, for t=1, the answer is (1, total_ways) where total_ways = sum_{each component} [ C(|A_i|,2) + C(|B_i|,2) ]\n\n          But wait: what if we have a component with four nodes (two in A and two in B) and we add an edge within A? Then the cycle formed is: the two nodes in A and the two edges from each to the two nodes in B? \n\n          Actually, the cycle would be: u (in A) -> v (in A) is the new edge, then from u to a node in B, then from that B to the other A (via the existing edges) and then back to u? \n\n          Actually, the cycle might be: u->v (new edge) and then from u to a B node, then to the other A node (via the existing edges from B to A) and then from that A node to v? \n\n          But wait, the graph is bipartite so the edges are only between A and B. So the path from u to v must go through an even number of edges. \n\n          Example: two nodes in A: u and v; two nodes in B: x and y.\n\n          Edges: u-x, u-y, v-x, v-y (if complete bipartite). Then the cycle: u->x->v->y->u: that's a cycle of length 4 (even). But wait, we added the edge (u,v). Then we have two cycles:\n\n          Cycle1: u->v->y->u (length 3: odd) -> yes, that cycle is odd.\n\n          So indeed, adding the edge (u,v) creates an odd cycle.\n\n          Therefore, the above reasoning holds.\n\n          However, note: the problem does not require that the entire graph is connected. We are only considering edges within the same connected component.\n\n Case 3: t=2\n\n   If we cannot form an odd cycle by adding one edge, then we try two edges.\n\n   Conditions for t=2:\n\n      We must add two edges. There are two possibilities:\n\n      Possibility 1: There is no edge that can form an odd cycle (so t=1 is not possible). Then we have to add two edges.\n\n      When is t=1 not possible? \n\n          - Either there is no connected component with at least one edge we can add (that is, every connected component has no missing edges in the same part? But wait, if the graph is bipartite, then the edges within the same part are missing. So unless the component is too small (less than 3 nodes) or the component is a single node, then we cannot form a cycle by adding one edge.\n\n          Actually, for a component with k nodes, we can form a cycle by adding one edge only if there are at least two nodes in the same part (so k>=3 and the two parts are non-empty). \n\n          But note: a component with one node: no edge can be added to form a cycle (needs at least two edges? Actually, no: one edge from a node to itself is a loop, which is not allowed). \n\n          A component with two nodes: we can add one edge, but that doesn't form a cycle (needs three distinct nodes). \n\n          So, the minimal t=1 is only available if there is at least one connected component that has at least three nodes and the two parts are non-empty (which they are in a bipartite graph with at least three nodes) and we can add an edge in the same part.\n\n          But wait: what if the graph is bipartite and has no connected component with at least three nodes? Then the largest component has two nodes. Then we cannot form an odd cycle by adding one edge. Then we have to consider two edges.\n\n      Possibility 2: Even if there is a component with three nodes, we might not be able to form an odd cycle by adding one edge if the graph is already complete? \n\n          Actually, in a bipartite graph, the complete bipartite graph on (|A|,|B|) has no edges within A or B. But wait, the graph being bipartite doesn't require that the bipartite graph is complete. \n\n          However, the condition for t=1 is that the edge we add is missing. So if the graph is not complete, then we can add the missing edges.\n\n          But note: the problem says the graph does not have parallel edges. So the graph is simple. \n\n          The issue: the graph is bipartite, but it might be missing edges. So we can always add edges within the same part (if they are missing). \n\n          However, if the graph is not bipartite, we already handled t=0.\n\n      Therefore, the minimal t is 1 if there exists at least one connected component with at least two nodes in the same part (so at least three nodes in the component) and the edge we add is missing. But wait, the graph being bipartite ensures that edges within the same part are missing. \n\n      So the only requirement is that the component has at least two nodes in the same part (which means at least three nodes in the entire component, because if the component has three nodes, then the bipartite split must be (1,2) or (2,1) or (3,0) but (3,0) is not bipartite? Actually, a component of three nodes must be split as (1,2) because a triangle is not bipartite. \n\n      Actually, a bipartite graph cannot have a triangle, so the split must be (1,2) for three nodes.\n\n      Then, the condition for a component with three nodes is that there are two nodes in one part and one in the other. Then the number of edges we can add is C(2,2)=1.\n\n      So the minimal t=1 is available if there is at least one connected component with at least two nodes in one part (which requires at least two nodes in the same part, so the component has at least two nodes in one part). \n\n      But note: a connected bipartite graph with two nodes: split (1,1) -> no edge within a part (since we need two nodes in the same part to form an edge). Then we cannot add an edge to form a cycle. \n\n      Therefore, t=1 is available if there is at least one connected component that is bipartite and has at least two nodes in the same part (so the component must have at least three nodes, and the bipartite split must not be (1,1) for two nodes, but for three nodes we have (1,2)).\n\n      Now, what if the graph is bipartite and has no component with at least three nodes? Then the graph has only components of size 1 or 2. Then we cannot form an odd cycle by adding one edge. Then we have to consider two edges.\n\n      How can we form an odd cycle by adding two edges?\n\n        We have two options:\n\n        Option 1: Add two edges in the same connected component. \n\n          Example: two separate edges (two components of two nodes). Then we can connect the two components by two edges? \n\n          Actually, we can form a cycle by:\n\n            Component1: {a,b} (edge a-b exists). Component2: {c,d} (edge c-d exists).\n\n            We can add edges (a,c) and (b,d). Then we have a cycle: a->c->b->d->a? That's a cycle of length 4 (even). \n\n            Alternatively, we can add edges (a,c) and (b,c). Then the cycle: a->c->b->a? But wait, we have edges: a-b, a-c, b-c. Then we have a triangle (a,b,c) which is odd.\n\n            So we can form an odd cycle by adding two edges.\n\n          How does that work? \n\n          We take two nodes from two different components (or even from the same component) and connect them appropriately.\n\n          Actually, we can also use the same component: if we have a component of two nodes (a,b) and we add two edges: (a,a) is invalid, (a,b) already exists, so we cannot add any edge in that component. Then we have to use multiple components.\n\n          Alternatively, we can use one component and merge it with others? \n\n          Actually, the minimal two-edge addition might be:\n\n            Case 1: Use two edges to form a triangle with two nodes from two different components and one node from one of them? \n\n          Actually, we need three distinct nodes. \n\n          Example: two components: \n            Component1: {a} (isolated node)\n            Component2: {b,c} (edge b-c)\n\n          Then we can add edges (a,b) and (a,c). Then we have a triangle (a,b,c). \n\n          Another example: two components, each isolated node: {a}, {b}, {c}. Then we can form a triangle by adding edges (a,b), (b,c), (c,a) but that requires three edges. However, we are allowed to add two edges. Then we cannot form a triangle with two edges. \n\n          With two edges, we can form a cycle of length 3? No, because a triangle requires three edges.\n\n          Wait, no: a cycle of length 3 requires three edges. \n\n          Then, what cycle can we form with two edges? \n\n          We cannot form a cycle with two edges (it would be two edges between two nodes, which is not allowed). \n\n          Then, how did the example above work? \n\n          Example: two components of two nodes each: \n            Component1: {a,b} with edge a-b.\n            Component2: {c,d} with edge c-d.\n\n          We add edges (a,c) and (b,c). Then the cycle is a-b-c-a (three edges: a-b, b-c, c-a). \n\n          But wait, we only added two edges: (a,c) and (b,c). Then the edges of the cycle are: \n            a-b (already present), a-c (added), b-c (added). \n\n          Then the cycle is a-b-c-a (three edges). \n\n          So the cycle uses the existing edge and the two added edges.\n\n          Therefore, the minimal t=2 is achieved by:\n\n            Find three distinct nodes (they can be in two or three components) such that by adding two edges we form a triangle (or an odd cycle of length 3). \n\n          Conditions for forming a triangle with two added edges:\n\n            We need three distinct nodes: x, y, z.\n\n            We must add two edges: say (x,y) and (y,z) [then the cycle is x-y-z and then we need the edge x-z? Actually, no: the cycle is x-y-z-x, so we need the edge x-z as well. \n\n          Actually, the cycle is formed by the edges: x-y (added), y-z (added), and the existing edge x-z? \n\n          But wait, if we add (x,y) and (y,z), then we have the edges x-y, y-z, and we need the edge x-z to complete the triangle. \n\n          However, the existing edge x-z might be present or not. \n\n          But note: the graph is bipartite. So if we are in the bipartite graph, then the edges must be between the two parts. \n\n          Example: Let the three nodes be in a bipartite graph. Then the three nodes must be colored as two in one part and one in the other. \n\n          Then, the edges we can add are between the two parts. \n\n          To form a triangle, we need three edges: (x,y), (y,z), (z,x). But in a bipartite graph, we cannot have an edge within the same part. \n\n          However, the triangle requires that the three edges are between the two parts. But in a triangle, the three edges must connect the three nodes in such a way that the graph is not bipartite. \n\n          Actually, a triangle is an odd cycle and cannot be bipartite. \n\n          But wait, we are in the bipartite graph and we are adding edges. The graph initially is bipartite. After adding edges, it may become non-bipartite.\n\n          However, the condition for forming an odd cycle is the existence of an odd cycle, regardless of the rest.\n\n          So, the method:\n\n          We need to choose three distinct nodes (x,y,z) and add two edges such that the three nodes form a triangle (all three edges) but wait, we are only adding two edges. \n\n          Actually, we are only adding two edges. Then the cycle is formed by the two added edges and one existing edge? \n\n          Example: \n            Nodes: x, y, z.\n            We have an existing edge between two of them, say (x,z).\n            Then we add edges (x,y) and (y,z). Then the cycle is x-y-z-x, which uses the existing edge (x,z) and the two added edges. \n\n          But wait, the edge (x,z) must be present. \n\n          Alternatively, we don't require the existing edge (x,z). Then we have to form the entire triangle by the two edges and one edge that is already present? \n\n          Actually, the cycle must be closed. So we need the edges: (x,y), (y,z), and (z,x). \n\n          We are adding two of these edges. Then the third edge must be present. \n\n          So, to form a triangle, we require that the third edge is present.\n\n          But in our bipartite graph, the edges are only between the two parts. \n\n          Example: Let the three nodes be split as (x,z) in part A and (y) in part B. Then the edges (x,y) and (z,y) are present (if they are in the graph) or not. \n\n          Then, if we have the edge (x,z) present, then we cannot have (x,z) because (x,z) is within the same part (A). But the graph is bipartite, so the edge (x,z) is not present. \n\n          Therefore, the third edge (x,z) is missing. \n\n          Then we cannot form the triangle by having the third edge present.\n\n          Alternatively, we can form a cycle of length 5? \n\n          Actually, the minimal odd cycle is 3, so we are forced to form a triangle. \n\n          Therefore, the two-edge addition must rely on an existing edge. \n\n          But note: the graph is bipartite, so we cannot have an edge within the same part. Therefore, the existing edge must be between the two parts. \n\n          Example: \n            Let the three nodes be: \n              x, y, z.\n            Parts: \n              A: {x, y} -> wait, no: if we have three nodes, the bipartite split must be (1,2) or (2,1). \n\n          Actually, let me assign:\n\n            Let the three nodes: x, y, z.\n\n            We want to form a triangle: x-y, y-z, z-x.\n\n            In a bipartite graph, we cannot have all three edges because the triangle is an odd cycle. \n\n            But wait: we are adding two edges. The graph initially is bipartite, so we can have at most the edges between the two parts. \n\n            Example: \n              Split: A = {x, z}, B = {y}. Then the existing edges can only be: x-y, z-y.\n\n            Then, to form the triangle, we need the edge x-z (which is within A) to be added. Then we have the edges x-y, z-y, and x-z. \n\n            Then the cycle: x-y-z-x is a triangle. \n\n            But note: the edge x-z is added. Then we have added one edge. \n\n            Then why two edges?\n\n          I see the confusion. \n\n          Actually, we are adding two edges. The above example only adds one edge (x-z). \n\n          How about: \n\n            We have three nodes: x, y, z.\n\n            The graph initially has no edges.\n\n            Then, to form a triangle, we must add three edges. But we are allowed to add two edges. \n\n            Then, we cannot form a triangle by adding two edges.\n\n          Then, how do we form an odd cycle with two edges?\n\n          Another idea: \n\n            Consider a cycle of length 5 (which is odd). But we are only adding two edges. \n\n            Example: five nodes. But that would require more existing edges.\n\n          Alternatively, consider merging two edges from two different components to form a cycle of length 3? \n\n          Actually, we need at least three distinct nodes. \n\n          Example: two separate edges (two K2's) and one isolated node. \n\n          We have three components: {a,b} (edge a-b), {c,d} (edge c-d), {e} (isolated).\n\n          Then, we can add two edges: (a,e) and (",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length, and the number of ways to add those edges. The solution involves checking the graph's bipartiteness and then analyzing connected components to find the required edges.\n\n### Approach\n1. **Check for Existing Odd Cycle (t=0)**: The graph already contains an odd cycle if it is not bipartite. In this case, no edges need to be added (t=0), and there is exactly one way to achieve this (do nothing).\n\n2. **Bipartite Graph Handling (t>=1)**: If the graph is bipartite, we need to find the minimal number of edges to add to create an odd cycle.\n   - **Single Edge Addition (t=1)**: For each connected component, count the number of missing edges within the same part (since adding such an edge creates an odd cycle). The total ways to add one edge is the sum of these counts across all components.\n   - **Two Edge Addition (t=2)**: If no single edge can create an odd cycle (i.e., no component has enough nodes in the same part), then we need to add two edges. This involves forming a triangle using existing edges and two new edges. The number of ways to do this is determined by selecting three nodes where two edges can be added to complete a triangle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            stack = [i]\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        stack.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        size = len(comp)\n        if size < 3:\n            continue\n            \n        col_count = [0, 0]\n        for node in comp:\n            col_count[color[node]] += 1\n            \n        part1 = col_count[0]\n        part2 = col_count[1]\n        ways_component = (part1 * (part1-1))//2 + (part2 * (part2-1))//2\n        total_ways += ways_component\n        \n    if total_ways > 0:\n        print(f\"1 {total_ways}\")\n        return\n        \n    t = 2\n    w = 0\n    for comp in components:\n        size = len(comp)\n        if size < 3:\n            continue\n            \n        col_count = [0, 0]\n        for node in comp:\n            col_count[color[node]] += 1\n            \n        part1 = col_count[0]\n        part2 = col_count[1]\n        ways_component = (part1 * (part1-1))//2 + (part2 * (part2-1))//2\n        if ways_component > 0:\n            w += ways_component\n            \n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            size1 = len(components[i])\n            size2 = len(components[j])\n            if size1 >= 2 and size2 >= 1:\n                w += size1 * size2\n                \n    print(f\"2 {w}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Graph Input Handling**: The input is read and parsed into a graph structure represented as an adjacency list.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component is not bipartite, the graph contains an odd cycle, so the answer is `0 1`.\n3. **Single Edge Addition**: For bipartite graphs, the number of ways to add one edge to form an odd cycle is calculated by counting missing edges within the same part of each connected component.\n4. **Two Edge Addition**: If no single edge can form an odd cycle, the solution involves adding two edges to form a triangle. This is done by either completing a triangle within a component or connecting nodes from different components.\n5. **Output**: The minimal number of edges (`t`) and the number of ways (`w`) to add them are printed based on the above checks. \n\nThis approach efficiently handles the problem by leveraging graph theory concepts like bipartiteness and connected components to determine the solution.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            stack = [i]\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        stack.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        size = len(comp)\n        if size < 3:\n            continue\n            \n        col_count = [0, 0]\n        for node in comp:\n            col_count[color[node]] += 1\n            \n        part1 = col_count[0]\n        part2 = col_count[1]\n        ways_component = (part1 * (part1-1))//2 + (part2 * (part2-1))//2\n        total_ways += ways_component\n        \n    if total_ways > 0:\n        print(f\"1 {total_ways}\")\n        return\n        \n    t = 2\n    w = 0\n    for comp in components:\n        size = len(comp)\n        if size < 3:\n            continue\n            \n        col_count = [0, 0]\n        for node in comp:\n            col_count[color[node]] += 1\n            \n        part1 = col_count[0]\n        part2 = col_count[1]\n        ways_component = (part1 * (part1-1))//2 + (part2 * (part2-1))//2\n        if ways_component > 0:\n            w += ways_component\n            \n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            size1 = len(components[i])\n            size2 = len(components[j])\n            if size1 >= 2 and size2 >= 1:\n                w += size1 * size2\n                \n    print(f\"2 {w}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1170,
        "thoughts_token_count": 8191
    }
}