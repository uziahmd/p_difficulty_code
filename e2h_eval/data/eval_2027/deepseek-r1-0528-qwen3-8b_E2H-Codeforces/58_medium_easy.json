{
    "start": 1758300859.9263322,
    "end": 1758304706.501237,
    "start-formatted": "2025-09-20 01:54 KST",
    "end-formatted": "2025-09-20 02:58 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing:\n  - An odd cycle must have at least 3 edges (triangle) and the length is odd (3,5,7,...).\n\n We consider two cases:\n\n Case 1: The graph already has an odd cycle.\n   Then t = 0 and w = 1? But wait: what if there are multiple odd cycles? Actually, note that the problem asks for the minimum number of edges to add to form an odd cycle. If there is already one, then t=0.\n\n However, note: the graph might have multiple odd cycles, but we are only concerned with the condition of having at least one odd cycle.\n\n But wait: the problem says \"form a simple cycle of odd length\". So if the graph already has such a cycle, then we don't need to add any edge.\n\n However, the example: \n   Input: \"3 3\\n1 2\\n2 3\\n3 1\" -> Output: \"0 1\"\n\n So if the graph is a triangle (odd cycle), then t=0 and w=1.\n\n But what if the graph has more than one odd cycle? Then we still don't need to add any edge. However, the problem says \"the minimum number of edges that must be added\", so if there is at least one odd cycle, then t=0. And w should be the number of ways to add 0 edges? But note: the problem says \"to form a cycle of an odd length\", and if the graph already has one, then we don't need to add any edge. However, note that the problem does not say we have to form exactly one cycle, but just that after adding edges (or not) the graph must contain one.\n\n But wait: the problem says \"the minimum number of edges that must be added\", so if the graph already has an odd cycle, then we don't add any.\n\n However, the example input \"3 0\" (three vertices, no edges) gives output \"3 1\", meaning we need to add 3 edges (which would form a triangle). \n\n So the problem breaks down as:\n\n  Step 1: Check if the graph already has an odd cycle.\n\n How to check for an odd cycle?\n   We can use BFS/DFS to check bipartiteness. A graph is bipartite if and only if it does not contain an odd cycle.\n\n   Alternatively, we can do:\n     For each connected component, try to color the graph with two colors. If we cannot color without conflict (with an odd cycle) then we have found one.\n\n   But note: the problem doesn't require to count the number of odd cycles, just whether there is at least one.\n\n   However, note: even if the graph is bipartite, we might still have an even cycle? But an even cycle is not an odd cycle.\n\n   So:\n      If the graph is not bipartite, then there exists an odd cycle -> t=0, but wait: we have to count the ways?\n\n   But wait: the problem says \"the number of ways to add t edges in order to form a cycle of an odd length\".\n\n   In the case t=0, we are not adding any edges. Then the graph must already have an odd cycle. However, note: the graph might have several odd cycles, but the way of adding 0 edges is unique (we do nothing). So w=1.\n\n   However, consider: what if the graph is not connected? Then we have multiple components. We only need one odd cycle to be present.\n\n   But wait: the example \"3 3\\n1 2\\n2 3\\n3 1\" is a triangle, so one odd cycle.\n\n   However, what if the graph is not bipartite? Then we have at least one odd cycle.\n\n   Therefore, if the graph is not bipartite, we output \"0 1\".\n\n Case 2: The graph is bipartite (so no odd cycle). Then we must add some edges.\n\n   Now, what is the minimum number of edges to add to create an odd cycle?\n\n   Note: an odd cycle requires at least 3 edges and the cycle must be of odd length.\n\n   Consider:\n\n   Since the graph is bipartite, we can color the graph with two colors (say black and white). Then any edge we add between two nodes of the same color will create an odd cycle? Why?\n\n   Because consider: a path from a node u to v in the original graph has a certain parity. Suppose u and v are in the same color. Then the original path between them (if exists) must be of even length? Actually, in a bipartite graph, the color of a node is fixed and the distance between two nodes of the same color must be even. Then, if we add an edge between two same-colored nodes (say black), then we form a cycle: the path from u to v (even length) and then the new edge (1 edge) -> total cycle length = even + 1 = odd.\n\n   However, note: the entire graph might not be connected. But each connected component is bipartite.\n\n   Therefore, if we add one edge between two nodes of the same color (in the same connected component or different ones?) then:\n\n   - If we add an edge within the same connected component: then the cycle formed is the existing path (which is even) plus the edge (odd cycle).\n   - If we add an edge between two nodes of the same color in different connected components, then we need to consider: the entire cycle would go from u to v via the first component and then back via the second component? Actually, no: the two nodes are in separate components, so without the new edge, there's no path. The new edge creates a cycle that goes from u to v (via the first component) and then back from v to u (via the second component? but wait, how do we connect the two components? Actually, the cycle is: u to v by the new edge, and then we must have two distinct paths from u to v? But without the new edge, u and v are disconnected. So the cycle must use the new edge and two distinct paths from u to v (one in each component)? \n\n   Actually, no. The two components are separate. After adding the edge, we have a cycle: u - (new edge) - v, but that is just two edges (unless we have self-loop, but we don't). To form a cycle, we need to traverse from u to v and then back from v to u. But the only way is to go from u to v by the new edge and then we need a path from v to u in the graph. But there isn't one because they are in different components. So the cycle is not formed by connecting two separate components by one edge.\n\n   Therefore, the edge must be added within the same connected component.\n\n   However, wait: consider two separate triangles (each is an odd cycle) but that's not bipartite. In our case, the graph is bipartite so no odd cycle exists. \n\n   Let me clarify: the graph is bipartite, so we can split the graph into connected components, each being bipartite.\n\n   Now, to form an odd cycle by adding edges, we must create an odd cycle. The smallest odd cycle is a triangle (length 3). \n\n   How can we form a triangle? We need three nodes that are connected by edges, but the cycle must be simple.\n\n   However, note: the graph is bipartite, so there are no edges between two nodes of the same color. Therefore, we cannot form a triangle (which is a complete graph on 3 nodes) because in a bipartite graph, the triangle would require an edge between two nodes of the same color (since the two endpoints of the edge must be different colors, but then the third node must be connected to both, which would force the third node to be the same color as one of the two, leading to an edge between two same colors).\n\n   Actually, the minimal odd cycle we can form is by connecting two nodes in the same connected component? Or maybe we can form an odd cycle by adding two edges?\n\n   Example: consider a path of two edges (which is even, so the graph is bipartite) and we have two nodes of the same color (say u and w, with u--v--w). Then if we add the edge u-w, we get a triangle (u->v->w->u) which is an odd cycle (3 edges). So we can form an odd cycle by adding one edge.\n\n   But wait: what if the two nodes are in the same connected component? Then we have a path (even length) and adding the edge creates an odd cycle.\n\n   What if the two nodes are in different connected components? Then we cannot form a cycle by adding one edge, because there's no path from u to w without the new edge.\n\n   Therefore, the minimal t is 1, provided that there exists at least one pair of distinct nodes in the same connected component that are the same color (i.e., we can form an odd cycle by adding one edge). \n\n   However, note: in a connected bipartite graph, we can choose any two nodes of the same color? Actually, the entire component is colored with two colors. The set of nodes of one color is independent. So the number of edges we can add within the same color is C(|black|,2) + C(|white|,2) for that component.\n\n   But wait: the problem says we can only add edges without creating parallel edges or loops. So we are allowed to add any edge that is not present.\n\n   However, what if the graph is bipartite and we cannot form an odd cycle by adding one edge? Then we must add more.\n\n   Actually, we can always form an odd cycle by adding one edge if there exists at least one connected component that has at least two nodes of the same color? \n\n   But note: if a connected component has at least two nodes, then one of the color classes has at least ceil(n/2) nodes. However, if a connected component has only one node, then we cannot form an edge (since we need two distinct nodes). \n\n   However, if the graph has multiple connected components, then we can form an odd cycle by adding one edge if at least one connected component has at least two nodes (so that we have two nodes of the same color). \n\n   But wait: even if the graph has two connected components, each with two nodes, then we can form an odd cycle by adding an edge in one of the components. \n\n   However, what if the graph is bipartite and has no connected component with two or more nodes of the same color? \n\n   Actually, in a connected bipartite graph with at least two nodes, the two color classes are non-empty. But note: if a connected component has exactly two nodes, then one color class has 1 node and the other has 1 node. Then we cannot add an edge within the same color (because we need two distinct nodes of the same color). \n\n   Example: two nodes connected by an edge. The graph is bipartite. The two nodes are of different colors. Then we cannot add an edge between two nodes of the same color in this component. But we can add edges from this component to another? However, the two nodes are the entire component. \n\n   So we must look for a connected component that has at least two nodes of the same color. \n\n   Conditions for one edge to form an odd cycle: \n        There exists a connected component (with at least one edge? actually, even without edges, we have isolated nodes, but we need two nodes of the same color to form an edge) and two nodes of the same color that are not adjacent (but in the graph they are not adjacent because the graph is bipartite and same-color edges are not present).\n\n   Actually, the graph being bipartite means that there are no edges between same-color nodes. Therefore, we can add any edge between two same-color nodes in the same connected component (provided that the edge is not present). \n\n   But wait: the graph may already have some edges. The condition for forming an odd cycle by adding one edge is that there exists a pair of distinct nodes (u, v) in the same connected component such that:\n        color[u] == color[v] and (u, v) is not an edge.\n\n   However, note: if the graph is complete bipartite, then we cannot add edges within the same color? Actually, the graph is bipartite and initially has edges only between the two colors. So in a connected bipartite graph, the edges are only between the two colors. Therefore, the edges within the same color are absent.\n\n   Therefore, the minimal t is 1 if there is at least one pair (u, v) (same color, same component) that is not connected by an edge (which is always true because the graph is bipartite and the edge is not present). \n\n   But wait: what if the graph is a complete bipartite graph? Then we cannot add an edge within the same color because the graph is complete bipartite and the edges within the same color are missing, but note: in a complete bipartite graph, the edges are only between the two parts. The same color nodes are not connected, so we can add edges arbitrarily between same color nodes? \n\n   However, note: the graph is not necessarily complete. The problem says the graph doesn't have parallel edges or loops. So if the graph is complete bipartite, then the edges between the two parts are all present, but the edges within the same part are absent. So we can add edges within the same part.\n\n   Therefore, the minimal t is 1 if there exists at least one connected component with at least two nodes of the same color (i.e., the component has at least two nodes, and then we can choose two same-colored nodes and add the edge). \n\n   However, what if the graph is bipartite and has no two nodes of the same color in any component? Then the minimal t would be more than 1.\n\n   When does a connected bipartite graph have no two nodes of the same color? Only when the component has exactly one node. Because then the color class has one node and the other color class has zero. But wait, we can have a connected bipartite graph with two nodes? Then the two nodes must be of different colors. So we have two color classes: one with one node and the other with one node. Then we cannot add an edge in that component (because we need two nodes of the same color). \n\n   Therefore, if the entire graph consists of isolated nodes (each connected component is a single node), then we cannot form an odd cycle by adding one edge. \n\n   Then we must add two edges? \n\n   Actually, we can form a triangle by connecting three nodes. But note: three nodes must be chosen. Each node is isolated. Then we can form a triangle by adding three edges. But also, we can form a triangle by connecting three nodes with three edges. However, is there a way to form an odd cycle with fewer than three edges? No, because the smallest odd cycle is a triangle (3 edges).\n\n   But wait: we can also form a pentagon (5 edges) but that requires more edges. So the minimal is 3.\n\n   However, consider: we can form a triangle by connecting three nodes. The graph is currently a set of isolated nodes. We need to add three edges.\n\n   Alternatively, what about a 3-node cycle? We need to add three edges.\n\n   But wait: can we form a 5-node cycle by adding two edges? No, because a 5-node cycle requires 5 edges. We start with 0 edges and we have 5 isolated nodes. We need to add 5 edges. But wait, we can also form an odd cycle by connecting two nodes and then using a path of even length from one to the other and then connecting back? But we are starting from isolated nodes.\n\n   Actually, let me think: we have three nodes: A, B, C. We need to form a triangle. We must add the three edges (A-B, B-C, C-A). \n\n   Now, what if we have four nodes? Then we can form a triangle by connecting three of them (and leave the fourth out). Then we need to add 3 edges.\n\n   But wait: is there a possibility to form an odd cycle by adding two edges? \n\n   Example: Consider four isolated nodes. We add two edges: say we connect two pairs (A-B and C-D). Then we have two edges. Is there an odd cycle? No. \n\n   Then we add two edges: A-B and A-C. Then we have a path from B to C (via A) of length 2 (even) and no cycle. \n\n   Then we add a third edge: A-B, A-C, and B-C: then we have a triangle.\n\n   Another idea: what if we have two connected components, each being an edge (so two nodes connected by an edge). Then the graph is bipartite. We can add one edge in one of the components? But wait, each component is two nodes (so two colors). Then we cannot add an edge in one of the components (because the two nodes are the entire component and they are different colors). Then we have to connect the two components. \n\n   How? We can connect the two components by an edge. Then we form a cycle of length 4 (even) and that's not odd. \n\n   Then we need to add two edges: one to connect the two components and one more edge to form an odd cycle? \n\n   Actually, we can form an odd cycle by adding two edges if we have two edges in the same connected component? \n\n   Alternatively, consider: we have two separate edges (two separate connected components, each an edge). Then we can pick one edge (say component1: A-B) and then we want to form a triangle. We need a third node. But we don't have a third node in that component. So we can take a node from the other component. \n\n   Steps:\n        Component1: A-B (edge exists)\n        Component2: C-D (edge exists)\n\n   We want to form a triangle. We can do: \n        Add edge A-C and then we have a path A-B and then from B to C? But there's no edge from B to C. Then we must also add B-C? Then we have edges: A-B, A-C, B-C -> triangle.\n\n        Alternatively, we could form a triangle by taking two nodes from one component and one from the other? But in one component we have two nodes (different colors). Then we cannot form an edge between two nodes of the same color in that component. But we can add edges between different components.\n\n   Actually, the cycle must be contained in the graph. So we can form a cycle by including nodes from multiple components? \n\n   But note: the definition of a cycle requires the edges to be consecutive and the vertices distinct. However, the edges we add can connect different components.\n\n   Example: \n        Component1: {A, B} (edge A-B)\n        Component2: {C, D} (edge C-D)\n\n        We add edges A-C and B-D. Then we have a cycle: A->B->D->C->A? That's a cycle of length 4 (even). \n\n        Alternatively, we add edges A-C and B-C. Then we have a cycle: A->B->C->A (length 3, odd). \n\n        So we can form an odd cycle by adding two edges.\n\n   Therefore, the minimal t is 1 if there is at least one connected component (with at least two nodes) that has at least two nodes of the same color (so that we can add an edge and form an odd cycle). Otherwise, we must add at least two edges.\n\n   But wait: we might be able to form an odd cycle by adding two edges even if there is a component with two same-colored nodes? \n\n   Actually, we are looking for the minimal t. So if we can form an odd cycle by adding one edge, then we don't consider two edges.\n\n   However, what if the graph is bipartite and has no two same-colored nodes in the same component? Then we cannot form an odd cycle by one edge. Then we consider two edges.\n\n   How to form an odd cycle by two edges?\n\n   We need to form a triangle. The triangle must consist of three distinct nodes. The three nodes must have an odd cycle. Since the graph is bipartite, we cannot have an edge between two nodes of the same color. Therefore, the three nodes must be of alternating colors? But wait: a triangle has three edges. The edges must connect nodes of different colors. Then the coloring of the triangle must be alternating: node1 (color0) -> node2 (color1) -> node3 (color0) -> node1 (color0). But then the edge from node3 to node1 is an edge between two color0 nodes, which is forbidden in a bipartite graph. \n\n   However, we are going to add edges. The original graph is bipartite, and we are going to add edges arbitrarily (as long as no parallel or loop). \n\n   But note: we are allowed to break the bipartiteness by adding edges? Actually, the problem doesn't require the graph to remain bipartite. We just want to form an odd cycle.\n\n   The odd cycle we form by two edges: \n\n        Example: We have two edges that we add. We need to form a cycle of odd length. The minimal odd cycle is 3, so we need a triangle.\n\n        How many edges are needed for a triangle? Three edges.\n\n        But wait: we are adding two edges. Then we have two edges. Then the cycle must be of length 3, so we must have three edges. Therefore, we must have had one edge already. \n\n        However, the graph is bipartite, so initially the edges are only between the two colors. \n\n        Example: We have three nodes: A, B, C. We are going to add two edges. \n\n        We cannot form a triangle with two edges. \n\n        Alternatively, we can form a cycle of length 5? \n\n        Example: \n            Start with a path: A-B-C-D-E, but wait, we don't have that. We start with isolated nodes.\n\n        Actually, we can form a cycle of length 5 by adding two edges? \n\n        We need five edges for the cycle, but we are only adding two. So the rest must be present. \n\n        Alternatively, we can use existing edges. \n\n        Let me reexamine: \n\n        The minimal t is the minimum number of edges to add to form an odd cycle. \n\n        Case 1: t=0 -> if already exists an odd cycle.\n\n        Case 2: t=1 -> if we can form an odd cycle by adding one edge (i.e., the graph is bipartite and there exists two same-colored nodes in the same component with no edge between them).\n\n        Case 3: t=2 -> ?\n\n        Example: We have two edges in two separate components (each an edge). Then we can form an odd cycle by adding two edges (connecting the two components appropriately). \n\n        How? \n            Component1: {A,B} (edge A-B)\n            Component2: {C,D} (edge C-D)\n\n            We add edges A-C and B-C. Then we have edges: A-B, C-D, A-C, B-C.\n\n            Then the cycle: A->B->C->A (edges: A-B, B-C, C-A) -> triangle.\n\n            But note: the edge A-B is already present. Then we added two edges: A-C and B-C.\n\n            However, wait: the edge B-C is an edge between two nodes that were originally in different components. This edge is allowed because the graph wasn't necessarily connected. \n\n            But note: the graph was bipartite. The coloring: \n                Component1: A (color0), B (color1)\n                Component2: C and D: we can color them arbitrarily (since disconnected). Let's color C as color0, D as color1.\n\n            Then the edge A-C: color0 to color0 -> same color, so this edge breaks bipartiteness. Similarly, B-C: color1 to color0 -> okay. \n\n            However, the problem does not require the graph to remain bipartite. We just need to form an odd cycle.\n\n        But note: the problem says \"minimum number of edges\". So if we can form an odd cycle by two edges, and we cannot by one, then t=2.\n\n        How about a general method?\n\n        We have two possibilities for t:\n\n          t=0: if the graph is not bipartite (already has an odd cycle).\n\n          t=1: if the graph is bipartite and there exists at least one connected component (with at least two nodes) that has at least two nodes of the same color (so that we can add an edge and form an odd cycle).\n\n          t=2: if the graph is bipartite and no component has two same-colored nodes (meaning every component is either a single node or two nodes (with two colors)), then we must add two edges.\n\n          t=3: if the graph is bipartite and has no edges and no two same-colored nodes (so all components are isolated nodes) then we need to form a triangle (three edges).\n\n        But wait: what if the graph has some edges and is bipartite, but no component has two same-colored nodes? Then the graph consists of components that are either:\n            - single nodes, or\n            - two nodes connected by an edge.\n\n        Then we cannot form an odd cycle by adding one edge (because no two same-colored nodes in the same component). Then we try two edges.\n\n        Example: two isolated nodes and one edge (two-node component). Then we have two components: one two-node and two one-nodes.\n\n        How to form an odd cycle? We can use two edges:\n\n            Option 1: Use the two-node component and two isolated nodes. \n                Let the two-node component be {A,B} (edge A-B) and the isolated nodes be C and D.\n\n                We can form a triangle by adding edges A-C and B-C (then we have edges: A-B, A-C, B-C). This uses two edges.\n\n            Option 2: Use two isolated nodes and one edge from the two-node component? Actually, we need three distinct nodes for a triangle.\n\n        Therefore, in this case t=2.\n\n        But wait: what if we have two two-node components? \n            Component1: {A,B} (edge A-B)\n            Component2: {C,D} (edge C-D)\n\n            Then we can form a triangle by adding two edges: A-C and B-C (then we have triangle A-B-C). \n\n            Alternatively, we could form a triangle by connecting A, B, and C (using two edges). \n\n        Now, what if we have three isolated nodes? Then we cannot form a triangle by two edges (because we need three edges). Then we must use three edges.\n\n        Therefore, the minimal t is:\n\n          0: if the graph is not bipartite.\n\n          Otherwise, if the graph is bipartite:\n\n            Let the graph have k connected components.\n\n            For each component, we know its two color classes: (black_i, white_i)\n\n            Then, the number of edges we can add to form an odd cycle with one edge is the sum over components of [C(black_i, 2) + C(white_i, 2)].\n\n            However, we are not counting the ways for t=1, but the minimal t.\n\n            We are to find the minimal t, and then the number of ways to add t edges (without creating parallel edges or loops) that form an odd cycle.\n\n        So:\n\n          t=0: if the graph is not bipartite.\n\n          t=1: if the graph is bipartite and there exists at least one component i such that black_i>=2 OR white_i>=2.\n\n          t=2: if the graph is bipartite and no component has a color class with at least 2 nodes, but there is at least one edge in the graph (so we can use existing edges to form the odd cycle by adding two edges) OR even if there are no edges, but we have at least two nodes (so we can form a triangle by adding two edges? Actually, no: two edges cannot form a triangle. But wait, we considered above that two edges can form a triangle if we have an existing edge. \n\n        Actually, let's break down the bipartite graph:\n\n          Condition for t=1: \n            There exists a connected component (with at least two nodes) that has at least two nodes of the same color.\n\n          Condition for t=2:\n            Either:\n              (a) The graph is bipartite, and there is no component with two same-colored nodes (so every component is either isolated nodes or two-node components) AND the graph has at least one edge (so we can use an existing edge and then add two edges to form a triangle) OR \n              (b) The graph is bipartite, and there is no component with two same-colored nodes AND the graph has no edges, but we have at least two components? Actually, no: if the graph has no edges and no two same-colored nodes, then we have only isolated nodes. Then we cannot use condition (a) because there are no edges. Then we must use three edges (t=3).\n\n        Actually, we must consider:\n\n          Let the graph be bipartite. Then:\n\n          - If there exists a component with more than two nodes, then we can form an odd cycle by adding one edge (if the component has at least two nodes of the same color, which is true if the component has at least three nodes, because then the two color classes are unbalanced).\n\n          - If all components are of size 1 or 2, then:\n\n            For components of size 1: no edge can be added (only one node) and no two same-colored nodes.\n\n            For components of size 2: each has one black and one white. Then we cannot add an edge in the same component (because we would need two same-colored nodes, but we only have one per color). \n\n            Now, we can add edges between different components. \n\n            How can we form an odd cycle by adding edges?\n\n            We need an odd cycle. The smallest is 3. \n\n            We can form a triangle by:\n\n              Option 1: Take two nodes from two different two-node components and one node from a one-node component. But wait, we have to use three distinct nodes.\n\n              Actually, we can form a triangle by connecting three nodes from three different two-node components? \n\n              Example: \n                Component1: {A,B} (edge A-B)\n                Component2: {C,D} (edge C-D)\n                Component3: {E,F} (edge E-F)\n\n                We can form a triangle by adding edges A-C, C-E, E-A? Then we have a triangle. But note: the edges we add: A-C (between two different two-node components), C-E (again between two two-node components), and E-A (again). \n\n                Then we have a cycle of length 3.\n\n                However, the original graph has edges A-B, C-D, E-F. \n\n                The triangle is A-C-E-A. \n\n                Now, what is the bipartite coloring? Initially, we can color the two-node components arbitrarily. We can assign:\n\n                  Component1: A:black, B:white.\n                  Component2: C:black, D:white.\n                  Component3: E:black, F:white.\n\n                Then the edges we add: A-C (black-black) -> invalid for bipartite, but we are allowed to break bipartiteness.\n\n                Then we form an odd cycle.\n\n                How many edges did we add? 3.\n\n            Alternatively, we can use two edges from two two-node components and one one-node component? \n\n            Example: \n                Component1: {A,B} (edge A-B)\n                Component2: {C,D} (edge C-D)\n                Component3: {E} (isolated)\n\n            Then we can form a triangle by adding edges A-C and A-E and C-E? That's three edges.\n\n            Or: we can form a triangle by using two edges from one two-node component and one edge from another? \n\n            Actually, we cannot form a triangle with two edges because we need three edges.\n\n            Therefore, the minimal t is:\n\n                t=0: if the graph is not bipartite.\n\n                t=1: if the graph is bipartite and there exists a component with at least two nodes of the same color (which happens if the component has at least 3 nodes, because then the two color classes are not equal).\n\n                t=2: ??? \n\n            Actually, I think I made a mistake earlier. The example with two two-node components: we can form an odd cycle by adding two edges? \n\n            Example: two two-node components: {A,B} and {C,D}. \n\n            We add edges A-C and B-C. Then we have a triangle A-B-C. \n\n            Why is that? \n                Original edges: A-B, C-D.\n                Added edges: A-C, B-C.\n\n                Cycle: A->B->C->A (edges: A-B, B-C, C-A). \n\n                This is a triangle.\n\n            How many edges did we add? Two.\n\n            And the coloring: \n                Component1: A:black, B:white.\n                Component2: C:black, D:white. (But wait, we can recolor the second component arbitrarily? Actually, the graph is bipartite initially, but when we add edges we break the bipartiteness. The condition for forming an odd cycle is just the existence of the cycle.)\n\n            But note: the problem does not require the graph to remain bipartite. \n\n            Therefore, in the bipartite graph with two two-node components, we can form an odd cycle by adding two edges.\n\n            Similarly, if we have one two-node component and two isolated nodes, we can form an odd cycle by adding two edges.\n\n            So the condition for t=2 is:\n\n                The graph is bipartite and there is no component with two same-colored nodes (so each component is either a singleton or a two-node component) and the total number of edges in the graph is less than the maximum edges (so we can form a triangle by connecting two edges to an existing edge or by connecting three nodes from three different components?).\n\n            But wait: the example with three two-node components: we can form an odd cycle by adding two edges? \n\n            Example: three two-node components: {A,B}, {C,D}, {E,F}. \n\n            We add two edges: A-C and C-E. Then we have a path A-C-E, but no cycle. \n\n            Then we need three edges to form a triangle. \n\n            Alternatively, we add three edges: A-C, C-E, E-A -> triangle.\n\n            But wait, we can form a cycle of length 5 (odd) by adding two edges? \n\n            Example: \n                We have a two-node component {A,B} and two isolated nodes {C,D}. \n                We add edges A-C and C-B. Then we have edges: A-B, A-C, C-B. Then the cycle: A->B->C->A (edges: A-B, B-C, C-A) -> triangle. \n\n            But wait, we used two edges (A-C and C-B) and the existing edge A-B. \n\n            So the condition for t=2 is that the graph is bipartite and there is no component with two same-colored nodes (so no component with >=3 nodes) and the graph has at least one edge (so we can use an existing edge) OR if the graph has no edges, then we cannot form an odd cycle by two edges (we need three). \n\n            Actually, if the graph has no edges, then the entire graph is isolated nodes. Then we cannot use an existing edge. Then we must add three edges to form a triangle.\n\n            Therefore:\n\n                t=0: if not bipartite.\n\n                t=1: if bipartite and there exists a component with at least 3 nodes (so that the two color classes have sizes (k, l) with k>=2 or l>=2, but actually if the component has n nodes, then the color classes are floor((n+1)/2) and ceil((n-1)/2)). Actually, the maximum color class size is ceil(n/2). So if n>=3, then ceil(n/2) >= 2.\n\n                t=2: if bipartite and no component has a color class of size>=2 (so all components are of size<=2) and the graph has at least one edge (so we can use an existing edge to complete a triangle by adding two edges).\n\n                t=3: if bipartite and no component has a color class of size>=2 (so all components are of size<=2) and the graph has no edges (so we must form a triangle from scratch, which requires three edges).\n\n            But wait: what if the graph is bipartite and has one component of size 3? Then we have a color class of size 2 (because 3 nodes: two of one color, one of the other). Then t=1.\n\n            What if the graph is bipartite and has two components: one of size 3 and one of size 1? Then t=1 (because the component of size 3 gives two same-colored nodes).\n\n            What if the graph is bipartite and has two components: one of size 2 and one of size 2, and no edges? Actually, no: two-node components must have one edge (otherwise they wouldn't be connected). \n\n            Correction: the graph is given, and the two-node components are connected by an edge.\n\n            However, the graph might have two-node components without edges? No, because a two-node component (connected) must have the edge. \n\n            Actually, the graph is given as connected components. We are told the graph has m edges.\n\n            Steps:\n\n            Step 1: Check if the graph is bipartite (overall",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length. Additionally, we need to count the number of ways to add these edges without creating loops or parallel edges.\n\n### Approach\n1. **Check for Bipartiteness**: A graph is bipartite if it can be colored with two colors such that no two adjacent nodes have the same color. If the graph is not bipartite, it already contains an odd-length cycle, so the answer is `0 1`.\n2. **Component Analysis**: If the graph is bipartite, analyze each connected component:\n   - **Components with ≥3 Nodes**: These components will always allow forming an odd cycle by adding one edge (since they contain at least two nodes of the same color). The number of ways to add such an edge is the combination of choosing any two nodes from the same color group.\n   - **Components with ≤2 Nodes**: For components with two nodes, they must be connected by an edge. To form an odd cycle, we either:\n     - Use existing edges in the graph and add two more edges to form a triangle.\n     - Add three edges from scratch if there are no existing edges.\n3. **Determine Minimum Edges (t)**:\n   - **t=0**: Graph is not bipartite.\n   - **t=1**: Graph is bipartite and has at least one component with ≥3 nodes.\n   - **t=2 or t=3**: Graph is bipartite with all components of size ≤2. The exact value depends on whether existing edges are present.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_count += 1\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        comp_nodes.append(neighbor)\n                        q.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append((comp_nodes, comp_count))\n            for node in comp_nodes:\n                comp_id[node] = comp_count\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_1 = 0\n    for comp in components:\n        nodes = set(comp[0])\n        black = 0\n        white = 0\n        for node in nodes:\n            if color[node] == 0:\n                black += 1\n            else:\n                white += 1\n        total_ways_1 += black*(black-1)//2 + white*(white-1)//2\n        \n    if total_ways_1 > 0:\n        print(\"1\", total_ways_1)\n        return\n        \n    total_edges = m\n    ways_2 = 0\n    ways_3 = 0\n    \n    for comp in components:\n        nodes = set(comp[0])\n        if len(nodes) == 1:\n            continue\n        elif len(nodes) == 2:\n            ways_2 += 1\n            \n    if ways_2 > 0 and total_edges > 0:\n        print(\"2\", ways_2)\n        return\n        \n    if ways_2 > 0 and total_edges == 0:\n        print(\"3\", 1)\n        return\n        \n    if ways_2 == 0:\n        print(\"0 1\")\n        return\n        \nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The graph is checked for bipartiteness using BFS. If during BFS, a node is found with the same color as its parent, the graph is not bipartite, and the answer is `0 1`.\n2. **Component Analysis**: For each bipartite component, the number of nodes of each color is counted. If any component has at least two nodes of the same color, the answer is `1` followed by the number of ways to choose two nodes from the same color group.\n3. **Edge Calculation**: If no component allows forming an odd cycle with one edge, the solution checks for existing edges. If there are existing edges, the minimal edges needed are `2`; otherwise, `3` edges are required to form a triangle from scratch.\n4. **Output**: Based on the above checks, the solution outputs the minimal number of edges (`t`) and the number of ways (`w`) to add those edges to form an odd cycle.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_count += 1\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        comp_nodes.append(neighbor)\n                        q.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append((comp_nodes, comp_count))\n            for node in comp_nodes:\n                comp_id[node] = comp_count\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_1 = 0\n    for comp in components:\n        nodes = set(comp[0])\n        black = 0\n        white = 0\n        for node in nodes:\n            if color[node] == 0:\n                black += 1\n            else:\n                white += 1\n        total_ways_1 += black*(black-1)//2 + white*(white-1)//2\n        \n    if total_ways_1 > 0:\n        print(\"1\", total_ways_1)\n        return\n        \n    total_edges = m\n    ways_2 = 0\n    ways_3 = 0\n    \n    for comp in components:\n        nodes = set(comp[0])\n        if len(nodes) == 1:\n            continue\n        elif len(nodes) == 2:\n            ways_2 += 1\n            \n    if ways_2 > 0 and total_edges > 0:\n        print(\"2\", ways_2)\n        return\n        \n    if ways_2 > 0 and total_edges == 0:\n        print(\"3\", 1)\n        return\n        \n    if ways_2 == 0:\n        print(\"0 1\")\n        return\n        \nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1184,
        "thoughts_token_count": 8191
    }
}