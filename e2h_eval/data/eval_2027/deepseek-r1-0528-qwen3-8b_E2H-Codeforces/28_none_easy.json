{
    "start": 1758293090.7967184,
    "end": 1758293155.5742044,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:45 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    final_length = 1\n    \n    # We can perform (total_length - 1) operations to reduce the string to length 1\n    # So the number of operations is (total_length - 1)\n    # Each operation reduces the string length by 1\n    # So after (total_length - 1) operations, we get a single character\n    # This character is the result of combining all characters through the rules\n    \n    # The resulting character depends on the number of 0s and 1s\n    # Let's simulate the process\n    # Each operation replaces the last two characters with one based on the rule\n    # Rule: 00 -> 1, 01 -> 0, 10 -> 0, 11 -> 1\n    # So the final character is determined by the parity of the number of 0s\n    # Because each operation reduces the number of 0s by 0 or 1\n    # Let's think in terms of parity of 0s\n    # If we have an even number of 0s, the final character is 1\n    # If we have an odd number of 0s, the final character is 0\n    # Wait, that's not accurate. Let's simulate it properly\n    \n    # Let's track the number of 0s and 1s as we reduce the string\n    # Initially, we have n zeros and m ones\n    # Each operation reduces the length by 1\n    # We need to simulate the reduction process to determine the final character\n    \n    # Instead of simulating, we can use the following observation:\n    # The final character is determined by the parity of the number of 0s\n    # Because each operation reduces the number of 0s by 0 or 1 depending on the pair\n    # So the final character is 0 if the number of 0s is odd, and 1 if even\n    \n    # Let's compute the parity of the number of 0s\n    zero_parity = n % 2\n    \n    # The final character is 0 if zero_parity is 1, else 1\n    final_char = 0 if zero_parity == 1 else 1\n    \n    if final_char != g:\n        print(0)\n        return\n    \n    # Now count the number of beautiful strings\n    # A beautiful string is any string with exactly n 0s and m 1s\n    # So the number of such strings is C(n + m, n)\n    result = comb(n + m, n)\n    print(result % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    final_length = 1\n    \n    # We can perform (total_length - 1) operations to reduce the string to length 1\n    # So the number of operations is (total_length - 1)\n    # Each operation reduces the string length by 1\n    # So after (total_length - 1) operations, we get a single character\n    # This character is the result of combining all characters through the rules\n    \n    # The resulting character depends on the number of 0s and 1s\n    # Let's simulate the process\n    # Each operation replaces the last two characters with one based on the rule\n    # Rule: 00 -> 1, 01 -> 0, 10 -> 0, 11 -> 1\n    # So the final character is determined by the parity of the number of 0s\n    # Because each operation reduces the number of 0s by 0 or 1\n    # Let's think in terms of parity of 0s\n    # If we have an even number of 0s, the final character is 1\n    # If we have an odd number of 0s, the final character is 0\n    # Wait, that's not accurate. Let's simulate it properly\n    \n    # Let's track the number of 0s and 1s as we reduce the string\n    # Initially, we have n zeros and m ones\n    # Each operation reduces the length by 1\n    # We need to simulate the reduction process to determine the final character\n    \n    # Instead of simulating, we can use the following observation:\n    # The final character is determined by the parity of the number of 0s\n    # Because each operation reduces the number of 0s by 0 or 1 depending on the pair\n    # So the final character is 0 if the number of 0s is odd, and 1 if even\n    \n    # Let's compute the parity of the number of 0s\n    zero_parity = n % 2\n    \n    # The final character is 0 if zero_parity is 1, else 1\n    final_char = 0 if zero_parity == 1 else 1\n    \n    if final_char != g:\n        print(0)\n        return\n    \n    # Now count the number of beautiful strings\n    # A beautiful string is any string with exactly n 0s and m 1s\n    # So the number of such strings is C(n + m, n)\n    result = comb(n + m, n)\n    print(result % MOD)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 549,
        "completion_token_count": 650,
        "thoughts_token_count": 0
    }
}