{
    "start": 1758300460.3664718,
    "end": 1758304103.2594202,
    "start-formatted": "2025-09-20 01:47 KST",
    "end-formatted": "2025-09-20 02:48 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing:\n  - An odd cycle must have at least 3 edges (triangle) and the length is odd (3,5,7,...).\n\n We are prohibited from adding parallel edges or loops.\n\n Steps:\n\n 1. If the graph already has an odd-length cycle, then t=0 and w=1? But note: the problem says \"form a simple cycle of an odd length\". However, if there is one already, then we don't need to add any edge.\n\n However, note the example: \n   Input: \"3 3\\n1 2\\n2 3\\n3 1\" -> Output: \"0 1\"\n\n But wait, the problem says: \"minimum number of edges that must be added\", so if there is already an odd cycle, then t=0.\n\n However, the problem does not specify that the cycle must be formed only by the added edges. It can be that the graph already contains an odd cycle.\n\n So first, we check if the graph already contains an odd cycle.\n\n How to check for odd cycles in an undirected graph?\n   We can use BFS/DFS with colors (bipartite check). The graph is bipartite if and only if it contains no odd cycle.\n\n Therefore:\n   If the graph is not bipartite, then t=0 and w=1.\n\n But wait: what if there are multiple odd cycles? Then we still don't need to add any edge, but how many ways to add 0 edges? Exactly 1 way (do nothing).\n\n However, the problem says: \"the number of ways to add t edges\". For t=0, there is exactly 1 way (add no edges).\n\n But note: what if the graph is disconnected? Then we have to consider each connected component.\n\n 2. Now, if the graph is bipartite (so no odd cycle), then we must add edges until we form an odd cycle.\n\n What is the minimum number of edges to add?\n\n Observation:\n   We cannot form an odd cycle by adding just one edge? Let's see:\n     - Adding one edge might create an odd cycle if we connect two vertices in the same bipartition set (in a connected component). But wait: even in a bipartite graph, if we add an edge within the same part, then the cycle formed must be of even length? Actually, no: the cycle that goes through the new edge and the existing path between the two vertices (which is of even length because they are in the same set) becomes an odd cycle (even + 1). \n\n   However, note: the condition for forming a cycle with an added edge (u,v): \n        Let d(u,v) be the distance from u to v in the original graph. Then the cycle will have length = d(u,v) + 1.\n        For the cycle to be odd, we require d(u,v)+1 is odd => d(u,v) is even.\n\n   But in a bipartite graph, the distance between two nodes in the same set is even, and in different sets is odd.\n\n   Therefore, if we add an edge between two nodes in the same set (same bipartition) then the distance between them is even, so the cycle length is even+1 = odd.\n\n   So, one edge addition (within the same set) creates an odd cycle.\n\n   However, we must check: is it possible that the graph is bipartite and we can form an odd cycle by adding one edge?\n\n   Example: two triangles (each triangle is an odd cycle) but wait, the graph is bipartite? Actually, a triangle is an odd cycle and hence the graph is not bipartite.\n\n   So we are in the case where the graph is bipartite. Then we can form an odd cycle by adding one edge between two nodes in the same bipartition set.\n\n   But note: what if the two nodes are not connected by any path? Then adding an edge between two nodes in the same set of a connected bipartite component doesn't necessarily form a cycle? Because we need the two nodes to be connected by an even-length path (so that the cycle is odd). \n\n   Actually, if the two nodes are in the same bipartition set and the graph is connected, then there is a unique bipartite coloring and the distance is well-defined. But if they are not connected, then the graph is disconnected. In that case, the two nodes are in separate connected components, then the distance is undefined (we don't have a path). Then adding an edge between two nodes in the same set of two different connected components doesn't form a cycle? It forms a bridge between two components, but no cycle.\n\n   Therefore, we must consider connected components.\n\n   So, the minimal t",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length. Additionally, we need to count the number of ways to add these edges without creating any loops or parallel edges.\n\n### Approach\n1. **Check for Existing Odd Cycles**: The graph may already contain an odd-length cycle. We can check this by verifying if the graph is bipartite. If the graph is not bipartite, it contains an odd cycle, and no edges need to be added (t=0, w=1).\n\n2. **Bipartite Graph Handling**: If the graph is bipartite, we need to find the minimum number of edges to add to create an odd cycle. The key observation here is that adding an edge between two nodes in the same bipartition set of a connected component will create an odd cycle. The minimal number of edges required is 1, but only if such an edge does not already exist.\n\n3. **Disconnected Graphs**: For disconnected graphs, adding an edge within the same bipartition set of different components does not form a cycle. Hence, we must consider edges within the same component.\n\n4. **Counting Valid Edges**: The number of valid edges to add is calculated by considering all pairs of nodes within the same bipartition set across all connected components, excluding edges that already exist in the graph.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_count += 1\n            q = deque([i])\n            color[i] = 0\n            current_comp = [i]\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp_id[neighbor] = comp_count\n                        current_comp.append(neighbor)\n                        q.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        components.append(current_comp[:])\n                        return (\"0 1\")\n            components.append(current_comp)\n    \n    total_ways = 0\n    for comp in components:\n        comp_nodes = set(comp)\n        size0 = 0\n        size1 = 0\n        for node in comp:\n            if color[node] == 0:\n                size0 += 1\n            else:\n                size1 += 1\n                \n        total_same_set_edges = size0*(size0-1)//2 + size1*(size1-1)//2\n        existing_edges_in_comp = 0\n        for node in comp:\n            for neighbor in graph[node]:\n                if neighbor in comp_nodes and neighbor > node:\n                    existing_edges_in_comp += 1\n                    \n        missing_edges_in_comp = total_same_set_edges - existing_edges_in_comp\n        total_ways += missing_edges_in_comp\n        \n    print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Reading**: The input is read and parsed into the number of vertices (n) and edges (m), followed by the edges themselves.\n2. **Graph Construction**: The graph is constructed using adjacency lists.\n3. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component is found to be non-bipartite, the answer is immediately (0, 1) since an odd cycle already exists.\n4. **Edge Calculation**: For bipartite graphs, the number of edges needed to form an odd cycle is 1. The solution counts all possible edges that can be added within the same bipartition set of each connected component, excluding existing edges.\n5. **Output**: The result is printed as the minimum edges (t) and the number of ways (w) to add those edges.\n\nThis approach efficiently checks for existing odd cycles and calculates the minimal edge additions required, ensuring optimal performance even for large graphs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_count += 1\n            q = deque([i])\n            color[i] = 0\n            current_comp = [i]\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp_id[neighbor] = comp_count\n                        current_comp.append(neighbor)\n                        q.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        components.append(current_comp[:])\n                        return (\"0 1\")\n            components.append(current_comp)\n    \n    total_ways = 0\n    for comp in components:\n        comp_nodes = set(comp)\n        size0 = 0\n        size1 = 0\n        for node in comp:\n            if color[node] == 0:\n                size0 += 1\n            else:\n                size1 += 1\n                \n        total_same_set_edges = size0*(size0-1)//2 + size1*(size1-1)//2\n        existing_edges_in_comp = 0\n        for node in comp:\n            for neighbor in graph[node]:\n                if neighbor in comp_nodes and neighbor > node:\n                    existing_edges_in_comp += 1\n                    \n        missing_edges_in_comp = total_same_set_edges - existing_edges_in_comp\n        total_ways += missing_edges_in_comp\n        \n    print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1008,
        "thoughts_token_count": 1023
    }
}