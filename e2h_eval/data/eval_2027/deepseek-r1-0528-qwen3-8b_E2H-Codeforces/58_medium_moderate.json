{
    "start": 1758300264.4111497,
    "end": 1758304114.7390952,
    "start-formatted": "2025-09-20 01:44 KST",
    "end-formatted": "2025-09-20 02:48 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing:\n  - An odd cycle must have at least 3 edges (triangle) and the length is odd (3,5,7,...).\n\n We note that the graph is given without multiple edges and loops.\n\n Steps:\n\n 1. If the graph already contains an odd cycle, then t=0 and w=1? Actually, note: the problem says \"minimum number of edges to add\", so if there's already an odd cycle, then we don't need to add any edge -> t=0, but then how many ways? Actually, the condition is: we are only allowed to add edges (and cannot remove). But if the graph already has an odd cycle, then we don't need to add any edge. However, note: the problem says \"form a simple cycle of an odd length\". So if the graph already has one, then we don't need to add any edge. Then the answer is (0, 1). But wait, consider the example: \n      Input: \"3 3\\n1 2\\n2 3\\n3 1\" -> Output: \"0 1\"\n\n 2. Otherwise, we need to consider adding edges. The minimal odd cycle we can form by adding edges must be of the smallest possible length. The smallest odd cycle is a triangle (3 edges). So we can think:\n\n   Option A: Add 1 edge to form an odd cycle.\n        This would require that the graph has two vertices connected by a path of even length (so that adding the edge between them forms an odd cycle). However, note: if we add one edge to a path of even length (say two edges) then we get a triangle (even+1 = odd). But wait, the cycle would be the two edges and the new edge, so total length 3 (odd). \n\n        However, note: the graph must not already contain an odd cycle. Also, we are only allowed to add one edge. Therefore, we must look for two vertices u and v such that the distance between u and v is even (so that the cycle formed by the existing path and the new edge is odd). And also, we cannot have an edge between u and v already.\n\n        But note: the graph might be disconnected. In a disconnected graph, the distance between two nodes in the same connected component is defined, but across components the distance is not defined. However, we can consider two nodes in different connected components: the distance from u to v is undefined (or considered as infinity) but then adding an edge between two nodes in different components will create a cycle only if there is a path from u to v? Actually, no: the cycle must be entirely contained in the graph after adding the edge. However, the new edge alone doesn't form a cycle unless there's a path connecting u and v. But if they are in different components, then adding an edge between u and v does not immediately form a cycle (because the cycle requires a closed path). However, we are forming a cycle by the new edge and the existing paths from u to v? Actually, no: the cycle must use the new edge and the existing path from u to v. But if u and v are in different components, then there's no existing path, so the edge we add won't form a cycle. Therefore, we must consider pairs of vertices that are in the same connected component and have an even distance (so that the cycle becomes odd). \n\n        However, note: the cycle must be simple. So the entire cycle should not repeat vertices. The condition for forming a triangle (cycle of length 3) is that there are two distinct paths of length 1 (the new edge) and then the existing path of length 2 (so total 3). But wait, the existing path must be of length 2 (two edges) so that the two endpoints (u and v) are at distance 2 (which is even). Then the cycle is the two edges (from u to x and x to v) plus the new edge (u to v) -> so the cycle is u->x->v->u, which is of length 3 (odd). \n\n        So condition: two vertices u and v (with no direct edge) such that the distance between u and v is 2 (even). Then adding the edge (u,v) creates a triangle (an odd cycle).\n\n        But what if the distance is 4? Then adding the edge (u,v) would form a cycle of length 5 (which is odd) but with more edges. However, we are looking for the minimum number of edges to add. So if we can form an odd cycle by adding one edge (i.e., when there exists a pair of vertices at distance 2) then t=1.\n\n        What if there is no pair of vertices at distance 2? Then we cannot form an odd cycle by adding one edge. Then we try two edges.\n\n        However, note: we might form a triangle by adding two edges? Actually, two edges would allow a triangle only if we add two edges, but then we can form a triangle by having three edges. But wait, we are adding two edges. Alternatively, we might form a pentagon (length 5) by adding two edges? \n\n        Actually, the minimal odd cycle we can form by adding edges is either a triangle (if we can find two vertices at distance 2) or a pentagon (if we can find two vertices at distance 3). But note: we are allowed to form cycles of any odd length. However, we want the minimum number of edges to add.\n\n        For a pentagon (5 edges in the cycle) we need to add two edges? Actually, no: the cycle of 5 edges must have 5 edges. But the graph already has some edges. We are only adding edges.\n\n        Let me clarify: the problem says \"form a simple cycle of an odd length\". We don't require that the entire cycle is composed only of added edges. The cycle can use existing edges and some added edges.\n\n        The minimal odd cycle we can form by adding edges:\n\n          Case 1: t=0 -> already present (then we output (0,1)).\n          Case 2: t=1 -> if there exists two vertices u and v (not adjacent) such that the distance between u and v is even (so the cycle formed by the existing path and the new edge is odd). The minimal even distance is 2 (then the cycle is 3 edges). But note: we can also have an even distance of 4,6,... but that would require more existing edges and then the cycle would be longer. However, the condition for t=1 is that the cycle is formed by adding one edge and the existing path (which is even). The minimal even distance is 2.\n\n          Case 3: t=2 -> if there is no pair of vertices at even distance (in the same component) then we try to form an odd cycle by adding two edges. How?\n\n          Example: Consider two separate triangles (each triangle is an odd cycle) but they are not connected. Then we cannot form an odd cycle by adding one edge (because we cannot connect two triangles to form a larger odd cycle easily). Actually, if we have two triangles, then the entire graph has odd cycles already (so t=0). \n\n          Let me reexamine: the graph must not have an odd cycle. So we are in a graph that is bipartite? Because a graph is bipartite if and only if it contains no odd cycles. So we can use bipartite property.\n\n          Alternate approach: check if the graph is bipartite. If it is not bipartite, then it already contains an odd cycle -> t=0, w=1.\n\n          If the graph is bipartite, then we can color the graph with two colors. Then, in a bipartite graph, the distance between two nodes in the same connected component is well-defined and the parity of the distance (even or odd) is fixed.\n\n          Now, to form an odd cycle, we must connect two nodes with an edge such that the parity of the distance between them is even (so that the cycle length is odd). But note: the entire cycle is the existing path (even length) and the new edge (1, so odd) -> total odd.\n\n          However, if we cannot find any two nodes (in the same component) that are at even distance (i.e., same color in bipartite coloring) and are not adjacent, then we cannot form an odd cycle by adding one edge.\n\n          Then we try two edges. How can we form an odd cycle with two edges? We can form a triangle by adding two edges? Actually, no: two edges alone cannot form a triangle (we need three edges). Alternatively, we can form a cycle of length 5 (pentagon) by adding two edges. \n\n          Example: Consider a path of three edges (so four vertices) and we want to form a pentagon. But wait, we are allowed to use existing edges and the two added edges. \n\n          Actually, let me think: if we have a path of four vertices: A-B-C-D. Then the distances are: \n            A to B: 1 (odd)\n            A to C: 2 (even)\n            A to D: 3 (odd)\n            B to C: 1 (odd)\n            B to D: 2 (even)\n            C to D: 1 (odd)\n\n          Now, if we add two edges: say A-D and B-C. Then we have edges: A-B, B-C, C-D, D-A, and we added B-C and A-D? Wait, but note: the graph already has B-C and A-D? Actually, in the original graph we have A-B, B-C, C-D. Then we add A-D and B-C? But B-C is already present. So we cannot add an edge that already exists.\n\n          Alternatively, consider: we have a graph that is bipartite and we are going to add two edges. We want to form a cycle of odd length. \n\n          One way: \n            Consider two edges (u-v) and (v-w). Then the cycle would be: u -> ... -> v -> w -> ... -> u. The length of the cycle is the sum of the distances from u to v (which is d1) and from w to u (via the other part) plus the two edges we added. However, we need the entire cycle to be odd.\n\n          Alternatively, note: the minimal odd cycle we can form is a triangle. But if we cannot form a triangle by one edge, then we cannot form a triangle by two edges? Actually, two edges can form a triangle if we choose two edges that complete a triangle. But that requires that two edges of the triangle are already present. Then we only need to add the third. But wait, if two edges of the triangle are present, then the third edge is the one we are missing, so we can form a triangle by adding one edge. So if we cannot form a triangle by one edge, then no two edges of a triangle are present.\n\n          Therefore, to form a triangle we must have two edges of the triangle already. But if we don't have two edges of a triangle, then we cannot form a triangle by adding one edge (because we are missing two edges). Then we must form an odd cycle of length >=5.\n\n          How to form an odd cycle of length 5? We can do:\n\n          Consider two edges: (u,v) and (v,w). Then the cycle: u -> v -> w -> ... -> u. The length is 1 (for u->v) + 1 (for v->w) + (distance from w to u). The entire cycle length is 2 + (distance from w to u). We want that to be odd. Therefore, (distance from w to u) must be odd. Then the entire cycle is even+odd = odd.\n\n          But note: the graph is bipartite, so the distance from u to w must be even (because u and w are in the same bipartite set? Actually, no: the graph is bipartite, so the distance between two nodes in the same set is even, and different sets is odd.\n\n          However, wait: if we add two edges (u,v) and (v,w), then the cycle is: u->v->w->...->u. The path from w to u must be in the original graph. But note: u and w are now connected by two paths: the one via the added edges (which is length 2) and the original path (if exists). However, the cycle must be simple and we are allowed to use the original graph's edges. \n\n          Actually, we are allowed to use any existing edges. So the cycle must use the two added edges and then the rest of the edges must form a path from w to u (without repeating vertices). \n\n          But note: the graph is bipartite, so the original graph does not have odd cycles. The condition for the cycle to be odd is that the total length is odd. The two edges we added contribute 2 (even). Then the rest of the cycle (the path from w to u) must be odd (so that even + odd = odd). \n\n          However, in the bipartite graph, the parity of the path from w to u must be odd. But note: the graph is bipartite, so the distance from w to u is fixed. We can choose u and w arbitrarily (but not necessarily). Also, we have to choose two edges: first edge (u,v) and second edge (v,w). Then the path from w to u must exist (so u and w must be in the same connected component? Actually, no, because we can use edges from different components? But wait, we are only allowed to add edges, and the graph is undirected. However, the cycle must be connected. \n\n          Actually, we are going to form a cycle that uses the two added edges and the existing edges. The two added edges connect three nodes: u, v, w. Then the cycle must include these three nodes and a path from w to u (that does not go through v). But if u and w are in the same connected component (before adding the edges) then we can use the existing path. But if they are in different components, then after adding the two edges we have a connected component containing u, v, w. Then the path from w to u must go through v? Actually, no: we can have a path from w to u that goes from w to v to u (using the two edges we just added) but that would be the two edges and then we are done? Then the cycle would be u->v->w->u (which is a triangle, which we already considered and failed). \n\n          So we need a path from w to u that does not use the two edges we just added. Therefore, w and u must be connected by a path in the original graph (so they are in the same connected component) and the parity of that path must be odd.\n\n          But note: the graph is bipartite, so the distance from w to u is fixed. In the bipartite graph, the two parts are colored. Let the color of u be c(u). Then the color of w must be c(u) XOR 1 (because the path from w to u is odd) to have an odd-length path. But wait: in bipartite graph, the distance between two nodes is the absolute difference in their color? Actually, the distance is the number of edges. The parity is determined by the color: two nodes in the same color have even distance, different colors have odd distance.\n\n          Therefore, we require that u and w are of different colors (so that the distance is odd). But then we have:\n\n            u and v: we add an edge. Then v must be of the opposite color to u (because the graph is bipartite, so adjacent nodes have different colors). Similarly, w must be of the opposite color to v (so same color as u). Then the distance from w to u is odd (since w and u have different colors) and the entire cycle is: \n                u (color0) -> v (color1) -> w (color0) and then the path from w to u (which is odd) must connect two nodes of different colors (so odd length). \n\n          However, note: the entire cycle is: the two edges (u-v, v-w) and the existing path from w to u (which is odd). The total length is 2 (from the two edges) + odd (the existing path) = odd + even = odd.\n\n          But wait: the existing path from w to u is odd, so the entire cycle is the two added edges and the existing odd-length path. However, the two added edges and the existing path must form a cycle. But note: the existing path from w to u is independent of v. However, the entire cycle is: start at u, go to v, then to w, then along the existing path from w to u. This cycle does not necessarily use the two added edges and the existing path from w to u without repetition? Actually, we must avoid repeating vertices. \n\n          This is complex. Let's break down:\n\n          We are allowed to form a cycle by adding two edges. The cycle must be simple (each vertex once). We are going to form a cycle that uses:\n\n            u -> v (added edge)\n            v -> w (added edge)\n            w -> ... -> u (existing edges)\n\n          The part from w to u must be a simple path (without u and v). But if the existing graph has a path from w to u that does not use v, then we are good. \n\n          However, note: the graph is bipartite, so the two edges we add must connect nodes that are originally in the same bipartite set? Actually, no: the graph is bipartite, so we can only connect nodes of the same set (because if we connect two nodes of the same set, then we break the bipartite property and form an odd cycle). But wait, that is the point: we are breaking the bipartite property by adding an edge within the same set. \n\n          Actually, the minimal way to break the bipartite property is to add an edge between two nodes of the same color. Then we form an odd cycle. So why did we consider one edge? Because if we add one edge between two nodes of the same color, then we break the bipartite property and form an odd cycle. \n\n          Therefore, we can reframe the problem:\n\n          - Check if the graph is bipartite. If not, then t=0, w=1.\n\n          - If the graph is bipartite, then we are in a situation where we can break the bipartite property by adding an edge between two nodes of the same color (in the same connected component). Then the minimal t is 1.\n\n          But wait: what if the graph is bipartite, but there is no edge between two nodes of the same color? Then we can add one edge between two nodes of the same color (same connected component) and form an odd cycle. However, if two nodes of the same color are in the same connected component, then the distance between them is even (because the graph is bipartite). So we can form a triangle (if the distance is 2) or a longer odd cycle (if the distance is 4,6,...). But the minimal number of edges to add is 1.\n\n          However, what if the graph is bipartite but there are no two nodes of the same color (in the same connected component) that are not adjacent? Then we cannot add an edge to form an odd cycle by one edge? \n\n          Actually, we can still add an edge between two nodes of the same color even if they are adjacent? But wait, the graph initially has no parallel edges, so if two nodes of the same color are adjacent, then we cannot add that edge again. However, the bipartite graph does not allow edges between same color, so in a bipartite graph, there are no edges between same color. Therefore, all pairs of same color nodes are non-adjacent.\n\n          Therefore, in a bipartite graph, the minimal t is 1, and the number of ways w is the number of pairs (u,v) such that u and v are in the same connected component and have the same color (in the bipartite coloring) and are not adjacent (but in bipartite, same color nodes are never adjacent). So we can count all pairs (u,v) in the same connected component and same color.\n\n          But wait: what if the graph is disconnected? Then we can only connect two nodes in the same connected component (because if they are in different components, then the edge we add does not form a cycle). \n\n          However, note: if we connect two nodes from different connected components, then the edge we add doesn't form a cycle (because there's no path connecting them). So we must consider pairs of nodes that are in the same connected component and same color.\n\n          Therefore, for t=1: \n            w = sum_{each connected component} [C(n_i,2) for each color] \n            But note: in a connected bipartite graph, we have two colors. Let the two parts be A and B. Then the same color nodes are in A or in B. So the number of edges we can add in this component is C(|A|,2) + C(|B|,2). \n\n          However, wait: if we add an edge within A, then we break the bipartite property and form an odd cycle. Similarly for B.\n\n          But note: the graph might have multiple connected components. Then we must consider each connected component independently. However, the minimal t is 1, so we only need one edge. But if in one component we have at least one pair (same color) then we can add one edge (any one) and form an odd cycle. \n\n          Therefore, the answer for t=1 is: \n            t = 1\n            w = sum_{each connected component} [C(|A|,2) + C(|B|,2)]\n\n          However, wait: is that correct? Because we are allowed to add any one edge that connects two same-colored nodes in the same component. And the graph is bipartite, so same-colored nodes are not connected by an edge (so we can count all pairs). \n\n          But wait: what if the graph is bipartite but we have two connected components, and in one component we have many same-color pairs, and in the other component we have none? Then we can still form an odd cycle by adding one edge (any one from the first component). So the total ways is the sum over all components.\n\n          However, what if there is no component that has at least two same-colored nodes? Then we cannot form an odd cycle by adding one edge. Then we must consider t=2.\n\n          Therefore, the algorithm:\n\n          Step 1: Check if the graph is bipartite and get the connected components and the bipartite coloring.\n\n          Step 2: If the graph is not bipartite, output (0,1).\n\n          Step 3: If the graph is bipartite, then:\n\n            Let the graph have k connected components. For each component i, let the two parts be (A_i, B_i). Then the number of ways to add one edge (t=1) is the sum over i of [C(|A_i|,2) + C(|B_i|,2)].\n\n            If this sum is greater than 0, then output (1, that_sum).\n\n            Otherwise, we must consider t=2.\n\n          Now, for t=2:\n\n            We need to form an odd cycle by adding two edges. How?\n\n            Note: Since the graph is bipartite, adding an edge between two nodes of the same color creates an odd cycle. But we cannot do that for one edge (because there are no same-color edges to add). So we must break the bipartite property by two edges.\n\n            However, note: we can also form an odd cycle by connecting two different connected components? \n\n            Consider: two connected components, each being a complete bipartite graph (so each is a bipartite graph). We can add two edges: one between two nodes in the first component (same color) and one in the second? But that would form two odd cycles? Actually, no: we are forming one odd cycle. \n\n            Alternatively, consider connecting two different components with two edges. \n\n            Example: Component 1: {a1, a2} (bipartite) and Component 2: {b1, b2} (bipartite). We can add edges (a1, b1) and (a2, b2). Then the graph is no longer bipartite? Actually, no: we have connected two bipartite graphs. But then we can have a cycle: a1-b1-b2-a2-a1? But wait, we have to see the edges: \n                Original: \n                  Component1: say a1 and a2 are connected? Actually, no: the graph is bipartite. Each component is bipartite. We have two components.\n\n            Let me take two triangles? No, because the graph is bipartite so no triangles. \n\n            Actually, consider two separate edges (each edge is a component). Then we have two components, each with two nodes (one edge). Then the bipartite coloring for each component: one node color0, the other color1.\n\n            Now, we can add two edges: connect the two components. We can connect node0 from component1 to node0 from component2, and node1 from component1 to node1 from component2. Then we have a cycle: \n                component1: node0 and node1 (edge exists) -> component2: node0 and node1 (edge exists) -> then we have a cycle: node0 (comp1) -> node0 (comp2) -> node1 (comp2) -> node1 (comp1) -> node0 (comp1). The length of the cycle is 4 (even) -> not odd.\n\n            Alternatively, connect node0 (comp1) to node0 (comp2) and node0 (comp1) to node1 (comp2). Then we have a triangle? But wait, the edge between node0(comp1) and node1(comp2) is added, and the edge between node0(comp1) and node0(comp2) is added, and the edge between node0(comp2) and node1(comp2) is in the second component (if the second component has an edge). Actually, the second component is two nodes with an edge. Then the cycle: node0(comp1) -> node0(comp2) -> node1(comp2) -> node1(comp1) ??? But wait, we didn't add an edge from node1(comp2) to node1(comp1). \n\n            Actually, we only added two edges: from comp1 node0 to comp2 node0, and from comp1 node0 to comp2 node1. Then we don't have a cycle? We have a star: node0(comp1) connected to both nodes in comp2. Then we don't have a cycle.\n\n            Alternatively, we can form a cycle by connecting two components with two edges and then using the existing edges. \n\n            Let me think differently: we need an odd cycle. The minimal odd cycle is 3,5,7,... We already know that we cannot form a triangle (t=1) because there are no two same-colored nodes in the same component. But we can form a 5-cycle by adding two edges.\n\n            Example: \n              Component1: {a,b} (an edge between a and b) -> so bipartite: a in set0, b in set1.\n              Component2: {c,d} (an edge between c and d) -> c in set0, d in set1.\n\n            We can add two edges: (a,c) and (b,d). Then we have the cycle: a->c->d->b->a. The edges: \n              a-c (added), c-d (original), d-b (added), b-a (original). \n            The cycle has 4 edges (even). Not odd.\n\n            Alternatively, add (a,c) and (b,c). Then the cycle: a->c->b->a. But wait, we don't have an edge from b to c. But we added (b,c). Then the cycle is a->c->b->a: that's a triangle (odd). But wait, we are allowed to add two edges, but the triangle is formed by the two edges (a,c) and (b,c) and the existing edge (a,b). \n\n            However, note: the graph is bipartite. In component1, a and b are connected (so they are of different colors). In component2, c and d are connected (different colors). Now, we are adding two edges: (a,c) and (b,c). Then the colors: \n              a (set0) and c (set0) -> same color, so the edge (a,c) is invalid in bipartite? Actually, we are breaking the bipartite property by adding two edges? But note: the entire graph becomes non-bipartite. The cycle a->c->b->a: \n                a->c: same color (if we consider the entire graph, then we must recolor? Actually, no: we broke the bipartite property by the edge (a,c). Then the edge (b,c) is between set1 and set0 (which is allowed in the entire graph? But wait, the entire graph now is not bipartite, so we don't care about the coloring. However, the cycle we formed is a triangle (which is odd). \n\n            But wait, the two edges we added are (a,c) and (b,c). Then the cycle is a-b-c-a: \n                a-b (exists), b-c (added), c-a (added). So the cycle is of length 3 (odd). \n\n            However, note: the two edges we added are (a,c) and (b,c). This is two edges. \n\n            But wait: in the above example, the graph was two separate edges (so two separate components). Then we added two edges to form a triangle. \n\n            So the minimal t is 2, and the cycle is formed by two edges. \n\n            How did we form the cycle? We used two added edges and one existing edge (from component1). \n\n            Therefore, we must consider: \n\n            We are allowed to use edges from different components. \n\n            Conditions for t=2:\n\n            We need to form a cycle of odd length. The minimal odd cycle is 3 (triangle). But we cannot form a triangle by one edge (because we cannot find two same-colored nodes in the same component). But we can form a triangle by two edges if we connect two different components. \n\n            Specifically, we can form a triangle by taking two nodes from one component and one node from another, and then add two edges that complete the triangle. \n\n            However, note: we can also form a pentagon (length 5) by two edges. \n\n            But the minimal t is 2, so we are going to count the ways to add two edges that form an odd cycle.\n\n            There are two possibilities:\n\n              Possibility 1: Form a triangle (3-cycle) by adding two edges. This requires that we have three nodes: two in one component and one in another, or two in two different components? Actually, we can have:\n\n                Case 1: Two nodes from the same component and one node from the same or different component.\n\n                But wait: to form a triangle, we need three edges. The graph already has one edge (if the two nodes are connected) or zero? Actually, the triangle requires three edges. \n\n                Example: \n                  Component1: two nodes a and b (connected by an edge). Component2: one node c.\n\n                Then we can add two edges: (a,c) and (b,c). Then we have the triangle a-b-c. \n\n                But note: the two edges we added are (a,c) and (b,c). The existing edge is (a,b). \n\n                However, if the two nodes are not connected in the same component, then we don't have the edge (a,b). Then we must add two edges (a,b) and (a,c) and (b,c)? But then we are adding three edges. \n\n                Actually, we are only allowed to add two edges. \n\n                Therefore, to form a triangle, we must have at least one edge already present. \n\n                So the triangle must use one existing edge and two added edges.\n\n                Conditions: \n                  We have three distinct nodes: u, v, w.\n                  The edge (u,v) must exist (so u and v are in the same component or not? Actually, the edge (u,v) must exist, so they are in the same component? Or if they are in different components, then we cannot have an edge (u,v) without adding it, but we are not allowed to add three edges (we are only adding two). \n\n                Actually, the edge (u,v) must be already present. Then we add (u,w) and (v,w). Then the triangle is u->v->w->u.\n\n                But note: w can be in any component. \n\n                How many ways to form a triangle by adding two edges?\n\n                We must choose an existing edge (u,v) (which is not necessarily in the same component? Actually, no: the edge (u,v) is given, so they are connected by an edge (so in the same component). Then we choose a third node w (not u or v) and add edges (u,w) and (v,w). \n\n                However, we must ensure that the edges (u,w) and (v,w) are not already present.\n\n                But note: the graph is bipartite. So in the same component, u and v are of different colors (because the edge (u,v) exists). Then w must be chosen such that the edges (u,w) and (v,w) are not present. \n\n                But wait: the graph is bipartite, so the color of w must be consistent. However, we are breaking the bipartite property by adding two edges. \n\n                However, the problem does not require the entire graph to remain bipartite.\n\n                But note: the condition for the cycle is that it is odd. The triangle is odd (length 3). \n\n                How to count the ways for t=2?\n\n                Possibility 1: Form a triangle by two edges. We must have an existing edge (u,v). Then we choose a node w (distinct from u and v) and check that the edges (u,w) and (v,w) are not present. Then we can add those two edges.\n\n                Possibility 2: Form a pentagon (5-cycle) by two edges. \n\n                However, note: the problem asks for the minimal t. So if we can form an odd cycle by adding two edges, then t=2. But we must also consider that there might be a way to form an odd cycle by adding one edge (which we already ruled out: because the graph is bipartite and we have no same-color edges in the same component). So t=2 is the minimal.\n\n                But wait: is it possible that we can form an odd cycle by adding two edges in a way that is not a triangle? For example, a pentagon. \n\n                Example for pentagon: \n                  We have a path of four nodes: a-b-c-d (four edges). The graph is bipartite. Then we can add two edges: (a,c) and (b,d). Then the cycle: a->c->b->d->a? \n                  Edges: a-b, b-c, c-d, and then we added a-c and b-d. Then the cycle: a->c->b->d->a. \n                  Length: 4 (edges: a-c, c-b, b-d, d-a) -> wait, we have to check the edges: \n                    a-c (added), c-b (from the original? But the original has b-c, which is the same as c-b) -> yes, then c-b is the same edge. Then the cycle: a->c->b->d->a: \n                      a->c: added, c->b: original (edge c-b exists), b->d: added, d->a: original? We don't have d->a. \n\n                Actually, the original graph is a path a-b-c-d. Then we have edges: a-b, b-c, c-d. Then we add a-c and b-d. Then the cycle: \n                  a->b->d->c->a: \n                    a->b: exists, b->d: added, d->c: exists (from the path: c-d is present, so d-c is the same), c->a: added.\n\n                The cycle has 4 edges (even). \n\n                Alternatively: \n                  Cycle: a->b->c->d->a: \n                    a->b: exists, b->c: exists, c->d: exists, d->a: added (we added b-d and a-c, but not d-a). \n\n                Actually, we added b-d and a-c. Then d->a is not present. \n\n                Another example: \n                  Consider a square (four nodes, four edges) which is bipartite. Then we add two edges: the diagonals. Then we have two triangles. \n\n                Actually, the pentagon: \n                  We have five nodes: a, b, c, d, e. The graph is bipartite. We add two edges: (a,c) and (c,e). Then we can form a cycle: a->c->e->d->b->a? But wait, we need to specify the edges.\n\n                I think it's easier to stick to the triangle formation.\n\n                Therefore, the minimal t is 2 if and only if we cannot form an odd cycle by adding one edge (which is the case when the graph is bipartite and there are no two same-colored nodes in the same component). But wait, we",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length. Additionally, we need to count the number of ways to add these edges without creating any loops or parallel edges.\n\n### Approach\n1. **Check for Bipartiteness**: A graph is bipartite if it can be colored with two colors such that no two adjacent nodes have the same color. If the graph is not bipartite, it already contains an odd-length cycle, so the answer is `0 1`.\n2. **Bipartite Graph Handling**: If the graph is bipartite, we then check if there are any pairs of nodes within the same connected component that share the same color. If such pairs exist, adding an edge between them will form an odd cycle. The number of such pairs gives the number of ways to add one edge (`t=1`).\n3. **Handling No Same-Color Pairs**: If no such pairs exist in any connected component, we then consider adding two edges. The minimal way to form an odd cycle in this case is by selecting an existing edge and a third node, then adding edges from both endpoints of the existing edge to this third node. The number of such valid configurations gives the number of ways to add two edges (`t=2`).\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    \n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    visited = [False] * (n+1)\n    parent = [-1] * (n+1)\n    \n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            stack = [i]\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        stack.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        total_ways += part0*(part0-1)//2 + part1*(part1-1)//2\n        \n    if total_ways > 0:\n        print(f\"1 {total_ways}\")\n        return\n        \n    t = 2\n    w = 0\n    for comp in components:\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        w += part0 * part1\n        \n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            part0_i = 0\n            part1_i = 0\n            for node in components[i]:\n                if color[node] == 0:\n                    part0_i += 1\n                else:\n                    part1_i += 1\n                    \n            part0_j = 0\n            part1_j = 0\n            for node in components[j]:\n                if color[node] == 0:\n                    part0_j += 1\n                else:\n                    part1_j += 1\n                    \n            w += part0_i * part1_j + part1_i * part0_j\n            \n    print(f\"{t} {w}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The algorithm first checks if the graph is bipartite using a BFS approach. If the graph is not bipartite, it immediately outputs `0 1` since an odd cycle already exists.\n2. **Same-Color Pairs Calculation**: For each connected component in a bipartite graph, the algorithm counts nodes colored with two different colors. The number of ways to add one edge to form an odd cycle is the sum of combinations of nodes sharing the same color within each component.\n3. **Two-Edge Addition**: If no same-color pairs exist, the algorithm calculates the number of ways to add two edges by considering existing edges and third nodes from any component. The count is derived by summing products of nodes from different color groups across all components.\n4. **Output**: Based on the above checks, the algorithm outputs the minimal number of edges to add (`t`) and the corresponding number of ways (`w`). \n\nThis approach efficiently handles both scenarios where the graph is non-bipartite or bipartite but requires edge additions to form an odd cycle, ensuring optimal performance and correctness.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    \n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    visited = [False] * (n+1)\n    parent = [-1] * (n+1)\n    \n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            stack = [i]\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        stack.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        total_ways += part0*(part0-1)//2 + part1*(part1-1)//2\n        \n    if total_ways > 0:\n        print(f\"1 {total_ways}\")\n        return\n        \n    t = 2\n    w = 0\n    for comp in components:\n        part0 = 0\n        part1 = 0\n        for node in comp:\n            if color[node] == 0:\n                part0 += 1\n            else:\n                part1 += 1\n                \n        w += part0 * part1\n        \n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            part0_i = 0\n            part1_i = 0\n            for node in components[i]:\n                if color[node] == 0:\n                    part0_i += 1\n                else:\n                    part1_i += 1\n                    \n            part0_j = 0\n            part1_j = 0\n            for node in components[j]:\n                if color[node] == 0:\n                    part0_j += 1\n                else:\n                    part1_j += 1\n                    \n            w += part0_i * part1_j + part1_i * part0_j\n            \n    print(f\"{t} {w}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1179,
        "thoughts_token_count": 8191
    }
}