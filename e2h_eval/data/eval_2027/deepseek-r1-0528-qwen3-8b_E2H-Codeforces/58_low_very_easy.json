{
    "start": 1758299368.4239457,
    "end": 1758302780.8083708,
    "start-formatted": "2025-09-20 01:29 KST",
    "end-formatted": "2025-09-20 02:26 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing the problem:\n\n 1. If the graph already contains an odd-length simple cycle, then we don't need to add any edge (t=0). However, note that the graph is given without multiple edges and loops, and we are only concerned with cycles of odd length (and at least 3 nodes, since a cycle of one vertex isn't considered).\n\n 2. But note: the problem says \"simple cycle of an odd length in which each vertex occurs at most once\" (which is just a simple cycle) and consisting of more than one vertex (so at least 3? because a cycle of two vertices isn't simple? Actually, a simple cycle must have at least 3 distinct vertices).\n\n However, note the example: \n   Input: '3 3\\n1 2\\n2 3\\n3 1' -> Output: '0 1'\n   This is a triangle (odd cycle) so we output t=0.\n\n 3. The graph might not contain an odd cycle initially. Then we consider adding edges.\n\n Important: We are allowed to add edges arbitrarily (as long as no parallel or loop), but we want the minimum number of edges to add to form at least one odd cycle.\n\n Let's think about possibilities:\n\n Case 1: t = 0.\n   The graph already has an odd cycle.\n\n Case 2: t = 1.\n   We can form an odd cycle by adding one edge. When can that happen?\n   Consider: if there is a path of even length between two vertices, then adding an edge between them might create an odd cycle.\n\n   Actually, the typical way: \n     Suppose we have two vertices u and v (with no edge between them) and they lie at an even distance (in a connected component) then adding the edge (u,v) would create an odd cycle: the path from u to v (even) plus the edge (odd) gives odd cycle.\n\n   But note: we require a cycle of odd length. The cycle formed by the path from u to v (even length) and the edge (u,v) will be of length (even + 1) which is odd. However, we must ensure that the path from u to v is of even length (so the cycle has odd length).\n\n   Alternatively, consider: the entire graph might be bipartite. In a bipartite graph, we cannot have odd cycles. So if the graph is not bipartite, then there's an odd cycle and we are done (t=0).\n\n   Therefore, we can do:\n\n   Step 1: Check for bipartiteness. If the graph is not bipartite, then there exists an odd cycle -> t=0.\n\n   But wait: what if the graph is disconnected? Then we check each connected component for bipartiteness.\n\n   However, note: if the graph is not bipartite, then it must contain an odd cycle.\n\n   Now, what if the graph is bipartite? Then we have two possibilities:\n\n   Case 3: t = 1.\n     We can form an odd cycle by adding one edge if there exists two vertices u and v in the same connected component such that the distance between u and v is even (so that the edge (u,v) would form an odd cycle). But note: in a bipartite graph, the entire connected component is bipartitioned into two sets, say A and B.\n\n     In a bipartite graph, the distance between two nodes in the same set is even, and between two nodes in different sets is odd.\n\n     Therefore, if we connect two nodes in the same set (A or B) then we get a cycle of odd length (because the existing path is even, and adding the edge makes the cycle of even+1 = odd). \n\n     However, note: we must not connect two nodes that are already connected by an edge? But the graph doesn't have parallel edges, so we can only connect non-adjacent pairs.\n\n     So condition for t=1: There exists at least one pair of vertices (u, v) in the same connected component (same bipartition set) that are not adjacent. Then t=1 and the number of ways is the number of such pairs (non-edges) in the same set.\n\n     But wait: what if the graph is disconnected? Then we can also form an odd cycle by connecting two vertices from the same connected component (if the component is bipartite, then connecting two same-set vertices creates an odd cycle). Also, we could connect two vertices from two different connected components? \n\n     Let's analyze: if we connect two vertices from different connected components, then we are creating a new cycle? Actually, no: because the two components are separate, the",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length. Additionally, we need to count the number of ways to add these edges without creating any loops or parallel edges.\n\n### Approach\n1. **Check for Existing Odd Cycle**: The graph already contains an odd cycle if it is not bipartite. We can check bipartiteness using a BFS or DFS approach where we try to color the graph with two colors. If during the coloring process we find adjacent nodes with the same color, the graph is not bipartite, and thus, no edges need to be added (t=0).\n\n2. **Bipartite Graph Handling**: If the graph is bipartite, we then check if adding a single edge can create an odd cycle. In a bipartite graph, connecting two nodes from the same partition (same color) will form an odd cycle. The number of such valid edges is the number of non-edges between nodes in the same partition.\n\n3. **Disconnected Graphs**: If the graph is disconnected, we consider each connected component separately. However, if all components are bipartite, we might need to connect nodes from different components to form an odd cycle. But note that connecting nodes from different components does not immediately form an odd cycle unless the components themselves allow such a connection. \n\n4. **Minimum Edges Calculation**: \n   - If the graph is not bipartite, t=0.\n   - If the graph is bipartite and there exists at least one pair of non-adjacent nodes in the same partition, t=1 and w is the count of such pairs.\n   - Otherwise, we need to consider adding more edges. The solution involves checking all possible ways to add edges that could form an odd cycle, but the problem constraints ensure that the minimal t is either 0, 1, or 3. \n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append((comp_nodes, color))\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        nodes = comp[0]\n        c0 = 0\n        c1 = 0\n        for node in nodes:\n            if color[node] == 0:\n                c0 += 1\n            else:\n                c1 += 1\n                \n        total_edges_in_comp = len(graph[node]) * (len(nodes)-1) // 2  # Not exactly, better to calculate by summing degrees and dividing by 2?\n        # Actually, we can calculate the number of missing edges in the same partition.\n        total_possible_edges = (c0*(c0-1)//2 + c1*(c1-1)//2)\n        existing_edges_in_comp = 0\n        for node in nodes:\n            for neighbor in graph[node]:\n                if neighbor in nodes:\n                    existing_edges_in_comp += 1\n        existing_edges_in_comp //= 2\n        \n        ways_for_this_comp = total_possible_edges - existing_edges_in_comp\n        total_ways += ways_for_this_comp\n        \n    if total_ways > 0:\n        print(\"1 \" + str(total_ways))\n        return\n        \n    print(\"3 1\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of vertices `n` and edges `m`, followed by the edges themselves.\n2. **Graph Construction**: An adjacency list is constructed to represent the graph.\n3. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component fails the bipartite check, the graph contains an odd cycle, so the answer is `0 1`.\n4. **Edge Calculation for Same Partition**: For each bipartite component, the number of missing edges between nodes of the same partition is calculated. If there are such edges, the answer is `1` followed by the count of these edges.\n5. **Default Case**: If no such edges are found, the minimal number of edges required to form an odd cycle is `3`, and there's only one way to add them (connecting three nodes to form a triangle). Hence, the output is `3 1`.\n\nThis approach efficiently checks for the presence of an odd cycle and calculates the minimal edges required to form one if none exists initially.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append((comp_nodes, color))\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    for comp in components:\n        nodes = comp[0]\n        c0 = 0\n        c1 = 0\n        for node in nodes:\n            if color[node] == 0:\n                c0 += 1\n            else:\n                c1 += 1\n                \n        total_edges_in_comp = len(graph[node]) * (len(nodes)-1) // 2  # Not exactly, better to calculate by summing degrees and dividing by 2?\n        # Actually, we can calculate the number of missing edges in the same partition.\n        total_possible_edges = (c0*(c0-1)//2 + c1*(c1-1)//2)\n        existing_edges_in_comp = 0\n        for node in nodes:\n            for neighbor in graph[node]:\n                if neighbor in nodes:\n                    existing_edges_in_comp += 1\n        existing_edges_in_comp //= 2\n        \n        ways_for_this_comp = total_possible_edges - existing_edges_in_comp\n        total_ways += ways_for_this_comp\n        \n    if total_ways > 0:\n        print(\"1 \" + str(total_ways))\n        return\n        \n    print(\"3 1\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1217,
        "thoughts_token_count": 1023
    }
}