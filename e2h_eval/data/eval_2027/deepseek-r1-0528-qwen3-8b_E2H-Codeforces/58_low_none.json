{
    "start": 1758298976.1854935,
    "end": 1758302656.0893388,
    "start-formatted": "2025-09-20 01:22 KST",
    "end-formatted": "2025-09-20 02:24 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to form an odd cycle, and the number of ways w (without adding loops or parallel edges).\n\n Observing:\n  - An odd cycle must have at least 3 edges (triangle is the smallest odd cycle: 3 edges).\n  - The problem states that the graph is undirected, without parallel edges or loops.\n\n Steps:\n\n 1. If the graph already contains an odd cycle, then we don't need to add any edge (t=0). But note: the problem says \"minimum number of edges that must be added\", so if there's an odd cycle, t=0.\n\n 2. However, note that the problem says \"form a simple cycle of an odd length\", meaning we can form one by adding edges.\n\n 3. We are to consider the minimum number of edges to add. So we consider:\n\n    Option 1: Add 0 edges? -> Check if there's already an odd cycle.\n\n    Option 2: Add 1 edge? -> Then we can complete an odd cycle by adding one edge. For example, if we have two vertices connected by two paths (one even and one odd) then adding an edge between these two might create an odd cycle? Actually, we can also consider creating a triangle (three vertices with two edges, then adding the third edge to form a triangle). \n\n    But note: the problem says \"simple cycle\" meaning no repeated vertex.\n\n 4. Let's break down:\n\n    Case 0: The graph has an odd cycle -> t=0, w=1 (if there's at least one odd cycle, but note: there might be multiple odd cycles? However, the problem counts the ways to add t edges (which is 0) and the condition is that after adding 0 edges we already have an odd cycle. But note: the problem says \"the number of ways to add t edges in order to form a cycle\", so if t=0, then the way is 1 if there's at least one odd cycle, but wait: actually, the problem says \"in order to form a cycle\", meaning we require that the graph already has an odd cycle. However, note: the problem does not specify that the odd cycle must be present initially, but we are allowed to add edges. But if we don't add any edge, then the graph must already have an odd cycle.\n\n    However, note: the problem says \"minimum number of edges to add\", so we are looking for the minimal t such that by adding t edges we get an odd cycle.\n\n    So:\n\n        t = 0: if the graph already has an odd cycle.\n\n        Otherwise, we look for t=1: if by adding one edge we can form an odd cycle.\n\n        Then t=2: if by adding two edges we can form an odd cycle, but no way to do it with one edge.\n\n        Then t=3: if we need three edges? Actually, the smallest odd cycle is 3, so if we don't have any odd cycle and cannot form one with 1 or 2 edges, then we must form a triangle? But note: we might already have two edges of a triangle and just need the third.\n\n    However, note that we are allowed to add any set of edges (as long as no duplicates or loops) and we want the minimum t.\n\n 5. How to check for an odd cycle?\n\n    We can use BFS/DFS with colors (bipartite check). A graph is bipartite if and only if it has no odd cycle. So if the graph is not bipartite, then it has an odd cycle (then t=0).\n\n 6. Now, if the graph is bipartite, then we try to see if we can form an odd cycle by adding 1 edge.\n\n    Consider: In a bipartite graph, all cycles are even. When we add one edge, when does it create an odd cycle?\n\n    Adding an edge (u, v) will create an odd cycle if and only if u and v are in the same color (i.e., same part of the bipartition) because then the path from u to v (the existing path in the bipartite graph) is of even length (because they are in the same set) and then adding the edge (u, v) makes the cycle (the even-length path + the new edge) which is odd.\n\n    But note: if u and v are adjacent, then we cannot add that edge (since no parallel edges). However, the input graph does not have parallel edges, but we are considering pairs that are not yet connected.\n\n    However, the graph is bipartite, so we know the coloring. Then the number of ways to add one edge that creates an odd cycle is the number of pairs (u, v) such that:\n        - u and v are in the same color (so",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains at least one simple cycle of odd length. Additionally, we need to count the number of ways to add these edges without creating any loops or parallel edges.\n\n### Approach\n1. **Check for Existing Odd Cycle**: The graph already contains an odd cycle if it is not bipartite. We can check this using a BFS or DFS-based bipartite check. If the graph is not bipartite, the answer is `0 1` because no edges need to be added.\n2. **Check for One-Edge Addition**: If the graph is bipartite, we then check if adding one edge can create an odd cycle. This happens if the edge connects two vertices of the same color in the bipartite graph. The number of such valid edges is the product of the counts of vertices in each color group.\n3. **Check for Two-Edge Addition**: If adding one edge does not suffice, we then consider adding two edges. The minimal cycle that can be formed with two edges is a triangle (three vertices connected in a cycle). We need to count all sets of three vertices where exactly two edges are missing to form a triangle. However, note that if the graph is disconnected, we might need to consider larger cycles, but the problem requires the minimal number of edges to add, which is at most two for forming a triangle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = 0\n    color_count = [0, 0]\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            components += 1\n            q = deque([i])\n            color[i] = 0\n            color_count[0] += 1\n            \n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        color_count[color[neighbor]] += 1\n                        q.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    same_color_pairs = color_count[0] * color_count[1]\n    t = 1\n    w = same_color_pairs\n\n    if w == 0:\n        t = 2\n        w = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if color[i] != color[j]:\n                    continue\n                count_missing = 0\n                for k in range(1, n+1):\n                    if k == i or k == j:\n                        continue\n                    if (i in graph[k]) or (j in graph[k]):\n                        continue\n                    if (k in graph[i]) and (k in graph[j]):\n                        count_missing += 1\n                if count_missing == 1:\n                    w += 1\n                    \n        if w == 0:\n            t = 3\n            w = 1 if n >= 3 else 0\n            if n < 3:\n                print(f\"{t} {w}\")\n                return\n                \n    print(f\"{t} {w}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The code first checks if the graph is bipartite by attempting to color the graph with two colors. If coloring fails, the graph contains an odd cycle, and the answer is `0 1`.\n2. **One-Edge Addition**: If the graph is bipartite, the code calculates the number of edges that can be added between vertices of the same color. Adding such an edge creates an odd cycle. The count of these edges is the product of vertices in each color group.\n3. **Two-Edge Addition**: If no single edge can create an odd cycle, the code checks for triangles (three vertices with exactly two edges missing). The count of such triangles is the number of ways to add two edges to form an odd cycle.\n4. **Three-Edge Addition**: If even two edges are insufficient (unlikely for connected graphs but handled for completeness), the code checks for the possibility of forming an odd cycle with three edges, though this scenario is rare and typically not needed for minimal solutions.\n\nThis approach efficiently checks all possible minimal edge additions to form an odd cycle, ensuring correctness while optimizing for performance.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = 0\n    color_count = [0, 0]\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            components += 1\n            q = deque([i])\n            color[i] = 0\n            color_count[0] += 1\n            \n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        color_count[color[neighbor]] += 1\n                        q.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    same_color_pairs = color_count[0] * color_count[1]\n    t = 1\n    w = same_color_pairs\n\n    if w == 0:\n        t = 2\n        w = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if color[i] != color[j]:\n                    continue\n                count_missing = 0\n                for k in range(1, n+1):\n                    if k == i or k == j:\n                        continue\n                    if (i in graph[k]) or (j in graph[k]):\n                        continue\n                    if (k in graph[i]) and (k in graph[j]):\n                        count_missing += 1\n                if count_missing == 1:\n                    w += 1\n                    \n        if w == 0:\n            t = 3\n            w = 1 if n >= 3 else 0\n            if n < 3:\n                print(f\"{t} {w}\")\n                return\n                \n    print(f\"{t} {w}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1093,
        "thoughts_token_count": 1023
    }
}