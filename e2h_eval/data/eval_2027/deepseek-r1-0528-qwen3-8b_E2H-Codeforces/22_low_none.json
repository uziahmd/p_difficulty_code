{
    "start": 1758294581.4551501,
    "end": 1758297322.6751513,
    "start-formatted": "2025-09-20 00:09 KST",
    "end-formatted": "2025-09-20 00:55 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n We are given: first line has n and m, then n lines with m characters (each row is a string of m digits)\n Steps:\n 1. Read the first line to get n and m.\n 2. Read the next n lines (each containing m characters) and store as a list of strings.\n\n Since each student's marks are given as a string of m digits, we can represent the gradebook as a 2D list of integers or keep as string for simplicity.\n\n The problem: \n   - A student is \"best\" at a subject if no one has a higher mark in that subject.\n   - A student is \"successful\" if there exists at least one subject in which he is the best.\n\n However, note: multiple students can be best at the same subject if they have the same highest mark? Actually, the definition says: \n   \"Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject.\"\n\n So if two students have the same highest mark, then both are best at that subject.\n\n Therefore, for each subject j, we can find the maximum mark. Then, any student i who has mark[j] equal to the maximum for subject j is considered best at subject j.\n\n Then, a student is successful if there is at least one subject j for which his mark in j equals the maximum of j.\n\n Example: \n   Input: \n      3 3\n      223\n      232\n      112\n\n   Let's break down:\n\n   Subject 0: marks [2, 2, 1] -> max=2 -> students 0 and 1 are best in subject0.\n   Subject 1: marks [2, 3, 1] -> max=3 -> only student 1 is best in subject1.\n   Subject 2: marks [3, 2, 2] -> max=3 -> only student 0 is best in subject2.\n\n   Now, check each student:\n     Student0: has best in subject0 and subject2 -> successful.\n     Student1: has best in subject0 and subject1 -> successful.\n     Student2: has no best subject -> not successful.\n\n   So output is 2.\n\n Plan:\n   Step 1: Parse input.\n   Step 2: For each subject j (from 0 to m-1), compute the maximum mark (as integer) in that column.\n\n   Step 3: For each student i, check for any subject j: if gradebook[i][j] == max_mark[j] then this student is successful.\n\n   But note: the input rows are given as strings. We can convert each character to int if needed, but for comparison we can also use the char since '9' > '1' etc. However, the problem says marks from 1 to 9, so we can compare as characters or convert to integers.\n\n   However, using integers might be more straightforward.\n\n   Let's do:\n\n   n, m = map(int, input().split())\n   gradebook = []\n   for _ in range(n):\n        s = input().strip()\n        # We can either keep as list of characters or convert to list of integers?\n        # Since we are comparing, we can keep as string and then compare by converting to int per cell? Or we can precompute the max per subject.\n\n   Alternatively, we can read the entire input as described.\n\n   But note: the example input is given as a string, but we are reading from stdin.\n\n   Example input format: \n        First line: \"3 3\"\n        Next three lines: \"223\", \"232\", \"112\"\n\n   However, the example input provided is given as a list of strings, but we'll read from stdin.\n\n   Steps:\n\n   n, m = map(int, input().split())\n   students = []\n   for i in range(n):\n        line = input().strip()\n        # Each line is a string of m characters. We can store as list of integers for easier comparison?\n        # But the problem doesn't require storing as integers, we can do:\n\n   Option 1: Convert each character to integer for the entire gradebook.\n\n   Let's do:\n\n   grades = []\n   for i in range(n):\n        row = list(map(int, list(input().strip())))\n\n   Then, for each subject j (column index), we can compute:\n        col_max[j] = max(grades[i][j] for i in range(n))\n\n   Then, for each student i, check if there exists a j such that grades[i][j] == col_max[j].\n\n   Alternatively, we can avoid building the entire col_max list by checking on the fly, but the grid is small (n, m <= 100).\n\n   Implementation:\n\n   Read n, m.\n   grades = []\n   for i in range(n):\n       ",
    "response": "\nTo solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark in that subject.\n\n### Approach\n1. **Input Parsing**: Read the number of students (n) and subjects (m) from the first line of input. Then, read each subsequent line to get the marks for each student in each subject. These marks are stored as a 2D list of integers for easier manipulation.\n2. **Determine Maximum Marks per Subject**: For each subject, find the highest mark achieved by any student. This helps identify the threshold a student must meet to be considered the best in that subject.\n3. **Check Successful Students**: For each student, check if they have achieved the maximum mark in any subject. If they have, they are counted as successful.\n4. **Output the Result**: Print the total number of successful students.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    if not data:\n        print(0)\n        return\n        \n    n, m = map(int, data[0].split())\n    grades = []\n    for i in range(1, 1 + n):\n        line = data[i].strip()\n        row = [int(char) for char in line]\n        grades.append(row)\n        \n    col_max = [0] * m\n    for j in range(m):\n        col = [grades[i][j] for i in range(n)]\n        col_max[j] = max(col)\n        \n    count_successful = 0\n    for i in range(n):\n        for j in range(m):\n            if grades[i][j] == col_max[j]:\n                count_successful += 1\n                break\n                \n    print(count_successful)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Input Parsing**: The code reads all input lines at once. The first line contains the integers n (number of students) and m (number of subjects). The subsequent lines contain the marks for each student, which are converted into a 2D list of integers.\n2. **Finding Maximum Marks**: For each subject (column), the code determines the highest mark by examining all student entries for that subject. This is stored in the `col_max` array.\n3. **Checking Successful Students**: For each student, the code checks if their mark in any subject matches the highest mark for that subject. If so, the student is marked as successful, and the loop breaks early to avoid redundant checks.\n4. **Output**: The total count of successful students is printed.\n\nThis approach efficiently checks each student's performance across all subjects, leveraging simple loops and comparisons to determine success based on the given criteria. The solution handles edge cases such as empty input or single-student scenarios gracefully.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    if not data:\n        print(0)\n        return\n        \n    n, m = map(int, data[0].split())\n    grades = []\n    for i in range(1, 1 + n):\n        line = data[i].strip()\n        row = [int(char) for char in line]\n        grades.append(row)\n        \n    col_max = [0] * m\n    for j in range(m):\n        col = [grades[i][j] for i in range(n)]\n        col_max[j] = max(col)\n        \n    count_successful = 0\n    for i in range(n):\n        for j in range(m):\n            if grades[i][j] == col_max[j]:\n                count_successful += 1\n                break\n                \n    print(count_successful)\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 442,
        "completion_token_count": 606,
        "thoughts_token_count": 1023
    }
}