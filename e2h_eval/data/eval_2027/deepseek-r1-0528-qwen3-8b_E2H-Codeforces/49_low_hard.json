{
    "start": 1758303236.877755,
    "end": 1758306767.591816,
    "start-formatted": "2025-09-20 02:33 KST",
    "end-formatted": "2025-09-20 03:32 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n Okay, we are given a graph with n nodes and m edges. For each edge, we are given two numbers: GCD and LCM of the two node values (let's call them x and y for the two nodes).\n\n We know that for two numbers x and y:\n   gcd(x, y) * lcm(x, y) = x * y.\n\n Therefore, for an edge (u, v) with given g and l, we must have:\n   x * y = g * l.\n\n Moreover, we know that:\n   x = g * a, y = g * b, where gcd(a, b) = 1.\n\n Then, the condition becomes:\n   (g*a) * (g*b) = g * (l)  =>  g^2 * a * b = g * l  =>  g * a * b = l.\n\n Since a and b are coprime, we can factorize g and l to see if they are compatible.\n\n Steps:\n\n 1. For each edge (u, v) with given g and l:\n      - If g > l, then there is no solution because gcd must be <= lcm and also note that x*y = g*l, but also note that if g>l then the equation would require a*b = l/g which is fractional, so invalid.\n      - Actually, we must have g divides l (because g divides x and y, so g divides x*y = g*l, which is true, but more importantly, from the relation: l = g * a * b, and a,b are integers, so g must divide l.\n\n 2. However, note: the condition is that for the two numbers x and y, we have:\n        x = g * a, y = g * b, and gcd(a,b)=1, and also x*y = g*l -> g^2 * a*b = g*l -> g * a*b = l.\n\n    So l must be divisible by g.\n\n 3. For each edge, if l % g != 0, then we can immediately output \"NO\".\n\n 4. Now, even if the above holds, we must assign numbers to the nodes such that for every edge (u, v) with given g and l, the product of the two node values is g*l and the gcd is g.\n\n 5. Another observation: the entire graph must satisfy the following. We can try to set up equations for each node.\n\n Let d[i] be the value at node i.\n\n For an edge (u, v): \n        d[u] * d[v] = g * l, and gcd(d[u], d[v]) = g.\n\n But note: we can also write d[u] = g * a, d[v] = g * b, with gcd(a,b)=1, and then d[u]*d[v] = g^2 * a * b = g * l -> g * a * b = l.\n\n Also, note that the value at a node might be constrained by multiple edges.\n\n 6. We can think of the problem as having a graph and each edge gives a constraint on the product and the gcd.\n\n However, note: the entire graph might not be connected. We should consider each connected component separately.\n\n 7. Approach:\n\n    a. Check for each edge: if l % g != 0, then return \"NO\".\n    b. Additionally, if g == 1, then the product is l, and the two numbers must be factors of l that are coprime and multiply to l.\n\n    But note: the problem does not require unique solution. We only need one.\n\n 8. Another idea: use the fact that the gcd must divide both numbers. So for a node u, let d[u] be some value. Then for each edge (u, v) we have:\n\n        d[u] * d[v] = g * l, and d[u] must be divisible by g (since g divides d[u] and d[v]), and similarly d[v] must be divisible by g.\n\n    However, wait: from the definition, g is the gcd of d[u] and d[v]. So yes, g divides d[u] and g divides d[v].\n\n    Then, we can write d[u] = g * k (for some integer k) and d[v] = (g * l) / (g * k) = l / k. But note: then the gcd(d[u], d[v]) = g * gcd(k, l/k) must equal g. So we require gcd(k, l/k) = 1.\n\n    Alternatively, we can set d[u] = g * k, and then d[v] = (g * l) / (g * k) = l / k. Then we must have that k divides l, and that gcd(k, l//k) = 1.\n\n 9. So for each edge (u, v) with",
    "response": "\nTo solve this problem, we need to determine if it's possible to restore the number of mushrooms on each lawn (vertex) in a graph based on given roads (edges). Each edge provides the greatest common divisor (GCD) and least common multiple (LCM) of the mushroom counts on the connected lawns. The solution involves verifying the feasibility of assigning mushroom counts to all lawns such that the given GCD and LCM conditions for each edge are satisfied.\n\n### Approach\n1. **Edge Validation**: For each edge, check if the LCM is divisible by the GCD. If not, it's impossible to satisfy the conditions, and the answer is \"NO\".\n2. **Graph Analysis**: The problem can be broken down into connected components. For each component, we need to ensure that the product of mushroom counts for connected lawns matches the given LCM when divided by the GCD.\n3. **Component Processing**: For each connected component, select an arbitrary node and assign it a value. Propagate values to adjacent nodes using the edge conditions. Ensure that the assigned values satisfy the GCD and LCM constraints for all edges.\n4. **Consistency Check**: After assigning values to all nodes in a component, verify that all edge conditions are met. If any condition fails, the solution is invalid.\n\n### Solution Code\n```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"NO\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); g = int(data[index+2]); l = int(data[index+3])\n        index += 4\n        edges.append((u-1, v-1, g, l))\n    \n    graph = [[] for _ in range(n)]\n    for u, v, g, l in edges:\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n        \n    parent_map = {}\n    visited = [False] * n\n    components = []\n    comp_nodes = []\n    for i in range(n):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            comp = []\n            while stack:\n                node = stack.pop()\n                comp.append(node)\n                for neighbor, g, l in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n            components.append(comp)\n            \n    ans = [-1] * n\n    valid = True\n    for comp in components:\n        comp_graph = {}\n        for node in comp:\n            comp_graph[node] = []\n            for neighbor, g, l in graph[node]:\n                if neighbor in comp:\n                    comp_graph[node].append((neighbor, g, l))\n                    \n        for u in comp:\n            for v, g, l in comp_graph[u]:\n                if l % g != 0:\n                    valid = False\n                    break\n                    \n            if not valid:\n                break\n                \n        if not valid:\n            break\n            \n        start = comp[0]\n        ans[start] = 1\n        queue = deque([start])\n        while queue and valid:\n            node = queue.popleft()\n            for neighbor, g, l in comp_graph[node]:\n                if ans[neighbor] == -1:\n                    ans[neighbor] = ans[node] * (l // (g * ans[node]))\n                    queue.append(neighbor)\n                    \n        if not valid:\n            break\n            \n        for u in comp:\n            for v, g, l in comp_graph[u]:\n                if ans[u] == -1 or ans[v] == -1:\n                    continue\n                if (ans[u] * ans[v]) != (g * l):\n                    valid = False\n                    break\n                if g != math.gcd(ans[u], ans[v]):\n                    valid = False\n                    break\n                    \n        if not valid:\n            break\n            \n    if valid:\n        print(\"YES\")\n        print(\" \".join(map(str, ans)))\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    import math\n    main()\n```\n\n### Explanation\n1. **Edge Validation**: The code first checks if the LCM is divisible by the GCD for each edge. If not, it immediately outputs \"NO\".\n2. **Graph Components**: The graph is decomposed into connected components. Each component is processed separately to ensure local constraints are satisfied.\n3. **Value Assignment**: Starting from an arbitrary node in a component, the code assigns values to adjacent nodes using the product condition derived from the GCD and LCM. The value of a node is determined based on its neighbors' values and the edge conditions.\n4. **Consistency Check**: After assigning values to all nodes in a component, the code verifies that all edge conditions (product and GCD) are satisfied. If any condition fails, the solution is deemed invalid.\n5. **Output**: If all conditions are satisfied, the code outputs \"YES\" followed by the mushroom counts. Otherwise, it outputs \"NO\".\n\nThis approach efficiently checks the feasibility of the solution by leveraging graph traversal and constraint propagation, ensuring correctness while handling large input sizes within feasible time complexity.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"NO\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); g = int(data[index+2]); l = int(data[index+3])\n        index += 4\n        edges.append((u-1, v-1, g, l))\n    \n    graph = [[] for _ in range(n)]\n    for u, v, g, l in edges:\n        graph[u].append((v, g, l))\n        graph[v].append((u, g, l))\n        \n    parent_map = {}\n    visited = [False] * n\n    components = []\n    comp_nodes = []\n    for i in range(n):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            comp = []\n            while stack:\n                node = stack.pop()\n                comp.append(node)\n                for neighbor, g, l in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n            components.append(comp)\n            \n    ans = [-1] * n\n    valid = True\n    for comp in components:\n        comp_graph = {}\n        for node in comp:\n            comp_graph[node] = []\n            for neighbor, g, l in graph[node]:\n                if neighbor in comp:\n                    comp_graph[node].append((neighbor, g, l))\n                    \n        for u in comp:\n            for v, g, l in comp_graph[u]:\n                if l % g != 0:\n                    valid = False\n                    break\n                    \n            if not valid:\n                break\n                \n        if not valid:\n            break\n            \n        start = comp[0]\n        ans[start] = 1\n        queue = deque([start])\n        while queue and valid:\n            node = queue.popleft()\n            for neighbor, g, l in comp_graph[node]:\n                if ans[neighbor] == -1:\n                    ans[neighbor] = ans[node] * (l // (g * ans[node]))\n                    queue.append(neighbor)\n                    \n        if not valid:\n            break\n            \n        for u in comp:\n            for v, g, l in comp_graph[u]:\n                if ans[u] == -1 or ans[v] == -1:\n                    continue\n                if (ans[u] * ans[v]) != (g * l):\n                    valid = False\n                    break\n                if g != math.gcd(ans[u], ans[v]):\n                    valid = False\n                    break\n                    \n        if not valid:\n            break\n            \n    if valid:\n        print(\"YES\")\n        print(\" \".join(map(str, ans)))\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    import math\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 552,
        "completion_token_count": 1116,
        "thoughts_token_count": 1023
    }
}