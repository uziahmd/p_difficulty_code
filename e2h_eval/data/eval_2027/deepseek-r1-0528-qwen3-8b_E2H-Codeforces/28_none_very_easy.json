{
    "start": 1758293082.4010084,
    "end": 1758293145.463853,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:45 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    total_length_after_modifications = total_length - (total_length - 2) // 2\n    \n    # We need to end up with a single character, which is g\n    # So the number of times we can perform the operation is (total_length - 1)\n    # Each operation reduces length by 1, so after (total_length - 1) operations, we get one character\n    # The final character depends on the number of 0s and 1s in the original string\n    # Let's think about how the final character is determined\n    # Each operation replaces two characters with one:\n    # - \"00\" -> \"0\"\n    # - \"01\" -> \"0\"\n    # - \"10\" -> \"0\"\n    # - \"11\" -> \"1\"\n    # So the final character is determined by the parity of the number of 1s in the original string\n    # Because each operation reduces the number of 1s by 0 or 1, depending on the pair\n    # So the parity of the number of 1s determines the final character\n    # So for the final character to be g, the number of 1s in the original string must have parity equal to g\n    \n    # So the number of beautiful strings is the number of binary strings with n 0s and m 1s such that m % 2 == g\n    # So count all combinations of n 0s and m 1s where m % 2 == g\n    # Which is the same as counting the number of ways to choose positions for m 1s in (n + m) positions\n    # And then check if m % 2 == g\n    \n    # But wait, the problem is not just that. Because during the process of modification, the final character is determined by the parity of the number of 1s in the original string\n    # So the final character is determined by the parity of m\n    # So to get g as the final character, we need m % 2 == g\n    \n    if (m % 2) != g:\n        print(0)\n        return\n    \n    # Now, count the number of binary strings with n 0s and m 1s\n    # Which is C(n + m, m)\n    result = comb(n + m, m)\n    print(result % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    total_length_after_modifications = total_length - (total_length - 2) // 2\n    \n    # We need to end up with a single character, which is g\n    # So the number of times we can perform the operation is (total_length - 1)\n    # Each operation reduces length by 1, so after (total_length - 1) operations, we get one character\n    # The final character depends on the number of 0s and 1s in the original string\n    # Let's think about how the final character is determined\n    # Each operation replaces two characters with one:\n    # - \"00\" -> \"0\"\n    # - \"01\" -> \"0\"\n    # - \"10\" -> \"0\"\n    # - \"11\" -> \"1\"\n    # So the final character is determined by the parity of the number of 1s in the original string\n    # Because each operation reduces the number of 1s by 0 or 1, depending on the pair\n    # So the parity of the number of 1s determines the final character\n    # So for the final character to be g, the number of 1s in the original string must have parity equal to g\n    \n    # So the number of beautiful strings is the number of binary strings with n 0s and m 1s such that m % 2 == g\n    # So count all combinations of n 0s and m 1s where m % 2 == g\n    # Which is the same as counting the number of ways to choose positions for m 1s in (n + m) positions\n    # And then check if m % 2 == g\n    \n    # But wait, the problem is not just that. Because during the process of modification, the final character is determined by the parity of the number of 1s in the original string\n    # So the final character is determined by the parity of m\n    # So to get g as the final character, we need m % 2 == g\n    \n    if (m % 2) != g:\n        print(0)\n        return\n    \n    # Now, count the number of binary strings with n 0s and m 1s\n    # Which is C(n + m, m)\n    result = comb(n + m, m)\n    print(result % MOD)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 603,
        "thoughts_token_count": 0
    }
}