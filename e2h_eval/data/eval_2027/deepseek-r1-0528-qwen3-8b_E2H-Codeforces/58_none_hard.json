{
    "start": 1758293150.4661102,
    "end": 1758293197.2631423,
    "start-formatted": "2025-09-19 23:45 KST",
    "end-formatted": "2025-09-19 23:46 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef bfs(start, graph, visited):\n    queue = deque()\n    queue.append((start, 0))\n    visited[start] = True\n    while queue:\n        node, color = queue.popleft()\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append((neighbor, color ^ 1))\n            else:\n                if visited[neighbor] == color:\n                    return False\n    return True\n\ndef is_bipartite(graph, n):\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if not bfs(i, graph, visited):\n                return False\n    return True\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n + 1)]\n    index = 2\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n        index += 2\n    \n    # Find all connected components\n    visited = [False] * (n + 1)\n    components = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            component = []\n            queue = deque()\n            queue.append(i)\n            visited[i] = True\n            while queue:\n                node = queue.popleft()\n                component.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n            components.append(component)\n    \n    # Check if any component is non-bipartite (i.e., contains an odd cycle)\n    for comp in components:\n        subgraph = [[] for _ in range(n + 1)]\n        for u in comp:\n            for v in graph[u]:\n                if v in comp:\n                    subgraph[u].append(v)\n        if not is_bipartite(subgraph, n):\n            print(\"0 1\")\n            return\n    \n    # If no odd cycle exists, we need to form one\n    # We can choose any two nodes and connect them with a path of even length\n    # So we need to add one edge to form an odd-length cycle\n    \n    # Count number of pairs (u, v) that are not directly connected and have even distance\n    # To do this, we need to compute distances from each node to all others in the same component\n    # and count pairs with even distance\n    \n    total_ways = 0\n    for comp in components:\n        size = len(comp)\n        if size < 2:\n            continue\n        \n        # BFS to compute distances from each node in the component\n        dist = [[-1] * (n + 1) for _ in range(n + 1)]\n        for u in comp:\n            queue = deque()\n            queue.append(u)\n            dist[u][u] = 0\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if neighbor in comp and dist[u][neighbor] == -1:\n                        dist[u][neighbor] = dist[u][node] + 1\n                        queue.append(neighbor)\n        \n        # Count pairs (u, v) with even distance and not directly connected\n        for i in range(len(comp)):\n            for j in range(i + 1, len(comp)):\n                u = comp[i]\n                v = comp[j]\n                if dist[u][v] % 2 == 0 and u != v:\n                    total_ways += 1\n    \n    print(f\"1 {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\n\ndef bfs(start, graph, visited):\n    queue = deque()\n    queue.append((start, 0))\n    visited[start] = True\n    while queue:\n        node, color = queue.popleft()\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append((neighbor, color ^ 1))\n            else:\n                if visited[neighbor] == color:\n                    return False\n    return True\n\ndef is_bipartite(graph, n):\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if not bfs(i, graph, visited):\n                return False\n    return True\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n + 1)]\n    index = 2\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n        index += 2\n    \n    # Find all connected components\n    visited = [False] * (n + 1)\n    components = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            component = []\n            queue = deque()\n            queue.append(i)\n            visited[i] = True\n            while queue:\n                node = queue.popleft()\n                component.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n            components.append(component)\n    \n    # Check if any component is non-bipartite (i.e., contains an odd cycle)\n    for comp in components:\n        subgraph = [[] for _ in range(n + 1)]\n        for u in comp:\n            for v in graph[u]:\n                if v in comp:\n                    subgraph[u].append(v)\n        if not is_bipartite(subgraph, n):\n            print(\"0 1\")\n            return\n    \n    # If no odd cycle exists, we need to form one\n    # We can choose any two nodes and connect them with a path of even length\n    # So we need to add one edge to form an odd-length cycle\n    \n    # Count number of pairs (u, v) that are not directly connected and have even distance\n    # To do this, we need to compute distances from each node to all others in the same component\n    # and count pairs with even distance\n    \n    total_ways = 0\n    for comp in components:\n        size = len(comp)\n        if size < 2:\n            continue\n        \n        # BFS to compute distances from each node in the component\n        dist = [[-1] * (n + 1) for _ in range(n + 1)]\n        for u in comp:\n            queue = deque()\n            queue.append(u)\n            dist[u][u] = 0\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if neighbor in comp and dist[u][neighbor] == -1:\n                        dist[u][neighbor] = dist[u][node] + 1\n                        queue.append(neighbor)\n        \n        # Count pairs (u, v) with even distance and not directly connected\n        for i in range(len(comp)):\n            for j in range(i + 1, len(comp)):\n                u = comp[i]\n                v = comp[j]\n                if dist[u][v] % 2 == 0 and u != v:\n                    total_ways += 1\n    \n    print(f\"1 {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 581,
        "completion_token_count": 818,
        "thoughts_token_count": 0
    }
}