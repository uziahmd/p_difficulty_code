{
    "start": 1758090099.7484033,
    "end": 1758092364.7268286,
    "start-formatted": "2025-09-17 15:21 KST",
    "end-formatted": "2025-09-17 15:59 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n Okay, let's analyze the problem:\n\n We are given a number of test cases. For each test case, an integer `n` (from 1 to 10^18) is provided.\n\n We need to determine if there exists an integer `k > 1` such that a snowflake with `n` vertices can be constructed.\n\n According to the model:\n\n   - The initial vertex is connected to `k` new vertices.\n   - Then, each vertex with degree 1 (i.e., leaves) is connected to `k` new vertices (so we add k children to each leaf).\n   - This step is done at least once.\n\n But note: the process is done in layers. Let's denote by `d` the depth (at least 2 layers: one initial expansion and then at least one more).\n\n Actually, the description says:\n\n   Step 0: one vertex (the center).\n\n   Step 1: connect the center to k new vertices. Now we have 1 + k vertices.\n\n   Step 2: each of the k leaves from step 1 will be connected to k new vertices? But wait: the rule says \"Each vertex that is connected to only one other vertex\" (which are the leaves) is connected to k more new vertices. However, note that after step 1, the center has degree k and the leaves have degree 1.\n\n   Then, step 2: we take each of the k leaves and attach k new vertices to each, so we add k*k vertices.\n\n   Then, if we do step 3, we would take all the new leaves (from step 2) and attach k new vertices to each, but wait: the rule says \"each vertex that is connected to only one other vertex\", and after step 2, the leaves from step 2 have degree 1, so they will be expanded again. However, note that the center and the step1 leaves are no longer leaves (they have degree k >=2). \n\n   So the snowflake grows in layers. The entire graph is built as:\n\n        Layer 0: 1 node (center)\n        Layer 1: k nodes\n        Layer 2: k^2 nodes\n        Layer 3: k^3 nodes\n\n   But wait, is that correct? Actually, the rule does not say that we have to do the expansion for every leaf at the same time. However, the problem states that the snowflake must be constructed by doing the step at least once (meaning at least two layers: the center and one layer of leaves, and then we can do more). But note: the example smallest snowflake for k=4 has 1 + 4 + 4*4 = 1+4+16 = 21? Actually, the example figure might show just two layers? Or maybe the example is just the first two expansions? Let me read again.\n\n   The problem says: \n      Initially, the graph has only one vertex.\n      Then, the initial vertex is connected to k new vertices (k>1). [This is the first expansion: depth 1]\n      Then, each vertex that is connected to only one other vertex (so the leaves from the previous step) is connected by edges to k more new vertices. [This step should be done at least once.]\n\n   So the minimal snowflake has two expansions: \n        Layer0: 1 node\n        Layer1: k nodes\n        Layer2: k * k nodes? \n\n   But wait, in the second expansion, we are taking each leaf from layer1 (there are k leaves) and adding k new edges from each? Then the total number of nodes becomes 1 + k + k*k.\n\n   However, the problem says \"This step should be done at least once.\" meaning at least one expansion beyond the initial? Actually, the initial expansion is the first step, and then we must do the expansion at least one more time? \n\n   But note: the first step is \"Then, more vertices are added to the graph. The initial vertex is connected by edges to k new vertices (k > 1).\" and then \"Each vertex that is connected to only one other vertex is connected by edges to k more new vertices. This step should be done at least once.\"\n\n   So the process:\n\n     Step 0: center (1 node)\n     Step 1: add k nodes (connected to center) -> total n0 = 1+k\n     Step 2: add k*k nodes (connected to the k leaves from step1) -> total n1 = 1+k+k*k\n\n   But note: the problem says \"This step should be done at least once\", meaning the expansion (adding k new edges to leaves) is done at least once. So the minimal snowflake has two expansions? Actually, the first expansion (step1) is the initial expansion, and then we must do the expansion at least once (so step",
    "response": "\nTo solve this problem, we need to determine if a given number of vertices `n` can form a snowflake graph as defined by Rudolf. The snowflake graph is constructed in layers, starting from a single central vertex and expanding outward in a tree-like structure where each leaf node from the previous layer is connected to `k` new nodes (where `k > 1`). \n\n### Approach\n1. **Problem Analysis**: The snowflake graph's vertex count follows a specific pattern. The minimal snowflake has three layers:\n   - Layer 0: 1 vertex (center).\n   - Layer 1: `k` vertices connected to the center.\n   - Layer 2: `k^2` vertices connected to the leaves of layer 1.\n   The total vertices for such a minimal snowflake is `1 + k + k^2`. However, the problem allows for more layers, meaning the vertex count can be generalized as `1 + k + k^2 + ... + k^d` for some depth `d >= 2`.\n\n2. **Key Insight**: For a given `n`, we need to check if there exists an integer `k > 1` and an integer `d >= 2` such that `n = (k^(d+1) - 1)/(k - 1)`. This formula represents the sum of a geometric series with ratio `k` and `d+1` terms (from exponent 0 to `d`).\n\n3. **Constraints Handling**: Since `n` can be as large as `10^18`, we need an efficient method to check for possible `k` values. Direct computation for all possible `k` is infeasible, so we use mathematical properties:\n   - For `d = 2`, the equation simplifies to `n = 1 + k + k^2`. We can solve for `k` by checking if the quadratic equation `k^2 + k + (1 - n) = 0` has integer roots greater than 1.\n   - For `d >= 3`, note that the vertex count grows exponentially. We can bound `k` by observing that `k` must be less than `n` (since `k^d` would otherwise exceed `n` for `d >= 3`).\n\n4. **Algorithm Selection**:\n   - **Case 1 (n < 7)**: For small `n`, manually check if any valid `(k, d)` exists. For example, `n = 9` can be formed with `k=2` and `d=3` (since `1 + 2 + 4 + 8 = 15` is too big, but wait—actually, `1 + 2 + 4 = 7` which is less than 9, and `1 + 2 + 4 + 8 = 15` which is more, so no solution for `n=9`? Let me correct: the example input includes `9` and the expected output is \"NO\", so our approach aligns).\n   - **Case 2 (n >= 7)**: For larger `n`, iterate over possible `k` values from 2 up to the cube root of `n` (since `k^3 <= n`). For each `k`, compute the maximum depth `d` such that the sum of the geometric series does not exceed `n`, then check if `n` matches any of these sums.\n\n### Solution Code\n```python\nimport math\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    results = []\n    index = 1\n    \n    for _ in range(t):\n        n = int(data[index]); index += 1\n        \n        if n < 7:\n            results.append(\"NO\")\n            continue\n            \n        found = False\n        max_k = int(round(n**(1/3))) + 2\n        \n        for k in range(2, max_k + 1):\n            total = 1\n            current = 1\n            while True:\n                current *= k\n                if current > n:\n                    break\n                total += current\n                if total == n:\n                    found = True\n                    break\n            if found:\n                break\n                \n        if found:\n            results.append(\"YES\")\n        else:\n            # Check for d=2 separately\n            discriminant = 1 + 4 * (1 - n)\n            if discriminant < 0:\n                pass\n            else:\n                root = math.isqrt(discriminant)\n                if root * root == discriminant:\n                    k_val = (-1 + root) // 2\n                    if k_val > 1:\n                        found = True\n                        \n            if found:\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n                \n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read in bulk for efficiency, especially given the constraints.\n2. **Small `n` Handling**: For `n < 7`, it's impossible to form a valid snowflake (as per the problem's examples), so the answer is immediately \"NO\".\n3. **Iterating Over Possible `k` Values**: For each test case with `n >= 7`, the code checks possible `k` values from 2 up to the cube root of `n` (plus a small buffer). For each `k`, it calculates the cumulative vertex count by expanding layers until the total exceeds `n`.\n4. **Checking Geometric Series Sum**: If at any point the cumulative sum equals `n`, the answer is \"YES\". For cases where `d = 2` (i.e., three layers), the code checks if `n` fits the quadratic equation `1 + k + k^2`.\n5. **Output Results**: The results for all test cases are collected and printed at the end.\n\nThis approach efficiently checks all possible configurations without resorting to brute force, leveraging mathematical insights to handle very large numbers.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    t = int(data[0])\n    results = []\n    index = 1\n    \n    for _ in range(t):\n        n = int(data[index]); index += 1\n        \n        if n < 7:\n            results.append(\"NO\")\n            continue\n            \n        found = False\n        max_k = int(round(n**(1/3))) + 2\n        \n        for k in range(2, max_k + 1):\n            total = 1\n            current = 1\n            while True:\n                current *= k\n                if current > n:\n                    break\n                total += current\n                if total == n:\n                    found = True\n                    break\n            if found:\n                break\n                \n        if found:\n            results.append(\"YES\")\n        else:\n            # Check for d=2 separately\n            discriminant = 1 + 4 * (1 - n)\n            if discriminant < 0:\n                pass\n            else:\n                root = math.isqrt(discriminant)\n                if root * root == discriminant:\n                    k_val = (-1 + root) // 2\n                    if k_val > 1:\n                        found = True\n                        \n            if found:\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n                \n    for res in results:\n        print(res)\n\nif __name__ == '__main__':\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 556,
        "completion_token_count": 1278,
        "thoughts_token_count": 1023
    }
}