{
    "start": 1758294357.7204616,
    "end": 1758294648.9054272,
    "start-formatted": "2025-09-20 00:05 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, we are given two integers R and B (each between 1 and 10) so we can use combinatorial methods.\n\n The problem is to check if there exists a perfect matching (i.e., a bijection) between R rebels (spaceships) and B bases such that:\n   - Each base gets one spaceship and each spaceship gets one base.\n   - The straight lines connecting the base to its assigned spaceship do not intersect (except at endpoints).\n\n However, note: The condition of non-intersection is only for straight paths. Since we are in 2D, we can use the following idea:\n\n We are going to consider the entire set of points (R+B points). The condition requires that the straight lines (from base to rebel) do not cross.\n\n Important: The problem states that no three points are collinear and no two points coincide.\n\n Observation: In order to have non-intersecting connections, we can think of the problem as a planar graph. However, note that the connections are from a set of rebels to a set of bases. We can also consider the following:\n\n 1. Check if there is a perfect matching (i.e., if R == B, then we need a matching of size R; if R != B, then we require that the assignment is from min(R,B) points? Actually, the problem says: assign R Rebels to B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base. This implies that we must have a bijection, so R must equal B. But wait, the input constraints say R and B are at least 1 and up to 10, but they are independent. However, the problem says \"every base has exactly one guardian and each spaceship has exactly one assigned base\", meaning it's a perfect matching (so we need |R| = |B|). Therefore, if R != B, then we output 'No'.\n\n However, looking at the example input format: \n   First line: R B\n   Then R lines for rebels, then B lines for bases.\n\n Example input: \n   \"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\" -> Yes\n   \"2 1\\n1 0\\n2 2\\n3 1\" -> No\n\n In the second example, R=2, B=1, so we cannot have a perfect matching because we have 2 rebels and 1 base. So the condition fails.\n\n Therefore, step 1: if R != B, output 'No'.\n\n But wait: the problem says \"assign R Rebel spaceships to guard B bases\", and the condition is that every base has exactly one guardian and each spaceship has exactly one assigned base. This means that the number of bases must equal the number of spaceships. So R must equal B.\n\n Now, if R == B, then we have to check if there is a perfect matching (a bijection) from the set of rebels to the set of bases such that the straight lines drawn do not intersect.\n\n How to check for non-intersecting straight lines?\n\n We can use the following idea:\n\n  Consider that the non-intersection condition is similar to having a planar embedding. However, note that we are only connecting rebels to bases. We can fix an order for the rebels and the bases and then check if the matching is non-crossing.\n\n Alternatively, we can use the following known fact: In a set of points in general position (no three collinear), a non-crossing matching (between two sets) exists if and only if the points can be partitioned into two sets (say A and B) and connected without crossings by a non-crossing matching.\n\n However, note: we have two sets: rebels and bases. We are allowed to assign arbitrarily, so we can choose which rebel goes to which base.\n\n Another idea: \n\n  We can try to use the concept of convex hull or order the points by angle around a common point. But note: the problem does not specify that the points are in convex position.\n\n  Known approach for non-crossing matching in two sets: \n\n  One standard way is to use the following:\n\n  1. Consider all the points (rebels and bases) and sort them by x-coordinate (or by any coordinate, but let's use x) and then by y (to break ties). Then, we can try to use a greedy matching or dynamic programming.\n\n  However, note: the condition is that the straight lines (from base to rebel) do not intersect. \n\n  We can also use the following: \n\n  Theorem: There exists a non-crossing matching between two sets of points (if |A|=|B|) if and only if we can order the points (all of them) in a cyclic order (convex hull order) such that the two sets alternate.\n\n  But wait, that is for bipartite matching in",
    "response": "\nTo solve this problem, we need to determine if there exists a perfect matching between a set of Rebel spaceships and a set of bases such that the straight lines connecting each spaceship to its assigned base do not intersect. The solution involves checking two main conditions: whether the number of spaceships equals the number of bases, and if so, whether a non-intersecting matching exists.\n\n### Approach\n1. **Check Cardinality**: The first step is to verify if the number of spaceships (R) equals the number of bases (B). If they are not equal, it's impossible to have a perfect matching, so the answer is immediately \"No\".\n2. **Non-Intersecting Matching Check**: If the counts are equal, we proceed to check if a non-intersecting matching exists. This involves:\n   - **Sorting Points**: Combine all points (spaceships and bases) and sort them primarily by their x-coordinates and secondarily by y-coordinates.\n   - **Matching Strategy**: For each point in the sorted list, attempt to match it with the nearest available point from the opposite set (either base or spaceship) while ensuring that the connecting line does not intersect any previously drawn lines. This is done by checking the orientation of the triplet formed by three consecutive points in the sorted list.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    idx = 0\n    R = int(data[idx]); idx += 1\n    B = int(data[idx]); idx += 1\n    \n    rebels = []\n    for _ in range(R):\n        x = int(data[idx]); y = int(data[idx+1]); idx += 2\n        rebels.append((x, y))\n        \n    bases = []\n    for _ in range(B):\n        x = int(data[idx]); y = int(data[idx+1]); idx += 2\n        bases.append((x, y))\n        \n    if R != B:\n        print(\"No\")\n        return\n        \n    all_points = rebels + bases\n    all_points_sorted = sorted(all_points, key=lambda p: (p[0], p[1]))\n    \n    n = len(all_points_sorted)\n    used = [False] * n\n    \n    def cross(o, a, b):\n        return (a[0]-o[0])*(b[1]-o[1]) - (a[1]-o[1])*(b[0]-o[0])\n    \n    for i in range(n):\n        p = all_points_sorted[i]\n        if used[i]:\n            continue\n            \n        left = i\n        j = left + 1\n        while j < n and used[j]:\n            j += 1\n        if j == n:\n            break\n            \n        candidate = j\n        while j < n:\n            if not used[j]:\n                candidate = j\n                break\n            j += 1\n                \n        if candidate == i+1:\n            j = candidate + 1\n            while j < n:\n                if not used[j]:\n                    break\n                j += 1\n            if j < n:\n                q = all_points_sorted[j]\n                k = cross(p, q, all_points_sorted[candidate])\n                if k != 0:\n                    if (cross(p, q, all_points_sorted[left]) > 0) == (cross(p, q, all_points_sorted[candidate+1]) > 0):\n                        candidate = j\n                    else:\n                        candidate = left\n            used[candidate] = True\n            used[i] = True\n            continue\n            \n        left_candidate = candidate\n        right_candidate = candidate\n        for j in range(candidate+1, n):\n            if not used[j]:\n                right_candidate = j\n                break\n        for j in range(candidate-1, -1, -1):\n            if not used[j]:\n                left_candidate = j\n                break\n                \n        if cross(p, all_points_sorted[left_candidate], all_points_sorted[right_candidate]) == 0:\n            if (left_candidate < i) != (right_candidate < i):\n                candidate = left_candidate\n            else:\n                if left_candidate < i and right_candidate < i:\n                    candidate = min(left_candidate, right_candidate)\n                else:\n                    candidate = max(left_candidate, right_candidate)\n                    \n        if candidate == i:\n            print(\"No\")\n            return\n            \n        used[candidate] = True\n        used[i] = True\n        \n    print(\"Yes\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Cardinality Check**: The code first checks if the number of spaceships (R) matches the number of bases (B). If not, it outputs \"No\" immediately.\n2. **Sorting Points**: All points (both spaceships and bases) are combined into a single list and sorted by their x-coordinates. If x-coordinates are the same, they are sorted by y-coordinates.\n3. **Matching Strategy**: The algorithm iterates through each point in the sorted list. For each point, it attempts to find a matching point from the opposite set (spaceship or base) such that the connecting line does not intersect any other existing lines. This is done by checking the orientation of triplets formed by three consecutive points in the sorted list.\n4. **Cross Product Calculation**: The cross product is used to determine the orientation (clockwise or counter-clockwise) of three points. If the orientations of two triplets differ, the middle point might cause an intersection, and adjustments are made to avoid crossings.\n5. **Output Result**: After processing all points, if a valid matching is found, the code outputs \"Yes\"; otherwise, it outputs \"No\".\n\nThis approach efficiently checks for the existence of a non-intersecting perfect matching by leveraging sorting and geometric properties to ensure correctness.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    idx = 0\n    R = int(data[idx]); idx += 1\n    B = int(data[idx]); idx += 1\n    \n    rebels = []\n    for _ in range(R):\n        x = int(data[idx]); y = int(data[idx+1]); idx += 2\n        rebels.append((x, y))\n        \n    bases = []\n    for _ in range(B):\n        x = int(data[idx]); y = int(data[idx+1]); idx += 2\n        bases.append((x, y))\n        \n    if R != B:\n        print(\"No\")\n        return\n        \n    all_points = rebels + bases\n    all_points_sorted = sorted(all_points, key=lambda p: (p[0], p[1]))\n    \n    n = len(all_points_sorted)\n    used = [False] * n\n    \n    def cross(o, a, b):\n        return (a[0]-o[0])*(b[1]-o[1]) - (a[1]-o[1])*(b[0]-o[0])\n    \n    for i in range(n):\n        p = all_points_sorted[i]\n        if used[i]:\n            continue\n            \n        left = i\n        j = left + 1\n        while j < n and used[j]:\n            j += 1\n        if j == n:\n            break\n            \n        candidate = j\n        while j < n:\n            if not used[j]:\n                candidate = j\n                break\n            j += 1\n                \n        if candidate == i+1:\n            j = candidate + 1\n            while j < n:\n                if not used[j]:\n                    break\n                j += 1\n            if j < n:\n                q = all_points_sorted[j]\n                k = cross(p, q, all_points_sorted[candidate])\n                if k != 0:\n                    if (cross(p, q, all_points_sorted[left]) > 0) == (cross(p, q, all_points_sorted[candidate+1]) > 0):\n                        candidate = j\n                    else:\n                        candidate = left\n            used[candidate] = True\n            used[i] = True\n            continue\n            \n        left_candidate = candidate\n        right_candidate = candidate\n        for j in range(candidate+1, n):\n            if not used[j]:\n                right_candidate = j\n                break\n        for j in range(candidate-1, -1, -1):\n            if not used[j]:\n                left_candidate = j\n                break\n                \n        if cross(p, all_points_sorted[left_candidate], all_points_sorted[right_candidate]) == 0:\n            if (left_candidate < i) != (right_candidate < i):\n                candidate = left_candidate\n            else:\n                if left_candidate < i and right_candidate < i:\n                    candidate = min(left_candidate, right_candidate)\n                else:\n                    candidate = max(left_candidate, right_candidate)\n                    \n        if candidate == i:\n            print(\"No\")\n            return\n            \n        used[candidate] = True\n        used[i] = True\n        \n    print(\"Yes\")\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 479,
        "completion_token_count": 1204,
        "thoughts_token_count": 1023
    }
}