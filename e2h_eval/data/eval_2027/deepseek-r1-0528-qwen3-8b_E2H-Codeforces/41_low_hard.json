{
    "start": 1758294377.4639509,
    "end": 1758296474.1025434,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:41 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n We are given: n, h, m and then m lines of [l, r, x]\n Since n, m <= 50, we can use dynamic programming or iterate over possibilities, but note that the restrictions might overlap.\n\n Idea:\n We have to assign a height for each spot from 0 to h (but note: we cannot exceed any restriction that covers that spot).\n\n However, note that the restrictions are given as: for a range [l_i, r_i] the maximum height must be <= x_i.\n\n We can think of it as: for each spot j, we must have height[j] <= min{ x_i | [l_i, r_i] contains j }.\n\n But note: multiple restrictions may apply to the same spot. So for spot j, let max_height_j = min( h, min_{for all restrictions covering j} x_i )\n\n However, wait: is that correct? Actually, the restrictions are independent and must be satisfied. So if a spot is covered by multiple restrictions, the height must be at most the minimum of the x_i's of the restrictions that cover that spot, but also not exceeding h.\n\n But note: the problem says \"the tallest house from spots l_i to r_i must be at most x_i\", meaning that in the entire range [l_i, r_i] no house can exceed x_i. So if two restrictions overlap, the stricter one (with lower x_i) will force the entire overlapping area to be even lower.\n\n However, the above reasoning for a single spot j: the height at j must be at most the minimum of all x_i for which j is in [l_i, r_i] and also at most h.\n\n But wait, is that sufficient? Consider: if we set each house independently to the minimum value (over the restrictions covering it) then we satisfy every restriction because in any restriction [l_i, r_i], the maximum height in that range would be the maximum of the heights we set for each spot, and each spot is set to at most x_i (so the entire range is at most x_i). However, note that we might set a house to a value lower than the minimum x_i of the restrictions that cover it. This is allowed, but we want to maximize profit.\n\n However, there is a catch: sometimes we might need to set a house lower than the minimum restriction just to allow an adjacent house to be higher? But note: the restrictions are independent per range. In fact, the condition is that for each restriction i, the maximum height in [l_i, r_i] <= x_i. The minimal constraint for a house at j is the minimum x_i over all restrictions that cover j, because if we set any house in a restriction to more than x_i, the restriction is violated. Therefore, the necessary condition for each house j is that h_j <= min_{i: j in [l_i, r_i]} x_i, and also h_j <= h.\n\n However, is that sufficient? Yes, because then for each restriction i, consider any house j in [l_i, r_i]: we have h_j <= min_{i' covering j} x_i' <= x_i (because the restriction i requires x_i, and the min for j might include x_i or might be lower). But wait: what if the min_{i' covering j} x_i' is taken over all restrictions including ones that don't cover the entire range? Actually, the restriction i only requires that the entire range [l_i, r_i] has houses <= x_i. If we set each house j to at most the minimum x_i over all restrictions covering j, then certainly in [l_i, r_i] every house is <= x_i (since x_i is one of the x_i's that cover j, so the min for j is <= x_i, and similarly for every j in [l_i, r_i]). \n\n However, note: the minimum x_i for j might be lower than x_i, so the house j is set to at most that min, which is <= x_i. Then the entire range [l_i, r_i] is <= x_i. So the condition is necessary and sufficient.\n\n Therefore, step 1: For each spot j (from 1 to n), compute:\n   base[j] = min( h, min_{all restrictions i such that l_i <= j <= r_i} x_i )\n\n But note: there might be no restriction covering j? Then the min_{all restrictions i such that j in [l_i, r_i]} x_i is infinity? Then we take min(inf, h) -> h.\n\n However, the problem says: \"In each spot, you can build a house with an integer height between 0 and h\", and without any restriction, the maximum allowed is h.\n\n So for each j, we can set the house to any integer from 0 to base[j].\n\n Now, the profit is the sum",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street with specific zoning restrictions. Each house's height contributes to the profit as the square of its height, but the heights must comply with all applicable zoning restrictions. \n\n### Approach\n1. **Problem Analysis**: The problem involves determining the optimal height for each house such that all zoning restrictions are satisfied. Each restriction specifies that the tallest house in a certain range must not exceed a given height. The goal is to maximize the sum of the squares of the house heights.\n\n2. **Key Insight**: For each house at position `j`, the maximum allowable height is the minimum value between the global maximum height `h` and the most restrictive height specified by any zoning restriction that includes `j`. This ensures compliance with all overlapping restrictions.\n\n3. **Algorithm Selection**: \n   - **Step 1**: For each house position, compute the maximum allowable height based on all relevant zoning restrictions.\n   - **Step 2**: Since the profit is maximized by setting each house's height to its maximum allowable value (because the square function is monotonically increasing for non-negative values), we simply set each house's height to its computed maximum.\n   - **Step 3**: Sum the squares of these heights to get the total profit.\n\n4. **Complexity Analysis**: The algorithm processes each house and each zoning restriction once, leading to a time complexity of O(n*m), where `n` is the number of houses and `m` is the number of restrictions. Given the constraints (both up to 50), this approach is efficient.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    base_heights = [h] * (n + 1)\n    \n    for l, r, x_val in restrictions:\n        for j in range(l, r + 1):\n            if x_val < base_heights[j]:\n                base_heights[j] = x_val\n    \n    total_profit = 0\n    for j in range(1, n + 1):\n        total_profit += base_heights[j] ** 2\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of houses `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Processing Restrictions**: For each restriction, the code checks all houses within the specified range and updates their maximum allowable height to the minimum value specified by any restriction affecting them.\n3. **Calculating Profit**: The profit is computed by summing the squares of the maximum allowable heights for all houses.\n4. **Output**: The total profit is printed.\n\nThis approach efficiently ensures compliance with all zoning restrictions while maximizing the profit by leveraging the properties of the square function and straightforward range processing.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    base_heights = [h] * (n + 1)\n    \n    for l, r, x_val in restrictions:\n        for j in range(l, r + 1):\n            if x_val < base_heights[j]:\n                base_heights[j] = x_val\n    \n    total_profit = 0\n    for j in range(1, n + 1):\n        total_profit += base_heights[j] ** 2\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 822,
        "completion_token_count": 681,
        "thoughts_token_count": 1023
    }
}