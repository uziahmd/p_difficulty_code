{
    "start": 1758294366.5040884,
    "end": 1758295993.4875507,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:33 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\n We are given: n, h, m and then m lines of [l, r, x]\n Since n, m <= 50, we can use dynamic programming or iterate over possibilities, but note that the restrictions might be overlapping.\n\n However, note that the profit function is quadratic. We want to assign a height a_i in [0, h] for each spot i, such that for every restriction (l, r, x): \n   max{ a_i for i in [l, r] } <= x.\n\n We can think of it as: we have constraints that define intervals where the maximum value must be at most some x.\n\n Alternate approach:\n Since n and m are small (<=50) but the state space for each house is up to 51 (0..h) and there are 50 houses, a naive DP with state as (position, last height) would be too heavy (50*51 states per position, but then we need to check all restrictions?).\n\n But note: the restrictions are given and they are up to 50. However, the constraints are on contiguous segments and we have multiple restrictions.\n\n Idea: use interval constraints. We can precompute for each spot the minimum allowed height? Actually, no: we have upper bounds on entire intervals.\n\n However, note that the restrictions are \"the tallest house from l_i to r_i must be at most x_i\". This is an upper bound on the maximum in that interval.\n\n We can also consider: what if we set the height of each house to the minimum x that covers it? But wait, we have multiple restrictions that may overlap. Actually, for each house i, we can consider the minimal x that must be satisfied by any restriction that covers i. Then, we must have a_i <= min_{all restrictions covering i} (x_i). However, note: even if one restriction says the maximum in an interval containing i is at most x, then a_i must be <= x. But there might be multiple restrictions, so the tightest constraint for house i is the minimum x among all restrictions that cover i.\n\n However, wait: is that sufficient? Consider two restrictions: \n   Restriction 1: [1,3] with x=5\n   Restriction 2: [2,4] with x=3\n Then for house 2, the maximum must be <=5 (from restriction1) and <=3 (from restriction2) -> so the maximum must be <=3. Similarly, for house 1: only restriction1 -> <=5, house 3: both -> <=3, house4: only restriction2 -> <=3.\n\n But note: the example input: \n   Input: \"4 10 2\\n2 3 8\\n3 4 7\"\n   Houses: [10,8,7,7] -> house1 is 10 (which is allowed because the first restriction doesn't cover house1? Actually, the first restriction is [2,3] and the second [3,4]. So house1 is only constrained by the global maximum h=10. Similarly, house4 is constrained by the second restriction (x=7) and the global h=10, so effectively 7.\n\n Therefore, we can define for each house i:\n   base[i] = min( h, min_{for each restriction j that covers i} (x_j) )\n\n However, note: the problem does not require that the house must be built at its maximum allowed by a restriction? It can be lower. But if we set the house to the minimum of the restrictions and h, then we are satisfying all restrictions. But wait: the goal is to maximize the sum of squares.\n\n The square function is increasing for nonnegative integers. So for each house, we would want to set the height as high as possible, but we cannot exceed the base[i] (because base[i] is the minimal upper bound from the restrictions). However, is base[i] the maximum allowed for house i?\n\n Actually, yes. Because if we set a house to more than base[i], then at least one restriction (that gave base[i]) would be violated.\n\n But note: the base[i] is defined as the minimum x_i of all restrictions that cover i, and the global h. Then, the house i must be <= base[i]. So the maximum we can set for house i is base[i].\n\n Then, the profit would be the sum of base[i]^2 for i from 1 to n?\n\n However, wait: is that always optimal? Consider two adjacent houses with restrictions:\n\n Example 1: \n   n=2, h=10, m=1, restriction: [1,2] with x=5.\n   Then base[1]=min(10,5)=5, base[2]=min(10,5)=5.\n   Then profit = 5^2 + 5^",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street with specific zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. Each house's height must comply with all zoning restrictions that apply to its spot, and the height cannot exceed the given maximum height `h`.\n\n### Approach\n1. **Problem Analysis**: The problem involves assigning heights to houses such that all zoning restrictions are satisfied. Each restriction specifies that the tallest house in a certain range must not exceed a given height. The goal is to maximize the sum of the squares of the house heights under these constraints.\n2. **Key Insight**: For each house, the maximum allowable height is determined by the strictest (smallest) upper bound from all relevant zoning restrictions. This is because violating any single restriction would disqualify the entire solution.\n3. **Algorithm Selection**: \n   - **Preprocessing**: For each house position, compute the minimum upper bound from all restrictions that include it. This gives the maximum height the house can have while satisfying all applicable restrictions.\n   - **Maximization**: Since the profit function is the sum of squares, and the square function is monotonically increasing for non-negative values, the optimal height for each house is the maximum allowed height (as derived from preprocessing).\n4. **Complexity Analysis**: The approach involves iterating over each house and each restriction once, making the time complexity O(n*m), where n is the number of houses and m is the number of restrictions. Given the constraints (n, m ≤ 50), this is efficient.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    base_heights = [h] * (n + 1)\n    \n    for l, r, x_val in restrictions:\n        for i in range(l, r + 1):\n            if x_val < base_heights[i]:\n                base_heights[i] = x_val\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        total_profit += base_heights[i] * base_heights[i]\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, which includes the number of houses (n), the maximum height (h), the number of restrictions (m), and the restrictions themselves.\n2. **Initialization**: An array `base_heights` is initialized with the global maximum height `h` for each house position.\n3. **Processing Restrictions**: For each restriction, the code checks all house positions within the specified range and updates their maximum allowable height to the minimum value between the current base height and the restriction's height.\n4. **Calculating Profit**: After processing all restrictions, the profit is computed by summing the squares of the base heights for all house positions.\n5. **Output**: The total profit is printed.\n\nThis approach efficiently ensures that all zoning restrictions are satisfied while maximizing the profit by leveraging the properties of the quadratic profit function and careful preprocessing of constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    base_heights = [h] * (n + 1)\n    \n    for l, r, x_val in restrictions:\n        for i in range(l, r + 1):\n            if x_val < base_heights[i]:\n                base_heights[i] = x_val\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        total_profit += base_heights[i] * base_heights[i]\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 823,
        "completion_token_count": 735,
        "thoughts_token_count": 1023
    }
}