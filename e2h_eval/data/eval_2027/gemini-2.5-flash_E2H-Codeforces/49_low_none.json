{
    "start": 1758284923.7273962,
    "end": 1758284940.5431762,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Deconstructing the Mushroom Strife Problem**\n\nOkay, so I'm looking at this \"Mushroom Strife\" problem, and it's a classic graph problem with a number theory twist.  We're essentially assigning mushroom counts to lawns (vertices) and the edges impose constraints based on the GCD and LCM of the connected lawn's mushroom counts.  The goal is to find *any* valid assignment or report there isn't one.\n\nFirst, let's break down the core constraints: If `g` is the GCD and `l` is the LCM for an edge between lawns `u` and `v`, then `x_u * x_v = g * l`.  Crucially, `g` must divide both `x_u` and `x_v`, and they both must divide `l`.  Immediately, if `l` isn't divisible by `g` for *any* edge, it's game over – no solution exists.\n\nNow, let's represent the individual mushroom counts: if  `x_u = g * a` and `x_v = g * b`, then `l = g * a * b`. Let `P = l / g`. Therefore,  we need to find `a, b` such that `a * b = P` and `gcd(a, b) = 1`. This narrows down the possibilities.\n\nThe fact that the mushroom counts are bounded between 1 and 10^6 and the given GCD/LCM are similarly bounded, gives me some boundaries to consider.\n\nThis is a constraint satisfaction problem at its heart, and the graph structure adds a layer of complexity.  I'm thinking about how constraints from *multiple* edges connected to the same lawn interact. If a lawn, say `u`, is connected to several others, the value assigned to `x_u` can't just satisfy *one* edge; it has to be compatible with *all* connected edges. This makes things interesting.\n\nTherefore, for a node `u` connected to edges, each with `g_i` and `l_i`,  `x_u` must be a multiple of the LCM of the GCDs, (let's call it `L_u = lcm(g_1, g_2, ...)`) and also a divisor of the GCD of the LCMs, (let's call it `G_u = gcd(l_1, l_2, ...)`). This constraint is crucial.  My approach needs to account for this.  A Python script would definitely be the way to go here.\n",
    "response": "```python\nimport sys\nimport math\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 0:\n        print(\"NO\")\n        return\n\n    # Store edges and their GCD/LCM values\n    # For each node, store (neighbor, GCD, LCM) tuples\n    adj = [[] for _ in range(n + 1)]\n    \n    # Pre-check: LCM must be a multiple of GCD for every edge\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        if l % g != 0:\n            print(\"NO\")\n            return\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    # `ans[i]` will store the determined mushroom count for lawn `i`\n    ans = [0] * (n + 1)\n    \n    # `fixed[i]` is True if `ans[i]` has been determined\n    fixed = [False] * (n + 1)\n\n    # `q` is a queue for BFS-like traversal to propagate values\n    q = []\n\n    # Iterate through each lawn to handle connected components\n    for start_node in range(1, n + 1):\n        if fixed[start_node]:\n            continue\n\n        # If a node is isolated (no edges), we can assign 1 to it.\n        # This is a valid choice as 1 is within [1, 10^6] and satisfies no constraints.\n        if not adj[start_node]:\n            ans[start_node] = 1\n            fixed[start_node] = True\n            continue\n\n        # For a connected component, we need to pick a starting value.\n        # We can pick any `x_u` that satisfies its local constraints.\n        # A simple choice for the first node in a component is its `g_min` (LCM of all incident GCDs).\n        # We'll refine this later. For now, let's just pick one node and try to set its value.\n        \n        # Determine initial constraints for `start_node`\n        # `min_val_multiple` is the LCM of all GCDs connected to `start_node`\n        # `max_val_divisor` is the GCD of all LCMs connected to `start_node`\n        min_val_multiple = 1\n        max_val_divisor = 1000001 # Larger than 10^6 to act as infinity for GCD\n        \n        for neighbor, g, l in adj[start_node]:\n            min_val_multiple = (min_val_multiple * g) // math.gcd(min_val_multiple, g)\n            max_val_divisor = math.gcd(max_val_divisor, l)\n\n        # If `min_val_multiple` is too large or not a divisor of `max_val_divisor`,\n        # then `start_node` cannot satisfy its own direct constraints.\n        if min_val_multiple > max_val_divisor or min_val_multiple > 1000000:\n            print(\"NO\")\n            return\n\n        # Assign `min_val_multiple` as a candidate value for `start_node`.\n        # This is the smallest possible value for `start_node` that satisfies all its direct GCD constraints.\n        # It's also a divisor of all direct LCM constraints (if `min_val_multiple <= max_val_divisor`).\n        ans[start_node] = min_val_multiple\n        fixed[start_node] = True\n        q.append(start_node)\n\n        head = 0\n        while head < len(q):\n            u = q[head]\n            head += 1\n\n            for v, g, l in adj[u]:\n                if not fixed[v]:\n                    # We know x_u, g, l. We need to find x_v.\n                    # x_u * x_v = g * l\n                    # x_v = (g * l) / x_u\n                    \n                    # Check divisibility before calculation to avoid floating point or large numbers\n                    if (g * l) % ans[u] != 0:\n                        print(\"NO\")\n                        return\n                    \n                    candidate_xv = (g * l) // ans[u]\n                    \n                    # Check if candidate_xv satisfies GCD and LCM properties\n                    if math.gcd(ans[u], candidate_xv) != g or math.lcm(ans[u], candidate_xv) != l:\n                        print(\"NO\")\n                        return\n\n                    # Check bounds\n                    if not (1 <= candidate_xv <= 1000000):\n                        print(\"NO\")\n                        return\n                    \n                    ans[v] = candidate_xv\n                    fixed[v] = True\n                    q.append(v)\n                else:\n                    # If both u and v are fixed, verify the edge constraints\n                    if math.gcd(ans[u], ans[v]) != g or math.lcm(ans[u], ans[v]) != l:\n                        print(\"NO\")\n                        return\n    \n    # If all checks pass and all nodes are assigned\n    print(\"YES\")\n    print(*(ans[i] for i in range(1, n + 1)))\n\n# Call the solve function\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 0:\n        print(\"NO\")\n        return\n\n    # Store edges and their GCD/LCM values\n    # For each node, store (neighbor, GCD, LCM) tuples\n    adj = [[] for _ in range(n + 1)]\n    \n    # Pre-check: LCM must be a multiple of GCD for every edge\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        if l % g != 0:\n            print(\"NO\")\n            return\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    # `ans[i]` will store the determined mushroom count for lawn `i`\n    ans = [0] * (n + 1)\n    \n    # `fixed[i]` is True if `ans[i]` has been determined\n    fixed = [False] * (n + 1)\n\n    # `q` is a queue for BFS-like traversal to propagate values\n    q = []\n\n    # Iterate through each lawn to handle connected components\n    for start_node in range(1, n + 1):\n        if fixed[start_node]:\n            continue\n\n        # If a node is isolated (no edges), we can assign 1 to it.\n        # This is a valid choice as 1 is within [1, 10^6] and satisfies no constraints.\n        if not adj[start_node]:\n            ans[start_node] = 1\n            fixed[start_node] = True\n            continue\n\n        # For a connected component, we need to pick a starting value.\n        # We can pick any `x_u` that satisfies its local constraints.\n        # A simple choice for the first node in a component is its `g_min` (LCM of all incident GCDs).\n        # We'll refine this later. For now, let's just pick one node and try to set its value.\n        \n        # Determine initial constraints for `start_node`\n        # `min_val_multiple` is the LCM of all GCDs connected to `start_node`\n        # `max_val_divisor` is the GCD of all LCMs connected to `start_node`\n        min_val_multiple = 1\n        max_val_divisor = 1000001 # Larger than 10^6 to act as infinity for GCD\n        \n        for neighbor, g, l in adj[start_node]:\n            min_val_multiple = (min_val_multiple * g) // math.gcd(min_val_multiple, g)\n            max_val_divisor = math.gcd(max_val_divisor, l)\n\n        # If `min_val_multiple` is too large or not a divisor of `max_val_divisor`,\n        # then `start_node` cannot satisfy its own direct constraints.\n        if min_val_multiple > max_val_divisor or min_val_multiple > 1000000:\n            print(\"NO\")\n            return\n\n        # Assign `min_val_multiple` as a candidate value for `start_node`.\n        # This is the smallest possible value for `start_node` that satisfies all its direct GCD constraints.\n        # It's also a divisor of all direct LCM constraints (if `min_val_multiple <= max_val_divisor`).\n        ans[start_node] = min_val_multiple\n        fixed[start_node] = True\n        q.append(start_node)\n\n        head = 0\n        while head < len(q):\n            u = q[head]\n            head += 1\n\n            for v, g, l in adj[u]:\n                if not fixed[v]:\n                    # We know x_u, g, l. We need to find x_v.\n                    # x_u * x_v = g * l\n                    # x_v = (g * l) / x_u\n                    \n                    # Check divisibility before calculation to avoid floating point or large numbers\n                    if (g * l) % ans[u] != 0:\n                        print(\"NO\")\n                        return\n                    \n                    candidate_xv = (g * l) // ans[u]\n                    \n                    # Check if candidate_xv satisfies GCD and LCM properties\n                    if math.gcd(ans[u], candidate_xv) != g or math.lcm(ans[u], candidate_xv) != l:\n                        print(\"NO\")\n                        return\n\n                    # Check bounds\n                    if not (1 <= candidate_xv <= 1000000):\n                        print(\"NO\")\n                        return\n                    \n                    ans[v] = candidate_xv\n                    fixed[v] = True\n                    q.append(v)\n                else:\n                    # If both u and v are fixed, verify the edge constraints\n                    if math.gcd(ans[u], ans[v]) != g or math.lcm(ans[u], ans[v]) != l:\n                        print(\"NO\")\n                        return\n    \n    # If all checks pass and all nodes are assigned\n    print(\"YES\")\n    print(*(ans[i] for i in range(1, n + 1)))\n\n# Call the solve function\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 542,
        "completion_token_count": 1238,
        "thoughts_token_count": 834
    }
}