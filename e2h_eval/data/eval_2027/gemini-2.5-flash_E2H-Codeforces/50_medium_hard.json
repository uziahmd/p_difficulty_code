{
    "start": 1758294969.2974246,
    "end": 1758295084.026625,
    "start-formatted": "2025-09-20 00:16 KST",
    "end-formatted": "2025-09-20 00:18 KST",
    "gpu": 2,
    "pid": 50,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Tree Sum\n\nLet us call an edge-weighted tree with $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$ good if the weight of each edge is either $$$1$$$ or $$$-1$$$ and for each vertex $$$i$$$, the product of the edge weights of all edges having $$$i$$$ as one endpoint is $$$-1$$$.You are given a positive integer $$$n$$$. There are $$$n^{n-2} \\cdot 2^{n-1}$$$ distinct$$$^\\dagger$$$ edge-weighted trees with $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$ such that each edge is either $$$1$$$ or $$$-1$$$. Your task is to find the sum of $$$d(1,n)^\\ddagger$$$ of all such trees that are good. Since the answer can be quite large, you only need to find it modulo $$$998\\,244\\,353$$$.$$$^\\dagger$$$ Two trees are considered to be distinct if either:   there exists two vertices such that there is an edge between them in one of the trees, and not in the other.  there exists two vertices such that there is an edge between them in both trees but the weight of the edge between them in one tree is different from the one in the other tree. Note that by Cayley's formula, the number of trees on $$$n$$$ labeled vertices is $$$n^{n-2}$$$. Since we have $$$n-1$$$ edges, there are $$$2^{n-1}$$$ possible assignment of weights(weight can either be $$$1$$$ or $$$-1$$$). That is why total number of distinct edge-weighted tree is $$$n^{n-2} \\cdot 2^{n-1}$$$.$$$^\\ddagger$$$ $$$d(u,v)$$$ denotes the sum of the weight of all edges on the unique simple path from $$$u$$$ to $$$v$$$.\n\n## Input\nThe first and only line of input contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 5 \\cdot 10^5$$$).\n\n## Output\nThe only line of output should contain a single integer, the required answer, modulo $$$998\\,244\\,353$$$.\n\n## Example\n### Input\n['2', '1', '4', '10', '43434']\n\n### Output\n['998244352', '0', '998244343', '948359297', '86232114']\n\n## Note\nIn the first test case, there is only $$$1$$$ distinct good tree. The value of $$$d(1,2)$$$ for that tree is $$$-1$$$, which is $$$998\\,244\\,352$$$ under modulo $$$998\\,244\\,353$$$.In the second test case, the value of $$$d(1,1)$$$ for any tree is $$$0$$$, so the answer is $$$0$$$.In the third test case, there are $$$16$$$ distinct good trees. The value of $$$d(1,4)$$$ is:   $$$-2$$$ for $$$2$$$ trees;  $$$-1$$$ for $$$8$$$ trees;  $$$0$$$ for $$$4$$$ trees;  $$$1$$$ for $$$2$$$ trees. The sum of $$$d(1,4)$$$ over all trees is $$$2 \\cdot (-2) + 8 \\cdot (-1) + 4 \\cdot (0) + 2 \\cdot (1) = -10$$$, which is $$$998\\,244\\,343$$$ under modulo $$$998\\,244\\,353$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Initial Thoughts:** I'm tackling a problem about \"good\" edge-weighted trees, which seems to require a deep dive into tree properties and clever combinatorial counting. The goal is to find the sum of path lengths between vertices 1 and *n* (d(1, n)) across all good trees, modulo a large prime.\n\n**Breaking it Down:** A \"good\" tree is an edge-weighted tree with *n* vertices where edge weights are restricted to 1 or -1 and, for each vertex, the product of weights of its incident edges is -1. The total number of trees can be formed by considering all possible tree structures. But the number of trees is huge, so we need a clever counting method or a useful observation.\n\n**Key Observation:** The good tree condition has a critical implication: *n* must be even. This is because, when we take the product of the good condition over all vertices and simplify, we find that the condition implies 1=(-1)<sup>n</sup>.\n\n**The Strategy:** My first step will be to test *n* being odd or even. If *n* is odd, the answer is immediately 0, since no good trees exist. Otherwise, when *n* is even, I'll need to somehow count the good trees and the value of *d(1,n)* for each. For each tree structure, the good weight assignment is *unique*.\n\n**The Challenge:** The core challenge now is computing the sum of path lengths *d(1,n)* over all these good trees. I'm considering fixing an edge, and working out how many trees include this edge, and how this affects the path between 1 and *n*. The standard Cayley's formula is coming to mind but I can't quite see how it helps. Maybe a generating function approach, or a clever edge-based sum will be needed. The trick is to find an efficient way to sum over all trees and calculate *d(1,n)* without brute-force enumeration.\n",
    "response": "The problem asks us to find the sum of $d(1, n)$ over all \"good\" edge-weighted trees, modulo $998244353$.\nA tree is \"good\" if:\n1.  It has $n$ vertices, numbered $1$ to $n$.\n2.  Each edge weight is either $1$ or $-1$.\n3.  For each vertex $i$, the product of the weights of all edges incident to $i$ is $-1$.\n\nLet $w_e$ be the weight of an edge $e$. The third condition can be written as $\\prod_{e \\text{ incident to } i} w_e = -1$ for each vertex $i$.\n\nConsider the product of these conditions over all vertices:\n$\\prod_{i=1}^n \\left( \\prod_{e \\text{ incident to } i} w_e \\right) = \\prod_{i=1}^n (-1) = (-1)^n$.\nOn the left side, each edge $e=(u,v)$ is incident to exactly two vertices ($u$ and $v$), so its weight $w_e$ appears twice in the product. Thus, the left side is $\\prod_{e \\in E} w_e^2$.\nSince $w_e \\in \\{1, -1\\}$, $w_e^2 = 1$ for any edge $e$. So, $\\prod_{e \\in E} w_e^2 = 1$.\nEquating the two sides, we get $1 = (-1)^n$. This condition implies that $n$ must be an even number.\nIf $n$ is odd, there are no good trees, and thus the sum of $d(1, n)$ over all good trees is $0$.\n\nNow, assume $n$ is even.\nLet's determine how many ways there are to assign weights to a fixed tree structure $T$ to make it good.\nLet $x_e = 0$ if $w_e = 1$ and $x_e = 1$ if $w_e = -1$. Then $w_e = (-1)^{x_e}$.\nThe condition $\\prod_{e \\text{ incident to } i} w_e = -1$ becomes $\\sum_{e \\text{ incident to } i} x_e \\equiv 1 \\pmod 2$.\nThis is a system of $n$ linear equations over $\\mathbb{F}_2$ with $n-1$ variables (one for each edge).\nThe sum of all $n$ equations is $\\sum_{i=1}^n \\sum_{e \\text{ incident to } i} x_e \\equiv \\sum_{i=1}^n 1 \\pmod 2$.\nThe left side is $\\sum_{e \\in E} 2x_e \\equiv 0 \\pmod 2$. The right side is $n \\pmod 2$.\nSo, $0 \\equiv n \\pmod 2$. Since $n$ is even, this holds. This means the $n$ equations are linearly dependent. Specifically, the sum of all rows of the incidence matrix is the zero vector.\nFor a tree, the rank of its incidence matrix (over $\\mathbb{F}_2$) is $n-1$. Since there are $n-1$ variables ($x_e$), and $n-1$ independent equations, there is a unique solution for $(x_e)_{e \\in E}$.\nTherefore, for any fixed tree structure, there is exactly one way to assign weights to its edges such that it is a good tree.\nThe total number of good trees is $n^{n-2}$ (number of tree structures) $\\times 1$ (unique weight assignment for each structure).\n\nWe need to calculate $S = \\sum_{T \\text{ good}} d(1, n, T)$, where $d(1, n, T)$ is the sum of edge weights on the path from $1$ to $n$ in tree $T$.\nLet $w_e^*(T)$ be the unique good weight for edge $e$ in tree $T$.\n$S = \\sum_{T} \\sum_{e \\in P_{1,n}(T)} w_e^*(T)$.\nWe can swap the summation order: $S = \\sum_{e=(u,v)} \\sum_{T \\text{ s.t. } e \\in P_{1,n}(T)} w_e^*(T)$.\nThe sum is over all possible edges $(u,v)$ between any two distinct vertices $u,v \\in \\{1, \\dots, n\\}$.\nFor a fixed edge $(u,v)$, how many trees $T$ contain $(u,v)$ and have it on the path $P_{1,n}(T)$?\nIf $(u,v)$ is on $P_{1,n}(T)$, then removing $(u,v)$ splits $T$ into two components, one containing $1$ and $u$, the other containing $n$ and $v$ (or vice versa).\nThe number of trees on $n$ labeled vertices where a specific edge $(u,v)$ is on the path between $1$ and $n$ is $n^{n-3}$ for any $u \\ne v$. This is a known result (or can be derived using Pr√ºfer sequences).\nThis formula holds even if $u$ or $v$ is $1$ or $n$. For example, if $u=1, v=n$, there are $n^{n-3}$ trees where edge $(1,n)$ is present (and thus on the path $P_{1,n}$). If $n=2$, $2^{2-3} = 2^{-1}$ which is not an integer. This formula is for $n \\ge 3$.\nFor $n=2$, there is only one tree: $1-2$. The edge is $(1,2)$. It's on path $P_{1,2}$. $2^{2-3}$ is not applicable.\nLet's handle $n=2$ separately. $n=2$ is even. The only tree is $1-2$. The condition for vertex 1 is $w(1,2)=-1$. Condition for vertex 2 is $w(1,2)=-1$. Unique good tree has $w(1,2)=-1$. $d(1,2)=-1$. So for $n=2$, answer is $-1 \\pmod{998244353}$.\n\nFor $n \\ge 3$:\nFor each edge $(u,v)$, there are $n^{n-3}$ trees where $(u,v)$ is on the path $P_{1,n}(T)$.\nLet $N_{u,v} = n^{n-3}$ be this count.\nSo the sum $S = \\sum_{u \\ne v} N_{u,v} \\cdot w_{(u,v)}^*(T_{u,v})$, where $T_{u,v}$ represents any tree where $(u,v)$ is on $P_{1,n}$, and $w_{(u,v)}^*(T_{u,v})$ is its unique good weight.\nHowever, $w_e^*(T)$ depends on the entire tree $T$, not just the edge $e$. So we cannot simply multiply $N_{u,v}$ by some $w_e$.\nInstead, we need to find a way to determine $w_e^*(T)$ for a specific edge $e=(u,v)$ in a specific tree $T$.\n\nLet's consider the $\\mathbb{F}_2$ system: $\\sum_{e \\text{ incident to } i} x_e \\equiv 1 \\pmod 2$.\nLet $e_0=(u,v)$ be an arbitrary edge. We want to find $x_{e_0}$.\nRoot the tree at an arbitrary vertex, say $1$.\nFor any vertex $i \\ne 1$, let $p_i$ be its parent. The edge $(i, p_i)$ is the unique edge connecting $i$ to its parent.\nThe condition for vertex $i \\ne 1$ is $x_{(i,p_i)} + \\sum_{j \\text{ child of } i} x_{(i,j)} \\equiv 1 \\pmod 2$.\nSumming this over all $i \\in V \\setminus \\{1\\}$ gives:\n$\\sum_{i \\ne 1} x_{(i,p_i)} + \\sum_{i \\ne 1} \\sum_{j \\text{ child of } i} x_{(i,j)} \\equiv \\sum_{i \\ne 1} 1 \\pmod 2$.\nThe left side is $\\sum_{e \\ne e_r} x_e$, where $e_r$ is the edge incident to root $1$.\nSo $\\sum_{e \\ne e_r} x_e \\equiv n-1 \\pmod 2$.\nSince $n$ is even, $n-1$ is odd. So $\\sum_{e \\ne e_r} x_e \\equiv 1 \\pmod 2$.\nAlso, the condition for vertex $1$ is $\\sum_{j \\text{ child of } 1} x_{(1,j)} \\equiv 1 \\pmod 2$.\nLet $e=(u,v)$ be any edge. If we cut $e$, the tree splits into two components, $C_u$ (containing $u$) and $C_v$ (containing $v$).\nThe sum of conditions for all vertices in $C_u$ (excluding $v$ if $v \\in C_u$):\n$\\sum_{i \\in C_u} \\sum_{e' \\text{ incident to } i} x_{e'} \\equiv |C_u| \\pmod 2$.\nEach edge within $C_u$ appears twice. The edge $e=(u,v)$ appears once.\nSo $x_e + \\sum_{e' \\in E(C_u)} 2x_{e'} \\equiv |C_u| \\pmod 2$.\nThis implies $x_e \\equiv |C_u| \\pmod 2$.\nSimilarly, $x_e \\equiv |C_v| \\pmod 2$.\nSince $|C_u| + |C_v| = n$ and $n$ is even, $|C_u|$ and $|C_v|$ must have the same parity.\nSo $x_e \\equiv |C_u| \\pmod 2$ gives the unique weight $w_e = (-1)^{|C_u|}$.\nThis means $w_e = -1$ if the component containing $u$ (when $e$ is removed) has an odd number of vertices, and $w_e = 1$ if it has an even number of vertices.\n\nWe need to calculate $\\sum_{T} \\sum_{e \\in P_{1,n}(T)} (-1)^{|C_u(e,T)|}$, where $C_u(e,T)$ is the component containing $u$ when $e=(u,v)$ is removed from $T$.\nLet's consider an edge $e=(u,v)$ on the path $P_{1,n}(T)$. Removing $e$ splits $T$ into two components. One component, say $T_1$, contains $1$ and $u$. The other, $T_n$, contains $n$ and $v$.\nThe weight of $e$ is $w_e = (-1)^{|T_1|}$.\nThe sum becomes $\\sum_T \\sum_{e \\in P_{1,n}(T)} (-1)^{|T_1(e,T)|}$.\nBy symmetry, we can assume $u$ is closer to $1$ than $v$. Then $T_1$ is the component containing $u$ (and $1$).\nThe number of trees on $n$ labeled vertices where $e=(u,v)$ is on $P_{1,n}$ and $T_1$ (component containing $u$ and $1$) has size $k$ is given by a formula involving $k^{k-1}(n-k)^{n-k-1}$.\nSpecifically, the number of trees on $n$ vertices where $1$ is in a component of size $k$ and $n$ is in a component of size $n-k$ after removing edge $(u,v)$ is $\\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1}$.\nThis is for specific $u,v$. Summing over all $u,v$ for fixed $k$:\nThere are $n(n-1)$ choices for $u,v$.\nThe number of trees where $e=(u,v)$ is on $P_{1,n}$ and the component containing $1$ has size $k$ is $k(n-k)n^{n-4}$. This is a known result.\nThis formula works for $n \\ge 3$.\nSo, for a fixed $k \\in \\{1, \\dots, n-1\\}$, the number of trees where an edge $e$ on $P_{1,n}$ separates $1$ into a component of size $k$ is $k(n-k)n^{n-4}$.\nThe sum is $\\sum_{k=1}^{n-1} (-1)^k \\cdot k(n-k)n^{n-4}$.\nThe sum is $n^{n-4} \\sum_{k=1}^{n-1} (-1)^k k(n-k)$.\nLet $S_n = \\sum_{k=1}^{n-1} (-1)^k k(n-k)$.\n$S_n = n \\sum_{k=1}^{n-1} (-1)^k k - \\sum_{k=1}^{n-1} (-1)^k k^2$.\nLet $A_m = \\sum_{k=1}^m (-1)^k k$ and $B_m = \\sum_{k=1}^m (-1)^k k^2$.\n$A_m = (-1)^m \\lceil m/2 \\rceil$.\n$B_m = (-1)^m \\frac{m(m+1)}{2}$.\nFor $m=n-1$:\nSince $n$ is even, $n-1$ is odd.\n$A_{n-1} = (-1)^{n-1} \\lceil (n-1)/2 \\rceil = - (n/2)$.\n$B_{n-1} = (-1)^{n-1} \\frac{(n-1)n}{2} = - \\frac{n(n-1)}{2}$.\nSo, $S_n = n \\cdot (-n/2) - (-n(n-1)/2) = -n^2/2 + n(n-1)/2 = (-n^2 + n^2 - n)/2 = -n/2$.\nThe total sum is $n^{n-4} \\cdot (-n/2) = -n^{n-3}/2$.\nThis formula is valid for $n \\ge 3$.\nSince we need to compute modulo $998244353$, we need to calculate $n^{n-3} \\cdot (-1/2) \\pmod{998244353}$.\n$-1/2 \\equiv -1 \\cdot 2^{-1} \\pmod{998244353}$.\n$2^{-1} \\equiv (998244353+1)/2 = 499122177 \\pmod{998244353}$.\nSo $-1/2 \\equiv -499122177 \\equiv 499122176 \\pmod{998244353}$.\n\nFinal formula for $n \\ge 3$ and $n$ even:\nAnswer is $(n^{n-3} \\cdot 499122176) \\pmod{998244353}$.\n\nLet's check the examples:\n$n=1$: odd. Output: 0. Correct.\n$n=2$: even. Output: $998244352 \\equiv -1$. Correct.\n$n=4$: even. $n \\ge 3$.\nAnswer should be $(4^{4-3} \\cdot 499122176) \\pmod{998244353}$.\n$4^1 \\cdot 499122176 = 4 \\cdot 499122176 = 1996488704$.\n$1996488704 \\pmod{998244353} = 1996488704 - 2 \\cdot 998244353 = 1996488704 - 1996488706 = -2$.\nThe example output for $n=4$ is $998244343 \\equiv -10$. My formula gives $-2$. There is a mismatch.\n\nLet's re-examine the $k(n-k)n^{n-4}$ part.\nThis is the number of trees where a specific edge $(u,v)$ is on the path $P_{1,n}$, and $u$ is in the component of size $k$ containing $1$, and $v$ is in the component of size $n-k$ containing $n$.\nThe sum is over *all* edges $(u,v)$.\nThe factor $k(n-k)$ comes from choosing $u$ from the $k$ vertices in $C_1$ and $v$ from the $n-k$ vertices in $C_n$.\nThis means the sum $S_n$ already accounts for specific $u,v$.\nThe sum is $\\sum_{u \\ne v} \\sum_{T \\text{ s.t. } e=(u,v) \\in P_{1,n}(T)} w_e^*(T)$.\nThis is $\\sum_{u \\ne v} \\sum_{k=1}^{n-1} \\mathbb{I}(\\text{edge } (u,v) \\text{ is on } P_{1,n} \\text{ and } |C_u|=k) \\cdot (-1)^k$.\nThe number of trees where edge $(u,v)$ is on $P_{1,n}$ and $C_u$ has size $k$ is $n^{n-4} k^{k-1} (n-k)^{n-k-1}$ if $u,v \\notin \\{1,n\\}$.\nThis seems to be the source of my error.\n\nLet's use a different approach. The total sum is $S = \\sum_T \\sum_{e=(u,v) \\in P_{1,n}(T)} w_e^*(T)$.\nLet $P_n = 998244353$.\nThe number of good trees is $n^{n-2}$ for $n$ even.\nFor each vertex $i$, the product of incident edge weights is $-1$.\nConsider the path $P_{1,n} = (1=v_0, v_1, \\dots, v_L=n)$.\n$d(1,n) = \\sum_{j=0}^{L-1} w(v_j, v_{j+1})$.\nThis problem is a variant of a known result from a contest (e.g., Codeforces 1709D \"Sum of Path Weights\").\nThe sum of $d(u,v)$ over all trees is $0$ if $u=v$.\nFor $u \\ne v$, the sum of $d(u,v)$ over all trees on $n$ vertices with edge weights $1$ is $n^{n-2} \\cdot \\text{avg path length}$.\nHere we have specific weights.\n\nA common technique for path sums is to use generating functions or matrix tree theorem variants.\nLet $A_{ij}$ be the adjacency matrix of a tree, with $A_{ij}=w(i,j)$ if $(i,j)$ is an edge, and $0$ otherwise.\nThen $d(u,v)$ is the $(u,v)$ entry of $A+A^2+\\dots+A^k$ where $k$ is path length. This is complex.\n\nWhat if we consider the effect of operations on the weights?\nLet $x_e \\in \\{0,1\\}$ such that $w_e = (-1)^{x_e}$.\nThe condition is $\\sum_{e \\text{ incident to } i} x_e \\equiv 1 \\pmod 2$.\nWe found that $x_e \\equiv |C_u| \\pmod 2$ where $C_u$ is the component containing $u$ when $e=(u,v)$ is removed.\nLet's consider the number of vertices $k$ in the component containing vertex $1$ when an edge $e=(u,v)$ on the path $P_{1,n}$ is removed.\nThe weight of $e$ is $(-1)^k$.\nThe sum is $\\sum_{k=1}^{n-1} (-1)^k \\cdot (\\text{number of trees where } P_{1,n} \\text{ has an edge that splits } 1 \\text{ into a component of size } k)$.\nThe number of trees on $n$ labeled vertices where vertex $1$ is in a component of size $k$ and vertex $n$ is in a component of size $n-k$ (after removing some edge on the path $P_{1,n}$) is given by $k^{k-1}(n-k)^{n-k-1} \\binom{n-2}{k-1}$.\nThis is a standard result for counting trees with specific properties.\nSo the sum is $\\sum_{k=1}^{n-1} (-1)^k \\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1}$.\nThis looks like a more promising formula.\nLet $N_k = \\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1}$.\nThe sum is $\\sum_{k=1}^{n-1} (-1)^k N_k$.\nThis sum is a known identity related to tree enumeration.\nFor $n \\ge 3$, this sum evaluates to $-(n-2)n^{n-4}$.\nLet's check this identity for $n=4$:\n$\\sum_{k=1}^{3} (-1)^k \\binom{2}{k-1} k^{k-1} (4-k)^{4-k-1}$\n$k=1: (-1)^1 \\binom{2}{0} 1^0 3^2 = -1 \\cdot 1 \\cdot 1 \\cdot 9 = -9$.\n$k=2: (-1)^2 \\binom{2}{1} 2^1 2^1 = 1 \\cdot 2 \\cdot 2 \\cdot 2 = 8$.\n$k=3: (-1)^3 \\binom{2}{2} 3^2 1^0 = -1 \\cdot 1 \\cdot 9 \\cdot 1 = -9$.\nSum $= -9+8-9 = -10$.\nUsing the formula $-(n-2)n^{n-4}$: $-(4-2)4^{4-4} = -2 \\cdot 4^0 = -2 \\cdot 1 = -2$.\nThere is a factor of $n^{n-3}$ vs $n^{n-4}$ difference.\nThe identity for $\\sum_{k=1}^{n-1} \\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1}$ is $(n-2)n^{n-3}$.\nWith the $(-1)^k$ factor, the identity is $-(n-2)n^{n-4}$ only if the $k^{k-1}$ and $(n-k)^{n-k-1}$ terms are for rooted trees.\nThe number of trees on $n$ labeled vertices where $1$ and $n$ are in different components after removing an edge $(u,v)$ is $k^{k-1}(n-k)^{n-k-1} \\binom{n-2}{k-1}$.\nThis is the number of trees where $1$ is in a component of size $k$ and $n$ is in a component of size $n-k$.\nThe sum is over all $k$.\nThe sum is $\\sum_{k=1}^{n-1} (-1)^k \\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1}$.\nFor $n=4$, this sum is $-10$. This matches the example output for $n=4$.\nSo the answer for $n \\ge 3$ and $n$ even is this sum.\n\nCalculation of $N_k = \\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1} \\pmod{998244353}$.\nWe need to precompute factorials and inverse factorials for combinations.\nWe also need modular exponentiation for $k^{k-1}$ and $(n-k)^{n-k-1}$. Note that $0^0=1$.\n$k^{k-1}$ for $k=1$ is $1^0=1$. $(n-k)^{n-k-1}$ for $n-k=1$ is $1^0=1$.\nThe maximum value of $n$ is $5 \\cdot 10^5$.\nThe sum takes $O(N)$ time. Precomputation takes $O(N)$ time. Total $O(N)$.\n\nSpecial cases:\n$n=1$: Output 0.\n$n=2$: Output $998244352$.\n$n=3$: $n$ is odd. Output 0.\nFor general $n$:\nIf $n$ is odd, print 0.\nIf $n$ is even:\n  If $n=2$, print $998244352$.\n  If $n \\ge 4$: calculate $\\sum_{k=1}^{n-1} (-1)^k \\binom{n-2}{k-1} k^{k-1} (n-k)^{n-k-1} \\pmod{998244353}$.\n\nModulo is $P = 998244353$.\n`pow(base, exp, mod)` for modular exponentiation.\n`inv(n)` for modular inverse.\n`fact[i]` for $i!$. `invfact[i]` for $(i!)^{-1}$.\n`nCr(n, r)` for $\\binom{n}{r}$.\n\n```python\nMOD = 998244353\n\ndef power(base, exp):\n    res = 1\n    base %= MOD\n    while exp > 0:\n        if exp % 2 == 1:\n            res = (res * base) % MOD\n        base = (base * base) % MOD\n        exp //= 2\n    return res\n\nfact = []\ninv_fact = []\n\ndef precompute_factorials(n_max):\n    global fact, inv_fact\n    fact = [1] * (n_max + 1)\n    inv_fact = [1] * (n_max + 1)\n    for i in range(2, n_max + 1):\n        fact[i] = (fact[i-1] * i) % MOD\n    inv_fact[n_max] = power(fact[n_max], MOD - 2)\n    for i in range(n_max - 1, 1, -1):\n        inv_fact[i] = (inv_fact[i+1] * (i+1)) % MOD\n\ndef nCr_mod_p(n, r):\n    if r < 0 or r > n:\n        return 0\n    num = fact[n]\n    den = (inv_fact[r] * inv_fact[n-r]) % MOD\n    return (num * den) % MOD\n\ndef solve():\n    n = int(input())\n\n    if n % 2 != 0:\n        print(0)\n        return\n\n    if n == 2:\n        print(MOD - 1) # -1 mod 998244353\n        return\n\n    # n is even and n >= 4\n    precompute_factorials(n) # n_max = n, for nCr(n-2, k-1)\n\n    total_sum = 0\n    for k in range(1, n):\n        term = nCr_mod_p(n - 2, k - 1)\n\n        # k^(k-1)\n        if k == 1:\n            k_pow_k_minus_1 = 1 # 1^0 = 1\n        else:\n            k_pow_k_minus_1 = power(k, k - 1)\n        \n        # (n-k)^(n-k-1)\n        if n - k == 1:\n            n_k_pow_n_k_minus_1 = 1 # 1^0 = 1\n        else:\n            n_k_pow_n_k_minus_1 = power(n - k, n - k - 1)\n        \n        term = (term * k_pow_k_minus_1) % MOD\n        term = (term * n_k_pow_n_k_minus_1) % MOD\n\n        if k % 2 == 1: # (-1)^k is -1\n            total_sum = (total_sum - term + MOD) % MOD\n        else: # (-1)^k is 1\n            total_sum = (total_sum + term) % MOD\n    \n    print(total_sum)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "MOD = 998244353\n\ndef power(base, exp):\n    res = 1\n    base %= MOD\n    while exp > 0:\n        if exp % 2 == 1:\n            res = (res * base) % MOD\n        base = (base * base) % MOD\n        exp //= 2\n    return res\n\nfact = []\ninv_fact = []\n\ndef precompute_factorials(n_max):\n    global fact, inv_fact\n    fact = [1] * (n_max + 1)\n    inv_fact = [1] * (n_max + 1)\n    for i in range(2, n_max + 1):\n        fact[i] = (fact[i-1] * i) % MOD\n    inv_fact[n_max] = power(fact[n_max], MOD - 2)\n    for i in range(n_max - 1, 1, -1):\n        inv_fact[i] = (inv_fact[i+1] * (i+1)) % MOD\n\ndef nCr_mod_p(n, r):\n    if r < 0 or r > n:\n        return 0\n    num = fact[n]\n    den = (inv_fact[r] * inv_fact[n-r]) % MOD\n    return (num * den) % MOD\n\ndef solve():\n    n = int(input())\n\n    if n % 2 != 0:\n        print(0)\n        return\n\n    if n == 2:\n        print(MOD - 1) # -1 mod 998244353\n        return\n\n    # n is even and n >= 4\n    precompute_factorials(n) # n_max = n, for nCr(n-2, k-1)\n\n    total_sum = 0\n    for k in range(1, n):\n        term = nCr_mod_p(n - 2, k - 1)\n\n        # k^(k-1)\n        if k == 1:\n            k_pow_k_minus_1 = 1 # 1^0 = 1\n        else:\n            k_pow_k_minus_1 = power(k, k - 1)\n        \n        # (n-k)^(n-k-1)\n        if n - k == 1:\n            n_k_pow_n_k_minus_1 = 1 # 1^0 = 1\n        else:\n            n_k_pow_n_k_minus_1 = power(n - k, n - k - 1)\n        \n        term = (term * k_pow_k_minus_1) % MOD\n        term = (term * n_k_pow_n_k_minus_1) % MOD\n\n        if k % 2 == 1: # (-1)^k is -1\n            total_sum = (total_sum - term + MOD) % MOD\n        else: # (-1)^k is 1\n            total_sum = (total_sum + term) % MOD\n    \n    print(total_sum)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 935,
        "completion_token_count": 6820,
        "thoughts_token_count": 6041
    }
}