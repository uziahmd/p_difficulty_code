{
    "start": 1758011283.4851422,
    "end": 1758011296.6928585,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    line = sys.stdin.readline().strip()\n    parts = list(map(int, line.split()))\n\n    n = parts[0]\n    k = parts[1]\n    l = parts[2]\n    c = parts[3]\n    d = parts[4]\n    p = parts[5]\n    nl = parts[6]\n    np = parts[7]\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total lime slices available\n    total_lime_slices = c * d\n\n    # Calculate how many toasts can be made based on lime slices\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = p // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these\n    # divided by the number of friends, but since we already divided by n in the\n    # calculation of toasts_from_drink, toasts_from_lime, and toasts_from_salt,\n    # we just need the minimum of these values.\n    # The problem states \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n    # and \"The friends want to make as many toasts as they can, provided they all drink the same amount.\"\n    # This implies that if they make X toasts, each friend makes X toasts.\n    # So the total resources needed for X toasts are:\n    # X * n * nl (drink)\n    # X * n * 1 (lime slices)\n    # X * n * np (salt)\n\n    # Let's re-evaluate the toast calculation for clarity based on the example.\n    # Example: n=3, k=4, l=5, c=10, d=8, p=100, nl=3, np=1\n    # Total drink: 4 * 5 = 20 ml\n    # Drink needed per toast per friend: 3 ml\n    # So, for 3 friends, 1 toast requires 3 * 3 = 9 ml\n    # Total toasts possible from drink: 20 // 9 = 2 toasts (for the group)\n    # The example says: \"Overall the friends have 4*5=20 milliliters of the drink, it is enough to make 20/3=6 toasts.\"\n    # This implies 20 ml / (3 ml/toast) = 6 toasts. This is the total number of toasts *if there was only 1 friend*.\n    # Then it says \"min(6, 80, 100) / 3 = 2\". This means the total number of toasts for the *group* is min(6, 80, 100).\n    # And then this total is divided by n to get toasts *per friend*.\n\n    # Let's follow the example's logic more closely.\n    # Total toasts possible if there was only 1 friend:\n    # 1. From drink: (k * l) // nl\n    # 2. From lime: (c * d) // 1 (since each slice is 1 unit)\n    # 3. From salt: p // np\n\n    toasts_possible_from_drink_per_unit = (k * l) // nl\n    toasts_possible_from_lime_per_unit = (c * d)\n    toasts_possible_from_salt_per_unit = p // np\n\n    # The minimum of these is the total number of toasts the *group* can make.\n    total_toasts_for_group = min(toasts_possible_from_drink_per_unit,\n                                 toasts_possible_from_lime_per_unit,\n                                 toasts_possible_from_salt_per_unit)\n\n    # Since there are 'n' friends and they all drink the same amount,\n    # the total number of toasts made by the group is divided among 'n' friends.\n    # So, each friend makes:\n    toasts_per_friend = total_toasts_for_group // n\n\n    sys.stdout.write(str(toasts_per_friend) + '\\n')\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    line = sys.stdin.readline().strip()\n    parts = list(map(int, line.split()))\n\n    n = parts[0]\n    k = parts[1]\n    l = parts[2]\n    c = parts[3]\n    d = parts[4]\n    p = parts[5]\n    nl = parts[6]\n    np = parts[7]\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total lime slices available\n    total_lime_slices = c * d\n\n    # Calculate how many toasts can be made based on lime slices\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = p // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these\n    # divided by the number of friends, but since we already divided by n in the\n    # calculation of toasts_from_drink, toasts_from_lime, and toasts_from_salt,\n    # we just need the minimum of these values.\n    # The problem states \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n    # and \"The friends want to make as many toasts as they can, provided they all drink the same amount.\"\n    # This implies that if they make X toasts, each friend makes X toasts.\n    # So the total resources needed for X toasts are:\n    # X * n * nl (drink)\n    # X * n * 1 (lime slices)\n    # X * n * np (salt)\n\n    # Let's re-evaluate the toast calculation for clarity based on the example.\n    # Example: n=3, k=4, l=5, c=10, d=8, p=100, nl=3, np=1\n    # Total drink: 4 * 5 = 20 ml\n    # Drink needed per toast per friend: 3 ml\n    # So, for 3 friends, 1 toast requires 3 * 3 = 9 ml\n    # Total toasts possible from drink: 20 // 9 = 2 toasts (for the group)\n    # The example says: \"Overall the friends have 4*5=20 milliliters of the drink, it is enough to make 20/3=6 toasts.\"\n    # This implies 20 ml / (3 ml/toast) = 6 toasts. This is the total number of toasts *if there was only 1 friend*.\n    # Then it says \"min(6, 80, 100) / 3 = 2\". This means the total number of toasts for the *group* is min(6, 80, 100).\n    # And then this total is divided by n to get toasts *per friend*.\n\n    # Let's follow the example's logic more closely.\n    # Total toasts possible if there was only 1 friend:\n    # 1. From drink: (k * l) // nl\n    # 2. From lime: (c * d) // 1 (since each slice is 1 unit)\n    # 3. From salt: p // np\n\n    toasts_possible_from_drink_per_unit = (k * l) // nl\n    toasts_possible_from_lime_per_unit = (c * d)\n    toasts_possible_from_salt_per_unit = p // np\n\n    # The minimum of these is the total number of toasts the *group* can make.\n    total_toasts_for_group = min(toasts_possible_from_drink_per_unit,\n                                 toasts_possible_from_lime_per_unit,\n                                 toasts_possible_from_salt_per_unit)\n\n    # Since there are 'n' friends and they all drink the same amount,\n    # the total number of toasts made by the group is divided among 'n' friends.\n    # So, each friend makes:\n    toasts_per_friend = total_toasts_for_group // n\n\n    sys.stdout.write(str(toasts_per_friend) + '\\n')\n\nsolve()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 548,
        "completion_token_count": 1013,
        "thoughts_token_count": 0
    }
}