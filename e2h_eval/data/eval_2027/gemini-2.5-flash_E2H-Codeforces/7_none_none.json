{
    "start": 1758011308.4659057,
    "end": 1758011326.9195032,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n = int(input())\n\n    if n < 7:\n        print(\"NO\")\n        return\n\n    # Case 1: m = 2 (1 + k + k^2 vertices)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Use quadratic formula: k = (-1 +/- sqrt(1 - 4(1)(1 - n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    \n    # We need k > 1.\n    # For k = 2, n = 1 + 2 + 4 = 7\n    # For k = 3, n = 1 + 3 + 9 = 13\n    # For k = 4, n = 1 + 4 + 16 = 21\n    # ...\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(discriminant**0.5)\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Check if k is an integer and k > 1\n            # k = (-1 + sqrt_discriminant) / 2\n            if (-1 + sqrt_discriminant) % 2 == 0:\n                k = (-1 + sqrt_discriminant) // 2\n                if k > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: m >= 3\n    # n = 1 + k + k^2 + ... + k^(m-1) = (k^m - 1) / (k - 1)\n    # n(k - 1) = k^m - 1\n    # nk - n = k^m - 1\n    # nk - k^m = n - 1\n    # k(n - k^(m-1)) = n - 1\n\n    # Since k > 1, the smallest k is 2.\n    # The smallest m is 3 (because m must be at least 2, and we handled m=2 already).\n    # Smallest n for k=2, m=3: 1 + 2 + 4 = 7\n    # Smallest n for k=2, m=4: 1 + 2 + 4 + 8 = 15\n    # Smallest n for k=3, m=3: 1 + 3 + 9 = 13\n    \n    # Iterate over possible values of m (number of levels in the snowflake minus 1)\n    # Since n <= 10^18, k^m <= n.\n    # If k = 2, 2^m <= 10^18 => m <= log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79. So m up to 60.\n    # If k = 10^9, m = 2 (already handled)\n    # If k = 10^6, m = 3 (1 + 10^6 + 10^12)\n    # If k = 10^4, m = 4 (1 + 10^4 + 10^8 + 10^12)\n    # Max m is around 60.\n    \n    # Iterate m from 3 to 60 (or slightly more to be safe, e.g., 64)\n    for m in range(3, 65): # k^m <= n implies m <= log_k(n). Smallest k is 2. log_2(10^18) approx 59.79.\n        # We need to find k such that n = (k^m - 1) / (k - 1)\n        # This is equivalent to n(k-1) = k^m - 1\n        # We can use binary search for k.\n        \n        # Lower bound for k is 2.\n        # Upper bound for k: k^m < n => k < n^(1/m)\n        # For m=3, k < (10^18)^(1/3) = 10^6\n        # For m=60, k < (10^18)^(1/60) = (10^(18/60)) = 10^(0.3) approx 2.\n        \n        low = 2\n        high = int(n**(1/m)) + 2 # Add some buffer for floating point inaccuracies\n        \n        # A tighter upper bound for high: if k >= 2, then sum is at least 1 + k + k^2 + ... + k^(m-1) > k^(m-1).\n        # So k^(m-1) < n => k < n^(1/(m-1)).\n        # high = int(n**(1/(m-1))) + 2\n        # For m=3, high = int(n**(1/2)) + 2. Max 10^9 + 2.\n        # For m=60, high = int(n**(1/59)) + 2. Max 2 + 2 = 4.\n\n        # Let's use a conservative upper bound for high.\n        # Max k for m=3: n = 1+k+k^2, k approx sqrt(n). Max sqrt(10^18) = 10^9.\n        # Max k for m=60: n = 1+k+...+k^59. k approx n^(1/59). Max (10^18)^(1/59) approx 2.\n        # So high can be up to 10^9.\n        # Binary search for k in [2, 10^9 + 7] (a safe upper bound)\n        \n        # The sum is 1 + k + k^2 + ... + k^(m-1)\n        # Max k for m=3 is 10^6.\n        # For k=10^6, m=3, n = 1 + 10^6 + 10^12.\n        # For k=10^5, m=4, n = 1 + 10^5 + 10^10 + 10^15.\n        # For k=10^4, m=5, n = 1 + 10^4 + 10^8 + 10^12 + 10^16.\n        # For k=10^3, m=6, n = 1 + 10^3 + 10^6 + 10^9 + 10^12 + 10^15.\n        # For k=10^2, m=9, n = 1 + ... + 10^16.\n        # For k=10, m=18, n = 1 + ... + 10^17.\n        # For k=2, m=60, n = 1 + ... + 2^59.\n        \n        # The maximum value for k is sqrt(n) for m=3, which is 10^9.\n        # So, high should be around 10^9.\n        # Let's set a practical upper bound for binary search.\n        # If k >= 2, then (k^m - 1) / (k - 1) >= 1 + k + k^2.\n        # So n >= 1 + k + k^2. Approx n >= k^2. So k <= sqrt(n).\n        # high = int(n**0.5) + 2 is a safe upper bound for k for any m >= 3.\n        # Max value for high is 10^9 + 2.\n        high = int(n**0.5) + 2\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid <= 1: # k must be > 1\n                low = 2\n                continue\n            \n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(m):\n                current_sum += term\n                if _ < m - 1: # Check for overflow before multiplying for the next term\n                    if n // mid < term: # term * mid > n (potential overflow or exceeds n)\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n = int(input())\n\n    if n < 7:\n        print(\"NO\")\n        return\n\n    # Case 1: m = 2 (1 + k + k^2 vertices)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Use quadratic formula: k = (-1 +/- sqrt(1 - 4(1)(1 - n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    \n    # We need k > 1.\n    # For k = 2, n = 1 + 2 + 4 = 7\n    # For k = 3, n = 1 + 3 + 9 = 13\n    # For k = 4, n = 1 + 4 + 16 = 21\n    # ...\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(discriminant**0.5)\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Check if k is an integer and k > 1\n            # k = (-1 + sqrt_discriminant) / 2\n            if (-1 + sqrt_discriminant) % 2 == 0:\n                k = (-1 + sqrt_discriminant) // 2\n                if k > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: m >= 3\n    # n = 1 + k + k^2 + ... + k^(m-1) = (k^m - 1) / (k - 1)\n    # n(k - 1) = k^m - 1\n    # nk - n = k^m - 1\n    # nk - k^m = n - 1\n    # k(n - k^(m-1)) = n - 1\n\n    # Since k > 1, the smallest k is 2.\n    # The smallest m is 3 (because m must be at least 2, and we handled m=2 already).\n    # Smallest n for k=2, m=3: 1 + 2 + 4 = 7\n    # Smallest n for k=2, m=4: 1 + 2 + 4 + 8 = 15\n    # Smallest n for k=3, m=3: 1 + 3 + 9 = 13\n    \n    # Iterate over possible values of m (number of levels in the snowflake minus 1)\n    # Since n <= 10^18, k^m <= n.\n    # If k = 2, 2^m <= 10^18 => m <= log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79. So m up to 60.\n    # If k = 10^9, m = 2 (already handled)\n    # If k = 10^6, m = 3 (1 + 10^6 + 10^12)\n    # If k = 10^4, m = 4 (1 + 10^4 + 10^8 + 10^12)\n    # Max m is around 60.\n    \n    # Iterate m from 3 to 60 (or slightly more to be safe, e.g., 64)\n    for m in range(3, 65): # k^m <= n implies m <= log_k(n). Smallest k is 2. log_2(10^18) approx 59.79.\n        # We need to find k such that n = (k^m - 1) / (k - 1)\n        # This is equivalent to n(k-1) = k^m - 1\n        # We can use binary search for k.\n        \n        # Lower bound for k is 2.\n        # Upper bound for k: k^m < n => k < n^(1/m)\n        # For m=3, k < (10^18)^(1/3) = 10^6\n        # For m=60, k < (10^18)^(1/60) = (10^(18/60)) = 10^(0.3) approx 2.\n        \n        low = 2\n        high = int(n**(1/m)) + 2 # Add some buffer for floating point inaccuracies\n        \n        # A tighter upper bound for high: if k >= 2, then sum is at least 1 + k + k^2 + ... + k^(m-1) > k^(m-1).\n        # So k^(m-1) < n => k < n^(1/(m-1)).\n        # high = int(n**(1/(m-1))) + 2\n        # For m=3, high = int(n**(1/2)) + 2. Max 10^9 + 2.\n        # For m=60, high = int(n**(1/59)) + 2. Max 2 + 2 = 4.\n\n        # Let's use a conservative upper bound for high.\n        # Max k for m=3: n = 1+k+k^2, k approx sqrt(n). Max sqrt(10^18) = 10^9.\n        # Max k for m=60: n = 1+k+...+k^59. k approx n^(1/59). Max (10^18)^(1/59) approx 2.\n        # So high can be up to 10^9.\n        # Binary search for k in [2, 10^9 + 7] (a safe upper bound)\n        \n        # The sum is 1 + k + k^2 + ... + k^(m-1)\n        # Max k for m=3 is 10^6.\n        # For k=10^6, m=3, n = 1 + 10^6 + 10^12.\n        # For k=10^5, m=4, n = 1 + 10^5 + 10^10 + 10^15.\n        # For k=10^4, m=5, n = 1 + 10^4 + 10^8 + 10^12 + 10^16.\n        # For k=10^3, m=6, n = 1 + 10^3 + 10^6 + 10^9 + 10^12 + 10^15.\n        # For k=10^2, m=9, n = 1 + ... + 10^16.\n        # For k=10, m=18, n = 1 + ... + 10^17.\n        # For k=2, m=60, n = 1 + ... + 2^59.\n        \n        # The maximum value for k is sqrt(n) for m=3, which is 10^9.\n        # So, high should be around 10^9.\n        # Let's set a practical upper bound for binary search.\n        # If k >= 2, then (k^m - 1) / (k - 1) >= 1 + k + k^2.\n        # So n >= 1 + k + k^2. Approx n >= k^2. So k <= sqrt(n).\n        # high = int(n**0.5) + 2 is a safe upper bound for k for any m >= 3.\n        # Max value for high is 10^9 + 2.\n        high = int(n**0.5) + 2\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid <= 1: # k must be > 1\n                low = 2\n                continue\n            \n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(m):\n                current_sum += term\n                if _ < m - 1: # Check for overflow before multiplying for the next term\n                    if n // mid < term: # term * mid > n (potential overflow or exceeds n)\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 2121,
        "thoughts_token_count": 0
    }
}