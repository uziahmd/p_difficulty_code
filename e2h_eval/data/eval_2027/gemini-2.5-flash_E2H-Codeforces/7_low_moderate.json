{
    "start": 1758009319.2524934,
    "end": 1758009368.5740848,
    "start-formatted": "2025-09-16 16:55 KST",
    "end-formatted": "2025-09-16 16:56 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Problem Decomposition and Snowflake Structure**\n\nAlright, let's tackle this \"Rudolf and Snowflakes\" problem. It looks like we need to craft a Python script, so let's get down to brass tacks. First, I'm going to break down this snowflake structure, as that's key to the solution. The description lays out the construction rules pretty clearly.\n\nThe core idea is this: we start with a central vertex, and then we build outwards in layers. The crucial thing is the branching factor, `k`. Each level is spawned from the previous level.\n\nLevel 0 is just the center. Level 1 connects the center to `k` new vertices. Now the key is how many layers are added after the first level. Each of those Level 1 vertices, which are connected to only one vertex, spawns `k` new vertices each.  The problem stipulates this happens at least once, which I'm taking to mean the depth of the snowflake is at least 2.\n\nLet's do some number tracing here because that feels like a good approach. If we do the spawning step once (`d = 1`), we get `k` level 1 vertices connecting to `k` new vertices each, adding `k^2` vertices, for a total of `1 + k + k^2` vertices. I can see how this recursive process works to create a geometric progression.\n\nGeneralizing this, if we do the spawning step `d` times, the total number of vertices becomes `1 + k + k^2 + ... + k^(d+1)`. That's a geometric series. We're given `n` which is the total number of vertices, and we need to solve for `k` and `d` given `n`, following the construction of the snowflake. I'm going to simplify by setting `m = d+1`, so that `m` is at least 2. This makes it easier to work with.\n\nSo the problem translates to finding if there exists an `m >= 2` and a `k > 1` such that `n = (k^(m+1) - 1) / (k - 1)`. That feels like a solid foundation to start building a Python script, and I feel confident I can solve this.\n",
    "response": "The problem asks us to determine if a given number of vertices `n` can form a \"snowflake\" graph. A snowflake is constructed as follows:\n1.  Start with 1 central vertex.\n2.  Connect the central vertex to `k` new vertices, where `k > 1`.\n3.  Repeat at least once: each vertex connected to only one other vertex is connected to `k` more new vertices.\n\nLet's analyze the number of vertices:\n*   Initially: 1 vertex (the center).\n*   After step 2: 1 (center) + `k` (new vertices) = `1 + k` vertices. The `k` new vertices are connected to only one other vertex.\n*   Let `d` be the number of times step 3 is performed. The problem states `d >= 1`.\n\nIf `d = 1`:\nThe `k` vertices from the previous step each connect to `k` new vertices. This adds `k * k = k^2` vertices.\nTotal vertices: `1 + k + k^2`.\n\nIf `d = 2`:\nThe `k^2` vertices from the previous step each connect to `k` new vertices. This adds `k^2 * k = k^3` vertices.\nTotal vertices: `1 + k + k^2 + k^3`.\n\nIn general, if step 3 is performed `d` times, the total number of vertices `N` will be the sum of a geometric series:\n`N = 1 + k + k^2 + ... + k^(d+1)`\n\nUsing the formula for the sum of a geometric series, `N = (k^(d+2) - 1) / (k - 1)`.\nLet `p = d + 1`. Since `d >= 1`, we have `p >= 2`.\nSo, the number of vertices `n` must satisfy `n = 1 + k + k^2 + ... + k^p` for some integers `k > 1` and `p >= 2`.\nThis can also be written as `n = (k^(p+1) - 1) / (k - 1)`.\n\nWe need to check if a given `n` can be represented in this form.\n\n**Case 1: `k` is small.**\nIf `k` is small, `p` can be large.\nFor `k = 2`: `n = 1 + 2 + ... + 2^p = 2^(p+1) - 1`.\nFor `k = 3`: `n = 1 + 3 + ... + 3^p = (3^(p+1) - 1) / 2`.\n...\nFor a fixed `k`, `n` grows exponentially with `p`. Since `n <= 10^18`, `p` cannot be very large.\nFor `k = 2`, `2^(p+1) - 1 <= 10^18` implies `2^(p+1) <= 10^18 + 1`. `p+1 <= log2(10^18 + 1) approx 18 * log2(10) approx 18 * 3.32 approx 59.79`. So `p+1 <= 59`, meaning `p <= 58`.\nFor `k = 3`, `(3^(p+1) - 1) / 2 <= 10^18` implies `3^(p+1) <= 2 * 10^18 + 1`. `p+1 <= log3(2 * 10^18 + 1) approx 18 * log3(10) + log3(2) approx 18 * 2.09 + 0.63 approx 37.62 + 0.63 approx 38.25`. So `p+1 <= 38`, meaning `p <= 37`.\nThe maximum `p` decreases as `k` increases. For `k = 10^9`, `p` must be 2.\nThis suggests we can iterate `p` from 2 up to a maximum value (e.g., 60). For each `p`, we need to check if there exists an integer `k > 1` such that `n = 1 + k + ... + k^p`.\nThis equation can be rewritten as `n(k-1) = k^(p+1) - 1`.\nFor a fixed `p`, `f(k) = 1 + k + ... + k^p` is a strictly increasing function for `k > 1`.\nWe can use binary search to find `k` for a fixed `p`.\nThe range for `k` would be `2` to `n-1`. A tighter upper bound for `k` is `n^(1/p)`.\nSince `k^p < n`, `k < n^(1/p)`.\nFor `p=2`, `k < sqrt(n)`. `sqrt(10^18) = 10^9`.\nFor `p=3`, `k < cbrt(n)`. `cbrt(10^18) = 10^6`.\nFor `p=58`, `k < n^(1/58)`. `(10^18)^(1/58) approx 1.6`. So `k` can only be 1 (which is not allowed) or 2.\n\n**Binary Search approach for `k`:**\nFor each `p` from 2 to `MAX_P` (e.g., 60):\n  Binary search for `k` in range `[2, N_MAX_P]` where `N_MAX_P` is `10^18` for `p=2` (or `10^9` for `p=2` as `k^2 < n`), and `2` for `p=59`. A safe upper bound for `k` is `2 * 10^9` (since `k^2` can be `4 * 10^18`, but `k` can't exceed `10^9` if `p=2` and `n=10^18`).\n  Let `low = 2`, `high = min(2 * 10^9, int(n**(1/p)) + 2)`.\n  While `low <= high`:\n    `mid = low + (high - low) // 2`\n    Calculate `val = 1 + mid + ... + mid^p`. Be careful about overflow.\n    A safer way to calculate `val` is to check if `mid^(p+1)` overflows before computing `(mid^(p+1) - 1) / (mid - 1)`.\n    `current_sum = 0`\n    `term = 1`\n    `possible_match = True`\n    For `_` from 0 to `p`:\n      `current_sum += term`\n      If `current_sum > n`: `possible_match = False`; break\n      If `_ < p`:\n        If `term > n / mid`: `possible_match = False`; break (check for `term * mid` overflow)\n        `term *= mid`\n    If `possible_match` and `current_sum == n`: return \"YES\"\n    If `possible_match` and `current_sum < n`: `low = mid + 1`\n    Else (`current_sum > n` or overflow occurred): `high = mid - 1`\n\n**Optimization:**\nThe `p=2` case `n = 1 + k + k^2` is special because `k` can be very large (`~10^9`).\n`k^2 + k + 1 - n = 0`.\nThis is a quadratic equation `ax^2 + bx + c = 0` with `a=1, b=1, c=1-n`.\nThe solution for `k` is `(-1 + sqrt(1 - 4(1)(1-n))) / 2 = (-1 + sqrt(1 - 4 + 4n)) / 2 = (-1 + sqrt(4n - 3)) / 2`.\nFor `k` to be an integer `> 1`, `4n - 3` must be a perfect square, say `S^2`, and `S` must be odd and `S > 1`.\nLet `S = sqrt(4n - 3)`. If `S` is an integer, then `k = (S - 1) / 2`.\nWe check if `k > 1`.\nThis check can be done in `O(1)` time (with `sqrt` operation).\n\n**Algorithm:**\n1.  Read `n`.\n2.  **Special case `p=2`:**\n    Calculate `val = 4 * n - 3`.\n    If `val < 0`, continue.\n    Calculate `s_val = int(val**0.5)`.\n    If `s_val * s_val == val`:\n        `k = (s_val - 1) / 2`.\n        If `k > 1` and `k` is an integer:\n            Print \"YES\" and return.\n3.  **General case `p >= 3`:**\n    Iterate `p` from 3 up to `60` (or `62` for `2^62 > 10^18`).\n    For each `p`:\n        Binary search for `k` in range `[2, 2*10^6]` (a safe upper bound for `k` when `p >= 3` is `10^6` because `(10^6)^3 = 10^18`).\n        `low = 2`, `high = 2 * 10**6` (or `int(n**(1/p)) + 2` for a tighter bound).\n        While `low <= high`:\n            `mid = low + (high - low) // 2`\n            If `mid < 2`, `low = 2`; continue.\n            `current_sum = 0`\n            `term = 1`\n            `possible_match = True`\n            For `_` from 0 to `p`:\n                `current_sum += term`\n                If `current_sum > n`:\n                    `possible_match = False`\n                    break\n                If `_ < p`:\n                    # Check for term * mid overflow before multiplication\n                    # If mid is 0, term * mid is 0. But mid >= 2 here.\n                    if term > n // mid: # if term * mid > n, it will overflow or exceed n\n                        possible_match = False\n                        break\n                    `term *= mid`\n            If `possible_match` and `current_sum == n`:\n                Print \"YES\" and return.\n            If `possible_match` and `current_sum < n`:\n                `low = mid + 1`\n            Else: # `current_sum > n` or overflow occurred\n                `high = mid - 1`\n4.  If no `k, p` pair found after all checks:\n    Print \"NO\".\n\n**Example test cases walkthrough:**\n*   `n = 1`: `4*1 - 3 = 1`. `sqrt(1)=1`. `k=(1-1)/2 = 0`. Not `k > 1`. No for `p=2`. For `p >= 3`, `1 + k + k^2 + ... + k^p` for `k >= 2` is always `> 1`. So `n=1` is \"NO\". Correct.\n*   `n = 13`:\n    `p=2`: `4*13 - 3 = 52 - 3 = 49`. `sqrt(49) = 7`. `k = (7-1)/2 = 3`. `k=3 > 1`. YES. Correct. (`1 + 3 + 3^2 = 1 + 3 + 9 = 13`).\n*   `n = 15`:\n    `p=2`: `4*15 - 3 = 60 - 3 = 57`. Not a perfect square.\n    `p=3`: Binary search for `k`. `1 + k + k^2 + k^3 = 15`.\n        `k=2`: `1 + 2 + 4 + 8 = 15`. Match! YES. Correct.\n\nThe maximum value of `p` to check for `n <= 10^18` is `p=59` for `k=2`. So iterating `p` up to 60 is sufficient. The binary search for `k` for `p >= 3` runs up to `2*10^6`, which is efficient enough. `60 * log(2*10^6)` operations per test case. `log(2*10^6)` is about `21`. So `60 * 21 = 1260` operations. This is very fast for `10^4` test cases.\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    # Case 1: p = 2 (n = 1 + k + k^2)\n    # k^2 + k + (1 - n) = 0\n    # Discriminant D = 1^2 - 4 * 1 * (1 - n) = 1 - 4 + 4n = 4n - 3\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        s_discriminant = int(math.isqrt(discriminant)) # math.isqrt is for integer square root\n        if s_discriminant * s_discriminant == discriminant:\n            # If it's a perfect square, check if k is an integer > 1\n            if (s_discriminant - 1) % 2 == 0: # (s_discriminant - 1) must be even\n                k_val = (s_discriminant - 1) // 2\n                if k_val > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: p >= 3 (n = 1 + k + k^2 + ... + k^p)\n    # The maximum value for p is relatively small.\n    # For k=2, 1 + 2 + ... + 2^p = 2^(p+1) - 1.\n    # 2^(p+1) - 1 <= 10^18 => 2^(p+1) <= 10^18 + 1\n    # p+1 <= log2(10^18 + 1) approx 59.79. So max p+1 is 59, max p is 58.\n    # We can iterate p from 3 up to around 60.\n\n    # For k, max k is sqrt(n) for p=2 (10^9), cbrt(n) for p=3 (10^6).\n    # For p=3, k approx n^(1/3) <= (10^18)^(1/3) = 10^6.\n    # So, for p >= 3, k won't exceed 10^6 significantly. A safe upper bound for binary search is 2 * 10^6.\n    \n    for p in range(3, 61): # Iterate p from 3 up to 60 (inclusive)\n        low = 2\n        # Upper bound for k: k^p < n => k < n^(1/p).\n        # A slightly larger bound to be safe, e.g., 2 * 10^6 is enough for p >= 3\n        # since (2*10^6)^3 = 8*10^18 > 10^18.\n        # For p=3, k_upper_bound = 10^6 + small_constant.\n        # For p=4, k_upper_bound = (10^18)^(1/4) = 10^4.5 approx 31622.\n        # For p=5, k_upper_bound = (10^18)^(1/5) = 10^3.6 approx 3981.\n        # For p=60, k_upper_bound = (10^18)^(1/60) = 10^0.3 approx 2.\n        # So, a fixed high value like 2*10^6 is fine.\n        high = 2 * 10**6 \n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            possible_match = True\n\n            # Calculate sum 1 + mid + mid^2 + ... + mid^p\n            # Check for overflow at each step\n            for _ in range(p + 1):\n                current_sum += term\n                if current_sum > n: # Sum exceeded n\n                    possible_match = False\n                    break\n                \n                if _ < p: # If not the last term, prepare for next term\n                    # Check for term * mid overflow before multiplication\n                    # If term > n / mid, then term * mid > n.\n                    # This also handles potential overflow if term * mid exceeds max long long.\n                    # Since n <= 10^18, if term > 10^18 / mid, it will exceed n.\n                    if mid == 0: # Should not happen as mid >= 2\n                        possible_match = False\n                        break\n                    if term > n // mid: \n                        possible_match = False\n                        break\n                    term *= mid\n            \n            if possible_match and current_sum == n:\n                print(\"YES\")\n                return\n            elif possible_match and current_sum < n:\n                low = mid + 1\n            else: # current_sum > n or overflow occurred\n                high = mid - 1\n                \n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    # Case 1: p = 2 (n = 1 + k + k^2)\n    # k^2 + k + (1 - n) = 0\n    # Discriminant D = 1^2 - 4 * 1 * (1 - n) = 1 - 4 + 4n = 4n - 3\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        s_discriminant = int(math.isqrt(discriminant)) # math.isqrt is for integer square root\n        if s_discriminant * s_discriminant == discriminant:\n            # If it's a perfect square, check if k is an integer > 1\n            if (s_discriminant - 1) % 2 == 0: # (s_discriminant - 1) must be even\n                k_val = (s_discriminant - 1) // 2\n                if k_val > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: p >= 3 (n = 1 + k + k^2 + ... + k^p)\n    # The maximum value for p is relatively small.\n    # For k=2, 1 + 2 + ... + 2^p = 2^(p+1) - 1.\n    # 2^(p+1) - 1 <= 10^18 => 2^(p+1) <= 10^18 + 1\n    # p+1 <= log2(10^18 + 1) approx 59.79. So max p+1 is 59, max p is 58.\n    # We can iterate p from 3 up to around 60.\n\n    # For k, max k is sqrt(n) for p=2 (10^9), cbrt(n) for p=3 (10^6).\n    # For p=3, k approx n^(1/3) <= (10^18)^(1/3) = 10^6.\n    # So, for p >= 3, k won't exceed 10^6 significantly. A safe upper bound for binary search is 2 * 10^6.\n    \n    for p in range(3, 61): # Iterate p from 3 up to 60 (inclusive)\n        low = 2\n        # Upper bound for k: k^p < n => k < n^(1/p).\n        # A slightly larger bound to be safe, e.g., 2 * 10^6 is enough for p >= 3\n        # since (2*10^6)^3 = 8*10^18 > 10^18.\n        # For p=3, k_upper_bound = 10^6 + small_constant.\n        # For p=4, k_upper_bound = (10^18)^(1/4) = 10^4.5 approx 31622.\n        # For p=5, k_upper_bound = (10^18)^(1/5) = 10^3.6 approx 3981.\n        # For p=60, k_upper_bound = (10^18)^(1/60) = 10^0.3 approx 2.\n        # So, a fixed high value like 2*10^6 is fine.\n        high = 2 * 10**6 \n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            possible_match = True\n\n            # Calculate sum 1 + mid + mid^2 + ... + mid^p\n            # Check for overflow at each step\n            for _ in range(p + 1):\n                current_sum += term\n                if current_sum > n: # Sum exceeded n\n                    possible_match = False\n                    break\n                \n                if _ < p: # If not the last term, prepare for next term\n                    # Check for term * mid overflow before multiplication\n                    # If term > n / mid, then term * mid > n.\n                    # This also handles potential overflow if term * mid exceeds max long long.\n                    # Since n <= 10^18, if term > 10^18 / mid, it will exceed n.\n                    if mid == 0: # Should not happen as mid >= 2\n                        possible_match = False\n                        break\n                    if term > n // mid: \n                        possible_match = False\n                        break\n                    term *= mid\n            \n            if possible_match and current_sum == n:\n                print(\"YES\")\n                return\n            elif possible_match and current_sum < n:\n                low = mid + 1\n            else: # current_sum > n or overflow occurred\n                high = mid - 1\n                \n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 4260,
        "thoughts_token_count": 770
    }
}