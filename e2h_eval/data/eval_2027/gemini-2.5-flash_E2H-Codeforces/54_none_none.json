{
    "start": 1758293703.0444584,
    "end": 1758293720.927612,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2\n    v2 = 2\n\n    # Iterate through possible v1 (can be 1)\n    # Iterate through possible v3 (from 3 to n)\n    # The angle formed by v1, v2, v3 is an inscribed angle in the circumcircle.\n    # The angle subtends an arc from v1 to v3.\n    # The number of vertices between v1 and v3 (exclusive of v1 and v3) determines the angle.\n    # If v1 = 1, v2 = 2, then v3 ranges from 3 to n.\n    # The angle at v2 is formed by chords (v2, v1) and (v2, v3).\n    # The angle is (number of edges between v1 and v3, not passing through v2) * (180 / n)\n    # Or more precisely, the central angle subtended by the arc (v1, v3) is (k * 360 / n),\n    # where k is the number of edges along the arc.\n    # The inscribed angle is half of the central angle, so (k * 180 / n).\n\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges along the arc from v1 to v3 (clockwise, not passing through v2) is (v3 - v1).\n    # The number of edges along the arc from v1 to v3 (clockwise, passing through v2) is (n - (v3 - v1)).\n    # We want the arc that does not contain v2.\n    # If v1 = 1, v2 = 2, v3 = k (where k > 2).\n    # The arc from v1 to v3 is (k-1) edges.\n    # The angle is (k-1) * (180 / n).\n    # This is not correct. The angle is formed by (v2, v1) and (v2, v3).\n    # The angle at v2 is determined by the number of vertices between v1 and v3.\n    # The number of edges on the arc between v1 and v3 (the one not containing v2) is `k`.\n    # The angle is `k * (180 / n)`.\n    # Let's use indices. If vertices are 0, 1, ..., n-1.\n    # Let v2 be at index 1.\n    # Let v1 be at index 0.\n    # Let v3 be at index `i` (where `i` from 2 to n-1).\n    # The arc between v1 (index 0) and v3 (index `i`) has `i` edges.\n    # So the angle is `i * (180 / n)`.\n    # In 1-based indexing:\n    # v1 = 1, v2 = 2.\n    # v3 can be 3, 4, ..., n.\n    # If v3 = k (where k is from 3 to n).\n    # The arc from v1 to v3 has (k-1) edges. This is the arc (1, 2, ..., k).\n    # The angle formed at v2 (vertex 2) by lines (2,1) and (2,k) is (k-1-1) * (180/n) = (k-2) * (180/n).\n    # No, this is also incorrect.\n    # The angle formed by v1-v2-v3 is an inscribed angle.\n    # The measure of an inscribed angle is half the measure of its intercepted arc.\n    # The intercepted arc is the arc between v1 and v3 that does not contain v2.\n    # Let's fix v2 to be vertex 2.\n    # Let v1 be vertex 1.\n    # Let v3 be vertex k (where k is from 3 to n).\n    # The number of edges on the arc from v1 to v3 (not containing v2) is (k - v1) = (k - 1).\n    # So the angle is (k - 1) * (180 / n).\n    # This is for the arc (1, 2, ..., k). But vertex 2 is on this arc.\n    # The arc between v1 and v3 *not* containing v2.\n    # Vertices are 1, 2, 3, ..., n.\n    # Let v2 be vertex `j`.\n    # Let v1 be vertex `i`.\n    # Let v3 be vertex `k`.\n    # Assume `i < j < k` (by re-labeling or rotating the polygon).\n    # The arc between `i` and `k` that does not contain `j` is the arc `i, i+1, ..., k`.\n    # The number of edges on this arc is `k - i`.\n    # The angle is `(k - i) * (180 / n)`.\n    # The condition is that `i`, `j`, `k` are distinct.\n    # So `k - i` must be at least 2 (since `i`, `j`, `k` are distinct and ordered).\n    # `k - i` can go up to `n - 1`.\n\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc from v1 (1) to v3 (k) that does not contain v2 (2) is (k - 1).\n    # For example, if n=4, v1=1, v2=2.\n    # If v3=3, arc is (1,3). Number of edges = 2. Angle = 2 * 180/4 = 90. Vertices are 1,2,3.\n    # If v3=4, arc is (1,4). Number of edges = 3. Angle = 3 * 180/4 = 135. Vertices are 1,2,4.\n    # This seems correct. The angle formed by (v2,v1) and (v2,v3) is (num_edges_between_v1_and_v3_not_containing_v2) * (180/n).\n    # In 1-based indexing, if v1=1, v2=2, v3=k (k from 3 to n).\n    # The arc from v1 to v3 (clockwise) is 1 -> ... -> k. This arc has (k-1) edges.\n    # Vertex 2 is on this arc. So this is not the arc we want.\n    # The other arc is k -> k+1 -> ... -> n -> 1. This arc has (n - (k-1)) edges.\n    # The number of edges on this arc is `n - k + 1`.\n    # The angle is `(n - k + 1) * (180 / n)`.\n    # Let's check this again.\n    # For n=4, v1=1, v2=2.\n    # If v3=3: k=3. Angle = (4 - 3 + 1) * (180/4) = 2 * 45 = 90. Correct.\n    # If v3=4: k=4. Angle = (4 - 4 + 1) * (180/4) = 1 * 45 = 45. Correct.\n    # So the formula for the angle is `(n - k + 1) * (180 / n)`.\n    # Here `k` is the index of v3. It ranges from 3 to n.\n    # `v1 = 1`, `v2 = 2`.\n    # `v3` ranges from `3` to `n`.\n    # `k_prime = n - k + 1` is the number of edges.\n    # `k_prime` ranges from `n - n + 1 = 1` (when k=n) to `n - 3 + 1 = n - 2` (when k=3).\n    # So `k_prime` ranges from `1` to `n-2`.\n    # This means we can form angles `1 * (180/n)`, `2 * (180/n)`, ..., `(n-2) * (180/n)`.\n    # All these angles are possible. We need to find the one closest to `a`.\n\n    # Iterate `k_prime` from 1 to n-2.\n    # `k_prime` is the number of edges on the arc between v1 and v3 (not containing v2).\n    for k_prime in range(1, n - 1): # k_prime goes from 1 to n-2\n        current_angle = k_prime * (180 / n)\n        current_diff = abs(current_angle - a)\n\n        if current_diff < min_diff:\n            min_diff = current_diff\n            # We need to find v1, v2, v3 corresponding to this k_prime.\n            # v2 = 2 (fixed)\n            # v1 = 1 (fixed)\n            # We used `k_prime = n - v3 + 1`. So `v3 = n - k_prime + 1`.\n            best_v1 = 1\n            best_v2 = 2\n            best_v3 = n - k_prime + 1\n        elif current_diff == min_diff:\n            # If multiple optimal solutions, any is fine.\n            # We can keep the current best or update if we want specific one.\n            # The problem statement says \"any of them\". So we don't need to do anything here.\n            pass\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2\n    v2 = 2\n\n    # Iterate through possible v1 (can be 1)\n    # Iterate through possible v3 (from 3 to n)\n    # The angle formed by v1, v2, v3 is an inscribed angle in the circumcircle.\n    # The angle subtends an arc from v1 to v3.\n    # The number of vertices between v1 and v3 (exclusive of v1 and v3) determines the angle.\n    # If v1 = 1, v2 = 2, then v3 ranges from 3 to n.\n    # The angle at v2 is formed by chords (v2, v1) and (v2, v3).\n    # The angle is (number of edges between v1 and v3, not passing through v2) * (180 / n)\n    # Or more precisely, the central angle subtended by the arc (v1, v3) is (k * 360 / n),\n    # where k is the number of edges along the arc.\n    # The inscribed angle is half of the central angle, so (k * 180 / n).\n\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges along the arc from v1 to v3 (clockwise, not passing through v2) is (v3 - v1).\n    # The number of edges along the arc from v1 to v3 (clockwise, passing through v2) is (n - (v3 - v1)).\n    # We want the arc that does not contain v2.\n    # If v1 = 1, v2 = 2, v3 = k (where k > 2).\n    # The arc from v1 to v3 is (k-1) edges.\n    # The angle is (k-1) * (180 / n).\n    # This is not correct. The angle is formed by (v2, v1) and (v2, v3).\n    # The angle at v2 is determined by the number of vertices between v1 and v3.\n    # The number of edges on the arc between v1 and v3 (the one not containing v2) is `k`.\n    # The angle is `k * (180 / n)`.\n    # Let's use indices. If vertices are 0, 1, ..., n-1.\n    # Let v2 be at index 1.\n    # Let v1 be at index 0.\n    # Let v3 be at index `i` (where `i` from 2 to n-1).\n    # The arc between v1 (index 0) and v3 (index `i`) has `i` edges.\n    # So the angle is `i * (180 / n)`.\n    # In 1-based indexing:\n    # v1 = 1, v2 = 2.\n    # v3 can be 3, 4, ..., n.\n    # If v3 = k (where k is from 3 to n).\n    # The arc from v1 to v3 has (k-1) edges. This is the arc (1, 2, ..., k).\n    # The angle formed at v2 (vertex 2) by lines (2,1) and (2,k) is (k-1-1) * (180/n) = (k-2) * (180/n).\n    # No, this is also incorrect.\n    # The angle formed by v1-v2-v3 is an inscribed angle.\n    # The measure of an inscribed angle is half the measure of its intercepted arc.\n    # The intercepted arc is the arc between v1 and v3 that does not contain v2.\n    # Let's fix v2 to be vertex 2.\n    # Let v1 be vertex 1.\n    # Let v3 be vertex k (where k is from 3 to n).\n    # The number of edges on the arc from v1 to v3 (not containing v2) is (k - v1) = (k - 1).\n    # So the angle is (k - 1) * (180 / n).\n    # This is for the arc (1, 2, ..., k). But vertex 2 is on this arc.\n    # The arc between v1 and v3 *not* containing v2.\n    # Vertices are 1, 2, 3, ..., n.\n    # Let v2 be vertex `j`.\n    # Let v1 be vertex `i`.\n    # Let v3 be vertex `k`.\n    # Assume `i < j < k` (by re-labeling or rotating the polygon).\n    # The arc between `i` and `k` that does not contain `j` is the arc `i, i+1, ..., k`.\n    # The number of edges on this arc is `k - i`.\n    # The angle is `(k - i) * (180 / n)`.\n    # The condition is that `i`, `j`, `k` are distinct.\n    # So `k - i` must be at least 2 (since `i`, `j`, `k` are distinct and ordered).\n    # `k - i` can go up to `n - 1`.\n\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc from v1 (1) to v3 (k) that does not contain v2 (2) is (k - 1).\n    # For example, if n=4, v1=1, v2=2.\n    # If v3=3, arc is (1,3). Number of edges = 2. Angle = 2 * 180/4 = 90. Vertices are 1,2,3.\n    # If v3=4, arc is (1,4). Number of edges = 3. Angle = 3 * 180/4 = 135. Vertices are 1,2,4.\n    # This seems correct. The angle formed by (v2,v1) and (v2,v3) is (num_edges_between_v1_and_v3_not_containing_v2) * (180/n).\n    # In 1-based indexing, if v1=1, v2=2, v3=k (k from 3 to n).\n    # The arc from v1 to v3 (clockwise) is 1 -> ... -> k. This arc has (k-1) edges.\n    # Vertex 2 is on this arc. So this is not the arc we want.\n    # The other arc is k -> k+1 -> ... -> n -> 1. This arc has (n - (k-1)) edges.\n    # The number of edges on this arc is `n - k + 1`.\n    # The angle is `(n - k + 1) * (180 / n)`.\n    # Let's check this again.\n    # For n=4, v1=1, v2=2.\n    # If v3=3: k=3. Angle = (4 - 3 + 1) * (180/4) = 2 * 45 = 90. Correct.\n    # If v3=4: k=4. Angle = (4 - 4 + 1) * (180/4) = 1 * 45 = 45. Correct.\n    # So the formula for the angle is `(n - k + 1) * (180 / n)`.\n    # Here `k` is the index of v3. It ranges from 3 to n.\n    # `v1 = 1`, `v2 = 2`.\n    # `v3` ranges from `3` to `n`.\n    # `k_prime = n - k + 1` is the number of edges.\n    # `k_prime` ranges from `n - n + 1 = 1` (when k=n) to `n - 3 + 1 = n - 2` (when k=3).\n    # So `k_prime` ranges from `1` to `n-2`.\n    # This means we can form angles `1 * (180/n)`, `2 * (180/n)`, ..., `(n-2) * (180/n)`.\n    # All these angles are possible. We need to find the one closest to `a`.\n\n    # Iterate `k_prime` from 1 to n-2.\n    # `k_prime` is the number of edges on the arc between v1 and v3 (not containing v2).\n    for k_prime in range(1, n - 1): # k_prime goes from 1 to n-2\n        current_angle = k_prime * (180 / n)\n        current_diff = abs(current_angle - a)\n\n        if current_diff < min_diff:\n            min_diff = current_diff\n            # We need to find v1, v2, v3 corresponding to this k_prime.\n            # v2 = 2 (fixed)\n            # v1 = 1 (fixed)\n            # We used `k_prime = n - v3 + 1`. So `v3 = n - k_prime + 1`.\n            best_v1 = 1\n            best_v2 = 2\n            best_v3 = n - k_prime + 1\n        elif current_diff == min_diff:\n            # If multiple optimal solutions, any is fine.\n            # We can keep the current best or update if we want specific one.\n            # The problem statement says \"any of them\". So we don't need to do anything here.\n            pass\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 729,
        "completion_token_count": 2397,
        "thoughts_token_count": 0
    }
}