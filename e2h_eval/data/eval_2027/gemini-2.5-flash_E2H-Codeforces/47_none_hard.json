{
    "start": 1758293726.5080671,
    "end": 1758293735.2791848,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n\n    if a == b:\n        print(0)\n        return\n\n    diff = abs(a - b)\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Iterate through divisors of diff\n    # d is a divisor of diff. We want a+k and b+k to be multiples of d.\n    # This means (a+k) % d == 0 and (b+k) % d == 0.\n    # Since b-a is a multiple of d, if a+k is a multiple of d, then b+k = (a+k) + (b-a) is also a multiple of d.\n    # So we only need a+k to be a multiple of d.\n    # (a+k) % d == 0 => k % d == (-a % d + d) % d\n    # The smallest non-negative k for a given d is k_d = (-a % d + d) % d.\n    # Then a+k_d is a multiple of d, and b+k_d is also a multiple of d.\n    # Let x = a+k_d and y = b+k_d.\n    # lcm(x, y) = (x * y) // gcd(x, y)\n    # Since x and y are both multiples of d, gcd(x, y) is also a multiple of d.\n    # We know that gcd(a+k, b+k) = gcd(a+k, (b+k)-(a+k)) = gcd(a+k, b-a) = gcd(a+k, diff).\n    # So for any k, gcd(a+k, b+k) must be a divisor of diff.\n    # We are trying to maximize gcd(a+k, b+k) to minimize lcm(a+k, b+k).\n    # The maximum possible value for gcd(a+k, b+k) is diff itself.\n    # This happens when a+k is a multiple of diff.\n    # If a+k is a multiple of diff, then b+k = (a+k) + diff is also a multiple of diff.\n    # In this case, gcd(a+k, b+k) = diff.\n    # The smallest non-negative k for this case is k = (-a % diff + diff) % diff.\n    # Let's try this k first.\n    k_diff = (-a % diff + diff) % diff\n    current_lcm = (a + k_diff) * (b + k_diff) // diff\n    min_lcm = current_lcm\n    best_k = k_diff\n\n    # Iterate through divisors of diff\n    # d is a potential value for gcd(a+k, b+k).\n    # If gcd(a+k, b+k) = d, then a+k must be a multiple of d.\n    # The smallest non-negative k such that a+k is a multiple of d is k_d = (-a % d + d) % d.\n    # For this k_d, we have a+k_d = m*d for some integer m.\n    # Then b+k_d = (a+k_d) + diff = m*d + diff.\n    # For d to be gcd(a+k_d, b+k_d), d must divide diff.\n    # So we only need to consider d that are divisors of diff.\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors = [i]\n            if i * i != diff:\n                divisors.append(diff // i)\n\n            for d in divisors:\n                k_candidate = (-a % d + d) % d\n                \n                num1 = a + k_candidate\n                num2 = b + k_candidate\n                \n                current_gcd = math.gcd(num1, num2)\n                current_lcm_val = (num1 // current_gcd) * num2 # Avoid overflow by dividing first\n                \n                if current_lcm_val < min_lcm:\n                    min_lcm = current_lcm_val\n                    best_k = k_candidate\n                elif current_lcm_val == min_lcm:\n                    best_k = min(best_k, k_candidate)\n\n    print(best_k)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    a, b = map(int, input().split())\n\n    if a == b:\n        print(0)\n        return\n\n    diff = abs(a - b)\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Iterate through divisors of diff\n    # d is a divisor of diff. We want a+k and b+k to be multiples of d.\n    # This means (a+k) % d == 0 and (b+k) % d == 0.\n    # Since b-a is a multiple of d, if a+k is a multiple of d, then b+k = (a+k) + (b-a) is also a multiple of d.\n    # So we only need a+k to be a multiple of d.\n    # (a+k) % d == 0 => k % d == (-a % d + d) % d\n    # The smallest non-negative k for a given d is k_d = (-a % d + d) % d.\n    # Then a+k_d is a multiple of d, and b+k_d is also a multiple of d.\n    # Let x = a+k_d and y = b+k_d.\n    # lcm(x, y) = (x * y) // gcd(x, y)\n    # Since x and y are both multiples of d, gcd(x, y) is also a multiple of d.\n    # We know that gcd(a+k, b+k) = gcd(a+k, (b+k)-(a+k)) = gcd(a+k, b-a) = gcd(a+k, diff).\n    # So for any k, gcd(a+k, b+k) must be a divisor of diff.\n    # We are trying to maximize gcd(a+k, b+k) to minimize lcm(a+k, b+k).\n    # The maximum possible value for gcd(a+k, b+k) is diff itself.\n    # This happens when a+k is a multiple of diff.\n    # If a+k is a multiple of diff, then b+k = (a+k) + diff is also a multiple of diff.\n    # In this case, gcd(a+k, b+k) = diff.\n    # The smallest non-negative k for this case is k = (-a % diff + diff) % diff.\n    # Let's try this k first.\n    k_diff = (-a % diff + diff) % diff\n    current_lcm = (a + k_diff) * (b + k_diff) // diff\n    min_lcm = current_lcm\n    best_k = k_diff\n\n    # Iterate through divisors of diff\n    # d is a potential value for gcd(a+k, b+k).\n    # If gcd(a+k, b+k) = d, then a+k must be a multiple of d.\n    # The smallest non-negative k such that a+k is a multiple of d is k_d = (-a % d + d) % d.\n    # For this k_d, we have a+k_d = m*d for some integer m.\n    # Then b+k_d = (a+k_d) + diff = m*d + diff.\n    # For d to be gcd(a+k_d, b+k_d), d must divide diff.\n    # So we only need to consider d that are divisors of diff.\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors = [i]\n            if i * i != diff:\n                divisors.append(diff // i)\n\n            for d in divisors:\n                k_candidate = (-a % d + d) % d\n                \n                num1 = a + k_candidate\n                num2 = b + k_candidate\n                \n                current_gcd = math.gcd(num1, num2)\n                current_lcm_val = (num1 // current_gcd) * num2 # Avoid overflow by dividing first\n                \n                if current_lcm_val < min_lcm:\n                    min_lcm = current_lcm_val\n                    best_k = k_candidate\n                elif current_lcm_val == min_lcm:\n                    best_k = min(best_k, k_candidate)\n\n    print(best_k)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 421,
        "completion_token_count": 1045,
        "thoughts_token_count": 0
    }
}