{
    "start": 1758284915.8887174,
    "end": 1758284927.400791,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Alright, let's break this down for Polycarp's Practice problem.**\n\nOkay, so I'm presented with this competitive programming problem involving assigning problem difficulties to days to maximize the total profit.  The core of it is I have `n` problems, `k` days, and each day has to cover a contiguous set of problems from the original ordered list.  The profit for a day is simply the maximum difficulty of problems solved on that day, and the total profit is the sum of these daily maximums.  The goal is to maximize this total profit.\n\nThe constraints are pretty manageable, with both `n` and `k` up to 2000, and problem difficulties are also within a reasonable range.\n\nLooking at the examples, the optimal strategy immediately leaps out at me.  To maximize the sum of those `k` daily maximums, I need to make sure the largest difficulties end up being those maximums.  This means I need to identify the `k` largest problem difficulties in the entire problem list.  Let's call them `M_1, M_2, ..., M_k`. If I can create a partition where each `M_i` becomes the daily maximum for a different day, then I've achieved the absolute best possible total profit, which will be the sum of those `M_i`'s. I think this strategy will always be possible.\n\nSo, the game plan is straightforward:\n\n1.  **Find the `k` largest values in the array `a`**, let's remember the original indices.\n2.  **Calculate the sum of these `k` largest values.** This sum will be the maximum total profit.\n3.  Now, the tricky part is ensuring they are the maximums! It looks like an approach based on the indices of the highest values, sorted to reconstruct the partition, would be best.\n\nThis seems like a solid approach, and I'm pretty confident it'll lead to an efficient Python solution. I'll get to coding and test it out.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # 1. Find the k largest values and their original indices.\n    # Create a list of (value, original_index) pairs.\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Sort this list based on values in descending order.\n    # If values are equal, their relative order doesn't matter for picking k largest,\n    # but for indices, it's good to keep original order if possible, though not strictly necessary here.\n    # Python's sort is stable, so if values are equal, original order is preserved.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Pick the top k elements.\n    top_k_elements = indexed_a[:k]\n\n    # Calculate the maximum total profit.\n    max_total_profit = sum(val for val, _ in top_k_elements)\n    \n    # Extract the original indices of these k elements.\n    # These indices will be the split points.\n    split_indices = []\n    for _, original_index in top_k_elements:\n        split_indices.append(original_index)\n    \n    # Sort the split indices in ascending order to determine the day boundaries.\n    split_indices.sort()\n\n    # 3. Determine the number of problems solved each day.\n    t_values = []\n    current_start_index = 0\n    for i in range(k - 1):\n        # The i-th split point marks the end of problems for day i+1.\n        # The number of problems for day i+1 is (split_indices[i] - current_start_index + 1).\n        # We add 1 because indices are 0-based and inclusive.\n        t_values.append(split_indices[i] - current_start_index + 1)\n        current_start_index = split_indices[i] + 1 # Next day starts after this split point.\n\n    # The last day takes all remaining problems.\n    # From current_start_index up to n-1.\n    t_values.append(n - current_start_index)\n\n    # Print the results.\n    sys.stdout.write(str(max_total_profit) + '\\n')\n    sys.stdout.write(' '.join(map(str, t_values)) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # 1. Find the k largest values and their original indices.\n    # Create a list of (value, original_index) pairs.\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Sort this list based on values in descending order.\n    # If values are equal, their relative order doesn't matter for picking k largest,\n    # but for indices, it's good to keep original order if possible, though not strictly necessary here.\n    # Python's sort is stable, so if values are equal, original order is preserved.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Pick the top k elements.\n    top_k_elements = indexed_a[:k]\n\n    # Calculate the maximum total profit.\n    max_total_profit = sum(val for val, _ in top_k_elements)\n    \n    # Extract the original indices of these k elements.\n    # These indices will be the split points.\n    split_indices = []\n    for _, original_index in top_k_elements:\n        split_indices.append(original_index)\n    \n    # Sort the split indices in ascending order to determine the day boundaries.\n    split_indices.sort()\n\n    # 3. Determine the number of problems solved each day.\n    t_values = []\n    current_start_index = 0\n    for i in range(k - 1):\n        # The i-th split point marks the end of problems for day i+1.\n        # The number of problems for day i+1 is (split_indices[i] - current_start_index + 1).\n        # We add 1 because indices are 0-based and inclusive.\n        t_values.append(split_indices[i] - current_start_index + 1)\n        current_start_index = split_indices[i] + 1 # Next day starts after this split point.\n\n    # The last day takes all remaining problems.\n    # From current_start_index up to n-1.\n    t_values.append(n - current_start_index)\n\n    # Print the results.\n    sys.stdout.write(str(max_total_profit) + '\\n')\n    sys.stdout.write(' '.join(map(str, t_values)) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 973,
        "completion_token_count": 602,
        "thoughts_token_count": 750
    }
}