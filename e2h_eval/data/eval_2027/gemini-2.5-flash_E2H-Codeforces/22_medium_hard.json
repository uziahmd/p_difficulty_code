{
    "start": 1758294721.836749,
    "end": 1758294748.569371,
    "start-formatted": "2025-09-20 00:12 KST",
    "end-formatted": "2025-09-20 00:12 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Here's the plan for solving the \"Marks\" problem:**\n\nFirst, I need to understand the problem: I have `n` students and `m` subjects, with marks from 1 to 9. A student is \"best\" in a subject if no one else has a higher mark in that specific subject, and a student is \"successful\" if they are \"best\" in *at least one* subject.  My goal is to count the successful students.\n\nThe input will be `n`, `m`, followed by `n` lines of marks for each student in each subject.  The output is a single integer: the number of successful students.\n\nMy initial thought is to read the input data and organize it into a 2D structure, like a list of lists. I can use a list of lists of integers, `gradebook[student_index][subject_index]`, because marks are single digits and easy to compare. Reading the input will populate this `gradebook` data structure.\n\nThe core of the algorithm will involve iterating through each subject and finding the maximum mark. Once I have the maximum mark for each subject, I can iterate through the students again to identify those who achieved that maximum mark.  I'll need to keep track of these \"best\" students, and I can use a `set` called `successful_students_indices` to store their indices. A set is ideal because it automatically handles duplicates (a student being \"best\" in multiple subjects) and makes counting successful students easy.\n\nAfter processing all subjects, I can simply count the number of elements in the `successful_students_indices` set, which will be the answer.  This approach seems efficient and will work within the given constraints (`1 <= n, m <= 100`).\n\nI'll use the Python code template provided and modify it for clarity:\n\n1.  Read `n` and `m`.\n2.  Read the marks into `gradebook`, converting the input characters to integers.\n3.  Initialize an empty `set` called `successful_students_indices`\n4.  Iterate over each subject (column).\n5.  Find the maximum mark for the current subject.\n6.  Iterate over the students and add to the set the indexes of those who got the max mark for that subject.\n7.  Print the length of the set `successful_students_indices`.\n\nThis approach will have a time complexity of O(n*m), which is acceptable for the problem constraints. Space complexity will also be O(n\\*m), primarily for storing the `gradebook` and the set of successful students.\n\nI'll be careful to test the code against several edge cases (e.g., n=1, m=1; all the same marks; and typical test cases) to ensure its correctness. Finally, I'll remove any unnecessary comments and polish the code. Also I'll make use of `sys` for faster IO.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    gradebook = []\n    for _ in range(n):\n        row_str = sys.stdin.readline().strip()\n        gradebook.append([int(char) for char in row_str])\n\n    successful_students_indices = set()\n\n    for j in range(m):\n        max_mark_in_subject = 0\n        for i in range(n):\n            if gradebook[i][j] > max_mark_in_subject:\n                max_mark_in_subject = gradebook[i][j]\n        \n        for i in range(n):\n            if gradebook[i][j] == max_mark_in_subject:\n                successful_students_indices.add(i)\n\n    sys.stdout.write(str(len(successful_students_indices)) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    gradebook = []\n    for _ in range(n):\n        row_str = sys.stdin.readline().strip()\n        gradebook.append([int(char) for char in row_str])\n\n    successful_students_indices = set()\n\n    for j in range(m):\n        max_mark_in_subject = 0\n        for i in range(n):\n            if gradebook[i][j] > max_mark_in_subject:\n                max_mark_in_subject = gradebook[i][j]\n        \n        for i in range(n):\n            if gradebook[i][j] == max_mark_in_subject:\n                successful_students_indices.add(i)\n\n    sys.stdout.write(str(len(successful_students_indices)) + '\\n')\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 467,
        "completion_token_count": 219,
        "thoughts_token_count": 3254
    }
}