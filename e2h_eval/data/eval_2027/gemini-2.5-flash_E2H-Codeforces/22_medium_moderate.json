{
    "start": 1758294726.5991313,
    "end": 1758294753.9291372,
    "start-formatted": "2025-09-20 00:12 KST",
    "end-formatted": "2025-09-20 00:12 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Algorithm Design and Implementation for \"Marks\" Problem**\n\nOkay, so I've got this \"Marks\" problem, and the goal is to count the successful students. We're given the number of students (n), the number of subjects (m), and a gradebook where marks are single digits (1-9).  A student is considered \"best\" if they have the maximum mark in at least one subject, and \"successful\" if they are \"best\" in at least one. We need to output the number of successful students.\n\nMy thought process is this: first, I need to read the input - the dimensions of the gradebook (n and m) and the gradebook data itself.  I'll probably represent the gradebook as a list of lists of integers (a 2D array). That will make comparisons easier since we'll be dealing with integers instead of characters.\n\nNext, I have to figure out the maximum mark for each subject.  I'll initialize a list `max_marks_per_subject` of size `m` with initial values of zero (or a low value like 1). Then, I'll iterate through each subject and find the maximum mark by comparing each student's mark for that subject.\n\nOnce I have the maximum marks per subject, I'll go through each student again. For each student, I check their marks against the `max_marks_per_subject`.  If a student's mark matches the maximum for *any* subject, that student is \"best\" and therefore \"successful.\"  I'll store the successful student indices in a set to avoid counting them multiple times (a student might be best in multiple subjects).  As soon as I find a \"best\" subject for a student, I'll move on to the next student - no need to continue checking that student's other subjects.\n\nFinally, the count of successful students will be the size of the set holding their indices. This will be the answer to the problem.\n\nThe time complexity of this approach seems to be O(n*m), where n is the number of students, and m is the number of subjects. This is because we're iterating through the gradebook multiple times (once to find the max mark for each subject and once more to determine which students are \"best\"). Space complexity will be O(n*m) for storing the gradebook, the maximum marks, and successful students. Given the constraints (n, m <= 100), this should be plenty efficient. This aligns perfectly with the problem constraints. I should be able to implement this and test it out quickly. I am very confident this is correct.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    grades = []\n    for _ in range(n):\n        row_str = sys.stdin.readline().strip()\n        grades.append([int(char) for char in row_str])\n\n    max_marks_per_subject = [0] * m\n\n    for j in range(m):\n        current_max = 0\n        for i in range(n):\n            if grades[i][j] > current_max:\n                current_max = grades[i][j]\n        max_marks_per_subject[j] = current_max\n\n    successful_students = set()\n\n    for i in range(n):\n        for j in range(m):\n            if grades[i][j] == max_marks_per_subject[j]:\n                successful_students.add(i)\n                break\n\n    print(len(successful_students))\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    grades = []\n    for _ in range(n):\n        row_str = sys.stdin.readline().strip()\n        grades.append([int(char) for char in row_str])\n\n    max_marks_per_subject = [0] * m\n\n    for j in range(m):\n        current_max = 0\n        for i in range(n):\n            if grades[i][j] > current_max:\n                current_max = grades[i][j]\n        max_marks_per_subject[j] = current_max\n\n    successful_students = set()\n\n    for i in range(n):\n        for j in range(m):\n            if grades[i][j] == max_marks_per_subject[j]:\n                successful_students.add(i)\n                break\n\n    print(len(successful_students))\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 468,
        "completion_token_count": 229,
        "thoughts_token_count": 3489
    }
}