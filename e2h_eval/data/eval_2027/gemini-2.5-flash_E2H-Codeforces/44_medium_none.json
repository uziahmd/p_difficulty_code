{
    "start": 1758294831.3719032,
    "end": 1758294910.6611028,
    "start-formatted": "2025-09-20 00:13 KST",
    "end-formatted": "2025-09-20 00:15 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Python Solution for Polycarp's Practice**\n\nOkay, so I need to solve this \"Polycarp's Practice\" problem, and I'm thinking a Python solution is the way to go.  First, let's break it down: I've got `n` problems, `k` days, and a list `a` with problem difficulties.  The goal is to divide these problems into `k` groups, with each group being solved on a different day. The daily profit is the *maximum* difficulty of the problems solved that day, and I want to *maximize* the total profit across all days.\n\nMy gut feeling is that to maximize the total profit, I need to include the *largest* possible values in my daily maximums.  So, I should grab the `k` largest difficulties, `M_1 >= M_2 >= ... >= M_k`, from the entire list and try to make sure each of these becomes the maximum for one of the `k` days. If I can do that, the total profit will be `sum(M_i)`.  Why? Because if a day's profit is something *less* than one of these `M_i`, I could, in theory, swap it out with a higher `M_i` (if it's not already in use).\n\nLet's work through this strategy:\n1.  Find the `k` largest difficulties (duplicates count!)\n2.  Sum them to get the maximum profit.\n3.  Figure out how to partition the problems to achieve this profit.\n\nTo partition, I can sort the `k` largest difficulties by their original indices in `a`.  This gives me a sorted list of index positions. These *indices* are the key to dividing the days. By making sure these indices are the last elements of their respective days, or somehow contained in them (a safe assumption as the largest elements), the `k` largest problems are guaranteed to *be* the daily maximum.\n\nSo, here's how I think I can do this efficiently in Python:\n\n1.  I'll start with a list of tuples, `(difficulty, original_index)`.\n2.  I'll sort this list in *descending* order by difficulty.\n3.  I'll select the first `k` tuples to get the `k` largest difficulties and their original positions.\n4.  I sum the difficulties of these `k` tuples for the `max_profit`.\n5.  I sort the original indices of these `k` problems. Let's call them the *cut points*.\n6.  The `cut_indices` partition the array into `k` segments. I use these to determine the lengths of each day's problems.  I can determine the length of each day, starting from the first cut index and each subsequent, and then the last segment from after the last index all the way to the end.\n\nThis approach gives me the maximum possible sum of daily profits and provides a valid partition of the problems into `k` days.  The total complexity is mainly O(N log N) from the sort. Looks good! I just need to code it up.\n",
    "response": "The problem asks us to partition `n` problems, given by their difficulties `a_1, a_2, ..., a_n`, into exactly `k` contiguous sequences (days). Each day's profit is the maximum difficulty among problems solved on that day. Our goal is to maximize the total profit, which is the sum of daily profits. We need to output the maximum total profit and the number of problems solved each day.\n\n**Core Idea for Maximizing Profit:**\n\nTo maximize the sum of `k` maximums, we should choose the `k` largest problem difficulties from the entire list `a`. Let these `k` largest difficulties be `M_1, M_2, ..., M_k`. The maximum possible total profit will be `sum(M_i)`.\n\nWhy is this true?\nSuppose we have a distribution of problems into `k` days, and the maximum difficulties for these days are `P_1, P_2, ..., P_k`. The total profit is `sum(P_i)`. Each `P_j` must be one of the `a_i` values. If any `P_j` is not among the `k` largest difficulties (`M_1, ..., M_k`), it means there's at least one `M_x` (from the `k` largest) that is not serving as a maximum for any day. In this case, we could potentially re-arrange the problems to make `M_x` a maximum for some day, possibly increasing the total profit. The optimal strategy is to ensure that each of the `k` largest difficulties in the entire list `a` becomes the maximum for one of the `k` days.\n\n**Algorithm:**\n\n1.  **Identify the `k` largest difficulties:**\n    *   Create pairs `(difficulty, original_index)` for all problems.\n    *   Sort these pairs in descending order based on difficulty.\n    *   Select the top `k` pairs from this sorted list. These are the `k` problems that will contribute to the maximum total profit.\n    *   The sum of their difficulties is the maximum total profit.\n\n2.  **Determine day lengths (partitioning):**\n    *   Get the original indices of these `k` selected problems.\n    *   Sort these `k` indices in ascending order. Let them be `idx_1 < idx_2 < ... < idx_k`. These indices represent the positions of the `k` problems that will be the maximums for their respective days.\n    *   We need to divide the `n` problems into `k` contiguous segments. We can define the first `k-1` segments by making `idx_1, idx_2, ..., idx_{k-1}` the *end points* of the first `k-1` days. The last day will then take all remaining problems up to `n-1`.\n\n    More formally:\n    *   Day 1 will cover problems from index `0` to `idx_1`. Its length `t_1 = idx_1 - 0 + 1`.\n    *   Day 2 will cover problems from index `idx_1 + 1` to `idx_2`. Its length `t_2 = idx_2 - (idx_1 + 1) + 1 = idx_2 - idx_1`.\n    *   ...\n    *   Day `j` (for `1 < j < k`) will cover problems from index `idx_{j-1} + 1` to `idx_j`. Its length `t_j = idx_j - idx_{j-1}`.\n    *   The last day (Day `k`) will cover problems from index `idx_{k-1} + 1` to `n-1`. Its length `t_k = n - (idx_{k-1} + 1)`.\n\n    This partitioning ensures that:\n    *   Each of the `k` selected problems `a[idx_j]` falls into exactly one day's segment.\n    *   Since `a[idx_j]` is one of the `k` largest problems overall, and we've structured the segments such that `a[idx_j]` is included, `a[idx_j]` will be the maximum for its respective day (because any other problem `a_p` in the same segment must have `a_p <= a[idx_j]`, otherwise `a_p` would have been one of the `k` largest problems and potentially chosen instead).\n    *   The sum of all `t_j` will be `n`.\n\n**Example Walkthrough (from problem statement):**\n`n = 8, k = 3, a = [5, 4, 2, 6, 5, 1, 9, 2]`\n\n1.  **Pairs (difficulty, index):**\n    `[(5,0), (4,1), (2,2), (6,3), (5,4), (1,5), (9,6), (2,7)]`\n\n2.  **Sorted by difficulty (descending):**\n    `[(9,6), (6,3), (5,0), (5,4), (4,1), (2,2), (2,7), (1,5)]`\n\n3.  **Top `k=3` problems:**\n    `[(9,6), (6,3), (5,0)]` (Note: if there are multiple problems with the same difficulty, any choice among them is fine, as Python's sort is stable, it will pick the one with the smallest original index first if difficulties are equal and original order is preserved).\n\n4.  **Maximum total profit:** `9 + 6 + 5 = 20`.\n\n5.  **Original indices of top 3 problems:** `[6, 3, 0]`\n    **Sorted indices:** `cut_indices = [0, 3, 6]`\n\n6.  **Calculate day lengths:**\n    *   `current_start_idx = 0`\n    *   For `i = 0` (first `k-1` days, so `i` goes from `0` to `k-2 = 1`):\n        *   `i = 0`: `cut_indices[0] = 0`. Length `t_1 = 0 - 0 + 1 = 1`. `t_lengths = [1]`. `current_start_idx = 0 + 1 = 1`.\n        *   `i = 1`: `cut_indices[1] = 3`. Length `t_2 = 3 - 1 + 1 = 3`. `t_lengths = [1, 3]`. `current_start_idx = 3 + 1 = 4`.\n    *   After loop, `current_start_idx = 4`.\n    *   Last day length (`t_k`): `n - current_start_idx = 8 - 4 = 4`.\n    *   `t_lengths = [1, 3, 4]`.\n\n7.  **Output:**\n    `20`\n    `1 3 4`\n\nThis output is valid and achieves the maximum profit, even though it differs from the example's `3 2 3`. The problem statement allows any valid answer.\n\n**Complexity:**\n*   Time: `O(N log N)` due to sorting the problems. `N` is up to 2000, so `2000 * log(2000)` is efficient enough.\n*   Space: `O(N)` for storing problems with indices.\n\n```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Step 1: Create a list of (difficulty, original_index) tuples\n    problems_with_indices = []\n    for i in range(n):\n        problems_with_indices.append((a[i], i))\n\n    # Step 2: Sort problems by difficulty in descending order.\n    # If difficulties are equal, the original index order doesn't affect the sum,\n    # and Python's sort is stable, preserving relative order for ties.\n    problems_with_indices.sort(key=lambda x: x[0], reverse=True)\n\n    # Step 3: Select the top K problems\n    top_k_problems = problems_with_indices[:k]\n\n    # Step 4: Calculate the maximum total profit\n    max_total_profit = sum(p[0] for p in top_k_problems)\n    \n    # Step 5: Extract the original indices of these top K problems and sort them.\n    # These sorted indices will serve as the end points for the first k-1 days.\n    cut_indices = sorted([p[1] for p in top_k_problems])\n\n    # Step 6: Determine the lengths of problems for each day\n    t_lengths = []\n    current_start_idx = 0\n    \n    # The first k-1 days end at the first k-1 sorted cut_indices\n    for i in range(k - 1):\n        # The current segment ends at cut_indices[i]\n        # Length is (end_idx - start_idx + 1)\n        length = cut_indices[i] - current_start_idx + 1\n        t_lengths.append(length)\n        # The next segment starts right after this one ends\n        current_start_idx = cut_indices[i] + 1\n    \n    # The last day takes all remaining problems\n    # It starts at current_start_idx and ends at n-1\n    last_day_length = n - current_start_idx\n    t_lengths.append(last_day_length)\n\n    # Step 7: Print the results\n    sys.stdout.write(str(max_total_profit) + \"\\n\")\n    sys.stdout.write(\" \".join(map(str, t_lengths)) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Step 1: Create a list of (difficulty, original_index) tuples\n    problems_with_indices = []\n    for i in range(n):\n        problems_with_indices.append((a[i], i))\n\n    # Step 2: Sort problems by difficulty in descending order.\n    # If difficulties are equal, the original index order doesn't affect the sum,\n    # and Python's sort is stable, preserving relative order for ties.\n    problems_with_indices.sort(key=lambda x: x[0], reverse=True)\n\n    # Step 3: Select the top K problems\n    top_k_problems = problems_with_indices[:k]\n\n    # Step 4: Calculate the maximum total profit\n    max_total_profit = sum(p[0] for p in top_k_problems)\n    \n    # Step 5: Extract the original indices of these top K problems and sort them.\n    # These sorted indices will serve as the end points for the first k-1 days.\n    cut_indices = sorted([p[1] for p in top_k_problems])\n\n    # Step 6: Determine the lengths of problems for each day\n    t_lengths = []\n    current_start_idx = 0\n    \n    # The first k-1 days end at the first k-1 sorted cut_indices\n    for i in range(k - 1):\n        # The current segment ends at cut_indices[i]\n        # Length is (end_idx - start_idx + 1)\n        length = cut_indices[i] - current_start_idx + 1\n        t_lengths.append(length)\n        # The next segment starts right after this one ends\n        current_start_idx = cut_indices[i] + 1\n    \n    # The last day takes all remaining problems\n    # It starts at current_start_idx and ends at n-1\n    last_day_length = n - current_start_idx\n    t_lengths.append(last_day_length)\n\n    # Step 7: Print the results\n    sys.stdout.write(str(max_total_profit) + \"\\n\")\n    sys.stdout.write(\" \".join(map(str, t_lengths)) + \"\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 963,
        "completion_token_count": 2258,
        "thoughts_token_count": 7912
    }
}