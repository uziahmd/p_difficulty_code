{
    "start": 1758284881.5981944,
    "end": 1758284896.6902227,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Thinking Through the Neko Does Maths Problem**\n\nOkay, I'm tackling this \"Neko does Maths\" problem. The core of it is finding this non-negative integer 'k' that minimizes the least common multiple of (a+k) and (b+k).  The tiebreaker is that if there are multiple 'k's that minimize the LCM, I'm choosing the smallest one.\n\nFirst, I'm thinking, let's substitute a+k with 'x' and b+k with 'y'.  Now the problem is to minimize `lcm(x, y)`.  I know that `lcm(x, y) = (x * y) / gcd(x, y)`.  Also, the difference between 'x' and 'y' is simply b - a.  I'll call that 'd'.\n\nNow, let's consider a base case. If 'a' and 'b' are equal, then their difference 'd' is zero.  In this case, any 'k' will result in the same LCM. To minimize, I'll take `k = 0`. Easy peasy.\n\nMoving on to the more interesting case, where 'a' is less than 'b' (I can easily swap them if necessary). Now, the greatest common divisor, `g`, of (a+k) and (b+k) has to be a divisor of 'd'.  This is key! The proof is that `g` divides the difference between them, which is 'd'.\n\nSo, for each divisor, 'g', of 'd', I need to find the smallest 'k' that makes `gcd(a+k, b+k) = g`.  I can represent `a+k` as a multiple of `g`, so `a+k = m*g`. The smallest possible value of 'm' is the ceiling of `a/g`, to ensure that `m*g` is at least as big as 'a'. I call that `m_0`.\n\nSo, `k` becomes `k_0 = m_0*g - a`. Now, I have to check if this `k_0` is a valid solution. I know `gcd(a+k_0, b+k_0)` has to equal `g`.  This simplifies to checking if `gcd(m_0, d/g)` is equal to 1. If it is, then `k_0` is a possible solution and I should compare its LCM with the others.\n\nThe final strategy is going to be: \n1.  Iterate through the divisors, 'g', of 'd'.\n2.  For each 'g', calculate `m_0` and `k_0`.\n3.  Check if `gcd(m_0, d/g)` is 1. If it is, store this possible value of `k_0` with the corresponding `lcm`.\n4.  Finally, select the `k` that corresponds to the smallest `lcm`. If there are multiple `k` values, I'll choose the smallest.\n",
    "response": "```python\nimport sys\nimport math\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef solve():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a == b:\n        print(0)\n        return\n\n    # Ensure a < b\n    if a > b:\n        a, b = b, a\n\n    diff = b - a\n\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Iterate through divisors of diff\n    # We only need to check up to sqrt(diff)\n    divisors = set()\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors.add(i)\n            divisors.add(diff // i)\n\n    for g in sorted(list(divisors)): # Sorting ensures smaller k is found first for same LCM\n        # We need a+k to be a multiple of g.\n        # a+k = m*g for some integer m.\n        # k = m*g - a.\n        # Since k >= 0, m*g >= a.\n        # Smallest m is ceil(a/g).\n        # In integer arithmetic: m = (a + g - 1) // g\n        m = (a + g - 1) // g\n        k = m * g - a\n\n        # Now calculate the LCM for this k\n        # x = a+k = m*g\n        # y = b+k = (a+k) + diff = m*g + diff\n        # lcm(x, y) = (x * y) / gcd(x, y)\n        # We know gcd(x, y) must divide diff.\n        # If we choose k such that gcd(a+k, b+k) = g, then\n        # lcm(a+k, b+k) = (a+k) * (b+k) / g\n        # This is (m*g) * (m*g + diff) / g\n        # = m * (m*g + diff)\n        # But this is only if gcd(a+k, b+k) is actually g.\n        # Let's compute lcm(a+k, b+k) directly and check.\n        \n        current_x = a + k\n        current_y = b + k\n        current_gcd = gcd(current_x, current_y)\n        \n        # Check if current_gcd is indeed g. If not, this g is not the gcd.\n        # This is implicitly handled by the LCM calculation.\n        # We are iterating over possible values of gcd(a+k, b+k).\n        # For a fixed g (divisor of diff), we find the smallest k such that a+k is a multiple of g.\n        # Then we calculate the LCM.\n        # The actual gcd(a+k, b+k) might be a multiple of g.\n        # Example: a=6, b=10, diff=4. g=2.\n        # m = (6+2-1)//2 = 7//2 = 3.\n        # k = 3*2 - 6 = 0.\n        # a+k = 6, b+k = 10. gcd(6,10)=2. lcm(6,10)=30.\n        #\n        # Example: a=6, b=10, diff=4. g=4.\n        # m = (6+4-1)//4 = 9//4 = 2.\n        # k = 2*4 - 6 = 2.\n        # a+k = 8, b+k = 12. gcd(8,12)=4. lcm(8,12)=24.\n        #\n        # The logic is: for each divisor `g` of `diff`, we are trying to make `gcd(a+k, b+k)` equal to `g`.\n        # We find the smallest `k` such that `a+k` is a multiple of `g`.\n        # This `k` is `m*g - a` where `m = ceil(a/g)`.\n        # Then we calculate `lcm(a+k, b+k)` using this `k`.\n        # We compare this LCM with the current minimum.\n        \n        current_lcm = (current_x // current_gcd) * current_y\n\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            best_k = k\n        elif current_lcm == min_lcm:\n            # If LCMs are equal, choose the smallest k\n            best_k = min(best_k, k)\n\n    print(best_k)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef solve():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a == b:\n        print(0)\n        return\n\n    # Ensure a < b\n    if a > b:\n        a, b = b, a\n\n    diff = b - a\n\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Iterate through divisors of diff\n    # We only need to check up to sqrt(diff)\n    divisors = set()\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors.add(i)\n            divisors.add(diff // i)\n\n    for g in sorted(list(divisors)): # Sorting ensures smaller k is found first for same LCM\n        # We need a+k to be a multiple of g.\n        # a+k = m*g for some integer m.\n        # k = m*g - a.\n        # Since k >= 0, m*g >= a.\n        # Smallest m is ceil(a/g).\n        # In integer arithmetic: m = (a + g - 1) // g\n        m = (a + g - 1) // g\n        k = m * g - a\n\n        # Now calculate the LCM for this k\n        # x = a+k = m*g\n        # y = b+k = (a+k) + diff = m*g + diff\n        # lcm(x, y) = (x * y) / gcd(x, y)\n        # We know gcd(x, y) must divide diff.\n        # If we choose k such that gcd(a+k, b+k) = g, then\n        # lcm(a+k, b+k) = (a+k) * (b+k) / g\n        # This is (m*g) * (m*g + diff) / g\n        # = m * (m*g + diff)\n        # But this is only if gcd(a+k, b+k) is actually g.\n        # Let's compute lcm(a+k, b+k) directly and check.\n        \n        current_x = a + k\n        current_y = b + k\n        current_gcd = gcd(current_x, current_y)\n        \n        # Check if current_gcd is indeed g. If not, this g is not the gcd.\n        # This is implicitly handled by the LCM calculation.\n        # We are iterating over possible values of gcd(a+k, b+k).\n        # For a fixed g (divisor of diff), we find the smallest k such that a+k is a multiple of g.\n        # Then we calculate the LCM.\n        # The actual gcd(a+k, b+k) might be a multiple of g.\n        # Example: a=6, b=10, diff=4. g=2.\n        # m = (6+2-1)//2 = 7//2 = 3.\n        # k = 3*2 - 6 = 0.\n        # a+k = 6, b+k = 10. gcd(6,10)=2. lcm(6,10)=30.\n        #\n        # Example: a=6, b=10, diff=4. g=4.\n        # m = (6+4-1)//4 = 9//4 = 2.\n        # k = 2*4 - 6 = 2.\n        # a+k = 8, b+k = 12. gcd(8,12)=4. lcm(8,12)=24.\n        #\n        # The logic is: for each divisor `g` of `diff`, we are trying to make `gcd(a+k, b+k)` equal to `g`.\n        # We find the smallest `k` such that `a+k` is a multiple of `g`.\n        # This `k` is `m*g - a` where `m = ceil(a/g)`.\n        # Then we calculate `lcm(a+k, b+k)` using this `k`.\n        # We compare this LCM with the current minimum.\n        \n        current_lcm = (current_x // current_gcd) * current_y\n\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            best_k = k\n        elif current_lcm == min_lcm:\n            # If LCMs are equal, choose the smallest k\n            best_k = min(best_k, k)\n\n    print(best_k)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 422,
        "completion_token_count": 1124,
        "thoughts_token_count": 825
    }
}