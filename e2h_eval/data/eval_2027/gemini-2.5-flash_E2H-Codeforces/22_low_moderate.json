{
    "start": 1758284867.3040533,
    "end": 1758284878.487443,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Tackling the \"Marks\" Problem: My Plan**\n\nOkay, so I've got this \"Marks\" problem to solve, a classic competitive programming scenario. Let's break down my approach, drawing on my expertise.\n\nFirst, I need to get a clear picture of the problem. We have `n` students and `m` subjects, with marks from 1 to 9. A student is \"best\" in a subject if no one else scores higher. A \"successful\" student is best in at least one subject. The goal? Count the successful students. Simple enough.\n\nThe input format is straightforward: `n` and `m` on the first line, followed by `n` lines, each representing a student's marks across `m` subjects. The output is a single integer: the number of successful students. The constraints, `1 <= n, m <= 100`, suggest a brute-force approach should be viable.\n\nThinking about the example, it becomes crystal clear. We need to process the data subject by subject. For each subject, I'll find the maximum mark and identify all the students who achieved it. If a student is the best in *any* subject, they're successful.\n\nHere's how I envision my Python script going:\n\n1.  **Input:** I'll read `n` and `m` as integers. Then, I'll parse the gradebook, using a list of lists. Converting the mark characters to integers makes sense for easier comparison. `gradebook[student_idx][subject_idx]` is a neat way to store the marks.\n\n2.  **Best Student Identification:** The core of the solution is iterating through each subject. For each subject index `j`, I'll find the maximum mark (`max_mark_j`).  I will then use a boolean array, `is_successful`, to keep track of who is a best student.\n\n3.  **Success Determination:** As I compare marks within each subject, if a student's mark matches the maximum, I'll set `is_successful[student_idx]` to `True`.\n\n4.  **Counting:** Finally, I'll iterate through the `is_successful` array and count the `True` values. That count is my answer.\n\nThis seems efficient enough for these constraints. I'm confident I can whip up a concise Python solution based on this algorithm. Time to code!\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        line = sys.stdin.readline().strip()\n        gradebook.append([int(char) for char in line])\n\n    # A boolean array to keep track of successful students.\n    # Initially, no student is marked as successful.\n    is_successful = [False] * n\n\n    # Iterate through each subject to find the best students for that subject.\n    for j in range(m):  # j is the subject index\n        max_mark_for_subject = 0\n        \n        # Find the maximum mark for the current subject\n        for i in range(n):  # i is the student index\n            if gradebook[i][j] > max_mark_for_subject:\n                max_mark_for_subject = gradebook[i][j]\n        \n        # Mark students who achieved the maximum mark for this subject as successful\n        for i in range(n):\n            if gradebook[i][j] == max_mark_for_subject:\n                is_successful[i] = True\n    \n    # Count the number of successful students\n    successful_students_count = 0\n    for status in is_successful:\n        if status:\n            successful_students_count += 1\n            \n    sys.stdout.write(str(successful_students_count) + '\\n')\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        line = sys.stdin.readline().strip()\n        gradebook.append([int(char) for char in line])\n\n    # A boolean array to keep track of successful students.\n    # Initially, no student is marked as successful.\n    is_successful = [False] * n\n\n    # Iterate through each subject to find the best students for that subject.\n    for j in range(m):  # j is the subject index\n        max_mark_for_subject = 0\n        \n        # Find the maximum mark for the current subject\n        for i in range(n):  # i is the student index\n            if gradebook[i][j] > max_mark_for_subject:\n                max_mark_for_subject = gradebook[i][j]\n        \n        # Mark students who achieved the maximum mark for this subject as successful\n        for i in range(n):\n            if gradebook[i][j] == max_mark_for_subject:\n                is_successful[i] = True\n    \n    # Count the number of successful students\n    successful_students_count = 0\n    for status in is_successful:\n        if status:\n            successful_students_count += 1\n            \n    sys.stdout.write(str(successful_students_count) + '\\n')\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 468,
        "completion_token_count": 372,
        "thoughts_token_count": 832
    }
}