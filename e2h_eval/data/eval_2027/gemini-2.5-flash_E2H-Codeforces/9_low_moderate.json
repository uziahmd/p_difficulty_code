{
    "start": 1758009584.2642295,
    "end": 1758009613.3828804,
    "start-formatted": "2025-09-16 16:59 KST",
    "end-formatted": "2025-09-16 17:00 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Thinking Through the Souvenir Selling Problem**\n\nOkay, so I've got this \"Selling Souvenirs\" problem, which is basically a variation of the knapsack problem. We're given `n` souvenirs, each with a weight `wi` and a cost `ci`. The goal is to maximize the total cost while keeping the total weight under `m`. Standard knapsack is a no-go here, complexity is too high.\n\nThe constraints are: `1 <= n <= 100000`, `1 <= m <= 300000`, `1 <= wi <= 3`, and `1 <= ci <= 10^9`. My initial reaction is that with those values, a straightforward dynamic programming solution would be incredibly slow. However, the catch is the small `wi` constraint - it has a value between 1 and 3. I am seeing an opportunity.\n\nThe weights being small is a huge hint. It's a special case! I can group the souvenirs by their weight: `items_w1`, `items_w2`, and `items_w3`. I think the best strategy is to take the most expensive ones from each group first. To do this, I'll sort `items_w1`, `items_w2`, and `items_w3` in descending order of cost.\n\nNow I've got to figure out the optimal number of items to take from each weight group: `k1` from `items_w1`, `k2` from `items_w2`, and `k3` from `items_w3`. The conditions are: `k1 * 1 + k2 * 2 + k3 * 3 <= m`, and I need to maximize the sum of costs for these selections. I still need to somehow pick `k1`, `k2`, and `k3` to maximize the total cost.\n\nThis is still a knapsack problem of sorts, but now with only three item types. I can't just brute force all combinations of `k1`, `k2`, and `k3` because `m` could be up to 300000. It is starting to feel like a \"generate and test\" approach is going to be helpful. \n\nI know the maximum possible number of items in each list. Let's call them `max_k1`, `max_k2`, and `max_k3`. Since `n` is `100000`, the sum is the total number of items, which means that the sum is equal to `n`. It looks like it could be a nested loop structure.\n\nMaybe I can iterate through the possible values of `k3` from `0` up to `min(max_k3, m/3)`. Then, for each `k3`:\n1.  Calculate the weight used: `current_weight = k3 * 3`.\n2.  Calculate the current cost: `current_cost = sum(items_w3[0:k3])`.\n3.  Calculate the remaining capacity: `remaining_m = m - current_weight`.\n\nSo, the remaining problem is how to optimally use the `remaining_m` capacity using items of weights 1 and 2. It appears that I could use dynamic programming from the remaining capacity. I think that is the right direction!\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_w1 = []\n    items_w2 = []\n    items_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items_w1.append(c)\n        elif w == 2:\n            items_w2.append(c)\n        else: # w == 3\n            items_w3.append(c)\n\n    items_w1.sort(reverse=True)\n    items_w2.sort(reverse=True)\n    items_w3.sort(reverse=True)\n\n    # Calculate prefix sums for quick sum queries\n    # P_w[i] = sum of costs of the first i items of weight w\n    prefix_w1 = [0] * (len(items_w1) + 1)\n    for i in range(len(items_w1)):\n        prefix_w1[i+1] = prefix_w1[i] + items_w1[i]\n\n    prefix_w2 = [0] * (len(items_w2) + 1)\n    for i in range(len(items_w2)):\n        prefix_w2[i+1] = prefix_w2[i] + items_w2[i]\n\n    prefix_w3 = [0] * (len(items_w3) + 1)\n    for i in range(len(items_w3)):\n        prefix_w3[i+1] = prefix_w3[i] + items_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate over the number of items of weight 3 (k3)\n    # k3 can range from 0 to min(len(items_w3), m // 3)\n    for k3 in range(len(items_w3) + 1):\n        current_w3_weight = k3 * 3\n        if current_w3_weight > m:\n            break\n        \n        current_w3_cost = prefix_w3[k3]\n        remaining_m = m - current_w3_weight\n\n        # Now we need to fill remaining_m capacity with items of weight 1 and 2.\n        # This is a 2-variable knapsack problem.\n        # Iterate over the number of items of weight 2 (k2)\n        # k2 can range from 0 to min(len(items_w2), remaining_m // 2)\n        \n        # We can optimize the inner loop.\n        # For a fixed k3, we want to maximize current_w3_cost + cost_from_w1_w2.\n        # The cost_from_w1_w2 is found by iterating k2 and greedily taking w1 items.\n        # This can be done by using a sliding window or two pointers approach.\n\n        # Let's use two pointers for k1 and k2 for the remaining capacity.\n        # We want to maximize prefix_w2[k2] + prefix_w1[k1]\n        # such that 2*k2 + 1*k1 <= remaining_m\n        # Iterate k2 from 0 up to len(items_w2)\n        # For each k2, the maximum k1 is (remaining_m - 2*k2).\n        # We take min(len(items_w1), (remaining_m - 2*k2)) items of weight 1.\n\n        current_w1_cost = 0\n        k1 = min(len(items_w1), remaining_m) # Max possible k1 if only w1 items are used\n        \n        # This is a standard approach for 2-item knapsack: iterate one, find max for other.\n        # Iterate k2, and for each k2, find the maximum k1 that fits.\n        for k2 in range(len(items_w2) + 1):\n            current_w2_weight = k2 * 2\n            if current_w2_weight > remaining_m:\n                break\n            \n            current_w2_cost = prefix_w2[k2]\n            \n            # Remaining capacity for items of weight 1\n            remaining_m_for_w1 = remaining_m - current_w2_weight\n            \n            # Number of items of weight 1 we can take\n            # This is simply the first `remaining_m_for_w1` items (since they are sorted by cost)\n            # Make sure we don't exceed the available count of items_w1\n            k1_taken = min(len(items_w1), remaining_m_for_w1)\n            \n            current_w1_cost = prefix_w1[k1_taken]\n            \n            max_total_cost = max(max_total_cost, current_w3_cost + current_w2_cost + current_w1_cost)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_w1 = []\n    items_w2 = []\n    items_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items_w1.append(c)\n        elif w == 2:\n            items_w2.append(c)\n        else: # w == 3\n            items_w3.append(c)\n\n    items_w1.sort(reverse=True)\n    items_w2.sort(reverse=True)\n    items_w3.sort(reverse=True)\n\n    # Calculate prefix sums for quick sum queries\n    # P_w[i] = sum of costs of the first i items of weight w\n    prefix_w1 = [0] * (len(items_w1) + 1)\n    for i in range(len(items_w1)):\n        prefix_w1[i+1] = prefix_w1[i] + items_w1[i]\n\n    prefix_w2 = [0] * (len(items_w2) + 1)\n    for i in range(len(items_w2)):\n        prefix_w2[i+1] = prefix_w2[i] + items_w2[i]\n\n    prefix_w3 = [0] * (len(items_w3) + 1)\n    for i in range(len(items_w3)):\n        prefix_w3[i+1] = prefix_w3[i] + items_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate over the number of items of weight 3 (k3)\n    # k3 can range from 0 to min(len(items_w3), m // 3)\n    for k3 in range(len(items_w3) + 1):\n        current_w3_weight = k3 * 3\n        if current_w3_weight > m:\n            break\n        \n        current_w3_cost = prefix_w3[k3]\n        remaining_m = m - current_w3_weight\n\n        # Now we need to fill remaining_m capacity with items of weight 1 and 2.\n        # This is a 2-variable knapsack problem.\n        # Iterate over the number of items of weight 2 (k2)\n        # k2 can range from 0 to min(len(items_w2), remaining_m // 2)\n        \n        # We can optimize the inner loop.\n        # For a fixed k3, we want to maximize current_w3_cost + cost_from_w1_w2.\n        # The cost_from_w1_w2 is found by iterating k2 and greedily taking w1 items.\n        # This can be done by using a sliding window or two pointers approach.\n\n        # Let's use two pointers for k1 and k2 for the remaining capacity.\n        # We want to maximize prefix_w2[k2] + prefix_w1[k1]\n        # such that 2*k2 + 1*k1 <= remaining_m\n        # Iterate k2 from 0 up to len(items_w2)\n        # For each k2, the maximum k1 is (remaining_m - 2*k2).\n        # We take min(len(items_w1), (remaining_m - 2*k2)) items of weight 1.\n\n        current_w1_cost = 0\n        k1 = min(len(items_w1), remaining_m) # Max possible k1 if only w1 items are used\n        \n        # This is a standard approach for 2-item knapsack: iterate one, find max for other.\n        # Iterate k2, and for each k2, find the maximum k1 that fits.\n        for k2 in range(len(items_w2) + 1):\n            current_w2_weight = k2 * 2\n            if current_w2_weight > remaining_m:\n                break\n            \n            current_w2_cost = prefix_w2[k2]\n            \n            # Remaining capacity for items of weight 1\n            remaining_m_for_w1 = remaining_m - current_w2_weight\n            \n            # Number of items of weight 1 we can take\n            # This is simply the first `remaining_m_for_w1` items (since they are sorted by cost)\n            # Make sure we don't exceed the available count of items_w1\n            k1_taken = min(len(items_w1), remaining_m_for_w1)\n            \n            current_w1_cost = prefix_w1[k1_taken]\n            \n            max_total_cost = max(max_total_cost, current_w3_cost + current_w2_cost + current_w1_cost)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 497,
        "completion_token_count": 1205,
        "thoughts_token_count": 798
    }
}