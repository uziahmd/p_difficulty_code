{
    "start": 1758293735.424748,
    "end": 1758293813.1737862,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:56 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndef solve():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    adj = [[] for _ in range(n)]\n    edges_set = set()\n    for i in range(1, m + 1):\n        u, v = map(int, lines[i].split())\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        adj[v].append(u)\n        edges_set.add(tuple(sorted((u, v))))\n\n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n\n    def dfs_bipartite(u, c):\n        nonlocal is_bipartite, has_odd_cycle\n        color[u] = c\n        for v in adj[u]:\n            if color[v] == -1:\n                dfs_bipartite(v, 1 - c)\n                if not is_bipartite:\n                    return\n            elif color[v] == color[u]:\n                is_bipartite = False\n                has_odd_cycle = True\n                return\n\n    for i in range(n):\n        if color[i] == -1:\n            dfs_bipartite(i, 0)\n            if has_odd_cycle:\n                break\n\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # Case 1: t = 1\n    # If the graph is bipartite, we need to add an edge between two vertices of the same color\n    # in the same connected component.\n    # Count vertices in each partition for each component.\n    \n    component_colors = []\n    visited_comp = [False] * n\n    \n    def get_component_partitions(start_node):\n        q = [start_node]\n        visited_comp[start_node] = True\n        \n        comp_color = [-1] * n\n        comp_color[start_node] = 0\n        \n        count_0 = 1\n        count_1 = 0\n        \n        head = 0\n        while head < len(q):\n            u = q[head]\n            head += 1\n            \n            for v in adj[u]:\n                if not visited_comp[v]:\n                    visited_comp[v] = True\n                    comp_color[v] = 1 - comp_color[u]\n                    q.append(v)\n                    if comp_color[v] == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                elif comp_color[v] == comp_color[u]:\n                    # This should not happen if the graph is bipartite\n                    # but including for robustness.\n                    pass\n        return count_0, count_1\n\n    total_ways_t1 = 0\n    for i in range(n):\n        if not visited_comp[i]:\n            c0, c1 = get_component_partitions(i)\n            total_ways_t1 += c0 * (c0 - 1) // 2\n            total_ways_t1 += c1 * (c1 - 1) // 2\n\n    if total_ways_t1 > 0:\n        print(f\"1 {total_ways_t1}\")\n        return\n\n    # Case 2: t = 2\n    # We need to add two edges (u, v) and (v, w) such that u, v, w are distinct\n    # and form an odd cycle.\n    # This means connecting two components or connecting two parts of the same component\n    # to create an odd cycle.\n    # The simplest way to form an odd cycle with 2 added edges is to pick two vertices u, v\n    # from different components, and connect them to a third vertex x.\n    # For example, (u, x) and (v, x).\n    # If u and v are in different components, and x is in a third component, this forms a cycle of length 3.\n    # If u and v are in different components, and x is in one of their components (say, u's component),\n    # then x and u have some parity. x and v have some parity.\n    # An odd cycle of length > 1.\n    # Consider connecting two vertices u, v with an edge (u, v) and then connecting\n    # another vertex w to u or v. This forms an odd cycle if the path u-v-w has odd length\n    # and w is connected to u.\n\n    # Option 2.1: Add edges (u, x) and (v, x) where u, v, x are distinct.\n    # This forms a cycle of length 3.\n    # The number of ways is C(n, 3) - number of triangles already existing.\n    # No, this is not C(n,3). It's choosing 3 vertices and connecting them to form a triangle.\n    # We need to add two edges.\n    # We pick 3 distinct vertices A, B, C.\n    # If (A,B) exists, (B,C) exists, (C,A) does not exist: t=1, (C,A)\n    # If (A,B) exists, (B,C) does not exist, (C,A) does not exist: t=2, (B,C), (C,A)\n    # If (A,B) does not exist, (B,C) does not exist, (C,A) does not exist: t=3, (A,B), (B,C), (C,A)\n\n    # We are looking for t=2.\n    # An odd cycle can be formed by:\n    # 1. Path of length 2 (u-x-v) and add edge (u,v). This forms a triangle (u,x,v).\n    #    This requires u,v to be in the same component, and have the same color.\n    #    If u and v are in the same component and color[u] == color[v], then the path u-x-v has even length (2).\n    #    Adding (u,v) forms an odd cycle of length 3.\n    #    Number of such pairs (u,v) where (u,v) is not an existing edge.\n    #    For each vertex x, consider all pairs (u,v) such that (u,x) and (v,x) exist.\n    #    If color[u] == color[v], and (u,v) does not exist, then we can add (u,v).\n    #    This is handled by t=1 case. If total_ways_t1 is 0, then no such pair exists.\n\n    # The current graph is bipartite. All connected components are bipartite.\n    # So, for any two vertices u, v in the same component, if color[u] == color[v],\n    # any path between them has even length.\n    # If color[u] != color[v], any path between them has odd length.\n\n    # To form an odd cycle with 2 added edges:\n    # 1. Connect two vertices u, v from different components with an edge (u, v).\n    #    Then, connect a third vertex x to u or v such that x is in a different component\n    #    from the one it's connected to.\n    #    This is complex. Let's simplify.\n    #    We need an odd cycle of length L >= 3.\n    #    If we add two edges (a, b) and (c, d).\n    #    Consider a path P = u_1 - u_2 - ... - u_k.\n    #    If we add (u_1, u_k), it forms a cycle.\n    #    If P has odd length, then (u_1, u_k) closes an even cycle.\n    #    If P has even length, then (u_1, u_k) closes an odd cycle.\n    #    Since the graph is bipartite, any path between u_1 and u_k has even length if color[u_1] == color[u_k].\n    #    Any path between u_1 and u_k has odd length if color[u_1] != color[u_k].\n    #    So, to form an odd cycle by adding one edge (u_1, u_k), we need color[u_1] == color[u_k].\n    #    This is exactly what t=1 covers. Since total_ways_t1 is 0, no such pair (u_1, u_k) exists.\n    #    This means all pairs (u,v) with color[u]==color[v] that are in the same component\n    #    are already connected by an edge. This is not true. It means there are no such pairs (u,v)\n    #    that are NOT connected by an edge. So, if u,v are in same component, color[u]==color[v],\n    #    then (u,v) must be an existing edge. This implies that each partition has at most 1 vertex,\n    #    or it's a complete bipartite graph where adding edge between same color vertices is impossible.\n    #    This means that for every component, min(c0, c1) <= 1.\n    #    If a component has (c0, c1) = (1, 0) or (0, 1), then c0*(c0-1)/2 + c1*(c1-1)/2 = 0.\n    #    If a component has (c0, c1) = (1, 1), then 0.\n    #    If a component has (c0, c1) = (2, 0), then 1 way.\n    #    So, if total_ways_t1 = 0, then for all components, (c0, c1) must be such that c0*(c0-1)/2 + c1*(c1-1)/2 = 0.\n    #    This means c0 <= 1 and c1 <= 1 for all components.\n    #    So, each component is either a single vertex or a single edge.\n    #    If a component is a single vertex, (1,0) or (0,1).\n    #    If a component is a single edge, (1,1). e.g., 1-2. color[1]=0, color[2]=1. c0=1, c1=1.\n    #    In this scenario, total_ways_t1 would indeed be 0.\n    #    This means the graph is a collection of disjoint edges and isolated vertices.\n    #    If n=3, m=0, total_ways_t1 = 0. Components: (1,0), (1,0), (1,0).\n    #    If n=4, m=2, edges (1,2), (3,4). total_ways_t1 = 0. Components: (1,1), (1,1).\n    #    In this case, all existing edges connect vertices of different colors.\n\n    # So, if total_ways_t1 is 0, it means all connected components are such that\n    # for any two vertices u, v in the same partition (same color), they are already connected by an edge.\n    # Or, there is at most one vertex in each partition of any component.\n    # This implies that each connected component is either an isolated vertex or an edge.\n    # Example: n=3, m=0. Components: {0}, {1}, {2}. All (1,0) partitions. total_ways_t1 = 0.\n    # Example: n=4, m=2, edges (0,1), (2,3). Components: {0,1}, {2,3}. Partitions (1,1), (1,1). total_ways_t1 = 0.\n\n    # Let's re-evaluate t=2.\n    # We need to add two edges (u,v) and (x,y) to form an odd cycle.\n    # The simplest odd cycle is a triangle.\n    # To form a triangle (A,B,C) with two added edges:\n    # We need one existing edge, say (A,B), and add (B,C) and (C,A).\n    # This implies that the original graph has an edge (A,B) and no edges (B,C), (C,A).\n    # This means (A,B) is an existing edge, and we add (B,C) and (C,A).\n    # This creates a triangle. This is an odd cycle.\n    # This requires 3 distinct vertices A, B, C.\n    # Count pairs of vertices (u,v) such that (u,v) is an existing edge. Let this be 'e'.\n    # For each such edge (u,v), we need to pick a third vertex w (not u or v).\n    # We then add edges (u,w) and (v,w).\n    # We need to check if (u,w) and (v,w) are not existing edges.\n    # Number of ways = sum over existing edges (u,v) of (number of w such that (u,w) not exists AND (v,w) not exists).\n    # Total ways for t=2:\n    # Iterate over all possible choices of 3 distinct vertices (A, B, C).\n    # Number of ways to choose 3 vertices: C(n,3).\n    # For each triplet {A, B, C}:\n    #   Count existing edges among them: k.\n    #   If k=0: Need to add 3 edges ((A,B), (B,C), (C,A)). t=3.\n    #   If k=1: e.g., (A,B) exists, (B,C) and (C,A) do not. Need to add 2 edges ((B,C), (C,A)). t=2.\n    #   If k=2: e.g., (A,B) and (B,C) exist, (C,A) does not. Need to add 1 edge ((C,A)). t=1.\n    #   If k=3: e.g., (A,B), (B,C), (C,A) exist. Already a triangle. t=0.\n\n    # Since t=0 and t=1 cases are handled, we are looking for t=2.\n    # So we need to count triplets {A, B, C} with exactly one existing edge.\n    ways_t2 = 0\n    \n    # Iterate over all possible edges (u,v) in the graph.\n    # For each edge (u,v), iterate over all other vertices w (w != u, w != v).\n    # If (u,w) is not an edge and (v,w) is not an edge, then we can form a triangle (u,v,w) by adding 2 edges.\n    \n    # This counts ordered (u,v,w) where (u,v) is an edge. We need to divide by 2 later if we iterate over edges.\n    # Or simply iterate over all triplets {u,v,w}.\n    \n    # Total triplets: n * (n-1) * (n-2) / 6\n    \n    # Let's count ways for t=2 using the triplet method.\n    # A, B, C are distinct vertices.\n    # Edges: (A,B), (B,C), (C,A).\n    # Number of ways to pick 3 vertices: N_triplets = n * (n-1) * (n-2) // 6\n    \n    # We need to find triplets {A,B,C} such that exactly one of ((A,B), (B,C), (C,A)) exists.\n    # Iterate over all edges (u,v) in the graph.\n    # For each edge (u,v):\n    #   Iterate over all other vertices w (w != u, w != v).\n    #   Check if (u,w) exists and (v,w) exists.\n    #   If (u,w) exists and (v,w) does NOT exist: this is a path u-w-v, plus edge (u,v). Not a triangle.\n    #   We need to count (u,v,w) such that (u,v) exists, (u,w) does not exist, (v,w) does not exist.\n    \n    # Count how many pairs of non-adjacent vertices (x,y) are there for each vertex w.\n    # For each vertex w:\n    #   Count its degree: deg[w]\n    #   Number of vertices not adjacent to w: (n - 1 - deg[w])\n    #   Number of pairs of non-adjacent vertices to w: (n - 1 - deg[w]) * (n - 2 - deg[w]) / 2\n    \n    # This is still not quite right.\n    # Let's count number of ways to pick two non-adjacent vertices (u,v) and a third vertex w,\n    # such that (u,w) and (v,w) are existing edges.\n    # This forms a path u-w-v. If (u,v) does not exist, adding (u,v) forms a triangle.\n    # This would be a t=1 case. But we are past t=1. So (u,v) must exist.\n    \n    # Back to the definition of t=2:\n    # We need to add two edges.\n    # A cycle of odd length.\n    # Since t=1 failed, it means we cannot form an odd cycle by adding a single edge.\n    # This implies that for any two vertices u, v in the same component, if color[u] == color[v],\n    # then (u,v) must be an existing edge.\n    # This means that each partition (set of same-colored vertices) in each component has at most 1 vertex.\n    # So, each component is either an isolated vertex or an edge.\n    # Example: n=3, m=0. Components: {0}, {1}, {2}. (1,0) for each.\n    # Example: n=4, m=2, edges (0,1), (2,3). Components: {0,1}, {2,3}. (1,1) for each.\n    # In this scenario, we need to add at least 2 edges.\n    \n    # If the graph is a collection of isolated vertices and edges:\n    #   To form a triangle (A,B,C):\n    #   1. All three A,B,C are isolated vertices. Add (A,B), (B,C), (C,A). t=3.\n    #   2. Two isolated vertices A,B and one vertex C which is part of an edge (C,D).\n    #      This is not a triangle {A,B,C}.\n    #   3. One isolated vertex A, two vertices B,C forming an edge (B,C).\n    #      Add (A,B), (A,C). t=2. This forms a triangle (A,B,C).\n    #      Number of ways:\n    #      Count isolated vertices: num_isolated = n - 2 * m\n    #      Count existing edges: m\n    #      Ways to pick 1 isolated vertex and 1 existing edge: num_isolated * m\n    #      Each such choice (A, (B,C)) forms a triangle {A,B,C} by adding (A,B) and (A,C).\n    #      These two edges (A,B) and (A,C) are guaranteed not to exist because A is isolated.\n    #      Total ways_t2 = num_isolated * m.\n    #      This is a valid scenario for t=2.\n    \n    num_isolated_vertices = n - 2 * m\n    ways_t2_from_isolated_and_edge = num_isolated_vertices * m\n\n    # Option 2.2: Connecting two different components.\n    # Suppose we have two components C1 and C2.\n    # Pick u from C1, v from C2. Add (u,v).\n    # This makes a new component C1 U C2. This component is still bipartite.\n    # We need to add another edge to make it non-bipartite.\n    # This means adding an edge (x,y) where x,y are in the same partition of C1 U C2.\n    # But after adding (u,v), the colors might shift.\n    # Let's say u in C1 has color 0, v in C2 has color 0.\n    # After adding (u,v), C1 and C2 merge.\n    # The relative coloring within C1 and C2 is preserved.\n    # If u has color 0 in C1, and v has color 0 in C2.\n    # After adding (u,v), let u remain color 0. Then v must become color 1.\n    # This means all vertices in C2 that were color 0 become color 1, and vice versa.\n    # The new component is still bipartite.\n    # So, adding an edge between two components always results in a bipartite graph.\n    # We need to add a second edge to make it non-bipartite.\n    # This means adding an edge between two vertices of the same color in the new merged component.\n    # This is essentially the t=1 case for the new merged graph.\n    # This is complex. Let's stick to simple ways of forming an odd cycle with 2 edges.\n\n    # What if we connect two vertices u, v from different components, and another vertex x\n    # from a third component? Add (u,x) and (v,x). This forms a triangle (u,v,x).\n    # All three vertices are from different components.\n    # Number of ways:\n    # Count connected components.\n    # Number of vertices in each component: comp_sizes.\n    # For each vertex u, count how many other vertices v it can connect to such that (u,v) is not an edge.\n    # This is (n-1-deg[u]).\n    \n    # Consider the problem as finding a path of length L-1 and adding an edge to close it to a cycle of length L.\n    # L must be odd.\n    # If L=3, we need a path of length 2 (u-x-v) and add edge (u,v).\n    # If (u,x) and (x,v) exist, and (u,v) does not exist: t=1. This is handled.\n    # If (u,x) exists, (x,v) does not exist, (u,v) does not exist: t=2. Add (x,v) and (u,v).\n    # This forms a triangle (u,x,v).\n    # For each edge (u,x) in the graph:\n    #   For each vertex v not equal to u or x:\n    #     If (x,v) does not exist AND (u,v) does not exist:\n    #       Then we can add (x,v) and (u,v) to form a triangle (u,x,v).\n    #       This counts (u,x,v) where (u,x) is an edge.\n    #       The number of ways is sum over existing edges (u,x) of\n    #       (number of vertices v not in {u,x} such that (x,v) and (u,v) are not edges).\n    # This is exactly what num_isolated_vertices * m counts if the graph is collection of isolated vertices and edges.\n    # Let's verify this more generally.\n    # ways_t2_general = 0\n    # for u_idx in range(n):\n    #     for v_idx in range(u_idx + 1, n):\n    #         if (u_idx, v_idx) in edges_set:\n    #             # (u_idx, v_idx) is an existing edge.\n    #             # We are looking for a third vertex w_idx such that (u_idx, w_idx) and (v_idx, w_idx) are not existing edges.\n    #             # This forms a triangle {u_idx, v_idx, w_idx} by adding two edges.\n    #             for w_idx in range(n):\n    #                 if w_idx == u_idx or w_idx == v_idx:\n    #                     continue\n    #                 if (u_idx, w_idx) not in edges_set and (v_idx, w_idx) not in edges_set:\n    #                     ways_t2_general += 1\n    # This counts ordered triplets (u,v,w) where (u,v) is an edge.\n    # The set of added edges is {(u,w), (v,w)}. This is unique for {u,v,w}.\n    # So we should divide by 1.\n    # Wait, the problem says \"Two ways to add edges to the graph are considered equal if they have the same sets of added edges.\"\n    # So we need to count unique sets of 2 edges.\n    # A set of 2 edges {(a,b), (c,d)} forms an odd cycle.\n    # If we form a triangle {u,v,w} where (u,v) is an existing edge, and (u,w), (v,w) are added edges.\n    # The set of added edges is {(u,w), (v,w)}. This is unique for the triplet {u,v,w}.\n    # So the count is simply the sum.\n    \n    ways_t2_from_triangles = 0\n    for u in range(n):\n        for v in range(u + 1, n):\n            if (u, v) in edges_set:\n                for w in range(n):\n                    if w == u or w == v:\n                        continue\n                    if (u, w) not in edges_set and (v, w) not in edges_set:\n                        ways_t2_from_triangles += 1\n    \n    # This counts each triangle {u,v,w} where (u,v) is an existing edge and (u,w), (v,w) are added edges.\n    # This is one way to form an odd cycle of length 3 with 2 added edges.\n    # This is exactly the case when we have an edge and an isolated vertex.\n    # E.g., (0,1) exists. Vertex 2 is isolated. Add (0,2), (1,2).\n    # So ways_t2_from_triangles = num_isolated_vertices * m is true IF graph is just isolated vertices and edges.\n    # But what if there are larger components?\n    # Example: n=4, m=1, edge (0,1). Vertex 2, 3 are isolated.\n    # Edges_set = {(0,1)}.\n    # u=0, v=1.\n    # w=2: (0,2) not in edges_set, (1,2) not in edges_set. ways_t2_from_triangles += 1.\n    # w=3: (0,3) not in edges_set, (1,3) not in edges_set. ways_t2_from_triangles += 1.\n    # Total = 2.\n    # Using formula: num_isolated_vertices = 4 - 2*1 = 2. m = 1. Result = 2*1 = 2. It matches.\n    \n    # Example: n=4, m=2, edges (0,1), (0,2).\n    # Edges_set = {(0,1), (0,2)}.\n    # u=0, v=1:\n    #   w=2: (0,2) in edges_set. Skip.\n    #   w=3: (0,3) not in edges_set, (1,3) not in edges_set. ways_t2_from_triangles += 1.\n    # u=0, v=2:\n    #   w=1: (0,1) in edges_set. Skip.\n    #   w=3: (0,3) not in edges_set, (2,3) not in edges_set. ways_t2_from_triangles += 1.\n    # Total = 2.\n    # num_isolated_vertices = 4 - 2*2 = 0. Formula gives 0. This doesn't match.\n    # The formula num_isolated_vertices * m is only for the specific case where all components are isolated vertices or edges.\n    # The current graph is bipartite and does not have any (u,v) with color[u]==color[v] that is not an edge.\n    # This means each component is a tree or a set of trees.\n    # In a bipartite graph, a path u-x-v has even length (2) if color[u] == color[v].\n    # But if color[u] != color[v], path u-x-v has odd length (2). This is not right.\n    # Path u-x-v has length 2.\n    # If color[u] == color[v], then color[x] must be 1-color[u].\n    # Adding (u,v) forms a cycle of length 3. This is an odd cycle.\n    # This is exactly what ways_t2_from_triangles counts.\n    # Since total_ways_t1 was 0, it means there are no two vertices u,v in the same component\n    # with color[u]==color[v] such that (u,v) is not an edge.\n    # This means that if color[u]==color[v], then (u,v) is an edge. This is not true.\n    # It means if color[u]==color[v] and (u,v) is not an edge, then u,v must be in different components.\n    # This implies that all components are \"minimal\" in some sense.\n    # Each partition (color 0 or color 1) of each component has at most 1 vertex.\n    # So each component is either a single vertex or a single edge.\n    # If a component is a single vertex, say {0}, then color[0]=0.\n    # If a component is an edge, say {0,1}, then color[0]=0, color[1]=1.\n    # So, if total_ways_t1 == 0, then the graph is a collection of disjoint edges and isolated vertices.\n    # In this specific case, ways_t2_from_triangles = num_isolated_vertices * m.\n    # Example: n=4, m=2, edges (0,1), (0,2). This graph is not a collection of disjoint edges and isolated vertices.\n    # It has a component {0,1,2}.\n    # Color[0]=0, Color[1]=1, Color[2]=1.\n    # (0,1) exists, (0,2) exists.\n    # For u=0, v=1: w=2 (0,2) exists.\n    # For u=0, v=2: w=1 (0,1) exists.\n    # For u=1, v=2: (1,2) does not exist. Color[1]=1, Color[2]=1.\n    # So (1,2) is a pair of same-colored vertices not connected by an edge.\n    # This should have been counted by total_ways_t1.\n    # Let's re-check total_ways_t1 calculation.\n    # `component_colors` stores (c0, c1) for each component.\n    # `total_ways_t1 += c0 * (c0 - 1) // 2`\n    # `total_ways_t1 += c1 * (c1 - 1) // 2`\n    # For n=4, m=2, edges (0,1), (0,2):\n    # Component {0,1,2}.\n    # dfs_bipartite from 0: color[0]=0.\n    #   neighbor 1: color[1]=1.\n    #   neighbor 2: color[2]=1.\n    # Component is {0,1,2}. color[0]=0, color[1]=1, color[2]=1.\n    # c0 = 1 (vertex 0)\n    # c1 = 2 (vertices 1, 2)\n    # total_ways_t1 += 1*(1-1)//2 = 0\n    # total_ways_t1 += 2*(2-1)//2 = 1\n    # So total_ways_t1 = 1. The edge (1,2) can be added.\n    # So the example output for n=4, m=4, (1,2), (1,3), (4,2), (4,3) is 1 2.\n    # This graph is 1-2, 1-3, 4-2, 4-3.\n    # Vertices: 0,1,2,3 (original 1,2,3,4)\n    # Edges: (0,1), (0,2), (3,1), (3,2).\n    # Component {0,1,2,3}.\n    # dfs_bipartite from 0: color[0]=0.\n    #   neighbor 1: color[1]=1.\n    #   neighbor 2: color[2]=1.\n    #   neighbor 3 (from 1): color[3]=0.\n    #   neighbor 3 (from 2): color[3]=0.\n    # Colors: color[0]=0, color[1]=1, color[2]=1, color[3]=0.\n    # c0 = 2 (vertices 0, 3)\n    # c1 = 2 (vertices 1, 2)\n    # total_ways_t1 += 2*(2-1)//2 = 1 (for {0,3})\n    # total_ways_t1 += 2*(2-1)//2 = 1 (for {1,2})\n    # Total ways = 2.\n    # The output is 1 2. This matches.\n    # So my initial logic for t=1 is correct.\n    # If total_ways_t1 > 0, we print 1 and total_ways_t1.\n\n    # If total_ways_t1 == 0, it means for any component, (c0,c1) is such that c0*(c0-1)/2 + c1*(c1-1)/2 = 0.\n    # This means c0 <= 1 and c1 <= 1 for all components.\n    # So, each connected component is either an isolated vertex or an edge.\n    # In this specific scenario, t=2 is the next possibility.\n    # The only way to form an odd cycle of length 3 (a triangle) with 2 added edges\n    # is to pick an existing edge (u,v) and an isolated vertex w.\n    # Then add edges (u,w) and (v,w).\n    # Number of ways = (number of existing edges) * (number of isolated vertices).\n    \n    # This is correct for the specific case where total_ways_t1 = 0.\n    # So, if total_ways_t1 is 0, then t=2, and ways_t2 = m * (n - 2*m).\n    # Let's verify this for example 3: n=3, m=0.\n    # dfs_bipartite for 0: color[0]=0. c0=1, c1=0.\n    # dfs_bipartite for 1: color[1]=0. c0=1, c1=0.\n    # dfs_bipartite for 2: color[2]=0. c0=1, c1=0.\n    # total_ways_t1 = 0.\n    # m = 0. n - 2*m = 3.\n    # ways_t2 = 0 * 3 = 0.\n    # So t=2 gives 0 ways. This means we need t=3.\n\n    # Case 3: t = 3\n    # If t=0, t=1, t=2 all fail, then we need to add 3 edges.\n    # The simplest odd cycle is a triangle.\n    # To form a triangle {A,B,C} with 3 added edges, it means no edges among A,B,C exist.\n    # This means we pick 3 distinct vertices A,B,C such that (A,B), (B,C), (C,A) are all non-existent.\n    # If t=2 gives 0 ways, it means m * (n - 2*m) = 0.\n    # This implies m=0 OR n - 2*m = 0.\n    # If m=0: graph has only isolated vertices.\n    #   Then we need to pick 3 isolated vertices A,B,C. Add (A,B), (B,C), (C,A).\n    #   Number of ways = C(n,3).\n    #   This is the example 3: n=3, m=0. C(3,3) = 1. Output is 3 1. This matches.\n    # If n - 2*m = 0: graph has only edges, no isolated vertices. All vertices have degree >= 1.\n    #   Also, total_ways_t1 = 0 implies all components are edges.\n    #   E.g., n=4, m=2, edges (0,1), (2,3).\n    #   num_isolated_vertices = 0. ways_t2 = 0.\n    #   We need to find 3 vertices A,B,C such that no edges among them exist.\n    #   Pick 0, 2, 3. (0,2) no, (0,3) no, (2,3) yes. This is not 3 added edges.\n    #   Pick 0, 1, 2. (0,1) yes, (0,2) no, (1,2) no. This is t=2.\n    #   So my assumption that if total_ways_t1 = 0 then ways_t2 = m * (n - 2*m) is not completely general.\n    #   It's true for the specific case where graph is collection of isolated vertices and edges.\n    #   The ways_t2_from_triangles calculation is the general one for t=2.\n    #   Let's re-run ways_t2_from_triangles for n=4, m=2, edges (0,1), (2,3).\n    #   Edges_set = {(0,1), (2,3)}.\n    #   u=0, v=1:\n    #     w=2: (0,2) not in edges_set, (1,2) not in edges_set. ways_t2_from_triangles += 1.\n    #     w=3: (0,3) not in edges_set, (1,3) not in edges_set. ways_t2_from_triangles += 1.\n    #   u=2, v=3:\n    #     w=0: (2,0) not in edges_set, (3,0) not in edges_set. ways_t2_from_triangles += 1.\n    #     w=1: (2,1) not in edges_set, (3,1) not in edges_set. ways_t2_from_triangles += 1.\n    #   Total = 4.\n    #   So for n=4, m=2, edges (0,1), (2,3), the output should be 2 4.\n    #   (Add (0,2), (1,2) for triangle {0,1,2})\n    #   (Add (0,3), (1,3) for triangle {0,1,3})\n    #   (Add (2,0), (3,0) for triangle {2,3,0})\n    #   (Add (2,1), (3,1) for triangle {2,3,1})\n\n    # Let's stick to the general calculation of ways_t2_from_triangles.\n    # This covers all cases where t=2 forms a triangle.\n    # If total_ways_t1 > 0, print 1 and total_ways_t1.\n    # Else (total_ways_t1 == 0):\n    #   Calculate ways_t2_from_triangles.\n    #   If ways_t2_from_triangles > 0, print 2 and ways_t2_from_triangles.\n    #   Else (ways_t2_from_triangles == 0):\n    #     Then t must be 3.\n    #     The only way to form a triangle is to pick 3 vertices {A,B,C} and add all 3 edges (A,B), (B,C), (C,A).\n    #     This means no edges among A,B,C exist.\n    #     Count number of triplets {A,B,C} such that (A,B), (B,C), (C,A) are all non-existent.\n    #     Total triplets = n * (n-1) * (n-2) // 6.\n    #     Subtract triplets with 1 existing edge (t=2 type).\n    #     Subtract triplets with 2 existing edges (t=1 type).\n    #     Subtract triplets with 3 existing edges (t=0 type).\n    \n    # This is getting complicated. Let's simplify.\n    # If t=0, has_odd_cycle is True. Print 0 1. Done.\n    # If t=1, total_ways_t1 > 0. Print 1 total_ways_t1. Done.\n    # Now we are in the case where the graph is bipartite AND total_ways_t1 == 0.\n    # This means for any component, (c0,c1) implies c0<=1 and c1<=1.\n    # So each component is either an isolated vertex or an edge.\n    # So the graph is a collection of disjoint isolated vertices and disjoint edges.\n    # Let num_isolated = n - 2*m.\n    # Let num_edges = m.\n    #\n    # To get t=2:\n    #   We need to form a triangle {A,B,C} by adding 2 edges.\n    #   This requires one existing edge (say (A,B)) and two non-existing edges (A,C), (B,C).\n    #   Pick an existing edge (A,B). (There are `m` ways to do this).\n    #   Pick a third vertex C such that C is not A or B.\n    #   Since all components are isolated vertices or edges, C must be either an isolated vertex or part of another edge.\n    #   If C is an isolated vertex: (A,C) and (B,C) are guaranteed not to exist.\n    #     Number of ways = m * num_isolated.\n    #   If C is part of another edge (C,D):\n    #     We picked (A,B). We pick C from (C,D).\n    #     (A,C) is not an edge (A,B) and (C,D) are disjoint.\n    #     (B,C) is not an edge.\n    #     This forms a triangle {A,B,C} by adding (A,C) and (B,C).\n    #     Number of ways = m * (2 * (m-1)). No, this is wrong.\n    #     If we pick an edge (A,B), and pick a vertex C from another edge (C,D).\n    #     There are m choices for (A,B).\n    #     There are (m-1) choices for (C,D).\n    #     There are 2 choices for C (C or D).\n    #     So m * (m-1) * 2 ways.\n    #     Example: n=4, m=2, edges (0,1), (2,3).\n    #     m = 2. num_isolated = 0.\n    #     Ways from isolated and edge = 2 * 0 = 0.\n    #     Ways from two edges:\n    #       Pick (0,1). Pick C from (2,3).\n    #       C=2: add (0,2), (1,2). Triangle {0,1,2}.\n    #       C=3: add (0,3), (1,3). Triangle {0,1,3}.\n    #       Pick (2,3). Pick C from (0,1).\n    #       C=0: add (2,0), (3,0). Triangle {2,3,0}.\n    #       C=1: add (2,1), (3,1). Triangle {2,3,1}.\n    #     Total 4 ways.\n    #     Formula: m * (m-1) * 2 = 2 * (2-1) * 2 = 4. This matches.\n    #\n    # So if total_ways_t1 == 0:\n    #   ways_t2 = m * (n - 2*m) + m * (m-1) * 2\n    #   The first term is (num_edges * num_isolated_vertices).\n    #   The second term is (num_edges * (num_other_edges) * 2_vertices_per_edge).\n    #   This is the total number of ways to form a triangle with 2 added edges.\n    \n    if total_ways_t1 == 0:\n        ways_t2 = m * (n - 2 * m) + m * (m - 1) * 2\n        if ways_t2 > 0:\n            print(f\"2 {ways_t2}\")\n            return\n        else: # ways_t2 == 0\n            # This implies m=0 or (n-2m)=0 and m=1.\n            # If m=0: graph is n isolated vertices.\n            #   We need to pick 3 vertices and add 3 edges.\n            #   Ways = C(n,3) = n*(n-1)*(n-2)//6.\n            # If n-2m=0 and m=1: n=2, m=1. (0,1) exists.\n            #   ways_t2 = 1 * (2 - 2*1) + 1 * (1-1) * 2 = 0.\n            #   This means we cannot form a triangle with 2 added edges.\n            #   In this case (n=2, m=1), we have edge (0,1).\n            #   We need to add 3 edges to form an odd cycle.\n            #   But we only have 2 vertices. A cycle needs at least 3 vertices.\n            #   So it's impossible.\n            #   The problem states \"consisting of more than one vertex\".\n            #   If n < 3, it's impossible to form a triangle.\n            #   If n=1 or n=2, t=3 is impossible.\n            #   If n=2, m=0: ways_t2 = 0. C(2,3) = 0. So t=3 is 0 ways.\n            #   If n=2, m=1: ways_t2 = 0. C(2,3) = 0. So t=3 is 0 ways.\n            #   In these cases, the problem implies we should output 3 0.\n            #   The example n=3, m=0 outputs 3 1. This means C(3,3)=1.\n            \n            # So if ways_t2 is 0:\n            #   We need to add 3 edges to form a triangle.\n            #   This implies picking 3 vertices {A,B,C} such that no edges among them exist.\n            #   Since total_ways_t1 = 0, and ways_t2 = 0, this means:\n            #     - all components are isolated vertices or edges.\n            #     - no existing edge (u,v) and isolated vertex w.\n            #     - no two existing edges (u,v) and (x,y) from which we can pick u,v,x to form a triangle.\n            #   This means either m=0 OR n-2m=0 and m=1.\n            #   If m=0: all vertices are isolated. Number of ways = C(n,3).\n            #   If n=2, m=1: n-2m=0. But we cannot form a triangle. C(2,3)=0.\n            #   So if n < 3, and t=0, t=1, t=2 all fail, then t=3 is impossible.\n            #   Otherwise, t=3, ways = n*(n-1)*(n-2)//6. This is the number of ways to pick 3 vertices.\n            #   Since m=0, no edges exist, so all 3 edges need to be added.\n            \n            if n < 3: # If there are less than 3 vertices, a triangle is impossible.\n                print(\"3 0\")\n            else:\n                ways_t3 = n * (n - 1) * (n - 2) // 6\n                print(f\"3 {ways_t3}\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\nsys.setrecursionlimit(10**6)\n\ndef solve():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    adj = [[] for _ in range(n)]\n    edges_set = set()\n    for i in range(1, m + 1):\n        u, v = map(int, lines[i].split())\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        adj[v].append(u)\n        edges_set.add(tuple(sorted((u, v))))\n\n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n\n    def dfs_bipartite(u, c):\n        nonlocal is_bipartite, has_odd_cycle\n        color[u] = c\n        for v in adj[u]:\n            if color[v] == -1:\n                dfs_bipartite(v, 1 - c)\n                if not is_bipartite:\n                    return\n            elif color[v] == color[u]:\n                is_bipartite = False\n                has_odd_cycle = True\n                return\n\n    for i in range(n):\n        if color[i] == -1:\n            dfs_bipartite(i, 0)\n            if has_odd_cycle:\n                break\n\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # Case 1: t = 1\n    # If the graph is bipartite, we need to add an edge between two vertices of the same color\n    # in the same connected component.\n    # Count vertices in each partition for each component.\n    \n    component_colors = []\n    visited_comp = [False] * n\n    \n    def get_component_partitions(start_node):\n        q = [start_node]\n        visited_comp[start_node] = True\n        \n        comp_color = [-1] * n\n        comp_color[start_node] = 0\n        \n        count_0 = 1\n        count_1 = 0\n        \n        head = 0\n        while head < len(q):\n            u = q[head]\n            head += 1\n            \n            for v in adj[u]:\n                if not visited_comp[v]:\n                    visited_comp[v] = True\n                    comp_color[v] = 1 - comp_color[u]\n                    q.append(v)\n                    if comp_color[v] == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                elif comp_color[v] == comp_color[u]:\n                    # This should not happen if the graph is bipartite\n                    # but including for robustness.\n                    pass\n        return count_0, count_1\n\n    total_ways_t1 = 0\n    for i in range(n):\n        if not visited_comp[i]:\n            c0, c1 = get_component_partitions(i)\n            total_ways_t1 += c0 * (c0 - 1) // 2\n            total_ways_t1 += c1 * (c1 - 1) // 2\n\n    if total_ways_t1 > 0:\n        print(f\"1 {total_ways_t1}\")\n        return\n\n    # Case 2: t = 2\n    # We need to add two edges (u, v) and (v, w) such that u, v, w are distinct\n    # and form an odd cycle.\n    # This means connecting two components or connecting two parts of the same component\n    # to create an odd cycle.\n    # The simplest way to form an odd cycle with 2 added edges is to pick two vertices u, v\n    # from different components, and connect them to a third vertex x.\n    # For example, (u, x) and (v, x).\n    # If u and v are in different components, and x is in a third component, this forms a cycle of length 3.\n    # If u and v are in different components, and x is in one of their components (say, u's component),\n    # then x and u have some parity. x and v have some parity.\n    # An odd cycle of length > 1.\n    # Consider connecting two vertices u, v with an edge (u, v) and then connecting\n    # another vertex w to u or v. This forms an odd cycle if the path u-v-w has odd length\n    # and w is connected to u.\n\n    # Option 2.1: Add edges (u, x) and (v, x) where u, v, x are distinct.\n    # This forms a cycle of length 3.\n    # The number of ways is C(n, 3) - number of triangles already existing.\n    # No, this is not C(n,3). It's choosing 3 vertices and connecting them to form a triangle.\n    # We need to add two edges.\n    # We pick 3 distinct vertices A, B, C.\n    # If (A,B) exists, (B,C) exists, (C,A) does not exist: t=1, (C,A)\n    # If (A,B) exists, (B,C) does not exist, (C,A) does not exist: t=2, (B,C), (C,A)\n    # If (A,B) does not exist, (B,C) does not exist, (C,A) does not exist: t=3, (A,B), (B,C), (C,A)\n\n    # We are looking for t=2.\n    # An odd cycle can be formed by:\n    # 1. Path of length 2 (u-x-v) and add edge (u,v). This forms a triangle (u,x,v).\n    #    This requires u,v to be in the same component, and have the same color.\n    #    If u and v are in the same component and color[u] == color[v], then the path u-x-v has even length (2).\n    #    Adding (u,v) forms an odd cycle of length 3.\n    #    Number of such pairs (u,v) where (u,v) is not an existing edge.\n    #    For each vertex x, consider all pairs (u,v) such that (u,x) and (v,x) exist.\n    #    If color[u] == color[v], and (u,v) does not exist, then we can add (u,v).\n    #    This is handled by t=1 case. If total_ways_t1 is 0, then no such pair exists.\n\n    # The current graph is bipartite. All connected components are bipartite.\n    # So, for any two vertices u, v in the same component, if color[u] == color[v],\n    # any path between them has even length.\n    # If color[u] != color[v], any path between them has odd length.\n\n    # To form an odd cycle with 2 added edges:\n    # 1. Connect two vertices u, v from different components with an edge (u, v).\n    #    Then, connect a third vertex x to u or v such that x is in a different component\n    #    from the one it's connected to.\n    #    This is complex. Let's simplify.\n    #    We need an odd cycle of length L >= 3.\n    #    If we add two edges (a, b) and (c, d).\n    #    Consider a path P = u_1 - u_2 - ... - u_k.\n    #    If we add (u_1, u_k), it forms a cycle.\n    #    If P has odd length, then (u_1, u_k) closes an even cycle.\n    #    If P has even length, then (u_1, u_k) closes an odd cycle.\n    #    Since the graph is bipartite, any path between u_1 and u_k has even length if color[u_1] == color[u_k].\n    #    Any path between u_1 and u_k has odd length if color[u_1] != color[u_k].\n    #    So, to form an odd cycle by adding one edge (u_1, u_k), we need color[u_1] == color[u_k].\n    #    This is exactly what t=1 covers. Since total_ways_t1 is 0, no such pair (u_1, u_k) exists.\n    #    This means all pairs (u,v) with color[u]==color[v] that are in the same component\n    #    are already connected by an edge. This is not true. It means there are no such pairs (u,v)\n    #    that are NOT connected by an edge. So, if u,v are in same component, color[u]==color[v],\n    #    then (u,v) must be an existing edge. This implies that each partition has at most 1 vertex,\n    #    or it's a complete bipartite graph where adding edge between same color vertices is impossible.\n    #    This means that for every component, min(c0, c1) <= 1.\n    #    If a component has (c0, c1) = (1, 0) or (0, 1), then c0*(c0-1)/2 + c1*(c1-1)/2 = 0.\n    #    If a component has (c0, c1) = (1, 1), then 0.\n    #    If a component has (c0, c1) = (2, 0), then 1 way.\n    #    So, if total_ways_t1 = 0, then for all components, (c0, c1) must be such that c0*(c0-1)/2 + c1*(c1-1)/2 = 0.\n    #    This means c0 <= 1 and c1 <= 1 for all components.\n    #    So, each component is either a single vertex or a single edge.\n    #    If a component is a single vertex, (1,0) or (0,1).\n    #    If a component is a single edge, (1,1). e.g., 1-2. color[1]=0, color[2]=1. c0=1, c1=1.\n    #    In this scenario, total_ways_t1 would indeed be 0.\n    #    This means the graph is a collection of disjoint edges and isolated vertices.\n    #    If n=3, m=0, total_ways_t1 = 0. Components: (1,0), (1,0), (1,0).\n    #    If n=4, m=2, edges (1,2), (3,4). total_ways_t1 = 0. Components: (1,1), (1,1).\n    #    In this case, all existing edges connect vertices of different colors.\n\n    # So, if total_ways_t1 is 0, it means all connected components are such that\n    # for any two vertices u, v in the same partition (same color), they are already connected by an edge.\n    # Or, there is at most one vertex in each partition of any component.\n    # This implies that each connected component is either an isolated vertex or an edge.\n    # Example: n=3, m=0. Components: {0}, {1}, {2}. All (1,0) partitions. total_ways_t1 = 0.\n    # Example: n=4, m=2, edges (0,1), (2,3). Components: {0,1}, {2,3}. Partitions (1,1), (1,1). total_ways_t1 = 0.\n\n    # Let's re-evaluate t=2.\n    # We need to add two edges (u,v) and (x,y) to form an odd cycle.\n    # The simplest odd cycle is a triangle.\n    # To form a triangle (A,B,C) with two added edges:\n    # We need one existing edge, say (A,B), and add (B,C) and (C,A).\n    # This implies that the original graph has an edge (A,B) and no edges (B,C), (C,A).\n    # This means (A,B) is an existing edge, and we add (B,C) and (C,A).\n    # This creates a triangle. This is an odd cycle.\n    # This requires 3 distinct vertices A, B, C.\n    # Count pairs of vertices (u,v) such that (u,v) is an existing edge. Let this be 'e'.\n    # For each such edge (u,v), we need to pick a third vertex w (not u or v).\n    # We then add edges (u,w) and (v,w).\n    # We need to check if (u,w) and (v,w) are not existing edges.\n    # Number of ways = sum over existing edges (u,v) of (number of w such that (u,w) not exists AND (v,w) not exists).\n    # Total ways for t=2:\n    # Iterate over all possible choices of 3 distinct vertices (A, B, C).\n    # Number of ways to choose 3 vertices: C(n,3).\n    # For each triplet {A, B, C}:\n    #   Count existing edges among them: k.\n    #   If k=0: Need to add 3 edges ((A,B), (B,C), (C,A)). t=3.\n    #   If k=1: e.g., (A,B) exists, (B,C) and (C,A) do not. Need to add 2 edges ((B,C), (C,A)). t=2.\n    #   If k=2: e.g., (A,B) and (B,C) exist, (C,A) does not. Need to add 1 edge ((C,A)). t=1.\n    #   If k=3: e.g., (A,B), (B,C), (C,A) exist. Already a triangle. t=0.\n\n    # Since t=0 and t=1 cases are handled, we are looking for t=2.\n    # So we need to count triplets {A, B, C} with exactly one existing edge.\n    ways_t2 = 0\n    \n    # Iterate over all possible edges (u,v) in the graph.\n    # For each edge (u,v), iterate over all other vertices w (w != u, w != v).\n    # If (u,w) is not an edge and (v,w) is not an edge, then we can form a triangle (u,v,w) by adding 2 edges.\n    \n    # This counts ordered (u,v,w) where (u,v) is an edge. We need to divide by 2 later if we iterate over edges.\n    # Or simply iterate over all triplets {u,v,w}.\n    \n    # Total triplets: n * (n-1) * (n-2) / 6\n    \n    # Let's count ways for t=2 using the triplet method.\n    # A, B, C are distinct vertices.\n    # Edges: (A,B), (B,C), (C,A).\n    # Number of ways to pick 3 vertices: N_triplets = n * (n-1) * (n-2) // 6\n    \n    # We need to find triplets {A,B,C} such that exactly one of ((A,B), (B,C), (C,A)) exists.\n    # Iterate over all edges (u,v) in the graph.\n    # For each edge (u,v):\n    #   Iterate over all other vertices w (w != u, w != v).\n    #   Check if (u,w) exists and (v,w) exists.\n    #   If (u,w) exists and (v,w) does NOT exist: this is a path u-w-v, plus edge (u,v). Not a triangle.\n    #   We need to count (u,v,w) such that (u,v) exists, (u,w) does not exist, (v,w) does not exist.\n    \n    # Count how many pairs of non-adjacent vertices (x,y) are there for each vertex w.\n    # For each vertex w:\n    #   Count its degree: deg[w]\n    #   Number of vertices not adjacent to w: (n - 1 - deg[w])\n    #   Number of pairs of non-adjacent vertices to w: (n - 1 - deg[w]) * (n - 2 - deg[w]) / 2\n    \n    # This is still not quite right.\n    # Let's count number of ways to pick two non-adjacent vertices (u,v) and a third vertex w,\n    # such that (u,w) and (v,w) are existing edges.\n    # This forms a path u-w-v. If (u,v) does not exist, adding (u,v) forms a triangle.\n    # This would be a t=1 case. But we are past t=1. So (u,v) must exist.\n    \n    # Back to the definition of t=2:\n    # We need to add two edges.\n    # A cycle of odd length.\n    # Since t=1 failed, it means we cannot form an odd cycle by adding a single edge.\n    # This implies that for any two vertices u, v in the same component, if color[u] == color[v],\n    # then (u,v) must be an existing edge.\n    # This means that each partition (set of same-colored vertices) in each component has at most 1 vertex.\n    # So, each component is either an isolated vertex or an edge.\n    # Example: n=3, m=0. Components: {0}, {1}, {2}. (1,0) for each.\n    # Example: n=4, m=2, edges (0,1), (2,3). Components: {0,1}, {2,3}. (1,1) for each.\n    # In this scenario, we need to add at least 2 edges.\n    \n    # If the graph is a collection of isolated vertices and edges:\n    #   To form a triangle (A,B,C):\n    #   1. All three A,B,C are isolated vertices. Add (A,B), (B,C), (C,A). t=3.\n    #   2. Two isolated vertices A,B and one vertex C which is part of an edge (C,D).\n    #      This is not a triangle {A,B,C}.\n    #   3. One isolated vertex A, two vertices B,C forming an edge (B,C).\n    #      Add (A,B), (A,C). t=2. This forms a triangle (A,B,C).\n    #      Number of ways:\n    #      Count isolated vertices: num_isolated = n - 2 * m\n    #      Count existing edges: m\n    #      Ways to pick 1 isolated vertex and 1 existing edge: num_isolated * m\n    #      Each such choice (A, (B,C)) forms a triangle {A,B,C} by adding (A,B) and (A,C).\n    #      These two edges (A,B) and (A,C) are guaranteed not to exist because A is isolated.\n    #      Total ways_t2 = num_isolated * m.\n    #      This is a valid scenario for t=2.\n    \n    num_isolated_vertices = n - 2 * m\n    ways_t2_from_isolated_and_edge = num_isolated_vertices * m\n\n    # Option 2.2: Connecting two different components.\n    # Suppose we have two components C1 and C2.\n    # Pick u from C1, v from C2. Add (u,v).\n    # This makes a new component C1 U C2. This component is still bipartite.\n    # We need to add another edge to make it non-bipartite.\n    # This means adding an edge (x,y) where x,y are in the same partition of C1 U C2.\n    # But after adding (u,v), the colors might shift.\n    # Let's say u in C1 has color 0, v in C2 has color 0.\n    # After adding (u,v), C1 and C2 merge.\n    # The relative coloring within C1 and C2 is preserved.\n    # If u has color 0 in C1, and v has color 0 in C2.\n    # After adding (u,v), let u remain color 0. Then v must become color 1.\n    # This means all vertices in C2 that were color 0 become color 1, and vice versa.\n    # The new component is still bipartite.\n    # So, adding an edge between two components always results in a bipartite graph.\n    # We need to add a second edge to make it non-bipartite.\n    # This means adding an edge between two vertices of the same color in the new merged component.\n    # This is essentially the t=1 case for the new merged graph.\n    # This is complex. Let's stick to simple ways of forming an odd cycle with 2 edges.\n\n    # What if we connect two vertices u, v from different components, and another vertex x\n    # from a third component? Add (u,x) and (v,x). This forms a triangle (u,v,x).\n    # All three vertices are from different components.\n    # Number of ways:\n    # Count connected components.\n    # Number of vertices in each component: comp_sizes.\n    # For each vertex u, count how many other vertices v it can connect to such that (u,v) is not an edge.\n    # This is (n-1-deg[u]).\n    \n    # Consider the problem as finding a path of length L-1 and adding an edge to close it to a cycle of length L.\n    # L must be odd.\n    # If L=3, we need a path of length 2 (u-x-v) and add edge (u,v).\n    # If (u,x) and (x,v) exist, and (u,v) does not exist: t=1. This is handled.\n    # If (u,x) exists, (x,v) does not exist, (u,v) does not exist: t=2. Add (x,v) and (u,v).\n    # This forms a triangle (u,x,v).\n    # For each edge (u,x) in the graph:\n    #   For each vertex v not equal to u or x:\n    #     If (x,v) does not exist AND (u,v) does not exist:\n    #       Then we can add (x,v) and (u,v) to form a triangle (u,x,v).\n    #       This counts (u,x,v) where (u,x) is an edge.\n    #       The number of ways is sum over existing edges (u,x) of\n    #       (number of vertices v not in {u,x} such that (x,v) and (u,v) are not edges).\n    # This is exactly what num_isolated_vertices * m counts if the graph is collection of isolated vertices and edges.\n    # Let's verify this more generally.\n    # ways_t2_general = 0\n    # for u_idx in range(n):\n    #     for v_idx in range(u_idx + 1, n):\n    #         if (u_idx, v_idx) in edges_set:\n    #             # (u_idx, v_idx) is an existing edge.\n    #             # We are looking for a third vertex w_idx such that (u_idx, w_idx) and (v_idx, w_idx) are not existing edges.\n    #             # This forms a triangle {u_idx, v_idx, w_idx} by adding two edges.\n    #             for w_idx in range(n):\n    #                 if w_idx == u_idx or w_idx == v_idx:\n    #                     continue\n    #                 if (u_idx, w_idx) not in edges_set and (v_idx, w_idx) not in edges_set:\n    #                     ways_t2_general += 1\n    # This counts ordered triplets (u,v,w) where (u,v) is an edge.\n    # The set of added edges is {(u,w), (v,w)}. This is unique for {u,v,w}.\n    # So we should divide by 1.\n    # Wait, the problem says \"Two ways to add edges to the graph are considered equal if they have the same sets of added edges.\"\n    # So we need to count unique sets of 2 edges.\n    # A set of 2 edges {(a,b), (c,d)} forms an odd cycle.\n    # If we form a triangle {u,v,w} where (u,v) is an existing edge, and (u,w), (v,w) are added edges.\n    # The set of added edges is {(u,w), (v,w)}. This is unique for the triplet {u,v,w}.\n    # So the count is simply the sum.\n    \n    ways_t2_from_triangles = 0\n    for u in range(n):\n        for v in range(u + 1, n):\n            if (u, v) in edges_set:\n                for w in range(n):\n                    if w == u or w == v:\n                        continue\n                    if (u, w) not in edges_set and (v, w) not in edges_set:\n                        ways_t2_from_triangles += 1\n    \n    # This counts each triangle {u,v,w} where (u,v) is an existing edge and (u,w), (v,w) are added edges.\n    # This is one way to form an odd cycle of length 3 with 2 added edges.\n    # This is exactly the case when we have an edge and an isolated vertex.\n    # E.g., (0,1) exists. Vertex 2 is isolated. Add (0,2), (1,2).\n    # So ways_t2_from_triangles = num_isolated_vertices * m is true IF graph is just isolated vertices and edges.\n    # But what if there are larger components?\n    # Example: n=4, m=1, edge (0,1). Vertex 2, 3 are isolated.\n    # Edges_set = {(0,1)}.\n    # u=0, v=1.\n    # w=2: (0,2) not in edges_set, (1,2) not in edges_set. ways_t2_from_triangles += 1.\n    # w=3: (0,3) not in edges_set, (1,3) not in edges_set. ways_t2_from_triangles += 1.\n    # Total = 2.\n    # Using formula: num_isolated_vertices = 4 - 2*1 = 2. m = 1. Result = 2*1 = 2. It matches.\n    \n    # Example: n=4, m=2, edges (0,1), (0,2).\n    # Edges_set = {(0,1), (0,2)}.\n    # u=0, v=1:\n    #   w=2: (0,2) in edges_set. Skip.\n    #   w=3: (0,3) not in edges_set, (1,3) not in edges_set. ways_t2_from_triangles += 1.\n    # u=0, v=2:\n    #   w=1: (0,1) in edges_set. Skip.\n    #   w=3: (0,3) not in edges_set, (2,3) not in edges_set. ways_t2_from_triangles += 1.\n    # Total = 2.\n    # num_isolated_vertices = 4 - 2*2 = 0. Formula gives 0. This doesn't match.\n    # The formula num_isolated_vertices * m is only for the specific case where all components are isolated vertices or edges.\n    # The current graph is bipartite and does not have any (u,v) with color[u]==color[v] that is not an edge.\n    # This means each component is a tree or a set of trees.\n    # In a bipartite graph, a path u-x-v has even length (2) if color[u] == color[v].\n    # But if color[u] != color[v], path u-x-v has odd length (2). This is not right.\n    # Path u-x-v has length 2.\n    # If color[u] == color[v], then color[x] must be 1-color[u].\n    # Adding (u,v) forms a cycle of length 3. This is an odd cycle.\n    # This is exactly what ways_t2_from_triangles counts.\n    # Since total_ways_t1 was 0, it means there are no two vertices u,v in the same component\n    # with color[u]==color[v] such that (u,v) is not an edge.\n    # This means that if color[u]==color[v], then (u,v) is an edge. This is not true.\n    # It means if color[u]==color[v] and (u,v) is not an edge, then u,v must be in different components.\n    # This implies that all components are \"minimal\" in some sense.\n    # Each partition (color 0 or color 1) of each component has at most 1 vertex.\n    # So each component is either a single vertex or a single edge.\n    # If a component is a single vertex, say {0}, then color[0]=0.\n    # If a component is an edge, say {0,1}, then color[0]=0, color[1]=1.\n    # So, if total_ways_t1 == 0, then the graph is a collection of disjoint edges and isolated vertices.\n    # In this specific case, ways_t2_from_triangles = num_isolated_vertices * m.\n    # Example: n=4, m=2, edges (0,1), (0,2). This graph is not a collection of disjoint edges and isolated vertices.\n    # It has a component {0,1,2}.\n    # Color[0]=0, Color[1]=1, Color[2]=1.\n    # (0,1) exists, (0,2) exists.\n    # For u=0, v=1: w=2 (0,2) exists.\n    # For u=0, v=2: w=1 (0,1) exists.\n    # For u=1, v=2: (1,2) does not exist. Color[1]=1, Color[2]=1.\n    # So (1,2) is a pair of same-colored vertices not connected by an edge.\n    # This should have been counted by total_ways_t1.\n    # Let's re-check total_ways_t1 calculation.\n    # `component_colors` stores (c0, c1) for each component.\n    # `total_ways_t1 += c0 * (c0 - 1) // 2`\n    # `total_ways_t1 += c1 * (c1 - 1) // 2`\n    # For n=4, m=2, edges (0,1), (0,2):\n    # Component {0,1,2}.\n    # dfs_bipartite from 0: color[0]=0.\n    #   neighbor 1: color[1]=1.\n    #   neighbor 2: color[2]=1.\n    # Component is {0,1,2}. color[0]=0, color[1]=1, color[2]=1.\n    # c0 = 1 (vertex 0)\n    # c1 = 2 (vertices 1, 2)\n    # total_ways_t1 += 1*(1-1)//2 = 0\n    # total_ways_t1 += 2*(2-1)//2 = 1\n    # So total_ways_t1 = 1. The edge (1,2) can be added.\n    # So the example output for n=4, m=4, (1,2), (1,3), (4,2), (4,3) is 1 2.\n    # This graph is 1-2, 1-3, 4-2, 4-3.\n    # Vertices: 0,1,2,3 (original 1,2,3,4)\n    # Edges: (0,1), (0,2), (3,1), (3,2).\n    # Component {0,1,2,3}.\n    # dfs_bipartite from 0: color[0]=0.\n    #   neighbor 1: color[1]=1.\n    #   neighbor 2: color[2]=1.\n    #   neighbor 3 (from 1): color[3]=0.\n    #   neighbor 3 (from 2): color[3]=0.\n    # Colors: color[0]=0, color[1]=1, color[2]=1, color[3]=0.\n    # c0 = 2 (vertices 0, 3)\n    # c1 = 2 (vertices 1, 2)\n    # total_ways_t1 += 2*(2-1)//2 = 1 (for {0,3})\n    # total_ways_t1 += 2*(2-1)//2 = 1 (for {1,2})\n    # Total ways = 2.\n    # The output is 1 2. This matches.\n    # So my initial logic for t=1 is correct.\n    # If total_ways_t1 > 0, we print 1 and total_ways_t1.\n\n    # If total_ways_t1 == 0, it means for any component, (c0,c1) is such that c0*(c0-1)/2 + c1*(c1-1)/2 = 0.\n    # This means c0 <= 1 and c1 <= 1 for all components.\n    # So, each connected component is either an isolated vertex or an edge.\n    # In this specific scenario, t=2 is the next possibility.\n    # The only way to form an odd cycle of length 3 (a triangle) with 2 added edges\n    # is to pick an existing edge (u,v) and an isolated vertex w.\n    # Then add edges (u,w) and (v,w).\n    # Number of ways = (number of existing edges) * (number of isolated vertices).\n    \n    # This is correct for the specific case where total_ways_t1 = 0.\n    # So, if total_ways_t1 is 0, then t=2, and ways_t2 = m * (n - 2*m).\n    # Let's verify this for example 3: n=3, m=0.\n    # dfs_bipartite for 0: color[0]=0. c0=1, c1=0.\n    # dfs_bipartite for 1: color[1]=0. c0=1, c1=0.\n    # dfs_bipartite for 2: color[2]=0. c0=1, c1=0.\n    # total_ways_t1 = 0.\n    # m = 0. n - 2*m = 3.\n    # ways_t2 = 0 * 3 = 0.\n    # So t=2 gives 0 ways. This means we need t=3.\n\n    # Case 3: t = 3\n    # If t=0, t=1, t=2 all fail, then we need to add 3 edges.\n    # The simplest odd cycle is a triangle.\n    # To form a triangle {A,B,C} with 3 added edges, it means no edges among A,B,C exist.\n    # This means we pick 3 distinct vertices A,B,C such that (A,B), (B,C), (C,A) are all non-existent.\n    # If t=2 gives 0 ways, it means m * (n - 2*m) = 0.\n    # This implies m=0 OR n - 2*m = 0.\n    # If m=0: graph has only isolated vertices.\n    #   Then we need to pick 3 isolated vertices A,B,C. Add (A,B), (B,C), (C,A).\n    #   Number of ways = C(n,3).\n    #   This is the example 3: n=3, m=0. C(3,3) = 1. Output is 3 1. This matches.\n    # If n - 2*m = 0: graph has only edges, no isolated vertices. All vertices have degree >= 1.\n    #   Also, total_ways_t1 = 0 implies all components are edges.\n    #   E.g., n=4, m=2, edges (0,1), (2,3).\n    #   num_isolated_vertices = 0. ways_t2 = 0.\n    #   We need to find 3 vertices A,B,C such that no edges among them exist.\n    #   Pick 0, 2, 3. (0,2) no, (0,3) no, (2,3) yes. This is not 3 added edges.\n    #   Pick 0, 1, 2. (0,1) yes, (0,2) no, (1,2) no. This is t=2.\n    #   So my assumption that if total_ways_t1 = 0 then ways_t2 = m * (n - 2*m) is not completely general.\n    #   It's true for the specific case where graph is collection of isolated vertices and edges.\n    #   The ways_t2_from_triangles calculation is the general one for t=2.\n    #   Let's re-run ways_t2_from_triangles for n=4, m=2, edges (0,1), (2,3).\n    #   Edges_set = {(0,1), (2,3)}.\n    #   u=0, v=1:\n    #     w=2: (0,2) not in edges_set, (1,2) not in edges_set. ways_t2_from_triangles += 1.\n    #     w=3: (0,3) not in edges_set, (1,3) not in edges_set. ways_t2_from_triangles += 1.\n    #   u=2, v=3:\n    #     w=0: (2,0) not in edges_set, (3,0) not in edges_set. ways_t2_from_triangles += 1.\n    #     w=1: (2,1) not in edges_set, (3,1) not in edges_set. ways_t2_from_triangles += 1.\n    #   Total = 4.\n    #   So for n=4, m=2, edges (0,1), (2,3), the output should be 2 4.\n    #   (Add (0,2), (1,2) for triangle {0,1,2})\n    #   (Add (0,3), (1,3) for triangle {0,1,3})\n    #   (Add (2,0), (3,0) for triangle {2,3,0})\n    #   (Add (2,1), (3,1) for triangle {2,3,1})\n\n    # Let's stick to the general calculation of ways_t2_from_triangles.\n    # This covers all cases where t=2 forms a triangle.\n    # If total_ways_t1 > 0, print 1 and total_ways_t1.\n    # Else (total_ways_t1 == 0):\n    #   Calculate ways_t2_from_triangles.\n    #   If ways_t2_from_triangles > 0, print 2 and ways_t2_from_triangles.\n    #   Else (ways_t2_from_triangles == 0):\n    #     Then t must be 3.\n    #     The only way to form a triangle is to pick 3 vertices {A,B,C} and add all 3 edges (A,B), (B,C), (C,A).\n    #     This means no edges among A,B,C exist.\n    #     Count number of triplets {A,B,C} such that (A,B), (B,C), (C,A) are all non-existent.\n    #     Total triplets = n * (n-1) * (n-2) // 6.\n    #     Subtract triplets with 1 existing edge (t=2 type).\n    #     Subtract triplets with 2 existing edges (t=1 type).\n    #     Subtract triplets with 3 existing edges (t=0 type).\n    \n    # This is getting complicated. Let's simplify.\n    # If t=0, has_odd_cycle is True. Print 0 1. Done.\n    # If t=1, total_ways_t1 > 0. Print 1 total_ways_t1. Done.\n    # Now we are in the case where the graph is bipartite AND total_ways_t1 == 0.\n    # This means for any component, (c0,c1) implies c0<=1 and c1<=1.\n    # So each component is either an isolated vertex or an edge.\n    # So the graph is a collection of disjoint isolated vertices and disjoint edges.\n    # Let num_isolated = n - 2*m.\n    # Let num_edges = m.\n    #\n    # To get t=2:\n    #   We need to form a triangle {A,B,C} by adding 2 edges.\n    #   This requires one existing edge (say (A,B)) and two non-existing edges (A,C), (B,C).\n    #   Pick an existing edge (A,B). (There are `m` ways to do this).\n    #   Pick a third vertex C such that C is not A or B.\n    #   Since all components are isolated vertices or edges, C must be either an isolated vertex or part of another edge.\n    #   If C is an isolated vertex: (A,C) and (B,C) are guaranteed not to exist.\n    #     Number of ways = m * num_isolated.\n    #   If C is part of another edge (C,D):\n    #     We picked (A,B). We pick C from (C,D).\n    #     (A,C) is not an edge (A,B) and (C,D) are disjoint.\n    #     (B,C) is not an edge.\n    #     This forms a triangle {A,B,C} by adding (A,C) and (B,C).\n    #     Number of ways = m * (2 * (m-1)). No, this is wrong.\n    #     If we pick an edge (A,B), and pick a vertex C from another edge (C,D).\n    #     There are m choices for (A,B).\n    #     There are (m-1) choices for (C,D).\n    #     There are 2 choices for C (C or D).\n    #     So m * (m-1) * 2 ways.\n    #     Example: n=4, m=2, edges (0,1), (2,3).\n    #     m = 2. num_isolated = 0.\n    #     Ways from isolated and edge = 2 * 0 = 0.\n    #     Ways from two edges:\n    #       Pick (0,1). Pick C from (2,3).\n    #       C=2: add (0,2), (1,2). Triangle {0,1,2}.\n    #       C=3: add (0,3), (1,3). Triangle {0,1,3}.\n    #       Pick (2,3). Pick C from (0,1).\n    #       C=0: add (2,0), (3,0). Triangle {2,3,0}.\n    #       C=1: add (2,1), (3,1). Triangle {2,3,1}.\n    #     Total 4 ways.\n    #     Formula: m * (m-1) * 2 = 2 * (2-1) * 2 = 4. This matches.\n    #\n    # So if total_ways_t1 == 0:\n    #   ways_t2 = m * (n - 2*m) + m * (m-1) * 2\n    #   The first term is (num_edges * num_isolated_vertices).\n    #   The second term is (num_edges * (num_other_edges) * 2_vertices_per_edge).\n    #   This is the total number of ways to form a triangle with 2 added edges.\n    \n    if total_ways_t1 == 0:\n        ways_t2 = m * (n - 2 * m) + m * (m - 1) * 2\n        if ways_t2 > 0:\n            print(f\"2 {ways_t2}\")\n            return\n        else: # ways_t2 == 0\n            # This implies m=0 or (n-2m)=0 and m=1.\n            # If m=0: graph is n isolated vertices.\n            #   We need to pick 3 vertices and add 3 edges.\n            #   Ways = C(n,3) = n*(n-1)*(n-2)//6.\n            # If n-2m=0 and m=1: n=2, m=1. (0,1) exists.\n            #   ways_t2 = 1 * (2 - 2*1) + 1 * (1-1) * 2 = 0.\n            #   This means we cannot form a triangle with 2 added edges.\n            #   In this case (n=2, m=1), we have edge (0,1).\n            #   We need to add 3 edges to form an odd cycle.\n            #   But we only have 2 vertices. A cycle needs at least 3 vertices.\n            #   So it's impossible.\n            #   The problem states \"consisting of more than one vertex\".\n            #   If n < 3, it's impossible to form a triangle.\n            #   If n=1 or n=2, t=3 is impossible.\n            #   If n=2, m=0: ways_t2 = 0. C(2,3) = 0. So t=3 is 0 ways.\n            #   If n=2, m=1: ways_t2 = 0. C(2,3) = 0. So t=3 is 0 ways.\n            #   In these cases, the problem implies we should output 3 0.\n            #   The example n=3, m=0 outputs 3 1. This means C(3,3)=1.\n            \n            # So if ways_t2 is 0:\n            #   We need to add 3 edges to form a triangle.\n            #   This implies picking 3 vertices {A,B,C} such that no edges among them exist.\n            #   Since total_ways_t1 = 0, and ways_t2 = 0, this means:\n            #     - all components are isolated vertices or edges.\n            #     - no existing edge (u,v) and isolated vertex w.\n            #     - no two existing edges (u,v) and (x,y) from which we can pick u,v,x to form a triangle.\n            #   This means either m=0 OR n-2m=0 and m=1.\n            #   If m=0: all vertices are isolated. Number of ways = C(n,3).\n            #   If n=2, m=1: n-2m=0. But we cannot form a triangle. C(2,3)=0.\n            #   So if n < 3, and t=0, t=1, t=2 all fail, then t=3 is impossible.\n            #   Otherwise, t=3, ways = n*(n-1)*(n-2)//6. This is the number of ways to pick 3 vertices.\n            #   Since m=0, no edges exist, so all 3 edges need to be added.\n            \n            if n < 3: # If there are less than 3 vertices, a triangle is impossible.\n                print(\"3 0\")\n            else:\n                ways_t3 = n * (n - 1) * (n - 2) // 6\n                print(f\"3 {ways_t3}\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 604,
        "completion_token_count": 11610,
        "thoughts_token_count": 0
    }
}