{
    "start": 1758293705.4294846,
    "end": 1758293733.4003935,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 57,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Olympiad\n\nA boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya's chances.Help Vasya's teacher, find two numbers — the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours (the first place has the participant who has got the most points). If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.\n\n## Input\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.The second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.The third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.The participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x.\n\n## Output\nPrint two space-separated integers — the best and the worst place Vasya could have got on the Olympiad.\n\n## Example\n### Input\n['5 2\\n1 1 1 1 1\\n1 1 1 1 1', '6 7\\n4 3 5 6 4 4\\n8 6 0 4 3 4']\n\n### Output\n['1 5', '1 5']\n\n## Note\nIn the first text sample all 5 participants earn 2 points each in any case. Depending on the jury's decision, Vasya can get the first (the best) as well as the last (the worst) fifth place.In the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that — {4:8, 6:4, 3:6, 4:4, 4:3, 5:0}.In this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour.In the worst case scenario Vasya can get the fifth place if the table looks like that — {4:8, 4:6, 6:4, 5:4, 4:3, 3:0}, and he earned 4 and 3 points in the first and second tours, correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    b.sort()\n\n    # Calculate best possible rank\n    # Vasya wants to maximize his score. He can take the highest score from A and highest from B.\n    # To find his best rank, we need to count how many other participants could potentially score higher than him.\n    # Vasya's maximum possible score is a[n-1] + b[n-1].\n    # But he must score at least x. So his actual maximum score is max(x, a[i] + b[j] for some i, j).\n    # Since we want the best rank, we assume Vasya takes the highest possible score he can get (a[i] + b[j] >= x).\n    # The problem statement guarantees Vasya was present and there exist i, j such that a[i] + b[j] >= x.\n    # To maximize his score, Vasya would take the highest a[i] and highest b[j].\n    # So Vasya's best score is a[n-1] + b[n-1].\n    # We need to count how many *other* pairs (a_k, b_l) can sum to a score strictly greater than Vasya's *worst* score.\n    # No, this is about Vasya's best possible rank.\n    # Vasya's best rank means he gets the highest possible score.\n    # He can achieve a score of a[i] + b[j] as long as a[i] + b[j] >= x.\n    # To maximize his rank, he wants to maximize his score. So he takes the largest possible sum, say S_vasya_max.\n    # S_vasya_max = a[n-1] + b[n-1].\n    # Then we count how many *other* participants could achieve a score >= S_vasya_max.\n    # This is tricky because the pairs are not fixed.\n    # Let's consider the maximum possible score any participant can get.\n    # This is a[n-1] + b[n-1]. Let's call this S_max.\n    # Vasya can achieve S_max if S_max >= x. (Which it is, since a[n-1] + b[n-1] is the largest possible sum, and it's guaranteed there's at least one pair >= x).\n    # So Vasya can achieve S_max.\n    # How many other participants can also achieve S_max?\n    # This is equivalent to finding the maximum number of participants that can achieve a score equal to S_max.\n    # This is still not quite right.\n    # The best rank means Vasya gets a score S_V, and there are as few people as possible with score > S_V or = S_V.\n    # To get the best rank, Vasya should try to get the highest possible score.\n    # The highest possible score for any participant is a[n-1] + b[n-1]. Let's call this `max_possible_total`.\n    # Vasya can achieve this score if he takes a[n-1] and b[n-1].\n    # This is guaranteed to be >= x because it's the largest sum.\n    # So Vasya's best score is `max_possible_total`.\n    # To find the best rank, we need to find how many *other* participants can achieve a score >= `max_possible_total`.\n    # Since `max_possible_total` is the maximum possible, no one can score strictly greater.\n    # So we just need to count how many participants can score exactly `max_possible_total`.\n    # This is equivalent to finding the maximum number of pairs (a_i, b_j) such that a_i + b_j = `max_possible_total`.\n    # This is a matching problem.\n    # To maximize the count of participants scoring `max_possible_total`, we pair up the largest a_i with b_j such that a_i + b_j = `max_possible_total`.\n    # This can be done greedily.\n    # Sort a in ascending order, b in ascending order.\n    # `max_possible_total = a[n-1] + b[n-1]`.\n    # Count how many pairs (a_i, b_j) can sum to `max_possible_total`.\n    # Use two pointers. `left_a` on sorted `a`, `right_b` on sorted `b`.\n    # If `a[left_a] + b[right_b] == max_possible_total`, we found a pair. Increment count, `left_a++`, `right_b--`.\n    # If `a[left_a] + b[right_b] < max_possible_total`, `left_a++`.\n    # If `a[left_a] + b[right_b] > max_possible_total`, `right_b--`.\n    # This approach counts the maximum number of pairs that sum to `max_possible_total`.\n    # Let this count be `k`. Vasya is one of these `k` people. So his best rank is 1.\n    # This logic is simpler: Vasya can always achieve the highest possible score (a[n-1] + b[n-1]).\n    # Since he is guaranteed to be in the Olympiad, he can take this score.\n    # No one can score higher. So his best rank is always 1.\n\n    best_rank = 1\n\n    # Calculate worst possible rank\n    # Vasya wants to minimize his score, but still >= x.\n    # Other participants want to maximize their scores.\n    # Vasya's score is a_vasya + b_vasya >= x.\n    # We need to count how many participants can score strictly greater than Vasya,\n    # plus how many can score equal to Vasya (if jury assigns them higher rank).\n    # To maximize Vasya's rank (make it as bad as possible), Vasya should take the smallest possible score >= x.\n    # And other participants should take the largest possible scores.\n    # This is a matching problem.\n    # We want to find a pairing (a_i, b_j) for Vasya such that a_i + b_j >= x, and this sum is minimized.\n    # Let this minimum sum be S_vasya_min.\n    # And we want to find a pairing for the remaining n-1 participants such that as many as possible have score > S_vasya_min,\n    # and then as many as possible have score = S_vasya_min.\n\n    # This is a greedy approach for worst rank:\n    # Vasya wants to get the lowest score possible (>= x).\n    # The other n-1 participants want to get the highest scores possible.\n    # Sort `a` and `b`.\n    # We want to find a pairing for `n` participants (including Vasya).\n    # We need to count how many pairs (a_i, b_j) can sum to a value S such that S >= x.\n    # This is a standard two-pointer problem.\n    # Sort `a` in ascending order. Sort `b` in descending order.\n    # Iterate through `a`. For each `a_i`, find `b_j` such that `a_i + b_j >= x`.\n    # To maximize the number of such pairs, we use a greedy approach.\n    # Sort `a` in ascending order. Sort `b` in descending order.\n    # We iterate `a_i` from smallest to largest. For each `a_i`, we try to pair it with the largest available `b_j` (from `b` sorted descending) such that `a_i + b_j >= x`.\n    # If we find such a `b_j`, we make a pair and remove both `a_i` and `b_j`.\n    # This maximizes the number of pairs that sum to at least `x`.\n    # The number of such pairs is `n_pairs_ge_x`.\n    # This `n_pairs_ge_x` is the maximum number of participants who can achieve a score of at least `x`.\n    # Vasya is one of these participants.\n    # The remaining `n - n_pairs_ge_x` participants will have scores less than `x`.\n    # So, the worst rank Vasya can get is `n - (n_pairs_ge_x - 1)` if Vasya is the \"last\" of the `n_pairs_ge_x` people.\n    # If all `n` participants can form pairs that sum to at least `x`, then `n_pairs_ge_x = n`.\n    # In this case, Vasya's worst rank could be `n`.\n    # This is not quite right. We need to find the number of people who can score *more* than Vasya, or *equal* to Vasya.\n\n    # Let's re-think worst rank.\n    # Vasya gets some score S_V >= x.\n    # We want to maximize the number of people who score > S_V or = S_V.\n    # This means Vasya should get the smallest possible score S_V >= x.\n    # And the other participants should get the largest possible scores.\n    # This implies a maximum matching problem where we want to maximize the number of pairs (a_i, b_j) that sum to at least x.\n    # The number of such pairs is the number of participants who can achieve at least x points.\n    # Let's call this `count_eligible_participants`.\n    # This `count_eligible_participants` is the number of people who can achieve a score >= x.\n    # Vasya is one of them.\n    # The remaining `n - count_eligible_participants` people will score less than x.\n    # So, Vasya's worst rank will be among these `count_eligible_participants` people.\n    # If all `n` participants can form pairs summing to at least `x`, then `count_eligible_participants = n`.\n    # In this scenario, Vasya's worst rank is `n`.\n    # If `count_eligible_participants < n`, then Vasya's worst rank is `count_eligible_participants`.\n    # This is because he is one of the `count_eligible_participants` people who got at least `x` points.\n    # The others got less than `x` points, so they are ranked after him.\n    # So the worst rank is `count_eligible_participants`.\n\n    # How to find `count_eligible_participants` (maximum number of pairs (a_i, b_j) such that a_i + b_j >= x)?\n    # Sort `a` in ascending order.\n    # Sort `b` in ascending order.\n    # Use two pointers: `left_a` starts at 0, `right_b` starts at `n-1`.\n    # `count = 0`\n    # While `left_a < n` and `right_b >= 0`:\n    #   If `a[left_a] + b[right_b] >= x`:\n    #     This `a[left_a]` can be paired with `b[right_b]`. This forms a valid pair.\n    #     Increment `count`.\n    #     Move `left_a` forward (this `a_i` is used).\n    #     Move `right_b` backward (this `b_j` is used).\n    #   Else (`a[left_a] + b[right_b] < x`):\n    #     `a[left_a]` is too small to form a sum >= x with `b[right_b]` (the largest available `b`).\n    #     So `a[left_a]` cannot form a sum >= x with any remaining `b_j` (since `b` is sorted, `b_j <= b[right_b]`).\n    #     So we must discard `a[left_a]` and move to the next `a`.\n    #     Move `left_a` forward.\n    # This greedy strategy works because by pairing the smallest available `a_i` with the largest available `b_j` to satisfy the condition,\n    # we leave larger `a` values and smaller `b` values for subsequent pairings,\n    # maximizing the chances for other pairs to also satisfy the condition.\n    # Example: a = [1, 2, 10], b = [1, 2, 10], x = 11\n    # Sorted a = [1, 2, 10], sorted b = [1, 2, 10]\n    # left_a = 0 (a[0]=1), right_b = 2 (b[2]=10)\n    # 1 + 10 = 11 >= x. count = 1. left_a = 1, right_b = 1.\n    # left_a = 1 (a[1]=2), right_b = 1 (b[1]=2)\n    # 2 + 2 = 4 < x. Move left_a. left_a = 2.\n    # left_a = 2 (a[2]=10), right_b = 1 (b[1]=2)\n    # 10 + 2 = 12 >= x. count = 2. left_a = 3, right_b = 0.\n    # Loop ends. count = 2.\n    # This means 2 participants can score >= x. Vasya is one of them. So his worst rank is 2.\n\n    count_eligible_participants = 0\n    left_a = 0\n    right_b = n - 1\n\n    while left_a < n and right_b >= 0:\n        if a[left_a] + b[right_b] >= x:\n            count_eligible_participants += 1\n            left_a += 1\n            right_b -= 1\n        else:\n            # a[left_a] is too small to form a sum >= x with b[right_b] (the largest available b).\n            # So a[left_a] cannot form a sum >= x with any remaining b.\n            # We must use a larger 'a' value or discard this 'a'.\n            # To maximize pairs, we discard this 'a' and try the next smallest 'a'.\n            left_a += 1\n    \n    worst_rank = count_eligible_participants\n\n    sys.stdout.write(f\"{best_rank} {worst_rank}\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    b.sort()\n\n    # Calculate best possible rank\n    # Vasya wants to maximize his score. He can take the highest score from A and highest from B.\n    # To find his best rank, we need to count how many other participants could potentially score higher than him.\n    # Vasya's maximum possible score is a[n-1] + b[n-1].\n    # But he must score at least x. So his actual maximum score is max(x, a[i] + b[j] for some i, j).\n    # Since we want the best rank, we assume Vasya takes the highest possible score he can get (a[i] + b[j] >= x).\n    # The problem statement guarantees Vasya was present and there exist i, j such that a[i] + b[j] >= x.\n    # To maximize his score, Vasya would take the highest a[i] and highest b[j].\n    # So Vasya's best score is a[n-1] + b[n-1].\n    # We need to count how many *other* pairs (a_k, b_l) can sum to a score strictly greater than Vasya's *worst* score.\n    # No, this is about Vasya's best possible rank.\n    # Vasya's best rank means he gets the highest possible score.\n    # He can achieve a score of a[i] + b[j] as long as a[i] + b[j] >= x.\n    # To maximize his rank, he wants to maximize his score. So he takes the largest possible sum, say S_vasya_max.\n    # S_vasya_max = a[n-1] + b[n-1].\n    # Then we count how many *other* participants could achieve a score >= S_vasya_max.\n    # This is tricky because the pairs are not fixed.\n    # Let's consider the maximum possible score any participant can get.\n    # This is a[n-1] + b[n-1]. Let's call this S_max.\n    # Vasya can achieve S_max if S_max >= x. (Which it is, since a[n-1] + b[n-1] is the largest possible sum, and it's guaranteed there's at least one pair >= x).\n    # So Vasya can achieve S_max.\n    # How many other participants can also achieve S_max?\n    # This is equivalent to finding the maximum number of participants that can achieve a score equal to S_max.\n    # This is still not quite right.\n    # The best rank means Vasya gets a score S_V, and there are as few people as possible with score > S_V or = S_V.\n    # To get the best rank, Vasya should try to get the highest possible score.\n    # The highest possible score for any participant is a[n-1] + b[n-1]. Let's call this `max_possible_total`.\n    # Vasya can achieve this score if he takes a[n-1] and b[n-1].\n    # This is guaranteed to be >= x because it's the largest sum.\n    # So Vasya's best score is `max_possible_total`.\n    # To find the best rank, we need to find how many *other* participants can achieve a score >= `max_possible_total`.\n    # Since `max_possible_total` is the maximum possible, no one can score strictly greater.\n    # So we just need to count how many participants can score exactly `max_possible_total`.\n    # This is equivalent to finding the maximum number of pairs (a_i, b_j) such that a_i + b_j = `max_possible_total`.\n    # This is a matching problem.\n    # To maximize the count of participants scoring `max_possible_total`, we pair up the largest a_i with b_j such that a_i + b_j = `max_possible_total`.\n    # This can be done greedily.\n    # Sort a in ascending order, b in ascending order.\n    # `max_possible_total = a[n-1] + b[n-1]`.\n    # Count how many pairs (a_i, b_j) can sum to `max_possible_total`.\n    # Use two pointers. `left_a` on sorted `a`, `right_b` on sorted `b`.\n    # If `a[left_a] + b[right_b] == max_possible_total`, we found a pair. Increment count, `left_a++`, `right_b--`.\n    # If `a[left_a] + b[right_b] < max_possible_total`, `left_a++`.\n    # If `a[left_a] + b[right_b] > max_possible_total`, `right_b--`.\n    # This approach counts the maximum number of pairs that sum to `max_possible_total`.\n    # Let this count be `k`. Vasya is one of these `k` people. So his best rank is 1.\n    # This logic is simpler: Vasya can always achieve the highest possible score (a[n-1] + b[n-1]).\n    # Since he is guaranteed to be in the Olympiad, he can take this score.\n    # No one can score higher. So his best rank is always 1.\n\n    best_rank = 1\n\n    # Calculate worst possible rank\n    # Vasya wants to minimize his score, but still >= x.\n    # Other participants want to maximize their scores.\n    # Vasya's score is a_vasya + b_vasya >= x.\n    # We need to count how many participants can score strictly greater than Vasya,\n    # plus how many can score equal to Vasya (if jury assigns them higher rank).\n    # To maximize Vasya's rank (make it as bad as possible), Vasya should take the smallest possible score >= x.\n    # And other participants should take the largest possible scores.\n    # This is a matching problem.\n    # We want to find a pairing (a_i, b_j) for Vasya such that a_i + b_j >= x, and this sum is minimized.\n    # Let this minimum sum be S_vasya_min.\n    # And we want to find a pairing for the remaining n-1 participants such that as many as possible have score > S_vasya_min,\n    # and then as many as possible have score = S_vasya_min.\n\n    # This is a greedy approach for worst rank:\n    # Vasya wants to get the lowest score possible (>= x).\n    # The other n-1 participants want to get the highest scores possible.\n    # Sort `a` and `b`.\n    # We want to find a pairing for `n` participants (including Vasya).\n    # We need to count how many pairs (a_i, b_j) can sum to a value S such that S >= x.\n    # This is a standard two-pointer problem.\n    # Sort `a` in ascending order. Sort `b` in descending order.\n    # Iterate through `a`. For each `a_i`, find `b_j` such that `a_i + b_j >= x`.\n    # To maximize the number of such pairs, we use a greedy approach.\n    # Sort `a` in ascending order. Sort `b` in descending order.\n    # We iterate `a_i` from smallest to largest. For each `a_i`, we try to pair it with the largest available `b_j` (from `b` sorted descending) such that `a_i + b_j >= x`.\n    # If we find such a `b_j`, we make a pair and remove both `a_i` and `b_j`.\n    # This maximizes the number of pairs that sum to at least `x`.\n    # The number of such pairs is `n_pairs_ge_x`.\n    # This `n_pairs_ge_x` is the maximum number of participants who can achieve a score of at least `x`.\n    # Vasya is one of these participants.\n    # The remaining `n - n_pairs_ge_x` participants will have scores less than `x`.\n    # So, the worst rank Vasya can get is `n - (n_pairs_ge_x - 1)` if Vasya is the \"last\" of the `n_pairs_ge_x` people.\n    # If all `n` participants can form pairs that sum to at least `x`, then `n_pairs_ge_x = n`.\n    # In this case, Vasya's worst rank could be `n`.\n    # This is not quite right. We need to find the number of people who can score *more* than Vasya, or *equal* to Vasya.\n\n    # Let's re-think worst rank.\n    # Vasya gets some score S_V >= x.\n    # We want to maximize the number of people who score > S_V or = S_V.\n    # This means Vasya should get the smallest possible score S_V >= x.\n    # And the other participants should get the largest possible scores.\n    # This implies a maximum matching problem where we want to maximize the number of pairs (a_i, b_j) that sum to at least x.\n    # The number of such pairs is the number of participants who can achieve at least x points.\n    # Let's call this `count_eligible_participants`.\n    # This `count_eligible_participants` is the number of people who can achieve a score >= x.\n    # Vasya is one of them.\n    # The remaining `n - count_eligible_participants` people will score less than x.\n    # So, Vasya's worst rank will be among these `count_eligible_participants` people.\n    # If all `n` participants can form pairs summing to at least `x`, then `count_eligible_participants = n`.\n    # In this scenario, Vasya's worst rank is `n`.\n    # If `count_eligible_participants < n`, then Vasya's worst rank is `count_eligible_participants`.\n    # This is because he is one of the `count_eligible_participants` people who got at least `x` points.\n    # The others got less than `x` points, so they are ranked after him.\n    # So the worst rank is `count_eligible_participants`.\n\n    # How to find `count_eligible_participants` (maximum number of pairs (a_i, b_j) such that a_i + b_j >= x)?\n    # Sort `a` in ascending order.\n    # Sort `b` in ascending order.\n    # Use two pointers: `left_a` starts at 0, `right_b` starts at `n-1`.\n    # `count = 0`\n    # While `left_a < n` and `right_b >= 0`:\n    #   If `a[left_a] + b[right_b] >= x`:\n    #     This `a[left_a]` can be paired with `b[right_b]`. This forms a valid pair.\n    #     Increment `count`.\n    #     Move `left_a` forward (this `a_i` is used).\n    #     Move `right_b` backward (this `b_j` is used).\n    #   Else (`a[left_a] + b[right_b] < x`):\n    #     `a[left_a]` is too small to form a sum >= x with `b[right_b]` (the largest available `b`).\n    #     So `a[left_a]` cannot form a sum >= x with any remaining `b_j` (since `b` is sorted, `b_j <= b[right_b]`).\n    #     So we must discard `a[left_a]` and move to the next `a`.\n    #     Move `left_a` forward.\n    # This greedy strategy works because by pairing the smallest available `a_i` with the largest available `b_j` to satisfy the condition,\n    # we leave larger `a` values and smaller `b` values for subsequent pairings,\n    # maximizing the chances for other pairs to also satisfy the condition.\n    # Example: a = [1, 2, 10], b = [1, 2, 10], x = 11\n    # Sorted a = [1, 2, 10], sorted b = [1, 2, 10]\n    # left_a = 0 (a[0]=1), right_b = 2 (b[2]=10)\n    # 1 + 10 = 11 >= x. count = 1. left_a = 1, right_b = 1.\n    # left_a = 1 (a[1]=2), right_b = 1 (b[1]=2)\n    # 2 + 2 = 4 < x. Move left_a. left_a = 2.\n    # left_a = 2 (a[2]=10), right_b = 1 (b[1]=2)\n    # 10 + 2 = 12 >= x. count = 2. left_a = 3, right_b = 0.\n    # Loop ends. count = 2.\n    # This means 2 participants can score >= x. Vasya is one of them. So his worst rank is 2.\n\n    count_eligible_participants = 0\n    left_a = 0\n    right_b = n - 1\n\n    while left_a < n and right_b >= 0:\n        if a[left_a] + b[right_b] >= x:\n            count_eligible_participants += 1\n            left_a += 1\n            right_b -= 1\n        else:\n            # a[left_a] is too small to form a sum >= x with b[right_b] (the largest available b).\n            # So a[left_a] cannot form a sum >= x with any remaining b.\n            # We must use a larger 'a' value or discard this 'a'.\n            # To maximize pairs, we discard this 'a' and try the next smallest 'a'.\n            left_a += 1\n    \n    worst_rank = count_eligible_participants\n\n    sys.stdout.write(f\"{best_rank} {worst_rank}\\n\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 872,
        "completion_token_count": 3411,
        "thoughts_token_count": 0
    }
}