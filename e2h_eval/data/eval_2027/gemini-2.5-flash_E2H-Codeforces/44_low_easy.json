{
    "start": 1758284894.9536078,
    "end": 1758284912.0035627,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Polycarp's Practice: A Python Solution**\n\nOkay, so I'm tackling Polycarp's Practice. The challenge is to split `n` problems across `k` days, maximizing the sum of the daily maximum difficulties. I need a Python solution, and I'm thinking...\n\nFirst, I need to fully grasp the problem. I've got `n` problems and `k` days. Each day tackles a contiguous sequence. The goal? Maximize total profit, which is the sum of daily maximums. The output should be the max profit, and how many problems are tackled per day.\n\nThere's an example: `n=8, k=3, a=[5,4,2,6,5,1,9,2]`.  The output is something like `[5, 4, 2], [6, 5], [1, 9, 2]`, leading to a profit of `5+6+9 = 20`.\n\nThe key insight is crucial. To get the biggest profit, I need to pick the largest problem difficulties to be the daily maximums. If I pick the `k` largest difficulties in the list of problems, their sum should be the maximum total profit. Sounds straightforward, right?\n\nSo, the algorithm is taking shape. First, find the `k` largest problem difficulties. Sum them up, that's the max profit. Now, the trickier part: figuring out the lengths of those `k` daily segments. I need to make sure each of the `k` largest problems serves as the daily maximum.\n\nHere's my thought process. I have the `k` largest values. I want the `k` largest values to be the *peak* difficulty for that day. So I need to keep track of their original indices. Then, I sort the `k` largest values by their original indices, and these are my \"split points\".\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # 1. Find the k largest difficulties and calculate their sum.\n    # Store (difficulty, original_index) pairs to keep track of positions.\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Sort in descending order of difficulty.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Take the top k difficulties.\n    top_k_difficulties = indexed_a[:k]\n\n    # Calculate the maximum total profit.\n    max_total_profit = sum(item[0] for item in top_k_difficulties)\n    sys.stdout.write(str(max_total_profit) + \"\\n\")\n\n    # 2. Determine the split points for the k days.\n    # The split points will be the indices of the k largest difficulties.\n    # Sort these indices to get them in ascending order.\n    split_indices = sorted([item[1] for item in top_k_difficulties])\n\n    # Calculate the number of problems for each day.\n    # The first day ends at the first split_index.\n    # The second day ends at the second split_index, starting after the first.\n    # And so on. The last day takes all remaining problems.\n    \n    daily_lengths = []\n    current_start_index = 0\n    for i in range(k - 1):\n        # The length of problems for this day is from current_start_index\n        # up to and including split_indices[i].\n        # So, the count is (split_indices[i] - current_start_index + 1).\n        length = split_indices[i] - current_start_index + 1\n        daily_lengths.append(length)\n        current_start_index = split_indices[i] + 1\n    \n    # The last day takes all remaining problems.\n    # From current_start_index to n-1.\n    last_day_length = n - current_start_index\n    daily_lengths.append(last_day_length)\n\n    # Print the daily lengths.\n    sys.stdout.write(\" \".join(map(str, daily_lengths)) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # 1. Find the k largest difficulties and calculate their sum.\n    # Store (difficulty, original_index) pairs to keep track of positions.\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Sort in descending order of difficulty.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Take the top k difficulties.\n    top_k_difficulties = indexed_a[:k]\n\n    # Calculate the maximum total profit.\n    max_total_profit = sum(item[0] for item in top_k_difficulties)\n    sys.stdout.write(str(max_total_profit) + \"\\n\")\n\n    # 2. Determine the split points for the k days.\n    # The split points will be the indices of the k largest difficulties.\n    # Sort these indices to get them in ascending order.\n    split_indices = sorted([item[1] for item in top_k_difficulties])\n\n    # Calculate the number of problems for each day.\n    # The first day ends at the first split_index.\n    # The second day ends at the second split_index, starting after the first.\n    # And so on. The last day takes all remaining problems.\n    \n    daily_lengths = []\n    current_start_index = 0\n    for i in range(k - 1):\n        # The length of problems for this day is from current_start_index\n        # up to and including split_indices[i].\n        # So, the count is (split_indices[i] - current_start_index + 1).\n        length = split_indices[i] - current_start_index + 1\n        daily_lengths.append(length)\n        current_start_index = split_indices[i] + 1\n    \n    # The last day takes all remaining problems.\n    # From current_start_index to n-1.\n    last_day_length = n - current_start_index\n    daily_lengths.append(last_day_length)\n\n    # Print the daily lengths.\n    sys.stdout.write(\" \".join(map(str, daily_lengths)) + \"\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 972,
        "completion_token_count": 567,
        "thoughts_token_count": 731
    }
}