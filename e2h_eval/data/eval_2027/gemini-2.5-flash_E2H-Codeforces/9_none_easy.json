{
    "start": 1758011390.3868732,
    "end": 1758011395.2336113,
    "start-formatted": "2025-09-16 17:29 KST",
    "end-formatted": "2025-09-16 17:29 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_w1 = []\n    items_w2 = []\n    items_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items_w1.append(c)\n        elif w == 2:\n            items_w2.append(c)\n        else:\n            items_w3.append(c)\n\n    items_w1.sort(reverse=True)\n    items_w2.sort(reverse=True)\n    items_w3.sort(reverse=True)\n\n    prefix_sum_w1 = [0] * (len(items_w1) + 1)\n    for i in range(len(items_w1)):\n        prefix_sum_w1[i+1] = prefix_sum_w1[i] + items_w1[i]\n\n    prefix_sum_w2 = [0] * (len(items_w2) + 1)\n    for i in range(len(items_w2)):\n        prefix_sum_w2[i+1] = prefix_sum_w2[i] + items_w2[i]\n\n    prefix_sum_w3 = [0] * (len(items_w3) + 1)\n    for i in range(len(items_w3)):\n        prefix_sum_w3[i+1] = prefix_sum_w3[i] + items_w3[i]\n\n    max_cost = 0\n\n    # Iterate over the number of items with weight 3\n    for k3 in range(len(items_w3) + 1):\n        current_weight_k3 = k3 * 3\n        current_cost_k3 = prefix_sum_w3[k3]\n\n        if current_weight_k3 > m:\n            break\n\n        remaining_weight = m - current_weight_k3\n\n        # Iterate over the number of items with weight 2\n        for k2 in range(len(items_w2) + 1):\n            current_weight_k2 = k2 * 2\n            current_cost_k2 = prefix_sum_w2[k2]\n\n            if current_weight_k2 > remaining_weight:\n                break\n\n            remaining_weight_for_w1 = remaining_weight - current_weight_k2\n            \n            # Use as many items with weight 1 as possible\n            k1 = min(len(items_w1), remaining_weight_for_w1)\n            current_cost_k1 = prefix_sum_w1[k1]\n\n            max_cost = max(max_cost, current_cost_k3 + current_cost_k2 + current_cost_k1)\n\n    sys.stdout.write(str(max_cost) + '\\n')\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_w1 = []\n    items_w2 = []\n    items_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items_w1.append(c)\n        elif w == 2:\n            items_w2.append(c)\n        else:\n            items_w3.append(c)\n\n    items_w1.sort(reverse=True)\n    items_w2.sort(reverse=True)\n    items_w3.sort(reverse=True)\n\n    prefix_sum_w1 = [0] * (len(items_w1) + 1)\n    for i in range(len(items_w1)):\n        prefix_sum_w1[i+1] = prefix_sum_w1[i] + items_w1[i]\n\n    prefix_sum_w2 = [0] * (len(items_w2) + 1)\n    for i in range(len(items_w2)):\n        prefix_sum_w2[i+1] = prefix_sum_w2[i] + items_w2[i]\n\n    prefix_sum_w3 = [0] * (len(items_w3) + 1)\n    for i in range(len(items_w3)):\n        prefix_sum_w3[i+1] = prefix_sum_w3[i] + items_w3[i]\n\n    max_cost = 0\n\n    # Iterate over the number of items with weight 3\n    for k3 in range(len(items_w3) + 1):\n        current_weight_k3 = k3 * 3\n        current_cost_k3 = prefix_sum_w3[k3]\n\n        if current_weight_k3 > m:\n            break\n\n        remaining_weight = m - current_weight_k3\n\n        # Iterate over the number of items with weight 2\n        for k2 in range(len(items_w2) + 1):\n            current_weight_k2 = k2 * 2\n            current_cost_k2 = prefix_sum_w2[k2]\n\n            if current_weight_k2 > remaining_weight:\n                break\n\n            remaining_weight_for_w1 = remaining_weight - current_weight_k2\n            \n            # Use as many items with weight 1 as possible\n            k1 = min(len(items_w1), remaining_weight_for_w1)\n            current_cost_k1 = prefix_sum_w1[k1]\n\n            max_cost = max(max_cost, current_cost_k3 + current_cost_k2 + current_cost_k1)\n\n    sys.stdout.write(str(max_cost) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 496,
        "completion_token_count": 698,
        "thoughts_token_count": 0
    }
}