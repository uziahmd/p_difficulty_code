{
    "start": 1758011305.143078,
    "end": 1758011318.4670777,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: m = 2 (1 + k + k^2 vertices)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Use quadratic formula: k = (-1 +/- sqrt(1 - 4(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square.\n    # Let 4n - 3 = s^2. Then s must be odd.\n    # s = 2x + 1 for some integer x >= 0\n    # k = (-1 + s) / 2. Since k > 1, -1 + s > 2, so s > 3.\n    # s must be an integer, s > 3, and s^2 = 4n - 3.\n    # Check if 4n - 3 is a perfect square.\n    s_squared = 4 * n - 3\n    s = int(s_squared**0.5)\n    if s * s == s_squared and s > 3 and (s - 1) % 2 == 0:\n        k = (s - 1) // 2\n        if k > 1:\n            print(\"YES\")\n            return\n\n    # Case 2: m >= 3 (1 + k + k^2 + ... + k^m vertices)\n    # n = (k^(m+1) - 1) / (k - 1)\n    # n * (k - 1) = k^(m+1) - 1\n    # n*k - n = k^(m+1) - 1\n    # k^(m+1) - n*k + (n - 1) = 0\n    # We need to find if there exists an integer k > 1 and m >= 3 such that this equation holds.\n\n    # Iterate over possible values of m (number of steps after initial)\n    # The minimum m is 2 (3 levels of vertices).\n    # The problem states \"This step should be done at least once\".\n    # The initial vertex is connected to k new vertices (level 1).\n    # Each vertex connected to only one other vertex (level 1 vertices) is connected to k more new vertices (level 2).\n    # This is one step.\n    # So a snowflake with m steps means 1 + k + k^2 + ... + k^m vertices.\n    # The smallest snowflake is m=2 (1 + k + k^2).\n    # So we need to check m >= 3 for this part. (m=2 is handled by quadratic formula)\n    # The maximum value for m can be estimated.\n    # For k=2, n = 2^(m+1) - 1. So 2^(m+1) = n+1. m+1 = log2(n+1).\n    # For n = 10^18, m+1 approx log2(10^18) approx 18 * log2(10) approx 18 * 3.32 approx 59.79.\n    # So m can go up to about 58.\n\n    for m in range(3, 60): # m is the exponent of the highest power of k\n        # For a fixed m, we need to find if there's an integer k > 1\n        # such that n = 1 + k + k^2 + ... + k^m.\n        # This is equivalent to n = (k^(m+1) - 1) / (k - 1).\n\n        # Binary search for k\n        # Lower bound for k is 2.\n        # Upper bound for k:\n        # k^m < n\n        # k < n^(1/m)\n        # So k_max = floor(n^(1/m)) + 2 (add some buffer)\n        low = 2\n        high = int(n**(1/m)) + 2\n        if high > 2 * 10**9: # Prevent overflow for very large high values in `pows` calculation\n            high = 2 * 10**9\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            pows = 1 # k^0\n            \n            # Calculate 1 + k + k^2 + ... + k^m\n            # Check for overflow during summation\n            overflow = False\n            for _ in range(m + 1):\n                current_sum += pows\n                if current_sum > n: # Sum exceeds n, k is too large\n                    overflow = True\n                    break\n                if _ < m: # Prepare for next power, avoid overflow for last pows * mid\n                    if n // mid < pows: # pows * mid would overflow\n                        overflow = True\n                        break\n                    pows *= mid\n\n            if overflow:\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n (this case should be covered by overflow or high = mid - 1)\n                high = mid - 1\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: m = 2 (1 + k + k^2 vertices)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Use quadratic formula: k = (-1 +/- sqrt(1 - 4(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square.\n    # Let 4n - 3 = s^2. Then s must be odd.\n    # s = 2x + 1 for some integer x >= 0\n    # k = (-1 + s) / 2. Since k > 1, -1 + s > 2, so s > 3.\n    # s must be an integer, s > 3, and s^2 = 4n - 3.\n    # Check if 4n - 3 is a perfect square.\n    s_squared = 4 * n - 3\n    s = int(s_squared**0.5)\n    if s * s == s_squared and s > 3 and (s - 1) % 2 == 0:\n        k = (s - 1) // 2\n        if k > 1:\n            print(\"YES\")\n            return\n\n    # Case 2: m >= 3 (1 + k + k^2 + ... + k^m vertices)\n    # n = (k^(m+1) - 1) / (k - 1)\n    # n * (k - 1) = k^(m+1) - 1\n    # n*k - n = k^(m+1) - 1\n    # k^(m+1) - n*k + (n - 1) = 0\n    # We need to find if there exists an integer k > 1 and m >= 3 such that this equation holds.\n\n    # Iterate over possible values of m (number of steps after initial)\n    # The minimum m is 2 (3 levels of vertices).\n    # The problem states \"This step should be done at least once\".\n    # The initial vertex is connected to k new vertices (level 1).\n    # Each vertex connected to only one other vertex (level 1 vertices) is connected to k more new vertices (level 2).\n    # This is one step.\n    # So a snowflake with m steps means 1 + k + k^2 + ... + k^m vertices.\n    # The smallest snowflake is m=2 (1 + k + k^2).\n    # So we need to check m >= 3 for this part. (m=2 is handled by quadratic formula)\n    # The maximum value for m can be estimated.\n    # For k=2, n = 2^(m+1) - 1. So 2^(m+1) = n+1. m+1 = log2(n+1).\n    # For n = 10^18, m+1 approx log2(10^18) approx 18 * log2(10) approx 18 * 3.32 approx 59.79.\n    # So m can go up to about 58.\n\n    for m in range(3, 60): # m is the exponent of the highest power of k\n        # For a fixed m, we need to find if there's an integer k > 1\n        # such that n = 1 + k + k^2 + ... + k^m.\n        # This is equivalent to n = (k^(m+1) - 1) / (k - 1).\n\n        # Binary search for k\n        # Lower bound for k is 2.\n        # Upper bound for k:\n        # k^m < n\n        # k < n^(1/m)\n        # So k_max = floor(n^(1/m)) + 2 (add some buffer)\n        low = 2\n        high = int(n**(1/m)) + 2\n        if high > 2 * 10**9: # Prevent overflow for very large high values in `pows` calculation\n            high = 2 * 10**9\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            pows = 1 # k^0\n            \n            # Calculate 1 + k + k^2 + ... + k^m\n            # Check for overflow during summation\n            overflow = False\n            for _ in range(m + 1):\n                current_sum += pows\n                if current_sum > n: # Sum exceeds n, k is too large\n                    overflow = True\n                    break\n                if _ < m: # Prepare for next power, avoid overflow for last pows * mid\n                    if n // mid < pows: # pows * mid would overflow\n                        overflow = True\n                        break\n                    pows *= mid\n\n            if overflow:\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n (this case should be covered by overflow or high = mid - 1)\n                high = mid - 1\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 1347,
        "thoughts_token_count": 0
    }
}