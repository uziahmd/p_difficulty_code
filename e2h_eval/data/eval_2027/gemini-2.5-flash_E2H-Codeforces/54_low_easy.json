{
    "start": 1758284881.1901686,
    "end": 1758284895.3280597,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Solving the Mister B and Angle in Polygon Problem**\n\nOkay, so I'm tackling this \"Mister B and Angle in Polygon\" problem. The core is finding three vertices in a regular n-gon that form an angle closest to a given target angle, 'a'. I know the inputs are 'n' (number of sides, and vertices), and 'a' (the desired angle). The output will be the indices of those three vertices.\n\nMy initial thought is to leverage the geometry of regular polygons and inscribed angles. Since it's a regular n-gon, all vertices lie on a circumcircle. The key insight is that the angle formed by three vertices within the polygon (an inscribed angle) is half the measure of the arc it subtends on the circumcircle.\n\nI'm thinking about fixing one vertex, say vertex 2, for simplicity. I can then consider all possible pairs of vertices v1 and v3. The central angle is crucial here, since the inscribed angle will be half its measure. The central angle subtended by any arc is calculated from the number of \"steps\" (polygon sides) between the two vertices forming the arc, multiplied by 360/n degrees per side.\n\nLet's rephrase this in more concrete terms: say we fix v2 as vertex 'i'. Then v1 and v3 can vary as vertices 'j' and 'k', respectively. The arc connecting j and k (and not containing i) then determines the inscribed angle at i (i.e., j-i-k). The number of steps between vertices j and k, going the shortest distance (either clockwise or counter-clockwise), determines the central angle. I need to calculate this inscribed angle for all possible pairs (j,k) to find the closest match to 'a'.\n\nHowever, there's a slight flaw in my current understanding: it seems fixing v2 at a specific index isn't the most efficient strategy. Rotating the polygon won't change any angle relationships. So, fixing v2 as vertex 1 seems like a good starting point, and I can then iterate through possible positions for vertices v1 and v3 (keeping in mind that they must be distinct from v2) and calculate the difference to 'a' to minimize error. I believe this logic will help me solve the problem efficiently. Now, time to translate this into Python!\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    # v2 is fixed as vertex 2.\n    # v1 is fixed as vertex 1.\n    v2_idx = 2\n    v1_idx = 1\n\n    # We need to find v3_idx (from 3 to n) such that angle(v1_idx, v2_idx, v3_idx)\n    # is closest to 'a'.\n    # The angle formed at v2 is (k-1) * (180 / n) degrees, where k is the\n    # number of steps between v1 and v3 along the perimeter, not passing through v2.\n    # If v1=1, v2=2, then v3 is some vertex 'i' (3 <= i <= n).\n    # The number of steps between v1 (vertex 1) and v3 (vertex i) is (i-1).\n    # So the angle is (i-1-1) * (180 / n) = (i-2) * (180 / n) for i from 3 to n.\n    # Let k = i-2. Then k ranges from 1 to n-2.\n    # The possible angles are k * (180 / n) for k = 1, 2, ..., n-2.\n\n    # Calculate the base angle unit\n    angle_unit = 180.0 / n\n\n    # The target angle 'a' can be expressed as a multiple of angle_unit: a = k * angle_unit\n    # So, k_target = a / angle_unit.\n    k_target = a / angle_unit\n\n    # We need to find an integer k (1 <= k <= n-2) that is closest to k_target.\n    # Let's consider two candidate k values: floor(k_target) and ceil(k_target).\n\n    # Candidate 1: k_floor = floor(k_target)\n    k_floor = int(k_target)\n\n    # Ensure k_floor is within the valid range [1, n-2]\n    k_floor = max(1, min(n - 2, k_floor))\n\n    # Candidate 2: k_ceil = ceil(k_target)\n    k_ceil = int(k_target + 0.999999999999) # Small epsilon to handle float precision for exact integers\n    if k_ceil == k_target: # If k_target is an integer, k_ceil will be equal to k_floor.\n        k_ceil = k_floor + 1 # In this case, consider the next integer if it's within bounds.\n    \n    # Ensure k_ceil is within the valid range [1, n-2]\n    k_ceil = max(1, min(n - 2, k_ceil))\n\n    # Calculate the actual angles for these k values\n    angle_floor = k_floor * angle_unit\n    angle_ceil = k_ceil * angle_unit\n\n    # Determine which angle is closer to 'a'\n    diff_floor = abs(angle_floor - a)\n    diff_ceil = abs(angle_ceil - a)\n\n    best_k = k_floor\n    if diff_ceil < diff_floor:\n        best_k = k_ceil\n    elif diff_ceil == diff_floor and k_ceil < k_floor: # If equal, prefer smaller k (which means smaller v3_idx)\n        best_k = k_ceil\n\n    # Convert best_k back to v3_idx\n    # We established that best_k = v3_idx - 2.\n    # So, v3_idx = best_k + 2.\n    v3_idx = best_k + 2\n\n    sys.stdout.write(f\"{v1_idx} {v2_idx} {v3_idx}\\n\")\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    # v2 is fixed as vertex 2.\n    # v1 is fixed as vertex 1.\n    v2_idx = 2\n    v1_idx = 1\n\n    # We need to find v3_idx (from 3 to n) such that angle(v1_idx, v2_idx, v3_idx)\n    # is closest to 'a'.\n    # The angle formed at v2 is (k-1) * (180 / n) degrees, where k is the\n    # number of steps between v1 and v3 along the perimeter, not passing through v2.\n    # If v1=1, v2=2, then v3 is some vertex 'i' (3 <= i <= n).\n    # The number of steps between v1 (vertex 1) and v3 (vertex i) is (i-1).\n    # So the angle is (i-1-1) * (180 / n) = (i-2) * (180 / n) for i from 3 to n.\n    # Let k = i-2. Then k ranges from 1 to n-2.\n    # The possible angles are k * (180 / n) for k = 1, 2, ..., n-2.\n\n    # Calculate the base angle unit\n    angle_unit = 180.0 / n\n\n    # The target angle 'a' can be expressed as a multiple of angle_unit: a = k * angle_unit\n    # So, k_target = a / angle_unit.\n    k_target = a / angle_unit\n\n    # We need to find an integer k (1 <= k <= n-2) that is closest to k_target.\n    # Let's consider two candidate k values: floor(k_target) and ceil(k_target).\n\n    # Candidate 1: k_floor = floor(k_target)\n    k_floor = int(k_target)\n\n    # Ensure k_floor is within the valid range [1, n-2]\n    k_floor = max(1, min(n - 2, k_floor))\n\n    # Candidate 2: k_ceil = ceil(k_target)\n    k_ceil = int(k_target + 0.999999999999) # Small epsilon to handle float precision for exact integers\n    if k_ceil == k_target: # If k_target is an integer, k_ceil will be equal to k_floor.\n        k_ceil = k_floor + 1 # In this case, consider the next integer if it's within bounds.\n    \n    # Ensure k_ceil is within the valid range [1, n-2]\n    k_ceil = max(1, min(n - 2, k_ceil))\n\n    # Calculate the actual angles for these k values\n    angle_floor = k_floor * angle_unit\n    angle_ceil = k_ceil * angle_unit\n\n    # Determine which angle is closer to 'a'\n    diff_floor = abs(angle_floor - a)\n    diff_ceil = abs(angle_ceil - a)\n\n    best_k = k_floor\n    if diff_ceil < diff_floor:\n        best_k = k_ceil\n    elif diff_ceil == diff_floor and k_ceil < k_floor: # If equal, prefer smaller k (which means smaller v3_idx)\n        best_k = k_ceil\n\n    # Convert best_k back to v3_idx\n    # We established that best_k = v3_idx - 2.\n    # So, v3_idx = best_k + 2.\n    v3_idx = best_k + 2\n\n    sys.stdout.write(f\"{v1_idx} {v2_idx} {v3_idx}\\n\")\n\nif __name__ == '__main__':\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 738,
        "completion_token_count": 926,
        "thoughts_token_count": 819
    }
}