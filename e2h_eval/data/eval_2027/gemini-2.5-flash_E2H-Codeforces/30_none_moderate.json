{
    "start": 1758293832.3011632,
    "end": 1758293841.9971678,
    "start-formatted": "2025-09-19 23:57 KST",
    "end-formatted": "2025-09-19 23:57 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n = int(input())\n    a_str = input()\n\n    # dp[i][j] stores the maximum sum of numbers S1 + S2\n    # when i digits have been taken by Homer and j digits by Marge.\n    # The state also stores the string representation of S1 and S2\n    # to reconstruct the path.\n    # dp[i][j] = (max_sum, s1_str, s2_str, path_str)\n    dp = {}\n    dp[0, 0] = (0, \"\", \"\", \"\")\n\n    for total_moves in range(2 * n):\n        for i in range(total_moves + 1):\n            j = total_moves - i\n\n            if (i, j) not in dp:\n                continue\n\n            current_sum, s1_prefix, s2_prefix, current_path = dp[i, j]\n            next_digit = a_str[total_moves]\n\n            # Homer's turn\n            if i < n:\n                new_s1_str = s1_prefix + next_digit\n                new_s2_str = s2_prefix\n                new_path = current_path + 'H'\n\n                # Calculate the value of the new numbers\n                # We need to treat them as numbers for the final sum\n                # but build them as strings to avoid overflow during intermediate steps\n                # and to correctly handle leading zeros.\n                # The problem statement implies we are calculating the value of the final numbers S1 and S2.\n                # Since S1 and S2 can be very large, we cannot store their actual integer values directly.\n                # However, the problem states \"first player gets S1 dollars, and the second gets S2 dollars.\"\n                # This means we need to maximize S1 + S2.\n                # The total sum S1 + S2 is equivalent to the number formed by concatenating all digits in A,\n                # but with different place values.\n                # Example: A = 1234, n=2\n                # HHMM: S1=12, S2=34. Sum = 12+34=46\n                # HMHM: S1=13, S2=24. Sum = 13+24=37\n                # The problem is about maximizing the sum of two numbers, each formed by n digits.\n                # The digits are taken from A in order.\n                # Let's consider the actual value of S1 and S2.\n                # If S1 has digits d_k ... d_1 d_0, its value is sum(d_i * 10^i).\n                # The maximum length of S1 or S2 is n=18. So 18 digits.\n                # A number with 18 digits can be up to 10^18 - 1, which fits in standard integer types.\n                # Python integers handle arbitrary size, so we can convert to int.\n\n                # Update for Homer\n                if (i + 1, j) not in dp or (int(new_s1_str) + int(new_s2_str) > dp[i + 1, j][0]):\n                    dp[i + 1, j] = (int(new_s1_str) + int(new_s2_str), new_s1_str, new_s2_str, new_path)\n\n            # Marge's turn\n            if j < n:\n                new_s1_str = s1_prefix\n                new_s2_str = s2_prefix + next_digit\n                new_path = current_path + 'M'\n\n                # Update for Marge\n                if (i, j + 1) not in dp or (int(new_s1_str) + int(new_s2_str) > dp[i, j + 1][0]):\n                    dp[i, j + 1] = (int(new_s1_str) + int(new_s2_str), new_s1_str, new_s2_str, new_path)\n\n    # The final state is when both players have made n moves.\n    final_sum, final_s1, final_s2, final_path = dp[n, n]\n    print(final_path)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n = int(input())\n    a_str = input()\n\n    # dp[i][j] stores the maximum sum of numbers S1 + S2\n    # when i digits have been taken by Homer and j digits by Marge.\n    # The state also stores the string representation of S1 and S2\n    # to reconstruct the path.\n    # dp[i][j] = (max_sum, s1_str, s2_str, path_str)\n    dp = {}\n    dp[0, 0] = (0, \"\", \"\", \"\")\n\n    for total_moves in range(2 * n):\n        for i in range(total_moves + 1):\n            j = total_moves - i\n\n            if (i, j) not in dp:\n                continue\n\n            current_sum, s1_prefix, s2_prefix, current_path = dp[i, j]\n            next_digit = a_str[total_moves]\n\n            # Homer's turn\n            if i < n:\n                new_s1_str = s1_prefix + next_digit\n                new_s2_str = s2_prefix\n                new_path = current_path + 'H'\n\n                # Calculate the value of the new numbers\n                # We need to treat them as numbers for the final sum\n                # but build them as strings to avoid overflow during intermediate steps\n                # and to correctly handle leading zeros.\n                # The problem statement implies we are calculating the value of the final numbers S1 and S2.\n                # Since S1 and S2 can be very large, we cannot store their actual integer values directly.\n                # However, the problem states \"first player gets S1 dollars, and the second gets S2 dollars.\"\n                # This means we need to maximize S1 + S2.\n                # The total sum S1 + S2 is equivalent to the number formed by concatenating all digits in A,\n                # but with different place values.\n                # Example: A = 1234, n=2\n                # HHMM: S1=12, S2=34. Sum = 12+34=46\n                # HMHM: S1=13, S2=24. Sum = 13+24=37\n                # The problem is about maximizing the sum of two numbers, each formed by n digits.\n                # The digits are taken from A in order.\n                # Let's consider the actual value of S1 and S2.\n                # If S1 has digits d_k ... d_1 d_0, its value is sum(d_i * 10^i).\n                # The maximum length of S1 or S2 is n=18. So 18 digits.\n                # A number with 18 digits can be up to 10^18 - 1, which fits in standard integer types.\n                # Python integers handle arbitrary size, so we can convert to int.\n\n                # Update for Homer\n                if (i + 1, j) not in dp or (int(new_s1_str) + int(new_s2_str) > dp[i + 1, j][0]):\n                    dp[i + 1, j] = (int(new_s1_str) + int(new_s2_str), new_s1_str, new_s2_str, new_path)\n\n            # Marge's turn\n            if j < n:\n                new_s1_str = s1_prefix\n                new_s2_str = s2_prefix + next_digit\n                new_path = current_path + 'M'\n\n                # Update for Marge\n                if (i, j + 1) not in dp or (int(new_s1_str) + int(new_s2_str) > dp[i, j + 1][0]):\n                    dp[i, j + 1] = (int(new_s1_str) + int(new_s2_str), new_s1_str, new_s2_str, new_path)\n\n    # The final state is when both players have made n moves.\n    final_sum, final_s1, final_s2, final_path = dp[n, n]\n    print(final_path)\n\nsolve()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 432,
        "completion_token_count": 995,
        "thoughts_token_count": 0
    }
}