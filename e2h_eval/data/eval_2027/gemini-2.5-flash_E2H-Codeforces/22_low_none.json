{
    "start": 1758284848.1362662,
    "end": 1758284858.7504508,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Thinking Through the \"Marks\" Problem in Python**\n\nOkay, so I've got this \"Marks\" problem.  It looks like a straightforward competitive programming challenge. I need a Python script to solve it, and I'm breaking down the thought process to get there.\n\nFirst, I need to get the input: `n` students, `m` subjects, and a list of the marks each student received for each subject. It'll be easiest to represent the marks as a 2D list or a list of strings where each string is a student's marks.  Let's go with a list of strings called `gradebook`.  Each element of this list, e.g., `gradebook[student_idx]`, will be a string of characters representing the marks. I'll need to remember to convert these characters to integers when I compare them.\n\nThe key concepts are \"best at a subject\" and \"successful student\". A student is \"best\" at a subject if their mark is the maximum for that subject. A student is \"successful\" if they are the best at *at least one* subject.  So, I need to find the maximum mark for each subject.\n\nTo do that, I'll iterate through each subject (column) and then each student (row) to find the maximum mark for each subject. I can store these maximums in a list called `max_marks_per_subject`.  I'll probably iterate through the columns and rows like so, `max_marks_per_subject[subject_idx] = max(int(gradebook[student_idx][subject_idx]) for student_idx in range(n))`.\n\nNext, I have to figure out who's successful.  I'll initialize a counter, `successful_students_count`, to zero. I'll also use a boolean list, `is_successful`, of size `n`, initially all `False`, to keep track of students I've already determined are successful.  I'll go through each student and then each subject, comparing the student's mark for that subject to the maximum mark for that subject. If they're equal, that student is best at that subject, and therefore successful. I can set `is_successful[student_idx] = True` and break out of the inner loop, since I only need *one* subject to make them successful.\n\nFinally, I'll count up the `True` values in the `is_successful` list, which will give me the total number of successful students. That's my output.\n\nLet me walk through the provided example to make sure this logic holds. It looks like the solution is working. I'm ready to write the code!\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # Find the maximum mark for each subject\n    max_marks_per_subject = [0] * m\n    for j in range(m):  # Iterate through subjects\n        current_max = 0\n        for i in range(n):  # Iterate through students\n            mark = int(gradebook[i][j])\n            if mark > current_max:\n                current_max = mark\n        max_marks_per_subject[j] = current_max\n\n    # Determine successful students\n    successful_students = [False] * n\n    for i in range(n):  # Iterate through students\n        for j in range(m):  # Iterate through subjects\n            mark = int(gradebook[i][j])\n            if mark == max_marks_per_subject[j]:\n                successful_students[i] = True\n                break # This student is best at at least one subject, no need to check further subjects for this student\n\n    # Count the number of successful students\n    count = 0\n    for is_successful in successful_students:\n        if is_successful:\n            count += 1\n\n    sys.stdout.write(str(count) + '\\n')\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # Find the maximum mark for each subject\n    max_marks_per_subject = [0] * m\n    for j in range(m):  # Iterate through subjects\n        current_max = 0\n        for i in range(n):  # Iterate through students\n            mark = int(gradebook[i][j])\n            if mark > current_max:\n                current_max = mark\n        max_marks_per_subject[j] = current_max\n\n    # Determine successful students\n    successful_students = [False] * n\n    for i in range(n):  # Iterate through students\n        for j in range(m):  # Iterate through subjects\n            mark = int(gradebook[i][j])\n            if mark == max_marks_per_subject[j]:\n                successful_students[i] = True\n                break # This student is best at at least one subject, no need to check further subjects for this student\n\n    # Count the number of successful students\n    count = 0\n    for is_successful in successful_students:\n        if is_successful:\n            count += 1\n\n    sys.stdout.write(str(count) + '\\n')\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 458,
        "completion_token_count": 359,
        "thoughts_token_count": 929
    }
}