{
    "start": 1758284833.2040892,
    "end": 1758284848.1357796,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 21,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko Finds Grapes\n\nOn a random day, Neko found $$$n$$$ treasure chests and $$$m$$$ keys. The $$$i$$$-th chest has an integer $$$a_i$$$ written on it and the $$$j$$$-th key has an integer $$$b_j$$$ on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.The $$$j$$$-th key can be used to unlock the $$$i$$$-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, $$$a_i + b_j \\equiv 1 \\pmod{2}$$$. One key can be used to open at most one chest, and one chest can be opened at most once.Find the maximum number of chests Neko can open.\n\n## Input\nThe first line contains integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^5$$$) — the number of chests and the number of keys.The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the numbers written on the treasure chests.The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$) — the numbers written on the keys.\n\n## Output\nPrint the maximum number of chests you can open.\n\n## Example\n### Input\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\n### Output\n['3', '1', '0']\n\n## Note\nIn the first example, one possible way to unlock $$$3$$$ chests is as follows:  Use first key to unlock the fifth chest,  Use third key to unlock the second chest,  Use fourth key to unlock the first chest. In the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).In the third example, no key can unlock the given chest.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Problem Decomposition and Strategic Approach**\n\nOkay, so I'm tackling this \"Neko Finds Grapes\" problem, and here's how I'm breaking it down.  The core of it is matching chests to keys based on parity: even chests need odd keys, and vice versa. The goal is to maximize the number of successful pairings.\n\nThe first step is to quickly analyze the core constraint:  `a_i + b_j` must be odd. This immediately translates to the requirement of *different parities* between chest and key.  This means I need to count how many even/odd chests and how many even/odd keys I have.\n\nMy strategy?  It's a greedy approach, and the plan is to maximize matches independently for even/odd pairs. I'll make sure to prioritize the most matches possible in this manner.\n\nI'm thinking,  I can create variables like `chests_even`, `chests_odd`, `keys_even`, and `keys_odd` to represent these counts. Then, I'll calculate the matches for each type:\n\n1.  `matches_even_chests = min(chests_even, keys_odd)` (How many even chests can be opened by odd keys?)\n2.  `matches_odd_chests = min(chests_odd, keys_even)` (How many odd chests can be opened by even keys?)\n\nThe total number of open chests will then just be the sum of these two counts, right? It's straightforward: `total_opened_chests = matches_even_chests + matches_odd_chests`.\n\nLet's quickly run through the given example to make sure this logic holds. It looks like my mental model is sound for the sample input provided. I'm ready to code this up as a Python script!\n",
    "response": "The problem asks us to find the maximum number of treasure chests Neko can open given `n` chests with numbers `a_i` and `m` keys with numbers `b_j`. A key `b_j` can open a chest `a_i` if and only if their sum `a_i + b_j` is an odd number. Each key can be used at most once, and each chest can be opened at most once.\n\nThe condition `a_i + b_j \\equiv 1 \\pmod{2}` means that the sum of the chest number and the key number must be odd. This occurs in two scenarios:\n1.  `a_i` is even and `b_j` is odd (even + odd = odd).\n2.  `a_i` is odd and `b_j` is even (odd + even = odd).\n\nIn simpler terms, a key can open a chest if and only if they have **different parities**.\n\nTo maximize the number of opened chests, we should count the number of even and odd chests, and the number of even and odd keys.\n\nLet:\n*   `chests_even`: The count of chests with an even number.\n*   `chests_odd`: The count of chests with an odd number.\n*   `keys_even`: The count of keys with an even number.\n*   `keys_odd`: The count of keys with an odd number.\n\nWe can form two independent sets of matches:\n1.  **Matching even chests with odd keys:** An even chest can only be opened by an odd key. The maximum number of such matches is limited by the number of available even chests and the number of available odd keys. So, the number of even chests opened will be `min(chests_even, keys_odd)`.\n2.  **Matching odd chests with even keys:** An odd chest can only be opened by an even key. Similarly, the maximum number of such matches is limited by the number of available odd chests and the number of available even keys. So, the number of odd chests opened will be `min(chests_odd, keys_even)`.\n\nThe total maximum number of chests Neko can open is the sum of these two independent counts:\n`total_opened_chests = min(chests_even, keys_odd) + min(chests_odd, keys_even)`.\n\n**Algorithm:**\n1.  Read `n` and `m`.\n2.  Initialize `chests_even = 0`, `chests_odd = 0`.\n3.  Read the `n` chest numbers `a_i`. For each `a_i`:\n    *   If `a_i % 2 == 0`, increment `chests_even`.\n    *   Else, increment `chests_odd`.\n4.  Initialize `keys_even = 0`, `keys_odd = 0`.\n5.  Read the `m` key numbers `b_j`. For each `b_j`:\n    *   If `b_j % 2 == 0`, increment `keys_even`.\n    *   Else, increment `keys_odd`.\n6.  Calculate `result = min(chests_even, keys_odd) + min(chests_odd, keys_even)`.\n7.  Print `result`.\n\nThis approach is efficient because it only requires iterating through the chest numbers and key numbers once to count parities, and then a constant number of operations to calculate the final result. The time complexity will be O(N + M), which is well within the limits for N, M <= 10^5.\n\n```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    \n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    \n    chests_even = 0\n    chests_odd = 0\n    \n    for x in a:\n        if x % 2 == 0:\n            chests_even += 1\n        else:\n            chests_odd += 1\n            \n    keys_even = 0\n    keys_odd = 0\n    \n    for x in b:\n        if x % 2 == 0:\n            keys_even += 1\n        else:\n            keys_odd += 1\n            \n    # Number of even chests that can be opened by odd keys\n    matches_even_chests = min(chests_even, keys_odd)\n    \n    # Number of odd chests that can be opened by even keys\n    matches_odd_chests = min(chests_odd, keys_even)\n    \n    print(matches_even_chests + matches_odd_chests)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    \n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    \n    chests_even = 0\n    chests_odd = 0\n    \n    for x in a:\n        if x % 2 == 0:\n            chests_even += 1\n        else:\n            chests_odd += 1\n            \n    keys_even = 0\n    keys_odd = 0\n    \n    for x in b:\n        if x % 2 == 0:\n            keys_even += 1\n        else:\n            keys_odd += 1\n            \n    # Number of even chests that can be opened by odd keys\n    matches_even_chests = min(chests_even, keys_odd)\n    \n    # Number of odd chests that can be opened by even keys\n    matches_odd_chests = min(chests_odd, keys_even)\n    \n    print(matches_even_chests + matches_odd_chests)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 622,
        "completion_token_count": 1081,
        "thoughts_token_count": 923
    }
}