{
    "start": 1758293707.997746,
    "end": 1758293723.3848026,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2\n    v2 = 2\n\n    # Iterate through possible v1 (from 1 to n)\n    # The angle formed by (v1, v2, v3) is determined by the number of vertices\n    # between v1 and v3 (excluding v1 and v3) when measured along the polygon perimeter.\n    # If v2 is the central vertex, and v1 and v3 are on its sides,\n    # the angle at v2 is formed by two chords v2-v1 and v2-v3.\n    # In a regular n-gon inscribed in a circle, the angle subtended by a chord\n    # at any point on the circumference is half the angle subtended at the center.\n    # The angle between two chords v2-v1 and v2-v3 is given by\n    # (number of vertices between v1 and v3 on the arc not containing v2) * (180 / n).\n    #\n    # Let's fix v2 = 2.\n    # The angle at v2 is formed by chords (v2, v1) and (v2, v3).\n    # The central angle subtended by one side of the polygon is 360/n.\n    # The angle at a vertex of the inscribed polygon is (k * 180 / n),\n    # where k is the number of sides (or vertices) between v1 and v3 along the arc not containing v2.\n    #\n    # For a regular n-gon, if we fix one vertex as v2, and another as v1,\n    # then v3 can be any other vertex.\n    # The angle at v2 formed by v1-v2-v3 is determined by the number of vertices\n    # on the arc from v1 to v3 that does not contain v2.\n    # Let's say v1 is at index i, v2 at index j, v3 at index k.\n    # We can normalize by setting v2 to 2.\n    # Then v1 can be 1, and v3 can be from 3 to n.\n    # The angle formed by (v1, v2, v3) where v2 is the vertex is\n    # (number of sides between v1 and v3, along the arc not containing v2) * (180 / n).\n    #\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of sides between v1=1 and v3=k (where k > 2) is k-1-1 = k-2.\n    # So the angle is (k-2) * (180 / n).\n    # We need to find k (from 3 to n) that minimizes | (k-2) * (180 / n) - a |.\n\n    v1 = 1\n    # v2 is fixed as 2\n    # v3 can range from 3 to n\n    # The angle formed is (v3 - v1 - 1) * (180 / n)\n    # In other words, the angle at vertex v2 is formed by chords v2-v1 and v2-v3.\n    # The number of polygon sides spanned by the arc v1-v3 (not passing through v2) is (v3 - v1 - 1).\n    # This is equivalent to (v3 - 2) when v1=1 and v2=2.\n    # So the possible angles are (k-2) * (180 / n) for k from 3 to n.\n    # Let m = k-2. Then m ranges from 1 to n-2.\n    # The possible angles are m * (180 / n) for m = 1, 2, ..., n-2.\n\n    # We want to find m in [1, n-2] such that |m * (180 / n) - a| is minimized.\n    # Let target_angle_val = a.\n    # We are looking for m such that m * (180 / n) is closest to a.\n    # This is equivalent to finding m such that m is closest to a * (n / 180).\n    # Let target_m_float = a * n / 180.\n\n    target_m_float = a * n / 180.0\n\n    # Check m = floor(target_m_float) and m = ceil(target_m_float)\n    # Ensure m is within [1, n-2]\n\n    m_candidate1 = int(target_m_float)\n    m_candidate2 = int(target_m_float) + 1\n\n    candidates_m = []\n    if 1 <= m_candidate1 <= n - 2:\n        candidates_m.append(m_candidate1)\n    if 1 <= m_candidate2 <= n - 2 and m_candidate2 != m_candidate1:\n        candidates_m.append(m_candidate2)\n\n    # If target_m_float is outside [1, n-2], we just take the closest valid boundary.\n    if not candidates_m:\n        if target_m_float < 1:\n            candidates_m.append(1)\n        elif target_m_float > n - 2:\n            candidates_m.append(n - 2)\n        else: # Should not happen if target_m_float is within range but candidates_m is empty\n            pass\n\n    # Special case for n=3, only m=1 is possible. Angle is 1 * (180/3) = 60.\n    if n == 3:\n        candidates_m = [1]\n\n\n    for m_val in candidates_m:\n        current_angle = m_val * (180.0 / n)\n        current_diff = abs(current_angle - a)\n\n        if current_diff < min_diff:\n            min_diff = current_diff\n            # v1 = 1, v2 = 2.\n            # m_val is (v3 - v1 - 1) = (v3 - 1 - 1) = v3 - 2.\n            # So v3 = m_val + 2.\n            best_v1 = v1\n            best_v2 = v2\n            best_v3 = m_val + 2\n        elif current_diff == min_diff:\n            # If multiple solutions give the same minimum difference, any is fine.\n            # We can keep the current best or update if we prefer a specific one.\n            # The problem states \"any of them\", so we just keep the first one found.\n            pass\n\n    # The problem statement vertices are numbered 1 to n.\n    # My current v1, v2, v3 are 1, 2, m_val+2.\n    # This is valid as long as m_val+2 is <= n.\n    # m_val <= n-2, so m_val+2 <= n.\n    # Also, v1, v2, v3 must be distinct.\n    # v1=1, v2=2.\n    # m_val ranges from 1 to n-2.\n    # So v3 = m_val+2 ranges from 3 to n.\n    # Thus v1, v2, v3 are always distinct.\n\n    sys.stdout.write(f\"{best_v1} {best_v2} {best_v3}\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, a = map(int, sys.stdin.readline().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2\n    v2 = 2\n\n    # Iterate through possible v1 (from 1 to n)\n    # The angle formed by (v1, v2, v3) is determined by the number of vertices\n    # between v1 and v3 (excluding v1 and v3) when measured along the polygon perimeter.\n    # If v2 is the central vertex, and v1 and v3 are on its sides,\n    # the angle at v2 is formed by two chords v2-v1 and v2-v3.\n    # In a regular n-gon inscribed in a circle, the angle subtended by a chord\n    # at any point on the circumference is half the angle subtended at the center.\n    # The angle between two chords v2-v1 and v2-v3 is given by\n    # (number of vertices between v1 and v3 on the arc not containing v2) * (180 / n).\n    #\n    # Let's fix v2 = 2.\n    # The angle at v2 is formed by chords (v2, v1) and (v2, v3).\n    # The central angle subtended by one side of the polygon is 360/n.\n    # The angle at a vertex of the inscribed polygon is (k * 180 / n),\n    # where k is the number of sides (or vertices) between v1 and v3 along the arc not containing v2.\n    #\n    # For a regular n-gon, if we fix one vertex as v2, and another as v1,\n    # then v3 can be any other vertex.\n    # The angle at v2 formed by v1-v2-v3 is determined by the number of vertices\n    # on the arc from v1 to v3 that does not contain v2.\n    # Let's say v1 is at index i, v2 at index j, v3 at index k.\n    # We can normalize by setting v2 to 2.\n    # Then v1 can be 1, and v3 can be from 3 to n.\n    # The angle formed by (v1, v2, v3) where v2 is the vertex is\n    # (number of sides between v1 and v3, along the arc not containing v2) * (180 / n).\n    #\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of sides between v1=1 and v3=k (where k > 2) is k-1-1 = k-2.\n    # So the angle is (k-2) * (180 / n).\n    # We need to find k (from 3 to n) that minimizes | (k-2) * (180 / n) - a |.\n\n    v1 = 1\n    # v2 is fixed as 2\n    # v3 can range from 3 to n\n    # The angle formed is (v3 - v1 - 1) * (180 / n)\n    # In other words, the angle at vertex v2 is formed by chords v2-v1 and v2-v3.\n    # The number of polygon sides spanned by the arc v1-v3 (not passing through v2) is (v3 - v1 - 1).\n    # This is equivalent to (v3 - 2) when v1=1 and v2=2.\n    # So the possible angles are (k-2) * (180 / n) for k from 3 to n.\n    # Let m = k-2. Then m ranges from 1 to n-2.\n    # The possible angles are m * (180 / n) for m = 1, 2, ..., n-2.\n\n    # We want to find m in [1, n-2] such that |m * (180 / n) - a| is minimized.\n    # Let target_angle_val = a.\n    # We are looking for m such that m * (180 / n) is closest to a.\n    # This is equivalent to finding m such that m is closest to a * (n / 180).\n    # Let target_m_float = a * n / 180.\n\n    target_m_float = a * n / 180.0\n\n    # Check m = floor(target_m_float) and m = ceil(target_m_float)\n    # Ensure m is within [1, n-2]\n\n    m_candidate1 = int(target_m_float)\n    m_candidate2 = int(target_m_float) + 1\n\n    candidates_m = []\n    if 1 <= m_candidate1 <= n - 2:\n        candidates_m.append(m_candidate1)\n    if 1 <= m_candidate2 <= n - 2 and m_candidate2 != m_candidate1:\n        candidates_m.append(m_candidate2)\n\n    # If target_m_float is outside [1, n-2], we just take the closest valid boundary.\n    if not candidates_m:\n        if target_m_float < 1:\n            candidates_m.append(1)\n        elif target_m_float > n - 2:\n            candidates_m.append(n - 2)\n        else: # Should not happen if target_m_float is within range but candidates_m is empty\n            pass\n\n    # Special case for n=3, only m=1 is possible. Angle is 1 * (180/3) = 60.\n    if n == 3:\n        candidates_m = [1]\n\n\n    for m_val in candidates_m:\n        current_angle = m_val * (180.0 / n)\n        current_diff = abs(current_angle - a)\n\n        if current_diff < min_diff:\n            min_diff = current_diff\n            # v1 = 1, v2 = 2.\n            # m_val is (v3 - v1 - 1) = (v3 - 1 - 1) = v3 - 2.\n            # So v3 = m_val + 2.\n            best_v1 = v1\n            best_v2 = v2\n            best_v3 = m_val + 2\n        elif current_diff == min_diff:\n            # If multiple solutions give the same minimum difference, any is fine.\n            # We can keep the current best or update if we prefer a specific one.\n            # The problem states \"any of them\", so we just keep the first one found.\n            pass\n\n    # The problem statement vertices are numbered 1 to n.\n    # My current v1, v2, v3 are 1, 2, m_val+2.\n    # This is valid as long as m_val+2 is <= n.\n    # m_val <= n-2, so m_val+2 <= n.\n    # Also, v1, v2, v3 must be distinct.\n    # v1=1, v2=2.\n    # m_val ranges from 1 to n-2.\n    # So v3 = m_val+2 ranges from 3 to n.\n    # Thus v1, v2, v3 are always distinct.\n\n    sys.stdout.write(f\"{best_v1} {best_v2} {best_v3}\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 1808,
        "thoughts_token_count": 0
    }
}