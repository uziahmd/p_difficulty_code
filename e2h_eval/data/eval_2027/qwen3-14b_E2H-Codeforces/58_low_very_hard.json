{
    "start": 1758310016.2484958,
    "end": 1758310055.8226678,
    "start-formatted": "2025-09-20 04:26 KST",
    "end-formatted": "2025-09-20 04:27 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's try to figure out how to solve this problem. The task is to find the minimum number of edges to add to a graph to create an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I remember that a graph is bipartite if and only if it contains no odd-length cycles. So, if the graph already has an odd-length cycle, then t is 0 and w is 1? Wait, no. Because the problem says to find the minimum number of edges needed to form such a cycle. So if there's already an existing odd-length cycle, then t is 0. But how do we count the number of ways? Because adding zero edges would mean that any existing odd cycle counts as a way. But the problem says that the answer w is the number of ways to add t edges (which in this case is zero) to form such a cycle. But how do we count the number of existing odd cycles? That seems complicated. However, maybe the problem isn't about existing cycles, but about making sure that the graph has at least one odd cycle. So perhaps the answer depends on whether the graph is bipartite or not.\n\nWait, the problem says that the graph may not be connected. So, for each connected component, we can check if it's bipartite. If any connected component is not bipartite, then there's already an odd-length cycle. Therefore, t would be 0, and w would be 1? Or maybe more?\n\nBut the problem says that the answer w is the number of ways to add t edges (which is zero) to form such a cycle. However, if the graph already has multiple odd cycles, then adding zero edges would have multiple ways. But according to the problem statement, the way is considered as the set of added edges. Since adding zero edges is just one way (the empty set), but the problem says that the answer w is the number of ways to add t edges to form a cycle. But if there are multiple existing odd cycles, does that affect the count? Or is the answer w 1 when t is zero?\n\nWait, the note in the example shows that for the input with 3 nodes and 3 edges (a triangle), the output is 0 1. Which makes sense because adding zero edges gives exactly one way (the existing cycle). But if there are two separate odd cycles, then adding zero edges would count as one way? Because the problem says that the way is determined by the set of added edges. So regardless of how many existing cycles there are, the number of ways to add zero edges is 1. Because you don't add any edges. So, in that case, even if there are multiple existing odd cycles, the answer for w is 1. Because the way is determined by the edges added, which is none. So the answer for w is 1 if t is 0.\n\nSo the first thing to check is whether the graph already contains an odd-length cycle. If yes, then t=0 and w=1. Otherwise, we need to find the minimum number of edges to add to create such a cycle.\n\nSo the first step is to check if the graph is bipartite. If it's not bipartite, then t=0 and w=1. But how to check that? For each connected component, check if it's bipartite. If any component is not bipartite, then the answer is t=0 and w=1.\n\nIf the entire graph is bipartite, then we need to find the minimal t and the number of ways to add edges to make an odd-length cycle.\n\nNow, if the graph is bipartite, then adding edges between two nodes in the same partition of a bipartition would create an odd-length cycle. Because in a bipartite graph, all cycles are even-length. Adding an edge between two nodes in the same partition would create a cycle of length (distance between them + 1). Since the distance between two nodes in the same partition is even (since in bipartite graphs, any path between two nodes in the same partition has even length), adding an edge between them would make a cycle of odd length.\n\nSo, the minimal t is 1. Because adding a single edge between two nodes in the same partition of some bipartition would create an odd-length cycle.\n\nBut wait, what if the graph is bipartite and consists of multiple components? For example, if there are multiple connected components, each being bipartite. Then, for each component, we can compute the number of possible edges that can be added between nodes in the same partition. But the minimal t is 1, since adding any such edge would create an odd cycle.\n\nSo, the answer for t is 1 if the graph is bipartite. But then, the problem is to compute the number of ways to add exactly 1 edge to create an",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and also count the number of ways to achieve this.\n\n### Approach\n1. **Check for Existing Odd Cycles**: If the graph already contains an odd-length cycle, the answer is `t = 0` and `w = 1` because no additional edges are needed.\n2. **Bipartite Check**: If the graph is bipartite (i.e., it does not contain any odd-length cycles), we need to determine the minimum number of edges to add to create an odd-length cycle. This can be done by adding a single edge between two nodes in the same partition of a bipartition.\n3. **Count Valid Edges**: For each connected component of the graph, compute the number of valid edges that can be added between nodes in the same partition. The total number of such valid edges across all components gives the value of `w`.\n\n### Solution Code\n```python\nimport sys\nimport threading\nfrom collections import deque\n\ndef main():\n    sys.setrecursionlimit(1 << 25)\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u-1].append(v-1)\n        edges[v-1].append(u-1)\n\n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n\n    def bfs(start):\n        nonlocal is_bipartite\n        q = deque()\n        q.append(start)\n        color[start] = 0\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    q.append(v)\n                else:\n                    if color[v] == color[u]:\n                        is_bipartite = False\n                        return\n\n    for i in range(n):\n        if color[i] == -1:\n            bfs(i)\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    # Now, the graph is bipartite. Need to find the number of possible edges to add\n    # For each component, compute the size of the two partitions\n    components = []\n    visited = [False] * n\n\n    def get_component(start):\n        q = deque()\n        q.append(start)\n        visited[start] = True\n        cnt0 = 0\n        cnt1 = 0\n        if color[start] == 0:\n            cnt0 += 1\n        else:\n            cnt1 += 1\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    if color[v] == 0:\n                        cnt0 += 1\n                    else:\n                        cnt1 += 1\n                    q.append(v)\n        return (cnt0, cnt1)\n\n    for i in range(n):\n        if not visited[i]:\n            c0, c1 = get_component(i)\n            components.append((c0, c1))\n\n    total_ways = 0\n    for c0, c1 in components:\n        total_ways += c0 * c1\n\n    print(f\"1 {total_ways}\")\n\nthreading.Thread(target=main).start()\n```\n\n### Explanation\n1. **Bipartite Check**: We use BFS to check if the graph is bipartite. If any component is not bipartite, it means there's an odd-length cycle already present.\n2. **Component Analysis**: For each connected component in the graph, we calculate the sizes of the two partitions (sets of nodes) in the bipartition.\n3. **Valid Edge Calculation**: For each component, the number of valid edges that can be added between nodes in the same partition is calculated as the product of the sizes of the two partitions. Summing these values across all components gives the total number of ways to add a single edge to create an odd-length cycle.\n\nThis approach ensures that we efficiently determine the minimum edges required and count the valid ways using BFS and component analysis.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\nfrom collections import deque\n\ndef main():\n    sys.setrecursionlimit(1 << 25)\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u-1].append(v-1)\n        edges[v-1].append(u-1)\n\n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n\n    def bfs(start):\n        nonlocal is_bipartite\n        q = deque()\n        q.append(start)\n        color[start] = 0\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    q.append(v)\n                else:\n                    if color[v] == color[u]:\n                        is_bipartite = False\n                        return\n\n    for i in range(n):\n        if color[i] == -1:\n            bfs(i)\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    # Now, the graph is bipartite. Need to find the number of possible edges to add\n    # For each component, compute the size of the two partitions\n    components = []\n    visited = [False] * n\n\n    def get_component(start):\n        q = deque()\n        q.append(start)\n        visited[start] = True\n        cnt0 = 0\n        cnt1 = 0\n        if color[start] == 0:\n            cnt0 += 1\n        else:\n            cnt1 += 1\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    if color[v] == 0:\n                        cnt0 += 1\n                    else:\n                        cnt1 += 1\n                    q.append(v)\n        return (cnt0, cnt1)\n\n    for i in range(n):\n        if not visited[i]:\n            c0, c1 = get_component(i)\n            components.append((c0, c1))\n\n    total_ways = 0\n    for c0, c1 in components:\n        total_ways += c0 * c1\n\n    print(f\"1 {total_ways}\")\n\nthreading.Thread(target=main).start()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 579,
        "completion_token_count": 903,
        "thoughts_token_count": 1024
    }
}