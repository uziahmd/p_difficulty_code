{
    "start": 1758008502.701109,
    "end": 1758008658.4216135,
    "start-formatted": "2025-09-16 16:41 KST",
    "end-formatted": "2025-09-16 16:44 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. So the task is to determine for a given n whether there exists a snowflake graph with exactly n vertices. The snowflake is built in a specific way. Let me try to understand the structure of such a graph.\n\nFrom the description, the snowflake starts with one vertex. Then, each time we add new vertices by connecting them to existing ones that have only one connection. Each such step adds k new vertices to each of those nodes. And this process must be done at least once. Also, k has to be greater than 1.\n\nLet me think about how the number of vertices grows. Let's consider the steps:\n\nInitially, there's 1 node. Let's call this level 0.\n\nThen, the first step is to connect this node to k new nodes. So after the first step, there are 1 + k nodes. Now, each of these k nodes has only one connection (the initial node). So in the next step, each of these nodes can be expanded by adding k new nodes. But according to the problem statement, this expansion step must be done at least once. Wait, the initial step is the first expansion. Then, the second step is when each of the k nodes adds k more nodes. So the process is:\n\n- Start with 1 node.\n- Step 1: Add k nodes connected to the initial node. Total nodes: 1 + k.\n- Step 2: For each node that has only one connection (which are the k nodes from step 1), add k new nodes to each. So each of these k nodes adds k new nodes. So total added here is k * k. Total nodes becomes 1 + k + k^2.\n- Then, if another step is done, each of the nodes added in step 2 (which are k^2 in total) would each add k new nodes. So next step adds k^3 nodes, making total 1 +k +k^2 +k^3, etc.\n\nBut the process requires that the expansion steps (after the initial step) are done at least once. Wait, the problem says that the initial step is adding k new vertices (so that's the first expansion). Then, the step where each node with only one connection is expanded must be done at least once. So that implies that the expansion steps (like step 2 and beyond) must be done once. So the minimal snowflake would be when we do the initial step (adding k nodes) and then do one expansion step. So the total number of nodes would be 1 +k +k^2. But wait, the example given in the problem says that for k=4, the minimal snowflake has 1 +4 +4^2 = 21 nodes? But the sample input includes n=6 which outputs NO. Let's check the sample input.\n\nLooking at the sample input:\n\nFor example, the input includes 6 as a test case, and the output is NO. Let's see why. Let's think about possible k and steps.\n\nLet me think about the structure of the snowflake. The snowflake must be constructed in such a way that after the initial step, there's at least one more expansion step. So the total number of nodes is 1 + k + k^2 + ... +k^m, where m is the number of expansion steps. Wait, maybe not. Let me re-express.\n\nThe initial step is creating the first layer. Then, each expansion step adds layers. Let's model the total number of nodes.\n\nLet me think of the snowflake construction as follows:\n\nThe snowflake is built in layers. The first layer (level 0) is the root node. Then, level 1 has k nodes connected to the root. Then, each node in level 1 has k children (level 2). Each node in level 2 has k children (level 3), and so on. But the expansion steps must be done at least once. That is, the process must have at least two layers beyond the root. Wait, the initial step (adding k nodes) is the first expansion. Then, the second expansion is required. So the minimal snowflake has two expansion steps. Wait, the problem says:\n\nThe initial step is adding k new vertices. Then, each vertex that is connected to only one other vertex (i.e., the leaves) is connected to k new vertices. This step should be done at least once. So the initial step is the first expansion. Then, the second expansion is done once. So the minimal case is when you do the initial step (step 1) and then perform the expansion step once (step 2). So the total number of nodes is 1 + k + k^2.\n\nWait, but for example, the sample input has n=6. Let's see if any k>1 can produce 6. Let's try k=2: ",
    "response": "\n\nTo solve this problem, we need to determine if a given number of vertices `n` can form a snowflake graph as defined by the rules. The snowflake graph starts with one vertex and expands in layers, each time adding `k` new vertices to each existing leaf node (a node with only one connection). This expansion must be done at least once.\n\n### Approach\n1. **Understanding the Structure**: The snowflake graph starts with 1 node. The first expansion adds `k` nodes, making the total `1 + k`. Each subsequent expansion step adds `k^2`, `k^3`, etc., nodes. The minimal valid snowflake requires at least two expansion steps, resulting in a total of `1 + k + k^2` nodes.\n\n2. **Check Validity**: For a given `n`, we need to check if there exists any integer `k > 1` such that `n` can be represented as the sum of a geometric series starting from 1 and having at least two terms. This means checking if `n - 1` can be expressed as a geometric series sum `k + k^2 + ... + k^m` for some `m >= 2`.\n\n3. **Efficient Checking**: For each test case, we iterate over possible values of `k` starting from 2 up to the cube root of `n` (since higher values of `k` will quickly exceed `n`). For each `k`, we check if `n - 1` can be decomposed into a sum of powers of `k` with at least two terms.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    m = n - 1\n    max_k = int(m ** (1/3)) + 2  # Approximate upper bound for k\n    for k in range(2, max_k + 1):\n        total = 0\n        current = k\n        while True:\n            if total + current > m:\n                break\n            total += current\n            if total == m:\n                return True\n            current *= k\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    cases = list(map(int, input[1:t+1]))\n    for n in cases:\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n- **Reading Input**: The input is read all at once for efficiency, especially given the constraints.\n- **is_snowflake Function**: This function checks if the given number `n` can form a valid snowflake by iterating through possible values of `k` and checking if the sum of the geometric series starting from `k` with at least two terms equals `n - 1`.\n- **Geometric Series Check**: For each `k`, we compute the cumulative sum of the series `k + k^2 + ...` until it exceeds `n - 1`. If the sum matches `n - 1` exactly, then `n` is a valid snowflake count.\n\nThis approach efficiently checks all possible values of `k` up to a reasonable bound, ensuring the solution handles very large values of `n` up to $10^{18}$ within acceptable time limits.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    m = n - 1\n    max_k = int(m ** (1/3)) + 2  # Approximate upper bound for k\n    for k in range(2, max_k + 1):\n        total = 0\n        current = k\n        while True:\n            if total + current > m:\n                break\n            total += current\n            if total == m:\n                return True\n            current *= k\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    cases = list(map(int, input[1:t+1]))\n    for n in cases:\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 553,
        "completion_token_count": 720,
        "thoughts_token_count": 1023
    }
}