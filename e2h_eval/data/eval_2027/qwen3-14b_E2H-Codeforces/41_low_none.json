{
    "start": 1758309256.2089171,
    "end": 1758309298.044422,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:14 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nSo the problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range from l_i to r_i, the tallest house must be at most x_i. Our goal is to maximize the total profit under these constraints.\n\nHmm. The constraints are that for every restriction, the maximum height in [l_i, r_i] must be <= x_i. And we need to choose heights for each spot such that all these constraints are satisfied, and the sum of squares is maximized.\n\nThe input size is small: n, h, m up to 50. So maybe a brute-force approach is possible, but perhaps not. Wait, for n=50, trying all possibilities would be impossible because each house has h+1 possibilities. For 50 houses, that's (h+1)^50 possibilities. Even if h is 50, that's way too big. So brute force isn't feasible here.\n\nWe need a smarter approach. Let's think about how to model this problem.\n\nThis seems like a constraint optimization problem. The variables are the heights of the houses, with constraints that for each restriction, the maximum in the interval is <= x_i. And we want to maximize the sum of squares.\n\nConstraints on maximums over ranges. How can we model this?\n\nOne approach is to model this as a problem where each house's height is as high as possible, but respecting the constraints. However, the constraints might conflict. For example, a restriction that says the max in [1,3] is 2, and another that says the max in [2,4] is 3. Then, the house at position 2 can be up to 2 (from the first restriction) but also up to 3 (from the second). But the first restriction's interval includes positions 1-3, so the max in that interval must be <=2. Therefore, the house at position 2 can be at most 2, even though the second restriction allows higher in [2,4]. So the constraints are overlapping and need to be considered together.\n\nBut how do we find the optimal heights?\n\nAlternative idea: For each house, determine the maximum possible height it can have given all constraints. But since the constraints are on ranges, the maximum height of a house depends on all the restrictions that include it in their intervals.\n\nWait, but even if a house is allowed to be high in some restrictions, other restrictions might limit it. For example, if a house is part of multiple ranges, the tightest constraint (the smallest x_i) among those ranges would be the limiting factor.\n\nBut how do we find for each house, the maximum possible height it can have, considering all constraints?\n\nWait, but that's not straightforward. Because the constraints are on the maximum in a range. For example, suppose a restriction says that in [1,3], the max is <= 2. That means that each of the houses 1, 2, 3 can be at most 2. But if there's another restriction that says [2,4] must have max <=3, then house 2 can be up to 2 (from the first restriction) or 3 (from the second), but the first restriction requires that the max in [1,3] is 2. So even if house 2 is allowed to be 3 in the second restriction, the first restriction would require that the max in [1,3] is 2. Therefore, house 2 can't be 3 in that case. So the maximum possible height for house 2 is 2.\n\nSo, for each house, the maximum possible height it can have is the minimum of:\n\n- h (the global maximum)\n- all x_i for which the house is in the range [l_i, r_i], and the restriction is that the maximum in that range is x_i. But how?\n\nWait, no. Because the restriction says that the maximum in the range is <=x_i. So, for any house in that range, its height can be up to x_i, but if there's another restriction that requires the same range to be lower, then it would be more restrictive.\n\nBut the problem is that the maximum in the range can be limited by multiple restrictions. So, for example, if there's a restriction on [1,3] with x=2, and another on [1,3] with x=3, then the first one is more restrictive. So the maximum in that range is 2. So, for any house in that range, it can be up to 2.\n\nBut how do we find for each house, the minimal x_i across all restrictions that cover that house? Wait, that's not sufficient",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions that limit the maximum height of houses in specific ranges. The solution involves determining the optimal heights for each house such that all constraints are satisfied and the total profit is maximized.\n\n### Approach\n1. **Constraints Analysis**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This means that for each house, the maximum height it can have is constrained by the minimum of the global maximum height `h` and the most restrictive local constraint that includes that house.\n\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that include that house in their range. The allowable height for each house is the minimum value among all applicable restrictions and the global maximum height `h`.\n\n3. **Calculate Profit**: Once the maximum allowable height for each house is determined, compute the profit as the sum of the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    \n    for line in input:\n        if not line.strip():\n            continue\n        parts = line.strip().split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        \n        restrictions = []\n        for i in range(m):\n            l = int(parts[3 + 3*i])\n            r = int(parts[4 + 3*i])\n            x = int(parts[5 + 3*i])\n            restrictions.append((l, r, x))\n        \n        # Determine the maximum allowed height for each house\n        max_heights = [h] * n  # Initially set to h\n        \n        for l, r, x in restrictions:\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate the total profit\n        total = sum(hh * hh for hh in max_heights)\n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, and each line is processed to extract the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n\n2. **Processing Restrictions**: For each restriction, we update the maximum allowable height for each house within the specified range. This is done by iterating over each house in the range and setting its maximum height to the minimum of its current value and the restriction's maximum height.\n\n3. **Calculating Profit**: After processing all restrictions, the total profit is calculated by summing the squares of the maximum allowable heights for each house.\n\nThis approach ensures that all constraints are respected while maximizing the profit by leveraging the constraints to determine the optimal heights for each house. The complexity is manageable given the small input limits (up to 50 houses and restrictions), making this approach both efficient and straightforward.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    \n    for line in input:\n        if not line.strip():\n            continue\n        parts = line.strip().split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        \n        restrictions = []\n        for i in range(m):\n            l = int(parts[3 + 3*i])\n            r = int(parts[4 + 3*i])\n            x = int(parts[5 + 3*i])\n            restrictions.append((l, r, x))\n        \n        # Determine the maximum allowed height for each house\n        max_heights = [h] * n  # Initially set to h\n        \n        for l, r, x in restrictions:\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate the total profit\n        total = sum(hh * hh for hh in max_heights)\n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 820,
        "completion_token_count": 624,
        "thoughts_token_count": 1024
    }
}