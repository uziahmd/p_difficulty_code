{
    "start": 1758312549.2576962,
    "end": 1758313310.0741956,
    "start-formatted": "2025-09-20 05:09 KST",
    "end-formatted": "2025-09-20 05:21 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range from l_i to r_i, the tallest house must be at most x_i. My goal is to maximize the total profit while satisfying all these restrictions.\n\nHmm. So how do I approach this? The constraints are small: n, h, m are up to 50. So maybe a brute-force approach is possible, but with some optimizations.\n\nWait, but even if n is 50, trying all possibilities for each house's height would be O(h^n), which is way too big. For example, 50^50 is impossible. So brute force is out of the question.\n\nAlternative approach: think about constraints. Each restriction imposes that the maximum in a certain interval is <= x_i. So for all intervals [l_i, r_i], the maximum height in that interval can't exceed x_i. How can I model this?\n\nThis feels like a problem where we need to find the maximum possible values for each house, considering all the restrictions. But how?\n\nAnother thought: For each position, what is the maximum height it can have, given all the restrictions that apply to it?\n\nBut that's not straightforward. Because a restriction on a range affects all houses in that range. For example, if there's a restriction that says the maximum in [1,3] is 2, then each of the houses 1,2,3 can't be higher than 2. But maybe there are other restrictions that allow some of them to be higher, but not all.\n\nWait, but the problem is that each restriction applies to the maximum in a range. So for any range [l_i, r_i], the maximum of the heights in that range must be <= x_i. So for each such restriction, all the houses in that range can't have a height higher than x_i. Wait no, that's not correct. Because the maximum in the range is <=x_i. Which implies that every house in the range is <=x_i. Because if any house in the range was higher than x_i, then the maximum would be higher than x_i. Therefore, each restriction [l_i, r_i, x_i] implies that for all positions in l_i to r_i, their height must be <=x_i. Because otherwise, the maximum would exceed x_i.\n\nWait, that's an important point. Because if there's a restriction that the maximum in [l_i, r_i] is <=x_i, then each individual house in that interval must be <=x_i. Because if any one of them is higher, then the maximum would be higher. Therefore, all the restrictions can be converted into per-house constraints. For example, for each house j, the maximum allowed height is the minimum of all x_i's from restrictions that include j in their [l_i, r_i] interval. Because each such restriction requires that house j's height is <=x_i. So the maximum possible height for house j is the minimum of all x_i's from restrictions that cover j, and also h (since the maximum possible height is h).\n\nWait, but that's only true if all the restrictions that apply to j are considered. For example, if there are two restrictions: one that covers j and says x=3, and another that covers j and says x=5. Then the maximum allowed for j is 3, since the first restriction requires that the max in its interval is <=3. So j can't be higher than 3.\n\nSo, if I can compute for each position j, the maximum allowed height, which is min( h, min { x_i for all restrictions where j is in [l_i, r_i] } ). Then, setting each house to that maximum allowed height would satisfy all the restrictions. But is that correct?\n\nWait, no. Because suppose there's a restriction that says the max in [1, 3] is 2. Then each house in 1-3 can be at most 2. But if there's another restriction that says the max in [2, 3] is 3. Then for house 2 and 3, the first restriction says they can't be more than 2, and the second allows up to 3. So the effective maximum for those houses is 2. So the idea is that for each house, the maximum allowed height is the minimum of all x_i's from restrictions that include that house in their interval, and also h.\n\nBut wait, what if there are multiple overlapping restrictions. For example, a restriction on [1, 2] with x=3, and another on [2, 3] with x=4. Then for house 2, it's covered by both. The maximum allowed for house 2 is the minimum of 3 and 4, which is 3. However, the first restriction says that the maximum in [1,2] is <=3. So house 2 can be 3, and house 1 can be 3. But if house 2 is 3, then the second restriction (on [2,3]) allows house 2 to be 3, but house 3 can be up to 4. So that's okay.\n\nSo if we take for each house j, the minimum x_i of all restrictions that include j in their interval, then set each house to that value, then all the restrictions are satisfied. Because for any restriction [l_i, r_i], all houses in that interval are <=x_i. Therefore, the maximum in that interval is <=x_i.\n\nBut wait, perhaps there are some restrictions that are redundant. For example, if there's a restriction [1,3] with x=2, and another [1,2] with x=3. Then the first restriction requires that all houses in 1-3 are <=2. So the second restriction's x=3 is irrelevant for houses 1-2, because the first restriction already enforces that they are <=2. So the maximum allowed for each house is min over all x_i's of the restrictions that include it.\n\nTherefore, the approach could be:\n\nFor each house j, compute the maximum possible height allowed by all restrictions. That is, for each j, collect all restrictions that include j in their [l_i, r_i], take their x_i, and find the minimum among them. Then, the maximum height for j is min( h, that minimum ). Then, the optimal solution is to set each house to that maximum height, and sum their squares.\n\nBut wait, is this correct? Let's test the first example.\n\nFirst example input:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → house 1 must be ≤1.\n\n2 2 3 → house 2 must be ≤3.\n\n3 3 2 → house 3 must be ≤2.\n\nSo for each house, the max allowed is 1, 3, 2. So the sum is 1² +3² +2² = 1+9+4=14, which matches the sample. So that works.\n\nSecond example:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → houses 2 and 3 must be ≤8.\n\n3 4 7 → houses 3 and 4 must be ≤7.\n\nSo for house 1: no restrictions. So max is 10.\n\nHouse 2: only the first restriction. So 8.\n\nHouse 3: both restrictions. min(8,7) =7.\n\nHouse 4: second restriction. 7.\n\nSo the heights are 10,8,7,7. Sum is 100+64+49+49= 262. Which matches the sample. So that seems to work.\n\nSo why does this approach work?\n\nBecause for each restriction [l_i, r_i, x_i], all houses in that interval are forced to be ≤x_i. Therefore, the maximum allowed for each house is the minimal x_i across all restrictions that cover it. Then, when you set each house to that, all the restrictions are satisfied.\n\nBut why can't there be a case where setting some houses lower than their maximum allowed gives a better profit? Because the profit is a². Since a² is increasing with a, the maximum possible for each house is the best choice. Because if you can set a house to a higher value, then you should. So the optimal solution is to set each house to the maximum allowed.\n\nWait, that's right. Because for each house, the maximum allowed is the highest possible value that doesn't violate any restrictions. So if you take that maximum, then the sum of squares will be maximized.\n\nSo this problem reduces to, for each house, compute the maximum allowed height (as described), then sum their squares.\n\nSo the problem becomes straightforward: for each house, find the minimal x_i among all restrictions that include that house in their interval. Then take min between that and h. Then sum the squares.\n\nBut how to implement this?\n\nLet me think. For each house j (from 1 to n), we need to check all m restrictions. For each restriction, check if j is between l_i and r_i. For all such restrictions, collect their x_i. Take the minimum of these x_i's. Then the maximum allowed height for j is min( h, that minimum ). If there are no restrictions covering j, then it's h.\n\nSo, for example, for each j in 1..n:\n\nmax_height[j] = h\n\nfor each restriction:\n\n   if l_i <= j <= r_i:\n\n      if x_i < max_height[j]:\n\n          max_height[j] = x_i\n\nThen, the answer is sum of (max_height[j]^2) for all j.\n\nYes! That seems to be the case. So the code can be written as follows.\n\nLet me test this approach against the sample inputs.\n\nFirst sample:\n\nn=3, h=3, m=3.\n\nrestrictions:\n\n1 1 1 → for j=1, x=1.\n\nso max_height[1] is min(3, 1) =1.\n\nrestriction 2 2 3 → j=2 is covered, x=3. So max_height[2] is 3.\n\nrestriction 3 3 2 → j=3, x=2. So max_height[3] is 2.\n\nsum is 1+9+4=14. Correct.\n\nSecond sample:\n\nn=4, h=10, m=2.\n\nrestrictions:\n\n2 3 8 → for j=2 and 3.\n\nrestriction 3 4 7 → j=3 and 4.\n\nfor j=1: no restrictions. So max_height is 10.\n\nfor j=2: only first restriction, x=8. So 8.\n\nfor j=3: min(8,7) =7.\n\nfor j=4: 7.\n\nsum is 100 + 64 + 49 +49 = 262. Correct.\n\nAnother test case: what if a restriction is redundant?\n\nSuppose n=2, h=5, m=2.\n\nRestriction 1: 1-2, x=3.\n\nRestriction 2: 1-1, x=4.\n\nSo for j=1: covered by both restrictions. min(3,4) is 3. So max is 3.\n\nj=2: covered by first restriction. x=3. So max is 3.\n\nSo the sum is 3² +3² = 18.\n\nBut if there was no restriction 2, the max for j=1 would be 3. So the code correctly takes the minimum of all x_i's that apply to the house.\n\nAnother example: if a house is covered by multiple restrictions. For example, a house j is in multiple ranges. The code takes the minimum of all x_i's for those ranges.\n\nSo this approach seems correct.\n\nSo the code can be written as follows:\n\nRead n, h, m.\n\nInitialize an array max_height of size n (or n+1, since spots are 1-based?), initialized to h.\n\nThen, for each of the m restrictions:\n\n   l_i, r_i, x_i.\n\n   for j in l_i to r_i:\n\n       if x_i < max_height[j]:\n\n           max_height[j] = x_i\n\nThen, compute the sum of squares of each element in max_height.\n\nWait, but in Python, indexes are zero-based. So perhaps, for the code, we can have max_height as a list of size n, with indexes 0 to n-1, or 1 to n. Let's see.\n\nIn the code, for the input, the spots are 1-based. So for j from 1 to n.\n\nSo in Python, perhaps create a list of size n+1 (indexes 0 to n, ignoring index 0). So for j in 1..n.\n\nSo code steps:\n\nRead n, h, m.\n\nmax_height = [h] * (n+1)  # indexes 0..n, but 0 unused.\n\nThen for each of the m restrictions:\n\n   l, r, x = map(int, input().split())\n\n   for j in range(l, r+1):\n\n       if x < max_height[j]:\n\n           max_height[j] = x\n\nThen sum the squares of max_height[1..n].\n\nYes.\n\nBut wait, what if there are multiple restrictions that cover the same house. For example, a restriction that says [1, 3] x=2, and another [1, 1] x=3. Then for j=1, the first restriction sets it to 2, the second restriction (x=3) is larger, so no change. So the code would take min(2,3) which is 2. Which is correct.\n\nYes. So this approach works.\n\nSo the code is straightforward. Let me test with the sample input.\n\nSample Input 1:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nmax_height starts as [3,3,3,3]. Then:\n\nFirst restriction l=1, r=1, x=1. So j=1: set to 1.\n\nSecond restriction l=2, r=2, x=3. j=2: current value is 3. So no change.\n\nThird restriction l=3, r=3, x=2. j=3: set to 2.\n\nsum 1^2 + 3^2 + 2^2 = 14.\n\nSample 2:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nmax_height starts as [10, 10, 10, 10, 10]\n\nFirst restriction: l=2, r=3. For j=2 and 3. x=8. So their max_height is set to 8.\n\nThen second restriction l=3, r=4. x=7. For j=3: current value is 8, so set to 7. j=4: set to 7.\n\nSo max_height[1] is 10, 2:8, 3:7, 4:7. Sum is 100 + 64 + 49 +49 = 262.\n\nYes.\n\nWhat about a case where a restriction is overlapping with others?\n\nAnother test case: n=2, h=5, m=2.\n\nRestrictions:\n\n1 2 3\n\n1 1 4.\n\nSo after processing first restriction, max_height[1] and [2] are 3. Then the second restriction is for j=1, x=4. Since 4>3, no change. So the max_height is 3 and 3. Sum is 18.\n\nWhich is correct.\n\nAnother case where a restriction is more restrictive than another.\n\nSo this approach seems correct.\n\nSo the code can be written as:\n\nRead n, h, m.\n\nInitialize max_height as [h] * (n+1). Then for each of the m restrictions, loop through l_i to r_i and update the max_height[j] to be the minimum between current value and x_i.\n\nThen sum the squares of max_height[1..n].\n\nSo this seems simple. Now, code in Python.\n\nNow, handling input. The input may have multiple test cases? Wait, looking back at the problem statement.\n\nWait, the input is given as:\n\nThe first line contains three integers n, h, m.\n\nThen m lines follow.\n\nBut looking at the sample input, the first input is given as a list of strings. Wait, the sample input shows:\n\nInput:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nBut that's probably a way to represent multiple test cases. Wait, but the problem says that the input is given as per the first line, then m lines. But in the sample input, there are two separate test cases. So the user's code needs to process multiple test cases?\n\nWait, looking back at the problem statement:\n\nThe input is given as:\n\nThe first line contains three integers n, h, m.\n\nEach of the next m lines contains three integers l_i, r_i, x_i.\n\nBut in the sample input, the first input is given as a list with two elements, which seems to indicate that the code should process multiple test cases. However, the problem's original input format may be different. Wait, looking back:\n\nIn the problem's sample input, the input is given as two separate cases. For example, the first input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nand the second input is:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nBut the output is two lines, 14 and 262.\n\nBut the problem says \"the following is a competitive programming problem\" and the input is given as per the first line. So perhaps the actual input is multiple test cases? Or perhaps the sample input is presented as two separate cases, but the actual code is supposed to process one test case.\n\nWait, looking back at the problem statement:\n\nThe input is given as:\n\nThe first line contains three integers n, h, m.\n\nEach of the next m lines contains three integers l_i, r_i, x_i.\n\nSo the code should process a single test case.\n\nBut the sample input shows two test cases. So perhaps the user's code is supposed to handle multiple test cases. However, in the problem statement's input description, there's no mention of multiple test cases. So perhaps the sample input is presented as two examples, but the actual code is supposed to read one test case.\n\nWait, the problem's sample input shows that the input is given as a list of strings, but perhaps that's just how the user presented it. For example, perhaps the actual input is one test case. Let me check the problem's original statement.\n\nIn the problem statement's input section, the first line is n, h, m. Then m lines. So the code should process a single test case.\n\nBut the sample input shows two test cases. So perhaps the user is providing two examples. For example, the first example's input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nand the output is 14.\n\nThe second example's input is:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\noutput is 262.\n\nSo the code needs to read one test case. But the sample input shows two test cases. However, in the problem statement, perhaps the code is supposed to process a single test case. So perhaps the user's code should read from stdin, which may contain multiple test cases? Or perhaps the sample input is presented as two separate test cases, but the actual code is supposed to process one.\n\nBut the problem's original input is not specified to have multiple test cases. So the code should process one test case. However, looking at the sample input and output, the code may need to process multiple test cases. But the problem's original input may not have that.\n\nWait, the problem's sample input is given as a list of strings, which perhaps represents the input as two separate test cases, but the actual code is supposed to read from standard input. However, the problem says that the code should read from stdin and output the desired outputs. So perhaps the code is supposed to process multiple test cases. However, the problem's input description does not mention that. So perhaps the sample input is given as two test cases, but the actual code is supposed to read one.\n\nBut looking at the problem's original input description, the first line contains n, h, m, then m lines. So the code is supposed to read one test case. But the sample input shows two test cases. So perhaps the sample input is given as two separate test cases, and the code should process each of them, outputting the corresponding answers.\n\nBut how can that be? For example, in the problem's sample input, the first line is the first test case's input, and the second line is the second test case's input. So the code must read multiple test cases.\n\nBut how to know how many test cases there are? Because the problem's input description does not mention that. So this is confusing.\n\nLooking back at the problem statement's sample input and output:\n\nThe sample input is given as a list of two elements, which are the input for two test cases. The output is a list of two elements, the outputs for each test case.\n\nBut in the actual programming problem, perhaps the code is supposed to process multiple test cases. However, the problem's input description does not mention that. So this is a problem.\n\nAlternatively, perhaps the sample input is presented in a way that's not the actual input. Maybe the user is providing two separate examples, but the actual code is supposed to process one test case.\n\nBut the code provided by the user must read from stdin. So perhaps the code should read one test case. Let me check the problem statement again.\n\nThe problem says:\n\nInput:\n\nThe first line contains three integers n, h, m...\n\nSo the code is supposed to read one test case. But the sample input shows two test cases, but perhaps that's just for illustration. So the code should process one test case.\n\nBut in that case, the sample input for the first example would be:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nand the output is 14.\n\nSo the code would read n, h, m, then m lines.\n\nThus, the code can be written as:\n\nRead n, h, m.\n\nThen read m lines.\n\nThen compute as discussed.\n\nBut in the sample input given by the user, there are two test cases. So perhaps the code is supposed to process multiple test cases. But how?\n\nBut according to the problem's input description, there's only one test case. So perhaps the sample input is presented in a way that's not matching the actual input. For example, the sample input may be two separate test cases, but the actual code is supposed to handle one. So the code would be written for one test case.\n\nBut in the problem's sample input, the first input is:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nWhich is two test cases. But the code is supposed to process each of them. However, the problem's input description doesn't mention that. This is confusing.\n\nBut looking at the problem's output, it says to print a single integer. So the code is supposed to process one test case. Therefore, the sample input's two test cases are two separate examples, but the code is supposed to process one test case.\n\nBut the user's code must read from stdin. So in the actual programming competition problem, the code would read one test case.\n\nBut the user's sample input shows two test cases. So perhaps the user made a mistake in formatting. But regardless, the code should process one test case.\n\nTherefore, the code would be written as:\n\nRead n, h, m from input.\n\nThen read m lines of restrictions.\n\nThen compute the maximum heights as discussed.\n\nSo the code in Python would be:\n\nRead the first line as n, h, m.\n\nThen read m lines, each with l_i, r_i, x_i.\n\nInitialize max_height as [h] * (n+1).\n\nFor each restriction:\n\n   l, r, x = ... \n\n   for j in range(l, r+1):\n\n       if x < max_height[j]:\n\n           max_height[j] = x\n\nThen compute the sum of squares of max_height[1..n].\n\nPrint that sum.\n\nSo the code is straightforward.\n\nNow, let's test edge cases.\n\nEdge case 1: n=1, h=0, m=0. So the maximum height is 0. Sum is 0^2 =0.\n\nAnother case: n=1, h=5, m=1. Restriction is [1,1,3]. So max_height is 3. Sum is 9.\n\nAnother case: overlapping restrictions. For example, n=2, m=2. Restrictions [1,2, 3], [1,2, 4]. So the max_height for each is 3. Sum is 3² +3² = 18.\n\nAnother case: no restrictions. Then all houses are h. Sum is n*h².\n\nAnother case: multiple restrictions on the same range. For example, n=2, m=2. Restrictions [1,2, 5], [1,2, 4]. Then the max_height is 4 for both. Sum is 32.\n\nSo the code handles these cases.\n\nNow, code in Python:\n\nRead from stdin. So:\n\nimport sys\n\nn, h, m = map(int, sys.stdin.readline().split())\n\nmax_height = [h] * (n + 1)\n\nfor _ in range(m):\n\n    l, r, x = map(int, sys.stdin.readline().split())\n\n    for j in range(l, r + 1):\n\n        if x < max_height[j]:\n\n            max_height[j] = x\n\ntotal = 0\n\nfor i in range(1, n+1):\n\n    total += max_height[i] ** 2\n\nprint(total)\n\nWait, but what if the input has multiple test cases? Like, for example, the sample input has two test cases. But according to the problem statement, the code should read one test case. However, if the code is supposed to process multiple test cases, then the code would need to read until EOF. But the problem's input description does not mention that.\n\nBut the sample input given by the user seems to suggest that there are multiple test cases. However, the problem statement says that the input is given as per the first line. So perhaps the sample input is a mistake, and the actual code should process one test case.\n\nBut the user's sample input shows that the code needs to process multiple test cases. For example, the first sample input is a list of two strings, which are two test cases. The output is two numbers.\n\nBut how can that be? Because in the problem's input description, it says that the first line contains n, h, m. So for multiple test cases, the code would have to read until EOF.\n\nBut how to determine that? For example, in programming competitions, sometimes the code is supposed to process multiple test cases. But the problem statement doesn't mention it. However, looking at the sample input and output, the code must process multiple test cases.\n\nBut the problem's sample input is given as a list of two test cases. So perhaps the actual input is multiple test cases, and the code should process all of them.\n\nBut how to read them? For example, in the sample input, the first line is '3 3 3\\n1 1 1\\n2 2 3\\n3 3 2' which is one test case. Then another line '4 10 2\\n2 3 8\\n3 4 7'.\n\nSo the code needs to read all test cases until the end of input.\n\nBut how to read them? Well, perhaps the code should read all lines from stdin, split into test cases. But how to parse that?\n\nBut in the problem's sample input, each test case is given as a block of lines. For example, for the first test case, the first line is n, h, m, then m lines. Then the next test case starts with another line of n, h, m, etc.\n\nSo the code should process multiple test cases, each in the format described.\n\nBut the original problem statement's input description didn't mention that. So this is confusing.\n\nBut the user's sample input shows that. So perhaps the code should process multiple test cases. So how to handle that?\n\nIn Python, the code can read all lines from stdin, split into tokens, and process them accordingly.\n\nBut how to handle multiple test cases?\n\nLet me think. For example, the input could be read as a list of lines. For each test case, read the first line as n, h, m, then read m lines for the restrictions. Repeat until there are no more lines.\n\nBut how to do that in Python?\n\nWell, the code can read all the input into a list of lines, and process them sequentially.\n\nFor example:\n\nimport sys\n\nlines = [line.strip() for line in sys.stdin if line.strip()]\n\nThen, process each test case by taking the first line as n, h, m, then the next m lines as restrictions, then proceed with the remaining lines.\n\nSo here's the code:\n\nimport sys\n\ndef main():\n\n    import sys\n\n    data = sys.stdin.read().split()\n\n    ptr = 0\n\n    while ptr < len(data):\n\n        n = int(data[ptr])\n\n        h = int(data[ptr+1])\n\n        m = int(data[ptr+2])\n\n        ptr +=3\n\n        max_height = [h]*(n+1)\n\n        for _ in range(m):\n\n            l = int(data[ptr])\n\n            r = int(data[ptr+1])\n\n            x = int(data[ptr+2])\n\n            ptr +=3\n\n            for j in range(l, r+1):\n\n                if x < max_height[j]:\n\n                    max_height[j] = x\n\n        total = 0\n\n        for i in range(1, n+1):\n\n            total += max_height[i] **2\n\n        print(total)\n\nBut this code assumes that the input is given as a sequence of integers, split by whitespace. For example, each line's numbers are split into the data list. So for example, the first test case's input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nWhich would be split into data as [ '3', '3', '3', '1', '1', '1', '2', '2', '3', '3', '3', '2' ].\n\nThen, the code processes n=3, h=3, m=3. Then reads m=3 restrictions. For each restriction, it reads l, r, x.\n\nThis code would handle multiple test cases.\n\nBut the original problem statement's input description may not have mentioned multiple test cases. However, the sample input and output show that there are two test cases, and the code must output two answers.\n\nBut the problem statement's original input says that the first line contains n, h, m. So perhaps the problem actually has multiple test cases. But the original problem statement's input description may not have mentioned it.\n\nBut given that the sample input has multiple test cases, and the code must produce multiple outputs, the code must process multiple test cases.\n\nTherefore, the code should read all test cases until the end of input.\n\nSo the code above would handle that.\n\nBut the original code I thought of (processing one test case) would not handle that. But the sample input requires that.\n\nSo the correct approach is to process multiple test cases.\n\nBut how to handle it in the code.\n\nBut looking at the problem statement's sample input and output, the code must read multiple test cases.\n\nThus, the code must process multiple test cases.\n\nBut the problem's original input description may not have mentioned that. However, given that the sample input has two test cases, and the output has two answers, the code must handle multiple test cases.\n\nSo the code must process multiple test cases.\n\nThus, the code should read all input, split into tokens, and process each test case as follows.\n\nBut the code needs to read n, h, m, then m restrictions.\n\nSo the code is as follows.\n\nBut in the problem statement, the input is given as per the first line. However, the sample input shows multiple test cases. So I think that the code should handle multiple test cases.\n\nTherefore, the code will process multiple test cases.\n\nNow, testing the sample input.\n\nSample input:\n\nFor the first test case:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1\n\n2 2 3\n\n3 3 2.\n\nThen the second test case:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8\n\n3 4 7.\n\nThe code would process these two test cases and output 14 and 262.\n\nThus, the code would be correct.\n\nSo the code in Python would be:\n\nRead all data as a list of integers.\n\nProcess each test case in a loop.\n\nThus, the code:\n\nimport sys\n\ndef main():\n\n    data = list(map(int, sys.stdin.read().split()))\n\n    ptr = 0\n\n    while ptr < len(data):\n\n        n = data[ptr]\n\n        h = data[ptr+1]\n\n        m = data[ptr+2]\n\n        ptr +=3\n\n        max_height = [h]*(n+1)\n\n        for _ in range(m):\n\n            l = data[ptr]\n\n            r = data[ptr+1]\n\n            x = data[ptr+2]\n\n            ptr +=3\n\n            for j in range(l, r+1):\n\n                if x < max_height[j]:\n\n                    max_height[j] = x\n\n        total = 0\n\n        for i in range(1, n+1):\n\n            total += max_height[i] **2\n\n        print(total)\n\nBut wait, what if there are not enough data points? For example, if the input is incomplete. But the problem says that the input is correct.\n\nSo this code should handle all test cases.\n\nThus, this code should be correct.\n\nTesting the first sample input:\n\nThe data list for the first sample would be:\n\n[3,3,3,1,1,1,2,2,3,3,3,2,4,10,2,2,3,8,3,4,7]\n\nProcessing first test case:\n\nn=3, h=3, m=3.\n\nptr starts at 0, then increases to 3.\n\nThen process m=3 restrictions:\n\nFirst restriction: l=1, r=1, x=1. For j=1, set to 1.\n\nSecond restriction: l=2, r=2, x=3. j=2 is set to 3.\n\nThird restriction: l=3, r=3, x=2. j=3 set to 2.\n\nsum is 1+9+4=14.\n\nThen ptr is now 3 + 3*3 = 3+9=12.\n\nNext, process next test case:\n\nn=4, h=10, m=2.\n\nptr is 12. data[12] is 4, data[13] is 10, data[14] is 2. ptr increases to 15.\n\nThen process 2 restrictions:\n\nFirst restriction: l=2, r=3, x=8. For j=2,3. max_height is set to 8 for both.\n\nSecond restriction: l=3, r=4, x=7. j=3 is set to 7 (was 8), j=4 is set to 7.\n\nsum is 10^2 + 8^2 +7^2 +7^2 = 100 + 64 + 49 +49 = 262.\n\nThus, code outputs 14 and 262, which matches the sample.\n\nThus, the code should be correct.\n\nNow, handling edge cases.\n\nCase where m=0: no restrictions. All houses are h. Sum is n*h².\n\nAnother case where a restriction has x_i larger than h. For example, n=1, h=2, m=1, restriction [1,1,3]. Then the max_height is min(2, 3) → 2. So sum is 4.\n\nAnother case: a restriction that covers multiple houses. For example, n=2, h=5, m=1, restriction [1,2, 3]. So both houses are set to 3. Sum 18.\n\nYes.\n\nThus, this code should be correct.\n",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction limits the maximum height of houses within a specific range.\n\n### Approach\n1. **Understand the Constraints**: Each house can have a height between 0 and a given maximum height `h`. Additionally, there are restrictions that limit the maximum height in specific ranges.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that apply to it. The maximum allowable height for each house is the minimum of all restrictions that cover it and the global maximum height `h`.\n3. **Calculate Profit**: Once the allowable heights for all houses are determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.read().split()))\n    ptr = 0\n    while ptr < len(data):\n        n = data[ptr]\n        h = data[ptr+1]\n        m = data[ptr+2]\n        ptr += 3\n        max_height = [h] * (n + 1)  # 1-based indexing\n        for _ in range(m):\n            l = data[ptr]\n            r = data[ptr+1]\n            x = data[ptr+2]\n            ptr += 3\n            for j in range(l, r + 1):\n                if x < max_height[j]:\n                    max_height[j] = x\n        total = 0\n        for i in range(1, n + 1):\n            total += max_height[i] ** 2\n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read as a single list of integers for simplicity, allowing us to handle multiple test cases efficiently.\n2. **Initialization**: For each test case, initialize an array `max_height` where each element starts at the maximum allowed height `h`.\n3. **Applying Restrictions**: For each restriction, update the allowable height for each house in the specified range to be the minimum of its current value and the restriction's maximum height.\n4. **Calculating Profit**: After processing all restrictions, compute the total profit by summing the squares of the allowable heights for all houses.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by leveraging the constraints efficiently. The complexity is manageable given the small input limits (up to 50 houses and restrictions), making this brute-force approach feasible.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = list(map(int, sys.stdin.read().split()))\n    ptr = 0\n    while ptr < len(data):\n        n = data[ptr]\n        h = data[ptr+1]\n        m = data[ptr+2]\n        ptr += 3\n        max_height = [h] * (n + 1)  # 1-based indexing\n        for _ in range(m):\n            l = data[ptr]\n            r = data[ptr+1]\n            x = data[ptr+2]\n            ptr += 3\n            for j in range(l, r + 1):\n                if x < max_height[j]:\n                    max_height[j] = x\n        total = 0\n        for i in range(1, n + 1):\n            total += max_height[i] ** 2\n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 550,
        "thoughts_token_count": 7977
    }
}