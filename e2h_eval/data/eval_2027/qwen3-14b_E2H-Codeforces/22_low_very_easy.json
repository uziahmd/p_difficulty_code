{
    "start": 1758309314.4282079,
    "end": 1758309343.0730526,
    "start-formatted": "2025-09-20 04:15 KST",
    "end-formatted": "2025-09-20 04:15 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where their mark is the maximum for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the marks for student 1 in subjects 1, 2, 3.\n\nSo the steps I need to take:\n\n1. For each subject (columns), find the maximum mark.\n2. For each student, check if there's at least one subject where their mark equals the maximum for that subject. If yes, they are successful.\n3. Count how many such students there are.\n\nWait, but how to process the data? Let's think about the structure.\n\nLet me think about the data. Let's say we have a 2D array (list of lists) where each row is a student and each column is a subject. For example, for the first sample input:\n\nn=3, m=3\nStudent 1: [2,2,3]\nStudent 2: [2,3,2]\nStudent 3: [1,1,2]\n\nFor each subject (columns 0, 1, 2):\n\nSubject 0: max is 2 (students 1 and 2 have 2)\nSubject 1: max is 3 (student 2)\nSubject 2: max is 3 (student 1)\n\nSo, student 1 has max in subject 2 (3), student 2 has max in subject 1 (3). Student 3 has no max in any subject. So total successful is 2.\n\nSo the approach is:\n\n- For each column (subject), find the maximum value.\n- Then, for each student, check if in any of the columns, their value is equal to the max of that column. If yes, count them.\n\nSo the plan is:\n\nRead the input into a 2D list. Then compute for each column the maximum. Then for each row (student), check if any element in that row is equal to the max of its column.\n\nBut how to process the columns? Because the data is stored as rows. So for each column j, iterate through all rows and collect the values in that column.\n\nSo for example, for the first sample, columns are:\n\nColumn 0: 2, 2, 1 → max is 2\nColumn 1: 2, 3, 1 → max is 3\nColumn 2: 3, 2, 2 → max is 3\n\nThen, for each student (row), check if any of their elements is equal to the max of that column.\n\nSo for student 1 (row 0): [2,2,3]. Check column 0: 2 == max (2) → yes. So this student is successful. Similarly, column 2: 3 is max. So even if one is true, the student is counted.\n\nSo the steps in code:\n\nRead n and m.\n\nRead the next n lines, each line is a string. Convert each string into a list of integers. So for example, '223' becomes [2,2,3].\n\nThen, for each column j (from 0 to m-1), compute the maximum value. Let's create a list called max_per_subject, where max_per_subject[j] is the maximum value in column j.\n\nOnce we have that, for each student (row), iterate through their marks. For each mark in position j, check if it's equal to max_per_subject[j]. If any of them is, then the student is successful. So we can count them.\n\nSo the code steps:\n\nRead n, m.\n\nThen read n lines, each line is a string. For each line, convert into a list of integers. So the data is stored as a list of lists.\n\nThen compute max_per_subject for each column.\n\nThen for each student in the data, check if any of their marks in the columns is equal to the max for that column. If yes, increment the count.\n\nNow, how to compute max_per_subject?\n\nFor each column j:\n\nmax_val = 0\n\nfor each row in data:\n\n    val = row[j]\n\n    if val > max_val:\n\n        max_val = val\n\nSo for each j, compute this.\n\nOnce that's done, for each student, check if any of their elements in the columns is equal to the max_per_subject for that column.\n\nNow, code-wise, let's think.\n\nIn Python:\n\n",
    "response": "```python\nn, m = map(int, input().split())\ngradebook = []\nfor _ in range(n):\n    line = input().strip()\n    gradebook.append([int(c) for c in line])\n\nmax_per_subject = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if gradebook[i][j] > max_val:\n            max_val = gradebook[i][j]\n    max_per_subject[j] = max_val\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if gradebook[i][j] == max_per_subject[j]:\n            successful += 1\n            break\n\nprint(successful)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngradebook = []\nfor _ in range(n):\n    line = input().strip()\n    gradebook.append([int(c) for c in line])\n\nmax_per_subject = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if gradebook[i][j] > max_val:\n            max_val = gradebook[i][j]\n    max_per_subject[j] = max_val\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if gradebook[i][j] == max_per_subject[j]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 153,
        "thoughts_token_count": 1024
    }
}