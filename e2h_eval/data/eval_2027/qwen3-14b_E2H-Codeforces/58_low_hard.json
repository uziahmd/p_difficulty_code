{
    "start": 1758309899.596766,
    "end": 1758309953.9138517,
    "start-formatted": "2025-09-20 04:24 KST",
    "end-formatted": "2025-09-20 04:25 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's try to figure out how to solve this problem. The task is to find the minimum number of edges to add to a graph to create an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I remember that a graph is bipartite if and only if it doesn't contain any odd-length cycles. So, if the graph is already bipartite, then adding edges to create an odd cycle would require some changes. But if the graph isn't bipartite, then there's already an odd cycle, so t would be zero and w would be 1? Wait, no. Because the problem says that the existing graph might not have any odd cycles. So the first thing we need to check is whether the graph already has an odd cycle. If yes, then t is 0 and w is 1? Or maybe more?\n\nWait, the problem says that we need to form a simple cycle of odd length consisting of more than one vertex. So if the graph already contains such a cycle, then t is 0 and w is the number of ways to choose such a cycle (but since the question is about adding edges to form it, but if it's already present, then you don't need to add any edges. So the answer would be t=0 and w=1? Or maybe the number of existing such cycles? But the problem says that the answer w is the number of ways to add t edges. If t is 0, then the way is to not add any edges, but how many such ways are there? Well, if there's already an odd cycle, then there's exactly one way (since adding zero edges). But the problem says that the output for the second example is '0 1' when the input is a triangle (which is an odd cycle). So in that case, the answer is 0 and 1. So that makes sense. So if the graph already contains an odd cycle, then the answer is t=0 and w=1. Because even though there may be multiple existing odd cycles, the problem counts the number of ways to add t edges. Since t is zero, there's only one way: add nothing. Wait, but the note in the example says that for the input with 3 nodes connected in a triangle (the second input example), the output is 0 1. So that's correct.\n\nSo the first step is to check if the graph already has an odd cycle. If yes, then the answer is t=0, w=1. Otherwise, we need to find the minimal number of edges to add to create an odd cycle, and count the number of ways.\n\nNow, if the graph is bipartite (so no odd cycles), then how can we add edges to make an odd cycle? Let's think. For a bipartite graph, all cycles are even-length. To create an odd cycle, we need to add edges in a way that creates a cycle with an odd length.\n\nBut how? Let's think about the structure of the graph. Since the graph is bipartite, each connected component is bipartite. So each component can be divided into two parts, say A and B, such that all edges are between A and B.\n\nIf we take a connected component and add an edge between two nodes in the same partition, that would create an odd-length cycle. Because, for example, suppose there's a path from u to v in the same partition. The original path has even length (since in bipartite graphs, all paths between nodes in the same partition have even length). Adding an edge between u and v would create a cycle of length (path length + 1), which is odd.\n\nSo, the minimal number of edges to add is 1. Because adding any such edge would create an odd cycle. However, the problem requires that the cycle must consist of more than one vertex. So adding an edge between two nodes in the same partition of a bipartition would create a cycle of length at least 3? Well, if the two nodes are connected by a path of length 2, then adding the edge would form a triangle (cycle of length 3). Which is odd. So the minimal t is 1.\n\nBut wait, what if the connected component is a single node? Then, adding an edge would not be possible (since there are no edges between the same node, and the graph has no loops). But in the problem statement, the graph has no loops. So for a connected component that is a single node, it's impossible to create a cycle. However, the problem says that the graph is undirected, and the cycle must consist of more than one vertex. So for a component with only one node, adding edges can't form a cycle. Therefore, in such cases, we need to consider other components.\n\nSo, the problem reduces to:\n\nIf the graph is already non-bipartite (has an",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and also count the number of ways to achieve this.\n\n### Approach\n1. **Check for Existing Odd Cycle**: If the graph already contains an odd-length cycle, the answer is straightforward: no edges need to be added (t = 0) and there's exactly one way to do this (w = 1).\n2. **Bipartite Graph Analysis**: If the graph is bipartite (i.e., it does not contain any odd-length cycles), we need to determine the minimum number of edges to add to create an odd cycle. This involves checking each connected component of the graph:\n   - For each connected component, if it has at least two nodes in one of its partitions, we can add an edge between two nodes in the same partition to form an odd cycle.\n   - The minimum number of edges required is 1, and the number of ways to do this is determined by the number of pairs of nodes within the same partition.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n                            has_odd_cycle = True\n                            break\n                if has_odd_cycle:\n                    break\n            if has_odd_cycle:\n                break\n    \n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n    \n    # Now, the graph is bipartite, so we need to find the minimal t and w\n    # For each connected component, compute the size of each partition\n    # Then, for each component, if both partitions have at least 1 node, then the number of ways is (a * (a-1) // 2 + b * (b-1) // 2)\n    # But since we need the minimal t, which is 1, we need to count the number of possible edges that can be added to create an odd cycle\n    # So, for each component, the number of possible edges is (a * (a-1) // 2 + b * (b-1) // 2)\n    # Sum all these over all components, and that's the total w\n    \n    # Reset color to -1\n    color = [-1] * n\n    component_counts = []\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt0 = 1\n            cnt1 = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        if color[v] == 0:\n                            cnt0 += 1\n                        else:\n                            cnt1 += 1\n                        queue.append(v)\n            component_counts.append((cnt0, cnt1))\n    \n    total_ways = 0\n    for a, b in component_counts:\n        # Number of ways to choose two nodes in the same partition\n        # For partition with a nodes: a*(a-1)/2\n        # For partition with b nodes: b*(b-1)/2\n        total_ways += (a * (a - 1) // 2) + (b * (b - 1) // 2)\n    \n    if total_ways == 0:\n        # All components are single nodes or isolated edges (so no possible ways)\n        # Need to add 3 edges to form a triangle\n        # Because you need at least 3 nodes to form a cycle of length 3\n        # So check if there are at least 3 nodes in the graph\n        if n >= 3:\n            print(\"3 1\")\n        else:\n            print(\"0 1\")\n    else:\n        print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Check for Odd Cycle**: The code first checks if the graph already contains an odd-length cycle using BFS. If found, it immediately returns `0 1`.\n2. **Bipartite Check**: If no odd cycle is found, the graph is bipartite. The code then determines the sizes of each partition in every connected component.\n3. **Count Ways to Add Edges**: For each component, the number of ways to add an edge within the same partition (to form an odd cycle) is calculated. The sum of these values gives the total number of ways to add one edge to form an odd cycle.\n4. **Edge Cases**: If no valid edges can be added (e.g., all components are single nodes), the code checks if at least three nodes exist to form a triangle, requiring three new edges.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n                            has_odd_cycle = True\n                            break\n                if has_odd_cycle:\n                    break\n            if has_odd_cycle:\n                break\n    \n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n    \n    # Now, the graph is bipartite, so we need to find the minimal t and w\n    # For each connected component, compute the size of each partition\n    # Then, for each component, if both partitions have at least 1 node, then the number of ways is (a * (a-1) // 2 + b * (b-1) // 2)\n    # But since we need the minimal t, which is 1, we need to count the number of possible edges that can be added to create an odd cycle\n    # So, for each component, the number of possible edges is (a * (a-1) // 2 + b * (b-1) // 2)\n    # Sum all these over all components, and that's the total w\n    \n    # Reset color to -1\n    color = [-1] * n\n    component_counts = []\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt0 = 1\n            cnt1 = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        if color[v] == 0:\n                            cnt0 += 1\n                        else:\n                            cnt1 += 1\n                        queue.append(v)\n            component_counts.append((cnt0, cnt1))\n    \n    total_ways = 0\n    for a, b in component_counts:\n        # Number of ways to choose two nodes in the same partition\n        # For partition with a nodes: a*(a-1)/2\n        # For partition with b nodes: b*(b-1)/2\n        total_ways += (a * (a - 1) // 2) + (b * (b - 1) // 2)\n    \n    if total_ways == 0:\n        # All components are single nodes or isolated edges (so no possible ways)\n        # Need to add 3 edges to form a triangle\n        # Because you need at least 3 nodes to form a cycle of length 3\n        # So check if there are at least 3 nodes in the graph\n        if n >= 3:\n            print(\"3 1\")\n        else:\n            print(\"0 1\")\n    else:\n        print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 578,
        "completion_token_count": 1233,
        "thoughts_token_count": 1024
    }
}