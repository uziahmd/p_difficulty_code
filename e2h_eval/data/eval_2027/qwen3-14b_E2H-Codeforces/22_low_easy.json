{
    "start": 1758309587.7921128,
    "end": 1758309614.2352567,
    "start-formatted": "2025-09-20 04:19 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. \n\nSo the input is n students and m subjects. Each student's marks are given as a string of m digits. \n\nFirst, I need to process each subject and find out which students are the best in that subject. Then, collect all those students and count how many unique ones there are. Because a student can be best in multiple subjects, but we just need to count them once.\n\nLet me think about the steps:\n\n1. Read n and m.\n2. Read the next n lines, each line being a string of m characters. So, for example, if the input is '223', then the first student's marks are 2, 2, 3 for subjects 1, 2, 3.\n3. For each subject (columns), find the maximum value. Then, check which students have that maximum in that subject. Those students are considered successful.\n4. Collect all such students and count how many unique students there are.\n\nWait, but how do I represent the data? Maybe convert each student's marks into a list of integers. Then for each column (subject), find the maximum value. Then, for each student, check if any of their marks in any subject is equal to the maximum of that subject. If yes, then they are successful.\n\nSo the plan is:\n\n- For each subject (each column in the gradebook), find the maximum value.\n- Then, for each student, check if at least one of their marks is equal to the maximum of that subject. If yes, then count them.\n\nBut how to get the maximum for each subject?\n\nLet me think: the gradebook is stored as a list of strings. For example, for the first sample input, the three students are '223', '232', '112'. The subjects are columns 0, 1, 2 (assuming zero-based). For subject 0, the values are 2, 2, 1. Max is 2. For subject 1: 2,3,1 → max is 3. For subject 2: 3,2,2 → max is 3. \n\nThen, for each student, check if any of their marks in any subject is equal to the max of that subject. \n\nSo for student 0: his marks are 2,2,3. For subject 0, he has 2 which is equal to max (2). For subject 1, he has 2 which is less than 3. For subject 2, 3 which is equal to max. So he is successful. \n\nStudent 1: marks are 2,3,2. Subject 0: 2 is max. So he is successful. Subject 1: 3 is max. So he is successful. So he is counted once. \n\nStudent 2: marks are 1,1,2. For all subjects, his marks are less than the max. So not successful. \n\nThus total is 2, which matches the sample.\n\nSo the steps are:\n\n1. Read n and m.\n2. Read n strings, each of length m. Let's store them as a list of lists. For example, for each student, convert their string into a list of integers. So for the first student, [2,2,3], etc.\n3. For each subject (column), compute the maximum value. For example, for column 0, collect all the values from each student's first position and take max.\n4. Then, for each student, check if any of their marks in any subject equals the max of that subject. If at least one exists, count them.\n\nSo how to implement this?\n\nLet me think about code structure.\n\nIn Python, first read the input. The first line is n and m. Then read n lines. Let's parse them as a list of lists of integers.\n\nFor example:\n\nn, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append( [int(c) for c in line] )\n\nThen, for each column j in 0..m-1, find the maximum value. Let's create a list max_per_subject, where max_per_subject[j] is the maximum value in column j.\n\nOnce that is computed, for each student, check if any of their marks in any subject is equal to the max_per_subject for that subject. If yes, then add to the count.\n\nSo:\n\nmax_per_subject = [0]*m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        val = grades[i][j]\n       ",
    "response": "```python\nn, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_per_subject = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, grades[i][j])\n    max_per_subject[j] = max_val\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_per_subject[j]:\n            successful += 1\n            break\n\nprint(successful)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_per_subject = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, grades[i][j])\n    max_per_subject[j] = max_val\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_per_subject[j]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 456,
        "completion_token_count": 141,
        "thoughts_token_count": 1024
    }
}