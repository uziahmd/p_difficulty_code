{
    "start": 1758313695.2940907,
    "end": 1758314590.4484239,
    "start-formatted": "2025-09-20 05:28 KST",
    "end-formatted": "2025-09-20 05:43 KST",
    "gpu": 2,
    "pid": 43,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Check the string\n\nA has a string consisting of some number of lowercase English letters 'a'. He gives it to his friend B who appends some number of letters 'b' to the end of this string. Since both A and B like the characters 'a' and 'b', they have made sure that at this point, at least one 'a' and one 'b' exist in the string.B now gives this string to C and he appends some number of letters 'c' to the end of the string. However, since C is a good friend of A and B, the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. It is also possible that the number of letters 'c' equals both to the number of letters 'a' and to the number of letters 'b' at the same time.You have a string in your hands, and you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print \"YES\", otherwise print \"NO\" (without the quotes).\n\n## Input\nThe first and only line consists of a string $$$S$$$ ($$$ 1 \\le |S| \\le 5\\,000 $$$). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'.\n\n## Output\nPrint \"YES\" or \"NO\", according to the condition.\n\n## Example\n### Input\n['aaabccc', 'bbacc', 'aabc']\n\n### Output\n['YES', 'NO', 'YES']\n\n## Note\nConsider first example: the number of 'c' is equal to the number of 'a'. Consider second example: although the number of 'c' is equal to the number of the 'b', the order is not correct.Consider third example: the number of 'c' is equal to the number of 'b'.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem says that a string is formed in a specific way. Let me break down the steps:\n\n1. A starts with some number of 'a's. So the initial string is all 'a's, and there's at least one 'a'.\n2. B appends some number of 'b's to the end. So after this step, the string has 'a's followed by 'b's. Also, there's at least one 'b' here. So the total string after B's step has both 'a's and 'b's.\n3. Then C appends some number of 'c's. The number of 'c's added must be equal to the number of 'a's or the number of 'b's in the string at that point (before adding the 'c's). Also, it's possible that the count of 'c's equals both counts of 'a's and 'b's.\n\nOur task is to check if a given string could have been formed in this way.\n\nSo, given a string S, we need to determine if it meets these conditions.\n\nLet me think about how to model this.\n\nFirst, the string must consist of some 'a's followed by some 'b's followed by some 'c's. Because each step appends to the end. So the order must be all a's, then all b's, then all c's. If there's any other order, like a, then b, then a again, that's invalid. So the first check is that the string is in the form a*b*c*.\n\nWait, but the problem says that after A and B, the string is a's followed by b's. Then C adds c's. So the final string must be a's followed by b's followed by c's. So the string must have all a's first, then all b's, then all c's. So any deviation from this structure would automatically be invalid.\n\nSo first, I need to check that the string is in this order. For example, if there's a 'c' before some 'b's, that's invalid. Or if there's an 'a' after a 'b' or 'c', that's invalid.\n\nSo first step: check that the string is composed of a block of a's, then a block of b's, then a block of c's. So for example, 'aaabbbccc' is okay, but 'aabbaacc' is not because the b's are not all consecutive, and there's a 'a' after a 'b'.\n\nSo how to check this? Well, we can iterate through the string and check that the characters are non-decreasing in terms of their order. Like, 'a' comes before 'b', which comes before 'c'. So once a 'b' is encountered, there should be no 'a's after. Similarly, once a 'c' is encountered, there should be no 'a's or 'b's after.\n\nSo for the string S:\n\n- All 'a's must come before any 'b's, which must come before any 'c's.\n\nSo first, check that the string is in this order.\n\nIf this is not the case, return 'NO'.\n\nOnce that is confirmed, then proceed to check the counts.\n\nLet me think about the counts.\n\nLet me denote:\n\ncount_a = number of 'a's in the string.\n\ncount_b = number of 'b's.\n\ncount_c = number of 'c's.\n\nBut according to the problem, the 'c's added by C must be equal to the count of 'a's or the count of 'b's in the string before adding the 'c's. Wait, the count of 'a's and 'b's before adding the 'c's. Because when C adds the 'c's, the existing string is the one from A and B, which is (count_a) a's and (count_b) b's. Then C adds count_c c's. So the count_c must be equal to count_a or count_b (from before adding the c's). But since the count of a's and b's in the string before adding the c's is the same as the count in the final string (since the c's are added after), so the count_c must be equal to count_a or count_b.\n\nWait, no. Because the count of a's and b's in the string before adding the c's is exactly the count of a's and b's in the final string. Because the c's are added after. So in the final string, the count of a's is the same as before adding the c's. Same for b's.\n\nTherefore, the count_c must be equal to count_a or count_b.\n\nBut also, the original steps require that after A and B, there is at least one a and one b. So in the original string before adding c's, there is at least one a and one b. So in the final string, the count_a is >=1, count_b >=1, and count_c >=1? No, because C can add zero c's? Wait no. Wait the problem says that C appends some number of 'c's. But the problem says that \"the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string.\"\n\nWait, but the problem says that C appends some number of letters 'c' to the end. So the number of 'c's added is equal to the number of 'a's or the number of 'b's in the string (before adding the c's). So the count_c (the number of c's in the final string) is equal to the count_a_initial (which is the same as count_a in the final string) or the count_b_initial (same as count_b in the final string).\n\nSo the count_c must be equal to count_a or count_b.\n\nBut also, the initial steps require that after A and B, there is at least one a and one b. So count_a >= 1 and count_b >=1. Also, since C appends some number of c's. But the problem says that C appends some number of c's. So the number of c's added is equal to count_a_initial or count_b_initial. But that number can be zero? No. Because the problem says that C appends some number of letters. So the number must be at least 1?\n\nWait, the problem says that C appends some number of letters 'c' to the end. The problem says that C is a good friend of A and B, and the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. So, the number of 'c's added is equal to count_a_initial (which is the count of a's in the string before adding the c's) or count_b_initial (the count of b's in the string before adding the c's). However, since after A and B, the string has at least one a and one b. So count_a_initial is >=1 and count_b_initial >=1. Therefore, the number of c's added is either count_a_initial or count_b_initial, which is at least 1. Hence, the count_c in the final string is equal to count_a_initial (which is count_a) or count_b_initial (which is count_b). Therefore, in the final string, count_c must be equal to count_a or count_b. And count_a and count_b are each at least 1. Also, count_c must be at least 1.\n\nBut in the final string, count_c is the number of c's added. So the count_c is equal to count_a_initial or count_b_initial. Which is the same as count_a or count_b in the final string. So, the condition is that count_c must be equal to count_a or count_b. Also, count_a and count_b must be >=1. Also, the string must be in the order a's followed by b's followed by c's.\n\nSo putting it all together:\n\nThe steps to check are:\n\n1. Check that the string is in the form a*b*c*. That is, all a's first, then all b's, then all c's. If not, return NO.\n\n2. Check that there is at least one a, one b, and one c. Because:\n\n   - After A's step, there is at least one a. Then B appends at least one b. Then C appends at least one c (since the number of c's added is equal to count_a or count_b, which are >=1). So the final string must have at least one a, one b, and one c.\n\nWait, but what if count_c is equal to count_a_initial (which is >=1). So the count_c is >=1. So yes, the final string must have at least one c. So, the counts for a, b, c must all be at least 1.\n\nSo, in code, after checking the order, check that count_a >=1, count_b >=1, count_c >=1.\n\nThen, check whether count_c is equal to count_a or count_b.\n\nIf all those conditions are met, return YES, else NO.\n\nWait, but let's look at the examples.\n\nFirst example input: 'aaabccc' → counts are a:3, b:1, c:3. So count_c is 3. Which is equal to count_a (3). So yes. Also, the order is correct. And counts are all >=1. So output is YES.\n\nSecond example: 'bbacc' → the order is not correct. Because the string is 'bbacc' → the first two are b's, then a, then c. So the a comes after b, which is invalid. So the order check fails, so output is NO.\n\nThird example: 'aabc' → counts are a:2, b:1, c:1. The order is a's followed by b's followed by c's. Then count_c is 1, which equals count_b (1). So yes. So output is YES.\n\nSo the logic seems to hold.\n\nSo the steps are:\n\nCheck the order of the string. Then check that counts of a, b, c are all at least 1. Then check if count_c equals count_a or count_b.\n\nBut wait, what about the case where the string is all a's and c's? Like, for example, 'aaaccc'? Then, according to the steps:\n\nThe string would have to have been formed by A's initial a's, then B appending some b's, but then the string has no b's. So that's invalid. So the count_b must be at least 1. So in this case, the count_b is zero, which is invalid. So our code checks that count_b is >=1.\n\nSo, the code steps:\n\nFirst, check that the string is in the form a*b*c*. How to do this?\n\nWe can check that the string is made of a's, then b's, then c's. So for example, the string should not have any 'a's after a 'b' or 'c', and no 'b's after a 'c'.\n\nSo, for the string S:\n\nWe can check that the characters are in non-decreasing order according to their ASCII values. Because 'a' < 'b' < 'c'. So the string should be such that each character is >= the previous one. So for example, 'aabbc' is okay, but 'abba' is not.\n\nBut wait, 'aabbc' is okay. Let's see: the first part is a's, then b's, then c's. So the entire string is in order.\n\nSo, for the entire string, the characters must be non-decreasing. So, for each i from 1 to len(S)-1, S[i] >= S[i-1].\n\nYes. So that's a way to check the order.\n\nSo, for example, 'aabc' is okay. 'abba' would have a 'b' followed by 'a', which is invalid.\n\nSo, first, check that the string is non-decreasing. If not, return 'NO'.\n\nThen, check that there is at least one a, one b, one c.\n\nThen check that the count of c is equal to count of a or count of b.\n\nBut wait, the count of c is the number of c's in the string. Which is the same as the number of c's added by C. Which must be equal to the count of a's (before adding c's) or count of b's (before adding c's). Which is the same as count_a and count_b in the final string. Because the a's and b's are not modified when adding c's.\n\nSo yes, the count_c must be equal to count_a or count_b.\n\nSo, the code steps:\n\nRead the string S.\n\nCheck if the string is non-decreasing. If not, return NO.\n\nCheck that the counts of a, b, c are all >=1.\n\nCheck if count_c is equal to count_a or count_b.\n\nIf all these are true, return YES, else NO.\n\nBut wait, what about the case where the string is 'abc'? Let's see:\n\ncount_a=1, count_b=1, count_c=1. The order is correct. All counts are >=1. count_c is 1, which equals count_a (1) and count_b (1). So it's valid. So output is YES.\n\nAnother example: 'abcc' → counts a=1, b=1, c=2. Then count_c is 2. Which is not equal to count_a (1) or count_b (1). So invalid. So output is NO.\n\nAnother example: 'aabbc' → counts a=2, b=2, c=1. Then count_c is 1. Which is not equal to a (2) or b (2). So invalid. So output NO.\n\nAnother example: 'aabbc' → no, but if the string is 'aabbc' → the order is correct. But count_c is 1. So that's invalid. But if the string is 'aabbc' → the count_c is 1, which is not equal to count_a (2) or count_b (2). So returns NO.\n\nSo, the code needs to check for that.\n\nNow, how to implement this in Python.\n\nFirst, check the order. Let's loop through the string and see if each character is >= the previous one.\n\nFor example:\n\ndef is_ordered(s):\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    return True\n\nThen, check that the counts are all >=1.\n\nThen, check if count_c equals count_a or count_b.\n\nBut how to count the letters.\n\nIn Python, we can do:\n\ncount_a = s.count('a')\ncount_b = s.count('b')\ncount_c = s.count('c')\n\nSo, for example, for the string 'aaabccc', count_a is 3, count_b is 1, count_c is 3.\n\nSo, check if count_c == count_a or count_c == count_b.\n\nBut also, we need to make sure that count_a and count_b are >=1, and count_c >=1.\n\nSo, putting it all together:\n\nRead the input string S.\n\nCheck if the string is ordered (non-decreasing). If not, output NO.\n\nElse, check count_a, count_b, count_c.\n\nIf any of them is zero, output NO.\n\nElse, check if count_c equals count_a or count_b. If yes, output YES, else NO.\n\nBut wait, what about the case where the string is 'aaaabbbbcccc'? Let's see:\n\ncount_a is 4, count_b is 4, count_c is 4. So count_c equals count_a and count_b. So it's valid. So output YES.\n\nAnother case: 'aabbc' → count_a=2, count_b=2, count_c=1. So count_c is not equal to either. So output NO.\n\nAnother case: 'aabcc' → counts a=2, b=1, c=2. So count_c is 2, which equals count_a (2). So valid. So output YES.\n\nSo, the code seems to handle that.\n\nNow, let's test the sample inputs.\n\nSample Input 1: 'aaabccc' → counts a=3, b=1, c=3. The order is correct. All counts >=1. c equals a. So YES.\n\nSample Input 2: 'bbacc' → the order is 'b', 'b', 'a', 'c', 'c'. The third character is 'a' which is less than previous 'b', so the order check fails. So output NO.\n\nSample Input 3: 'aabc' → order is a, a, b, c. Correct. counts a=2, b=1, c=1. count_c is 1, which equals count_b (1). So output YES.\n\nWhich matches the sample outputs.\n\nNow, what about some edge cases?\n\nCase 1: 'abc' → counts 1,1,1. All conditions met. YES.\n\nCase 2: 'ab' → the string is ordered, but count_c is zero. So output NO.\n\nCase 3: 'ac' → ordered? Yes. But count_b is zero. So output NO.\n\nCase 4: 'aabbcc' → counts a=2, b=2, c=2. So count_c equals a and b. So YES.\n\nCase 5: 'aabcc' → a=2, b=1, c=2. So c equals a. YES.\n\nCase 6: 'abbbc' → a=1, b=3, c=1. c equals a. YES.\n\nWhat about a string that has all a's and c's, but no b's? Like 'aacc' → order is correct, but count_b is 0. So output NO.\n\nAnother case: 'abbbc' → order is correct. count_a is 1, count_b is 3, count_c is 1. count_c equals count_a. So yes.\n\nAnother case: 'abbccc' → count_a is 1, count_b is 2, count_c is 3. So count_c is not equal to a or b. So output NO.\n\nSo, the code seems to handle these.\n\nNow, what about the case where the string is 'aabbcc'? The count_c is 2, which is equal to count_a (2) and count_b (2). So it's valid. So YES.\n\nAnother edge case: the string is 'a' → length 1. But then, the count_b and count_c are zero. So output NO.\n\nAnother edge case: 'ab' → count_c is zero. So output NO.\n\nAnother case: 'abc' → count_c is 1, which is equal to count_a (1) or count_b (1). So yes.\n\nNow, code steps:\n\nRead the input string.\n\nCheck if the string is ordered. If not, output NO.\n\nElse, check if count_a >=1, count_b >=1, count_c >=1. If any is zero, output NO.\n\nElse, check if count_c == count_a or count_c == count_b. If yes, output YES, else NO.\n\nSo, the code in Python would be:\n\nRead S from input.\n\nThen:\n\ndef check(s):\n    # check order\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return \"NO\"\n    # check counts\n    count_a = s.count('a')\n    count_b = s.count('b')\n    count_c = s.count('c')\n    if count_a == 0 or count_b == 0 or count_c == 0:\n        return \"NO\"\n    if count_c == count_a or count_c == count_b:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nBut wait, the code is not handling the case where the string is ordered but has a's and c's but no b's. For example, 'ac' → ordered, but count_b is zero → returns NO.\n\nYes.\n\nBut what about the case where the string is 'aabb' → ordered. But count_c is zero. So returns NO.\n\nSo that's handled.\n\nNow, let's test the sample input.\n\nSample input 2: 'bbacc' → the order check fails. So returns NO.\n\nSample input 3: 'aabc' → order is correct. count_a is 2, count_b is 1, count_c is 1. So count_c is 1 equals count_b. So returns YES.\n\nNow, what about a string like 'abbbcc' → count_a is 1, count_b is 3, count_c is 2. So count_c is not equal to either. So returns NO.\n\nAnother case: 'abcc' → count_c is 2, count_a is 1, count_b is 1. So count_c is not equal to either. So returns NO.\n\nSo, code seems to handle that.\n\nNow, code in Python:\n\nRead the input string. For example, in the problem statement, the input is given as a list of strings, but in the actual problem, the input is a single string. Wait, looking back:\n\nThe input says:\n\nInput: The first and only line consists of a string S.\n\nSo, for example, in the sample input given in the problem, the input is given as a list of strings, but that's probably for the example. The actual input is a single string.\n\nWait, the sample input shows:\n\nInput:\n\n['aaabccc', 'bbacc', 'aabc']\n\nBut that's probably a way to represent multiple test cases. However, the problem says that the input is a single string. Wait, no, looking back:\n\nThe problem says:\n\nInput:\n\nThe first and only line consists of a string S (1 ≤ |S| ≤ 5000). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'.\n\nSo, the input is a single string. The sample input shows three examples, but perhaps that's for the purpose of the example. So in the actual code, we need to read a single string from stdin.\n\nWait, but in the sample input given, the user shows that for example, the input is ['aaabccc', 'bbacc', 'aabc'], but that's perhaps a mistake. Because the problem says that the input is a single string. So perhaps the sample input is presented as a list of test cases, but the actual code is supposed to read one string per test case.\n\nBut in the problem statement, the sample input shows three test cases. But the actual input is one string. So perhaps the sample input is written in a way that's not standard. For example, perhaps the actual input is a single line, and the sample input is three separate test cases. But the problem says that the code must read a single string. So perhaps the sample input is a list of test cases, but for the actual code, the input is a single string.\n\nBut the problem says that the code must read from stdin. So, for example, in the sample input, the user may have provided multiple test cases, but the code must process one string per run. But the problem says that the input is a single string. So perhaps the sample input is a list of test cases, but the actual code is supposed to read one string.\n\nBut the sample input and output shows that for the three input strings, the outputs are given as a list. So perhaps the problem is that the code is supposed to process multiple test cases. But the problem says that the input is a single string. So perhaps the sample input is written in a way that's confusing. But according to the problem's input description, the input is a single string. So the code must read a single string from stdin.\n\nSo, the code should read the input as:\n\ns = input().strip()\n\nThen process that string.\n\nSo the code would be:\n\ns = input().strip()\n\nThen perform the checks.\n\nNow, code:\n\nBut the code needs to be written as a Python script that reads from stdin and prints to stdout.\n\nSo, the code would be:\n\nRead the string, check the order, then counts.\n\nSo the code:\n\ns = input().strip()\n\ndef is_valid(s):\n    # Check order\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    # Check counts\n    count_a = s.count('a')\n    count_b = s.count('b')\n    count_c = s.count('c')\n    if count_a == 0 or count_b == 0 or count_c == 0:\n        return False\n    if count_c == count_a or count_c == count_b:\n        return True\n    return False\n\nif is_valid(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\nBut wait, let's test this code against the sample inputs.\n\nSample 1: 'aaabccc' → order is correct. count_a=3, count_b=1, count_c=3. So count_c equals count_a. So returns YES.\n\nSample 2: 'bbacc' → order check: the third character is 'a' which is less than 'b' (previous character). So returns False. So output is NO.\n\nSample 3: 'aabc' → order is correct. count_a=2, count_b=1, count_c=1. count_c equals count_b. So returns YES.\n\nSo the code works for the samples.\n\nAnother test case: 'abc' → returns YES.\n\nAnother test case: 'ab' → count_c is 0 → returns NO.\n\nAnother test case: 'aabbcc' → count_c is 2, which is equal to count_a (2) and count_b (2). So returns YES.\n\nAnother test case: 'aabbc' → count_c is 1. count_a is 2, count_b is 2. So 1 != 2. So returns NO.\n\nAnother case: 'abbbc' → count_a=1, count_b=3, count_c=1. So count_c equals count_a → YES.\n\nBut what about a string like 'aabcc' → count_a=2, count_b=1, count_c=2 → YES.\n\nYes.\n\nNow, what about a string like 'aaaabbbbcccc' → count_a=4, count_b=4, count_c=4. So count_c equals both count_a and count_b → YES.\n\nAnother case: 'aaaaaab' → the order is correct. count_c is 0 → returns NO.\n\nAnother case: 'aabbbcc' → count_c is 2. count_a is 2, count_b is 3. So 2 equals count_a → YES.\n\nSo, code seems to handle all cases.\n\nBut wait, what about a string that is 'aabbcc' → counts are 2, 2, 2. So count_c equals both count_a and count_b. So returns YES.\n\nYes.\n\nNow, what about a string like 'abcc' → counts a=1, b=1, c=2. So count_c is 2, which is not equal to a or b (both 1). So returns NO.\n\nYes.\n\nThus, the code should be correct.\n\nBut let me think about some other edge cases.\n\nCase where the string is 'abc' → YES.\n\nCase where the string is 'abcc' → count_c is 2. count_a is 1, count_b is 1. So no.\n\nCase where the string is 'abbbc' → count_c is 1, which equals count_a (1). So yes.\n\nAnother case where the string is 'abbbcc' → count_c is 2. count_a is 1, count_b is 3. So 2 is not equal to either. So returns NO.\n\nAnother case: 'abbccc' → count_a=1, count_b=2, count_c=3. So 3 is not equal to 1 or 2. So returns NO.\n\nAnother case: 'abbcc' → count_c is 2. count_a is 1, count_b is 2. So count_c equals count_b → YES.\n\nYes. So the code returns YES for this case.\n\nThus, the code seems to handle all the cases.\n\nSo, the Python code is as written above.\n\nNow, the code should be written accordingly.\n",
    "response": "To solve this problem, we need to determine if a given string can be formed by following specific rules involving appending characters 'a', 'b', and 'c' in a particular sequence. The string must be formed by starting with some number of 'a's, followed by some number of 'b's, and then some number of 'c's. Additionally, the number of 'c's must be equal to the number of 'a's or 'b's present before appending the 'c's.\n\n### Approach\n1. **Check Order**: The string must be in non-decreasing order of characters, i.e., all 'a's followed by all 'b's followed by all 'c's. This ensures that the string adheres to the sequence of appending characters as described.\n2. **Count Characters**: Ensure that there is at least one occurrence of each character 'a', 'b', and 'c'.\n3. **Validate Counts**: Check if the number of 'c's is equal to the number of 'a's or 'b's in the string.\n\n### Solution Code\n```python\ns = input().strip()\n\ndef is_valid(s):\n    # Check if the string is in non-decreasing order\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    # Count the occurrences of each character\n    count_a = s.count('a')\n    count_b = s.count('b')\n    count_c = s.count('c')\n    # Check if all counts are at least 1\n    if count_a == 0 or count_b == 0 or count_c == 0:\n        return False\n    # Check if count_c equals count_a or count_b\n    return count_c == count_a or count_c == count_b\n\nif is_valid(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n```\n\n### Explanation\n1. **Order Check**: The loop checks if each character in the string is greater than or equal to the previous character, ensuring the string is in the correct order (all 'a's first, followed by 'b's, then 'c's).\n2. **Character Count Check**: The code counts the occurrences of 'a', 'b', and 'c'. If any of these counts are zero, the string cannot be valid as per the problem constraints.\n3. **Count Validation**: The final check ensures that the number of 'c's matches either the number of 'a's or 'b's, which is a requirement based on the problem statement.\n\nThis approach efficiently checks all necessary conditions in linear time relative to the length of the string, ensuring both correctness and performance.",
    "ground_truth": "N/A",
    "extracted_answer": "s = input().strip()\n\ndef is_valid(s):\n    # Check if the string is in non-decreasing order\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    # Count the occurrences of each character\n    count_a = s.count('a')\n    count_b = s.count('b')\n    count_c = s.count('c')\n    # Check if all counts are at least 1\n    if count_a == 0 or count_b == 0 or count_c == 0:\n        return False\n    # Check if count_c equals count_a or count_b\n    return count_c == count_a or count_c == count_b\n\nif is_valid(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 508,
        "completion_token_count": 553,
        "thoughts_token_count": 6068
    }
}