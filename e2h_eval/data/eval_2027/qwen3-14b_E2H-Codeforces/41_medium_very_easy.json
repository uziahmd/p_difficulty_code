{
    "start": 1758307250.5452766,
    "end": 1758307381.4056041,
    "start-formatted": "2025-09-20 03:40 KST",
    "end-formatted": "2025-09-20 03:43 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the tallest house in a certain interval [l_i, r_i] must be at most x_i. My goal is to assign heights to each spot such that all restrictions are satisfied, and the total profit is maximized.\n\nHmm. So the constraints are that for every restriction, the maximum height in the interval l_i to r_i must not exceed x_i. And I need to maximize the sum of squares of the heights.\n\nSince n, h, m are all up to 50, maybe a brute-force approach is possible? But even then, for each of the n houses, there are h+1 possibilities. For n=50, that's 51^50 possibilities, which is way too big. So brute force is impossible.\n\nSo I need a smarter approach. Let's think about how to model this problem.\n\nThe key is that each restriction imposes that the maximum in some interval is <= x_i. So for each interval [l_i, r_i], the maximum of the heights in that interval must be <= x_i.\n\nBut how can I model these constraints and find the optimal heights?\n\nAn alternative idea: For each position, the maximum allowed height is determined by all the restrictions that include it. But since the restrictions are about ranges, it's not straightforward.\n\nWait, but perhaps for each position i, the maximum height allowed for it is the minimum of all x_i from restrictions that cover i. Wait, no. Because a restriction says that the maximum in the interval is <= x_i. So for example, if there's a restriction on [1,3] with x=2, then each of the houses 1, 2, 3 can be up to 2, but maybe even lower. However, if there's another restriction on [2,2] with x=3, then the max in [2,2] is 3, so house 2 can be up to 3. But the first restriction requires that house 2 can't be higher than 2. So the actual maximum allowed for house 2 is the minimum of all the restrictions that apply to it in any interval where it's part of the range. Wait, no. Because a restriction on [1,3] with x=2 implies that the maximum in that interval is <=2. So all houses in that interval can't be higher than 2. So for any house in that interval, their height can't be higher than x_i. So for each house i, the maximum possible height is the minimum of all x_i from restrictions that include i in their interval. But also, there's the global maximum h.\n\nWait, but that's not necessarily correct. Suppose there's a restriction that says that the maximum in [1,3] is <=2. Then each of the houses 1, 2, 3 must be <=2. So for each of those houses, their maximum possible height is at most 2. But if there's another restriction on [1,2] with x=3, then for house 1 and 2, the maximum is min(2,3) = 2. So yes, for each house, the maximum allowed height is the minimum of all x_i from restrictions that cover that house in their interval. But wait, what if there's a restriction that applies to a larger interval, but another that applies to a smaller one?\n\nFor example, suppose house 2 is in a restriction [1,3] with x=2, and another restriction [2,2] with x=3. Then the first restriction requires that house 2 is <=2. The second allows it up to 3, but the first is more restrictive. So the maximum allowed for house 2 is 2.\n\nSo the maximum allowed for each house is the minimum of all x_i's from restrictions that include that house in their interval. But also, the global h. So for each house, the maximum height is min(h, min of all x_i where the restriction's interval includes the house).\n\nWait, but that would be correct only if all the restrictions that apply to the house are such that their x_i is the maximum allowed for that house. But is that the case?\n\nYes. Because if there is a restriction that applies to an interval containing house i, then the maximum height of that house can't exceed the x_i of that restriction. Because if the house's height is higher than x_i, then the maximum in that interval would be higher than x_i, violating the restriction. Therefore, for each house i, the maximum possible height it can have is the minimum of all x_i from restrictions that cover it, and also h.\n\nBut wait, there might be multiple restrictions that cover the same house. For example, if there are two restrictions that cover house i, say x1 and x2. Then the maximum allowed for house i is min(x1, x2, h). Because both restrictions must be satisfied.\n\nSo if I can compute for each house i, the maximum possible height it can have, given all the restrictions, then I can set each house to that maximum, and that would give the maximum total profit.\n\nBut is that correct?\n\nLet me think. Suppose that for each house, we set it to the maximum possible value allowed by all restrictions. Then, all restrictions would be satisfied. Because for any restriction [l_i, r_i], the maximum height in that interval would be the maximum of the individual maxima of each house in that interval. But since each house in that interval has a maximum allowed value that is <= x_i (because any restriction that covers that house would have x_i's that are part of the calculation), then the maximum in the interval would be <= x_i. So that would satisfy the restriction.\n\nWait, but how do I know that for a given restriction [l, r], the maximum of the houses in that interval is <= x_i? Because each house in that interval has their maximum allowed value as the minimum of all x's from restrictions that include them. So for example, suppose a restriction [l, r] with x_i. For each house in [l, r], that restriction is one of the restrictions that includes them. So their maximum allowed is min(..., x_i, ...). Therefore, the maximum allowed for each house in [l, r] is <= x_i. Therefore, the maximum of all those houses is <= x_i. Which satisfies the restriction. So yes, if we set each house to its maximum allowed value, then all the restrictions are satisfied.\n\nTherefore, the problem reduces to:\n\nFor each house i, compute the maximum possible height it can have, which is the minimum between h and all x_i of restrictions that include i in their interval. Then, set each house to that maximum, and compute the sum of squares.\n\nBut wait, this seems too easy. Let me check the examples.\n\nFirst example input:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → house 1's max is min(3, 1) = 1.\n\n2 2 3 → house 2's max is min(3,3) =3.\n\n3 3 2 → house 3's max is min(3,2)=2.\n\nSo the heights are [1,3,2], sum of squares is 1 +9 +4 =14. Which matches the example.\n\nSecond example input:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → for houses 2 and 3, their max is min(10, 8) =8.\n\n3 4 7 → for houses 3 and 4, their max is min(10,7) =7.\n\nSo for house 2: only the first restriction applies. So max is 8.\n\nHouse 3 is covered by both restrictions. So the max is min(8,7) =7.\n\nHouse4: only the second restriction applies. So max is 7.\n\nHouse1: no restrictions. So max is h=10.\n\nSo the heights are [10,8,7,7]. Sum is 100 +64 +49 +49 = 262. Which matches the example.\n\nSo this approach works for the examples. So the problem reduces to for each house, find the minimal x_i among all restrictions that include it, and then take min with h. Then sum the squares.\n\nBut wait, what about overlapping restrictions?\n\nSuppose there's a restriction on [1,3] with x=2, and another restriction on [1,2] with x=3. Then, for house 1 and 2, the first restriction says that their max is 2. The second restriction says that their max is 3. So the min between them is 2. So the maximum allowed is 2. Which is correct.\n\nAnother example: if there's a restriction [1,3] with x=3, and another restriction [2,2] with x=2. Then, for house 2, the maximum allowed is min(3,2) =2. For house 1 and 3, the max allowed is 3. So in this case, the maximum in [1,3] is 3 (house 1 and 3) but house 2 is 2. So the maximum in [1,3] is 3, which is allowed by the first restriction. So that's okay.\n\nBut what if there is a restriction [1,3] with x=2, and another restriction [1,2] with x=3. Then for house 1 and 2, the maximum allowed is 2 (due to the first restriction). The second restriction says that the max in [1,2] is 3. But since the max of the houses in [1,2] is 2, which is <=3, that's okay. So the approach is correct.\n\nSo the conclusion is: for each house i, the maximum height is the minimum between h and the minimum x_i of all restrictions that include i in their interval. Then, the answer is the sum of squares of these values.\n\nSo the steps are:\n\n1. For each house i (from 1 to n), find all restrictions that include i in their [l_i, r_i] interval.\n\n2. For each such restriction, collect x_i.\n\n3. The maximum allowed for house i is min( h, min( x_i's from step 2 ) )\n\nBut if there are no restrictions that include i, then the maximum allowed is h.\n\nSo the code can be written as follows:\n\nInitialize for each house, the maximum allowed is h.\n\nThen, for each restriction (l, r, x), we iterate over all positions i in l to r, and set their maximum allowed to be the minimum between their current value and x.\n\nOnce all restrictions are processed, compute the sum of squares.\n\nYes! That makes sense. Because for each restriction, we have to make sure that all houses in [l, r] can't have a height higher than x. So for each house in that interval, their maximum allowed is min(current value, x). So processing all restrictions in this way will correctly compute for each house the minimal x_i that applies to it.\n\nSo the algorithm is:\n\nInitialize an array max_heights of size n, with all elements h.\n\nFor each restriction (l, r, x):\n\n   for i from l-1 to r-1 (assuming 0-based index):\n\n       max_heights[i] = min( max_heights[i], x )\n\nOnce all restrictions are processed, compute sum of (h_i)^2 for each h_i in max_heights.\n\nYes, that seems correct.\n\nSo for the first example, the initial max_heights is [3,3,3]. Then, process the first restriction (1,1,1): for i=0, set to min(3,1) → 1. Then second restriction (2,2,3): i=1, min(3,3) remains 3. Third restriction (3,3,2): i=2, min(3,2) →2. So the array is [1,3,2], sum of squares is 14.\n\nIn the second example, initial array is [10,10,10,10]. First restriction (2,3,8): for positions 1 and 2 (assuming 0-based?), so indexes 1 and 2. So their values become min(10,8) →8. Then the second restriction is (3,4,7): indexes 2 and 3. So for index 2, min(8,7) →7. For index 3, min(10,7) →7. So the array becomes [10,8,7,7]. Sum is 10² + 8² +7² +7² = 100 + 64 + 49 +49 = 262. Correct.\n\nSo this approach works. So the code is straightforward.\n\nNow, the code steps:\n\nRead n, h, m.\n\nInitialize max_heights as [h] * n.\n\nThen for each of m restrictions:\n\n   read l, r, x.\n\n   for i in range l-1 to r-1 (inclusive):\n\n       if max_heights[i] > x:\n\n           max_heights[i] = x\n\nThen compute the sum of squares.\n\nBut wait, the restrictions can have x_i larger than h. But since the max_heights is initialized to h, and then for each restriction, we take min with x_i. But if x_i is larger than h, then the min would be h. So that's correct.\n\nFor example, if a restriction says that the max in [1,1] is 5, but h is 3. Then the max allowed for that house is 3, which is correct.\n\nSo the code should handle that.\n\nSo the code in Python would be:\n\nRead input lines. But the input is given as a list of test cases? Wait, looking back at the problem statement.\n\nWait, the input is given as per the sample input. Wait, the sample input shows two cases, but the problem says that the input is given as per the first line, etc. Wait, the user provided the sample input as a list of two examples, but in reality, the actual input is a single test case. Wait, looking back at the problem statement:\n\nThe input is given as:\n\nThe first line contains three integers n, h, m.\n\nThen m lines follow.\n\nSo the code should read from stdin. But in the sample input, the user provided two test cases, but that's probably for the purpose of the example. The actual code should read one test case.\n\nWait, looking at the sample input:\n\nSample Input:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nBut that's probably how the user presented the sample input. But in reality, the code should read from standard input. So for example, in the first case, the input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nSo the code should read from stdin, not from a list.\n\nSo the code needs to read the input as follows.\n\nIn Python, the code can read the first line as input().split(), then read m lines.\n\nBut the problem says that the input is given as per the first line, etc.\n\nSo the code can be written as:\n\nRead n, h, m.\n\nThen read m lines, each with l_i, r_i, x_i.\n\nThen process as above.\n\nSo the code:\n\nRead the first line as n, h, m.\n\nThen read m lines, each with l, r, x.\n\nInitialize max_heights = [h] * n.\n\nFor each restriction:\n\n   l, r, x = ... \n\n   for i in range(l-1, r):\n\n       if max_heights[i] > x:\n\n           max_heights[i] = x\n\nThen compute sum of squares.\n\nWait, for example, l=1, r=1. So the loop is from 0 to 0 (since in Python, range is exclusive on the upper end. So range(l-1, r) would be from 0 to 1 (exclusive), so 0. So that's correct.\n\nWait, l and r are inclusive. So for l_i and r_i, the code needs to process all positions from l_i to r_i, inclusive. So in Python, the indices are from 0 to n-1. So for l_i and r_i (1-based), the code should iterate from (l_i-1) to (r_i-1), inclusive. So the code would be:\n\nfor i in range(l-1, r):\n\n   ... ?\n\nWait, no. Because in Python, range(a, b) includes a, but stops before b. So for example, if l=1 and r=3 (so 1-based), then the indices are 0, 1, 2. So the code should be range(l-1, r) → l-1 is 0, r is 3 → range(0,3) is 0,1,2. Correct. So yes.\n\nSo for each restriction l, r, x, the code loops from l-1 to r-1 (inclusive), which is done by range(l-1, r).\n\nSo the code:\n\nIn Python:\n\nn, h, m = map(int, input().split())\n\nmax_heights = [h] * n\n\nfor _ in range(m):\n\n    l, r, x = map(int, input().split())\n\n    for i in range(l-1, r):\n\n        if max_heights[i] > x:\n\n            max_heights[i] = x\n\ntotal = sum( h_i * h_i for h_i in max_heights )\n\nprint(total)\n\nWait, but what about the case when x is larger than h? For example, if a restriction says that the max in some interval is 5, but h is 3. Then the code would set the max_heights[i] to min(3,5) → 3. Which is correct.\n\nYes.\n\nTesting this code against the sample input:\n\nFirst sample input:\n\nn=3, h=3, m=3.\n\nrestrictions:\n\n1 1 1 → l=1, r=1. So range(0,1) → i=0. So set max_heights[0] to min(3,1) →1.\n\nThen 2 2 3 → range(1,2) → i=1. set to min(3,3) →3.\n\nThen 3 3 2 → range(2,3) → i=2. set to min(3,2) →2.\n\nsum is 1^2 +3^2 +2^2 =14. Correct.\n\nSecond sample input:\n\nn=4, h=10, m=2.\n\nrestrictions:\n\n2 3 8 → l=2, r=3 → range(1,3) → i=1, 2. So set those positions to 8.\n\nThen 3 4 7 → l=3, r=4 → range(2,4) → i=2,3. So for i=2, current value is 8, set to min(8,7) →7. For i=3, current value is 10, set to 7. So the array is [10,8,7,7]. sum is 100+64+49+49= 262. Correct.\n\nSo the code works for the samples.\n\nWhat about edge cases?\n\nCase where a house is covered by multiple restrictions. For example, n=1, h=5, m=2. Restrictions: [1,1,3], [1,1,4]. Then the code would process both restrictions, and set the house to 3, since it's the minimum between 3 and 4. Correct.\n\nAnother case: n=2, h=5, m=1. Restriction [1,2,3]. So both houses are set to 3. Sum is 3^2 +3^2 = 18.\n\nAnother case: no restrictions. Then all houses are h. Sum is n * h².\n\nAnother case: restrictions that are redundant. Like, for a house already limited to 2, another restriction that allows higher. But the code would take the minimum, so no problem.\n\nSo this approach is correct.\n\nThus, the code is as written above. Now, write the Python code accordingly.\n",
    "response": "To solve this problem, we need to determine the maximum profit from building houses on a street while adhering to zoning restrictions. Each house can be built with a height between 0 and a given maximum height, and each restriction imposes a limit on the maximum height within a specific range. The goal is to maximize the total profit, which is calculated as the sum of the squares of the heights of the houses.\n\n### Approach\n1. **Initialization**: Start by initializing an array where each element represents the maximum allowable height for each house, initially set to the global maximum height `h`.\n2. **Apply Restrictions**: For each restriction, update the maximum allowable height for each house in the specified range to be the minimum of its current value and the restriction's maximum height.\n3. **Calculate Profit**: After applying all restrictions, compute the total profit by summing the squares of the allowable heights for each house.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nmax_heights = [h] * n\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    for i in range(l-1, r):\n        if max_heights[i] > x:\n            max_heights[i] = x\n\ntotal = sum(hi * hi for hi in max_heights)\nprint(total)\n```\n\n### Explanation\n1. **Initialization**: The array `max_heights` is initialized with the value `h` for each house, representing the highest possible height without any restrictions.\n2. **Processing Restrictions**: For each restriction, we iterate over the specified range of houses and adjust their maximum allowable height to ensure it does not exceed the restriction's limit. This ensures that all restrictions are respected.\n3. **Profit Calculation**: The total profit is calculated by summing the squares of the adjusted heights, which gives the maximum possible profit under the given constraints.\n\nThis approach efficiently processes each restriction and ensures that all constraints are met while maximizing the profit through straightforward iteration and updates. The complexity is manageable given the problem constraints (up to 50 houses and restrictions), making this approach both effective and efficient.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nmax_heights = [h] * n\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    for i in range(l-1, r):\n        if max_heights[i] > x:\n            max_heights[i] = x\n\ntotal = sum(hi * hi for hi in max_heights)\nprint(total)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 443,
        "thoughts_token_count": 4446
    }
}