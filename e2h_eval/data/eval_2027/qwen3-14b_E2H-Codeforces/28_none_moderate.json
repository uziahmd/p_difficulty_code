{
    "start": 1758338243.0287967,
    "end": 1758338340.8568594,
    "start-formatted": "2025-09-20 12:17 KST",
    "end-formatted": "2025-09-20 12:19 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    g = int(data[2])\n    \n    # Precompute factorials and inverse factorials modulo MOD\n    max_fact = n + m\n    fact = [1] * (max_fact + 1)\n    for i in range(1, max_fact + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact = [1] * (max_fact + 1)\n    inv_fact[max_fact] = pow(fact[max_fact], MOD - 2, MOD)\n    for i in range(max_fact - 1, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(a, b):\n        if a < 0 or b < 0 or a < b:\n            return 0\n        return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n\n    # We need to determine if it's possible to reduce the string to 'g' using the given operation\n    # The operation reduces the length by 1 each time. So from total length L = n + m,\n    # we must be able to reach length 1 with exactly L - 1 operations.\n    # Each operation replaces two characters with one, so the number of operations is L - 1.\n\n    # Let's simulate what happens during the reduction process:\n    # At each step, we replace two characters with one:\n    # - If both are 0s, we replace with 1\n    # - If both are 1s, we replace with 0\n    # - If they are different, we can't do anything (but since we can choose which two to replace, we can avoid this)\n\n    # So the final character depends on the parity of the number of 0s and 1s\n    # Let's track the parity of the number of 0s and 1s\n\n    # Let's simulate the process of reducing the string\n    # Start with n zeros and m ones\n    # While the number of characters > 1:\n    #   Pick two characters and replace them with one\n    # The result depends on the parity of the number of 0s and 1s\n\n    # Let's define the parity of the number of 0s and 1s\n    # Since every operation reduces the number of characters by 1, after L - 1 operations, we have 1 character left\n    # Let's simulate the parity changes\n\n    # We can model the final character based on the parity of the number of 0s and 1s\n    # Let's consider the parity of the number of 0s: even or odd\n    # Let's consider the parity of the number of 1s: even or odd\n\n    # After all operations, the final character will be:\n    # - 0 if the number of 0s is odd and number of 1s is even\n    # - 1 if the number of 0s is even and number of 1s is odd\n    # - 0 or 1 depending on the parity of the number of 0s and 1s\n\n    # But how does the operation affect the parities?\n    # When you replace two 0s with 1: number of 0s decreases by 2 (even change), number of 1s increases by 1 (odd change)\n    # When you replace two 1s with 0: number of 1s decreases by 2 (even change), number of 0s increases by 1 (odd change)\n    # When you replace 0 and 1 with 0: number of 1s decreases by 1 (odd change), number of 0s stays same\n    # When you replace 0 and 1 with 1: number of 0s decreases by 1 (odd change), number of 1s stays same\n\n    # So the parity of the number of 0s and 1s can be changed in various ways\n\n    # However, we can notice that the final character depends on the parity of the number of 0s and 1s\n    # Let's try to find out what the final character would be based on the initial count of 0s and 1s\n\n    # Let's simulate the process of reducing the string to one character\n    # Let's assume we always combine two same characters first\n    # This will help us understand the final character\n\n    # Let's simulate the process of combining pairs of same characters\n    # Let's start with count_0 = n, count_1 = m\n\n    count_0 = n\n    count_1 = m\n\n    while count_0 + count_1 > 1:\n        if count_0 >= 2:\n            count_0 -= 2\n            count_1 += 1\n        elif count_1 >= 2:\n            count_1 -= 2\n            count_0 += 1\n        else:\n            # Only one character left, but we need to do one more operation\n            # We can only do this if there are at least two characters, so this case is impossible\n            break\n\n    # Now, we have either count_0 == 1 or count_1 == 1\n    # The final character is 0 if count_0 == 1, else 1\n    final_char = 0 if count_0 == 1 else 1\n\n    # If the final character is not equal to g, then it's impossible to get g as the result\n    if final_char != g:\n        print(0)\n        return\n\n    # If it's possible, then the number of beautiful strings is C(n + m, n)\n    # Because we can arrange n 0s and m 1s in any order\n    result = comb(n + m, n)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    g = int(data[2])\n    \n    # Precompute factorials and inverse factorials modulo MOD\n    max_fact = n + m\n    fact = [1] * (max_fact + 1)\n    for i in range(1, max_fact + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact = [1] * (max_fact + 1)\n    inv_fact[max_fact] = pow(fact[max_fact], MOD - 2, MOD)\n    for i in range(max_fact - 1, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(a, b):\n        if a < 0 or b < 0 or a < b:\n            return 0\n        return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n\n    # We need to determine if it's possible to reduce the string to 'g' using the given operation\n    # The operation reduces the length by 1 each time. So from total length L = n + m,\n    # we must be able to reach length 1 with exactly L - 1 operations.\n    # Each operation replaces two characters with one, so the number of operations is L - 1.\n\n    # Let's simulate what happens during the reduction process:\n    # At each step, we replace two characters with one:\n    # - If both are 0s, we replace with 1\n    # - If both are 1s, we replace with 0\n    # - If they are different, we can't do anything (but since we can choose which two to replace, we can avoid this)\n\n    # So the final character depends on the parity of the number of 0s and 1s\n    # Let's track the parity of the number of 0s and 1s\n\n    # Let's simulate the process of reducing the string\n    # Start with n zeros and m ones\n    # While the number of characters > 1:\n    #   Pick two characters and replace them with one\n    # The result depends on the parity of the number of 0s and 1s\n\n    # Let's define the parity of the number of 0s and 1s\n    # Since every operation reduces the number of characters by 1, after L - 1 operations, we have 1 character left\n    # Let's simulate the parity changes\n\n    # We can model the final character based on the parity of the number of 0s and 1s\n    # Let's consider the parity of the number of 0s: even or odd\n    # Let's consider the parity of the number of 1s: even or odd\n\n    # After all operations, the final character will be:\n    # - 0 if the number of 0s is odd and number of 1s is even\n    # - 1 if the number of 0s is even and number of 1s is odd\n    # - 0 or 1 depending on the parity of the number of 0s and 1s\n\n    # But how does the operation affect the parities?\n    # When you replace two 0s with 1: number of 0s decreases by 2 (even change), number of 1s increases by 1 (odd change)\n    # When you replace two 1s with 0: number of 1s decreases by 2 (even change), number of 0s increases by 1 (odd change)\n    # When you replace 0 and 1 with 0: number of 1s decreases by 1 (odd change), number of 0s stays same\n    # When you replace 0 and 1 with 1: number of 0s decreases by 1 (odd change), number of 1s stays same\n\n    # So the parity of the number of 0s and 1s can be changed in various ways\n\n    # However, we can notice that the final character depends on the parity of the number of 0s and 1s\n    # Let's try to find out what the final character would be based on the initial count of 0s and 1s\n\n    # Let's simulate the process of reducing the string to one character\n    # Let's assume we always combine two same characters first\n    # This will help us understand the final character\n\n    # Let's simulate the process of combining pairs of same characters\n    # Let's start with count_0 = n, count_1 = m\n\n    count_0 = n\n    count_1 = m\n\n    while count_0 + count_1 > 1:\n        if count_0 >= 2:\n            count_0 -= 2\n            count_1 += 1\n        elif count_1 >= 2:\n            count_1 -= 2\n            count_0 += 1\n        else:\n            # Only one character left, but we need to do one more operation\n            # We can only do this if there are at least two characters, so this case is impossible\n            break\n\n    # Now, we have either count_0 == 1 or count_1 == 1\n    # The final character is 0 if count_0 == 1, else 1\n    final_char = 0 if count_0 == 1 else 1\n\n    # If the final character is not equal to g, then it's impossible to get g as the result\n    if final_char != g:\n        print(0)\n        return\n\n    # If it's possible, then the number of beautiful strings is C(n + m, n)\n    # Because we can arrange n 0s and m 1s in any order\n    result = comb(n + m, n)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 1327,
        "thoughts_token_count": 0
    }
}