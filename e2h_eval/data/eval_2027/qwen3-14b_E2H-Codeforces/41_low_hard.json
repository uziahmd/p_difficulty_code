{
    "start": 1758309277.6073618,
    "end": 1758309318.9265187,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:15 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about building houses on n spots. Each house can have a height between 0 and h. The profit for each house is a^2 where a is the height. But there are m restrictions. Each restriction says that the maximum height in a certain interval [l_i, r_i] must be at most x_i. My task is to find the maximum possible profit given these constraints.\n\nHmm. So the challenge is to assign heights to each of the n spots such that all restrictions are satisfied, and the sum of squares is maximized.\n\nConstraints are small: n, h, m up to 50. So maybe a brute-force approach is possible? But even with n=50, trying all possibilities is impossible because each has h+1 options. 50^50 is way too big. So brute force isn't feasible.\n\nAlternative approach: think of this as an optimization problem with constraints. How can I model this?\n\nEach restriction requires that the maximum in [l_i, r_i] is <= x_i. So for each such interval, the maximum of the houses in that interval must not exceed x_i.\n\nThe problem is similar to some kind of constraint satisfaction problem. How can we model this?\n\nMaybe we can model this as a problem where for each position, we choose a height, but ensuring that for all intervals, the max is within the restriction.\n\nBut how to maximize the sum of squares?\n\nAnother thought: since the maximum for each interval is constrained, perhaps each restriction imposes that certain positions can't be higher than certain values. For example, if there's a restriction on [l, r] with x, then all houses in that interval can't be higher than x. Wait no—because the maximum in the interval must be <=x. So, the maximum of the houses in the interval is <=x. Which implies that each individual house in the interval can be at most x. Because if any house in the interval was higher than x, then the maximum would be higher than x, violating the restriction. So, for each restriction, every house in [l_i, r_i] must be <= x_i. Wait, is that correct?\n\nWait, no. Suppose there's a restriction that the maximum in [l_i, r_i] is at most x_i. Then, the maximum of all the houses in that interval must be <=x_i. Which implies that each individual house in the interval must be <=x_i. Because if any one of them is higher than x_i, then the maximum would be higher than x_i. Therefore, each restriction implies that for each position in [l_i, r_i], the height of that position can't exceed x_i.\n\nWait, but that's not entirely accurate. Suppose there are multiple restrictions. For example, if there is a restriction on [1,3] with x=2, and another on [2,3] with x=3. Then, for position 2, the first restriction requires it to be <=2, but the second allows up to 3. But since the first restriction applies to the entire [1,3], including position 2, the maximum of that interval can't be higher than 2. Therefore, position 2 can't be higher than 2, even though the second restriction allows it. So, the conclusion is that for each restriction, all positions in its interval must be <=x_i. Because if any position in the interval is higher than x_i, then the max would be higher than x_i, violating the restriction.\n\nTherefore, for each position, the maximum allowed height is the minimum of:\n\n- h (the global maximum)\n- all x_i's from restrictions that include this position in their interval.\n\nWait, no. Because each restriction applies to a range. For example, if a position is in multiple ranges, each of which has different x_i's. For instance, if a position is in a restriction [1,2] with x=3, and another restriction [2,3] with x=2. Then, for position 2, the first restriction allows it to be up to 3, but the second allows up to 2. But since the second restriction applies to the interval [2,3], the maximum in that interval must be <=2. Therefore, position 2 can't be higher than 2, because otherwise the max in [2,3] would be higher than 2. So for position 2, the maximum allowed is min(3, 2) = 2.\n\nSo, for each position, the maximum allowed height is the minimum of h and all x_i's from restrictions where the position is in [l_i, r_i]. Because each such restriction requires that the max in that interval is <=x_i, which implies that the position's height is <=x_i.\n\nWait, but that's only true",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a maximum height for the tallest house in a specific range.\n\n### Approach\n1. **Understand Constraints**: Each restriction specifies that the maximum height in a given interval must not exceed a certain value. This implies that every house within the interval must be at most that value.\n2. **Determine Maximum Heights**: For each house, determine the minimum allowable height based on all restrictions that apply to it. This is because if a house is within multiple intervals, the strictest restriction (i.e., the smallest maximum height) applies.\n3. **Maximize Profit**: Once the maximum allowable height for each house is determined, the optimal strategy is to set each house to the highest possible height allowed by the constraints, which maximizes the sum of squares.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    \n    for line in input:\n        if not line.strip():\n            continue\n        parts = line.strip().split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        restrictions = []\n        for i in range(m):\n            l = int(parts[3 + 3*i])\n            r = int(parts[4 + 3*i])\n            x = int(parts[5 + 3*i])\n            restrictions.append((l, r, x))\n        \n        # Determine max allowed height for each position\n        max_heights = [h] * n  # 0-based index\n        for l, r, x in restrictions:\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate maximum profit\n        total = 0\n        for height in max_heights:\n            total += height * height\n        \n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of spots, maximum height, and restrictions.\n2. **Processing Restrictions**: For each restriction, the maximum allowable height for each house in the specified interval is updated to the minimum of its current value and the restriction's maximum height.\n3. **Calculating Profit**: After processing all restrictions, each house is set to its maximum allowable height, and the profit is calculated as the sum of the squares of these heights.\n\nThis approach ensures that all constraints are respected while maximizing the profit by leveraging the allowed maximum heights for each house. The complexity is manageable due to the small constraints (up to 50 houses and restrictions), making this solution efficient and straightforward.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    \n    for line in input:\n        if not line.strip():\n            continue\n        parts = line.strip().split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        restrictions = []\n        for i in range(m):\n            l = int(parts[3 + 3*i])\n            r = int(parts[4 + 3*i])\n            x = int(parts[5 + 3*i])\n            restrictions.append((l, r, x))\n        \n        # Determine max allowed height for each position\n        max_heights = [h] * n  # 0-based index\n        for l, r, x in restrictions:\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate maximum profit\n        total = 0\n        for height in max_heights:\n            total += height * height\n        \n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 828,
        "completion_token_count": 585,
        "thoughts_token_count": 1024
    }
}