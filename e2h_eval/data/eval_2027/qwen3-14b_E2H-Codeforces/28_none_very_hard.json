{
    "start": 1758338236.0314882,
    "end": 1758338327.0145733,
    "start-formatted": "2025-09-20 12:17 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    g = int(data[2])\n    \n    # Precompute factorials and inverse factorials modulo MOD\n    max_fact = n + m\n    fact = [1] * (max_fact + 1)\n    for i in range(1, max_fact + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact = [1] * (max_fact + 1)\n    inv_fact[max_fact] = pow(fact[max_fact], MOD - 2, MOD)\n    for i in range(max_fact - 1, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(a, b):\n        if a < 0 or b < 0 or a < b:\n            return 0\n        return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n\n    # We need to find the number of strings with exactly n 0s and m 1s\n    # that can be reduced to g with the given operation rules.\n\n    # The operation reduces the string length by 1 each time.\n    # So the total number of operations is (n + m - 1), since we start from n + m\n    # and reduce to 1 character.\n    # The final character must be g.\n\n    # Let's define dp[i][j]: number of ways to have i 0s and j 1s such that\n    # the final character is 0 or 1, depending on the state.\n\n    # But we can model this as a recurrence:\n    # To get to a string ending in g, we need to consider how we could have arrived here.\n\n    # We can use dynamic programming with memoization:\n    # dp[i][j][k]: number of beautiful strings with i 0s and j 1s that end with k (0 or 1)\n\n    # But since we only care about the final result, we can optimize:\n    # Let's define dp[i][j] as the number of ways to form a string with i 0s and j 1s\n    # that can be reduced to g.\n\n    # We can use the following recurrence:\n    # dp[i][j] = dp[i-1][j] * (number of ways to add 0 at the end)\n    #          + dp[i][j-1] * (number of ways to add 1 at the end)\n    # But we need to track the parity of the number of operations.\n\n    # However, there's a smarter way. The key insight is:\n    # The final character after all reductions depends on the parity of the number of 1s and 0s.\n    # Because every operation reduces two characters to one, and the replacement rule is:\n    # - Two 0s become 1\n    # - Two 1s become 0\n    # - One 0 and one 1 becomes 0 (since the example shows \"01\" becomes \"0\", which is not clear, but let's assume it's deterministic)\n\n    # This problem is similar to a parity-based problem. Let's think recursively:\n    # The final character is determined by the number of 1s and 0s and the number of operations.\n\n    # Let's consider the parity of the number of 1s and 0s.\n\n    # If the number of 1s and 0s are both even or both odd, then the final character depends on the parity of the count of 1s.\n\n    # But the correct approach is to use the following logic:\n    # The final character is determined by the parity of the number of 1s and 0s and the reduction rules.\n\n    # The key idea is: The final character is equal to (number of 1s) mod 2, but only if the number of operations is even.\n\n    # Wait, let's think differently:\n    # Every operation reduces the string length by 1. So the number of operations is (n + m - 1).\n    # Each operation replaces two characters with one. So the final character depends on the sequence of operations.\n\n    # However, the exact transformation is complex, but we can use the following observation:\n    # The final character is determined by the XOR of the number of 1s and the number of operations.\n\n    # After some research and thinking, the correct condition is:\n    # The final character is g if and only if (number of 1s) % 2 == g and (number of 0s) % 2 == (1 - g).\n\n    # This is because each operation reduces the count of 0s and 1s by 1 each (in some way), and the parity determines the final result.\n\n    # So the condition is:\n    # (m % 2 == g) and (n % 2 == (1 - g))\n\n    if (m % 2 == g) and (n % 2 == (1 - g)):\n        print(comb(n + m, n))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    g = int(data[2])\n    \n    # Precompute factorials and inverse factorials modulo MOD\n    max_fact = n + m\n    fact = [1] * (max_fact + 1)\n    for i in range(1, max_fact + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact = [1] * (max_fact + 1)\n    inv_fact[max_fact] = pow(fact[max_fact], MOD - 2, MOD)\n    for i in range(max_fact - 1, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(a, b):\n        if a < 0 or b < 0 or a < b:\n            return 0\n        return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD\n\n    # We need to find the number of strings with exactly n 0s and m 1s\n    # that can be reduced to g with the given operation rules.\n\n    # The operation reduces the string length by 1 each time.\n    # So the total number of operations is (n + m - 1), since we start from n + m\n    # and reduce to 1 character.\n    # The final character must be g.\n\n    # Let's define dp[i][j]: number of ways to have i 0s and j 1s such that\n    # the final character is 0 or 1, depending on the state.\n\n    # But we can model this as a recurrence:\n    # To get to a string ending in g, we need to consider how we could have arrived here.\n\n    # We can use dynamic programming with memoization:\n    # dp[i][j][k]: number of beautiful strings with i 0s and j 1s that end with k (0 or 1)\n\n    # But since we only care about the final result, we can optimize:\n    # Let's define dp[i][j] as the number of ways to form a string with i 0s and j 1s\n    # that can be reduced to g.\n\n    # We can use the following recurrence:\n    # dp[i][j] = dp[i-1][j] * (number of ways to add 0 at the end)\n    #          + dp[i][j-1] * (number of ways to add 1 at the end)\n    # But we need to track the parity of the number of operations.\n\n    # However, there's a smarter way. The key insight is:\n    # The final character after all reductions depends on the parity of the number of 1s and 0s.\n    # Because every operation reduces two characters to one, and the replacement rule is:\n    # - Two 0s become 1\n    # - Two 1s become 0\n    # - One 0 and one 1 becomes 0 (since the example shows \"01\" becomes \"0\", which is not clear, but let's assume it's deterministic)\n\n    # This problem is similar to a parity-based problem. Let's think recursively:\n    # The final character is determined by the number of 1s and 0s and the number of operations.\n\n    # Let's consider the parity of the number of 1s and 0s.\n\n    # If the number of 1s and 0s are both even or both odd, then the final character depends on the parity of the count of 1s.\n\n    # But the correct approach is to use the following logic:\n    # The final character is determined by the parity of the number of 1s and 0s and the reduction rules.\n\n    # The key idea is: The final character is equal to (number of 1s) mod 2, but only if the number of operations is even.\n\n    # Wait, let's think differently:\n    # Every operation reduces the string length by 1. So the number of operations is (n + m - 1).\n    # Each operation replaces two characters with one. So the final character depends on the sequence of operations.\n\n    # However, the exact transformation is complex, but we can use the following observation:\n    # The final character is determined by the XOR of the number of 1s and the number of operations.\n\n    # After some research and thinking, the correct condition is:\n    # The final character is g if and only if (number of 1s) % 2 == g and (number of 0s) % 2 == (1 - g).\n\n    # This is because each operation reduces the count of 0s and 1s by 1 each (in some way), and the parity determines the final result.\n\n    # So the condition is:\n    # (m % 2 == g) and (n % 2 == (1 - g))\n\n    if (m % 2 == g) and (n % 2 == (1 - g)):\n        print(comb(n + m, n))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 1154,
        "thoughts_token_count": 0
    }
}