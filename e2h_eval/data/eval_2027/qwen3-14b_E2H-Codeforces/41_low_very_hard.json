{
    "start": 1758309282.409382,
    "end": 1758309617.1187477,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the problem is about building houses on n spots. Each house can have a height between 0 and h. The profit for each house is a squared, where a is its height. But there are m restrictions. Each restriction says that the maximum height in the range l_i to r_i must be <= x_i. I need to maximize the total profit under these constraints.\n\nHmm. The challenge is to find the optimal heights for each house that satisfy all restrictions and maximize the sum of squares.\n\nConstraints are small: n, h, m up to 50. So maybe a brute-force approach is possible? But even with n=50, trying all possibilities is impossible because each house has h+1 options, which would be (50)^50 possibilities. That's way too big.\n\nSo we need a smarter approach.\n\nLet me think about how to model this. It's an optimization problem with constraints. The constraints are that for each restriction, the maximum in [l_i, r_i] is <= x_i. How can I model this?\n\nAnother thought: since each restriction is about the maximum in a range, perhaps we can model this as a problem where for each position, we need to determine the maximum allowed height, considering all restrictions that apply to it.\n\nWait, but the restrictions are overlapping. For example, a house might be part of multiple ranges. So for each house, the maximum allowed height is the minimum of all the restrictions that apply to it. Wait, no. Because a restriction applies to a range. For example, if there's a restriction that says the maximum in [1,3] is <= 2, then each house in that range can't be higher than 2. But if there's another restriction that says the max in [2,2] is <= 3, then house 2 can be up to 3, but the first restriction limits it to 2. So for each house, the maximum allowed height is the minimum of all the restrictions that cover it. Or wait, not exactly. Because a restriction applies to a range, and requires that the maximum in that range is <= x_i. So for any house in that range, its height can't be more than x_i. Because if any house in the range is higher than x_i, then the maximum would be higher than x_i, violating the restriction. Therefore, for each restriction (l_i, r_i, x_i), all houses in positions l_i to r_i must have their heights <= x_i. Because if even one house in that range exceeds x_i, the restriction is violated. Therefore, for each house, the maximum allowed height is the minimum of all x_i from restrictions that include that house in their [l_i, r_i] range. And also, the global maximum h.\n\nWait, that's an important insight. Because for each house j, the maximum height it can have is the minimum between h and all x_i from restrictions where j is in [l_i, r_i]. Because each such restriction requires that the maximum in that interval is at most x_i. Which implies that every house in that interval must be <= x_i. So for each house j, the maximum possible height is the minimum of h and all x_i from restrictions that include j in their interval.\n\nBut wait, is that correct? Let's think. Suppose there's a restriction that says that the maximum in [1,3] is <= 2. Then each of the houses 1, 2, 3 must be <= 2. So for each of those houses, their maximum possible height is min( their current max, 2). But if there's another restriction that says that the maximum in [2,2] is <= 3, then that doesn't affect house 2's maximum, since the first restriction already limits it to 2. So for each house, the maximum allowed height is the minimum of h and all x_i's of restrictions that include that house in their interval.\n\nIf that's true, then the problem becomes straightforward: for each house j, compute the minimum between h and all x_i's of restrictions that cover j. Then set each house to that value. Then the sum of squares is the answer.\n\nWait, but why is that correct? Because if you set each house to that maximum possible, then all restrictions are satisfied. Because for any restriction [l_i, r_i], all houses in that interval are <= x_i (since that x_i is one of the x's considered for each house in that interval). So the maximum in that interval is <= x_i. Thus, all restrictions are satisfied. And since each house is set to the maximum possible allowed, the sum is maximized.\n\nBut then why the example given?\n\nIn the first example:\n\nn=3, h=3, m=3.\n\nRestrictions are:\n\n1-",
    "response": "To solve this problem, we need to determine the maximum profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and we must ensure that all zoning restrictions are satisfied.\n\n### Approach\n1. **Understanding Constraints**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within the range of a restriction must be at most the specified height.\n2. **Determine Maximum Heights**: For each house, compute the maximum allowable height by considering all restrictions that apply to it. The maximum allowable height for each house is the minimum value between the global maximum height `h` and all restriction heights that cover that house.\n3. **Calculate Profit**: Once the maximum allowable height for each house is determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = sum(a*a for a in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of spots `n`, maximum height `h`, and the number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum of its current value and the restriction's maximum height.\n4. **Calculating Profit**: The total profit is calculated by summing the squares of the maximum allowable heights for each house.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by setting each house to the highest possible allowable height. The complexity is manageable due to the small constraints (up to 50 spots and restrictions), making this brute-force approach feasible.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = sum(a*a for a in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 572,
        "thoughts_token_count": 1024
    }
}