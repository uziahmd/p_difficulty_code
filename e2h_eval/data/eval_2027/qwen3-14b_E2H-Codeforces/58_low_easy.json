{
    "start": 1758309815.3698883,
    "end": 1758309982.0289087,
    "start-formatted": "2025-09-20 04:23 KST",
    "end-formatted": "2025-09-20 04:26 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's try to figure out how to solve this problem. The task is to find the minimum number of edges to add to a graph to form an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I remember that a graph is bipartite if and only if it doesn't contain any odd-length cycles. So, if the graph is already bipartite, then we need to add edges to create an odd cycle. But if it's not bipartite, then there's already an odd cycle, so t would be 0 and w would be 1? Wait, no. Wait, the problem says that the original graph might already have an odd cycle. So in that case, the answer is t=0 and w=1? But wait, the problem says that the output is the minimum number of edges to add. So if there's already an odd cycle, then t is zero. But how about the number of ways? Because the existing graph already has at least one such cycle. But the question says that the ways are the number of ways to add t edges (which is zero) to form an odd cycle. But since the graph already has some, but how many ways are there?\n\nWait, no. The problem says that the original graph may have multiple odd cycles. However, when t is zero, the answer for w is 1? Or is it the number of possible ways to add zero edges (i.e., the number of existing odd cycles)? No, because the problem says that adding zero edges would mean that there's already an odd cycle. But the way to count w is the number of ways to add t edges (so zero edges here) such that the resulting graph has an odd cycle. But since the original graph already contains at least one, but maybe multiple. However, the problem says that the answer for w is the number of ways to add exactly t edges. But if t is zero, then the number of ways is the number of existing odd cycles? Or is it 1? Wait, the note in the example shows that for input 3 3 with a triangle (which is an odd cycle), the output is 0 1. So even though there is one existing cycle, the w is 1. So perhaps when there's already an odd cycle, the answer is t=0 and w=1. Because the problem says that the ways are the number of ways to add t edges (so zero edges) to form an odd cycle. But since the graph already has an odd cycle, but adding zero edges is just one way (since you don't add any edges). Wait, but there could be multiple existing odd cycles. However, the problem says that the way is considered equal if they have the same set of added edges. Since adding zero edges is only one way, regardless of how many existing cycles there are. Oh right! Because the question is about the number of ways to add t edges. If t is zero, then the way is to add nothing. But the existing cycles are already present. But the problem requires that after adding the edges (which are zero in this case), the graph has an odd cycle. So if the original graph already has an odd cycle, then the answer is t=0 and w=1. Because there's only one way to add zero edges. So regardless of how many existing odd cycles there are, the number of ways is 1. Because the way is determined by the set of edges added, which is empty. So for example, in the case where the graph already has multiple odd cycles, the answer is still w=1. That's why in the second example input, which is a triangle (so already has an odd cycle), the output is 0 1.\n\nSo the first thing to check is whether the graph is bipartite. If it's not bipartite, then there's already an odd cycle. So t=0 and w=1. But if it is bipartite, then we need to add edges to create an odd cycle.\n\nSo the problem reduces to:\n\nIf the graph is not bipartite, then output t=0, w=1.\n\nElse, find the minimal number of edges to add to make an odd cycle, and count the number of ways.\n\nSo the key is to handle the case when the graph is bipartite.\n\nNow, for a bipartite graph, adding edges can create an odd cycle. How?\n\nIn a bipartite graph, all cycles are even-length. To create an odd-length cycle, we need to add edges that connect nodes in the same partition. Because in a bipartition (A, B), any edge connects A to B. Adding an edge between two nodes in A would create a cycle of length (path from u to v in A's partition via B's nodes, plus the new edge). Let's think: suppose we have two nodes u and v in the same",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length and count the number of ways to achieve this. \n\n### Approach\n1. **Check for Existing Odd Cycles**: If the graph already contains an odd-length cycle, the answer is straightforward: no edges need to be added (`t = 0`) and there is exactly one way to do this (`w = 1`).\n2. **Bipartite Graph Check**: If the graph is bipartite (i.e., it does not contain any odd-length cycles), we need to determine the minimum number of edges to add to create an odd-length cycle. This involves checking each connected component of the graph.\n3. **Component Analysis**: For each connected component of the bipartite graph, we determine the number of nodes in each partition. The minimum number of edges required to form an odd cycle is 1, and the number of ways to do this is determined by the product of the sizes of the two partitions.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef main():\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while idx < len(input) and input[idx] == '':\n        idx += 1\n    if idx >= len(input):\n        print(\"0 1\")\n        return\n    n, m = map(int, input[idx].split())\n    idx += 1\n    edges = []\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        while idx < len(input) and input[idx] == '':\n            idx += 1\n        if idx >= len(input):\n            break\n        a, b = map(int, input[idx].split())\n        edges.append((a-1, b-1))\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n        idx += 1\n\n    # Check if the graph is bipartite\n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            components.append(cnt)\n    \n    # Check if the graph is bipartite\n    # Since we have already done BFS for each component, if it's bipartitioned, then yes\n    # Now check if any component is not bipartitioned\n    # Wait, during the BFS, if we find a conflict, then it's not bipartite\n    # But the code above doesn't check that. So I need to modify the BFS to check bipartition\n    # Let me rework the code to check for bipartition\n\n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n            components.append(cnt)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    # Now, the graph is bipartite. Need to find t and w\n    # t is 1, because adding one edge between same partition\n    # w is the sum over all components of (size_a * size_b)\n    # Because for each component, adding an edge between two nodes in the same partition\n    # which can be done in size_a * size_b ways\n    # but since the minimal t is 1, we need to find the minimal t, which is 1\n    # and the total number of ways is sum (a * b) for each component\n    total_ways = 0\n    for a, b in components:\n        total_ways += a * b\n    print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Reading**: The input is read and parsed into the number of vertices `n`, edges `m`, and the list of edges.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component is not bipartite, it means there's already an odd-length cycle, and the result is `0 1`.\n3. **Component Analysis**: If the graph is bipartite, we analyze each component to determine the number of ways to add an edge between nodes in the same partition. This is calculated as the product of the sizes of the two partitions in each component.\n4. **Result Calculation**: The minimum number of edges required is always 1, and the number of ways is the sum of the products of partition sizes across all components.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\n\ndef main():\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while idx < len(input) and input[idx] == '':\n        idx += 1\n    if idx >= len(input):\n        print(\"0 1\")\n        return\n    n, m = map(int, input[idx].split())\n    idx += 1\n    edges = []\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        while idx < len(input) and input[idx] == '':\n            idx += 1\n        if idx >= len(input):\n            break\n        a, b = map(int, input[idx].split())\n        edges.append((a-1, b-1))\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n        idx += 1\n\n    # Check if the graph is bipartite\n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            components.append(cnt)\n    \n    # Check if the graph is bipartite\n    # Since we have already done BFS for each component, if it's bipartitioned, then yes\n    # Now check if any component is not bipartitioned\n    # Wait, during the BFS, if we find a conflict, then it's not bipartite\n    # But the code above doesn't check that. So I need to modify the BFS to check bipartition\n    # Let me rework the code to check for bipartition\n\n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n            components.append(cnt)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    # Now, the graph is bipartite. Need to find t and w\n    # t is 1, because adding one edge between same partition\n    # w is the sum over all components of (size_a * size_b)\n    # Because for each component, adding an edge between two nodes in the same partition\n    # which can be done in size_a * size_b ways\n    # but since the minimal t is 1, we need to find the minimal t, which is 1\n    # and the total number of ways is sum (a * b) for each component\n    total_ways = 0\n    for a, b in components:\n        total_ways += a * b\n    print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 578,
        "completion_token_count": 1200,
        "thoughts_token_count": 1024
    }
}