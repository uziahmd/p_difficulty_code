{
    "start": 1758309255.1324124,
    "end": 1758309285.509421,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:14 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the maximum height in a certain interval [l_i, r_i] must be at most x_i. My goal is to choose the heights for all the houses such that all restrictions are satisfied and the total profit is maximized.\n\nHmm. The constraints are n, h, m up to 50. So the numbers are small. That suggests that maybe a brute-force approach is possible, but perhaps with some optimizations.\n\nBut wait, what's the maximum possible number of possibilities? For each of the n houses, there are h+1 choices (from 0 to h). So for n=50, that's 51^50 possibilities. Which is way too big for brute force. So brute force is impossible here.\n\nSo I need another approach. Let's think about how to model this problem.\n\nThe key is that each restriction imposes that the maximum in some interval is <= x_i. So for all intervals given by the restrictions, the maximum in that interval must not exceed x_i.\n\nThe problem is similar to a constraint satisfaction problem where we need to assign values to variables (house heights) under certain constraints, and maximize the sum of squares.\n\nBut how to model this?\n\nAlternative idea: For each house, the maximum allowed height is determined by all the restrictions that apply to it. But since a restriction applies to an interval, it affects all houses in that interval. For example, if a restriction says that in [1,3], the max is <= 2, then each of the houses 1, 2, 3 can't be higher than 2. Because if any of them was higher, the maximum would exceed the restriction.\n\nWait, no. Wait, the restriction says that the tallest house in that interval must be at most x_i. So, for example, if a restriction is on [l_i, r_i], then the maximum of all houses in that interval must be <= x_i. Therefore, for each house in that interval, their height must be <= x_i. Because if any of them was higher than x_i, then the maximum would be higher than x_i, violating the restriction.\n\nWait, no. Suppose there's a restriction that the maximum in [1,3] is <= 2. Then, each of the houses in 1,2,3 must be <= 2. Because if any of them is higher than 2, then the maximum would be higher than 2. So that's correct. Therefore, each restriction [l_i, r_i, x_i] implies that for every position in l_i to r_i, the height of that position can't exceed x_i. Because if even one of them is higher than x_i, then the max would be higher than x_i, violating the restriction.\n\nWait, but maybe there's a restriction that allows some houses to be higher than x_i as long as others are lower. But no, because the restriction says that the maximum in the interval must be <= x_i. So, all houses in that interval must be <= x_i. Because if even one is higher, then the max is higher than x_i. Therefore, for each restriction, each house in [l_i, r_i] can't be higher than x_i.\n\nSo, for each house, the maximum allowed height is the minimum of h and all x_i's from restrictions that include that house in their interval. Because each restriction that includes the house in its interval imposes that the house's height can't be higher than x_i. So the maximum possible height for a house is the minimum of h and all x_i's from restrictions that cover that house.\n\nWait, but that's only if the restriction applies to that house. For example, if a house is in multiple restrictions, each of which may have different x_i. So for that house, the maximum allowed height is the minimum of all x_i's from restrictions that include it in their interval, and also h.\n\nIf that's the case, then the problem reduces to, for each house, find the maximum possible height it can have, which is min(h, all x_i's of restrictions that include that house in their interval). Then, set each house to that maximum value, and compute the sum of squares.\n\nBut wait, is that correct? Because suppose there's a restriction that says that the maximum in [1,3] is <= 2, and another restriction that says the maximum in [2,3] is <= 3. Then for house 2, the first restriction says it can't be higher than 2, and the second says it can be up to 3. So the minimum of those is 2.",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a maximum height limit on a specific range of houses.\n\n### Approach\n1. **Understand Restrictions**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within the specified range must be at most the given height.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that include that house in their range. The maximum allowable height for each house is the minimum of the global maximum height `h` and all restriction heights that apply to it.\n3. **Calculate Profit**: Once the maximum allowable heights for each house are determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = sum(a*a for a in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of spots `n`, maximum height `h`, and number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum of its current value and the restriction's height.\n4. **Calculating Profit**: The total profit is computed as the sum of the squares of the allowable heights for each house, which is then printed.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by leveraging the constraints efficiently. The complexity is manageable due to the small input size constraints (up to 50 spots and restrictions).",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = sum(a*a for a in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 569,
        "thoughts_token_count": 1024
    }
}