{
    "start": 1758309270.1236777,
    "end": 1758309586.3009508,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:19 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the problem is about building houses on n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range l_i to r_i, the tallest house must be at most x_i. My goal is to maximize the total profit under these constraints.\n\nHmm. So how do I approach this? Since n, h, m are all up to 50, maybe a brute-force approach with backtracking or some kind of dynamic programming could work. But even with n=50, trying all possibilities would be impossible because each house can have up to h+1 possibilities. For 50 houses, that's (h+1)^50 possibilities, which is way too big. So brute-force isn't feasible here.\n\nWait, but maybe there's a smarter way. Let me think about the constraints. Each restriction requires that in some interval [l_i, r_i], the maximum height is <= x_i. So for each such interval, the maximum of the heights in that interval must not exceed x_i.\n\nThe key is to find a set of heights for each position that satisfies all the restrictions and maximizes the sum of squares.\n\nAnother thought: since the maximum height for each position is constrained by the restrictions. For example, if there's a restriction that says in [1,3], max is 2, then each of the positions 1, 2, 3 can't be higher than 2. But maybe some restrictions are more restrictive than others.\n\nBut how do I model this? Maybe for each position, determine the maximum possible height allowed by all the restrictions that cover it. Wait, no. Because a restriction applies to a range. For example, a restriction on [1,3] with x=2 means that the maximum in that range is 2. So each of the positions in that range can be up to 2, but maybe some of them can be higher if other restrictions allow. Wait, no. Because if the max in the range is 2, then all elements in that range must be <= 2. Otherwise, the max would be higher. So for any restriction that applies to a range, all the houses in that range must be <= x_i. Because if any of them is higher than x_i, then the max would be higher than x_i, violating the restriction.\n\nWait, that's not entirely correct. Suppose there's a restriction that says the max in [l_i, r_i] is x_i. Then, the maximum of the houses in that interval must be <= x_i. Therefore, each house in that interval can be at most x_i. Because if any house in the interval is higher than x_i, then the maximum would be higher than x_i, violating the restriction. Therefore, for each restriction, all houses in [l_i, r_i] must be <= x_i. So, for each house, the maximum allowed height is the minimum of h and all x_i of restrictions that include that house in their interval.\n\nWait, but that's not entirely accurate. Because suppose there's a restriction on [1,3] with x=2, and another restriction on [2,2] with x=3. Then, the first restriction requires that house 2 is <= 2. The second allows it to be up to 3. But since the first restriction is more restrictive, house 2 can be at most 2. So for each house, the maximum possible height is the minimum of h and all x_i of restrictions that include that house in their interval. Because any restriction that includes that house in its interval would require that the house's height is <= x_i (since if it's higher, then the max in that interval would be higher than x_i). Therefore, for each house, the maximum height allowed is the minimum of h and all x_i where the house is in [l_i, r_i].\n\nWait, is that correct? Let me think again. Suppose there is a restriction that says the max in [1,3] is 2. Then, the house at position 2 can be at most 2. But if there's another restriction that says the max in [2,2] is 3, then the first restriction requires that house 2 is <= 2, so the second restriction is redundant. So the maximum allowed for house 2 is min(2,3) = 2. Therefore, for each house, the maximum possible height is the minimum between h and all the x_i of restrictions that apply to that house. Because each such restriction requires that the house's height is <= x_i, since the house is in the interval [l_i, r_i], and the max of that interval must be <= x_i. Therefore, the house's",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street with given zoning restrictions. Each house can be built with a height between 0 and a maximum height `h`, and each restriction imposes a constraint on the maximum height in a specific range of houses.\n\n### Approach\n1. **Understand Constraints**: Each restriction imposes that the tallest house in a specific range must not exceed a given height. This means that for each house, the maximum allowed height is determined by the most restrictive constraint that applies to it.\n2. **Determine Maximum Heights**: For each house position, determine the minimum height restriction that applies to it. This is derived from all the restrictions that include that position in their range.\n3. **Calculate Profit**: Once we have the maximum allowable height for each house, we can set each house to this height to maximize the profit, which is calculated as the sum of the squares of the heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate the total profit\n        total = sum(height * height for height in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of houses `n`, maximum height `h`, and number of restrictions `m`.\n2. **Initialize Maximum Heights**: An array `max_heights` is initialized with the maximum height `h` for each house.\n3. **Apply Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum value between its current value and the restriction's maximum height.\n4. **Calculate Profit**: The total profit is computed as the sum of the squares of the heights, which are set to their respective maximum allowable values derived from the restrictions.\n\nThis approach ensures that all constraints are respected while maximizing the profit by setting each house to the highest possible allowable height. The complexity is efficient given the constraints (up to 50 houses and restrictions), making it feasible to process each restriction and compute the result directly.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate the total profit\n        total = sum(height * height for height in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 602,
        "thoughts_token_count": 1024
    }
}