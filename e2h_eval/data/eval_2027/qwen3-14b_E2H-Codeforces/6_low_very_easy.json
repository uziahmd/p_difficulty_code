{
    "start": 1758008330.6745439,
    "end": 1758008513.7406836,
    "start-formatted": "2025-09-16 16:38 KST",
    "end-formatted": "2025-09-16 16:41 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. Hmm. So the task is to find two vouchers that don't overlap, their durations add up exactly to x, and the sum of their costs is as small as possible. If there's no such pair, output -1.\n\nFirst, I need to understand what the duration is. Oh right, the duration is ri - li + 1. So for each voucher, we can calculate that. Then, for each voucher, we need to find another voucher that has a duration of (x - duration_i), and they don't overlap.\n\nBut how do I efficiently find such pairs?\n\nLet me think about the approach. Since n can be up to 2e5, a brute force approach checking all pairs would be O(n²), which is way too slow. So we need something more efficient.\n\nSo here's an idea: For each voucher, check if there exists another voucher with duration (x - duration_i) that doesn't overlap with it. But how to find those efficiently?\n\nMaybe pre-process vouchers by their duration. Let's create a dictionary where the key is the duration, and the value is a list of vouchers with that duration. Then, for each voucher i with duration d, we can look up in the dictionary for duration (x - d). Then, for each such voucher j in that list, check if they don't overlap. But even this could be O(n^2) in the worst case if many vouchers have the same duration.\n\nBut perhaps we can optimize further. For example, for each duration d, we can store the vouchers sorted by their end date (ri) and start date (li). Then, for a voucher i with duration d, when looking for vouchers with duration (x - d), we can find those that end before the start of voucher i, or start after the end of voucher i. How?\n\nLet me think. Suppose voucher i has a duration d. We need to find vouchers of duration (x - d) that are either completely before voucher i or completely after. So for each voucher i, we can check two possibilities:\n\n1. Find vouchers with duration (x - d) that end before the start of voucher i. So their ri < li of voucher i.\n\n2. Find vouchers with duration (x - d) that start after the end of voucher i. So their li > ri of voucher i.\n\nIf we can find the minimal cost in these two cases for each voucher, then we can compute the minimum overall.\n\nSo the plan is:\n\n- Preprocess all vouchers into a dictionary grouped by their duration. For each duration, we have a list of vouchers. For each such list, we can sort them by their end date (ri) and also by their start date (li). Or maybe for each duration, we can have two sorted lists: one sorted by ri (for case 1) and another sorted by li (for case 2)?\n\nAlternatively, for each duration, we can sort the vouchers in a way that allows us to quickly find the minimal cost for vouchers that end before a certain time, or start after a certain time.\n\nFor example, for case 1: For vouchers of duration (x - d), we need those that end before li of voucher i. So if we have all vouchers of that duration sorted by their end time (ri), we can perform a binary search to find the latest voucher whose end time is less than li of voucher i. Then, among all such vouchers, we need the minimal cost. Similarly for case 2: vouchers of duration (x - d) that start after ri of voucher i. So if we have those sorted by their start time (li), we can find the earliest voucher with li > ri of voucher i and get the minimal cost.\n\nBut how to track the minimal cost for these ranges?\n\nAh, here's an idea. For each duration, we can sort the vouchers by their end time (ri), and also maintain a prefix minimum array. Similarly, sort by start time (li) and maintain a prefix minimum array.\n\nWait, for case 1: For vouchers of duration t, sorted by ri. For a given li (the start of voucher i), we want all vouchers j with ri < li. So we can find the largest ri in the sorted list that is less than li. All vouchers up to that index in the sorted list are candidates. The minimal cost among them would be the minimum in the prefix up to that index.\n\nSimilarly, for case 2: For vouchers of duration t, sorted by li. For a given ri (end of voucher i), we want all vouchers j with li > ri. So we can find the first li in the sorted list that is greater than ri, and then take the minimum cost from that index onwards.\n\nSo for each duration, we need two sorted lists:\n\n- One sorted by ri, with prefix minima (for case 1)\n- One sorted by li, with suffix minima (for case 2",
    "response": "\n\nTo solve this problem, we need to find two non-overlapping vouchers from a list such that their combined duration equals exactly `x` and their total cost is minimized. If no such pair exists, we should return `-1`.\n\n### Approach\n1. **Group Vouchers by Duration**: First, we group all vouchers by their duration. This helps in efficiently checking for pairs of vouchers that together sum up to the required duration `x`.\n2. **Sort and Preprocess**: For each duration, we sort vouchers by their end date (`ri`) and start date (`li`). Additionally, we maintain prefix minimum arrays for the sorted end dates and suffix minimum arrays for the sorted start dates. This allows efficient range minimum queries.\n3. **Binary Search for Efficient Lookup**: For each voucher, we check if there exists another voucher with the complementary duration (i.e., `x - duration_i`). Using binary search, we efficiently find non-overlapping vouchers and compute the minimum cost.\n\n### Solution Code\n```python\nimport bisect\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    x = int(input[idx])\n    idx += 1\n    \n    vouchers = []\n    for _ in range(n):\n        l = int(input[idx])\n        idx += 1\n        r = int(input[idx])\n        idx += 1\n        cost = int(input[idx])\n        idx += 1\n        duration = r - l + 1\n        vouchers.append((l, r, cost, duration))\n    \n    # Group vouchers by duration\n    duration_map = defaultdict(list)\n    for l, r, cost, d in vouchers:\n        duration_map[d].append((l, r, cost))\n    \n    # Preprocess each duration's list\n    # For each duration, we have:\n    # sorted by end time (r), and prefix minima\n    # sorted by start time (l), and suffix minima\n    preprocessed = dict()\n    for d in duration_map:\n        lst = duration_map[d]\n        # Sort by r\n        sorted_by_r = sorted(lst, key=lambda x: x[1])\n        # Compute prefix minima\n        prefix_min_r = []\n        min_cost = float('inf')\n        for item in sorted_by_r:\n            min_cost = min(min_cost, item[2])\n            prefix_min_r.append(min_cost)\n        # Sort by l\n        sorted_by_l = sorted(lst, key=lambda x: x[0])\n        # Compute suffix minima\n        suffix_min_l = [0] * len(sorted_by_l)\n        min_cost = float('inf')\n        for i in range(len(sorted_by_l)-1, -1, -1):\n            min_cost = min(min_cost, sorted_by_l[i][2])\n            suffix_min_l[i] = min_cost\n        preprocessed[d] = (sorted_by_r, prefix_min_r, sorted_by_l, suffix_min_l)\n    \n    min_total = float('inf')\n    \n    for l1, r1, cost1, d1 in vouchers:\n        target_d = x - d1\n        if target_d < 1:\n            continue\n        if target_d not in preprocessed:\n            continue\n        # Check for vouchers with duration target_d\n        sorted_by_r, prefix_min_r, sorted_by_l, suffix_min_l = preprocessed[target_d]\n        # Case 1: voucher j ends before l1\n        # Find the largest r_j < l1\n        # sorted_by_r is sorted by r\n        r_list = [item[1] for item in sorted_by_r]\n        pos = bisect.bisect_left(r_list, l1) - 1\n        if pos >= 0:\n            current_min = prefix_min_r[pos]\n            min_total = min(min_total, current_min + cost1)\n        # Case 2: voucher j starts after r1\n        # sorted_by_l is sorted by l\n        l_list = [item[0] for item in sorted_by_l]\n        pos = bisect.bisect_right(l_list, r1)\n        if pos < len(l_list):\n            current_min = suffix_min_l[pos]\n            min_total = min(min_total, current_min + cost1)\n    \n    if min_total == float('inf'):\n        print(-1)\n    else:\n        print(min_total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into a list of vouchers, each represented by their start date, end date, cost, and duration.\n2. **Grouping by Duration**: Vouchers are grouped by their duration using a dictionary for efficient lookup.\n3. **Sorting and Preprocessing**: For each duration, vouchers are sorted by their end date and start date. Prefix and suffix minimum arrays are computed to allow quick range minimum queries.\n4. **Binary Search for Non-overlapping Vouchers**: For each voucher, we check for complementary duration vouchers that either end before the current voucher starts or start after the current voucher ends, using binary search for efficiency.\n5. **Result Calculation**: The minimum cost of valid voucher pairs is tracked and printed, or `-1` if no valid pairs are found.",
    "ground_truth": "N/A",
    "extracted_answer": "import bisect\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    x = int(input[idx])\n    idx += 1\n    \n    vouchers = []\n    for _ in range(n):\n        l = int(input[idx])\n        idx += 1\n        r = int(input[idx])\n        idx += 1\n        cost = int(input[idx])\n        idx += 1\n        duration = r - l + 1\n        vouchers.append((l, r, cost, duration))\n    \n    # Group vouchers by duration\n    duration_map = defaultdict(list)\n    for l, r, cost, d in vouchers:\n        duration_map[d].append((l, r, cost))\n    \n    # Preprocess each duration's list\n    # For each duration, we have:\n    # sorted by end time (r), and prefix minima\n    # sorted by start time (l), and suffix minima\n    preprocessed = dict()\n    for d in duration_map:\n        lst = duration_map[d]\n        # Sort by r\n        sorted_by_r = sorted(lst, key=lambda x: x[1])\n        # Compute prefix minima\n        prefix_min_r = []\n        min_cost = float('inf')\n        for item in sorted_by_r:\n            min_cost = min(min_cost, item[2])\n            prefix_min_r.append(min_cost)\n        # Sort by l\n        sorted_by_l = sorted(lst, key=lambda x: x[0])\n        # Compute suffix minima\n        suffix_min_l = [0] * len(sorted_by_l)\n        min_cost = float('inf')\n        for i in range(len(sorted_by_l)-1, -1, -1):\n            min_cost = min(min_cost, sorted_by_l[i][2])\n            suffix_min_l[i] = min_cost\n        preprocessed[d] = (sorted_by_r, prefix_min_r, sorted_by_l, suffix_min_l)\n    \n    min_total = float('inf')\n    \n    for l1, r1, cost1, d1 in vouchers:\n        target_d = x - d1\n        if target_d < 1:\n            continue\n        if target_d not in preprocessed:\n            continue\n        # Check for vouchers with duration target_d\n        sorted_by_r, prefix_min_r, sorted_by_l, suffix_min_l = preprocessed[target_d]\n        # Case 1: voucher j ends before l1\n        # Find the largest r_j < l1\n        # sorted_by_r is sorted by r\n        r_list = [item[1] for item in sorted_by_r]\n        pos = bisect.bisect_left(r_list, l1) - 1\n        if pos >= 0:\n            current_min = prefix_min_r[pos]\n            min_total = min(min_total, current_min + cost1)\n        # Case 2: voucher j starts after r1\n        # sorted_by_l is sorted by l\n        l_list = [item[0] for item in sorted_by_l]\n        pos = bisect.bisect_right(l_list, r1)\n        if pos < len(l_list):\n            current_min = suffix_min_l[pos]\n            min_total = min(min_total, current_min + cost1)\n    \n    if min_total == float('inf'):\n        print(-1)\n    else:\n        print(min_total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 740,
        "completion_token_count": 1107,
        "thoughts_token_count": 1023
    }
}