{
    "start": 1758008431.030725,
    "end": 1758008594.2345834,
    "start-formatted": "2025-09-16 16:40 KST",
    "end-formatted": "2025-09-16 16:43 KST",
    "gpu": 2,
    "pid": 2,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Valera and X\n\nValera is a little boy. Yesterday he got a huge Math hometask at school, so Valera didn't have enough time to properly learn the English alphabet for his English lesson. Unfortunately, the English teacher decided to have a test on alphabet today. At the test Valera got a square piece of squared paper. The length of the side equals n squares (n is an odd number) and each unit square contains some small letter of the English alphabet.Valera needs to know if the letters written on the square piece of paper form letter \"X\". Valera's teacher thinks that the letters on the piece of paper form an \"X\", if:  on both diagonals of the square paper all letters are the same;  all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals. Help Valera, write the program that completes the described task for him.\n\n## Input\nThe first line contains integer n (3 ≤ n < 300; n is odd). Each of the next n lines contains n small English letters — the description of Valera's paper.\n\n## Output\nPrint string \"YES\", if the letters on the paper form letter \"X\". Otherwise, print string \"NO\". Print the strings without quotes.\n\n## Example\n### Input\n['5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox', '3\\nwsw\\nsws\\nwsw', '3\\nxpx\\npxp\\nxpe']\n\n### Output\n['NO', 'YES', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nThe task is to determine if a given square grid forms an 'X' according to specific rules. The conditions are:\n\n1. Both diagonals must have the same letter.\n2. All other squares (not on the diagonals) must have the same letter, which is different from the diagonal's letter.\n\nSo, first, I need to check all the cells in the two diagonals. Then check all the other cells.\n\nLet me think about how to approach this.\n\nFirst, for a square of size n x n where n is odd. The main diagonals are from top-left to bottom-right and top-right to bottom-left.\n\nFor each cell (i,j), it's on the main diagonal if i == j. It's on the anti-diagonal if i + j == n - 1. Because indices start at 0, right?\n\nSo for each cell in the grid, I need to check if it's on either of these diagonals.\n\nNow, the steps I need to perform:\n\n1. Check that all cells on both diagonals are the same. Let's call this character 'd_char'.\n2. Check that all other cells (non-diagonal) are the same, and that this character is different from 'd_char'.\n\nSo, how to implement this?\n\nFirst, collect all the characters from the diagonals. Then check if they are all the same. Then collect all the non-diagonal characters and check if they are all the same and different from the diagonal's character.\n\nBut wait, there's a possibility that the non-diagonal cells are empty. Wait, no. The problem says that each unit square contains some small letter. So all cells are filled. So no need to worry about empty cells.\n\nSo here's the plan:\n\n- Iterate through each cell in the grid.\n- For each cell, check if it's on either diagonal.\n- Collect all the diagonal characters into a set. If the size of this set is more than 1, then it's invalid.\n- Similarly, collect all non-diagonal characters into another set. If this set has more than one element, invalid.\n- Also, check that the two sets are different. If they are the same, then invalid.\n\nWait, but the problem says that the non-diagonal letters must be the same as each other, but different from the diagonal's letters.\n\nSo, the steps would be:\n\nCheck that all diagonal cells have the same character (call it d_char).\n\nCheck that all non-diagonal cells have the same character (call it o_char).\n\nCheck that d_char != o_char.\n\nIf all three conditions are met, output YES, else NO.\n\nSo, how to collect these characters?\n\nLet me think about code structure.\n\nRead n.\n\nThen read n lines, each line being a string of length n.\n\nThen for each cell (i, j):\n\nif i == j or i + j == n - 1: it's a diagonal cell.\n\nElse: non-diagonal.\n\nSo, collect all diagonal characters into a set. Let's say diagonal_chars = set()\n\nSimilarly, non_diagonal_chars = set()\n\nBut for efficiency, maybe we can check for the first diagonal character, then check all others against it.\n\nBut for code simplicity, perhaps using sets is easier. However, for large n (like 299), the code needs to be efficient. But even for 299x299, it's manageable.\n\nBut for the problem's constraints, since n is up to 300, the total number of cells is 90000. So even with O(n^2) time, it's acceptable.\n\nSo, code steps:\n\nRead n.\n\nRead the grid as a list of strings.\n\nThen:\n\ndiagonal_chars = set()\n\nnon_diagonal_chars = set()\n\nfor i in range(n):\n\n    for j in range(n):\n\n        if i == j or i + j == n - 1:\n\n            diagonal_chars.add(grid[i][j])\n\n        else:\n\n            non_diagonal_chars.add(grid[i][j])\n\nThen check:\n\nif len(diagonal_chars) == 1 and len(non_diagonal_chars) == 1 and diagonal_chars != non_diagonal_chars:\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")\n\nWait, but what if the non_diagonal_chars is empty? Well, since n is at least 3, and for n=3, the diagonals have 3 cells each, but overlapping at the center. So for n=3, the diagonals have 3 + 3 -1 =5 cells. The total cells is 9, so non-diagonal is 4. So for n >=3, non_diagonal_chars will have at least 4 elements. So no problem.\n\nBut for the case when n=1? Well, the problem says n is at least 3. So no.\n\nSo this approach seems correct.\n\nBut let's test",
    "response": "\n\n```python\nn = int(input())\ngrid = [input().strip() for _ in range(n)]\n\ndiagonal_chars = set()\nnon_diagonal_chars = set()\n\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            diagonal_chars.add(grid[i][j])\n        else:\n            non_diagonal_chars.add(grid[i][j])\n\nif (len(diagonal_chars) == 1 and \n    len(non_diagonal_chars) == 1 and \n    diagonal_chars != non_diagonal_chars):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n = int(input())\ngrid = [input().strip() for _ in range(n)]\n\ndiagonal_chars = set()\nnon_diagonal_chars = set()\n\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            diagonal_chars.add(grid[i][j])\n        else:\n            non_diagonal_chars.add(grid[i][j])\n\nif (len(diagonal_chars) == 1 and \n    len(non_diagonal_chars) == 1 and \n    diagonal_chars != non_diagonal_chars):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 444,
        "completion_token_count": 134,
        "thoughts_token_count": 1023
    }
}