{
    "start": 1758309559.7383711,
    "end": 1758309633.0873492,
    "start-formatted": "2025-09-20 04:19 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A successful student is one who is the best in at least one subject. Being the best in a subject means no one else has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where they have the maximum mark for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the marks for student 1 in subjects 1, 2, 3.\n\nSo the plan is:\n\n1. For each subject (column), find the maximum mark.\n2. For each student, check if there's at least one subject where their mark in that subject equals the maximum for that subject. If yes, they are successful.\n3. Count how many such students there are.\n\nWait, but how do I process the data? Let's think about the steps.\n\nFirst, I need to process the gradebook. Let's think of it as a 2D array. Each row is a student, each column is a subject.\n\nFor example, in the first sample input:\n\n3 3\n223\n232\n112\n\nSo the students are:\n\nStudent 0: [2, 2, 3]\nStudent 1: [2, 3, 2]\nStudent 2: [1, 1, 2]\n\nFor each subject (columns 0, 1, 2):\n\nSubject 0: max is 2 (students 0 and 1 have 2)\nSubject 1: max is 3 (student 1)\nSubject 2: max is 3 (student 0)\n\nSo for each student:\n\nStudent 0 has 2 in subject 0 (which is max), and 3 in subject 2 (max). So he's successful.\n\nStudent 1 has 2 in subject 0 (max), 3 in subject 1 (max). So successful.\n\nStudent 2 has 1 in all subjects, which are not max. So not successful. Hence total 2.\n\nSo the output is 2.\n\nSo the approach is:\n\n- For each column (subject), find the maximum value.\n- Then, for each student, check if in any of the columns, their value is equal to the max of that column. If yes, count them.\n\nSo the steps:\n\nRead n and m.\n\nThen read n lines, each line being a string of m digits. Convert each line into a list of integers, perhaps. Or maybe process each character as needed.\n\nThen, for each subject (columns 0 to m-1), find the maximum value.\n\nOnce we have the max for each subject, then for each student, check if any of their marks in the subjects is equal to the max of that subject.\n\nNow, how to implement this in Python.\n\nLet's think about data structures. Let's say we have a list of lists. For example, grades = [[2,2,3], [2,3,2], [1,1,2]].\n\nThen, for each column j in 0..m-1:\n\nmax_marks[j] = max(grades[i][j] for i in 0..n-1)\n\nOnce we have max_marks, then for each student i, check if any of their grades in j is equal to max_marks[j].\n\nSo for each student, loop through their grades. If any of them is equal to the max for that column, then mark them as successful.\n\nNow, how to compute max_marks.\n\nLet me think: for each column j, iterate through all rows i and collect the values, then take max.\n\nSo for j in range(m):\n\nmax_val = max(grades[i][j] for i in range(n))\n\nBut how to get the grades. Let's think about reading the input.\n\nThe input after n and m is n lines, each line is a string. For example, the first line is '223' which is for student 0.\n\nSo for each line, we can convert it into a list of integers. So:\n\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    row = [int(c) for c in line]\n    grades.append(row)\n\nOnce that's done, then for each column j, compute the max.\n\nOnce we have the max for each column, then for each student, check if any of their entries in the columns is equal to the max of that column.\n\nSo for each student in grades:\n\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_marks[j]:\n            mark as successful and break\n\nSo, the code steps:\n\nRead",
    "response": "```python\nn, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_marks = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grades[i][j] > max_val:\n            max_val = grades[i][j]\n    max_marks[j] = max_val\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_marks[j]:\n            successful += 1\n            break\n\nprint(successful)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_marks = [0] * m\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grades[i][j] > max_val:\n            max_val = grades[i][j]\n    max_marks[j] = max_val\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_marks[j]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 448,
        "completion_token_count": 145,
        "thoughts_token_count": 1024
    }
}