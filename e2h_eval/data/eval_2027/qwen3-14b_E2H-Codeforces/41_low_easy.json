{
    "start": 1758309273.9046443,
    "end": 1758309610.7218103,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the task is to build houses on n spots. Each house can have a height between 0 and h inclusive. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range l_i to r_i, the tallest house must be at most x_i. I have to maximize the total profit while satisfying all restrictions.\n\nHmm. How to approach this?\n\nConstraints are small: n, h, m up to 50. So maybe a brute-force approach with backtracking or some kind of dynamic programming? Or maybe even checking all possibilities since the numbers are small.\n\nWait, but even for n=50, trying all possible combinations of heights would be O(h^n) which is way too big. For example, if h is 50, 50^50 is impossible. So brute force is not feasible.\n\nAlternative idea: For each position, determine the maximum possible height it can have, considering all restrictions that apply to it. But how?\n\nWait, the problem is that restrictions are on ranges. For example, a restriction on [l_i, r_i] says that the maximum height in that interval is <= x_i. So for each such interval, the maximum height in that interval must be <= x_i. So, each restriction imposes that for all positions in l_i to r_i, their heights can't exceed x_i. Wait no, that's not correct. Because the maximum in the interval must be <= x_i. Which means that each individual house in the interval can be at most x_i. Because if any house in the interval is higher than x_i, then the maximum would be higher than x_i. Therefore, for each restriction (l_i, r_i, x_i), every house in positions l_i to r_i must be <= x_i. Because if any of them is higher, then the max would be higher than x_i, violating the restriction. So, the restrictions can be converted into per-house constraints.\n\nWait, but that's not entirely correct. Suppose there's a restriction that says the maximum in [1,3] must be <= 2. Then each of the houses 1, 2, 3 must be <= 2. Because if any of them is higher than 2, then the maximum would be higher than 2. So, the restriction implies that each individual house in the interval must be <= x_i. Therefore, for each restriction, we can process it as: for each position in l_i to r_i, the maximum allowed height for that position is min(current max, x_i). \n\nWait, but maybe there are multiple restrictions that apply to the same position. For example, a position might be in multiple intervals. So for each position, the maximum allowed height is the minimum of all x_i's from restrictions that include that position. Because each restriction that includes that position requires that the maximum in its interval is <= x_i, which implies that the position's height must be <= x_i. So for each position, the maximum possible height is the minimum between h and all x_i's of restrictions that include that position. \n\nWait, but that's only true if the restriction applies to the position. For example, if a restriction applies to [1,3], then the position 2 is in that interval. So, the maximum height for position 2 is limited by that restriction. But if there's another restriction that applies to [2,2], x=5, then the maximum for position 2 is min(x_i from [1,3], x_i from [2,2]).\n\nSo, perhaps the approach is: for each position i, compute the maximum allowed height as the minimum between h and all x_i's from restrictions that include i in their [l_i, r_i] interval. Then, the maximum profit is the sum of squares of these maximum allowed heights.\n\nBut wait, that can't be right. Let me think again. Let's take the first example:\n\nInput is 3 3 3, with restrictions:\n\n1-1: 1\n\n2-2:3\n\n3-3:2\n\nSo for each position:\n\nposition 1 is in restriction 1-1, so max is 1.\n\nposition 2 is in restriction 2-2, so max is 3.\n\nposition 3 is in restriction 3-3, so max is 2.\n\nThus, the maximum profit is 1² +3² +2² = 14, which matches the sample. So this approach works here.\n\nAnother example: the second sample input.\n\nn=4, h=10, m=2. Restrictions are:\n\n2-3:8\n\n3-4:7.\n\nFor each position:\n\nposition 1: no restrictions. So max is 10.\n\nposition 2: in restriction 2-3",
    "response": "To solve this problem, we need to determine the maximum profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and we must ensure that all zoning restrictions are satisfied.\n\n### Approach\n1. **Understanding Restrictions**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within the specified range must be at most the given height.\n2. **Determine Maximum Heights**: For each house position, compute the maximum allowable height by considering all restrictions that apply to that position. The maximum height for each position is the minimum value between the global maximum height `h` and all restriction values that include that position.\n3. **Calculate Profit**: Once we have the maximum allowable height for each position, the total profit is simply the sum of the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while idx < len(input) and input[idx] == '':\n        idx += 1\n    results = []\n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        # Initialize max_heights with h\n        max_heights = [h] * n\n        for _ in range(m):\n            while idx < len(input) and input[idx].strip() == '':\n                idx += 1\n            if idx >= len(input):\n                break\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust the max_heights for positions l-1 to r-1 (0-based)\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        # Calculate total profit\n        total = 0\n        for height in max_heights:\n            total += height * height\n        results.append(str(total))\n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read all at once and split into lines for processing. This allows handling multiple test cases efficiently.\n2. **Initialization**: For each test case, initialize an array `max_heights` with the maximum allowable height `h`.\n3. **Applying Restrictions**: For each restriction, update the allowable height for each position in the specified range to be the minimum of its current value and the restriction's maximum height.\n4. **Calculating Profit**: Sum the squares of the allowable heights for all positions to determine the maximum possible profit.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by leveraging the constraints directly on each house position. The complexity is manageable due to the small problem size constraints (up to 50 houses and restrictions).",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while idx < len(input) and input[idx] == '':\n        idx += 1\n    results = []\n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        # Initialize max_heights with h\n        max_heights = [h] * n\n        for _ in range(m):\n            while idx < len(input) and input[idx].strip() == '':\n                idx += 1\n            if idx >= len(input):\n                break\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust the max_heights for positions l-1 to r-1 (0-based)\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        # Calculate total profit\n        total = 0\n        for height in max_heights:\n            total += height * height\n        results.append(str(total))\n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 828,
        "completion_token_count": 630,
        "thoughts_token_count": 1024
    }
}