{
    "start": 1758290688.394417,
    "end": 1758290919.1184418,
    "start-formatted": "2025-09-19 23:04 KST",
    "end-formatted": "2025-09-19 23:08 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Exploring coprime factors**\n\nI’m considering how to choose A and B such that gcd(A, B) = 1, meaning they need to be coprime. This leads to wondering if t must be squarefree. Actually, it can have prime powers, with factors split into A and B. If a prime appears in t as p^k, one entire power must go to either A or B to maintain coprimality. I see there are many options for this! We should model a graph and ensure values are consistent across edges.",
    "response": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i] == i:\n            for j in range(i*i, n+1, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    MAXV = 10**6\n    spf = sieve_spf(MAXV)\n    edges = []\n    prime_edges = defaultdict(list)\n    node_lu = [dict() for _ in range(n)]  # lu: max g exponents\n    node_uu = [dict() for _ in range(n)]  # uu: min l exponents\n    INF = 60\n\n    for idx in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            return\n        gmap = factorize(g, spf) if g > 1 else {}\n        lmap = factorize(l, spf) if l > 1 else {}\n        edges.append((u, v, gmap, lmap))\n        primes = set(gmap.keys()) | set(lmap.keys())\n        for p in primes:\n            prime_edges[p].append(idx)\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            # update node lu/uu for both endpoints\n            # for u\n            prev_lu = node_lu[u].get(p, 0)\n            if eg > prev_lu:\n                node_lu[u][p] = eg\n            # uu: min\n            prev_uu = node_uu[u].get(p, INF)\n            if el < prev_uu:\n                node_uu[u][p] = el\n            # for v\n            prev_lu = node_lu[v].get(p, 0)\n            if eg > prev_lu:\n                node_lu[v][p] = eg\n            prev_uu = node_uu[v].get(p, INF)\n            if el < prev_uu:\n                node_uu[v][p] = el\n\n    # For each prime, build adjacency with r constraints and check feasibility\n    node_exp = [dict() for _ in range(n)]  # final exponents per prime\n    for p, eidxs in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_involved = set()\n        # preliminary per-edge checks and build adj\n        for idx in eidxs:\n            u, v, gmap, lmap = edges[idx]\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            lu_u = node_lu[u].get(p, 0)\n            lu_v = node_lu[v].get(p, 0)\n            uu_u = node_uu[u].get(p, INF)\n            uu_v = node_uu[v].get(p, INF)\n            if min(lu_u, lu_v) != eg or max(uu_u, uu_v) != el:\n                print(\"NO\")\n                return\n            r = eg + el - (lu_u + lu_v)\n            if r < 0:\n                print(\"NO\")\n                return\n            su = uu_u - lu_u\n            sv = uu_v - lu_v\n            if r > su + sv:\n                print(\"NO\")\n                return\n            adj[u].append((v, r))\n            adj[v].append((u, r))\n            nodes_involved.add(u)\n            nodes_involved.add(v)\n\n        visited = {}\n        sign = {}\n        off = {}\n        for node in nodes_involved:\n            if node in visited:\n                continue\n            # BFS component\n            q = deque()\n            comp_nodes = []\n            # param t: y_start = t for start node\n            t_fixed = None\n            sign[node] = 1\n            off[node] = 0\n            visited[node] = True\n            q.append(node)\n            comp_nodes.append(node)\n            possible = True\n            while q and possible:\n                u = q.popleft()\n                su = node_uu[u].get(p, INF) - node_lu[u].get(p,0)\n                for v, r in adj[u]:\n                    sign_new = -sign[u]\n                    off_new = r - off[u]\n                    if v not in visited:\n                        sign[v] = sign_new\n                        off[v] = off_new\n                        visited[v] = True\n                        q.append(v)\n                        comp_nodes.append(v)\n                    else:\n                        # existing gives equation: sign[v]*t + off[v] == sign_new*t + off_new\n                        sv = sign[v]\n                        ov = off[v]\n                        if sv == sign_new:\n                            if ov != off_new:\n                                possible = False\n                                break\n                        else:\n                            # sv != sign_new -> 2*t = off_new - ov  (since sv - sign_new = 2 or -2)\n                            num = off_new - ov\n                            den = sv - sign_new  # either 2 or -2\n                            if den == 0:\n                                possible = False\n                                break\n                            if num % den != 0:\n                                possible = False\n                                break\n                            tval = num // den\n                            if t_fixed is None:\n                                t_fixed = tval\n                            elif t_fixed != tval:\n                                possible = False\n                                break\n                if not possible:\n                    break\n            if not possible:\n                print(\"NO\")\n                return\n            # Now derive bounds for t from nodes in component\n            t_lo = -10**30\n            t_hi = 10**30\n            for u in comp_nodes:\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                su = uu - lu\n                sgn = sign[u]\n                o = off[u]\n                if sgn == 1:\n                    lo = -o\n                    hi = su - o\n                else:\n                    lo = o - su\n                    hi = o\n                if lo > t_lo:\n                    t_lo = lo\n                if hi < t_hi:\n                    t_hi = hi\n            if t_lo > t_hi:\n                print(\"NO\")\n                return\n            if t_fixed is not None:\n                if not (t_lo <= t_fixed <= t_hi):\n                    print(\"NO\")\n                    return\n                t_chosen = t_fixed\n            else:\n                # choose any integer in [t_lo,t_hi], need integer\n                # bounds already integers\n                t_chosen = t_lo\n            # compute y and set exponents\n            for u in comp_nodes:\n                y = sign[u] * t_chosen + off[u]\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                if y < 0 or y > uu - lu:\n                    print(\"NO\")\n                    return\n                node_exp[u][p] = lu + y\n\n    # Compose final numbers\n    res = [1] * n\n    for i in range(n):\n        val = 1\n        for p, e in node_exp[i].items():\n            val *= pow(p, e)\n        res[i] = val\n    # For isolated nodes with no edges, keep 1\n    # Final verification (optional but safe)\n    for (u, v, gmap, lmap) in edges:\n        a = res[u]\n        b = res[v]\n        import math\n        if math.gcd(a, b) != (lambda gm: eval_g_from_map(gmap))(gmap if False else gmap):\n            pass\n    # The above line attempted to be clever; let's just recompute gcd and lcm check properly:\n    import math\n    for (u, v, gmap, lmap) in edges:\n        a = res[u]\n        b = res[v]\n        if math.gcd(a, b) != (lambda g: int_prod_from_map(g))(gmap):\n            print(\"NO\")\n            return\n        lcalc = a // math.gcd(a,b) * b\n        if lcalc != (lambda l: int_prod_from_map(l))(lmap):\n            print(\"NO\")\n            return\n\n    # Helper to convert factor map to integer\ndef int_prod_from_map(d):\n    prod = 1\n    for p,e in d.items():\n        prod *= pow(p,e)\n    return prod\n\n# Fix small issues by re-defining main with int_prod_from_map closure\nif __name__ == \"__main__\":\n    # Redefine helper inside to avoid forward reference problem\n    def sieve_spf(n):\n        spf = list(range(n+1))\n        for i in range(2, int(n**0.5)+1):\n            if spf[i] == i:\n                for j in range(i*i, n+1, i):\n                    if spf[j] == j:\n                        spf[j] = i\n        return spf\n\n    def factorize(x, spf):\n        res = {}\n        while x > 1:\n            p = spf[x]\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        return res\n\n    def int_prod_from_map(d):\n        prod = 1\n        for p,e in d.items():\n            prod *= pow(p,e)\n        return prod\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        sys.exit(0)\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    MAXV = 10**6\n    spf = sieve_spf(MAXV)\n    edges = []\n    prime_edges = defaultdict(list)\n    node_lu = [dict() for _ in range(n)]\n    node_uu = [dict() for _ in range(n)]\n    INF = 60\n\n    for idx in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            sys.exit(0)\n        gmap = factorize(g, spf) if g > 1 else {}\n        lmap = factorize(l, spf) if l > 1 else {}\n        edges.append((u, v, gmap, lmap))\n        primes = set(gmap.keys()) | set(lmap.keys())\n        for p in primes:\n            prime_edges[p].append(idx)\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            prev = node_lu[u].get(p, 0)\n            if eg > prev:\n                node_lu[u][p] = eg\n            prevu = node_uu[u].get(p, INF)\n            if el < prevu:\n                node_uu[u][p] = el\n            prev = node_lu[v].get(p, 0)\n            if eg > prev:\n                node_lu[v][p] = eg\n            prevu = node_uu[v].get(p, INF)\n            if el < prevu:\n                node_uu[v][p] = el\n\n    node_exp = [dict() for _ in range(n)]\n    for p, eidxs in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_involved = set()\n        for idx in eidxs:\n            u, v, gmap, lmap = edges[idx]\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            lu_u = node_lu[u].get(p, 0)\n            lu_v = node_lu[v].get(p, 0)\n            uu_u = node_uu[u].get(p, INF)\n            uu_v = node_uu[v].get(p, INF)\n            if min(lu_u, lu_v) != eg or max(uu_u, uu_v) != el:\n                print(\"NO\")\n                sys.exit(0)\n            r = eg + el - (lu_u + lu_v)\n            if r < 0:\n                print(\"NO\")\n                sys.exit(0)\n            su = uu_u - lu_u\n            sv = uu_v - lu_v\n            if r > su + sv:\n                print(\"NO\")\n                sys.exit(0)\n            adj[u].append((v, r))\n            adj[v].append((u, r))\n            nodes_involved.add(u)\n            nodes_involved.add(v)\n\n        visited = {}\n        sign = {}\n        off = {}\n        for node in nodes_involved:\n            if node in visited:\n                continue\n            q = deque()\n            comp_nodes = []\n            t_fixed = None\n            sign[node] = 1\n            off[node] = 0\n            visited[node] = True\n            q.append(node)\n            comp_nodes.append(node)\n            possible = True\n            while q and possible:\n                u = q.popleft()\n                for v, r in adj[u]:\n                    sign_new = -sign[u]\n                    off_new = r - off[u]\n                    if v not in visited:\n                        sign[v] = sign_new\n                        off[v] = off_new\n                        visited[v] = True\n                        q.append(v)\n                        comp_nodes.append(v)\n                    else:\n                        sv = sign[v]\n                        ov = off[v]\n                        if sv == sign_new:\n                            if ov != off_new:\n                                possible = False\n                                break\n                        else:\n                            num = off_new - ov\n                            den = sv - sign_new\n                            if den == 0 or num % den != 0:\n                                possible = False\n                                break\n                            tval = num // den\n                            if t_fixed is None:\n                                t_fixed = tval\n                            elif t_fixed != tval:\n                                possible = False\n                                break\n                if not possible:\n                    break\n            if not possible:\n                print(\"NO\")\n                sys.exit(0)\n            t_lo = -10**30\n            t_hi = 10**30\n            for u in comp_nodes:\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                su = uu - lu\n                sgn = sign[u]\n                o = off[u]\n                if sgn == 1:\n                    lo = -o\n                    hi = su - o\n                else:\n                    lo = o - su\n                    hi = o\n                if lo > t_lo:\n                    t_lo = lo\n                if hi < t_hi:\n                    t_hi = hi\n            if t_lo > t_hi:\n                print(\"NO\")\n                sys.exit(0)\n            if t_fixed is not None:\n                if not (t_lo <= t_fixed <= t_hi):\n                    print(\"NO\")\n                    sys.exit(0)\n                t_chosen = t_fixed\n            else:\n                # choose integer within bounds\n                # ensure integer: bounds are integers\n                t_chosen = int(t_lo)\n            for u in comp_nodes:\n                y = sign[u] * t_chosen + off[u]\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                if y < 0 or y > uu - lu:\n                    print(\"NO\")\n                    sys.exit(0)\n                node_exp[u][p] = lu + y\n\n    # Build results\n    res = [1] * n\n    for i in range(n):\n        val = 1\n        for p, e in node_exp[i].items():\n            val *= pow(p, e)\n        res[i] = val\n\n    # Verify edges\n    import math\n    for (u, v, gmap, lmap) in edges:\n        a = res[u]\n        b = res[v]\n        if math.gcd(a, b) != int_prod_from_map(gmap):\n            print(\"NO\")\n            sys.exit(0)\n        lcalc = a // math.gcd(a,b) * b\n        if lcalc != int_prod_from_map(lmap):\n            print(\"NO\")\n            sys.exit(0)\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i] == i:\n            for j in range(i*i, n+1, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    MAXV = 10**6\n    spf = sieve_spf(MAXV)\n    edges = []\n    prime_edges = defaultdict(list)\n    node_lu = [dict() for _ in range(n)]  # lu: max g exponents\n    node_uu = [dict() for _ in range(n)]  # uu: min l exponents\n    INF = 60\n\n    for idx in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            return\n        gmap = factorize(g, spf) if g > 1 else {}\n        lmap = factorize(l, spf) if l > 1 else {}\n        edges.append((u, v, gmap, lmap))\n        primes = set(gmap.keys()) | set(lmap.keys())\n        for p in primes:\n            prime_edges[p].append(idx)\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            # update node lu/uu for both endpoints\n            # for u\n            prev_lu = node_lu[u].get(p, 0)\n            if eg > prev_lu:\n                node_lu[u][p] = eg\n            # uu: min\n            prev_uu = node_uu[u].get(p, INF)\n            if el < prev_uu:\n                node_uu[u][p] = el\n            # for v\n            prev_lu = node_lu[v].get(p, 0)\n            if eg > prev_lu:\n                node_lu[v][p] = eg\n            prev_uu = node_uu[v].get(p, INF)\n            if el < prev_uu:\n                node_uu[v][p] = el\n\n    # For each prime, build adjacency with r constraints and check feasibility\n    node_exp = [dict() for _ in range(n)]  # final exponents per prime\n    for p, eidxs in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_involved = set()\n        # preliminary per-edge checks and build adj\n        for idx in eidxs:\n            u, v, gmap, lmap = edges[idx]\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            lu_u = node_lu[u].get(p, 0)\n            lu_v = node_lu[v].get(p, 0)\n            uu_u = node_uu[u].get(p, INF)\n            uu_v = node_uu[v].get(p, INF)\n            if min(lu_u, lu_v) != eg or max(uu_u, uu_v) != el:\n                print(\"NO\")\n                return\n            r = eg + el - (lu_u + lu_v)\n            if r < 0:\n                print(\"NO\")\n                return\n            su = uu_u - lu_u\n            sv = uu_v - lu_v\n            if r > su + sv:\n                print(\"NO\")\n                return\n            adj[u].append((v, r))\n            adj[v].append((u, r))\n            nodes_involved.add(u)\n            nodes_involved.add(v)\n\n        visited = {}\n        sign = {}\n        off = {}\n        for node in nodes_involved:\n            if node in visited:\n                continue\n            # BFS component\n            q = deque()\n            comp_nodes = []\n            # param t: y_start = t for start node\n            t_fixed = None\n            sign[node] = 1\n            off[node] = 0\n            visited[node] = True\n            q.append(node)\n            comp_nodes.append(node)\n            possible = True\n            while q and possible:\n                u = q.popleft()\n                su = node_uu[u].get(p, INF) - node_lu[u].get(p,0)\n                for v, r in adj[u]:\n                    sign_new = -sign[u]\n                    off_new = r - off[u]\n                    if v not in visited:\n                        sign[v] = sign_new\n                        off[v] = off_new\n                        visited[v] = True\n                        q.append(v)\n                        comp_nodes.append(v)\n                    else:\n                        # existing gives equation: sign[v]*t + off[v] == sign_new*t + off_new\n                        sv = sign[v]\n                        ov = off[v]\n                        if sv == sign_new:\n                            if ov != off_new:\n                                possible = False\n                                break\n                        else:\n                            # sv != sign_new -> 2*t = off_new - ov  (since sv - sign_new = 2 or -2)\n                            num = off_new - ov\n                            den = sv - sign_new  # either 2 or -2\n                            if den == 0:\n                                possible = False\n                                break\n                            if num % den != 0:\n                                possible = False\n                                break\n                            tval = num // den\n                            if t_fixed is None:\n                                t_fixed = tval\n                            elif t_fixed != tval:\n                                possible = False\n                                break\n                if not possible:\n                    break\n            if not possible:\n                print(\"NO\")\n                return\n            # Now derive bounds for t from nodes in component\n            t_lo = -10**30\n            t_hi = 10**30\n            for u in comp_nodes:\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                su = uu - lu\n                sgn = sign[u]\n                o = off[u]\n                if sgn == 1:\n                    lo = -o\n                    hi = su - o\n                else:\n                    lo = o - su\n                    hi = o\n                if lo > t_lo:\n                    t_lo = lo\n                if hi < t_hi:\n                    t_hi = hi\n            if t_lo > t_hi:\n                print(\"NO\")\n                return\n            if t_fixed is not None:\n                if not (t_lo <= t_fixed <= t_hi):\n                    print(\"NO\")\n                    return\n                t_chosen = t_fixed\n            else:\n                # choose any integer in [t_lo,t_hi], need integer\n                # bounds already integers\n                t_chosen = t_lo\n            # compute y and set exponents\n            for u in comp_nodes:\n                y = sign[u] * t_chosen + off[u]\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                if y < 0 or y > uu - lu:\n                    print(\"NO\")\n                    return\n                node_exp[u][p] = lu + y\n\n    # Compose final numbers\n    res = [1] * n\n    for i in range(n):\n        val = 1\n        for p, e in node_exp[i].items():\n            val *= pow(p, e)\n        res[i] = val\n    # For isolated nodes with no edges, keep 1\n    # Final verification (optional but safe)\n    for (u, v, gmap, lmap) in edges:\n        a = res[u]\n        b = res[v]\n        import math\n        if math.gcd(a, b) != (lambda gm: eval_g_from_map(gmap))(gmap if False else gmap):\n            pass\n    # The above line attempted to be clever; let's just recompute gcd and lcm check properly:\n    import math\n    for (u, v, gmap, lmap) in edges:\n        a = res[u]\n        b = res[v]\n        if math.gcd(a, b) != (lambda g: int_prod_from_map(g))(gmap):\n            print(\"NO\")\n            return\n        lcalc = a // math.gcd(a,b) * b\n        if lcalc != (lambda l: int_prod_from_map(l))(lmap):\n            print(\"NO\")\n            return\n\n    # Helper to convert factor map to integer\ndef int_prod_from_map(d):\n    prod = 1\n    for p,e in d.items():\n        prod *= pow(p,e)\n    return prod\n\n# Fix small issues by re-defining main with int_prod_from_map closure\nif __name__ == \"__main__\":\n    # Redefine helper inside to avoid forward reference problem\n    def sieve_spf(n):\n        spf = list(range(n+1))\n        for i in range(2, int(n**0.5)+1):\n            if spf[i] == i:\n                for j in range(i*i, n+1, i):\n                    if spf[j] == j:\n                        spf[j] = i\n        return spf\n\n    def factorize(x, spf):\n        res = {}\n        while x > 1:\n            p = spf[x]\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        return res\n\n    def int_prod_from_map(d):\n        prod = 1\n        for p,e in d.items():\n            prod *= pow(p,e)\n        return prod\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        sys.exit(0)\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    MAXV = 10**6\n    spf = sieve_spf(MAXV)\n    edges = []\n    prime_edges = defaultdict(list)\n    node_lu = [dict() for _ in range(n)]\n    node_uu = [dict() for _ in range(n)]\n    INF = 60\n\n    for idx in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            sys.exit(0)\n        gmap = factorize(g, spf) if g > 1 else {}\n        lmap = factorize(l, spf) if l > 1 else {}\n        edges.append((u, v, gmap, lmap))\n        primes = set(gmap.keys()) | set(lmap.keys())\n        for p in primes:\n            prime_edges[p].append(idx)\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            prev = node_lu[u].get(p, 0)\n            if eg > prev:\n                node_lu[u][p] = eg\n            prevu = node_uu[u].get(p, INF)\n            if el < prevu:\n                node_uu[u][p] = el\n            prev = node_lu[v].get(p, 0)\n            if eg > prev:\n                node_lu[v][p] = eg\n            prevu = node_uu[v].get(p, INF)\n            if el < prevu:\n                node_uu[v][p] = el\n\n    node_exp = [dict() for _ in range(n)]\n    for p, eidxs in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_involved = set()\n        for idx in eidxs:\n            u, v, gmap, lmap = edges[idx]\n            eg = gmap.get(p, 0)\n            el = lmap.get(p, 0)\n            lu_u = node_lu[u].get(p, 0)\n            lu_v = node_lu[v].get(p, 0)\n            uu_u = node_uu[u].get(p, INF)\n            uu_v = node_uu[v].get(p, INF)\n            if min(lu_u, lu_v) != eg or max(uu_u, uu_v) != el:\n                print(\"NO\")\n                sys.exit(0)\n            r = eg + el - (lu_u + lu_v)\n            if r < 0:\n                print(\"NO\")\n                sys.exit(0)\n            su = uu_u - lu_u\n            sv = uu_v - lu_v\n            if r > su + sv:\n                print(\"NO\")\n                sys.exit(0)\n            adj[u].append((v, r))\n            adj[v].append((u, r))\n            nodes_involved.add(u)\n            nodes_involved.add(v)\n\n        visited = {}\n        sign = {}\n        off = {}\n        for node in nodes_involved:\n            if node in visited:\n                continue\n            q = deque()\n            comp_nodes = []\n            t_fixed = None\n            sign[node] = 1\n            off[node] = 0\n            visited[node] = True\n            q.append(node)\n            comp_nodes.append(node)\n            possible = True\n            while q and possible:\n                u = q.popleft()\n                for v, r in adj[u]:\n                    sign_new = -sign[u]\n                    off_new = r - off[u]\n                    if v not in visited:\n                        sign[v] = sign_new\n                        off[v] = off_new\n                        visited[v] = True\n                        q.append(v)\n                        comp_nodes.append(v)\n                    else:\n                        sv = sign[v]\n                        ov = off[v]\n                        if sv == sign_new:\n                            if ov != off_new:\n                                possible = False\n                                break\n                        else:\n                            num = off_new - ov\n                            den = sv - sign_new\n                            if den == 0 or num % den != 0:\n                                possible = False\n                                break\n                            tval = num // den\n                            if t_fixed is None:\n                                t_fixed = tval\n                            elif t_fixed != tval:\n                                possible = False\n                                break\n                if not possible:\n                    break\n            if not possible:\n                print(\"NO\")\n                sys.exit(0)\n            t_lo = -10**30\n            t_hi = 10**30\n            for u in comp_nodes:\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                su = uu - lu\n                sgn = sign[u]\n                o = off[u]\n                if sgn == 1:\n                    lo = -o\n                    hi = su - o\n                else:\n                    lo = o - su\n                    hi = o\n                if lo > t_lo:\n                    t_lo = lo\n                if hi < t_hi:\n                    t_hi = hi\n            if t_lo > t_hi:\n                print(\"NO\")\n                sys.exit(0)\n            if t_fixed is not None:\n                if not (t_lo <= t_fixed <= t_hi):\n                    print(\"NO\")\n                    sys.exit(0)\n                t_chosen = t_fixed\n            else:\n                # choose integer within bounds\n                # ensure integer: bounds are integers\n                t_chosen = int(t_lo)\n            for u in comp_nodes:\n                y = sign[u] * t_chosen + off[u]\n                lu = node_lu[u].get(p, 0)\n                uu = node_uu[u].get(p, INF)\n                if y < 0 or y > uu - lu:\n                    print(\"NO\")\n                    sys.exit(0)\n                node_exp[u][p] = lu + y\n\n    # Build results\n    res = [1] * n\n    for i in range(n):\n        val = 1\n        for p, e in node_exp[i].items():\n            val *= pow(p, e)\n        res[i] = val\n\n    # Verify edges\n    import math\n    for (u, v, gmap, lmap) in edges:\n        a = res[u]\n        b = res[v]\n        if math.gcd(a, b) != int_prod_from_map(gmap):\n            print(\"NO\")\n            sys.exit(0)\n        lcalc = a // math.gcd(a,b) * b\n        if lcalc != int_prod_from_map(lmap):\n            print(\"NO\")\n            sys.exit(0)\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 11881,
        "thoughts_token_count": 8256
    }
}