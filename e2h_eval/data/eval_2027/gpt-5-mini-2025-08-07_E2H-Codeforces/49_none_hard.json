{
    "start": 1758294620.1984699,
    "end": 1758294648.8877203,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef lcm(a,b):\n    if a==0 or b==0: return 0\n    return a//gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it)); L = int(next(it))\n        edges.append((u,v,g,L))\n        adj[u].append((v,g,L))\n        adj[v].append((u,g,L))\n    # Check consistency: for each edge, L must be multiple of g, and gcd(x,y)=g and lcm(x,y)=L -> x*y = g*L\n    for u,v,g,L in edges:\n        if L % g != 0:\n            print(\"NO\"); return\n\n    A = [0]*n\n    visited = [False]*n\n\n    for s in range(n):\n        if visited[s]: continue\n        # gather component via BFS\n        comp = []\n        q = deque([s]); visited[s]=True\n        while q:\n            u = q.popleft(); comp.append(u)\n            for v,g,L in adj[u]:\n                if not visited[v]:\n                    visited[v]=True; q.append(v)\n        # attempt to assign\n        # Strategy: try to find candidate for s by using edges: value[u] must divide product = g*L / value[v], etc.\n        # We'll try to pick a start value based on neighbors constraints: for any edge (u,v,g,L): possible values are multiples of g and divide L.\n        # We'll attempt to compute minimal candidate using propagation of fractions: assign rational ratios.\n        # Use prime-free approach: represent each node as value = base * mult[node], where base unknown integer. We'll compute mult as rational via fractions.\n        from fractions import Fraction\n        mult = {}\n        ok = True\n        # Set arbitrary s = 1 as base mult\n        mult[s] = Fraction(1,1)\n        dq = deque([s])\n        while dq and ok:\n            u = dq.popleft()\n            for v,g,L in adj[u]:\n                # For nodes with values x,y: gcd = g, lcm = L => x*y = g*L\n                # So y = g*L / x\n                # Since mult gives ratio x = base * mult[u], y = base * mult[v]\n                # => mult[v] = (g*L / (base*mult[u])) / base = (g*L)/(base^2 * mult[u]) impossible. Instead we use pairwise ratios:\n                # From x = base*mu, y = base*mv => x*y = base^2 * mu*mv = g*L => mu*mv = (g*L)/base^2\n                # That couples base. Alternate approach: use relation x/y = r where r must satisfy constraints:\n                # Let x = g * a, y = g * b with gcd(a,b)=1 and lcm = g*a*b = L => a*b = L/g = K\n                # So a and b are coprime and multiply to K. So ratio x/y = a/b where a|K and b=K/a and gcd(a,b)=1.\n                K = L//g\n                # We know x = g * a, y = g * b with a*b=K, gcd(a,b)=1\n                # So mult ratio mult[v]/mult[u] = y/x = b/a where a*b=K and gcd(a,b)=1\n                # But we don't know which divisor pairs chosen. However possible ratios are divisors of K as fraction.\n                # Hard to deduce uniquely; instead perform search by trying divisors for starting node using its incident edges.\n                if v in mult:\n                    # check consistency exists some choice: there must exist coprime a,b with a*b=K and mult[v]/mult[u] == b/a\n                    # So mult[v]/mult[u] must equal some divisor ratio of K\n                    ratio = mult[v]/mult[u]\n                    # ratio = b/a where a*b=K => ratio = b/a => ratio = d/(K//d) for some d|K\n                    found = False\n                    for d in divisors(K):\n                        if Fraction(d, K//d) == ratio:\n                            found = True; break\n                    if not found:\n                        ok = False; break\n                else:\n                    # cannot determine unique; skip propagation here\n                    # We'll just mark reachable; leave to later assignment\n                    pass\n        if not ok:\n            print(\"NO\"); return\n        # Now brute force choose values for nodes in component by trying candidate values for s from its neighbors constraints.\n        # Collect possible candidates for s from edges (s,u)\n        candidates = set()\n        # If isolated node\n        if len(comp)==1 and not adj[s]:\n            A[s] = 1\n            continue\n        # Generate candidate x_s by using each neighbor constraint: x_s = g * a where a divides K\n        # We'll pick candidates from edges adjacent to any node in comp using simple propagation attempt:\n        # For each node as anchor, try possible value up to 1e6 consistent with local edges, BFS propagate and check.\n        LIMIT = 10**6\n        tried_ok = False\n        # prepare list of nodes for attempts\n        # For each node u and each divisor choice for its edge (u,v), produce initial x_u and attempt\n        def attempt_assign(start_node, start_val):\n            if start_val<1 or start_val>LIMIT: return None\n            val = {}\n            val[start_node]=start_val\n            dq = deque([start_node])\n            while dq:\n                u = dq.popleft()\n                xu = val[u]\n                for v,g,L in adj[u]:\n                    prod = g*L\n                    if prod % xu != 0:\n                        return None\n                    y = prod//xu\n                    # Check gcd and lcm conditions\n                    if gcd(xu,y)!=g or lcm(xu,y)!=L: return None\n                    if y<1 or y>LIMIT: return None\n                    if v in val:\n                        if val[v]!=y: return None\n                    else:\n                        val[v]=y; dq.append(v)\n            return val\n        # Build seed candidates: for each edge (u,v) in component, for each factorization a*b=K with coprime, produce xu = g*a and xv = g*b\n        # We'll try seeds for u values.\n        def divisors_list(x):\n            res=[]\n            i=1\n            while i*i<=x:\n                if x%i==0:\n                    res.append(i)\n                    if i*i!=x: res.append(x//i)\n                i+=1\n            return res\n        seeds = []\n        for u in comp:\n            for v,g,L in adj[u]:\n                K = L//g\n                for a in divisors_list(K):\n                    b = K//a\n                    if gcd(a,b)!=1: continue\n                    xu = g*a\n                    seeds.append((u,xu))\n        # Also try assigning 1 to some node as fallback\n        seeds.append((s,1))\n        # Deduplicate seeds\n        seenSeeds=set()\n        for u,xu in seeds:\n            if (u,xu) in seenSeeds: continue\n            seenSeeds.add((u,xu))\n            res = attempt_assign(u,xu)\n            if res is not None:\n                # assign to A for component\n                for node in comp:\n                    A[node]=res.get(node,1)\n                tried_ok = True\n                break\n        if not tried_ok:\n            print(\"NO\"); return\n    # Final validation all edges\n    for u,v,g,L in edges:\n        if gcd(A[u],A[v])!=g or lcm(A[u],A[v])!=L:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in A))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom math import gcd\nfrom collections import deque\n\ndef lcm(a,b):\n    if a==0 or b==0: return 0\n    return a//gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it)); L = int(next(it))\n        edges.append((u,v,g,L))\n        adj[u].append((v,g,L))\n        adj[v].append((u,g,L))\n    # Check consistency: for each edge, L must be multiple of g, and gcd(x,y)=g and lcm(x,y)=L -> x*y = g*L\n    for u,v,g,L in edges:\n        if L % g != 0:\n            print(\"NO\"); return\n\n    A = [0]*n\n    visited = [False]*n\n\n    for s in range(n):\n        if visited[s]: continue\n        # gather component via BFS\n        comp = []\n        q = deque([s]); visited[s]=True\n        while q:\n            u = q.popleft(); comp.append(u)\n            for v,g,L in adj[u]:\n                if not visited[v]:\n                    visited[v]=True; q.append(v)\n        # attempt to assign\n        # Strategy: try to find candidate for s by using edges: value[u] must divide product = g*L / value[v], etc.\n        # We'll try to pick a start value based on neighbors constraints: for any edge (u,v,g,L): possible values are multiples of g and divide L.\n        # We'll attempt to compute minimal candidate using propagation of fractions: assign rational ratios.\n        # Use prime-free approach: represent each node as value = base * mult[node], where base unknown integer. We'll compute mult as rational via fractions.\n        from fractions import Fraction\n        mult = {}\n        ok = True\n        # Set arbitrary s = 1 as base mult\n        mult[s] = Fraction(1,1)\n        dq = deque([s])\n        while dq and ok:\n            u = dq.popleft()\n            for v,g,L in adj[u]:\n                # For nodes with values x,y: gcd = g, lcm = L => x*y = g*L\n                # So y = g*L / x\n                # Since mult gives ratio x = base * mult[u], y = base * mult[v]\n                # => mult[v] = (g*L / (base*mult[u])) / base = (g*L)/(base^2 * mult[u]) impossible. Instead we use pairwise ratios:\n                # From x = base*mu, y = base*mv => x*y = base^2 * mu*mv = g*L => mu*mv = (g*L)/base^2\n                # That couples base. Alternate approach: use relation x/y = r where r must satisfy constraints:\n                # Let x = g * a, y = g * b with gcd(a,b)=1 and lcm = g*a*b = L => a*b = L/g = K\n                # So a and b are coprime and multiply to K. So ratio x/y = a/b where a|K and b=K/a and gcd(a,b)=1.\n                K = L//g\n                # We know x = g * a, y = g * b with a*b=K, gcd(a,b)=1\n                # So mult ratio mult[v]/mult[u] = y/x = b/a where a*b=K and gcd(a,b)=1\n                # But we don't know which divisor pairs chosen. However possible ratios are divisors of K as fraction.\n                # Hard to deduce uniquely; instead perform search by trying divisors for starting node using its incident edges.\n                if v in mult:\n                    # check consistency exists some choice: there must exist coprime a,b with a*b=K and mult[v]/mult[u] == b/a\n                    # So mult[v]/mult[u] must equal some divisor ratio of K\n                    ratio = mult[v]/mult[u]\n                    # ratio = b/a where a*b=K => ratio = b/a => ratio = d/(K//d) for some d|K\n                    found = False\n                    for d in divisors(K):\n                        if Fraction(d, K//d) == ratio:\n                            found = True; break\n                    if not found:\n                        ok = False; break\n                else:\n                    # cannot determine unique; skip propagation here\n                    # We'll just mark reachable; leave to later assignment\n                    pass\n        if not ok:\n            print(\"NO\"); return\n        # Now brute force choose values for nodes in component by trying candidate values for s from its neighbors constraints.\n        # Collect possible candidates for s from edges (s,u)\n        candidates = set()\n        # If isolated node\n        if len(comp)==1 and not adj[s]:\n            A[s] = 1\n            continue\n        # Generate candidate x_s by using each neighbor constraint: x_s = g * a where a divides K\n        # We'll pick candidates from edges adjacent to any node in comp using simple propagation attempt:\n        # For each node as anchor, try possible value up to 1e6 consistent with local edges, BFS propagate and check.\n        LIMIT = 10**6\n        tried_ok = False\n        # prepare list of nodes for attempts\n        # For each node u and each divisor choice for its edge (u,v), produce initial x_u and attempt\n        def attempt_assign(start_node, start_val):\n            if start_val<1 or start_val>LIMIT: return None\n            val = {}\n            val[start_node]=start_val\n            dq = deque([start_node])\n            while dq:\n                u = dq.popleft()\n                xu = val[u]\n                for v,g,L in adj[u]:\n                    prod = g*L\n                    if prod % xu != 0:\n                        return None\n                    y = prod//xu\n                    # Check gcd and lcm conditions\n                    if gcd(xu,y)!=g or lcm(xu,y)!=L: return None\n                    if y<1 or y>LIMIT: return None\n                    if v in val:\n                        if val[v]!=y: return None\n                    else:\n                        val[v]=y; dq.append(v)\n            return val\n        # Build seed candidates: for each edge (u,v) in component, for each factorization a*b=K with coprime, produce xu = g*a and xv = g*b\n        # We'll try seeds for u values.\n        def divisors_list(x):\n            res=[]\n            i=1\n            while i*i<=x:\n                if x%i==0:\n                    res.append(i)\n                    if i*i!=x: res.append(x//i)\n                i+=1\n            return res\n        seeds = []\n        for u in comp:\n            for v,g,L in adj[u]:\n                K = L//g\n                for a in divisors_list(K):\n                    b = K//a\n                    if gcd(a,b)!=1: continue\n                    xu = g*a\n                    seeds.append((u,xu))\n        # Also try assigning 1 to some node as fallback\n        seeds.append((s,1))\n        # Deduplicate seeds\n        seenSeeds=set()\n        for u,xu in seeds:\n            if (u,xu) in seenSeeds: continue\n            seenSeeds.add((u,xu))\n            res = attempt_assign(u,xu)\n            if res is not None:\n                # assign to A for component\n                for node in comp:\n                    A[node]=res.get(node,1)\n                tried_ok = True\n                break\n        if not tried_ok:\n            print(\"NO\"); return\n    # Final validation all edges\n    for u,v,g,L in edges:\n        if gcd(A[u],A[v])!=g or lcm(A[u],A[v])!=L:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in A))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 1773,
        "thoughts_token_count": 0
    }
}