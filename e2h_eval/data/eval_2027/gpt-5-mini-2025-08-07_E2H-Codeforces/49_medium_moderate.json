{
    "start": 1758290739.1299517,
    "end": 1758290864.479968,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Evaluating prime factorization approach**\n\nI'm considering a better approach that involves using prime factorization reasoning along with a Chinese remainder theorem for constraints treated as equations. I think I need to compute a value for each node based on the gcd of all g's or all l's connected to it. Each node's value must be divisible by the gcds from its incident edges. This seems similar to a known competitive programming problem. An alternative might be to solve it through prime exponent systems, factoring g and l into primes since the values are limited.",
    "response": "```python\nimport sys\nimport threading\ndef main():\n    import sys\n    sys.setrecursionlimit(1 << 25)\n    from math import gcd\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n+1)]\n    edges = []\n    maxL = 1\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            return\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n        if l > maxL: maxL = l\n    # SPF sieve up to maxL\n    MAX = max(2, maxL)\n    spf = list(range(MAX+1))\n    for i in range(2, int(MAX**0.5)+1):\n        if spf[i] == i:\n            step = i\n            start = i*i\n            for j in range(start, MAX+1, step):\n                if spf[j] == j:\n                    spf[j] = i\n    def factorize(x):\n        res = {}\n        while x > 1:\n            p = spf[x]\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        return res\n    def divisors(x):\n        if x == 1:\n            return [1]\n        fac = factorize(x)\n        divs = [1]\n        for p, e in fac.items():\n            cur = []\n            powp = 1\n            for _ in range(e+1):\n                for d in divs:\n                    cur.append(d * powp)\n                powp *= p\n            divs = cur\n        return divs\n    val = [0]*(n+1)\n    visited = [False]*(n+1)\n    from collections import deque\n    for i in range(1, n+1):\n        if val[i] != 0 or not adj[i]:\n            if val[i] == 0 and not adj[i]:\n                val[i] = 1\n            continue\n        # find an edge in this component to start with minimal divisors\n        # gather component nodes to pick best starting edge\n        comp_nodes = []\n        q = deque([i])\n        seen = {i}\n        while q:\n            u = q.popleft()\n            comp_nodes.append(u)\n            for v,g,l in adj[u]:\n                if v not in seen:\n                    seen.add(v); q.append(v)\n        # pick edge among edges inside component with minimal divisors length\n        best_edge = None\n        best_divs = None\n        for u in comp_nodes:\n            for v,g,l in adj[u]:\n                if u < v:  # consider each undirected once\n                    ds = divisors(l)\n                    if best_divs is None or len(ds) < len(best_divs):\n                        best_divs = ds\n                        best_edge = (u,v,g,l)\n        # If somehow no edge found (shouldn't happen), set all nodes 1\n        if best_edge is None:\n            for u in comp_nodes:\n                val[u] = 1\n            continue\n        u0,v0,g0,l0 = best_edge\n        P0 = g0 * l0\n        ds = best_divs if best_divs is not None else divisors(l0)\n        ds.sort()\n        success = False\n        for d in ds:\n            if d % g0 != 0:\n                continue\n            if P0 % d != 0:\n                continue\n            other = P0 // d\n            if gcd(d, other) != g0:\n                continue\n            # attempt propagation starting with assigning u0=d and v0=other (or maybe the reverse)\n            for start_assign in ((u0,d),(v0,d)):  # try both orientations: assign start node one of the divisors\n                assigned = []\n                stack = [start_assign]\n                ok = True\n                while stack and ok:\n                    u,a_u = stack.pop()\n                    if val[u] != 0:\n                        if val[u] != a_u:\n                            ok = False\n                            break\n                        else:\n                            continue\n                    val[u] = a_u\n                    assigned.append(u)\n                    # propagate to neighbors\n                    for v,g,l in adj[u]:\n                        P = g * l\n                        if a_u == 0 or P % a_u != 0:\n                            ok = False; break\n                        a_v = P // a_u\n                        # quick checks: a_v must divide l (since a_v <= l) and be multiple of g\n                        # but product and gcd check suffice:\n                        if gcd(a_u, a_v) != g:\n                            ok = False; break\n                        if val[v] != 0:\n                            if val[v] != a_v:\n                                ok = False; break\n                        else:\n                            stack.append((v, a_v))\n                if ok:\n                    success = True\n                    break\n                else:\n                    # undo assigned\n                    for node in assigned:\n                        val[node] = 0\n            if success:\n                break\n        if not success:\n            print(\"NO\")\n            return\n    # final validation: check all edges satisfy constraints\n    for u,v,g,l in edges:\n        a = val[u]; b = val[v]\n        if a == 0 or b == 0:\n            print(\"NO\")\n            return\n        if gcd(a,b) != g:\n            print(\"NO\")\n            return\n        # lcm check: (a*b)//g == l\n        if (a//g)*b != l:\n            # compute lcm\n            from math import gcd as _g\n            if a*b//_g(a,b) != l:\n                print(\"NO\")\n                return\n            # else ok\n    print(\"YES\")\n    print(\" \".join(str(val[i]) for i in range(1, n+1)))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\ndef main():\n    import sys\n    sys.setrecursionlimit(1 << 25)\n    from math import gcd\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n+1)]\n    edges = []\n    maxL = 1\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            print(\"NO\")\n            return\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n        if l > maxL: maxL = l\n    # SPF sieve up to maxL\n    MAX = max(2, maxL)\n    spf = list(range(MAX+1))\n    for i in range(2, int(MAX**0.5)+1):\n        if spf[i] == i:\n            step = i\n            start = i*i\n            for j in range(start, MAX+1, step):\n                if spf[j] == j:\n                    spf[j] = i\n    def factorize(x):\n        res = {}\n        while x > 1:\n            p = spf[x]\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        return res\n    def divisors(x):\n        if x == 1:\n            return [1]\n        fac = factorize(x)\n        divs = [1]\n        for p, e in fac.items():\n            cur = []\n            powp = 1\n            for _ in range(e+1):\n                for d in divs:\n                    cur.append(d * powp)\n                powp *= p\n            divs = cur\n        return divs\n    val = [0]*(n+1)\n    visited = [False]*(n+1)\n    from collections import deque\n    for i in range(1, n+1):\n        if val[i] != 0 or not adj[i]:\n            if val[i] == 0 and not adj[i]:\n                val[i] = 1\n            continue\n        # find an edge in this component to start with minimal divisors\n        # gather component nodes to pick best starting edge\n        comp_nodes = []\n        q = deque([i])\n        seen = {i}\n        while q:\n            u = q.popleft()\n            comp_nodes.append(u)\n            for v,g,l in adj[u]:\n                if v not in seen:\n                    seen.add(v); q.append(v)\n        # pick edge among edges inside component with minimal divisors length\n        best_edge = None\n        best_divs = None\n        for u in comp_nodes:\n            for v,g,l in adj[u]:\n                if u < v:  # consider each undirected once\n                    ds = divisors(l)\n                    if best_divs is None or len(ds) < len(best_divs):\n                        best_divs = ds\n                        best_edge = (u,v,g,l)\n        # If somehow no edge found (shouldn't happen), set all nodes 1\n        if best_edge is None:\n            for u in comp_nodes:\n                val[u] = 1\n            continue\n        u0,v0,g0,l0 = best_edge\n        P0 = g0 * l0\n        ds = best_divs if best_divs is not None else divisors(l0)\n        ds.sort()\n        success = False\n        for d in ds:\n            if d % g0 != 0:\n                continue\n            if P0 % d != 0:\n                continue\n            other = P0 // d\n            if gcd(d, other) != g0:\n                continue\n            # attempt propagation starting with assigning u0=d and v0=other (or maybe the reverse)\n            for start_assign in ((u0,d),(v0,d)):  # try both orientations: assign start node one of the divisors\n                assigned = []\n                stack = [start_assign]\n                ok = True\n                while stack and ok:\n                    u,a_u = stack.pop()\n                    if val[u] != 0:\n                        if val[u] != a_u:\n                            ok = False\n                            break\n                        else:\n                            continue\n                    val[u] = a_u\n                    assigned.append(u)\n                    # propagate to neighbors\n                    for v,g,l in adj[u]:\n                        P = g * l\n                        if a_u == 0 or P % a_u != 0:\n                            ok = False; break\n                        a_v = P // a_u\n                        # quick checks: a_v must divide l (since a_v <= l) and be multiple of g\n                        # but product and gcd check suffice:\n                        if gcd(a_u, a_v) != g:\n                            ok = False; break\n                        if val[v] != 0:\n                            if val[v] != a_v:\n                                ok = False; break\n                        else:\n                            stack.append((v, a_v))\n                if ok:\n                    success = True\n                    break\n                else:\n                    # undo assigned\n                    for node in assigned:\n                        val[node] = 0\n            if success:\n                break\n        if not success:\n            print(\"NO\")\n            return\n    # final validation: check all edges satisfy constraints\n    for u,v,g,l in edges:\n        a = val[u]; b = val[v]\n        if a == 0 or b == 0:\n            print(\"NO\")\n            return\n        if gcd(a,b) != g:\n            print(\"NO\")\n            return\n        # lcm check: (a*b)//g == l\n        if (a//g)*b != l:\n            # compute lcm\n            from math import gcd as _g\n            if a*b//_g(a,b) != l:\n                print(\"NO\")\n                return\n            # else ok\n    print(\"YES\")\n    print(\" \".join(str(val[i]) for i in range(1, n+1)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 5629,
        "thoughts_token_count": 4288
    }
}