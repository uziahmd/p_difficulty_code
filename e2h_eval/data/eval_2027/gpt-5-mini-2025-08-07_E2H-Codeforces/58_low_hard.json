{
    "start": 1758284953.5855272,
    "end": 1758284991.5095084,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Analyzing graph components**\n\nIf u and v are in different components, adding one edge won't create an odd cycle, so it must be within the same component. I should compute the total possible pairs within the same color minus existing edges, making sure they’re not already connected. If the count is greater than zero, I set t=1 and w to the count. Otherwise, t will be 2 or 3, depending on component characteristics and sizes. It seems the solution involves bipartite graphs and isolated vertices.",
    "response": "```python\n#!/usr/bin/env python3\nimport sys\nfrom collections import deque, defaultdict\ndef readints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    g = [[] for _ in range(n)]\n    edgeset = [set() for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g[u].append(v); g[v].append(u)\n        edgeset[u].add(v); edgeset[v].add(u)\n\n    # Check existing odd cycle via BFS coloring\n    color = [-1]*n\n    has_odd = False\n    for i in range(n):\n        if color[i] != -1: continue\n        q = deque([i]); color[i]=0\n        while q:\n            u = q.popleft()\n            for v in g[u]:\n                if color[v]==-1:\n                    color[v]=color[u]^1\n                    q.append(v)\n                else:\n                    if color[v]==color[u]:\n                        has_odd = True\n                        break\n            if has_odd: break\n        if has_odd: break\n    if has_odd:\n        print(\"0 1\")\n        return\n\n    # Count components and sizes by color within each component\n    vis = [False]*n\n    comps = []\n    for i in range(n):\n        if vis[i]: continue\n        q = [i]; vis[i]=True\n        idx=0\n        while idx<len(q):\n            u=q[idx]; idx+=1\n            for v in g[u]:\n                if not vis[v]:\n                    vis[v]=True\n                    q.append(v)\n        comps.append(q)\n\n    # Count possible one-edge additions that create odd cycle:\n    # For a bipartite component, any pair of vertices in same color without existing edge will create odd cycle.\n    one_cnt = 0\n    for comp in comps:\n        cnt0 = cnt1 = 0\n        for v in comp:\n            if color[v]==0: cnt0+=1\n            else: cnt1+=1\n        # number of unordered pairs inside same color minus existing edges among them (none)\n        one_cnt += cnt0*(cnt0-1)//2\n        one_cnt += cnt1*(cnt1-1)//2\n    # But some of these pairs might already be edges? In bipartite graph there are no edges inside same color, so safe.\n\n    if one_cnt>0:\n        print(\"1 {}\".format(one_cnt))\n        return\n\n    # If no one-edge solutions, then each component must be either single vertex or single edge.\n    # Count isolated vertices and count 2-vertex components (edges).\n    isolated = 0\n    edge_comps = 0\n    for comp in comps:\n        if len(comp)==1:\n            isolated += 1\n        elif len(comp)==2:\n            # ensure they are connected by an edge\n            a,b = comp[0], comp[1]\n            if b in edgeset[a]:\n                edge_comps += 1\n            else:\n                # unexpected: 2-node not connected -> they'd be separate comps actually\n                isolated += 2\n        else:\n            # shouldn't happen if earlier logic held, but handle as fallback -> need 2 edges?\n            pass\n\n    if edge_comps>0 and isolated>0:\n        # pick an isolated vertex and an edge component; connect the isolated to both endpoints of the edge\n        ways = edge_comps * isolated\n        print(\"2 {}\".format(ways))\n        return\n\n    if isolated >= 3:\n        # choose any 3 isolated vertices to form triangle\n        ways = isolated*(isolated-1)*(isolated-2)//6\n        print(\"3 {}\".format(ways))\n        return\n\n    # Fallback: no ways (shouldn't happen often), print 3 0\n    print(\"3 0\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "#!/usr/bin/env python3\nimport sys\nfrom collections import deque, defaultdict\ndef readints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    g = [[] for _ in range(n)]\n    edgeset = [set() for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g[u].append(v); g[v].append(u)\n        edgeset[u].add(v); edgeset[v].add(u)\n\n    # Check existing odd cycle via BFS coloring\n    color = [-1]*n\n    has_odd = False\n    for i in range(n):\n        if color[i] != -1: continue\n        q = deque([i]); color[i]=0\n        while q:\n            u = q.popleft()\n            for v in g[u]:\n                if color[v]==-1:\n                    color[v]=color[u]^1\n                    q.append(v)\n                else:\n                    if color[v]==color[u]:\n                        has_odd = True\n                        break\n            if has_odd: break\n        if has_odd: break\n    if has_odd:\n        print(\"0 1\")\n        return\n\n    # Count components and sizes by color within each component\n    vis = [False]*n\n    comps = []\n    for i in range(n):\n        if vis[i]: continue\n        q = [i]; vis[i]=True\n        idx=0\n        while idx<len(q):\n            u=q[idx]; idx+=1\n            for v in g[u]:\n                if not vis[v]:\n                    vis[v]=True\n                    q.append(v)\n        comps.append(q)\n\n    # Count possible one-edge additions that create odd cycle:\n    # For a bipartite component, any pair of vertices in same color without existing edge will create odd cycle.\n    one_cnt = 0\n    for comp in comps:\n        cnt0 = cnt1 = 0\n        for v in comp:\n            if color[v]==0: cnt0+=1\n            else: cnt1+=1\n        # number of unordered pairs inside same color minus existing edges among them (none)\n        one_cnt += cnt0*(cnt0-1)//2\n        one_cnt += cnt1*(cnt1-1)//2\n    # But some of these pairs might already be edges? In bipartite graph there are no edges inside same color, so safe.\n\n    if one_cnt>0:\n        print(\"1 {}\".format(one_cnt))\n        return\n\n    # If no one-edge solutions, then each component must be either single vertex or single edge.\n    # Count isolated vertices and count 2-vertex components (edges).\n    isolated = 0\n    edge_comps = 0\n    for comp in comps:\n        if len(comp)==1:\n            isolated += 1\n        elif len(comp)==2:\n            # ensure they are connected by an edge\n            a,b = comp[0], comp[1]\n            if b in edgeset[a]:\n                edge_comps += 1\n            else:\n                # unexpected: 2-node not connected -> they'd be separate comps actually\n                isolated += 2\n        else:\n            # shouldn't happen if earlier logic held, but handle as fallback -> need 2 edges?\n            pass\n\n    if edge_comps>0 and isolated>0:\n        # pick an isolated vertex and an edge component; connect the isolated to both endpoints of the edge\n        ways = edge_comps * isolated\n        print(\"2 {}\".format(ways))\n        return\n\n    if isolated >= 3:\n        # choose any 3 isolated vertices to form triangle\n        ways = isolated*(isolated-1)*(isolated-2)//6\n        print(\"3 {}\".format(ways))\n        return\n\n    # Fallback: no ways (shouldn't happen often), print 3 0\n    print(\"3 0\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 568,
        "completion_token_count": 2745,
        "thoughts_token_count": 1856
    }
}