{
    "start": 1758290764.9641223,
    "end": 1758290875.0388465,
    "start-formatted": "2025-09-19 23:06 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Analyzing graph assignments**\n\nI'm looking at how to assign values to nodes based on their connected edges. The assignment must ensure there's consistency with either option 'a' or 'b'. However, choosing arbitrarily could lead to conflicts later on. If the graph behaves like a bipartite structure, I wonder if an arbitrary assignment might work—unless contradictions force specific choices. BFS could help detect these contradictions, and if found, maybe flipping the whole component could resolve the issue.",
    "response": "```unknown\nimport sys\nfrom collections import deque, defaultdict\n\ndef build_spf(n):\n    spf = list(range(n+1))\n    spf[0] = 0\n    if n >= 1:\n        spf[1] = 1\n    p = 2\n    while p*p <= n:\n        if spf[p] == p:\n            for q in range(p*p, n+1, p):\n                if spf[q] == q:\n                    spf[q] = p\n        p += 1\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        if p == 1:\n            break\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n    except StopIteration:\n        return\n    m = int(next(it))\n    edges = []\n    maxval = 0\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n    MAXA = max(1, maxval)\n    if MAXA < 1:\n        MAXA = 1\n    spf = build_spf(MAXA)\n    # Preliminary check l % g == 0\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # Build prime-specific constraints\n    primes_map = defaultdict(list)  # p -> list of (u,v,a,b)\n    for (u,v,g,l) in edges:\n        fg = factorize(g, spf) if g > 1 else {}\n        fl = factorize(l, spf) if l > 1 else {}\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            a = fg.get(p, 0)\n            b = fl.get(p, 0)\n            # a should be <= b, else impossible\n            if a > b:\n                print(\"NO\")\n                return\n            if a == 0 and b == 0:\n                continue\n            primes_map[p].append((u, v, a, b))\n    # For each prime, solve constraints\n    # store exponents per prime per node\n    exp_per_prime = {}  # p -> dict node->exp\n    for p, elist in primes_map.items():\n        adj = defaultdict(list)\n        nodes = set()\n        for (u,v,a,b) in elist:\n            nodes.add(u); nodes.add(v)\n            adj[u].append((v,a,b))\n            adj[v].append((u,a,b))\n        assigned = {}\n        visited = set()\n        # helper to attempt assignment for a component starting from an edge (u0,v0,a,b) with orientation\n        def attempt(start_u, start_v, start_ua, start_va, comp_nodes):\n            q = deque()\n            local = {}\n            local[start_u] = start_ua\n            local[start_v] = start_va\n            q.append(start_u)\n            q.append(start_v)\n            while q:\n                x = q.popleft()\n                xv = local[x]\n                for (y,a,b) in adj[x]:\n                    # required values for this edge are {a,b} (possibly equal)\n                    if a == b:\n                        # both must be a\n                        if xv != a:\n                            return None\n                        if y in local:\n                            if local[y] != a:\n                                return None\n                        else:\n                            local[y] = a\n                            q.append(y)\n                    else:\n                        # x's value must be a or b\n                        if xv != a and xv != b:\n                            return None\n                        target = b if xv == a else a\n                        if y in local:\n                            if local[y] != target:\n                                return None\n                        else:\n                            local[y] = target\n                            q.append(y)\n            # After propagation, ensure no conflicts with already assigned global 'assigned'\n            for node, val in local.items():\n                if node in assigned and assigned[node] != val:\n                    return None\n            return local\n\n        # process components\n        for node in list(nodes):\n            if node in visited:\n                continue\n            # collect component nodes (simple BFS ignoring values)\n            comp_q = deque([node])\n            comp_nodes = set([node])\n            visited.add(node)\n            while comp_q:\n                x = comp_q.popleft()\n                for (y,_,_) in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        comp_nodes.add(y)\n                        comp_q.append(y)\n            # find an edge inside this component to start\n            start_edge = None\n            for x in comp_nodes:\n                if adj[x]:\n                    start_edge = (x, adj[x][0])  # (u, (v,a,b))\n                    break\n            if start_edge is None:\n                # isolated node? shouldn't happen as nodes built from edges\n                continue\n            u0 = start_edge[0]\n            v0, a0, b0 = start_edge[1]\n            # Try two orientations\n            success_local = None\n            # But there might be nodes already globally assigned in this component; we should incorporate them\n            if u0 in assigned or v0 in assigned:\n                # If either already assigned, we need to try orientations consistent with assigned\n                options = []\n                if u0 in assigned:\n                    ua = assigned[u0]\n                    # ua must be either a0 or b0\n                    if ua == a0:\n                        options.append((u0, v0, a0, b0))\n                    if ua == b0:\n                        options.append((u0, v0, b0, a0))\n                elif v0 in assigned:\n                    va = assigned[v0]\n                    if va == a0:\n                        options.append((v0, u0, a0, b0))\n                    if va == b0:\n                        options.append((v0, u0, b0, a0))\n                else:\n                    options = [(u0,v0,a0,b0),(u0,v0,b0,a0)]\n                for (su, sv, sva, svb) in options:\n                    res = attempt(su, sv, sva, svb, comp_nodes)\n                    if res is not None:\n                        success_local = res\n                        break\n            else:\n                # try both orientations\n                res = attempt(u0, v0, a0, b0, comp_nodes)\n                if res is None:\n                    res = attempt(u0, v0, b0, a0, comp_nodes)\n                success_local = res\n            if success_local is None:\n                print(\"NO\")\n                return\n            # commit success_local into assigned for this prime\n            for nd, val in success_local.items():\n                assigned[nd] = val\n        # For nodes that were not in 'nodes' set but maybe should be 0? We only care nodes in nodes set.\n        exp_per_prime[p] = assigned\n    # Build final numbers\n    res = [1]*n\n    for p, assign in exp_per_prime.items():\n        for node, e in assign.items():\n            if e > 0:\n                res[node] *= pow(p, e)\n    # Nodes not present remain 1\n    # Validate edges\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(res[u], res[v])\n        luv = (res[u]//guv) * res[v]\n        if guv != g or luv != l:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\nimport sys\nfrom collections import deque, defaultdict\n\ndef build_spf(n):\n    spf = list(range(n+1))\n    spf[0] = 0\n    if n >= 1:\n        spf[1] = 1\n    p = 2\n    while p*p <= n:\n        if spf[p] == p:\n            for q in range(p*p, n+1, p):\n                if spf[q] == q:\n                    spf[q] = p\n        p += 1\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        if p == 1:\n            break\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n    except StopIteration:\n        return\n    m = int(next(it))\n    edges = []\n    maxval = 0\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n    MAXA = max(1, maxval)\n    if MAXA < 1:\n        MAXA = 1\n    spf = build_spf(MAXA)\n    # Preliminary check l % g == 0\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # Build prime-specific constraints\n    primes_map = defaultdict(list)  # p -> list of (u,v,a,b)\n    for (u,v,g,l) in edges:\n        fg = factorize(g, spf) if g > 1 else {}\n        fl = factorize(l, spf) if l > 1 else {}\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            a = fg.get(p, 0)\n            b = fl.get(p, 0)\n            # a should be <= b, else impossible\n            if a > b:\n                print(\"NO\")\n                return\n            if a == 0 and b == 0:\n                continue\n            primes_map[p].append((u, v, a, b))\n    # For each prime, solve constraints\n    # store exponents per prime per node\n    exp_per_prime = {}  # p -> dict node->exp\n    for p, elist in primes_map.items():\n        adj = defaultdict(list)\n        nodes = set()\n        for (u,v,a,b) in elist:\n            nodes.add(u); nodes.add(v)\n            adj[u].append((v,a,b))\n            adj[v].append((u,a,b))\n        assigned = {}\n        visited = set()\n        # helper to attempt assignment for a component starting from an edge (u0,v0,a,b) with orientation\n        def attempt(start_u, start_v, start_ua, start_va, comp_nodes):\n            q = deque()\n            local = {}\n            local[start_u] = start_ua\n            local[start_v] = start_va\n            q.append(start_u)\n            q.append(start_v)\n            while q:\n                x = q.popleft()\n                xv = local[x]\n                for (y,a,b) in adj[x]:\n                    # required values for this edge are {a,b} (possibly equal)\n                    if a == b:\n                        # both must be a\n                        if xv != a:\n                            return None\n                        if y in local:\n                            if local[y] != a:\n                                return None\n                        else:\n                            local[y] = a\n                            q.append(y)\n                    else:\n                        # x's value must be a or b\n                        if xv != a and xv != b:\n                            return None\n                        target = b if xv == a else a\n                        if y in local:\n                            if local[y] != target:\n                                return None\n                        else:\n                            local[y] = target\n                            q.append(y)\n            # After propagation, ensure no conflicts with already assigned global 'assigned'\n            for node, val in local.items():\n                if node in assigned and assigned[node] != val:\n                    return None\n            return local\n\n        # process components\n        for node in list(nodes):\n            if node in visited:\n                continue\n            # collect component nodes (simple BFS ignoring values)\n            comp_q = deque([node])\n            comp_nodes = set([node])\n            visited.add(node)\n            while comp_q:\n                x = comp_q.popleft()\n                for (y,_,_) in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        comp_nodes.add(y)\n                        comp_q.append(y)\n            # find an edge inside this component to start\n            start_edge = None\n            for x in comp_nodes:\n                if adj[x]:\n                    start_edge = (x, adj[x][0])  # (u, (v,a,b))\n                    break\n            if start_edge is None:\n                # isolated node? shouldn't happen as nodes built from edges\n                continue\n            u0 = start_edge[0]\n            v0, a0, b0 = start_edge[1]\n            # Try two orientations\n            success_local = None\n            # But there might be nodes already globally assigned in this component; we should incorporate them\n            if u0 in assigned or v0 in assigned:\n                # If either already assigned, we need to try orientations consistent with assigned\n                options = []\n                if u0 in assigned:\n                    ua = assigned[u0]\n                    # ua must be either a0 or b0\n                    if ua == a0:\n                        options.append((u0, v0, a0, b0))\n                    if ua == b0:\n                        options.append((u0, v0, b0, a0))\n                elif v0 in assigned:\n                    va = assigned[v0]\n                    if va == a0:\n                        options.append((v0, u0, a0, b0))\n                    if va == b0:\n                        options.append((v0, u0, b0, a0))\n                else:\n                    options = [(u0,v0,a0,b0),(u0,v0,b0,a0)]\n                for (su, sv, sva, svb) in options:\n                    res = attempt(su, sv, sva, svb, comp_nodes)\n                    if res is not None:\n                        success_local = res\n                        break\n            else:\n                # try both orientations\n                res = attempt(u0, v0, a0, b0, comp_nodes)\n                if res is None:\n                    res = attempt(u0, v0, b0, a0, comp_nodes)\n                success_local = res\n            if success_local is None:\n                print(\"NO\")\n                return\n            # commit success_local into assigned for this prime\n            for nd, val in success_local.items():\n                assigned[nd] = val\n        # For nodes that were not in 'nodes' set but maybe should be 0? We only care nodes in nodes set.\n        exp_per_prime[p] = assigned\n    # Build final numbers\n    res = [1]*n\n    for p, assign in exp_per_prime.items():\n        for node, e in assign.items():\n            if e > 0:\n                res[node] *= pow(p, e)\n    # Nodes not present remain 1\n    # Validate edges\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(res[u], res[v])\n        luv = (res[u]//guv) * res[v]\n        if guv != g or luv != l:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 6682,
        "thoughts_token_count": 4928
    }
}