{
    "start": 1758290732.3020654,
    "end": 1758290861.1048355,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Analyzing prime factorization constraints**\n\nI'm considering the prime factorization of x. For each prime p raised to an exponent e, I need to assign e to either s_u or s_v. This creates constraints between nodes that resemble a parity assignment, depending on edges and non-zero exponents. I think a better approach is to build graph edges with a specific weighting scheme. By selecting a node in each connected component, I can deduce neighbor values based on the gcd and lcm conditions.",
    "response": "import sys\nfrom collections import defaultdict, deque\nimport math\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nedges = []\nmaxval = 1\nfor _ in range(m):\n    u = next(it) - 1\n    v = next(it) - 1\n    g = next(it)\n    l = next(it)\n    edges.append((u, v, g, l))\n    if g > maxval: maxval = g\n    if l > maxval: maxval = l\n\nfor (_, _, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Sieve smallest prime factor up to maxval\nN = max(2, maxval)\nspf = list(range(N+1))\nfor i in range(2, int(N**0.5)+1):\n    if spf[i] == i:\n        step = i\n        start = i*i\n        for j in range(start, N+1, step):\n            if spf[j] == j:\n                spf[j] = i\n\ndef factorize(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        c = 0\n        while x % p == 0:\n            x //= p\n            c += 1\n        res[p] = c\n    return res\n\n# Build per-prime edge lists\nedges_by_prime = defaultdict(list)\nfor idx, (u, v, g, l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        a = fg.get(p, 0)\n        b = fl.get(p, 0)\n        edges_by_prime[p].append((u, v, a, b))\n\n# Store exponents per node per prime\nexp_per_node = defaultdict(dict)\n\nfor p, eds in edges_by_prime.items():\n    adj = defaultdict(list)\n    nodes = set()\n    for (u, v, a, b) in eds:\n        adj[u].append((v, a, b))\n        adj[v].append((u, a, b))\n        nodes.add(u); nodes.add(v)\n    allowed = {}\n    for node in nodes:\n        allowed[node] = None\n    # compute allowed sets as intersection across incident edges\n    for u in nodes:\n        for (v, a, b) in adj[u]:\n            s = {a, b}\n            if allowed[u] is None:\n                allowed[u] = set(s)\n            else:\n                allowed[u] &= s\n        if not allowed[u]:\n            print(\"NO\")\n            sys.exit(0)\n    assigned = {}\n    q = deque()\n    for node in list(nodes):\n        if len(allowed[node]) == 1:\n            val = next(iter(allowed[node]))\n            assigned[node] = val\n            q.append(node)\n    # propagate forced assignments\n    while q:\n        u = q.popleft()\n        val_u = assigned[u]\n        for (v, a, b) in adj[u]:\n            need = a + b - val_u\n            if need not in allowed[v]:\n                print(\"NO\")\n                sys.exit(0)\n            if v in assigned:\n                if assigned[v] != need:\n                    print(\"NO\")\n                    sys.exit(0)\n            else:\n                assigned[v] = need\n                q.append(v)\n    # handle remaining unassigned components\n    unassigned_nodes = [node for node in nodes if node not in assigned]\n    visited_global = set()\n    for node in unassigned_nodes:\n        if node in visited_global:\n            continue\n        # collect component\n        comp_nodes = []\n        dq = deque([node])\n        visited_global.add(node)\n        while dq:\n            x = dq.popleft()\n            comp_nodes.append(x)\n            for (y, a, b) in adj[x]:\n                if y not in visited_global:\n                    visited_global.add(y)\n                    dq.append(y)\n        # try two possibilities starting from arbitrary node in comp\n        start = comp_nodes[0]\n        vals = list(allowed[start])\n        success = False\n        for start_val in vals:\n            temp_assign = {}\n            q2 = deque()\n            temp_assign[start] = start_val\n            q2.append(start)\n            ok = True\n            while q2 and ok:\n                u2 = q2.popleft()\n                val_u2 = temp_assign[u2]\n                for (v2, a2, b2) in adj[u2]:\n                    need2 = a2 + b2 - val_u2\n                    if need2 not in allowed[v2]:\n                        ok = False\n                        break\n                    if v2 in temp_assign:\n                        if temp_assign[v2] != need2:\n                            ok = False\n                            break\n                    else:\n                        # if already globally assigned, must match\n                        if v2 in assigned:\n                            if assigned[v2] != need2:\n                                ok = False\n                                break\n                            else:\n                                continue\n                        temp_assign[v2] = need2\n                        q2.append(v2)\n            if ok:\n                # commit temp_assign into assigned\n                for k, vval in temp_assign.items():\n                    assigned[k] = vval\n                success = True\n                break\n        if not success:\n            print(\"NO\")\n            sys.exit(0)\n    # commit exponents\n    for node, val in assigned.items():\n        exp_per_node[node][p] = val\n\n# Build final a_i\nres = [1]*n\nfor node, mp in exp_per_node.items():\n    val = 1\n    for p, e in mp.items():\n        if e:\n            val *= pow(p, e)\n    res[node] = val\n\n# nodes without primes remain 1; but must also be multiple of g on edges: verify final answers\nfor idx, (u, v, g, l) in enumerate(edges):\n    au = res[u]\n    av = res[v]\n    gg = math.gcd(au, av)\n    if gg != g:\n        print(\"NO\")\n        sys.exit(0)\n    # compute lcm carefully\n    if au == 0 or av == 0:\n        print(\"NO\")\n        sys.exit(0)\n    lcm = au // gg * av\n    if lcm != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\nimport math\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nedges = []\nmaxval = 1\nfor _ in range(m):\n    u = next(it) - 1\n    v = next(it) - 1\n    g = next(it)\n    l = next(it)\n    edges.append((u, v, g, l))\n    if g > maxval: maxval = g\n    if l > maxval: maxval = l\n\nfor (_, _, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Sieve smallest prime factor up to maxval\nN = max(2, maxval)\nspf = list(range(N+1))\nfor i in range(2, int(N**0.5)+1):\n    if spf[i] == i:\n        step = i\n        start = i*i\n        for j in range(start, N+1, step):\n            if spf[j] == j:\n                spf[j] = i\n\ndef factorize(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        c = 0\n        while x % p == 0:\n            x //= p\n            c += 1\n        res[p] = c\n    return res\n\n# Build per-prime edge lists\nedges_by_prime = defaultdict(list)\nfor idx, (u, v, g, l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        a = fg.get(p, 0)\n        b = fl.get(p, 0)\n        edges_by_prime[p].append((u, v, a, b))\n\n# Store exponents per node per prime\nexp_per_node = defaultdict(dict)\n\nfor p, eds in edges_by_prime.items():\n    adj = defaultdict(list)\n    nodes = set()\n    for (u, v, a, b) in eds:\n        adj[u].append((v, a, b))\n        adj[v].append((u, a, b))\n        nodes.add(u); nodes.add(v)\n    allowed = {}\n    for node in nodes:\n        allowed[node] = None\n    # compute allowed sets as intersection across incident edges\n    for u in nodes:\n        for (v, a, b) in adj[u]:\n            s = {a, b}\n            if allowed[u] is None:\n                allowed[u] = set(s)\n            else:\n                allowed[u] &= s\n        if not allowed[u]:\n            print(\"NO\")\n            sys.exit(0)\n    assigned = {}\n    q = deque()\n    for node in list(nodes):\n        if len(allowed[node]) == 1:\n            val = next(iter(allowed[node]))\n            assigned[node] = val\n            q.append(node)\n    # propagate forced assignments\n    while q:\n        u = q.popleft()\n        val_u = assigned[u]\n        for (v, a, b) in adj[u]:\n            need = a + b - val_u\n            if need not in allowed[v]:\n                print(\"NO\")\n                sys.exit(0)\n            if v in assigned:\n                if assigned[v] != need:\n                    print(\"NO\")\n                    sys.exit(0)\n            else:\n                assigned[v] = need\n                q.append(v)\n    # handle remaining unassigned components\n    unassigned_nodes = [node for node in nodes if node not in assigned]\n    visited_global = set()\n    for node in unassigned_nodes:\n        if node in visited_global:\n            continue\n        # collect component\n        comp_nodes = []\n        dq = deque([node])\n        visited_global.add(node)\n        while dq:\n            x = dq.popleft()\n            comp_nodes.append(x)\n            for (y, a, b) in adj[x]:\n                if y not in visited_global:\n                    visited_global.add(y)\n                    dq.append(y)\n        # try two possibilities starting from arbitrary node in comp\n        start = comp_nodes[0]\n        vals = list(allowed[start])\n        success = False\n        for start_val in vals:\n            temp_assign = {}\n            q2 = deque()\n            temp_assign[start] = start_val\n            q2.append(start)\n            ok = True\n            while q2 and ok:\n                u2 = q2.popleft()\n                val_u2 = temp_assign[u2]\n                for (v2, a2, b2) in adj[u2]:\n                    need2 = a2 + b2 - val_u2\n                    if need2 not in allowed[v2]:\n                        ok = False\n                        break\n                    if v2 in temp_assign:\n                        if temp_assign[v2] != need2:\n                            ok = False\n                            break\n                    else:\n                        # if already globally assigned, must match\n                        if v2 in assigned:\n                            if assigned[v2] != need2:\n                                ok = False\n                                break\n                            else:\n                                continue\n                        temp_assign[v2] = need2\n                        q2.append(v2)\n            if ok:\n                # commit temp_assign into assigned\n                for k, vval in temp_assign.items():\n                    assigned[k] = vval\n                success = True\n                break\n        if not success:\n            print(\"NO\")\n            sys.exit(0)\n    # commit exponents\n    for node, val in assigned.items():\n        exp_per_node[node][p] = val\n\n# Build final a_i\nres = [1]*n\nfor node, mp in exp_per_node.items():\n    val = 1\n    for p, e in mp.items():\n        if e:\n            val *= pow(p, e)\n    res[node] = val\n\n# nodes without primes remain 1; but must also be multiple of g on edges: verify final answers\nfor idx, (u, v, g, l) in enumerate(edges):\n    au = res[u]\n    av = res[v]\n    gg = math.gcd(au, av)\n    if gg != g:\n        print(\"NO\")\n        sys.exit(0)\n    # compute lcm carefully\n    if au == 0 or av == 0:\n        print(\"NO\")\n        sys.exit(0)\n    lcm = au // gg * av\n    if lcm != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 6207,
        "thoughts_token_count": 4800
    }
}