{
    "start": 1758294637.9769304,
    "end": 1758294658.4257329,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\n\nMOD = 1000000007\n\ndef precompute_factorials(maxn):\n    fact = [1] * (maxn + 1)\n    invfact = [1] * (maxn + 1)\n    for i in range(1, maxn + 1):\n        fact[i] = fact[i-1] * i % MOD\n    invfact[maxn] = pow(fact[maxn], MOD-2, MOD)\n    for i in range(maxn, 0, -1):\n        invfact[i-1] = invfact[i] * i % MOD\n    return fact, invfact\n\ndef comb(n, k, fact, invfact):\n    if k < 0 or k > n: return 0\n    return fact[n] * invfact[k] % MOD * invfact[n-k] % MOD\n\ndef solve_single(n, m, g, fact, invfact):\n    # total characters n zeros, m ones\n    # If g==1 then need final character 1 possible only if m==0 -> impossible\n    # Known condition: final g==1 only possible when m==0 and n%2==1 ? Actually need derive:\n    # Use parity invariant: operation on last two: (00)->1 increases ones by1 and decreases zeros by2\n    # other pairs (01,10,11)->0: zeros+1, ones-1 or ones-2 respectively.\n    # Equivalently total length reduces by1 each op. Final single char equals g.\n    # Standard solution: Count strings where you can reduce to g.\n    # For g==1: must be reachable only when m==0 and n%2==1? Known CF problem answer:\n    # Use formulation: You can pair adjacent elements; final g==1 iff number of ones equals 0 and n%2==1? \n    # But better use known result: count = C(n+m-1, n-1) if g==0, else C(n+m-1, m-1) with special cases?\n    # Actually correct solution from CF 336A? Real known: Vasily the Bear and Beautiful Strings is CF 336B? \n    # After checking logic: The operation is like reducing string by replacing last two x,y -> z where z = 1 if x=y=0 else 0.\n    # It's equivalent to evaluate a binary operation; final depends only on entire string sequence; the condition for final g is:\n    # If g==1 then m==0 and n%2==1? But examples: n=1 m=1 g=0 -> answer 2. n=2 m=2 g=0 ->4. n=1 m=1 g=1 ->0.\n    # Known correct formula: number of strings reducing to 0 = C(n+m, n) - C(n+m, n-1) ??? This is getting long.\n    pass\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    it = iter(data)\n    out = []\n    maxnm = 0\n    triples = []\n    while True:\n        try:\n            n = int(next(it))\n            m = int(next(it))\n            g = int(next(it))\n            triples.append((n,m,g))\n            maxnm = max(maxnm, n+m)\n        except StopIteration:\n            break\n    fact, invfact = precompute_factorials(maxnm+5)\n    # Implement known correct solution:\n    # After consulting memory: The final character equals 1 iff the number of ones m is odd and n==0? Uncertain.\n    # Actually this is CF 336D? Running out of time — provide brute force for small sizes? But constraints up to 1e5.\n    # Sorry: cannot complete reliably here.\n    for _ in triples:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n```text\nNote: The above is an incomplete attempt. Replace with a correct implementation before running.\n```",
    "ground_truth": "N/A",
    "extracted_answer": "text\nNote: The above is an incomplete attempt. Replace with a correct implementation before running.",
    "score": -1,
    "metadata": {
        "prompt_token_count": 488,
        "completion_token_count": 859,
        "thoughts_token_count": 0
    }
}