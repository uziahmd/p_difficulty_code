{
    "start": 1758284938.5184286,
    "end": 1758284988.517698,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Exploring exponent handling**\n\nI’m considering the global domain because exponent values can vary widely. Earlier, I thought there were only two possible exponents per edge, but there are actually many distinct exponents across edges. For each edge between nodes u and v, the minimum and maximum exponents must align with specific numbers. This means that exponents must meet multiple constraints, making things complex. A simpler approach might be to assign node values by solving a system of equations, using common divisors.",
    "response": "import sys\nimport math\nfrom collections import deque\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\n\ndef divisors(x):\n    res = []\n    i = 1\n    while i*i <= x:\n        if x % i == 0:\n            res.append(i)\n            if i*i != x:\n                res.append(x//i)\n        i += 1\n    return res\n\nout_lines = []\n\nwhile True:\n    try:\n        n = int(next(it))\n    except StopIteration:\n        break\n    m = int(next(it))\n    edges = []\n    adj = [[] for _ in range(n)]\n    ok = True\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        adj[u].append(len(edges)-1)\n        adj[v].append(len(edges)-1)\n        if l % g != 0:\n            ok = False\n    if not ok:\n        out_lines.append(\"NO\")\n        # consume any remaining? continue to next case\n        # But must still skip processing edges already read. We already read them.\n        # Continue to next case\n        continue\n\n    assigned = [0]*n\n    used_edge = [False]*m\n    possible = True\n\n    for i in range(n):\n        if assigned[i] != 0:\n            continue\n        # find if node in any edge\n        if not adj[i]:\n            assigned[i] = 1\n            continue\n        # gather component nodes and edges via BFS\n        q = deque([i])\n        comp_nodes = []\n        comp_edges_idx = set()\n        vis = {i}\n        while q:\n            u = q.popleft()\n            comp_nodes.append(u)\n            for ei in adj[u]:\n                comp_edges_idx.add(ei)\n                u2,v2,g2,l2 = edges[ei]\n                other = v2 if u==u2 else u2\n                if other not in vis:\n                    vis.add(other)\n                    q.append(other)\n        comp_edges_idx = list(comp_edges_idx)\n        # pick an edge to generate candidates\n        ei0 = comp_edges_idx[0]\n        u0,v0,g0,l0 = edges[ei0]\n        success = False\n        # try divisors of l0 that are multiples of g0\n        for d in divisors(l0):\n            if d % g0 != 0:\n                continue\n            # try assign node u0 = d\n            assign = dict()\n            ok_assign = True\n            assign[u0] = d\n            q2 = deque([u0])\n            while q2 and ok_assign:\n                u = q2.popleft()\n                for ei in adj[u]:\n                    uu,vv,g,l = edges[ei]\n                    other = vv if u==uu else uu\n                    av = assign[u]\n                    if (g*l) % av != 0:\n                        ok_assign = False\n                        break\n                    other_val = (g*l)//av\n                    # verify gcd/lcm for the pair\n                    if math.gcd(av, other_val) != g or (av*other_val)//math.gcd(av, other_val) != l:\n                        ok_assign = False\n                        break\n                    if other in assign:\n                        if assign[other] != other_val:\n                            ok_assign = False\n                            break\n                    else:\n                        assign[other] = other_val\n                        q2.append(other)\n            if not ok_assign:\n                continue\n            # ensure all nodes in component assigned (they should be)\n            if len(assign) != len(comp_nodes):\n                continue\n            # ensure values <= 10^6 (per problem original limit)\n            valid_range = True\n            for val in assign.values():\n                if val < 1 or val > 10**6:\n                    valid_range = False\n                    break\n            if not valid_range:\n                continue\n            # success, copy to assigned\n            for node, val in assign.items():\n                assigned[node] = val\n            success = True\n            break\n        if not success:\n            possible = False\n            break\n\n    if not possible:\n        out_lines.append(\"NO\")\n        continue\n\n    # final validation over all edges\n    valid = True\n    for (u,v,g,l) in edges:\n        au = assigned[u]\n        av = assigned[v]\n        if math.gcd(au,av) != g or (au*av)//math.gcd(au,av) != l:\n            valid = False\n            break\n    if not valid:\n        out_lines.append(\"NO\")\n    else:\n        out_lines.append(\"YES\")\n        out_lines.append(\" \".join(str(x) for x in assigned))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import deque\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\n\ndef divisors(x):\n    res = []\n    i = 1\n    while i*i <= x:\n        if x % i == 0:\n            res.append(i)\n            if i*i != x:\n                res.append(x//i)\n        i += 1\n    return res\n\nout_lines = []\n\nwhile True:\n    try:\n        n = int(next(it))\n    except StopIteration:\n        break\n    m = int(next(it))\n    edges = []\n    adj = [[] for _ in range(n)]\n    ok = True\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        adj[u].append(len(edges)-1)\n        adj[v].append(len(edges)-1)\n        if l % g != 0:\n            ok = False\n    if not ok:\n        out_lines.append(\"NO\")\n        # consume any remaining? continue to next case\n        # But must still skip processing edges already read. We already read them.\n        # Continue to next case\n        continue\n\n    assigned = [0]*n\n    used_edge = [False]*m\n    possible = True\n\n    for i in range(n):\n        if assigned[i] != 0:\n            continue\n        # find if node in any edge\n        if not adj[i]:\n            assigned[i] = 1\n            continue\n        # gather component nodes and edges via BFS\n        q = deque([i])\n        comp_nodes = []\n        comp_edges_idx = set()\n        vis = {i}\n        while q:\n            u = q.popleft()\n            comp_nodes.append(u)\n            for ei in adj[u]:\n                comp_edges_idx.add(ei)\n                u2,v2,g2,l2 = edges[ei]\n                other = v2 if u==u2 else u2\n                if other not in vis:\n                    vis.add(other)\n                    q.append(other)\n        comp_edges_idx = list(comp_edges_idx)\n        # pick an edge to generate candidates\n        ei0 = comp_edges_idx[0]\n        u0,v0,g0,l0 = edges[ei0]\n        success = False\n        # try divisors of l0 that are multiples of g0\n        for d in divisors(l0):\n            if d % g0 != 0:\n                continue\n            # try assign node u0 = d\n            assign = dict()\n            ok_assign = True\n            assign[u0] = d\n            q2 = deque([u0])\n            while q2 and ok_assign:\n                u = q2.popleft()\n                for ei in adj[u]:\n                    uu,vv,g,l = edges[ei]\n                    other = vv if u==uu else uu\n                    av = assign[u]\n                    if (g*l) % av != 0:\n                        ok_assign = False\n                        break\n                    other_val = (g*l)//av\n                    # verify gcd/lcm for the pair\n                    if math.gcd(av, other_val) != g or (av*other_val)//math.gcd(av, other_val) != l:\n                        ok_assign = False\n                        break\n                    if other in assign:\n                        if assign[other] != other_val:\n                            ok_assign = False\n                            break\n                    else:\n                        assign[other] = other_val\n                        q2.append(other)\n            if not ok_assign:\n                continue\n            # ensure all nodes in component assigned (they should be)\n            if len(assign) != len(comp_nodes):\n                continue\n            # ensure values <= 10^6 (per problem original limit)\n            valid_range = True\n            for val in assign.values():\n                if val < 1 or val > 10**6:\n                    valid_range = False\n                    break\n            if not valid_range:\n                continue\n            # success, copy to assigned\n            for node, val in assign.items():\n                assigned[node] = val\n            success = True\n            break\n        if not success:\n            possible = False\n            break\n\n    if not possible:\n        out_lines.append(\"NO\")\n        continue\n\n    # final validation over all edges\n    valid = True\n    for (u,v,g,l) in edges:\n        au = assigned[u]\n        av = assigned[v]\n        if math.gcd(au,av) != g or (au*av)//math.gcd(au,av) != l:\n            valid = False\n            break\n    if not valid:\n        out_lines.append(\"NO\")\n    else:\n        out_lines.append(\"YES\")\n        out_lines.append(\" \".join(str(x) for x in assigned))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 2833,
        "thoughts_token_count": 1792
    }
}