{
    "start": 1758294603.086709,
    "end": 1758294622.3118176,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\n\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = [[] for _ in range(n)]\n    edge_list = []\n    ok = True\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edge_list.append((u,v,g,l))\n        if l % g != 0:\n            ok = False\n        edges[u].append((v,g,l))\n        edges[v].append((u,g,l))\n    if not ok:\n        print(\"NO\")\n        return\n    from math import gcd\n    comp = [-1]*n\n    comps = []\n    for i in range(n):\n        if comp[i]!=-1: continue\n        stack=[i]; comp[i]=len(comps); verts=[i]\n        while stack:\n            x=stack.pop()\n            for y,_,_ in edges[x]:\n                if comp[y]==-1:\n                    comp[y]=comp[x]; stack.append(y); verts.append(y)\n        comps.append(verts)\n    res = [0]*n\n    for cid, verts in enumerate(comps):\n        # build constraints: for edge u-v with g,l, let a_u = g * x_u, a_v = g * x_v where x_u * x_v = l/g = t\n        # More general: a_u must divide l and be multiple of g, and a_u * a_v = g * l\n        # We'll attempt to assign by prime factor propagation using ratios.\n        # Represent values as rational multiples of a base integer using prime-free approach:\n        # Use BFS, assign value as fraction p/q times some base. Instead we can assign numbers up to 1e6 by choosing base from constraints.\n        from collections import deque\n        val = dict()\n        start = verts[0]\n        val[start]=1\n        q=deque([start])\n        possible = True\n        while q and possible:\n            x=q.popleft()\n            for y,g,l in edges[x]:\n                t = l//g\n                # val[x] corresponds to a_x = g * val[x]\n                # need val[y] such that (g*val[x])*(g*val[y]) = g*l => val[y] = t // val[x]\n                if (t % val[x])!=0:\n                    possible=False; break\n                need = t//val[x]\n                if y in val:\n                    if val[y]!=need:\n                        possible=False; break\n                else:\n                    val[y]=need\n                    q.append(y)\n        if not possible:\n            print(\"NO\"); return\n        # Now we have val mapping where a_v = g_edge * val[v] may differ per edge g; need to find integer scale s so that for every node its final a = val[node]*k[node] * something consistent with g's\n        # We can compute for each node its required gcd factor across incident edges: For edge u-v with g,l, require a_u divisible by g and a_v divisible by g and a_u * a_v = g*l\n        # Given current val assignments satisfy val[u]*val[v]=t for each edge (t=l/g). So pick for each node a multiplier mul[node] so that a_node = val[node]*mul[node] and for each edge g divides both a_u and a_v and a_u * a_v = g*l = g*g*val[u]*val[v]\n        # That implies mul[u]*mul[v] = g*g\n        mul = dict()\n        # For each edge between assigned nodes, set mul relationships: mul[u]*mul[v] = g*g\n        edges_local = []\n        for u,v,g,l in edge_list:\n            if comp[u]==cid:\n                edges_local.append((u,v,g))\n        # Build graph of multipliers\n        mul_graph = {}\n        for u,v,g in edges_local:\n            mul_graph.setdefault(u,[]).append((v,g))\n            mul_graph.setdefault(v,[]).append((u,g))\n        # BFS assign mul as integers by factoring g*g; we can set mul to gcd with g patterns: set mul[start] = g0 where choose arbitrary? We'll set mul[start]=1 and propagate requiring mul[v]=g*g//mul[u]\n        mval = {}\n        root = start\n        mval[root]=1\n        dq=deque([root])\n        poss = True\n        while dq and poss:\n            x=dq.popleft()\n            for y,g in mul_graph.get(x,()):\n                need = (g*g)//mval[x]\n                if (g*g) % mval[x]!=0:\n                    poss=False; break\n                if y in mval:\n                    if mval[y]!=need:\n                        poss=False; break\n                else:\n                    mval[y]=need; dq.append(y)\n        if not poss:\n            print(\"NO\"); return\n        # Now compute final a[node] = val[node]*mval[node]; but must be divisible by all g on incident edges; also product condition holds.\n        for node in verts:\n            mv = mval.get(node,1)\n            a = val[node]*mv\n            if a<1 or a>10**18:\n                print(\"NO\"); return\n            res[node]=a\n        # Verify constraints within component\n        for u,v,g,l in edges_local:\n            if not (gcd(res[u],res[v])==g and (res[u]*res[v]//gcd(res[u],res[v])==l)):\n                print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(int(x)) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\n\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = [[] for _ in range(n)]\n    edge_list = []\n    ok = True\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edge_list.append((u,v,g,l))\n        if l % g != 0:\n            ok = False\n        edges[u].append((v,g,l))\n        edges[v].append((u,g,l))\n    if not ok:\n        print(\"NO\")\n        return\n    from math import gcd\n    comp = [-1]*n\n    comps = []\n    for i in range(n):\n        if comp[i]!=-1: continue\n        stack=[i]; comp[i]=len(comps); verts=[i]\n        while stack:\n            x=stack.pop()\n            for y,_,_ in edges[x]:\n                if comp[y]==-1:\n                    comp[y]=comp[x]; stack.append(y); verts.append(y)\n        comps.append(verts)\n    res = [0]*n\n    for cid, verts in enumerate(comps):\n        # build constraints: for edge u-v with g,l, let a_u = g * x_u, a_v = g * x_v where x_u * x_v = l/g = t\n        # More general: a_u must divide l and be multiple of g, and a_u * a_v = g * l\n        # We'll attempt to assign by prime factor propagation using ratios.\n        # Represent values as rational multiples of a base integer using prime-free approach:\n        # Use BFS, assign value as fraction p/q times some base. Instead we can assign numbers up to 1e6 by choosing base from constraints.\n        from collections import deque\n        val = dict()\n        start = verts[0]\n        val[start]=1\n        q=deque([start])\n        possible = True\n        while q and possible:\n            x=q.popleft()\n            for y,g,l in edges[x]:\n                t = l//g\n                # val[x] corresponds to a_x = g * val[x]\n                # need val[y] such that (g*val[x])*(g*val[y]) = g*l => val[y] = t // val[x]\n                if (t % val[x])!=0:\n                    possible=False; break\n                need = t//val[x]\n                if y in val:\n                    if val[y]!=need:\n                        possible=False; break\n                else:\n                    val[y]=need\n                    q.append(y)\n        if not possible:\n            print(\"NO\"); return\n        # Now we have val mapping where a_v = g_edge * val[v] may differ per edge g; need to find integer scale s so that for every node its final a = val[node]*k[node] * something consistent with g's\n        # We can compute for each node its required gcd factor across incident edges: For edge u-v with g,l, require a_u divisible by g and a_v divisible by g and a_u * a_v = g*l\n        # Given current val assignments satisfy val[u]*val[v]=t for each edge (t=l/g). So pick for each node a multiplier mul[node] so that a_node = val[node]*mul[node] and for each edge g divides both a_u and a_v and a_u * a_v = g*l = g*g*val[u]*val[v]\n        # That implies mul[u]*mul[v] = g*g\n        mul = dict()\n        # For each edge between assigned nodes, set mul relationships: mul[u]*mul[v] = g*g\n        edges_local = []\n        for u,v,g,l in edge_list:\n            if comp[u]==cid:\n                edges_local.append((u,v,g))\n        # Build graph of multipliers\n        mul_graph = {}\n        for u,v,g in edges_local:\n            mul_graph.setdefault(u,[]).append((v,g))\n            mul_graph.setdefault(v,[]).append((u,g))\n        # BFS assign mul as integers by factoring g*g; we can set mul to gcd with g patterns: set mul[start] = g0 where choose arbitrary? We'll set mul[start]=1 and propagate requiring mul[v]=g*g//mul[u]\n        mval = {}\n        root = start\n        mval[root]=1\n        dq=deque([root])\n        poss = True\n        while dq and poss:\n            x=dq.popleft()\n            for y,g in mul_graph.get(x,()):\n                need = (g*g)//mval[x]\n                if (g*g) % mval[x]!=0:\n                    poss=False; break\n                if y in mval:\n                    if mval[y]!=need:\n                        poss=False; break\n                else:\n                    mval[y]=need; dq.append(y)\n        if not poss:\n            print(\"NO\"); return\n        # Now compute final a[node] = val[node]*mval[node]; but must be divisible by all g on incident edges; also product condition holds.\n        for node in verts:\n            mv = mval.get(node,1)\n            a = val[node]*mv\n            if a<1 or a>10**18:\n                print(\"NO\"); return\n            res[node]=a\n        # Verify constraints within component\n        for u,v,g,l in edges_local:\n            if not (gcd(res[u],res[v])==g and (res[u]*res[v]//gcd(res[u],res[v])==l)):\n                print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(int(x)) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 1253,
        "thoughts_token_count": 0
    }
}