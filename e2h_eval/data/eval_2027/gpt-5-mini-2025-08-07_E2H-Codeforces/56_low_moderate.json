{
    "start": 1758284900.9291177,
    "end": 1758284925.5677862,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Evaluating perfect matching**\n\nI need to test for a non-crossing perfect matching between R and B points, assuming equal counts since R must equal B for it to be possible. I think this relates to planar non-crossing matching within bipartite sets. I can start by picking an edge that splits the points evenly. I have a known approach where I try all pairs and recursively check both halves, utilizing memoization on bitmask sets, since there can be up to 10 points on each side.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nints = list(map(int, data))\n\nptr = 0\nouts = []\nnlen = len(ints)\ndef orient(ax,ay,bx,by,cx,cy):\n    return (bx-ax)*(cy-ay) - (by-ay)*(cx-ax)\n\nwhile ptr < nlen:\n    R = ints[ptr]; B = ints[ptr+1]; ptr += 2\n    rebels = []\n    bases = []\n    for _ in range(R):\n        x = ints[ptr]; y = ints[ptr+1]; ptr += 2\n        rebels.append((x,y))\n    for _ in range(B):\n        x = ints[ptr]; y = ints[ptr+1]; ptr += 2\n        bases.append((x,y))\n    if R != B:\n        outs.append(\"No\")\n        continue\n    n = R\n    # precompute orientation signs for every pair (rebel i, base j) and every other point\n    # We'll use bitmasks: rebels 0..n-1, bases 0..n-1\n    from functools import lru_cache\n\n    @lru_cache(None)\n    def solve(rmask, bmask):\n        if rmask == 0 and bmask == 0:\n            return True\n        # counts must equal\n        rc = rmask.bit_count()\n        bc = bmask.bit_count()\n        if rc != bc:\n            return False\n        # pick lowest-index rebel\n        i = (rmask & -rmask).bit_length() - 1\n        ax, ay = rebels[i]\n        bm = bmask\n        j = 0\n        while bm:\n            lb = bm & -bm\n            j = lb.bit_length() - 1\n            bx, by = bases[j]\n            left_r = 0\n            left_b = 0\n            right_r = 0\n            right_b = 0\n            # for all other rebels\n            rem_r = rmask & ~(1<<i)\n            k = rem_r\n            while k:\n                lbk = k & -k\n                kk = lbk.bit_length() - 1\n                ox, oy = rebels[kk]\n                o = orient(ax,ay,bx,by,ox,oy)\n                if o > 0:\n                    left_r |= (1<<kk)\n                else:\n                    right_r |= (1<<kk)\n                k -= lbk\n            # for all other bases\n            rem_b = bmask & ~(1<<j)\n            k = rem_b\n            while k:\n                lbk = k & -k\n                kk = lbk.bit_length() - 1\n                ox, oy = bases[kk]\n                o = orient(ax,ay,bx,by,ox,oy)\n                if o > 0:\n                    left_b |= (1<<kk)\n                else:\n                    right_b |= (1<<kk)\n                k -= lbk\n            # check counts on one side equal\n            if left_r.bit_count() == left_b.bit_count():\n                # try solve left and right\n                if solve(left_r, left_b) and solve(right_r, right_b):\n                    return True\n            bm -= (1<<j)\n        return False\n\n    ok = solve((1<<n)-1, (1<<n)-1)\n    outs.append(\"Yes\" if ok else \"No\")\n\nsys.stdout.write(\"\\n\".join(outs))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nints = list(map(int, data))\n\nptr = 0\nouts = []\nnlen = len(ints)\ndef orient(ax,ay,bx,by,cx,cy):\n    return (bx-ax)*(cy-ay) - (by-ay)*(cx-ax)\n\nwhile ptr < nlen:\n    R = ints[ptr]; B = ints[ptr+1]; ptr += 2\n    rebels = []\n    bases = []\n    for _ in range(R):\n        x = ints[ptr]; y = ints[ptr+1]; ptr += 2\n        rebels.append((x,y))\n    for _ in range(B):\n        x = ints[ptr]; y = ints[ptr+1]; ptr += 2\n        bases.append((x,y))\n    if R != B:\n        outs.append(\"No\")\n        continue\n    n = R\n    # precompute orientation signs for every pair (rebel i, base j) and every other point\n    # We'll use bitmasks: rebels 0..n-1, bases 0..n-1\n    from functools import lru_cache\n\n    @lru_cache(None)\n    def solve(rmask, bmask):\n        if rmask == 0 and bmask == 0:\n            return True\n        # counts must equal\n        rc = rmask.bit_count()\n        bc = bmask.bit_count()\n        if rc != bc:\n            return False\n        # pick lowest-index rebel\n        i = (rmask & -rmask).bit_length() - 1\n        ax, ay = rebels[i]\n        bm = bmask\n        j = 0\n        while bm:\n            lb = bm & -bm\n            j = lb.bit_length() - 1\n            bx, by = bases[j]\n            left_r = 0\n            left_b = 0\n            right_r = 0\n            right_b = 0\n            # for all other rebels\n            rem_r = rmask & ~(1<<i)\n            k = rem_r\n            while k:\n                lbk = k & -k\n                kk = lbk.bit_length() - 1\n                ox, oy = rebels[kk]\n                o = orient(ax,ay,bx,by,ox,oy)\n                if o > 0:\n                    left_r |= (1<<kk)\n                else:\n                    right_r |= (1<<kk)\n                k -= lbk\n            # for all other bases\n            rem_b = bmask & ~(1<<j)\n            k = rem_b\n            while k:\n                lbk = k & -k\n                kk = lbk.bit_length() - 1\n                ox, oy = bases[kk]\n                o = orient(ax,ay,bx,by,ox,oy)\n                if o > 0:\n                    left_b |= (1<<kk)\n                else:\n                    right_b |= (1<<kk)\n                k -= lbk\n            # check counts on one side equal\n            if left_r.bit_count() == left_b.bit_count():\n                # try solve left and right\n                if solve(left_r, left_b) and solve(right_r, right_b):\n                    return True\n            bm -= (1<<j)\n        return False\n\n    ok = solve((1<<n)-1, (1<<n)-1)\n    outs.append(\"Yes\" if ok else \"No\")\n\nsys.stdout.write(\"\\n\".join(outs))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 464,
        "completion_token_count": 1205,
        "thoughts_token_count": 448
    }
}