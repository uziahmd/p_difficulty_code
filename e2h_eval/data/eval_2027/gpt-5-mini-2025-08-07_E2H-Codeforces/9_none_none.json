{
    "start": 1758094588.1918077,
    "end": 1758094603.6453128,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# The given sample has multiple testcases concatenated; but original CF is single-case.\n# However sample input shows multiple separate cases; detect by parsing all as multiple instances:\nvals = list(map(int, data))\np = 0\nres_list = []\nwhile p < len(vals):\n    n = vals[p]; m = vals[p+1]; p += 2\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        wi = vals[p]; ci = vals[p+1]; p += 2\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    pref1 = [0]\n    for v in w1:\n        pref1.append(pref1[-1] + v)\n    pref2 = [0]\n    for v in w2:\n        pref2.append(pref2[-1] + v)\n    pref3 = [0]\n    for v in w3:\n        pref3.append(pref3[-1] + v)\n    best = 0\n    # try number of weight-3 items k\n    max_k = min(len(w3), m // 3)\n    for k in range(0, max_k+1):\n        weight3 = 3*k\n        val3 = pref3[k]\n        rem = m - weight3\n        # use weight-2 and weight-1 optimally\n        # we can try t weight-2 items from 0..min(len(w2), rem//2)\n        max_t = min(len(w2), rem//2)\n        # Greedy: For given rem, combine best of weight-2 and weight-1 by considering taking t twos then fill ones.\n        # We can loop over t (since m up to 3e5 but number of w2 <= n <=1e5) but doing for each k loop may be heavy.\n        # Instead, precompute best value obtainable for all capacities up to m using w1 and w2.\n        # But simpler: precompute best_for_cap for capacities 0..m once outside k-loop.\n        pass\n    # Precompute best for weights 1 and 2 up to m\n    best_cap = [0] * (m+1)\n    # use only w1 and w2\n    # Start with using only ones\n    for cap in range(1, m+1):\n        if cap <= len(pref1)-1:\n            best_cap[cap] = pref1[cap]\n        else:\n            best_cap[cap] = pref1[-1]\n    # consider twos: for t twos, weight 2*t, value pref2[t]; fill rest with ones\n    for t in range(1, len(pref2)):\n        wt = 2*t\n        if wt > m:\n            break\n        for cap in range(wt, m+1):\n            ones_can = min(cap - wt, len(pref1)-1)\n            val = pref2[t] + pref1[ones_can]\n            if val > best_cap[cap]:\n                best_cap[cap] = val\n    # make best_cap non-decreasing\n    for cap in range(1, m+1):\n        if best_cap[cap] < best_cap[cap-1]:\n            best_cap[cap] = best_cap[cap-1]\n    best = 0\n    max_k = min(len(w3), m // 3)\n    for k in range(0, max_k+1):\n        weight3 = 3*k\n        val3 = pref3[k]\n        rem = m - weight3\n        val = val3 + best_cap[rem]\n        if val > best:\n            best = val\n    res_list.append(str(best))\n\nsys.stdout.write(\"\\n\".join(res_list))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# The given sample has multiple testcases concatenated; but original CF is single-case.\n# However sample input shows multiple separate cases; detect by parsing all as multiple instances:\nvals = list(map(int, data))\np = 0\nres_list = []\nwhile p < len(vals):\n    n = vals[p]; m = vals[p+1]; p += 2\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        wi = vals[p]; ci = vals[p+1]; p += 2\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    pref1 = [0]\n    for v in w1:\n        pref1.append(pref1[-1] + v)\n    pref2 = [0]\n    for v in w2:\n        pref2.append(pref2[-1] + v)\n    pref3 = [0]\n    for v in w3:\n        pref3.append(pref3[-1] + v)\n    best = 0\n    # try number of weight-3 items k\n    max_k = min(len(w3), m // 3)\n    for k in range(0, max_k+1):\n        weight3 = 3*k\n        val3 = pref3[k]\n        rem = m - weight3\n        # use weight-2 and weight-1 optimally\n        # we can try t weight-2 items from 0..min(len(w2), rem//2)\n        max_t = min(len(w2), rem//2)\n        # Greedy: For given rem, combine best of weight-2 and weight-1 by considering taking t twos then fill ones.\n        # We can loop over t (since m up to 3e5 but number of w2 <= n <=1e5) but doing for each k loop may be heavy.\n        # Instead, precompute best value obtainable for all capacities up to m using w1 and w2.\n        # But simpler: precompute best_for_cap for capacities 0..m once outside k-loop.\n        pass\n    # Precompute best for weights 1 and 2 up to m\n    best_cap = [0] * (m+1)\n    # use only w1 and w2\n    # Start with using only ones\n    for cap in range(1, m+1):\n        if cap <= len(pref1)-1:\n            best_cap[cap] = pref1[cap]\n        else:\n            best_cap[cap] = pref1[-1]\n    # consider twos: for t twos, weight 2*t, value pref2[t]; fill rest with ones\n    for t in range(1, len(pref2)):\n        wt = 2*t\n        if wt > m:\n            break\n        for cap in range(wt, m+1):\n            ones_can = min(cap - wt, len(pref1)-1)\n            val = pref2[t] + pref1[ones_can]\n            if val > best_cap[cap]:\n                best_cap[cap] = val\n    # make best_cap non-decreasing\n    for cap in range(1, m+1):\n        if best_cap[cap] < best_cap[cap-1]:\n            best_cap[cap] = best_cap[cap-1]\n    best = 0\n    max_k = min(len(w3), m // 3)\n    for k in range(0, max_k+1):\n        weight3 = 3*k\n        val3 = pref3[k]\n        rem = m - weight3\n        val = val3 + best_cap[rem]\n        if val > best:\n            best = val\n    res_list.append(str(best))\n\nsys.stdout.write(\"\\n\".join(res_list))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 421,
        "completion_token_count": 873,
        "thoughts_token_count": 0
    }
}