{
    "start": 1758284945.4125853,
    "end": 1758285006.541163,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Exploring a CF problem**\n\nI need to dive into the CF problem \"Vitaly and Cycle\" 103B. It’s about finding the minimal edges to add for creating an odd cycle with more than one vertex. If an existing graph already has an odd cycle, I think it's t=0, and w equals the number of ways. If there’s no odd cycle, the graph is bipartite, which means adding an edge between same-color vertices in the same component will create an odd cycle if there are non-adjacent pairs. So, t should be 1 in that case.",
    "response": "Here's a ready-to-run Python solution for the described problem. It reads the graph from stdin, processes components with BFS to detect bipartiteness, and computes the requested minimal number of added edges t and the number of ways w as described.\n\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1]*n\n    visited = [False]*n\n    non_bipartite = False\n\n    comps = []  # list of tuples (size_color0, size_color1, edges_in_component)\n    for i in range(n):\n        if visited[i]:\n            continue\n        q = deque()\n        q.append(i)\n        visited[i] = True\n        color[i] = 0\n        cnt = [0,0]\n        edges_cnt = 0\n        while q:\n            u = q.popleft()\n            cnt[color[u]] += 1\n            edges_cnt += len(adj[u])\n            for v in adj[u]:\n                if color[v] == -1:\n                    color[v] = color[u]^1\n                    visited[v] = True\n                    q.append(v)\n                else:\n                    if color[v] == color[u]:\n                        non_bipartite = True\n        edges_cnt //= 2\n        comps.append((cnt[0], cnt[1], edges_cnt))\n\n    if non_bipartite:\n        print(\"0 1\")\n        return\n\n    # Count number of same-color pairs within same component (all are non-edges in bipartite graph)\n    from math import comb\n    total_pairs = 0\n    for a,b,e in comps:\n        if a >= 2:\n            total_pairs += a*(a-1)//2\n        if b >= 2:\n            total_pairs += b*(b-1)//2\n\n    if total_pairs > 0:\n        print(\"1 {}\".format(total_pairs))\n        return\n\n    # No same-color pairs within any component -> every component is either isolated vertex (1,0,e=0)\n    # or a single edge (1,1,e=1). Count components that are single edges.\n    edge_comps = 0\n    for a,b,e in comps:\n        if a==1 and b==1 and e==1:\n            edge_comps += 1\n\n    if edge_comps > 0:\n        # For each edge component (u-v), choose any other vertex w (n-2 choices) to connect to both endpoints (2 added edges)\n        ways = edge_comps * (n - 2)\n        print(\"2 {}\".format(ways))\n        return\n\n    # All components are isolated vertices\n    if n < 3:\n        print(\"3 0\")\n        return\n    ways = comb(n,3)\n    print(\"3 {}\".format(ways))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis implements the standard case analysis:\n- If any component is non-bipartite -> t=0, w=1 (no edges needed).\n- Else if there is any same-color pair inside a component -> t=1, count all such pairs.\n- Else if there's any component that is a single edge -> t=2, ways = (#edge-components) * (n-2).\n- Else all vertices are isolated -> t=3, ways = C(n,3).\n\nThe program uses BFS to color components and detect odd cycles efficiently.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1]*n\n    visited = [False]*n\n    non_bipartite = False\n\n    comps = []  # list of tuples (size_color0, size_color1, edges_in_component)\n    for i in range(n):\n        if visited[i]:\n            continue\n        q = deque()\n        q.append(i)\n        visited[i] = True\n        color[i] = 0\n        cnt = [0,0]\n        edges_cnt = 0\n        while q:\n            u = q.popleft()\n            cnt[color[u]] += 1\n            edges_cnt += len(adj[u])\n            for v in adj[u]:\n                if color[v] == -1:\n                    color[v] = color[u]^1\n                    visited[v] = True\n                    q.append(v)\n                else:\n                    if color[v] == color[u]:\n                        non_bipartite = True\n        edges_cnt //= 2\n        comps.append((cnt[0], cnt[1], edges_cnt))\n\n    if non_bipartite:\n        print(\"0 1\")\n        return\n\n    # Count number of same-color pairs within same component (all are non-edges in bipartite graph)\n    from math import comb\n    total_pairs = 0\n    for a,b,e in comps:\n        if a >= 2:\n            total_pairs += a*(a-1)//2\n        if b >= 2:\n            total_pairs += b*(b-1)//2\n\n    if total_pairs > 0:\n        print(\"1 {}\".format(total_pairs))\n        return\n\n    # No same-color pairs within any component -> every component is either isolated vertex (1,0,e=0)\n    # or a single edge (1,1,e=1). Count components that are single edges.\n    edge_comps = 0\n    for a,b,e in comps:\n        if a==1 and b==1 and e==1:\n            edge_comps += 1\n\n    if edge_comps > 0:\n        # For each edge component (u-v), choose any other vertex w (n-2 choices) to connect to both endpoints (2 added edges)\n        ways = edge_comps * (n - 2)\n        print(\"2 {}\".format(ways))\n        return\n\n    # All components are isolated vertices\n    if n < 3:\n        print(\"3 0\")\n        return\n    ways = comb(n,3)\n    print(\"3 {}\".format(ways))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 3622,
        "thoughts_token_count": 2816
    }
}