{
    "start": 1758284952.717266,
    "end": 1758285026.3192492,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Exploring equations with primes**\n\nI’m considering an alternate approach using a system of equations with prime exponents, while accounting for gcd components. For each prime p, I can denote the exponent in A_i as x_i(p). For an edge u-v, I’ll define g's exponent as g_p and l's as l_p. My constraints are that the minimum x_u and x_v equals g_p, and the maximum equals l_p. This leads to x_u + x_v representing the sum constraint. So, for each prime p, the edges provide sum constraints, which feels like a more organized way to approach the problem.",
    "response": "```python\nimport sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = sieve_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it))-1\n    v = int(next(it))-1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\n# early check l % g ==0\nfor (_,_,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# For each edge, compute for each prime p: s_p = exp_g + exp_l\n# Build per-prime adjacency lists: for prime p, edges list of (u,v,s)\nprime_adj = defaultdict(list)\nnodes_with_prime = defaultdict(set)\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p,0)\n        el = fl.get(p,0)\n        s = eg + el\n        prime_adj[p].append((u,v,s))\n        nodes_with_prime[p].add(u); nodes_with_prime[p].add(v)\n\n# For each prime, solve x_i (exponent of p in A_i)\nexp_per_node = [defaultdict(int) for _ in range(n)]  # list of dict prime->exp\n\nfor p, adj in prime_adj.items():\n    # build adjacency by nodes for this prime\n    g_adj = defaultdict(list)\n    for u,v,s in adj:\n        g_adj[u].append((v,s))\n        g_adj[v].append((u,s))\n    visited = {}\n    for node in nodes_with_prime[p]:\n        if node in visited:\n            continue\n        # BFS/DFS to set forms x_i = sign_i * t + offset_i\n        stack = [node]\n        sign = {}\n        offset = {}\n        sign[node] = 1\n        offset[node] = 0\n        visited[node] = True\n        q = deque([node])\n        t_fixed = None\n        possible = True\n        while q and possible:\n            u = q.popleft()\n            for v,s in g_adj[u]:\n                if v not in sign:\n                    sign[v] = -sign[u]\n                    offset[v] = s - offset[u]\n                    visited[v] = True\n                    q.append(v)\n                else:\n                    # check constraint: sign[v]*t + offset[v] == s - (sign[u]*t + offset[u])\n                    # but we already enforced relation when constructed; equivalently check consistency:\n                    # Derived expected offset_v = s - offset_u and sign_v = -sign_u\n                    if sign[v] == -sign[u]:\n                        if offset[v] != s - offset[u]:\n                            possible = False\n                            break\n                    else:\n                        # signs equal -> (sign)*t + offset[v] == s - (sign)*t - offset[u]\n                        # => 2*sign*t == s - offset[u] - offset[v]\n                        num = s - offset[u] - offset[v]\n                        den = 2*sign[u]\n                        if num % den != 0:\n                            possible = False\n                            break\n                        t_val = num // den\n                        if t_fixed is None:\n                            t_fixed = t_val\n                        elif t_fixed != t_val:\n                            possible = False\n                            break\n            # end for\n        if not possible:\n            print(\"NO\"); sys.exit(0)\n        # After component traversal, determine t range if not fixed\n        L = -10**18\n        R = 10**18\n        for i,sg in sign.items():\n            off = offset[i]\n            if sg == 1:\n                # t >= -off\n                L = max(L, -off)\n            else:\n                # -t + off >=0 => t <= off\n                R = min(R, off)\n        if t_fixed is not None:\n            if not (L <= t_fixed <= R):\n                print(\"NO\"); sys.exit(0)\n            t_use = t_fixed\n        else:\n            # choose any integer in [L,R]\n            if L > R:\n                print(\"NO\"); sys.exit(0)\n            # choose t = L (rounded up)\n            t_use = L\n            if not isinstance(t_use, int):\n                t_use = int(t_use)\n            # ensure within bounds\n            if t_use < L: t_use = int(L)\n            if t_use > R: t_use = int(R)\n        # compute exponents and check nonnegative\n        for i,sg in sign.items():\n            val = sg * t_use + offset[i]\n            if val < 0:\n                print(\"NO\"); sys.exit(0)\n            exp_per_node[i][p] = val\n\n# For nodes without a prime entries, exp_per_node remains empty\n# Build final A_i\nA = [1]*n\nfor i in range(n):\n    val = 1\n    for p, e in exp_per_node[i].items():\n        for _ in range(e):\n            val *= p\n            if val > 10**12:\n                # safety, but numbers should be <=1e6 realistically\n                pass\n    A[i] = val\n\n# Now need to incorporate gcd base factors: Wait exponents accounted for both g and l via s = eg+el.\n# But relation min(x_u,x_v)=eg and max = el should hold. We must verify edges satisfy gcd/lcm exactly.\nfor (u,v,g,l) in edges:\n    import math\n    gu = math.gcd(A[u], A[v])\n    lu = A[u] // gu * A[v]\n    # Alternatively compute lcm = (A[u]*A[v])//gcd but avoid overflow with int okay in Python\n    lu = (A[u] * A[v]) // gu\n    if gu != g or lu != l:\n        # Maybe we need to multiply by additional gcd factors? Our exponents ensure x_u + x_v = eg+el but not guarantee min==eg.\n        # Try to adjust by multiplying by gcd contributions per node:\n        # Compute factor t_u such that A[u]*t_u etc. Simpler: attempt to compute final A by solving system A_v = g*l / A_u starting from nodes.\n        break\nelse:\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n    sys.exit(0)\n\n# Alternative approach if verification failed: solve per component by choosing A_root and propagating using A_v = g*l // A_u\n# We'll try this fallback.\n\n# Build graph edges mapping\nadj = defaultdict(list)\nfor u,v,g,l in edges:\n    adj[u].append((v,g,l))\n    adj[v].append((u,g,l))\n\nres = [None]*n\nvisited = [False]*n\n\nfor i in range(n):\n    if visited[i]: continue\n    if i not in adj:\n        res[i]=1\n        visited[i]=True\n        continue\n    # try all divisors of some seed: choose first edge adjacent to i\n    # choose seed edge (i -> neighbor)\n    seed_neighbor, seed_g, seed_l = adj[i][0]\n    prod = seed_g * seed_l\n    # enumerate divisors of prod (but must be <=1e6 maybe)\n    # To limit, divisors of prod up to 1e6^2 ~1e12 but factorization small.\n    fac = factorize(prod)\n    # generate divisors\n    divs = [1]\n    for p,e in fac.items():\n        cur = []\n        for d in divs:\n            val = d\n            for k in range(e+1):\n                cur.append(val)\n                val *= p\n        divs = cur\n    ok_comp = False\n    for candidate in divs:\n        # candidate must be <=1e12 ok\n        # try propagate\n        stack = [i]\n        tmp = {}\n        tmp[i] = candidate\n        good = True\n        while stack and good:\n            u = stack.pop()\n            for v,g,l in adj[u]:\n                if tmp.get(u,0)==0: good=False; break\n                produv = g * l\n                if produv % tmp[u] != 0:\n                    good = False; break\n                valv = produv // tmp[u]\n                if tmp.get(v) is None:\n                    tmp[v]=valv\n                    stack.append(v)\n                else:\n                    if tmp[v] != valv:\n                        good = False; break\n        if not good:\n            continue\n        # verify all edges in component\n        for u in tmp:\n            for v,g,l in adj[u]:\n                if v in tmp:\n                    import math\n                    gu = math.gcd(tmp[u], tmp[v])\n                    lu = (tmp[u]*tmp[v])//gu\n                    if gu!=g or lu!=l:\n                        good=False\n                        break\n            if not good: break\n        if good:\n            # accept\n            for node,val in tmp.items():\n                res[node]=val\n                visited[node]=True\n            ok_comp = True\n            break\n    if not ok_comp:\n        print(\"NO\"); sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(res[i] if res[i] is not None else 1) for i in range(n)))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = sieve_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it))-1\n    v = int(next(it))-1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\n# early check l % g ==0\nfor (_,_,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# For each edge, compute for each prime p: s_p = exp_g + exp_l\n# Build per-prime adjacency lists: for prime p, edges list of (u,v,s)\nprime_adj = defaultdict(list)\nnodes_with_prime = defaultdict(set)\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p,0)\n        el = fl.get(p,0)\n        s = eg + el\n        prime_adj[p].append((u,v,s))\n        nodes_with_prime[p].add(u); nodes_with_prime[p].add(v)\n\n# For each prime, solve x_i (exponent of p in A_i)\nexp_per_node = [defaultdict(int) for _ in range(n)]  # list of dict prime->exp\n\nfor p, adj in prime_adj.items():\n    # build adjacency by nodes for this prime\n    g_adj = defaultdict(list)\n    for u,v,s in adj:\n        g_adj[u].append((v,s))\n        g_adj[v].append((u,s))\n    visited = {}\n    for node in nodes_with_prime[p]:\n        if node in visited:\n            continue\n        # BFS/DFS to set forms x_i = sign_i * t + offset_i\n        stack = [node]\n        sign = {}\n        offset = {}\n        sign[node] = 1\n        offset[node] = 0\n        visited[node] = True\n        q = deque([node])\n        t_fixed = None\n        possible = True\n        while q and possible:\n            u = q.popleft()\n            for v,s in g_adj[u]:\n                if v not in sign:\n                    sign[v] = -sign[u]\n                    offset[v] = s - offset[u]\n                    visited[v] = True\n                    q.append(v)\n                else:\n                    # check constraint: sign[v]*t + offset[v] == s - (sign[u]*t + offset[u])\n                    # but we already enforced relation when constructed; equivalently check consistency:\n                    # Derived expected offset_v = s - offset_u and sign_v = -sign_u\n                    if sign[v] == -sign[u]:\n                        if offset[v] != s - offset[u]:\n                            possible = False\n                            break\n                    else:\n                        # signs equal -> (sign)*t + offset[v] == s - (sign)*t - offset[u]\n                        # => 2*sign*t == s - offset[u] - offset[v]\n                        num = s - offset[u] - offset[v]\n                        den = 2*sign[u]\n                        if num % den != 0:\n                            possible = False\n                            break\n                        t_val = num // den\n                        if t_fixed is None:\n                            t_fixed = t_val\n                        elif t_fixed != t_val:\n                            possible = False\n                            break\n            # end for\n        if not possible:\n            print(\"NO\"); sys.exit(0)\n        # After component traversal, determine t range if not fixed\n        L = -10**18\n        R = 10**18\n        for i,sg in sign.items():\n            off = offset[i]\n            if sg == 1:\n                # t >= -off\n                L = max(L, -off)\n            else:\n                # -t + off >=0 => t <= off\n                R = min(R, off)\n        if t_fixed is not None:\n            if not (L <= t_fixed <= R):\n                print(\"NO\"); sys.exit(0)\n            t_use = t_fixed\n        else:\n            # choose any integer in [L,R]\n            if L > R:\n                print(\"NO\"); sys.exit(0)\n            # choose t = L (rounded up)\n            t_use = L\n            if not isinstance(t_use, int):\n                t_use = int(t_use)\n            # ensure within bounds\n            if t_use < L: t_use = int(L)\n            if t_use > R: t_use = int(R)\n        # compute exponents and check nonnegative\n        for i,sg in sign.items():\n            val = sg * t_use + offset[i]\n            if val < 0:\n                print(\"NO\"); sys.exit(0)\n            exp_per_node[i][p] = val\n\n# For nodes without a prime entries, exp_per_node remains empty\n# Build final A_i\nA = [1]*n\nfor i in range(n):\n    val = 1\n    for p, e in exp_per_node[i].items():\n        for _ in range(e):\n            val *= p\n            if val > 10**12:\n                # safety, but numbers should be <=1e6 realistically\n                pass\n    A[i] = val\n\n# Now need to incorporate gcd base factors: Wait exponents accounted for both g and l via s = eg+el.\n# But relation min(x_u,x_v)=eg and max = el should hold. We must verify edges satisfy gcd/lcm exactly.\nfor (u,v,g,l) in edges:\n    import math\n    gu = math.gcd(A[u], A[v])\n    lu = A[u] // gu * A[v]\n    # Alternatively compute lcm = (A[u]*A[v])//gcd but avoid overflow with int okay in Python\n    lu = (A[u] * A[v]) // gu\n    if gu != g or lu != l:\n        # Maybe we need to multiply by additional gcd factors? Our exponents ensure x_u + x_v = eg+el but not guarantee min==eg.\n        # Try to adjust by multiplying by gcd contributions per node:\n        # Compute factor t_u such that A[u]*t_u etc. Simpler: attempt to compute final A by solving system A_v = g*l / A_u starting from nodes.\n        break\nelse:\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n    sys.exit(0)\n\n# Alternative approach if verification failed: solve per component by choosing A_root and propagating using A_v = g*l // A_u\n# We'll try this fallback.\n\n# Build graph edges mapping\nadj = defaultdict(list)\nfor u,v,g,l in edges:\n    adj[u].append((v,g,l))\n    adj[v].append((u,g,l))\n\nres = [None]*n\nvisited = [False]*n\n\nfor i in range(n):\n    if visited[i]: continue\n    if i not in adj:\n        res[i]=1\n        visited[i]=True\n        continue\n    # try all divisors of some seed: choose first edge adjacent to i\n    # choose seed edge (i -> neighbor)\n    seed_neighbor, seed_g, seed_l = adj[i][0]\n    prod = seed_g * seed_l\n    # enumerate divisors of prod (but must be <=1e6 maybe)\n    # To limit, divisors of prod up to 1e6^2 ~1e12 but factorization small.\n    fac = factorize(prod)\n    # generate divisors\n    divs = [1]\n    for p,e in fac.items():\n        cur = []\n        for d in divs:\n            val = d\n            for k in range(e+1):\n                cur.append(val)\n                val *= p\n        divs = cur\n    ok_comp = False\n    for candidate in divs:\n        # candidate must be <=1e12 ok\n        # try propagate\n        stack = [i]\n        tmp = {}\n        tmp[i] = candidate\n        good = True\n        while stack and good:\n            u = stack.pop()\n            for v,g,l in adj[u]:\n                if tmp.get(u,0)==0: good=False; break\n                produv = g * l\n                if produv % tmp[u] != 0:\n                    good = False; break\n                valv = produv // tmp[u]\n                if tmp.get(v) is None:\n                    tmp[v]=valv\n                    stack.append(v)\n                else:\n                    if tmp[v] != valv:\n                        good = False; break\n        if not good:\n            continue\n        # verify all edges in component\n        for u in tmp:\n            for v,g,l in adj[u]:\n                if v in tmp:\n                    import math\n                    gu = math.gcd(tmp[u], tmp[v])\n                    lu = (tmp[u]*tmp[v])//gu\n                    if gu!=g or lu!=l:\n                        good=False\n                        break\n            if not good: break\n        if good:\n            # accept\n            for node,val in tmp.items():\n                res[node]=val\n                visited[node]=True\n            ok_comp = True\n            break\n    if not ok_comp:\n        print(\"NO\"); sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(res[i] if res[i] is not None else 1) for i in range(n)))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 4030,
        "thoughts_token_count": 1856
    }
}