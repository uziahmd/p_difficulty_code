{
    "start": 1758294643.700078,
    "end": 1758294660.7561285,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:11 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\n\n# Read input\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nn = int(data[0])\nA = data[1].strip()\nm = 2 * n\ndigits = [int(c) for c in A]\n\n# Dynamic programming: dp[pos][k] = best total sum of resulting numbers' integer value suffixes\n# We build from right to left. At each position pos (0..m), there remain picks for H and M.\n# Let h = number of H picks already made from left; but for suffix DP easier: process positions from rightmost.\n# We consider how many picks assigned to H among suffix positions.\n# Let pos be index from m down to 0, s = number of positions assigned to H in suffix processed so far.\n# Weight of choosing digit d at distance t from right contributes d * 10^t to whichever player's number.\n# We'll build dp[s] after processing suffix length processed_len.\n# Start with processed_len=0, dp[0]=0\npow10 = [1] * (m + 1)\nfor i in range(1, m + 1):\n    pow10[i] = pow10[i - 1] * 10\n\n# We'll process digits from right to left\n# At step i from 1..m, current digit is digits[m - i], its place in final numbers depends on counts of picks previously assigned to that player.\n# Let processed_len = i-1; if we now assign current digit to H, it will be placed at position h_pos = number of H digits already assigned in suffix = s\n# So contribution = digit * 10^s\n# Similarly for M if assigned, contribution = digit * 10^t where t = number of M digits already assigned = processed_len - s\n# We must ensure final total H picks equals n overall; equivalently total H picks in whole string equals n.\n# While processing suffix we track s up to min(i, n)\n# Use dp arrays storing best total and choice to reconstruct.\nINF = -10**100\n# dp arrays keyed by s (# H picks in suffix processed so far)\nprev = [INF] * (n + 1)\nprev[0] = 0\n# store transitions: for each step i, store choice arrays of size n+1 mapping s->(prev_s, char)\nchoices = []\nfor i in range(1, m + 1):\n    d = digits[m - i]  # current digit from right\n    cur = [INF] * (n + 1)\n    choice = [None] * (n + 1)\n    max_s = min(i, n)\n    for s in range(0, max_s + 1):\n        # s is number of H picks in suffix after taking current digit\n        # Two options: current digit assigned to H => prev had s-1 H picks\n        val1 = INF\n        if s - 1 >= 0:\n            prev_s = s - 1\n            if prev[prev_s] != INF:\n                # position index for H is prev_s (0-based from right)\n                val1 = prev[prev_s] + d * pow10[prev_s]\n        # Option assign to M => prev had s H picks\n        val2 = INF\n        processed_prev = i - 1\n        if processed_prev - s >= 0 and s <= n:\n            if prev[s] != INF:\n                # M's position index is (processed_prev - s)\n                val2 = prev[s] + d * pow10[processed_prev - s]\n        # choose max\n        if val1 >= val2:\n            cur[s] = val1\n            choice[s] = ('H', s - 1) if val1 != INF else None\n        else:\n            cur[s] = val2\n            choice[s] = ('M', s) if val2 != INF else None\n    choices.append(choice)\n    prev = cur\n\n# After processing all m digits, we need total H picks in whole string = n, so in suffix (i=m) s must equal n\nif prev[n] == INF:\n    # fallback (shouldn't happen)\n    print(\"H\" * n + \"M\" * n)\n    sys.exit(0)\n\n# Reconstruct choices from last to first\nres = []\ns = n\nfor i in range(m, 0, -1):\n    choice = choices[i - 1][s]\n    ch, prev_s = choice\n    res.append(ch if ch is not None else 'H')\n    s = prev_s\n# Currently res is from rightmost to leftmost; reverse\nres = res[::-1]\nprint(''.join(res))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\n# Read input\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nn = int(data[0])\nA = data[1].strip()\nm = 2 * n\ndigits = [int(c) for c in A]\n\n# Dynamic programming: dp[pos][k] = best total sum of resulting numbers' integer value suffixes\n# We build from right to left. At each position pos (0..m), there remain picks for H and M.\n# Let h = number of H picks already made from left; but for suffix DP easier: process positions from rightmost.\n# We consider how many picks assigned to H among suffix positions.\n# Let pos be index from m down to 0, s = number of positions assigned to H in suffix processed so far.\n# Weight of choosing digit d at distance t from right contributes d * 10^t to whichever player's number.\n# We'll build dp[s] after processing suffix length processed_len.\n# Start with processed_len=0, dp[0]=0\npow10 = [1] * (m + 1)\nfor i in range(1, m + 1):\n    pow10[i] = pow10[i - 1] * 10\n\n# We'll process digits from right to left\n# At step i from 1..m, current digit is digits[m - i], its place in final numbers depends on counts of picks previously assigned to that player.\n# Let processed_len = i-1; if we now assign current digit to H, it will be placed at position h_pos = number of H digits already assigned in suffix = s\n# So contribution = digit * 10^s\n# Similarly for M if assigned, contribution = digit * 10^t where t = number of M digits already assigned = processed_len - s\n# We must ensure final total H picks equals n overall; equivalently total H picks in whole string equals n.\n# While processing suffix we track s up to min(i, n)\n# Use dp arrays storing best total and choice to reconstruct.\nINF = -10**100\n# dp arrays keyed by s (# H picks in suffix processed so far)\nprev = [INF] * (n + 1)\nprev[0] = 0\n# store transitions: for each step i, store choice arrays of size n+1 mapping s->(prev_s, char)\nchoices = []\nfor i in range(1, m + 1):\n    d = digits[m - i]  # current digit from right\n    cur = [INF] * (n + 1)\n    choice = [None] * (n + 1)\n    max_s = min(i, n)\n    for s in range(0, max_s + 1):\n        # s is number of H picks in suffix after taking current digit\n        # Two options: current digit assigned to H => prev had s-1 H picks\n        val1 = INF\n        if s - 1 >= 0:\n            prev_s = s - 1\n            if prev[prev_s] != INF:\n                # position index for H is prev_s (0-based from right)\n                val1 = prev[prev_s] + d * pow10[prev_s]\n        # Option assign to M => prev had s H picks\n        val2 = INF\n        processed_prev = i - 1\n        if processed_prev - s >= 0 and s <= n:\n            if prev[s] != INF:\n                # M's position index is (processed_prev - s)\n                val2 = prev[s] + d * pow10[processed_prev - s]\n        # choose max\n        if val1 >= val2:\n            cur[s] = val1\n            choice[s] = ('H', s - 1) if val1 != INF else None\n        else:\n            cur[s] = val2\n            choice[s] = ('M', s) if val2 != INF else None\n    choices.append(choice)\n    prev = cur\n\n# After processing all m digits, we need total H picks in whole string = n, so in suffix (i=m) s must equal n\nif prev[n] == INF:\n    # fallback (shouldn't happen)\n    print(\"H\" * n + \"M\" * n)\n    sys.exit(0)\n\n# Reconstruct choices from last to first\nres = []\ns = n\nfor i in range(m, 0, -1):\n    choice = choices[i - 1][s]\n    ch, prev_s = choice\n    res.append(ch if ch is not None else 'H')\n    s = prev_s\n# Currently res is from rightmost to leftmost; reverse\nres = res[::-1]\nprint(''.join(res))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 411,
        "completion_token_count": 1011,
        "thoughts_token_count": 0
    }
}