{
    "start": 1758294620.3307104,
    "end": 1758294640.1919165,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\ndef main():\n    import sys, math\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # For each edge, need l % g ==0 and gcd(a,b)=g and lcm = l -> a*b = g*l\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    res = [0]*n\n    visited = [False]*n\n    from math import gcd\n    for i in range(n):\n        if visited[i]:\n            continue\n        # BFS component. Try to assign starting value as product of edge constraints.\n        comp = []\n        stack = [i]\n        visited[i]=True\n        while stack:\n            x = stack.pop()\n            comp.append(x)\n            for (y,g,l) in adj[x]:\n                if not visited[y]:\n                    visited[y]=True\n                    stack.append(y)\n        # For component, we will attempt to find integer values.\n        # Use system: for each edge u-v: a_u divides l and a_v divides l and gcd = g, product = g*l\n        # Approach: pick a node r, try to determine relative multiplicative ratios.\n        r = comp[0]\n        val = {r:1}\n        from collections import deque\n        dq = deque([r])\n        ok = True\n        while dq and ok:\n            x = dq.popleft()\n            for (y,g,l) in adj[x]:\n                if y in val:\n                    # check consistency: val[x]*val[y] should be g*l / (k^2?) Actually we store multiplicative base s.t. a = val*mult\n                    continue\n                # we want ratio a_y / a_x = (g*l)/(a_x^2) ??? This approach fails.\n                dq.append(y)\n                val[y]=None\n        # Alternate approach: brute force find assignment by trying to set one node to divisors of some adjacent product.\n        # We'll pick a node with at least one edge; if isolated, set 1.\n        if len(comp)==1 and len(adj[comp[0]])==0:\n            res[comp[0]]=1\n            continue\n        # find a starting edge in component\n        start_edge = None\n        for (u,v,g,l) in edges:\n            if u in comp or v in comp:\n                if u in comp and v in comp:\n                    start_edge=(u,v,g,l); break\n        if not start_edge:\n            for node in comp:\n                res[node]=1\n            continue\n        u,v,g,l = start_edge\n        prod = g*l\n        # Try divisors of prod for a_u\n        def divisors(n):\n            divs=[]\n            i=1\n            while i*i<=n:\n                if n%i==0:\n                    divs.append(i)\n                    if i*i!=n: divs.append(n//i)\n                i+=1\n            return divs\n        divs = divisors(prod)\n        divs.sort()\n        assigned = None\n        for au in divs:\n            if gcd(au, prod//au)!=g: continue\n            if (au* (prod//au)) != prod: continue\n            if math.gcd(au, prod//au)!=g: continue\n            # attempt BFS assignment using formulas: for edge x-y with g,l, given a_x, enforce a_y = g*l / a_x\n            A = {}\n            q = deque()\n            A[u]=au\n            q.append(u)\n            good = True\n            while q and good:\n                x = q.popleft()\n                for (y,g2,l2) in adj[x]:\n                    need = (g2*l2)//A[x] if A[x] != 0 else None\n                    if (g2*l2) % A[x] != 0:\n                        good=False; break\n                    ay = need\n                    if ay<=0 or ay>10**18:\n                        good=False; break\n                    if y in A:\n                        if A[y]!=ay:\n                            good=False; break\n                    else:\n                        # check gcd condition\n                        if math.gcd(A[x], ay)!=g2:\n                            good=False; break\n                        A[y]=ay\n                        q.append(y)\n            if not good:\n                continue\n            # verify all edges in component\n            for (x,y,g2,l2) in edges:\n                if x in A and y in A:\n                    if math.gcd(A[x],A[y])!=g2 or (A[x]*A[y])!=(g2*l2):\n                        good=False; break\n            if good:\n                assigned=A\n                break\n        if assigned is None:\n            print(\"NO\"); return\n        for node in comp:\n            if node in assigned:\n                res[node]=assigned[node]\n            else:\n                # isolated within comp? shouldn't happen\n                res[node]=1\n    # final verify all given edges\n    for (u,v,g,l) in edges:\n        if math.gcd(res[u],res[v])!=g or res[u]*res[v]!=(g*l):\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\ndef main():\n    import sys, math\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # For each edge, need l % g ==0 and gcd(a,b)=g and lcm = l -> a*b = g*l\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    res = [0]*n\n    visited = [False]*n\n    from math import gcd\n    for i in range(n):\n        if visited[i]:\n            continue\n        # BFS component. Try to assign starting value as product of edge constraints.\n        comp = []\n        stack = [i]\n        visited[i]=True\n        while stack:\n            x = stack.pop()\n            comp.append(x)\n            for (y,g,l) in adj[x]:\n                if not visited[y]:\n                    visited[y]=True\n                    stack.append(y)\n        # For component, we will attempt to find integer values.\n        # Use system: for each edge u-v: a_u divides l and a_v divides l and gcd = g, product = g*l\n        # Approach: pick a node r, try to determine relative multiplicative ratios.\n        r = comp[0]\n        val = {r:1}\n        from collections import deque\n        dq = deque([r])\n        ok = True\n        while dq and ok:\n            x = dq.popleft()\n            for (y,g,l) in adj[x]:\n                if y in val:\n                    # check consistency: val[x]*val[y] should be g*l / (k^2?) Actually we store multiplicative base s.t. a = val*mult\n                    continue\n                # we want ratio a_y / a_x = (g*l)/(a_x^2) ??? This approach fails.\n                dq.append(y)\n                val[y]=None\n        # Alternate approach: brute force find assignment by trying to set one node to divisors of some adjacent product.\n        # We'll pick a node with at least one edge; if isolated, set 1.\n        if len(comp)==1 and len(adj[comp[0]])==0:\n            res[comp[0]]=1\n            continue\n        # find a starting edge in component\n        start_edge = None\n        for (u,v,g,l) in edges:\n            if u in comp or v in comp:\n                if u in comp and v in comp:\n                    start_edge=(u,v,g,l); break\n        if not start_edge:\n            for node in comp:\n                res[node]=1\n            continue\n        u,v,g,l = start_edge\n        prod = g*l\n        # Try divisors of prod for a_u\n        def divisors(n):\n            divs=[]\n            i=1\n            while i*i<=n:\n                if n%i==0:\n                    divs.append(i)\n                    if i*i!=n: divs.append(n//i)\n                i+=1\n            return divs\n        divs = divisors(prod)\n        divs.sort()\n        assigned = None\n        for au in divs:\n            if gcd(au, prod//au)!=g: continue\n            if (au* (prod//au)) != prod: continue\n            if math.gcd(au, prod//au)!=g: continue\n            # attempt BFS assignment using formulas: for edge x-y with g,l, given a_x, enforce a_y = g*l / a_x\n            A = {}\n            q = deque()\n            A[u]=au\n            q.append(u)\n            good = True\n            while q and good:\n                x = q.popleft()\n                for (y,g2,l2) in adj[x]:\n                    need = (g2*l2)//A[x] if A[x] != 0 else None\n                    if (g2*l2) % A[x] != 0:\n                        good=False; break\n                    ay = need\n                    if ay<=0 or ay>10**18:\n                        good=False; break\n                    if y in A:\n                        if A[y]!=ay:\n                            good=False; break\n                    else:\n                        # check gcd condition\n                        if math.gcd(A[x], ay)!=g2:\n                            good=False; break\n                        A[y]=ay\n                        q.append(y)\n            if not good:\n                continue\n            # verify all edges in component\n            for (x,y,g2,l2) in edges:\n                if x in A and y in A:\n                    if math.gcd(A[x],A[y])!=g2 or (A[x]*A[y])!=(g2*l2):\n                        good=False; break\n            if good:\n                assigned=A\n                break\n        if assigned is None:\n            print(\"NO\"); return\n        for node in comp:\n            if node in assigned:\n                res[node]=assigned[node]\n            else:\n                # isolated within comp? shouldn't happen\n                res[node]=1\n    # final verify all given edges\n    for (u,v,g,l) in edges:\n        if math.gcd(res[u],res[v])!=g or res[u]*res[v]!=(g*l):\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 1236,
        "thoughts_token_count": 0
    }
}