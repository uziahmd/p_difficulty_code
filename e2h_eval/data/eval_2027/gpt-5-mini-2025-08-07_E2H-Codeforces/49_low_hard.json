{
    "start": 1758284952.951375,
    "end": 1758285018.2882352,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Exploring edge pairs and values**\n\nI realize that the edge's pair could be (p,q), and the allowed set being the intersection across edges means that if two edges have differing pairs, the intersection might only yield one or two values. For inequality edges, the endpoints need to have different values from that edge's pair. A simpler approach might be to represent values mapped to boolean 0/1 per node, based on choosing smaller or larger exponents for the edges, but consistency in exponent numbers is crucial.",
    "response": "import sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = sieve_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n    edges.append((u-1,v-1,g,l))\n\n# Basic check: l must be divisible by g\nfor (_,_,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Factorize all g and l, store per edge\nedge_factors_g = []\nedge_factors_l = []\nprimes_set = set()\nfor (_,_,g,l) in edges:\n    fg = factorize(g) if g>1 else {}\n    fl = factorize(l) if l>1 else {}\n    edge_factors_g.append(fg)\n    edge_factors_l.append(fl)\n    primes_set.update(fg.keys())\n    primes_set.update(fl.keys())\n\nn_nodes = n\n# For each prime, build adjacency and process constraints\n# Initialize exponents per prime per node dict of dicts\nexponents = [defaultdict(int) for _ in range(n_nodes)]  # exponents[node][p]=exp\n\nfor p in primes_set:\n    # For each edge, get exponents\n    incident = defaultdict(list)  # node -> list of incident edge indices\n    eg_list = []\n    el_list = []\n    for idx,(u,v,g,l) in enumerate(edges):\n        eg = edge_factors_g[idx].get(p,0)\n        el = edge_factors_l[idx].get(p,0)\n        if eg==0 and el==0:\n            eg_list.append(None)\n            el_list.append(None)\n            continue\n        eg_list.append(eg)\n        el_list.append(el)\n        incident[u].append(idx)\n        incident[v].append(idx)\n    # If no incidents, all exponents are zero for this prime\n    if not incident:\n        continue\n    # Allowed sets per node\n    allowed = {}\n    for node in incident:\n        allowed[node] = None\n    for idx in range(len(edges)):\n        if eg_list[idx] is None:\n            continue\n        u,v,_,_ = edges[idx]\n        eg = eg_list[idx]; el = el_list[idx]\n        S = {eg, el}\n        # For u\n        if allowed[u] is None:\n            allowed[u] = set(S)\n        else:\n            allowed[u] &= S\n        if not allowed[u]:\n            print(\"NO\"); sys.exit(0)\n        # For v\n        if allowed[v] is None:\n            allowed[v] = set(S)\n        else:\n            allowed[v] &= S\n        if not allowed[v]:\n            print(\"NO\"); sys.exit(0)\n    # Build adjacency with edge info for propagation\n    adj = defaultdict(list)  # node -> list of (neighbor, eg, el)\n    for idx in range(len(edges)):\n        if eg_list[idx] is None:\n            continue\n        u,v,_,_ = edges[idx]\n        eg = eg_list[idx]; el = el_list[idx]\n        adj[u].append((v,eg,el,idx))\n        adj[v].append((u,eg,el,idx))\n    # Nodes not in allowed but present in adj? ensured allowed set created for incident nodes\n    # Initialize queue with singletons and also edges with eg==el to enforce\n    q = deque()\n    for node, S in list(allowed.items()):\n        if len(S)==1:\n            q.append(node)\n    # Also enforce edges where eg==el: both nodes must equal that value\n    for idx in range(len(edges)):\n        if eg_list[idx] is None: continue\n        if eg_list[idx]==el_list[idx]:\n            u,v,_,_ = edges[idx]\n            val = eg_list[idx]\n            # intersect allowed[u] with {val}\n            if val not in allowed[u]:\n                print(\"NO\"); sys.exit(0)\n            if len(allowed[u])>1:\n                allowed[u] = {val}\n                q.append(u)\n            if val not in allowed[v]:\n                print(\"NO\"); sys.exit(0)\n            if len(allowed[v])>1:\n                allowed[v] = {val}\n                q.append(v)\n    # Propagate\n    while q:\n        node = q.popleft()\n        if node not in allowed:\n            continue\n        if len(allowed[node])!=1:\n            continue\n        val_node = next(iter(allowed[node]))\n        for (nei, eg, el, idx) in adj[node]:\n            if eg==el:\n                # neighbor must be eg\n                if allowed[nei] is None:\n                    allowed[nei] = {eg}\n                    q.append(nei)\n                else:\n                    if eg not in allowed[nei]:\n                        print(\"NO\"); sys.exit(0)\n                    if len(allowed[nei])>1:\n                        allowed[nei] = {eg}\n                        q.append(nei)\n            else:\n                # neighbor must be the other value from {eg,el}\n                other = el if val_node==eg else eg if val_node==el else None\n                if other is None:\n                    # node's value not in edge pair -> impossible\n                    print(\"NO\"); sys.exit(0)\n                if allowed[nei] is None:\n                    allowed[nei] = {other}\n                    q.append(nei)\n                else:\n                    if other not in allowed[nei]:\n                        print(\"NO\"); sys.exit(0)\n                    if len(allowed[nei])>1:\n                        allowed[nei] = {other}\n                        q.append(nei)\n    # Now remaining nodes may have allowed size 2. Need to satisfy inequality edges between them.\n    # Build graph restricted to nodes with allowed size 2\n    two_nodes = [node for node,S in allowed.items() if len(S)==2]\n    visited = {}\n    for node in two_nodes:\n        if node in visited:\n            continue\n        # BFS component\n        # We'll assign boolean 0/1 mapping to the two values in allowed[node]\n        vals = list(allowed[node])\n        a,b = vals[0], vals[1]\n        # For consistency across component, ensure every node's allowed set is exactly {a,b}\n        comp_nodes = []\n        dq = deque([node])\n        visited[node]=0\n        mapping = {node:0}\n        comp_nodes.append(node)\n        ok = True\n        while dq:\n            cur = dq.popleft()\n            for (nei, eg, el, idx) in adj[cur]:\n                # Edge must have pair subset of allowed sets, else already eliminated above\n                # This edge requires either equality (eg==el) handled before, or inequality.\n                if eg==el:\n                    # both fixed already, should not be here\n                    continue\n                # neighbor allowed must contain both a and b\n                if nei not in allowed:\n                    ok=False; break\n                if allowed[nei] != {a,b}:\n                    ok=False; break\n                if nei not in visited:\n                    visited[nei]=visited[cur]^1\n                    mapping[nei]=visited[nei]\n                    dq.append(nei)\n                    comp_nodes.append(nei)\n                else:\n                    if visited[nei] == visited[cur]:\n                        ok=False; break\n            if not ok:\n                break\n        if not ok:\n            print(\"NO\"); sys.exit(0)\n        # assign actual values based on mapping: 0->a,1->b\n        for nd in comp_nodes:\n            assigned_val = a if mapping[nd]==0 else b\n            allowed[nd] = {assigned_val}\n    # After this, all incident nodes should have singleton allowed\n    for node,S in allowed.items():\n        if len(S)!=1:\n            print(\"NO\"); sys.exit(0)\n    # Set exponents for nodes: nodes not in allowed have exponent 0\n    for node in range(n_nodes):\n        if node in allowed:\n            exponents[node][p] = next(iter(allowed[node]))\n        else:\n            exponents[node][p] = 0\n\n# Build final numbers\nres = [1]*n_nodes\nfor i in range(n_nodes):\n    val = 1\n    for p,exp in exponents[i].items():\n        if exp>0:\n            val *= pow(p, exp)\n            # keep within reasonable bound\n            if val > 10**18:\n                pass\n    res[i]=val\n\n# Validate all edges\nimport math\nfor idx,(u,v,g,l) in enumerate(edges):\n    a = res[u]; b = res[v]\n    gg = math.gcd(a,b)\n    if gg != g:\n        print(\"NO\"); sys.exit(0)\n    # compute lcm carefully\n    if a//gg * b != l:\n        print(\"NO\"); sys.exit(0)\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = sieve_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it)); v = int(next(it)); g = int(next(it)); l = int(next(it))\n    edges.append((u-1,v-1,g,l))\n\n# Basic check: l must be divisible by g\nfor (_,_,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Factorize all g and l, store per edge\nedge_factors_g = []\nedge_factors_l = []\nprimes_set = set()\nfor (_,_,g,l) in edges:\n    fg = factorize(g) if g>1 else {}\n    fl = factorize(l) if l>1 else {}\n    edge_factors_g.append(fg)\n    edge_factors_l.append(fl)\n    primes_set.update(fg.keys())\n    primes_set.update(fl.keys())\n\nn_nodes = n\n# For each prime, build adjacency and process constraints\n# Initialize exponents per prime per node dict of dicts\nexponents = [defaultdict(int) for _ in range(n_nodes)]  # exponents[node][p]=exp\n\nfor p in primes_set:\n    # For each edge, get exponents\n    incident = defaultdict(list)  # node -> list of incident edge indices\n    eg_list = []\n    el_list = []\n    for idx,(u,v,g,l) in enumerate(edges):\n        eg = edge_factors_g[idx].get(p,0)\n        el = edge_factors_l[idx].get(p,0)\n        if eg==0 and el==0:\n            eg_list.append(None)\n            el_list.append(None)\n            continue\n        eg_list.append(eg)\n        el_list.append(el)\n        incident[u].append(idx)\n        incident[v].append(idx)\n    # If no incidents, all exponents are zero for this prime\n    if not incident:\n        continue\n    # Allowed sets per node\n    allowed = {}\n    for node in incident:\n        allowed[node] = None\n    for idx in range(len(edges)):\n        if eg_list[idx] is None:\n            continue\n        u,v,_,_ = edges[idx]\n        eg = eg_list[idx]; el = el_list[idx]\n        S = {eg, el}\n        # For u\n        if allowed[u] is None:\n            allowed[u] = set(S)\n        else:\n            allowed[u] &= S\n        if not allowed[u]:\n            print(\"NO\"); sys.exit(0)\n        # For v\n        if allowed[v] is None:\n            allowed[v] = set(S)\n        else:\n            allowed[v] &= S\n        if not allowed[v]:\n            print(\"NO\"); sys.exit(0)\n    # Build adjacency with edge info for propagation\n    adj = defaultdict(list)  # node -> list of (neighbor, eg, el)\n    for idx in range(len(edges)):\n        if eg_list[idx] is None:\n            continue\n        u,v,_,_ = edges[idx]\n        eg = eg_list[idx]; el = el_list[idx]\n        adj[u].append((v,eg,el,idx))\n        adj[v].append((u,eg,el,idx))\n    # Nodes not in allowed but present in adj? ensured allowed set created for incident nodes\n    # Initialize queue with singletons and also edges with eg==el to enforce\n    q = deque()\n    for node, S in list(allowed.items()):\n        if len(S)==1:\n            q.append(node)\n    # Also enforce edges where eg==el: both nodes must equal that value\n    for idx in range(len(edges)):\n        if eg_list[idx] is None: continue\n        if eg_list[idx]==el_list[idx]:\n            u,v,_,_ = edges[idx]\n            val = eg_list[idx]\n            # intersect allowed[u] with {val}\n            if val not in allowed[u]:\n                print(\"NO\"); sys.exit(0)\n            if len(allowed[u])>1:\n                allowed[u] = {val}\n                q.append(u)\n            if val not in allowed[v]:\n                print(\"NO\"); sys.exit(0)\n            if len(allowed[v])>1:\n                allowed[v] = {val}\n                q.append(v)\n    # Propagate\n    while q:\n        node = q.popleft()\n        if node not in allowed:\n            continue\n        if len(allowed[node])!=1:\n            continue\n        val_node = next(iter(allowed[node]))\n        for (nei, eg, el, idx) in adj[node]:\n            if eg==el:\n                # neighbor must be eg\n                if allowed[nei] is None:\n                    allowed[nei] = {eg}\n                    q.append(nei)\n                else:\n                    if eg not in allowed[nei]:\n                        print(\"NO\"); sys.exit(0)\n                    if len(allowed[nei])>1:\n                        allowed[nei] = {eg}\n                        q.append(nei)\n            else:\n                # neighbor must be the other value from {eg,el}\n                other = el if val_node==eg else eg if val_node==el else None\n                if other is None:\n                    # node's value not in edge pair -> impossible\n                    print(\"NO\"); sys.exit(0)\n                if allowed[nei] is None:\n                    allowed[nei] = {other}\n                    q.append(nei)\n                else:\n                    if other not in allowed[nei]:\n                        print(\"NO\"); sys.exit(0)\n                    if len(allowed[nei])>1:\n                        allowed[nei] = {other}\n                        q.append(nei)\n    # Now remaining nodes may have allowed size 2. Need to satisfy inequality edges between them.\n    # Build graph restricted to nodes with allowed size 2\n    two_nodes = [node for node,S in allowed.items() if len(S)==2]\n    visited = {}\n    for node in two_nodes:\n        if node in visited:\n            continue\n        # BFS component\n        # We'll assign boolean 0/1 mapping to the two values in allowed[node]\n        vals = list(allowed[node])\n        a,b = vals[0], vals[1]\n        # For consistency across component, ensure every node's allowed set is exactly {a,b}\n        comp_nodes = []\n        dq = deque([node])\n        visited[node]=0\n        mapping = {node:0}\n        comp_nodes.append(node)\n        ok = True\n        while dq:\n            cur = dq.popleft()\n            for (nei, eg, el, idx) in adj[cur]:\n                # Edge must have pair subset of allowed sets, else already eliminated above\n                # This edge requires either equality (eg==el) handled before, or inequality.\n                if eg==el:\n                    # both fixed already, should not be here\n                    continue\n                # neighbor allowed must contain both a and b\n                if nei not in allowed:\n                    ok=False; break\n                if allowed[nei] != {a,b}:\n                    ok=False; break\n                if nei not in visited:\n                    visited[nei]=visited[cur]^1\n                    mapping[nei]=visited[nei]\n                    dq.append(nei)\n                    comp_nodes.append(nei)\n                else:\n                    if visited[nei] == visited[cur]:\n                        ok=False; break\n            if not ok:\n                break\n        if not ok:\n            print(\"NO\"); sys.exit(0)\n        # assign actual values based on mapping: 0->a,1->b\n        for nd in comp_nodes:\n            assigned_val = a if mapping[nd]==0 else b\n            allowed[nd] = {assigned_val}\n    # After this, all incident nodes should have singleton allowed\n    for node,S in allowed.items():\n        if len(S)!=1:\n            print(\"NO\"); sys.exit(0)\n    # Set exponents for nodes: nodes not in allowed have exponent 0\n    for node in range(n_nodes):\n        if node in allowed:\n            exponents[node][p] = next(iter(allowed[node]))\n        else:\n            exponents[node][p] = 0\n\n# Build final numbers\nres = [1]*n_nodes\nfor i in range(n_nodes):\n    val = 1\n    for p,exp in exponents[i].items():\n        if exp>0:\n            val *= pow(p, exp)\n            # keep within reasonable bound\n            if val > 10**18:\n                pass\n    res[i]=val\n\n# Validate all edges\nimport math\nfor idx,(u,v,g,l) in enumerate(edges):\n    a = res[u]; b = res[v]\n    gg = math.gcd(a,b)\n    if gg != g:\n        print(\"NO\"); sys.exit(0)\n    # compute lcm carefully\n    if a//gg * b != l:\n        print(\"NO\"); sys.exit(0)\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 4497,
        "thoughts_token_count": 2432
    }
}