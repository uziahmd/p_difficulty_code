{
    "start": 1758284954.3006942,
    "end": 1758284979.3569162,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Exploring value computation**\n\nI'm working with the idea that gcd times lcm equals the product, and I can express a[v] in terms of a[u]. If I know a[u], I can uniquely determine a[v]. It seems like I can use BFS within components to assign values, ensuring they are integers and consistent with gcd and lcm. I may need to represent values as rational numbers, and it's crucial they result as integers. There’s also a common solution to compute values using constraints in connected components.",
    "response": "```python\n#!/usr/bin/env python3\nimport sys\nfrom collections import deque, defaultdict\nfrom fractions import Fraction\nfrom math import gcd\n\ndef lcm(a,b):\n    return a//gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        L = int(next(it))\n        # quick invalid\n        if L % g != 0:\n            print(\"NO\")\n            return\n        p = g * L\n        edges.append((u,v,g,L,p))\n        adj[u].append((v,g,L,p))\n        adj[v].append((u,g,L,p))\n    A = [None]*n  # Fractions\n    for i in range(n):\n        if A[i] is not None:\n            continue\n        # BFS component\n        A[i] = Fraction(1,1)\n        q = deque([i])\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            for v,g,L,p in adj[u]:\n                # relation a[u]*a[v] = p\n                val = Fraction(p,1) / A[u]\n                if A[v] is None:\n                    A[v] = val\n                    q.append(v)\n                else:\n                    if A[v] != val:\n                        ok = False\n                        break\n        if not ok:\n            print(\"NO\")\n            return\n    # For each connected component we can scale by factor; but we used start=1 per component.\n    # Need to scale to integers. Compute lcm of denominators per component.\n    comp_nodes = {}\n    comp_id = [-1]*n\n    cid = 0\n    for i in range(n):\n        if comp_id[i] != -1:\n            continue\n        # collect component\n        stack = [i]\n        comp_id[i] = cid\n        nodes = [i]\n        while stack:\n            u = stack.pop()\n            for v,_,_,_ in adj[u]:\n                if comp_id[v] == -1:\n                    comp_id[v] = cid\n                    stack.append(v)\n                    nodes.append(v)\n        comp_nodes[cid] = nodes\n        cid += 1\n    result = [0]*n\n    for c in range(cid):\n        nodes = comp_nodes[c]\n        D = 1\n        for u in nodes:\n            frac = A[u]\n            D = lcm(D, frac.denominator)\n        # scale\n        for u in nodes:\n            val = A[u] * D\n            if val.denominator != 1:\n                print(\"NO\")\n                return\n            result[u] = val.numerator\n    # Now verify all edges constraints\n    for u,v,g,L,p in edges:\n        au = result[u]; av = result[v]\n        if au <= 0 or av <= 0:\n            print(\"NO\"); return\n        if gcd(au,av) != g:\n            print(\"NO\"); return\n        # compute lcm carefully\n        # lcm = au//gcd(au,av)*av\n        lcm_uv = au//gcd(au,av)*av\n        if lcm_uv != L:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in result))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "#!/usr/bin/env python3\nimport sys\nfrom collections import deque, defaultdict\nfrom fractions import Fraction\nfrom math import gcd\n\ndef lcm(a,b):\n    return a//gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        L = int(next(it))\n        # quick invalid\n        if L % g != 0:\n            print(\"NO\")\n            return\n        p = g * L\n        edges.append((u,v,g,L,p))\n        adj[u].append((v,g,L,p))\n        adj[v].append((u,g,L,p))\n    A = [None]*n  # Fractions\n    for i in range(n):\n        if A[i] is not None:\n            continue\n        # BFS component\n        A[i] = Fraction(1,1)\n        q = deque([i])\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            for v,g,L,p in adj[u]:\n                # relation a[u]*a[v] = p\n                val = Fraction(p,1) / A[u]\n                if A[v] is None:\n                    A[v] = val\n                    q.append(v)\n                else:\n                    if A[v] != val:\n                        ok = False\n                        break\n        if not ok:\n            print(\"NO\")\n            return\n    # For each connected component we can scale by factor; but we used start=1 per component.\n    # Need to scale to integers. Compute lcm of denominators per component.\n    comp_nodes = {}\n    comp_id = [-1]*n\n    cid = 0\n    for i in range(n):\n        if comp_id[i] != -1:\n            continue\n        # collect component\n        stack = [i]\n        comp_id[i] = cid\n        nodes = [i]\n        while stack:\n            u = stack.pop()\n            for v,_,_,_ in adj[u]:\n                if comp_id[v] == -1:\n                    comp_id[v] = cid\n                    stack.append(v)\n                    nodes.append(v)\n        comp_nodes[cid] = nodes\n        cid += 1\n    result = [0]*n\n    for c in range(cid):\n        nodes = comp_nodes[c]\n        D = 1\n        for u in nodes:\n            frac = A[u]\n            D = lcm(D, frac.denominator)\n        # scale\n        for u in nodes:\n            val = A[u] * D\n            if val.denominator != 1:\n                print(\"NO\")\n                return\n            result[u] = val.numerator\n    # Now verify all edges constraints\n    for u,v,g,L,p in edges:\n        au = result[u]; av = result[v]\n        if au <= 0 or av <= 0:\n            print(\"NO\"); return\n        if gcd(au,av) != g:\n            print(\"NO\"); return\n        # compute lcm carefully\n        # lcm = au//gcd(au,av)*av\n        lcm_uv = au//gcd(au,av)*av\n        if lcm_uv != L:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in result))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 1736,
        "thoughts_token_count": 960
    }
}