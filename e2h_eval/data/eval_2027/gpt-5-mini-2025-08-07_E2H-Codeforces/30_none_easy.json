{
    "start": 1758294626.32591,
    "end": 1758294641.5515368,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    # We want to maximize sum of the two constructed numbers interpreted as integers.\n    # Appending digits from left to right to S1 and S2: final S1+S2 equals sum over positions of digit * (10^{remaining_length_in_S1_or_S2})\n    # Equivalent to choose for each digit whether it goes to Homer (H) or Marge (M), each gets exactly n digits,\n    # to maximize the combined numeric value. The contribution of a digit assigned as k-th digit (from left) in that player's number\n    # depends on how many digits will follow in that player's number. A greedy optimal strategy: assign larger digits earlier so they get higher place value.\n    # This reduces to: we need to build two sequences preserving order of A; positions chosen for H (n of them) and M (n of them).\n    # The total value equals sum over digits A[i] * 10^{remaining slots for that player's unfilled picks after i}.\n    # Equivalent dynamic programming: choose positions to maximize sum with weights being powers of 10.\n    # But since n <= 18, 2n <= 36, we can DP over counts taken by Homer so far.\n    s = A\n    L = 2 * n\n    pow10 = [1] * (n+1)\n    for i in range(1, n+1):\n        pow10[i] = pow10[i-1] * 10\n    # DP[i][h] = max total for suffix starting at position i with h picks made by Homer so far\n    # But easier to do forward DP: dp[pos][h] = max total value of already-constructed prefixes (considering place multipliers) after processing pos digits with Homer having taken h.\n    # When taking a digit for Homer, remaining slots for Homer after this pick = n - (h+1), so its multiplier is 10^{n - (h+1)}.\n    # Similarly for Marge with m = pos-h picks so far, multiplier 10^{n - (m+1)}.\n    NEG = -10**100\n    dp = [[NEG] * (n+1) for _ in range(L+1)]\n    par = [[None] * (n+1) for _ in range(L+1)]\n    dp[0][0] = 0\n    for pos in range(L):\n        d = int(s[pos])\n        for h in range(0, n+1):\n            if dp[pos][h] == NEG:\n                continue\n            m = pos - h\n            # give to Homer if h < n\n            if h < n:\n                mult = pow10[n - (h+1)]\n                val = dp[pos][h] + d * mult\n                if val > dp[pos+1][h+1]:\n                    dp[pos+1][h+1] = val\n                    par[pos+1][h+1] = ('H', h)\n            # give to Marge if m < n\n            if m < n:\n                mult = pow10[n - (m+1)]\n                val = dp[pos][h] + d * mult\n                if val > dp[pos+1][h]:\n                    dp[pos+1][h] = val\n                    par[pos+1][h] = ('M', h)\n    # reconstruct from dp[L][n]\n    res = []\n    h = n\n    pos = L\n    while pos > 0:\n        p = par[pos][h]\n        if p is None:\n            break\n        who, prev_h = p\n        res.append(who)\n        h = prev_h\n        pos -= 1\n    res.reverse()\n    print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    # We want to maximize sum of the two constructed numbers interpreted as integers.\n    # Appending digits from left to right to S1 and S2: final S1+S2 equals sum over positions of digit * (10^{remaining_length_in_S1_or_S2})\n    # Equivalent to choose for each digit whether it goes to Homer (H) or Marge (M), each gets exactly n digits,\n    # to maximize the combined numeric value. The contribution of a digit assigned as k-th digit (from left) in that player's number\n    # depends on how many digits will follow in that player's number. A greedy optimal strategy: assign larger digits earlier so they get higher place value.\n    # This reduces to: we need to build two sequences preserving order of A; positions chosen for H (n of them) and M (n of them).\n    # The total value equals sum over digits A[i] * 10^{remaining slots for that player's unfilled picks after i}.\n    # Equivalent dynamic programming: choose positions to maximize sum with weights being powers of 10.\n    # But since n <= 18, 2n <= 36, we can DP over counts taken by Homer so far.\n    s = A\n    L = 2 * n\n    pow10 = [1] * (n+1)\n    for i in range(1, n+1):\n        pow10[i] = pow10[i-1] * 10\n    # DP[i][h] = max total for suffix starting at position i with h picks made by Homer so far\n    # But easier to do forward DP: dp[pos][h] = max total value of already-constructed prefixes (considering place multipliers) after processing pos digits with Homer having taken h.\n    # When taking a digit for Homer, remaining slots for Homer after this pick = n - (h+1), so its multiplier is 10^{n - (h+1)}.\n    # Similarly for Marge with m = pos-h picks so far, multiplier 10^{n - (m+1)}.\n    NEG = -10**100\n    dp = [[NEG] * (n+1) for _ in range(L+1)]\n    par = [[None] * (n+1) for _ in range(L+1)]\n    dp[0][0] = 0\n    for pos in range(L):\n        d = int(s[pos])\n        for h in range(0, n+1):\n            if dp[pos][h] == NEG:\n                continue\n            m = pos - h\n            # give to Homer if h < n\n            if h < n:\n                mult = pow10[n - (h+1)]\n                val = dp[pos][h] + d * mult\n                if val > dp[pos+1][h+1]:\n                    dp[pos+1][h+1] = val\n                    par[pos+1][h+1] = ('H', h)\n            # give to Marge if m < n\n            if m < n:\n                mult = pow10[n - (m+1)]\n                val = dp[pos][h] + d * mult\n                if val > dp[pos+1][h]:\n                    dp[pos+1][h] = val\n                    par[pos+1][h] = ('M', h)\n    # reconstruct from dp[L][n]\n    res = []\n    h = n\n    pos = L\n    while pos > 0:\n        p = par[pos][h]\n        if p is None:\n            break\n        who, prev_h = p\n        res.append(who)\n        h = prev_h\n        pos -= 1\n    res.reverse()\n    print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 411,
        "completion_token_count": 854,
        "thoughts_token_count": 0
    }
}