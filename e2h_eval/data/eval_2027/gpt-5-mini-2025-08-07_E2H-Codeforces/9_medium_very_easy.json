{
    "start": 1758094705.5947711,
    "end": 1758094816.2537227,
    "start-formatted": "2025-09-17 16:38 KST",
    "end-formatted": "2025-09-17 16:40 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Considering computation strategies**\n\nI’m working on creating a best12 array length m+1 that gives the maximum cost with a capacity of ≤ R using weights of 1 and 2. My approach involves sorting and prefix sums for ones and twos, then iterating through possible numbers of twos. For each number of twos, I compute the total cost based on remaining capacity and number of ones. However, I realize this could lead to a complexity of O(m * (m/2)), which feels too large. I’ve got to find a more efficient method!",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.buffer.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n\n# build pair sums from ones\npair0 = []\ni = 0\nL1 = len(ones)\nwhile i + 1 < L1:\n    pair0.append(ones[i] + ones[i+1])\n    i += 2\n\npair1 = []\ni = 1\nwhile i + 1 < L1:\n    pair1.append(ones[i] + ones[i+1])\n    i += 2\n\n# merge twos and pair lists into combined lists\ndef merge_desc(a, b):\n    i = 0; j = 0\n    res = []\n    la = len(a); lb = len(b)\n    while i < la and j < lb:\n        if a[i] >= b[j]:\n            res.append(a[i]); i += 1\n        else:\n            res.append(b[j]); j += 1\n    if i < la:\n        res.extend(a[i:])\n    if j < lb:\n        res.extend(b[j:])\n    return res\n\ncombined0 = merge_desc(twos, pair0)\ncombined1 = merge_desc(twos, pair1)\n\n# prefix sums for combined lists\npref_comb0 = [0]\nfor v in combined0:\n    pref_comb0.append(pref_comb0[-1] + v)\npref_comb1 = [0]\nfor v in combined1:\n    pref_comb1.append(pref_comb1[-1] + v)\n\nbest = 0\nmax_threes = min(len(threes), m // 3)\nbest_single = ones[0] if ones else 0\nlenc0 = len(combined0)\nlenc1 = len(combined1)\nfor t in range(0, max_threes + 1):\n    sum3 = pref3[t]\n    R = m - 3 * t\n    k = R // 2\n    use_k0 = k if k <= lenc0 else lenc0\n    val_even = pref_comb0[use_k0]\n    if R % 2 == 1:\n        use_k1 = (R - 1) // 2\n        if use_k1 > lenc1:\n            use_k1 = lenc1\n        val_odd = best_single + pref_comb1[use_k1]\n        best12 = val_even if val_even >= val_odd else val_odd\n    else:\n        best12 = val_even\n    total = sum3 + best12\n    if total > best:\n        best = total\n\nprint(best)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.buffer.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n\n# build pair sums from ones\npair0 = []\ni = 0\nL1 = len(ones)\nwhile i + 1 < L1:\n    pair0.append(ones[i] + ones[i+1])\n    i += 2\n\npair1 = []\ni = 1\nwhile i + 1 < L1:\n    pair1.append(ones[i] + ones[i+1])\n    i += 2\n\n# merge twos and pair lists into combined lists\ndef merge_desc(a, b):\n    i = 0; j = 0\n    res = []\n    la = len(a); lb = len(b)\n    while i < la and j < lb:\n        if a[i] >= b[j]:\n            res.append(a[i]); i += 1\n        else:\n            res.append(b[j]); j += 1\n    if i < la:\n        res.extend(a[i:])\n    if j < lb:\n        res.extend(b[j:])\n    return res\n\ncombined0 = merge_desc(twos, pair0)\ncombined1 = merge_desc(twos, pair1)\n\n# prefix sums for combined lists\npref_comb0 = [0]\nfor v in combined0:\n    pref_comb0.append(pref_comb0[-1] + v)\npref_comb1 = [0]\nfor v in combined1:\n    pref_comb1.append(pref_comb1[-1] + v)\n\nbest = 0\nmax_threes = min(len(threes), m // 3)\nbest_single = ones[0] if ones else 0\nlenc0 = len(combined0)\nlenc1 = len(combined1)\nfor t in range(0, max_threes + 1):\n    sum3 = pref3[t]\n    R = m - 3 * t\n    k = R // 2\n    use_k0 = k if k <= lenc0 else lenc0\n    val_even = pref_comb0[use_k0]\n    if R % 2 == 1:\n        use_k1 = (R - 1) // 2\n        if use_k1 > lenc1:\n            use_k1 = lenc1\n        val_odd = best_single + pref_comb1[use_k1]\n        best12 = val_even if val_even >= val_odd else val_odd\n    else:\n        best12 = val_even\n    total = sum3 + best12\n    if total > best:\n        best = total\n\nprint(best)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 6886,
        "thoughts_token_count": 6208
    }
}