{
    "start": 1758094698.4929004,
    "end": 1758094796.0365508,
    "start-formatted": "2025-09-17 16:38 KST",
    "end-formatted": "2025-09-17 16:39 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Evaluating optimization strategy**\n\nI’m considering the feasibility of using nested loops, especially since the full loop could be intensive with lengths up to 1e5 and weights also reaching that size, but m is limited to 3e5. A better plan might be precomputing the best values for capacities using a greedy two-pointer method for weights1 and weights2. By building sorted lists for both weights, I can use dynamic programming to optimize the process without running into performance issues.",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n\n# form pairs of ones\npair1 = []\nfor i in range(0, len(ones) - 1, 2):\n    pair1.append(ones[i] + ones[i+1])\npair1.sort(reverse=True)\n\n# merge pair1 and twos into blocks\nmax_blocks_needed = m // 2\ni = 0\nj = 0\nblocks = []\nis_pair = []\nwhile len(blocks) < max_blocks_needed and (i < len(pair1) or j < len(twos)):\n    val1 = pair1[i] if i < len(pair1) else -1\n    val2 = twos[j] if j < len(twos) else -1\n    if val1 >= val2:\n        blocks.append(val1)\n        is_pair.append(1)\n        i += 1\n    else:\n        blocks.append(val2)\n        is_pair.append(0)\n        j += 1\n\n# prefix sums of blocks and count of pairs among first k blocks\npf_blocks = [0]\npf_pairs = [0]\nfor idx, val in enumerate(blocks):\n    pf_blocks.append(pf_blocks[-1] + val)\n    pf_pairs.append(pf_pairs[-1] + is_pair[idx])\n\nans = 0\nmax_k3 = min(len(threes), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    cost3 = pref3[k3]\n    rem = m - 3 * k3\n    t = rem // 2\n    b = min(t, len(blocks))\n    val = pf_blocks[b]\n    pairs_used = pf_pairs[b]\n    if rem % 2 == 1:\n        idx_one = 2 * pairs_used\n        if idx_one < len(ones):\n            val += ones[idx_one]\n    total = cost3 + val\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n\n# form pairs of ones\npair1 = []\nfor i in range(0, len(ones) - 1, 2):\n    pair1.append(ones[i] + ones[i+1])\npair1.sort(reverse=True)\n\n# merge pair1 and twos into blocks\nmax_blocks_needed = m // 2\ni = 0\nj = 0\nblocks = []\nis_pair = []\nwhile len(blocks) < max_blocks_needed and (i < len(pair1) or j < len(twos)):\n    val1 = pair1[i] if i < len(pair1) else -1\n    val2 = twos[j] if j < len(twos) else -1\n    if val1 >= val2:\n        blocks.append(val1)\n        is_pair.append(1)\n        i += 1\n    else:\n        blocks.append(val2)\n        is_pair.append(0)\n        j += 1\n\n# prefix sums of blocks and count of pairs among first k blocks\npf_blocks = [0]\npf_pairs = [0]\nfor idx, val in enumerate(blocks):\n    pf_blocks.append(pf_blocks[-1] + val)\n    pf_pairs.append(pf_pairs[-1] + is_pair[idx])\n\nans = 0\nmax_k3 = min(len(threes), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    cost3 = pref3[k3]\n    rem = m - 3 * k3\n    t = rem // 2\n    b = min(t, len(blocks))\n    val = pf_blocks[b]\n    pairs_used = pf_pairs[b]\n    if rem % 2 == 1:\n        idx_one = 2 * pairs_used\n        if idx_one < len(ones):\n            val += ones[idx_one]\n    total = cost3 + val\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 5619,
        "thoughts_token_count": 5056
    }
}