{
    "start": 1758290692.4572155,
    "end": 1758290755.288288,
    "start-formatted": "2025-09-19 23:04 KST",
    "end-formatted": "2025-09-19 23:05 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Evaluating input handling**\n\nI worked with candidate 27 earlier and figured out that the algorithm seems solid. The complexity is O(n), which is efficient. I need to consider edge cases, especially since n can go up to 1e5. Also, the inputs might have multiple test cases concatenated. The example shows two test cases as separate lines, but the problem likely involves a single instance. I’ll implement the code to read all input and split based on whitespace, but I need to remember that the string of digits won’t have spaces.",
    "response": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n    s = next(it)\n    pre = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pre[i] = pre[i - 1] + a[i - 1]\n    curr = 0\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            if curr + pre[i] > ans:\n                ans = curr + pre[i]\n            curr += a[i]\n    if curr > ans:\n        ans = curr\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n    s = next(it)\n    pre = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pre[i] = pre[i - 1] + a[i - 1]\n    curr = 0\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            if curr + pre[i] > ans:\n                ans = curr + pre[i]\n            curr += a[i]\n    if curr > ans:\n        ans = curr\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 524,
        "completion_token_count": 2183,
        "thoughts_token_count": 1984
    }
}