{
    "start": 1758294623.1034448,
    "end": 1758294646.163248,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef lcm(a,b):\n    if a==0 or b==0: return 0\n    return a//gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); L = int(next(it))\n        edges.append((u,v,g,L))\n        adj[u].append((v,g,L))\n        adj[v].append((u,g,L))\n    A = [0]*n\n    visited = [False]*n\n    for i in range(n):\n        if visited[i]: continue\n        if not adj[i]:\n            A[i]=1\n            visited[i]=True\n            continue\n        # Try to assign by BFS with starting value as product of gcds? We'll compute candidate for node i as value divisible by all gcds on incident edges and consistent with lcms.\n        # Strategy: pick start value s from 1..1e6 trying divisors from incident constraints. We'll derive multiplicative ratio by propagation: for edge u-v with gcd g and lcm L, values must be x,y with gcd(x,y)=g and lcm=L.\n        # Let x = g * x', y = g * y', with gcd(x',y')=1 and x'*y' = L//g\n        comp = []\n        q = deque([i]); visited_tmp = set([i])\n        nodes = []\n        while q:\n            u = q.popleft(); nodes.append(u)\n            for v,g,L in adj[u]:\n                if v not in visited_tmp:\n                    visited_tmp.add(v); q.append(v)\n        # collect candidates for starting node as divisors of product constraints: from each edge (i - v) potential value must be multiple of g and divide L\n        # We'll try all divisors d of possible value space up to 1e6: intersection of sets {x | g | x and x | L} across edges incident to node i? For correctness, try all divisors of product of Ls maybe large. Instead generate possible x for node by iterating divisors of L for each incident edge and intersect.\n        candidates = None\n        for u in nodes:\n            if not adj[u]: continue\n            # for node u, possible values per each incident edge must be multiples of g and divisors of L\n            poss_u = None\n            for v,g,L in adj[u]:\n                # possible values for u from this edge are divisors d of L such that g divides d and gcd(d, ?) well later. But d must satisfy: exists y with gcd(d,y)=g and lcm(d,y)=L. That implies d divides L and g divides d and (d//g) divides (L//g) and gcd(d//g, (L//g)//(d//g))==1. But easier: d must be g * d' where d' divides (L//g).\n                base = L//g\n                # enumerate divisors of base\n                divs = []\n                j=1\n                while j*j<=base:\n                    if base%j==0:\n                        divs.append(j); \n                        if j*j!=base: divs.append(base//j)\n                    j+=1\n                valid = set()\n                for dprime in divs:\n                    d = g * dprime\n                    valid.add(d)\n                if poss_u is None:\n                    poss_u = valid\n                else:\n                    poss_u &= valid\n                if not poss_u:\n                    break\n            if poss_u is None:\n                poss_u = set([1])\n            if candidates is None:\n                candidates = poss_u.copy()\n            else:\n                candidates &= poss_u\n            if not candidates:\n                break\n        if not candidates:\n            print(\"NO\"); return\n        # try candidates for starting node i (pick any node in component as root)\n        root = nodes[0]\n        ok_assign = None\n        for start_val in sorted(candidates):\n            if start_val==0 or start_val>10**6: continue\n            vals = {}\n            possible = True\n            dq = deque([root]); vals[root]=start_val\n            while dq and possible:\n                u = dq.popleft()\n                for v,g,L in adj[u]:\n                    xu = vals[u]\n                    # need y such that gcd(xu,y)=g and lcm(xu,y)=L\n                    if xu % g != 0:\n                        possible = False; break\n                    if L % xu != 0:\n                        # maybe xu is y, but edge symmetric; if xu doesn't divide L then impossible\n                        possible = False; break\n                    # Let xu = g * a, y = g * b, with a*b = L//g and gcd(a,b)=1, and a = xu//g must divide base\n                    a = xu//g\n                    base = L//g\n                    if base % a != 0:\n                        possible = False; break\n                    b = base // a\n                    # need gcd(a,b)==1\n                    if gcd(a,b) != 1:\n                        possible = False; break\n                    y = g * b\n                    if y>10**6:\n                        possible = False; break\n                    if v in vals:\n                        if vals[v]!=y:\n                            possible = False; break\n                    else:\n                        vals[v]=y; dq.append(v)\n            if possible:\n                # check all edges within comp satisfy both ways\n                for u,v,g,L in edges:\n                    pass\n                ok_assign = vals\n                break\n        if ok_assign is None:\n            print(\"NO\"); return\n        for u in nodes:\n            A[u]=ok_assign.get(u,1)\n            visited[u]=True\n    # final verify all edges\n    for u,v,g,L in edges:\n        x=A[u]; y=A[v]\n        if gcd(x,y)!=g or lcm(x,y)!=L:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef lcm(a,b):\n    if a==0 or b==0: return 0\n    return a//gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); L = int(next(it))\n        edges.append((u,v,g,L))\n        adj[u].append((v,g,L))\n        adj[v].append((u,g,L))\n    A = [0]*n\n    visited = [False]*n\n    for i in range(n):\n        if visited[i]: continue\n        if not adj[i]:\n            A[i]=1\n            visited[i]=True\n            continue\n        # Try to assign by BFS with starting value as product of gcds? We'll compute candidate for node i as value divisible by all gcds on incident edges and consistent with lcms.\n        # Strategy: pick start value s from 1..1e6 trying divisors from incident constraints. We'll derive multiplicative ratio by propagation: for edge u-v with gcd g and lcm L, values must be x,y with gcd(x,y)=g and lcm=L.\n        # Let x = g * x', y = g * y', with gcd(x',y')=1 and x'*y' = L//g\n        comp = []\n        q = deque([i]); visited_tmp = set([i])\n        nodes = []\n        while q:\n            u = q.popleft(); nodes.append(u)\n            for v,g,L in adj[u]:\n                if v not in visited_tmp:\n                    visited_tmp.add(v); q.append(v)\n        # collect candidates for starting node as divisors of product constraints: from each edge (i - v) potential value must be multiple of g and divide L\n        # We'll try all divisors d of possible value space up to 1e6: intersection of sets {x | g | x and x | L} across edges incident to node i? For correctness, try all divisors of product of Ls maybe large. Instead generate possible x for node by iterating divisors of L for each incident edge and intersect.\n        candidates = None\n        for u in nodes:\n            if not adj[u]: continue\n            # for node u, possible values per each incident edge must be multiples of g and divisors of L\n            poss_u = None\n            for v,g,L in adj[u]:\n                # possible values for u from this edge are divisors d of L such that g divides d and gcd(d, ?) well later. But d must satisfy: exists y with gcd(d,y)=g and lcm(d,y)=L. That implies d divides L and g divides d and (d//g) divides (L//g) and gcd(d//g, (L//g)//(d//g))==1. But easier: d must be g * d' where d' divides (L//g).\n                base = L//g\n                # enumerate divisors of base\n                divs = []\n                j=1\n                while j*j<=base:\n                    if base%j==0:\n                        divs.append(j); \n                        if j*j!=base: divs.append(base//j)\n                    j+=1\n                valid = set()\n                for dprime in divs:\n                    d = g * dprime\n                    valid.add(d)\n                if poss_u is None:\n                    poss_u = valid\n                else:\n                    poss_u &= valid\n                if not poss_u:\n                    break\n            if poss_u is None:\n                poss_u = set([1])\n            if candidates is None:\n                candidates = poss_u.copy()\n            else:\n                candidates &= poss_u\n            if not candidates:\n                break\n        if not candidates:\n            print(\"NO\"); return\n        # try candidates for starting node i (pick any node in component as root)\n        root = nodes[0]\n        ok_assign = None\n        for start_val in sorted(candidates):\n            if start_val==0 or start_val>10**6: continue\n            vals = {}\n            possible = True\n            dq = deque([root]); vals[root]=start_val\n            while dq and possible:\n                u = dq.popleft()\n                for v,g,L in adj[u]:\n                    xu = vals[u]\n                    # need y such that gcd(xu,y)=g and lcm(xu,y)=L\n                    if xu % g != 0:\n                        possible = False; break\n                    if L % xu != 0:\n                        # maybe xu is y, but edge symmetric; if xu doesn't divide L then impossible\n                        possible = False; break\n                    # Let xu = g * a, y = g * b, with a*b = L//g and gcd(a,b)=1, and a = xu//g must divide base\n                    a = xu//g\n                    base = L//g\n                    if base % a != 0:\n                        possible = False; break\n                    b = base // a\n                    # need gcd(a,b)==1\n                    if gcd(a,b) != 1:\n                        possible = False; break\n                    y = g * b\n                    if y>10**6:\n                        possible = False; break\n                    if v in vals:\n                        if vals[v]!=y:\n                            possible = False; break\n                    else:\n                        vals[v]=y; dq.append(v)\n            if possible:\n                # check all edges within comp satisfy both ways\n                for u,v,g,L in edges:\n                    pass\n                ok_assign = vals\n                break\n        if ok_assign is None:\n            print(\"NO\"); return\n        for u in nodes:\n            A[u]=ok_assign.get(u,1)\n            visited[u]=True\n    # final verify all edges\n    for u,v,g,L in edges:\n        x=A[u]; y=A[v]\n        if gcd(x,y)!=g or lcm(x,y)!=L:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 1362,
        "thoughts_token_count": 0
    }
}