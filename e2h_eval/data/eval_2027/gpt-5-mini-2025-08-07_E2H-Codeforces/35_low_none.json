{
    "start": 1758284918.6042233,
    "end": 1758284928.3130033,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Analyzing maximum sum problem**\n\nI'm working on a competitive programming problem called \"Find Maximum\" (276C). The main idea is to choose a number \\( x \\) less than or equal to \\( m \\) to maximize the sum of certain values. This requires a careful selection of bits that indicate inclusion. I plan to use dynamic programming (DP) by considering prefix sums of chosen bits. My approach involves iterating bits from high to low and keeping track of the current sum. I also need to compute the prefix and suffix sums effectively.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\na = [int(next(it)) for _ in range(n)]\ns = next(it).strip()\n# s is s0..s_{n-1} where s[0] is bit 0 (LSB)\npref = [0] * (n + 1)\nfor i in range(1, n + 1):\n    pref[i] = pref[i - 1] + a[i - 1]\nbest = 0\ncur = 0\n# iterate from highest bit (n-1) down to 0\nfor i in range(n - 1, -1, -1):\n    if s[i] == '1':\n        # try making this bit 0 and all lower bits 1\n        best = max(best, cur + pref[i])\n        cur += a[i]\nbest = max(best, cur)\nprint(best)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\na = [int(next(it)) for _ in range(n)]\ns = next(it).strip()\n# s is s0..s_{n-1} where s[0] is bit 0 (LSB)\npref = [0] * (n + 1)\nfor i in range(1, n + 1):\n    pref[i] = pref[i - 1] + a[i - 1]\nbest = 0\ncur = 0\n# iterate from highest bit (n-1) down to 0\nfor i in range(n - 1, -1, -1):\n    if s[i] == '1':\n        # try making this bit 0 and all lower bits 1\n        best = max(best, cur + pref[i])\n        cur += a[i]\nbest = max(best, cur)\nprint(best)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 515,
        "completion_token_count": 602,
        "thoughts_token_count": 384
    }
}