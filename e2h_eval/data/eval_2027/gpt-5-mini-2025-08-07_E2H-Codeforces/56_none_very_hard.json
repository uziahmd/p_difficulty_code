{
    "start": 1758294599.5080469,
    "end": 1758294616.1191366,
    "start-formatted": "2025-09-20 00:09 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndef readints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef crosses(a1,a2,b1,b2):\n    # check if segments a1-a2 and b1-b2 intersect (properly)\n    (x1,y1),(x2,y2) = a1,a2\n    (x3,y3),(x4,y4) = b1,b2\n    def orient(a,b,c):\n        return (b[0]-a[0])*(c[1]-a[1]) - (b[1]-a[1])*(c[0]-a[0])\n    o1 = orient(a1,a2,b1)\n    o2 = orient(a1,a2,b2)\n    o3 = orient(b1,b2,a1)\n    o4 = orient(b1,b2,a2)\n    return o1*o2 < 0 and o3*o4 < 0\n\ndef can_match(R,B,rebels,bases):\n    if R!=B:\n        return False\n    n=R\n    # build bipartite graph nodes rebels 0..n-1 to bases 0..n-1\n    # initially all edges exist; but we must find perfect matching such that chosen segments are pairwise non-crossing\n    # This reduces to finding a non-crossing perfect matching between two point sets with general position.\n    # Known solution: count of non-crossing perfect matchings exists iff convex-hull separated? But small n<=10 so brute-force permutations.\n    import itertools\n    for perm in itertools.permutations(range(n)):\n        segs = []\n        ok = True\n        for i,j in enumerate(perm):\n            segs.append((rebels[i], bases[j]))\n        for i in range(n):\n            for j in range(i+1,n):\n                if crosses(segs[i][0],segs[i][1],segs[j][0],segs[j][1]):\n                    ok = False\n                    break\n            if not ok:\n                break\n        if ok:\n            return True\n    return False\n\ndata = sys.stdin.read().strip().splitlines()\nout=[]\ni=0\nwhile i < len(data):\n    line = data[i].strip()\n    if not line:\n        i+=1\n        continue\n    parts = list(map(int,line.split()))\n    if not parts:\n        i+=1\n        continue\n    R,B = parts\n    i+=1\n    rebels=[]\n    for _ in range(R):\n        x,y = map(int,data[i].split()); i+=1\n        rebels.append((x,y))\n    bases=[]\n    for _ in range(B):\n        x,y = map(int,data[i].split()); i+=1\n        bases.append((x,y))\n    out.append(\"Yes\" if can_match(R,B,rebels,bases) else \"No\")\n\nprint(\"\\n\".join(out))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef readints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef crosses(a1,a2,b1,b2):\n    # check if segments a1-a2 and b1-b2 intersect (properly)\n    (x1,y1),(x2,y2) = a1,a2\n    (x3,y3),(x4,y4) = b1,b2\n    def orient(a,b,c):\n        return (b[0]-a[0])*(c[1]-a[1]) - (b[1]-a[1])*(c[0]-a[0])\n    o1 = orient(a1,a2,b1)\n    o2 = orient(a1,a2,b2)\n    o3 = orient(b1,b2,a1)\n    o4 = orient(b1,b2,a2)\n    return o1*o2 < 0 and o3*o4 < 0\n\ndef can_match(R,B,rebels,bases):\n    if R!=B:\n        return False\n    n=R\n    # build bipartite graph nodes rebels 0..n-1 to bases 0..n-1\n    # initially all edges exist; but we must find perfect matching such that chosen segments are pairwise non-crossing\n    # This reduces to finding a non-crossing perfect matching between two point sets with general position.\n    # Known solution: count of non-crossing perfect matchings exists iff convex-hull separated? But small n<=10 so brute-force permutations.\n    import itertools\n    for perm in itertools.permutations(range(n)):\n        segs = []\n        ok = True\n        for i,j in enumerate(perm):\n            segs.append((rebels[i], bases[j]))\n        for i in range(n):\n            for j in range(i+1,n):\n                if crosses(segs[i][0],segs[i][1],segs[j][0],segs[j][1]):\n                    ok = False\n                    break\n            if not ok:\n                break\n        if ok:\n            return True\n    return False\n\ndata = sys.stdin.read().strip().splitlines()\nout=[]\ni=0\nwhile i < len(data):\n    line = data[i].strip()\n    if not line:\n        i+=1\n        continue\n    parts = list(map(int,line.split()))\n    if not parts:\n        i+=1\n        continue\n    R,B = parts\n    i+=1\n    rebels=[]\n    for _ in range(R):\n        x,y = map(int,data[i].split()); i+=1\n        rebels.append((x,y))\n    bases=[]\n    for _ in range(B):\n        x,y = map(int,data[i].split()); i+=1\n        bases.append((x,y))\n    out.append(\"Yes\" if can_match(R,B,rebels,bases) else \"No\")\n\nprint(\"\\n\".join(out))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 464,
        "completion_token_count": 616,
        "thoughts_token_count": 0
    }
}