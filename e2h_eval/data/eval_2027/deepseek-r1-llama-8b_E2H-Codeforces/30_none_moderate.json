{
    "start": 1758292172.1321127,
    "end": 1758292221.1005955,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef max_prize(n, A):\n    # Convert string A to a list of integers for easier manipulation\n    A = [int(x) for x in A]\n\n    # Initialize a 2D table to store the maximum prize for each subproblem\n    dp = [[0] * (n + 1) for _ in range(2)]\n\n    # Initialize a 2D table to store the optimal moves for each subproblem\n    moves = [[[] for _ in range(n + 1)] for _ in range(2)]\n\n    # Fill the tables using dynamic programming\n    for i in range(2 * n):\n        for j in range(n, -1, -1):\n            if j == 0:\n                # Base case: one player has made no moves\n                dp[0][j] = 0\n                moves[0][j] = []\n                dp[1][j] = 0\n                moves[1][j] = []\n            elif i < n:\n                # The current player has not made any moves yet\n                dp[0][j] = dp[1][j]\n                moves[0][j] = moves[1][j]\n                dp[1][j] = dp[0][j]\n                moves[1][j] = moves[0][j]\n            else:\n                # Calculate the maximum prize and optimal moves for the current player\n                if A[i] > A[i - 1]:\n                    # If the current digit is greater than the previous one, it's better for the first player to take it\n                    if dp[0][j + 1] + A[i] > dp[1][j + 1]:\n                        dp[0][j] = dp[0][j + 1] + A[i]\n                        moves[0][j] = moves[0][j + 1] + ['H']\n                    else:\n                        dp[0][j] = dp[1][j + 1]\n                        moves[0][j] = moves[1][j + 1]\n                else:\n                    # If the current digit is less than or equal to the previous one, it's better for the second player to take it\n                    if dp[1][j + 1] + A[i] > dp[0][j + 1]:\n                        dp[1][j] = dp[1][j + 1] + A[i]\n                        moves[1][j] = moves[1][j + 1] + ['M']\n                    else:\n                        dp[1][j] = dp[0][j + 1]\n                        moves[1][j] = moves[0][j + 1]\n\n    # Reconstruct the optimal sequence of moves from the tables\n    sequence = ''\n    for i in range(n):\n        if moves[0][n][i] == moves[1][n][i]:\n            # If the optimal moves are the same for both players, choose the first player to make the move\n            sequence += 'H'\n        else:\n            sequence += 'M'\n\n    return sequence\n\n\nn = int(input())\nA = input()\nprint(max_prize(n, A))\n```\n\nThis script uses dynamic programming to solve the problem. It first initializes two 2D tables `dp` and `moves` to store the maximum prize and optimal moves for each subproblem, respectively. Then it fills these tables using a bottom-up approach, considering all possible moves for each player. Finally, it reconstructs the optimal sequence of moves from the tables and prints it as the output.\n\nThe time complexity of this script is O(2^n), where n is the number of moves each player makes. This is because there are 2^n possible subproblems, and each subproblem requires constant time to solve. The space complexity is also O(2^n), as we need to store the tables for all subproblems.\n\nNote that this script assumes that the input is well-formed and does not contain any errors. In a real-world scenario, you should add error handling code to handle invalid inputs.",
    "ground_truth": "N/A",
    "extracted_answer": "def max_prize(n, A):\n    # Convert string A to a list of integers for easier manipulation\n    A = [int(x) for x in A]\n\n    # Initialize a 2D table to store the maximum prize for each subproblem\n    dp = [[0] * (n + 1) for _ in range(2)]\n\n    # Initialize a 2D table to store the optimal moves for each subproblem\n    moves = [[[] for _ in range(n + 1)] for _ in range(2)]\n\n    # Fill the tables using dynamic programming\n    for i in range(2 * n):\n        for j in range(n, -1, -1):\n            if j == 0:\n                # Base case: one player has made no moves\n                dp[0][j] = 0\n                moves[0][j] = []\n                dp[1][j] = 0\n                moves[1][j] = []\n            elif i < n:\n                # The current player has not made any moves yet\n                dp[0][j] = dp[1][j]\n                moves[0][j] = moves[1][j]\n                dp[1][j] = dp[0][j]\n                moves[1][j] = moves[0][j]\n            else:\n                # Calculate the maximum prize and optimal moves for the current player\n                if A[i] > A[i - 1]:\n                    # If the current digit is greater than the previous one, it's better for the first player to take it\n                    if dp[0][j + 1] + A[i] > dp[1][j + 1]:\n                        dp[0][j] = dp[0][j + 1] + A[i]\n                        moves[0][j] = moves[0][j + 1] + ['H']\n                    else:\n                        dp[0][j] = dp[1][j + 1]\n                        moves[0][j] = moves[1][j + 1]\n                else:\n                    # If the current digit is less than or equal to the previous one, it's better for the second player to take it\n                    if dp[1][j + 1] + A[i] > dp[0][j + 1]:\n                        dp[1][j] = dp[1][j + 1] + A[i]\n                        moves[1][j] = moves[1][j + 1] + ['M']\n                    else:\n                        dp[1][j] = dp[0][j + 1]\n                        moves[1][j] = moves[0][j + 1]\n\n    # Reconstruct the optimal sequence of moves from the tables\n    sequence = ''\n    for i in range(n):\n        if moves[0][n][i] == moves[1][n][i]:\n            # If the optimal moves are the same for both players, choose the first player to make the move\n            sequence += 'H'\n        else:\n            sequence += 'M'\n\n    return sequence\n\n\nn = int(input())\nA = input()\nprint(max_prize(n, A))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 441,
        "completion_token_count": 855,
        "thoughts_token_count": 0
    }
}