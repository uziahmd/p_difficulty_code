{
    "start": 1758280865.3652968,
    "end": 1758282262.2397583,
    "start-formatted": "2025-09-19 20:21 KST",
    "end-formatted": "2025-09-19 20:44 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house can be built on a spot, and each spot has a height between 0 and h. The profit for each spot is the square of its height. But there are m restrictions that limit the maximum height in specific ranges of spots.\n\nHmm, right. So the goal is to assign heights to each spot such that all the restrictions are satisfied and the total profit is maximized.\n\nLet me think about how to approach this.\n\nFirst, the constraints are small: n, h, m are up to 50. So maybe we can consider a brute-force approach or dynamic programming. But what's the best way?\n\nWait, each restriction is that in the range l_i to r_i, the tallest house must be at most x_i. That means, for each such interval, the maximum height in those positions must be <=x_i.\n\nSo the problem is to choose a height for each spot (a_1, a_2, ..., a_n), where 0<=a_i<=h, such that for every restriction i, max(a_l..a_r) <=x_i. And maximize the sum of squares.\n\nThis sounds like a problem that can be modeled as a graph where each node represents a possible state of the previous spots, but since n is small, perhaps we can model this with some kind of DP.\n\nAlternatively, for each spot, the maximum allowed height is the minimum of all x_i for which the spot is included in the restriction's interval. Or wait, no. Because for each spot, any restriction that includes it imposes that the height can't exceed x_i. So for spot i, the maximum allowed height is the minimum x_j among all restrictions j that cover spot i, or h if no restrictions cover it.\n\nWait, not exactly. Because the restrictions might overlap. For example, if spot i is covered by multiple restrictions, each with their own x_j. The maximum height for spot i must be <= all x_j for those restrictions. So the effective maximum for spot i is the minimum of all x_j where l_j <=i <=r_j. If there are no such restrictions, then the maximum is h.\n\nSo for each spot i, the maximum allowed height is min{x_j | j covers i} or h if no j covers i. So first, for each spot, we need to find the minimum x across all applicable restrictions. Then, the height for spot i can be at most that value.\n\nBut wait, that's not necessarily true because the maximum of a particular interval could be determined by multiple spots. For example, suppose we have two restrictions that both include spot 3. One says x=5 and another x=4. Then spot 3's height must be <=4, but other spots in the overlapping regions also contribute.\n\nWait, no. Because each restriction requires that in their interval, the maximum height is <=x_i. So for each restriction, the maximum height in l_i..r_i is <=x_i. So for spot i, it's constrained by all the restrictions that include it. So the maximum allowed height for spot i is the minimum of all x_i for those restrictions, because each restriction imposes a <= condition. So yes, for each spot i, the maximum allowed height is the minimum of x_j across all j where l_j <=i <=r_j, or h if no such j exists.\n\nSo first step: For each spot i, compute the maximum allowed height as the minimum x_j among all applicable restrictions, else h.\n\nBut wait, that's only considering the restrictions. We also have the global maximum h. So for each spot i, the maximum possible height is min( min_x_over_restrictions, h ). Wait, no. Because if a spot is not covered by any restriction, then its maximum is h. But if it's covered by one or more restrictions, then it's the min of those x's.\n\nWait, let's think: For a spot i, if there are any restrictions covering it, then each such restriction imposes a maximum of x_j. So the maximum height for i must be <= the minimum of all x_j for those restrictions. Because if you have two restrictions, say, x=5 and x=3, then the maximum height for i can't exceed 3, because otherwise, the first restriction would require that the maximum is <=5, which is already true, but the second restricts it to 3.\n\nWait, no. The maximum of the interval l..r for each restriction must be <=x_i. So for spot i, if it's in the interval of multiple restrictions, each of those restrictions contributes a constraint that a_i <=x_i of that restriction. So for spot i, a_i can be at most the minimum of all x_i from the restrictions that include i.\n\nYes, that makes sense.\n\nSo the first thing I can do is precompute for each spot i the maximum allowed height as the minimum of x_j for all j where l_j <=i <=r_j. If there are no such j, then the maximum is h.\n\nOnce I have this for each spot, the problem reduces to choosing a height for each spot, up to this maximum, such that when all the restrictions are considered, the maximum in each interval is <= x_i.\n\nWait, no. Because even though for each spot, the maximum is bounded by its own restrictions, the actual maximum of any interval may come from any of the spots in that interval. So just setting each spot's maximum to min_x doesn't automatically ensure that the intervals' maximums are within x_i.\n\nWait, that's a crucial point. For example, suppose I have two spots, 1 and 2. Suppose there's a restriction that covers both, with x=3. So for each spot, the maximum is 3. If I set spot 1 to 3 and spot 2 to 3, the max of the interval is 3, which is acceptable. But if I have another restriction that covers spot 2, x=2, then spot 2's maximum is 2. So spot 2 can be 2, spot 1 can be 3, but the max in the first interval (spot 1 and 2) would be 3, which is okay because x for that interval is >=3. So in that case, it's acceptable.\n\nWait, no. Let's see:\n\nSuppose the first restriction is l=1, r=2, x=3. So each spot can be up to 3.\n\nAnother restriction is l=2, r=2, x=2. So spot 2's maximum is 2.\n\nSo in the first interval, the max is max(3,2)=3, which is <=3. So it's okay.\n\nBut if the first interval's x was 2, then spot 1's maximum would be 2, spot 2's maximum is 2. Then the first interval's max is 2, which is acceptable.\n\nSo the initial approach is correct because by ensuring each spot's maximum is the minimum of its own restrictions, the max of any interval will be <=x_i.\n\nWait, no. Because the x_i for an interval is the maximum allowed in that interval. So when you take the minimum of all x_j that cover each spot, then for each spot, the maximum is <=x_j for each j that covers it. Therefore, for any interval l..r, the maximum a_i in that interval is the maximum of all a_i's, which are each <=x_j for some j. But the x_j's for the spots in the interval may vary.\n\nWait, but for the interval l..r, there is a restriction that the maximum a_i in that interval must be <=x_i (the x_i of that particular restriction). So if, after computing each spot's maximum, the maximum in the interval l..r is <=x_i, then the restriction is satisfied.\n\nBut how? Because for each spot in the interval, a_i can be up to some x_j, but the maximum a_i in the interval could be higher than x_i for the current restriction.\n\nWait, no. Because the current restriction's x is the x_i for that interval, and for each spot in that interval, the maximum allowed is min over all x_j (including the current restriction's x_i). So each a_i in the interval is <=x_i, because x_i is part of the min calculation. Therefore, the maximum a_i in the interval is <=x_i. So all restrictions are satisfied.\n\nAh! So that's the key. Because each spot's maximum is the minimum of all x_j that apply to it, including the x_i of any restriction that covers it. So when you take the maximum in any interval l..r, that maximum is the maximum of a_i's each of which is <=x_j for some j, including possibly the x_i of the current restriction. Therefore, the maximum in that interval is <=x_i, so the restriction is satisfied.\n\nSo the initial approach is sufficient. So for each spot, we can compute its maximum allowed height as the minimum of x_j across all restrictions that cover it. If no restrictions cover it, then it's h.\n\nOnce we have these per-spot maxima, the problem reduces to selecting a_i's such that a_i <= max_i, and then calculate the sum of squares.\n\nWait, but that's not the case because the max_i is the minimum of all x_j that cover i. So a_i can be up to that max_i, but the problem is that the choice of a_i's affects the sum. So the optimal solution is to set each a_i to its max_i, because the sum of squares is maximized when each term is as large as possible.\n\nWait, is that correct? Because for each spot, increasing a_i increases a_i^2, which is convex. So the optimal choice is indeed to set each a_i as high as possible, given the constraints.\n\nSo the approach is:\n\n1. For each spot i, compute the maximum allowed height as the minimum of x_j for all restrictions that include i, or h if none.\n\n2. Set each a_i to this maximum.\n\n3. Compute the sum of squares.\n\nBecause any lower a_i would result in a lower total profit.\n\nYes, because for each spot, the profit is a_i², which is maximized when a_i is as large as possible, given the constraints. So this is a greedy approach that works.\n\nWait, but let's test this with the examples.\n\nIn the first example:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → spot 1's maximum is min(1, 3) =1.\n\n2 2 3 → spot 2's maximum is min(3, 3) =3.\n\n3 3 2 → spot3's maximum is min(2,3)=2.\n\nSo a = [1,3,2], sum is 1+9+4=14. Which matches the sample.\n\nIn the second example:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → for spot 2: min(8, ...) → but no other restrictions, so 8. Spot3: min(8, ...). Wait, the second restriction is 3-4,7. So for spot2: only the first restriction applies, x=8. So a2 is 8.\n\nSpot3: it's covered by both restrictions. First, x=8; second, x=7. So a3 is min(8,7)=7.\n\nSpot4: only the second restriction, x=7. So a4 is 7.\n\nSpot1: no restrictions, so a1 is 10.\n\nSo the array is [10,8,7,7]. Sum is 100 +64 +49 +49=262. Which matches the sample.\n\nSo this approach seems to work.\n\nTherefore, the solution is:\n\nFor each spot i, compute the minimum x_j among all restrictions that include i. If no such x_j exists, set to h. Then, sum the squares of these values.\n\nSo the steps are:\n\n1. Read n, h, m.\n\n2. Read m restrictions, storing for each l_i, r_i, x_i.\n\n3. For each spot i from 1 to n:\n\n   a. Find all restrictions where l_j <=i <=r_j.\n\n   b. Take the minimum x_j among these restrictions.\n\n   c. If no such restrictions, take h.\n\n   d. The maximum allowed for i is this value.\n\n4. Sum the squares of all maximum allowed.\n\nSo now, how to implement this.\n\nIn code:\n\nWe can represent the restrictions as a list. For each i, iterate through all restrictions and collect x_j where l_j <=i <=r_j. Then take the min of those x_j, else h.\n\nWait, but for i=1, checking all m restrictions, and see which ones include 1.\n\nSo code steps:\n\nRead n, h, m.\n\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append( (l, r, x) )\n\nmax_heights = [0]*(n+1) # since spots are 1-based\nfor i in range(1, n+1):\n    min_x = h  # default to h if no restrictions\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_heights[i] = min_x\n\nsum_profit = 0\nfor i in range(1, n+1):\n    sum_profit += (max_heights[i]) **2\n\nprint(sum_profit)\n\nWait, but wait: in the code, for each i, we loop through all m restrictions. Since m is up to 50, and n is up to 50, this is manageable.\n\nTesting with the sample inputs:\n\nSample 1:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → x=1.\n\n2 2 3 → x=3.\n\n3 3 2 → x=2.\n\nFor i=1:\n\nCheck all 3 restrictions.\n\nOnly the first includes 1. So min_x is 1.\n\ni=2: check all 3. Only the second includes 2 → x=3.\n\ni=3: third restriction includes 3, x=2.\n\nSo sum is 1+9+4=14.\n\nSample 2:\n\nn=4, m=2.\n\nRestriction 1: 2-3,8.\n\nRestriction 2:3-4,7.\n\ni=1: no restrictions → h=10.\n\ni=2: only restriction 1 → x=8.\n\ni=3: both restrictions → min(8,7)=7.\n\ni=4: only restriction 2 →x=7.\n\nSo heights are 10,8,7,7. Sum is 100+64+49+49=262.\n\nSo code should work.\n\nBut wait, what about a spot that is covered by multiple overlapping restrictions with varying x's. For example, a spot covered by a restriction with x=5 and another with x=3. The min is 3, so the spot's height is 3.\n\nWhich is correct, as the maximum in any interval including this spot is <=3.\n\nSo yes, this approach works.\n\nNow, what about edge cases.\n\nCase when no restrictions: n=1, h=5, m=0.\n\nThen max_height is 5.\n\nProfit is 25.\n\nAnother case: n=2, h=10, m=2.\n\nRestriction 1: 1-2, 5.\n\nRestriction 2:1-2,3.\n\nSo for spot1, min(5,3) is 3.\n\nSpot2: same.\n\nHeights are 3,3. Profit 18.\n\nAnother case: overlapping restrictions.\n\nWhat if a spot is covered by multiple restrictions, some with lower x.\n\nSo code correctly takes the minimum.\n\nThus, the code should handle all cases correctly.\n\nSo in conclusion, the code reads the input, computes for each spot the min x among all applicable restrictions, uses h if none, then sums the squares.\n",
    "response": "To solve this problem, we need to build houses on a street such that all zoning restrictions are satisfied while maximizing the profit from the houses. Each house's profit is determined by the square of its height.\n\n### Approach\n1. **Understand the Restrictions**: Each restriction specifies a range of spots and the maximum allowed height within that range. The goal is to ensure that the tallest house in each specified range does not exceed the given maximum height.\n2. **Compute Maximum Allowed Heights**: For each spot, determine the minimum height allowed by all applicable restrictions. If a spot is not covered by any restriction, its maximum height is the global maximum height `h`.\n3. **Calculate Profit**: Once we have the maximum allowable heights for each spot, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\nmax_heights = [0] * (n + 1)  # Using 1-based indexing\n\nfor i in range(1, n + 1):\n    min_x = h  # Default to h if no restrictions apply\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_heights[i] = min_x\n\ntotal_profit = 0\nfor i in range(1, n + 1):\n    total_profit += (max_heights[i]) ** 2\n\nprint(total_profit)\n```\n\n### Explanation\n1. **Reading Input**: The code reads the number of spots, the maximum allowed height, and the number of restrictions. Each restriction is then read and stored.\n2. **Determine Maximum Heights**: For each spot, the code checks all applicable restrictions to find the minimum height allowed by any of them. If no restrictions apply, the height defaults to the global maximum `h`.\n3. **Compute Total Profit**: The total profit is calculated by summing the squares of the maximum allowable heights for each spot.\n\nThis approach ensures that all restrictions are respected while maximizing the profit from the houses built on the street. The solution efficiently handles the constraints and provides the optimal result using a straightforward iterative method.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\nmax_heights = [0] * (n + 1)  # Using 1-based indexing\n\nfor i in range(1, n + 1):\n    min_x = h  # Default to h if no restrictions apply\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_heights[i] = min_x\n\ntotal_profit = 0\nfor i in range(1, n + 1):\n    total_profit += (max_heights[i]) ** 2\n\nprint(total_profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 811,
        "completion_token_count": 491,
        "thoughts_token_count": 3439
    }
}