{
    "start": 1758278108.5604808,
    "end": 1758278270.320144,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house can be built on a spot, and each spot has a height between 0 and h. The profit for each spot is the square of its height. But there are m restrictions that limit the maximum height in specific ranges. \n\nHmm, the goal is to maximize the total profit while satisfying all the restrictions. So, I need to find the heights for each spot such that all the restrictions are met and the sum of squares is as large as possible.\n\nLet me think about how to model this. It seems like a dynamic programming problem because the choices for each spot depend on previous decisions, especially when considering overlapping ranges in the restrictions.\n\nWait, but the constraints are small: n, h, m are up to 50. So maybe a brute force approach with some optimizations could work? Or perhaps a DP approach where we track the state of the last few spots, considering the constraints.\n\nAlternatively, since each restriction applies to a range, maybe we can model the problem by determining for each spot what's the maximum allowed height based on all the restrictions that include it. But wait, that's not sufficient because some restrictions might overlap multiple spots, and a spot's height affects all the ranges it's part of.\n\nSo, for example, if a restriction l=2, r=3, x=8, then both spots 2 and 3 must have their maximum heights such that the tallest in that range is ≤8. But if another restriction covers spot 2, say l=1, r=2, x=5, then spot 2's height is further limited to ≤5. So, for each spot, the maximum allowed height is the minimum of all x_i's from restrictions that cover it, but also considering the overall h.\n\nWait no, that's not quite right. Because for a particular spot, the maximum allowed height is the minimum x_i across all restrictions that include it, but only if that x_i is less than h. Otherwise, it's h. Also, each spot's height can't exceed h anyway.\n\nBut wait, even if a spot is covered by multiple restrictions, the maximum allowed height for that spot is the minimum of all x_i of the restrictions that include it. Because each restriction imposes that the maximum in their range (including the spot) is at most x_i. So, for a spot, the maximum allowed height is the minimum of all x_i for the restrictions that include it, but cannot exceed h. Also, if a spot isn't covered by any restriction, it can be up to h.\n\nWait, but that's assuming that each restriction is for a maximum in its range. So, for a given range [l, r], the maximum height among all spots from l to r must be ≤x_i. So, for each spot in that range, the height can't exceed x_i, but also, each spot's height can't be higher than h. So, for each spot, its maximum possible height is the minimum of h and all x_i where the spot is in the i-th restriction's range.\n\nSo, for each spot, the maximum possible height is min(h, x_1, x_2, ..., x_m'), where m' is the number of restrictions that include the spot.\n\nWait, but that's only part of the story. Because, for a spot, the maximum allowed height is the minimum of all x_i for the restrictions that include it, but also, the spot's height can't be more than h.\n\nSo, for each spot i, its maximum possible height is the minimum of h and all x_j where j is a restriction that includes i in its [l_j, r_j] range.\n\nBut wait, is that correct? Because each restriction j says that in its [l_j, r_j], the maximum height is ≤x_j. So, for a spot i, all the x_j's from the restrictions that cover i contribute to the maximum possible height for i. So, the maximum allowed height for i is the minimum of all x_j's for which l_j ≤i ≤r_j, plus it can't exceed h.\n\nYes, that makes sense.\n\nSo, for each spot, the maximum possible height is min(h, min{x_j | j covers i}).\n\nOnce I know the maximum possible height for each spot, I can compute the profit as the sum of squares of these heights.\n\nWait, but wait! No, that's not correct. Because if I set each spot to its maximum possible height, but some restrictions require that the maximum in their range is exactly x_j, which might be lower than other spots in the same range. So, the approach of setting each spot to the minimum of x_j's and h may not be sufficient because the maximum in the range could be higher than x_j.\n\nWait, no. Because if a spot's",
    "response": "To solve this problem, we need to determine the optimal heights for each spot on a street to maximize profit while adhering to given zoning restrictions. Each restriction specifies that the tallest house in a certain range must be at most a given height. \n\n### Approach\n1. **Understand Restrictions**: Each restriction affects a range of spots and limits the maximum height within that range. The height of each spot is determined by the minimum height allowed by all applicable restrictions.\n2. **Determine Maximum Heights**: For each spot, the maximum allowable height is the minimum value between the global maximum height `h` and the smallest height allowed by any restriction that includes this spot.\n3. **Calculate Profit**: Once the maximum allowable heights are determined for each spot, compute the total profit as the sum of the squares of these heights.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l-1, r-1, x))  # Convert to 0-based indices\n\nmax_heights = [h] * n\n\nfor i in range(n):\n    min_x = h\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_heights[i] = min(min_x, h)\n\nprofit = sum(a*a for a in max_heights)\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The input consists of the number of spots, maximum height, and restrictions. Each restriction specifies a range and a maximum height.\n2. **Processing Restrictions**: Convert the restrictions to 0-based indices for easier array manipulation.\n3. **Compute Maximum Heights**: For each spot, determine the minimum height allowed by all applicable restrictions and the global maximum height `h`.\n4. **Calculate Profit**: Sum the squares of the computed maximum heights to get the total profit.\n\nThis approach efficiently computes the optimal heights while respecting all constraints, ensuring the solution is both correct and efficient given the problem constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l-1, r-1, x))  # Convert to 0-based indices\n\nmax_heights = [h] * n\n\nfor i in range(n):\n    min_x = h\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_heights[i] = min(min_x, h)\n\nprofit = sum(a*a for a in max_heights)\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 812,
        "completion_token_count": 443,
        "thoughts_token_count": 1025
    }
}