{
    "start": 1758278584.1335776,
    "end": 1758278900.4680514,
    "start-formatted": "2025-09-19 19:43 KST",
    "end-formatted": "2025-09-19 19:48 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about Vitaly and cycles in graphs. The task is to find two things: t, the minimum number of edges needed to add to form a simple cycle of odd length (more than one vertex), and w, the number of ways to do that with exactly t edges.\n\nHmm. So, what's a simple cycle here? It's a cycle where each vertex appears at most once. So, it's a cycle without any repeated nodes.\n\nThe input gives an undirected graph with n vertices and m edges. No loops or parallel edges. The graph might not be connected.\n\nSo, how do I approach this?\n\nFirst, I think about what conditions allow a cycle to exist. For a cycle, each node in the cycle must have degree at least 2. Wait, no, because if you have a triangle (3-node cycle), each node has degree 2. So, in general, any cycle requires that all nodes in the cycle have degree at least 2.\n\nWait, but for the graph as a whole, perhaps some nodes are part of multiple components. So, I need to consider each connected component separately.\n\nLet me think: For each connected component, what's the possibility of forming such a cycle?\n\nIf a component already has a cycle, then maybe adding zero edges could form a cycle. But wait, the original graph may not have any cycles. Or maybe the component has multiple cycles.\n\nBut the question is about the minimal t and the number of ways to achieve that.\n\nSo, for each connected component, I can analyze whether it can form a cycle on its own or needs some additional edges.\n\nWait, but the overall graph is disconnected. So, perhaps each connected component contributes to the solution.\n\nWait, but the problem allows the cycle to consist of more than one vertex. So, the minimal cycle is a triangle (3 nodes). But if a component is a tree, which has no cycles, then adding edges to form a cycle would require adding at least one edge. But that's only if the component has enough structure.\n\nWait, no. A tree with two nodes connected by one edge can't form a cycle, but adding another edge would create a cycle. But wait, that's a multigraph, which isn't allowed here since the problem says no parallel edges.\n\nWait, but the added edges must form a simple cycle, so each added edge is unique.\n\nSo, for each connected component, let's see:\n\nCase 1: The component already has a cycle. Then, within this component, the minimal t is zero. But wait, the problem requires the cycle to be of odd length and consist of more than one vertex. So, if the existing cycles are even-length or longer than that, but I think we can choose any cycle.\n\nWait, no. We can choose any existing cycle in the graph. So, if the graph already has an odd-length cycle, then t is zero. Because no edges need to be added.\n\nSo, first step: check if the graph has any odd-length cycles. If yes, then t is 0, and w is the number of such cycles.\n\nWait, but the problem requires the cycle to consist of more than one vertex, which is automatically satisfied if it's a cycle.\n\nSo, the plan is:\n\n- Check if there's any existing odd-length cycle. If yes, then t=0, w is the count of such cycles.\n\nIf not, then we need to find the minimal t and the number of ways.\n\nHow to compute that.\n\nIn cases where no odd cycles exist, we need to create one by adding edges.\n\nWhat's the minimal way to do that? Well, the minimal number of edges to add is 1, provided that the component has a path that can form a triangle with one additional edge.\n\nWait, no. Let's think.\n\nFor example, if a component is a tree (like a straight line of three nodes), then adding an edge between the ends creates a triangle, which is an odd cycle. So, t=1.\n\nBut in a component that's a single node, adding two edges would create a cycle of length 3 (if connected to itself, but wait, no, since it's a single node, you can't form a cycle. So, perhaps the component must have at least two edges to form a cycle when adding one edge.\n\nWait, no. For a single node, you can't form a cycle, but adding two edges between the same node isn't allowed. So, for a single node, the answer is impossible—no way to form a cycle.\n\nWait, but according to the problem statement, the cycle must consist of more than one vertex. So, a single node cannot form a cycle, nor can two nodes (they can only form a tree edge; adding another edge would create a cycle of length 2, which is even, but that's not allowed because the cycle must be of odd length).\n\n",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to form a simple cycle of odd length and the number of ways to achieve this.\n\n### Approach\n1. **Check for Existing Cycles**: First, we check if the graph already contains any odd-length cycles. If it does, the minimum number of edges to add (t) is 0, and the number of ways (w) is the count of such cycles.\n2. **Component Analysis**: If no odd-length cycles exist, we analyze each connected component of the graph:\n   - **Single Node Component**: If a component has only one node, it's impossible to form a cycle, so we skip it.\n   - **Tree Components**: For tree components, we check if adding one edge can form a cycle. This is possible if the component has at least two leaves (nodes with degree 1). The number of ways to form such a cycle is determined by the number of pairs of leaves.\n3. **Disconnected Graph Handling**: If the graph is disconnected, we consider each component separately and sum the results.\n\n### Solution Code\n```python\nimport sys\nfrom collections import defaultdict\n\ndef readints():\n    return list(map(int, sys.stdin.readline().split()))\n\nn, m = map(int, sys.stdin.readline().split())\nedges = [[] for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    edges[a].append(b)\n    edges[b].append(a)\n\n# Function to check if a component has an odd cycle\ndef has_odd_cycle(nodes):\n    visited = [False] * (n+1)\n    parent = {}\n    for node in nodes:\n        if not visited[node]:\n            stack = [(node, -1)]\n            while stack:\n                v, p = stack.pop()\n                if visited[v]:\n                    continue\n                visited[v] = True\n                parent[v] = p\n                for neighbor in edges[v]:\n                    if not visited[neighbor]:\n                        stack.append((neighbor, v))\n            # Now, find if there's an odd cycle using BFS or DFS\n            # Using BFS\n            queue = []\n            for u in nodes:\n                if u != parent.get(v, None) and parent.get(u, None) == v:\n                    queue.append(u)\n            if not queue:\n                continue\n            visited_cycles = {u: False for u in queue}\n            while queue:\n                u = queue.pop(0)\n                if visited_cycles[u]:\n                    continue\n                visited_cycles[u] = True\n                for v in edges[u]:\n                    if visited_cycles.get(v, False):\n                        continue\n                    if parent.get(v, -1) == parent.get(u, -1):\n                        continue\n                    if not visited_cycles[v]:\n                        queue.append(v)\n            for u in visited_cycles:\n                if not visited_cycles[u]:\n                    continue\n                path = []\n                current = u\n                while current != -1:\n                    path.append(current)\n                    current = parent.get(current, -1)\n                if len(path) % 2 == 1:\n                    return True\n    return False\n\n# Find all connected components\nvisited = [False] * (n+1)\ncomponents = []\nfor i in range(1, n+1):\n    if not visited[i]:\n        stack = [i]\n        visited[i] = True\n        component = []\n        while stack:\n            u = stack.pop()\n            component.append(u)\n            for v in edges[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    stack.append(v)\n        components.append(component)\n\n# Check if any component has an odd cycle\nhas_any = False\ncount_ways = 0\nfor comp in components:\n    if has_odd_cycle(comp):\n        has_any = True\n        count_ways += 1\n\nif has_any:\n    print(\"0\", count_ways)\nelse:\n    # Need to compute t and w based on components\n    total_t = 0\n    total_w = 0\n    for comp in components:\n        if len(comp) == 1:\n            continue\n        # Check if the component is a tree\n        # Compute degrees\n        degrees = defaultdict(int)\n        for node in comp:\n            degrees[node] = len(edges[node])\n        leaves = [node for node in comp if degrees[node] == 1]\n        if len(leaves) >= 2:\n            # Can form a cycle by adding one edge between two leaves\n            # Number of ways: choose two leaves, and they are not adjacent\n            # But since it's a tree, any two leaves are not adjacent\n            ways = 0\n            for i in range(len(leaves)):\n                for j in range(i+1, len(leaves)):\n                    u = leaves[i]\n                    v = leaves[j]\n                    if u != v:\n                        ways += 1\n            total_w += ways\n            total_t += 1\n        else:\n            # Need to add more edges\n            # Impossible to form a cycle with two leaves, so we have to look deeper\n            # However, since it's a tree, any component that's a tree must have at least two leaves\n            # Wait, but if the component is a single node, we handled it above\n            # So this case is when the component is a tree with more than one node but less than two leaves? Which is impossible\n            pass\n    if total_t == 0:\n        # No way to form a cycle\n        print(\"0 0\")\n    else:\n        print(f\"{total_t} {total_w}\")\n```\n\n### Explanation\nThe solution first checks if the graph already contains any odd-length cycles. If it does, it outputs `0` for the minimum edges and the count of such cycles. If not, it analyzes each connected component to determine the minimum edges needed to form an odd-length cycle and the number of ways to do so. The approach efficiently handles both connected and disconnected graphs, ensuring all edge cases are considered.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict\n\ndef readints():\n    return list(map(int, sys.stdin.readline().split()))\n\nn, m = map(int, sys.stdin.readline().split())\nedges = [[] for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    edges[a].append(b)\n    edges[b].append(a)\n\n# Function to check if a component has an odd cycle\ndef has_odd_cycle(nodes):\n    visited = [False] * (n+1)\n    parent = {}\n    for node in nodes:\n        if not visited[node]:\n            stack = [(node, -1)]\n            while stack:\n                v, p = stack.pop()\n                if visited[v]:\n                    continue\n                visited[v] = True\n                parent[v] = p\n                for neighbor in edges[v]:\n                    if not visited[neighbor]:\n                        stack.append((neighbor, v))\n            # Now, find if there's an odd cycle using BFS or DFS\n            # Using BFS\n            queue = []\n            for u in nodes:\n                if u != parent.get(v, None) and parent.get(u, None) == v:\n                    queue.append(u)\n            if not queue:\n                continue\n            visited_cycles = {u: False for u in queue}\n            while queue:\n                u = queue.pop(0)\n                if visited_cycles[u]:\n                    continue\n                visited_cycles[u] = True\n                for v in edges[u]:\n                    if visited_cycles.get(v, False):\n                        continue\n                    if parent.get(v, -1) == parent.get(u, -1):\n                        continue\n                    if not visited_cycles[v]:\n                        queue.append(v)\n            for u in visited_cycles:\n                if not visited_cycles[u]:\n                    continue\n                path = []\n                current = u\n                while current != -1:\n                    path.append(current)\n                    current = parent.get(current, -1)\n                if len(path) % 2 == 1:\n                    return True\n    return False\n\n# Find all connected components\nvisited = [False] * (n+1)\ncomponents = []\nfor i in range(1, n+1):\n    if not visited[i]:\n        stack = [i]\n        visited[i] = True\n        component = []\n        while stack:\n            u = stack.pop()\n            component.append(u)\n            for v in edges[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    stack.append(v)\n        components.append(component)\n\n# Check if any component has an odd cycle\nhas_any = False\ncount_ways = 0\nfor comp in components:\n    if has_odd_cycle(comp):\n        has_any = True\n        count_ways += 1\n\nif has_any:\n    print(\"0\", count_ways)\nelse:\n    # Need to compute t and w based on components\n    total_t = 0\n    total_w = 0\n    for comp in components:\n        if len(comp) == 1:\n            continue\n        # Check if the component is a tree\n        # Compute degrees\n        degrees = defaultdict(int)\n        for node in comp:\n            degrees[node] = len(edges[node])\n        leaves = [node for node in comp if degrees[node] == 1]\n        if len(leaves) >= 2:\n            # Can form a cycle by adding one edge between two leaves\n            # Number of ways: choose two leaves, and they are not adjacent\n            # But since it's a tree, any two leaves are not adjacent\n            ways = 0\n            for i in range(len(leaves)):\n                for j in range(i+1, len(leaves)):\n                    u = leaves[i]\n                    v = leaves[j]\n                    if u != v:\n                        ways += 1\n            total_w += ways\n            total_t += 1\n        else:\n            # Need to add more edges\n            # Impossible to form a cycle with two leaves, so we have to look deeper\n            # However, since it's a tree, any component that's a tree must have at least two leaves\n            # Wait, but if the component is a single node, we handled it above\n            # So this case is when the component is a tree with more than one node but less than two leaves? Which is impossible\n            pass\n    if total_t == 0:\n        # No way to form a cycle\n        print(\"0 0\")\n    else:\n        print(f\"{total_t} {total_w}\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 570,
        "completion_token_count": 1252,
        "thoughts_token_count": 1025
    }
}