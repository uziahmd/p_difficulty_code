{
    "start": 1758284610.5540113,
    "end": 1758287463.181508,
    "start-formatted": "2025-09-19 21:23 KST",
    "end-formatted": "2025-09-19 22:11 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Okay, I'm trying to solve this programming problem. Let's read the problem statement carefully.\n\nSo, the problem is about finding two things for a given p:\n\n1. The minimum number of nodes required to create a p-reachable directed graph.\n2. Among all such graphs with the minimum number of nodes, find the maximum number of unidirectional pairs.\n\nHmm. Let me try to understand what each part means.\n\nFirst, a directed graph is called p-reachable if it has exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other. Wait, no, wait: the definition says that an ordered pair (u, v) is unidirectional if u≠v, there's a path from u to v, and no path from v to u. So, for each such pair, it's counted as unidirectional.\n\nBut then, p is the count of such pairs where u < v and they are reachable in both directions? Or wait, no. Wait, the problem says a p-reachable graph contains exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. Oh, wait no— wait, the definition says p is the count of ordered pairs where u and v are reachable from each other, but wait no, wait:\n\nWait, the problem says a p-reachable directed graph is one that contains exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other. Wait, perhaps I misread. No, wait:\n\nNo, the definition says: \"exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\" So p is the number of such ordered pairs where u and v are reachable from each other, but u < v. Wait, no: because if u and v are reachable from each other, then it's an undirected edge in the underlying undirected graph. So the ordered pairs (u, v) and (v, u) would both be considered, but only when u < v is counted towards p.\n\nWait, no. Let me read again: \"ordered pairs of nodes (u, v)\" — so for each such pair where u ≠ v, and u can reach v, and v cannot reach u, that's an unidirectional pair. But p is the count of such ordered pairs where u < v and they are reachable in both directions? Or wait, the problem says that p is the count of ordered pairs (u, v) where u < v and u and v are reachable from each other. So in other words, for each u < v, if there's a path from u to v and from v to u, then it counts as 1 towards p.\n\nWait, no. Because the problem defines a p-reachable graph as having exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So for each such (u, v), u < v, and u is reachable from v and vice versa. So those pairs are mutual, which is different from unidirectional pairs.\n\nSo the problem is to construct a directed graph where the number of such mutual pairs is exactly p, and we need to minimize the number of nodes. Then, among all such minimal node graphs, find the one with the maximum number of unidirectional pairs.\n\nWait, no. Wait, the problem says, the graph is p-reachable if it contains exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So, for each such pair (u, v), u can reach v and v can reach u.\n\nBut the unidirectional pairs are pairs where u can reach v but v can't reach u, and u < v.\n\nSo, the first part is to find the minimal n such that the graph on n nodes has exactly p such mutual pairs (u, v) with u < v.\n\nThe second part is, among all possible such graphs with minimal n, find the maximum number of unidirectional pairs.\n\nSo, how to approach this?\n\nLet's think about the structure of the graph. To maximize the number of unidirectional pairs, we want as many edges as possible that are unidirectional. But since the graph must have exactly p mutual pairs (u, v) with u < v, we need to arrange the graph in a way that these p pairs are present, and the rest of the edges are arranged to have as many unidirectional as possible.\n\nBut let's first find the minimal n.\n\nHmm. Let's consider that each mutual pair (u, v) with u < v contributes to p. So, the minimal n is determined by the maximum number of such mutual pairs possible in a graph of n nodes.\n\nWait, perhaps the minimal n is related to how many such mutual edges we can have. For example, suppose n is even. How many mutual pairs can we have? Well, in a complete undirected graph, each edge is bidirectional. But if we make some edges unidirectional, perhaps we can maximize the number of mutual pairs.\n\nWait, no. Wait, in a directed graph, each mutual pair is a pair (u, v) and (v, u) as edges. So for a pair u < v, if both edges exist, it's a mutual pair, contributing 1 to p. So, the number of such pairs depends on how many edges are present and are mutual.\n\nWait, but p is the count of such mutual pairs. So, for each u < v, if both u→v and v→u edges exist, then it's a mutual pair and counts as 1 towards p.\n\nSo, the problem reduces to building a graph with exactly p such mutual pairs, using as few nodes as possible.\n\nWhat's the minimal n for a given p?\n\nHmm, perhaps the minimal n is the smallest number of nodes needed such that the number of possible u < v pairs is at least p, and we can choose exactly p of them to be mutual.\n\nWait, but each mutual pair uses two edges (u→v and v→u). So for a graph of n nodes, the maximum possible number of mutual pairs is floor(n*(n-1)/4), because each mutual pair is a pair of edges between two nodes, and each such pair uses one u < v.\n\nWait, maybe not. Let's see: for n nodes, the number of possible u < v pairs is C(n,2) = n(n-1)/2. Each mutual pair requires that both edges are present, so each mutual pair is a single u < v pair that contributes 1 to p.\n\nSo, for the graph to have exactly p mutual pairs, the minimal n is such that C(n,2) >= p, and the maximal possible is when the graph has as many mutual pairs as possible. Wait, but the problem is to have exactly p mutual pairs.\n\nWait, no. Wait, for a graph with n nodes, the maximum possible number of mutual pairs is when all possible edges are mutual, which would be C(n,2) pairs. But since each mutual pair requires two edges, perhaps the minimal n is when the number of possible u < v pairs is just enough to have p mutual pairs.\n\nWait, I'm getting confused. Let's think differently.\n\nEach mutual pair (u, v) with u < v requires that both u→v and v→u are present.\n\nSo, for a graph with n nodes, the number of mutual pairs is equal to the number of edges in the underlying undirected graph where both directions are present.\n\nWait, no. Because the underlying undirected graph would have an edge between u and v if either u→v or v→u exists. So the number of mutual pairs is the number of edges in the undirected graph minus the number of unidirectional edges.\n\nWait, perhaps not. Let me clarify: for each u < v, if both u→v and v→u are present, it's a mutual pair and contributes 1 to p. If only u→v is present, it's a unidirectional pair and doesn't contribute to p. Similarly for v→u.\n\nSo, the total p is the number of edges in the underlying undirected graph that are mutual. So, the number of mutual pairs is equal to the number of edges in the undirected sense minus the number of unidirectional edges.\n\nWait, no. Because each mutual pair is a single (u, v) where u < v and both edges exist. So, the count p is exactly the number of such (u, v) pairs. So, p is the number of edges in the undirected graph that have both directions present.\n\nSo, for a graph with n nodes, the maximum possible p is C(n,2), which occurs when every possible edge is mutual.\n\nSo, our goal is to select a graph with n nodes such that the number of mutual pairs is exactly p, and n is as small as possible.\n\nNow, the minimal n is the smallest n such that C(n,2) >= p, but also considering that each mutual pair requires two edges.\n\nWait, perhaps not. Because each mutual pair is a single u < v, but requires two edges. So, the number of mutual pairs p is equal to the number of such u < v where both edges exist.\n\nBut the total number of edges in the directed graph is E = M + U, where M is the number of mutual edges (each contributing two edges), and U is the number of unidirectional edges (each contributing one).\n\nSo, M = p, because each mutual pair is a u < v where both edges exist. So, M = p, and each contributes two edges.\n\nBut wait, no. Because for each u < v, if both edges exist, that's one mutual pair. So, M is the number of such pairs, which is p. So, the total number of edges in the directed graph is 2p (for the mutual edges) plus the number of unidirectional edges.\n\nWait, but that's not necessarily correct because a single undirected edge can be formed in more than one way. Hmm, perhaps this approach is complicating things.\n\nAlternatively, perhaps the minimal n is such that the number of possible u < v pairs is at least p, and the minimal n is the smallest integer satisfying C(n,2) >= p. Because to have exactly p mutual pairs, you can choose any p pairs from C(n,2) and make them mutual.\n\nWait, but that's not necessarily the case. Because making a pair mutual requires adding two edges. So, for each mutual pair, you have to add both u→v and v→u.\n\nSo, for n nodes, the maximum possible p is C(n,2), which is when all possible edges are mutual.\n\nSo, for a given p, the minimal n is the smallest integer such that C(n,2) >= p.\n\nWait, for example, in the sample input, when p=3, the minimal n is 3 because C(3,2)=3 >=3.\n\nAnother example: p=0. Then the minimal n is 0, because no edges are present.\n\nWait, but for p=4, what's the minimal n? C(4,2)=6, which is >=4, so n=4. But wait, what if p=5? Then C(4,2)=6 >=5, so n=4.\n\nWait, but wait: n=4 can have up to 6 mutual pairs. So for p=5, yes, n=4 is possible.\n\nSo, the minimal n is the minimal n where C(n,2) >= p.\n\nSo, the minimal n is ceil((sqrt(8p +1) -1)/2), but perhaps we can compute it more simply.\n\nSo, the first part of the problem is solved by finding the minimal n where C(n,2) >= p. So, for p=0, n=0. For p=1, n=2, since C(2,2)=1 >=1.\n\nWait, but for p=0, the graph can have zero edges. So, n=0 makes sense.\n\nSo, the minimal n is the smallest integer n such that n(n-1)/2 >= p.\n\nSo, for a given p, compute n as the minimal integer satisfying n(n-1)/2 >= p.\n\nNow, the next part is to find, among all such graphs with minimal n, the maximum number of unidirectional pairs.\n\nAn unidirectional pair is an ordered pair (u, v) where u < v, u can reach v, and v cannot reach u.\n\nSo, to maximize the number of unidirectional pairs, we need to have as many edges as possible that are unidirectional, while ensuring that exactly p mutual pairs exist.\n\nWait, but in a graph, each edge can be unidirectional or mutual. So, to maximize the number of unidirectional pairs, we should have as many edges as possible that are unidirectional.\n\nBut wait, how does this affect the count of mutual pairs? Because each mutual pair is a u < v where both edges exist.\n\nSo, the problem is to arrange the graph with exactly p mutual pairs, and as many unidirectional edges as possible.\n\nSo, to maximize the number of unidirectional pairs, we should have as many edges as possible that are not mutual.\n\nBut how?\n\nLet me think: in a graph with minimal n, how can we arrange the edges to have as many unidirectional pairs as possible, given that exactly p mutual pairs must exist.\n\nWait, perhaps the optimal structure is a tournament graph where as many edges as possible are oriented to form a DAG except for the required mutual pairs.\n\nWait, but tournaments are complete oriented graphs where each pair has exactly one directed edge. But in our case, mutual edges are allowed, which is not the case in tournaments.\n\nAlternatively, perhaps the optimal structure is a graph where most edges are unidirectional, except for p pairs which are mutual.\n\nSo, to maximize unidirectional edges, for the remaining edges beyond the p mutual pairs, we should arrange them as unidirectional as possible.\n\nWait, perhaps the approach is:\n\n- Choose a subset S of C(n,2) - p edges to be unidirectional.\n\nBut how?\n\nWait, perhaps the maximum number of unidirectional pairs is achieved when the graph is a transitive tournament on n nodes, except for the p mutual edges.\n\nWait, not sure.\n\nAlternatively, perhaps the maximum number of unidirectional pairs is achieved when the graph consists of a complete DAG (transitive tournament) except for the p mutual edges.\n\nWait, but I'm not sure.\n\nAlternatively, perhaps the maximum number of unidirectional pairs is n(n-1)/2 - p - (something?), but I'm not certain.\n\nWait, let's think about the total number of possible ordered pairs (u, v) with u < v. That's C(n,2) = n(n-1)/2.\n\nOut of these, p are mutual, meaning both u→v and v→u exist. So, each of these contributes 0 to the unidirectional count.\n\nThe remaining C(n,2) - p are unidirectional, meaning for each such (u, v), exactly one of u→v or v→u exists.\n\nBut wait, in reality, each such pair (u, v) can be either mutual or unidirectional. So, the total number of unidirectional pairs is (C(n,2) - p) multiplied by 1, because each such pair contributes one unidirectional edge.\n\nWait, no. Because for each unidirectional pair (u, v), exactly one edge exists, so it's a single unidirectional pair. So, the total number of unidirectional pairs is (C(n,2) - p), because each mutual pair contributes zero, and each unidirectional contributes one.\n\nWait, but the problem statement says that an unidirectional pair is an ordered pair (u, v) where u can reach v, v cannot reach u, and u < v.\n\nSo, for each such (u, v), it's a single unidirectional pair. So the total number of unidirectional pairs is the number of ordered pairs (u, v) where u < v, u can reach v, and v cannot reach u.\n\nSo, the number of such pairs is equal to the number of edges that are unidirectional, because each such edge corresponds to exactly one unidirectional pair.\n\nSo, the total number of unidirectional pairs is equal to the number of unidirectional edges.\n\nWait, no. Because each unidirectional edge is a single direction, and thus contributes to exactly one unidirectional pair.\n\nSo, the number of unidirectional pairs is equal to the number of unidirectional edges.\n\nSo, to maximize the number of unidirectional pairs, we need to maximize the number of unidirectional edges in the graph, subject to exactly p mutual edges.\n\nThus, the problem reduces to: arrange the graph such that exactly p mutual edges exist, and as many unidirectional edges as possible.\n\nSo, the maximum number of unidirectional edges is (number of possible edges) - 2 * p.\n\nBecause each mutual edge contributes 2 edges (u→v and v→u), and each unidirectional contributes 1.\n\nSo, total edges = 2p + U, where U is the number of unidirectional edges.\n\nBut the total possible edges is C(n,2) = n(n-1)/2.\n\nSo, U = (n(n-1)/2) - 2p.\n\nBut wait, that's assuming that all mutual edges are chosen as the p required. So, the maximum number of unidirectional edges is (n(n-1)/2 - 2p).\n\nWhich implies that the maximum number of unidirectional pairs is (n(n-1)/2 - 2p).\n\nBut wait, that can't be right because for each mutual pair, both edges are present, and for unidirectional, only one. So the total edges would be 2p (from mutual) plus U (unidirectional edges). So, 2p + U = total edges.\n\nSo, U = total edges - 2p.\n\nTotal edges is C(n,2). So U = C(n,2) - 2p.\n\nBut the number of unidirectional pairs is equal to the number of unidirectional edges, which is U. So the maximum number of unidirectional pairs is U = C(n,2) - 2p.\n\nWait, but that can't be correct because in the sample input, for p=3, n=3.\n\nC(3,2)=3. So U=3-2*3= -3, which is impossible.\n\nAh, right, because when n=3 and p=3, all possible edges are mutual. So U=0, which is correct.\n\nWait, but in that case, the formula gives 3 - 6 = -3, which is wrong.\n\nSo, perhaps my reasoning is incorrect.\n\nWait, perhaps I made a mistake in the initial approach.\n\nLet me re-examine.\n\nEach mutual pair (u, v) adds two edges: u→v and v→u.\n\nEach unidirectional pair (u, v) adds one edge.\n\nSo, the total number of edges is 2p (from mutual) plus U (from unidirectional), where U is the number of unidirectional edges.\n\nBut the total possible edges is C(n,2).\n\nSo, 2p + U = C(n,2).\n\nThus, U = C(n,2) - 2p.\n\nBut the number of unidirectional pairs is U, because each such edge represents a single unidirectional pair.\n\nIn the sample input, when p=3, n=3.\n\nC(3,2)=3.\n\nSo U=3 - 2*3= -3, which is impossible.\n\nHmm, that suggests that the formula is incorrect.\n\nWhat's wrong here?\n\nWait, perhaps when p is such that 2p exceeds C(n,2), then it's impossible, but in reality, since p is the number of mutual pairs, which is at most C(n,2), so 2p can't exceed C(n,2) because each mutual pair contributes two edges.\n\nWait, no. Because each mutual pair is a single u < v where both edges are present, so each contributes two edges, but the total number of edges in the graph is 2p (from mutual pairs) plus the number of unidirectional edges.\n\nSo, the total edges can't exceed C(n,2)*2, but that's probably not the case.\n\nWait, perhaps the formula is correct, but in cases where p is larger than C(n,2), it's impossible, but according to the problem statement, p is given, and the graph must be p-reachable, so p must be <= C(n,2).\n\nSo, for the sample input p=3, n=3.\n\nC(3,2)=3.\n\nU=3-2*3= -3, which is impossible. So, something's wrong with the reasoning.\n\nWait, perhaps the formula is not U = C(n,2) - 2p, but U = (C(n,2) - p) - x, where x is something else.\n\nAlternatively, perhaps the maximum number of unidirectional edges is (C(n,2) - p) - m, where m is the number of mutual edges beyond p. Not sure.\n\nAlternatively, perhaps I'm approaching this incorrectly.\n\nLet me think about the maximum number of unidirectional pairs.\n\nEach unidirectional pair is an edge that is not mutual. So, the number of unidirectional edges is equal to the number of such edges.\n\nSo, the maximum number of unidirectional edges is the maximum possible number of edges that are not mutual, given that exactly p mutual edges exist.\n\nSince each mutual edge is a pair (u, v) where both directions are present, the number of mutual edges is p.\n\nEach such mutual edge uses two edges.\n\nSo, the total number of edges in the graph is 2p (from mutual) plus U (unidirectional edges), where U is the number of unidirectional edges.\n\nThe maximum possible U is when the graph has as many unidirectional edges as possible.\n\nBut the total number of possible edges is C(n,2).\n\nThus, 2p + U ≤ C(n,2).\n\nSo, U_max = C(n,2) - 2p.\n\nBut in the sample input, for p=3 and n=3, C(n,2)=3. So U_max = 3 - 2*3 = -3, which is impossible.\n\nThis suggests that the formula is incorrect.\n\nWait, perhaps the formula should be U_max = (C(n,2) - p) - something.\n\nWait, perhaps I'm mixing up the counts.\n\nWait, each mutual pair (u, v) is a single u < v where both edges exist. So, the number of mutual edges is p.\n\nEach unidirectional edge is an edge that is not mutual, i.e., for (u, v), exactly one edge exists.\n\nSo, the total number of edges in the graph is 2p (from mutual) + U, where U is the number of unidirectional edges.\n\nBut the maximum U is when all possible edges are unidirectional except for the p mutual ones.\n\nBut how many edges are there?\n\nTotal edges = 2p + U.\n\nBut 2p + U can't exceed C(n,2), because the maximum possible edges is C(n,2).\n\nWait, no, because each mutual pair is two edges, and each unidirectional is one.\n\nWait, no, each mutual pair is two edges (u→v and v→u). Each unidirectional is one edge.\n\nSo, for each mutual pair (u, v), the two edges u→v and v→u are both present. So, each mutual pair contributes two edges.\n\nThus, the total number of edges is 2p (from mutual) + U (from unidirectional edges), where U is the number of unidirectional edges.\n\nBut the total possible edges is C(n,2). So,\n\n2p + U ≤ C(n,2).\n\nThus, U_max = C(n,2) - 2p.\n\nBut in the sample input, when p=3 and n=3, 2p=6. C(n,2)=3. So 6>3, which is impossible.\n\nSo, this suggests that the formula is incorrect.\n\nWhat's wrong here?\n\nWait, perhaps when n is minimal, the maximum possible number of edges is C(n,2), but each mutual pair takes up two edges, so 2p can't exceed C(n,2). So, for the minimal n, 2p ≤ C(n,2).\n\nBut for p=3 and n=3, C(3,2)=3, 2p=6>3, which is impossible.\n\nSo, this indicates that my earlier assumption is wrong.\n\nWait, perhaps I'm misunderstanding the minimal n.\n\nWait, for p=3, the minimal n is 3 because C(3,2)=3 ≥3.\n\nBut in this case, the graph can't have 3 mutual pairs because each mutual pair requires two edges, so 3 mutual pairs would require 6 edges, but C(3,2)=3 edges.\n\nSo, this suggests that the earlier approach is incorrect.\n\nAh! Oh wait, that's a crucial point.\n\nWait, each mutual pair is a single u < v, but it requires two edges (u→v and v→u). So, for p mutual pairs, the total number of edges is 2p.\n\nSo, the maximum possible number of edges in the graph is C(n,2), but 2p must be ≤ C(n,2), because otherwise, it's impossible to have p mutual pairs.\n\nSo, the minimal n must satisfy 2p ≤ C(n,2).\n\nWait, but in the sample input, p=3, n=3.\n\nC(3,2)=3. 2p=6>3, which is impossible. So, how is the sample possible?\n\nWait, perhaps I made a mistake in interpreting the sample.\n\nWait, the sample says for p=3, the minimal n is 3, but that seems impossible because 3 mutual pairs would require 6 edges, but C(3,2)=3.\n\nSo, this suggests that my understanding of the problem is incorrect.\n\nWait, perhaps I'm miscounting the edges.\n\nWait, in the sample input, when p=3, the graph must have exactly 3 mutual pairs.\n\nBut each mutual pair requires two edges. So, for p=3, 3×2=6 edges.\n\nBut for n=3, the total possible edges is 3, which is less than 6. So, it's impossible.\n\nSo, this suggests that the minimal n for p=3 is higher.\n\nWait, but the sample says n=3.\n\nHmm, this is confusing.\n\nWait, perhaps I'm misunderstanding the problem statement. Maybe the p is the number of mutual edges, not the number of mutual pairs.\n\nWait, the problem says: \"contains exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\"\n\nSo, each mutual pair (u, v) contributes exactly 1 to p, regardless of whether u→v and v→u are both present.\n\nWait, no. Because if u and v are mutually reachable, then (u, v) is a mutual pair and contributes 1 to p. So, the count p is the number of mutual pairs (u, v) with u < v.\n\nSo, for p=3, the graph must have exactly 3 such mutual pairs.\n\nEach such mutual pair requires that both u→v and v→u are present.\n\nSo, for each mutual pair, two edges are added.\n\nThus, the number of edges is 2 × p.\n\nBut for n=3, the maximum number of edges is 3. So 2p=6>3, which is impossible.\n\nSo, how is the sample possible?\n\nAh! Wait, perhaps I've made a mistake in understanding the problem.\n\nWait, perhaps the count p is the number of mutual edges, not the number of mutual pairs.\n\nWait, the problem says: \"contains exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\"\n\nSo, each (u, v) is an ordered pair, but u < v. So, each mutual pair (u, v) is a single ordered pair, but requires two edges.\n\nSo, for p=3, the graph must have exactly three such mutual pairs.\n\nEach mutual pair contributes two edges, so 3 × 2 =6 edges.\n\nBut for n=3, the maximum number of edges is 3, which is less than 6. So, this is impossible.\n\nBut according to the sample, it's possible.\n\nWait, this suggests that my understanding is wrong.\n\nAlternatively, perhaps the problem is that the count p is the number of unordered pairs {u, v} where u and v are reachable in both directions. So, each such unordered pair contributes 1 to p.\n\nIn that case, for each unordered pair {u, v}, if both edges are present, it's a mutual pair and contributes 1 to p.\n\nSo, the number of mutual pairs is p.\n\nIn this case, for n=3, the maximum p is 3 (since all possible unordered pairs can be mutual). So, for p=3, it's possible.\n\nEach mutual pair requires two edges, so 3 mutual pairs would require 6 edges, but n=3 has only 3 possible edges (u→v, v→w, w→u, etc.)? No, wait, for n=3, the possible directed edges are 3×2=6.\n\nWait, no. For n=3, there are 3×2=6 directed edges possible.\n\nSo, if all 3 mutual pairs are present, that would require 6 edges, which is exactly the number of possible edges.\n\nSo, the graph would have all possible edges mutual. So, each of the 3 unordered pairs has both edges present.\n\nSo, p=3 is possible with n=3.\n\nWait, but that's a complete mutual graph. So, each node is connected to every other node with two edges.\n\nThus, the sample makes sense.\n\nSo, the problem statement's p is the number of unordered mutual pairs {u, v}, u < v, that are present as mutual edges.\n\nSo, each such unordered pair contributes 1 to p, and requires two edges.\n\nThus, for a graph with n nodes, the maximum possible p is C(n,2), which is when all edges are mutual.\n\nSo, the minimal n is the smallest integer where C(n,2) >= p.\n\nWait, but earlier for p=3, n=3.\n\nFor p=4, C(4,2)=6 >=4, so n=4.\n\nSo, the minimal n is the smallest n where C(n,2) >= p.\n\nThus, the first part of the problem is to find the minimal n such that n(n-1)/2 >= p.\n\nNow, the second part is to find the maximum number of unidirectional pairs in such a graph.\n\nEach unidirectional pair is an unordered pair {u, v} where u < v, and exactly one of u→v or v→u is present.\n\nSo, the number of unidirectional pairs is the number of unordered pairs {u, v} where exactly one edge is present.\n\nSo, the maximum number of unidirectional pairs is the number of unordered pairs {u, v} that are not mutual, which is C(n,2) - p.\n\nBecause each unordered pair is either mutual (contributes to p) or unidirectional (contributes to the count).\n\nThus, the maximum number of unidirectional pairs is C(n,2) - p.\n\nWait, but that's not correct because each unidirectional unordered pair is a single pair, but each such pair can have either u→v or v→u, but not both.\n\nSo, the number of unidirectional unordered pairs is indeed C(n,2) - p.\n\nSo, for the sample input where p=3 and n=3, C(3,2)-p=3-3=0, which matches the sample output.\n\nAnother sample, when p=4 and n=5.\n\nWait, C(5,2)=10. 10-4=6, so the maximum number of unidirectional pairs is 6.\n\nWhich matches the sample output.\n\nWhen p=0, the maximum number of unidirectional pairs is C(n,2) - 0 = C(n,2).\n\nBut for p=0, n=0, so the output is 0.\n\nSo, the second part of the output is C(n,2) - p.\n\nWait, but wait: for the case where p=0, the graph can have no edges, but the maximum number of unidirectional pairs is zero because there are no edges.\n\nYes, because if there are no edges, there are no unidirectional pairs.\n\nSo, the formula holds.\n\nSo, the steps to solve the problem are:\n\n1. For a given p, find the minimal n such that n(n-1)/2 >= p.\n\n2. Compute the maximum number of unidirectional pairs as (n(n-1)/2) - p.\n\nBut wait, no: for the minimal n, the maximum number of unidirectional pairs is (C(n,2) - p), because C(n,2) is the total number of unordered pairs, and p is the number of mutual pairs.\n\nBut in the sample input, for p=3, n=3, C(3,2)=3, so 3-3=0, which is correct.\n\nAnother sample: p=4, n=5.\n\nC(5,2)=10, 10-4=6, which is correct.\n\nAnother test case: p=0, n=0.\n\nSo, the approach is to compute n as the minimal integer where n(n-1)/2 >= p.\n\nThen, the maximum number of unidirectional pairs is (n(n-1)/2) - p.\n\nSo, the code needs to compute n and then compute (n*(n-1)//2) - p.\n\nBut wait, let's test another scenario.\n\nSuppose p=1, n=2.\n\nC(2,2)=1 >=1.\n\nMaximum unidirectional pairs: 1-1=0.\n\nWhich makes sense, because the graph must have one mutual pair (both edges present), so no unidirectional pairs.\n\nAnother test case: p=5, n=4.\n\nC(4,2)=6 >=5.\n\nMaximum unidirectional pairs:6-5=1.\n\nWhich would be the case where all edges except for 5 mutual pairs are unidirectional.\n\nWait, no: wait, in a graph with 4 nodes, C(4,2)=6.\n\nIf p=5, then 5 mutual pairs are present, which requires 5×2=10 edges.\n\nBut for n=4, the maximum possible edges are 4×3=12. So 10 is possible.\n\nBut then, the number of unidirectional edges is 12 -10=2.\n\nEach such edge is a single direction.\n\nBut the number of unidirectional pairs is 2, because each such edge corresponds to a single unidirectional pair.\n\nSo, the formula is correct.\n\nThus, the code can proceed as follows:\n\nCompute n as the minimal integer where n(n-1)/2 >= p.\n\nCompute the maximum unidirectional pairs as (n*(n-1)//2) - p.\n\nBut wait, what about when p is zero?\n\nFor p=0, the minimal n is 0.\n\nBut then, the maximum unidirectional pairs is (0* -1)/2 -0 = 0, which is correct.\n\nAnother test case: p=0, n=0 → 0 0.\n\nYes.\n\nSo, now, the code needs to:\n\n- Read p.\n\n- Compute n as the minimal integer where n(n-1)/2 >= p.\n\nBut wait, for p=0, n=0.\n\nElse, find the minimal n where n(n-1)/2 >=p.\n\nHow to compute n?\n\nWe can compute it via binary search.\n\nWe can write a function to find the minimal n such that n(n-1)/2 >= p.\n\nAlternatively, solve the quadratic equation.\n\nThe inequality is n^2 -n - 2p >=0.\n\nThe roots of the equation n^2 -n - 2p =0 are [1 ± sqrt(1 + 8p)] /2.\n\nSo, the minimal integer n is the ceiling of the positive root.\n\nSo, n = ceil( (1 + sqrt(1 + 8p)) / 2 ).\n\nWait, let's test:\n\nFor p=3:\n\nsqrt(25) =5.\n\n(1+5)/2=3 → n=3.\n\nWhich is correct.\n\nFor p=4:\n\nsqrt(33)=~5.744 → (1+5.744)/2≈3.372 → ceiling is 4.\n\nWhich is correct.\n\nFor p=5:\n\nsqrt(41)=~6.403 → (1+6.403)/2≈3.701 → ceiling is4.\n\nWhich is correct.\n\nFor p=6:\n\nsqrt(49)=7 → (1+7)/2=4 → n=4.\n\nWhich is correct because C(4,2)=6.\n\nSo, the formula works.\n\nSo, in code, for p=0, n=0.\n\nElse, compute n as the ceiling of (1 + sqrt(1 + 8p))/2.\n\nWait, but when p=0, the formula would give (1 +1)/2=1 → ceiling is1. But for p=0, n should be 0.\n\nSo, handle p=0 as a special case.\n\nThus, the code can be structured as:\n\nif p ==0:\n    print(0 0)\nelse:\n    compute n as the minimal integer such that n(n-1)/2 >=p.\n\nSo, code steps:\n\nRead p.\n\nIf p ==0:\n\n   Output 0 0.\n\nElse:\n\n   Compute the minimal n.\n\n   Compute the maximum unidirectional pairs as (n*(n-1)//2) - p.\n\n   Output n and that value.\n\nWait, but for p=0, the output is 0 0.\n\nBut in code, for p=0, the minimal n is 0.\n\nSo, let's proceed.\n\nThus, the code is straightforward.\n\nTesting:\n\nSample Input 1: 3",
    "response": "To solve this problem, we need to determine two things for a given integer \\( p \\):\n1. The minimum number of nodes required to create a \\( p \\)-reachable directed graph.\n2. Among all such graphs with the minimum number of nodes, find the maximum number of unidirectional pairs.\n\n### Approach\n1. **Understanding \\( p \\)-Reachable Graphs**:\n   - A \\( p \\)-reachable directed graph contains exactly \\( p \\) ordered pairs of nodes \\((u, v)\\) such that \\( u < v \\) and both \\( u \\) can reach \\( v \\) and \\( v \\) can reach \\( u \\).\n\n2. **Minimum Number of Nodes**:\n   - The minimum number of nodes \\( n \\) required is the smallest integer such that the number of unordered pairs of nodes \\( C(n, 2) \\) (which is \\( n(n-1)/2 \\)) is at least \\( p \\). This can be found using the quadratic formula derived from the inequality \\( n(n-1)/2 \\geq p \\).\n\n3. **Maximum Number of Unidirectional Pairs**:\n   - Once the minimum \\( n \\) is determined, the maximum number of unidirectional pairs is calculated as \\( C(n, 2) - p \\), where \\( C(n, 2) \\) is the total number of unordered pairs and \\( p \\) is the number of mutual pairs.\n\n### Solution Code\n```python\nimport math\n\np = int(input())\nif p == 0:\n    print(\"0 0\")\nelse:\n    sqrt_val = math.sqrt(1 + 8 * p)\n    n = math.ceil((1 + sqrt_val) / 2)\n    max_uni = (n * (n - 1) // 2) - p\n    print(f\"{n} {max_uni}\")\n```\n\n### Explanation\n1. **Reading Input**: The input value \\( p \\) is read.\n2. **Special Case for \\( p = 0 \\)**: If \\( p \\) is zero, the output is directly \"0 0\" since no edges are needed.\n3. **Calculating Minimum Nodes**:\n   - Using the quadratic formula, we compute the smallest integer \\( n \\) such that \\( n(n-1)/2 \\geq p \\).\n4. **Calculating Maximum Unidirectional Pairs**:\n   - The maximum number of unidirectional pairs is derived by subtracting \\( p \\) from the total number of unordered pairs \\( C(n, 2) \\).\n\nThis approach efficiently determines the required values using mathematical insights and ensures optimal performance even for large values of \\( p \\).",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\np = int(input())\nif p == 0:\n    print(\"0 0\")\nelse:\n    sqrt_val = math.sqrt(1 + 8 * p)\n    n = math.ceil((1 + sqrt_val) / 2)\n    max_uni = (n * (n - 1) // 2) - p\n    print(f\"{n} {max_uni}\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 475,
        "completion_token_count": 559,
        "thoughts_token_count": 8193
    }
}