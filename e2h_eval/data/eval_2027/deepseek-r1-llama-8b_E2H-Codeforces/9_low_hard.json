{
    "start": 1758104012.2017956,
    "end": 1758104187.237869,
    "start-formatted": "2025-09-17 19:13 KST",
    "end-formatted": "2025-09-17 19:16 KST",
    "gpu": 2,
    "pid": 9,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about selecting souvenirs such that their total weight doesn't exceed m, and the total cost is maximized. The constraints are that each souvenir has a weight wi which is either 1, 2, or 3. And n can be up to 10^5, which is 100,000, while m can be up to 3*10^5.\n\nHmm. So, for each item, we have three possible weights, and we need to pick a subset where the sum of weights is <= m, and the sum of costs is as large as possible.\n\nI remember that for knapsack problems, when the items are large in number but with small weights, certain approaches become feasible. Since here the weights are only 1,2,3, maybe we can group them by weight and find an efficient way to compute the maximum cost.\n\nLet me think about how to approach this. Since the weights are small, perhaps we can precompute for each possible remainder modulo the least common multiple of the weights, but wait, the weights are 1,2,3. Their LCM is 6. But considering the sum of weights, maybe grouping into mod 6 would help. Or maybe we can model it differently.\n\nAlternatively, since the weights are 1,2,3, we can process each group (items with weight 1, 2, 3) separately and then combine them optimally.\n\nWait, let's consider all items grouped by their weights:\n\n- Group A: weight 1.\n- Group B: weight 2.\n- Group C: weight 3.\n\nFor each group, we can sort the items in descending order of cost because we want to maximize the total cost. Then, for each group, we can create a prefix sum array, which represents the maximum cost achievable by taking the first k items in that group.\n\nOnce we have these prefix sums for each group, the problem reduces to selecting a certain number of items from each group such that the total weight (sum of 1*a + 2*b + 3*c) is <= m, and the sum of their costs is maximized.\n\nSo, the steps could be:\n\n1. Sort each group in descending order of cost.\n2. Compute prefix sums for each group.\n3. Use dynamic programming to combine these groups, keeping track of the total weight and cost.\n\nBut how to structure the DP. Hmm.\n\nSince the maximum m is 3e5, the DP state needs to handle up to that. So, perhaps the DP[i][j] represents the maximum cost achievable by considering the first i items of group A, j items of group B, etc. But that might not be feasible due to the high dimensions.\n\nWait, another idea: since the weights are small, the DP can track the remaining weight capacity. For example, for each possible remainder modulo some number, we can track the maximum cost.\n\nWait, but the sum of weights can be up to 3e5. So, if we model the DP as dp[w], which is the maximum cost achievable with total weight w, then we can iterate through each group and update the dp accordingly.\n\nYes, that makes sense. Let's think:\n\nWe'll initialize dp[0] = 0. Then, for each group, we'll process it and update the dp array.\n\nProcessing group A (weight 1):\n\nFor each possible current weight w, we can choose to take some items from group A. Since group A is sorted in descending order, taking more items will add more cost but also increase the weight.\n\nSo for group A, after sorting and computing prefix sums, for each possible number of items taken k, the added weight is k and the cost is prefix_sum[k]. We need to find the maximum cost for each possible total weight.\n\nWait, but processing each group one by one and updating the dp seems manageable.\n\nLet me outline the approach step by step:\n\n1. Separate the items into three groups based on their weights.\n2. Sort each group in descending order of cost.\n3. Compute prefix sums for each group. For group A, prefix_a[k] is the sum of the first k items (0 <= k <= len(A)). Similarly for B and C.\n4. Initialize a dp array where dp[w] represents the maximum cost for a total weight of w. Initially, dp[0] = 0, and others can be -infinity or something.\n5. For each group, process it and update the dp array:\n   a. For group A (weight 1):\n      - For each possible number of items taken k, the weight added is k, and the cost is prefix_a[k].\n      - So for each possible current weight w in dp, we can try adding k items from group A, leading to w + k. If w + k <= m, then dp[w + k] = max(dp[w + k],",
    "response": "To solve this problem, we need to maximize the total cost of souvenirs Petya can carry without exceeding a given weight limit. Given the constraints on the number of souvenirs and their weights, an efficient approach is necessary.\n\n### Approach\n1. **Group Souvenirs by Weight**: Since each souvenir has a weight of 1, 2, or 3, we can categorize them into three groups based on their weights.\n2. **Sort Each Group**: Within each group, sort the souvenirs in descending order of their cost to prioritize higher value items.\n3. **Compute Prefix Sums**: For each group, compute prefix sums of the costs. This helps in quickly determining the maximum cost achievable by taking the top k items from each group.\n4. **Dynamic Programming (DP)**: Use a DP array where `dp[w]` represents the maximum cost achievable with a total weight of w. Initialize this array with `dp[0] = 0` and all other values as negative infinity.\n5. **Update DP Array**: For each group, update the DP array by considering all possible numbers of items taken from that group, ensuring the total weight does not exceed the limit.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    n, m = int(input[ptr]), int(input[ptr+1])\n    ptr += 2\n\n    group1 = []\n    group2 = []\n    group3 = []\n    for _ in range(n):\n        w, c = int(input[ptr]), int(input[ptr+1])\n        ptr += 2\n        if w == 1:\n            group1.append(c)\n        elif w == 2:\n            group2.append(c)\n        else:\n            group3.append(c)\n    \n    # Sort each group in descending order\n    group1.sort(reverse=True)\n    group2.sort(reverse=True)\n    group3.sort(reverse=True)\n    \n    # Compute prefix sums for each group\n    def compute_prefix(arr):\n        prefix = [0]\n        s = 0\n        for x in arr:\n            s += x\n            prefix.append(s)\n        return prefix\n    \n    prefix1 = compute_prefix(group1)\n    prefix2 = compute_prefix(group2)\n    prefix3 = compute_prefix(group3)\n    \n    # Now, process each group and update dp\n    dp = [-float('inf')] * (m + 1)\n    dp[0] = 0\n    \n    # Process group 1 (weight 1)\n    for w in range(m, -1, -1):\n        if dp[w] != -float('inf'):\n            for k in range(1, len(prefix1)):\n                if w + k > m:\n                    break\n                if dp[w + k] < dp[w] + prefix1[k]:\n                    dp[w + k] = dp[w] + prefix1[k]\n    \n    # Process group 2 (weight 2)\n    for w in range(m, -1, -1):\n        if dp[w] != -float('inf'):\n            for k in range(1, len(prefix2)):\n                cost_add = prefix2[k]\n                new_w = w + 2*k\n                if new_w > m:\n                    break\n                if dp[new_w] < dp[w] + cost_add:\n                    dp[new_w] = dp[w] + cost_add\n    \n    # Process group 3 (weight 3)\n    for w in range(m, -1, -1):\n        if dp[w] != -float('inf'):\n            for k in range(1, len(prefix3)):\n                cost_add = prefix3[k]\n                new_w = w + 3*k\n                if new_w > m:\n                    break\n                if dp[new_w] < dp[w] + cost_add:\n                    dp[new_w] = dp[w] + cost_add\n    \n    max_cost = max(dp[:m+1])\n    print(max_cost)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\nThe solution involves categorizing souvenirs by their weights and efficiently computing the maximum cost using dynamic programming. By processing each group of souvenirs separately and updating the DP array, we ensure that we consider all possible combinations of items without exceeding the weight limit. This approach optimally balances computational efficiency with the need to explore all feasible combinations of items.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    n, m = int(input[ptr]), int(input[ptr+1])\n    ptr += 2\n\n    group1 = []\n    group2 = []\n    group3 = []\n    for _ in range(n):\n        w, c = int(input[ptr]), int(input[ptr+1])\n        ptr += 2\n        if w == 1:\n            group1.append(c)\n        elif w == 2:\n            group2.append(c)\n        else:\n            group3.append(c)\n    \n    # Sort each group in descending order\n    group1.sort(reverse=True)\n    group2.sort(reverse=True)\n    group3.sort(reverse=True)\n    \n    # Compute prefix sums for each group\n    def compute_prefix(arr):\n        prefix = [0]\n        s = 0\n        for x in arr:\n            s += x\n            prefix.append(s)\n        return prefix\n    \n    prefix1 = compute_prefix(group1)\n    prefix2 = compute_prefix(group2)\n    prefix3 = compute_prefix(group3)\n    \n    # Now, process each group and update dp\n    dp = [-float('inf')] * (m + 1)\n    dp[0] = 0\n    \n    # Process group 1 (weight 1)\n    for w in range(m, -1, -1):\n        if dp[w] != -float('inf'):\n            for k in range(1, len(prefix1)):\n                if w + k > m:\n                    break\n                if dp[w + k] < dp[w] + prefix1[k]:\n                    dp[w + k] = dp[w] + prefix1[k]\n    \n    # Process group 2 (weight 2)\n    for w in range(m, -1, -1):\n        if dp[w] != -float('inf'):\n            for k in range(1, len(prefix2)):\n                cost_add = prefix2[k]\n                new_w = w + 2*k\n                if new_w > m:\n                    break\n                if dp[new_w] < dp[w] + cost_add:\n                    dp[new_w] = dp[w] + cost_add\n    \n    # Process group 3 (weight 3)\n    for w in range(m, -1, -1):\n        if dp[w] != -float('inf'):\n            for k in range(1, len(prefix3)):\n                cost_add = prefix3[k]\n                new_w = w + 3*k\n                if new_w > m:\n                    break\n                if dp[new_w] < dp[w] + cost_add:\n                    dp[new_w] = dp[w] + cost_add\n    \n    max_cost = max(dp[:m+1])\n    print(max_cost)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 450,
        "completion_token_count": 916,
        "thoughts_token_count": 1025
    }
}