{
    "start": 1758278354.6288471,
    "end": 1758278574.3025258,
    "start-formatted": "2025-09-19 19:39 KST",
    "end-formatted": "2025-09-19 19:42 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Okay, I need to solve this competitive programming problem. Let's read the problem statement carefully.\n\nSo, the task is to find the number of successful students in a group. A student is considered successful if they are the best in at least one subject. The best in a subject means that no other student has a higher mark for that subject.\n\nHmm, so for each subject, I need to find which student has the maximum mark for that subject. Then, count how many students are the best in at least one subject.\n\nLet me think about the steps:\n\n1. Read the input. The input has n students and m subjects. Each student's marks are given as a string of m characters.\n\n2. For each subject, determine the maximum mark among all students. Then, for each student, check if their mark in that subject equals the maximum. If yes, then this student is the best for that subject.\n\n3. For each student, check across all subjects whether they are the best in any of them. If yes, count them as successful.\n\nSo, the plan is:\n\n- For each subject (from 0 to m-1), find the maximum mark.\n- For each student, create a list of their marks per subject.\n- For each student, iterate through each subject and see if they have the max in that subject.\n- If a student has at least one such subject, increment the count.\n\nBut wait, how do I represent the data? Maybe for each subject, keep track of the maximum mark and which students have it.\n\nAlternatively, for each subject, collect all the students' marks. Find the max, then for each student, check if their mark in that subject is equal to max. If so, add that subject to the student's \"best\" set.\n\nYes, that's a way to go.\n\nSo, let's outline the steps:\n\n- Read n and m.\n- Read each student's string into a list of strings.\n- For each subject j (from 0 to m-1):\n   - Collect all the j-th characters from each student's string.\n   - Find the maximum value in this collection.\n   - Record which students have this maximum for subject j.\n- After processing all subjects, for each student, check if they are present in any of the subject's best lists.\n- Count the number of students who are in at least one best list.\n\nWait, but how to represent which students are best in which subjects. Maybe for each subject, we can note down the students who are the best in it. Then, for each student, check if they appear in any of these lists.\n\nAnother approach: For each student, keep a flag indicating whether they are the best in any subject. For each subject, find the maximum and mark all students with that mark as potential bests for that subject. Then, for each student, if their flag is true, count them.\n\nYes, that's efficient.\n\nLet's think about data structures. For each subject j, after finding the max, for each student i, if their j-th mark is equal to max, then mark them as a candidate for being successful.\n\nSo, the steps would be:\n\nInitialize a list of flags, say 'successful' of size n, all False.\n\nFor each subject j in 0..m-1:\n   max_mark = max of all j-th marks of students\n   for each student i:\n      if student_i's j-th mark == max_mark:\n          set successful[i] = True\n\nFinally, count the number of True values in successful.\n\nYes, that's manageable.\n\nNow, the challenge is to process each subject correctly.\n\nLet's think about the sample input:\n\nFirst sample input is something like:\n\n3 3\n223\n232\n112\n\nSo, for subject 0 (first character of each string), the marks are '2', '2', '1'. Max is 2. So students 0 and 1 are marked as successful.\n\nFor subject 1 (second character), the marks are '2', '3', '1'. Max is 3, so only student 1 is marked as successful.\n\nFor subject 2 (third character): '3', '2', '2'. Max is 3. So student 0 is marked as successful.\n\nSo, after processing all subjects:\n\nStudent 0 is successful because he was best in subject 0 and 2.\nStudent 1 is successful because he was best in subject 0, 1, and 2.\nStudent 2 is not successful.\n\nSo total is 2, which matches the sample.\n\nSo the logic works.\n\nNow, how to implement this in Python.\n\nSteps:\n\nRead n and m from the first line.\n\nThen, read n lines, each representing a student's marks. For each student, store their marks as a list or string.\n\nWait, since each student's marks are a string of length m, perhaps for each student, we can keep a list where each element is the mark for a subject.\n\nSo,",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their exam marks. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark for that subject.\n\n### Approach\n1. **Read Input:** First, read the number of students (n) and the number of subjects (m). Then, read each student's marks as a string.\n2. **Track Maximum Marks:** For each subject, determine the maximum mark achieved by any student.\n3. **Identify Successful Students:** For each subject, identify which students have the maximum mark. Mark these students as successful.\n4. **Count Successful Students:** Finally, count how many students have been marked as successful across all subjects.\n\n### Solution Code\n```python\n# Read input\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nstudents = []\nfor _ in range(n):\n    line = sys.stdin.readline().strip()\n    students.append(line)\n\nsuccessful = [False] * n\n\nfor j in range(m):\n    # Collect all j-th marks\n    max_mark = 0\n    for i in range(n):\n        current_mark = int(students[i][j])\n        if current_mark > max_mark:\n            max_mark = current_mark\n    # Mark all students with max_mark as successful\n    for i in range(n):\n        if int(students[i][j]) == max_mark:\n            successful[i] = True\n\nprint(sum(successful))\n```\n\n### Explanation\n1. **Reading Input:** The input is read using `sys.stdin.readline()` for efficiency, especially given the constraints.\n2. **Tracking Maximum Marks:** For each subject, iterate through each student's mark to find the maximum value. This helps in determining the best score for that subject.\n3. **Marking Successful Students:** After identifying the maximum mark for a subject, check each student's mark against this maximum. If a student's mark matches the maximum, they are marked as successful.\n4. **Counting Successes:** Use a boolean list to track successful students and sum the list to get the total count.\n\nThis approach efficiently processes each subject and student, ensuring that we correctly identify all successful students based on their marks.",
    "ground_truth": "N/A",
    "extracted_answer": "# Read input\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nstudents = []\nfor _ in range(n):\n    line = sys.stdin.readline().strip()\n    students.append(line)\n\nsuccessful = [False] * n\n\nfor j in range(m):\n    # Collect all j-th marks\n    max_mark = 0\n    for i in range(n):\n        current_mark = int(students[i][j])\n        if current_mark > max_mark:\n            max_mark = current_mark\n    # Mark all students with max_mark as successful\n    for i in range(n):\n        if int(students[i][j]) == max_mark:\n            successful[i] = True\n\nprint(sum(successful))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 431,
        "completion_token_count": 464,
        "thoughts_token_count": 1025
    }
}