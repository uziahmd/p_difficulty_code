{
    "start": 1758143734.7685144,
    "end": 1758145761.3147569,
    "start-formatted": "2025-09-18 06:15 KST",
    "end-formatted": "2025-09-18 06:49 KST",
    "gpu": 2,
    "pid": 10,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Feed the Golorp\n\nGolorps are mysterious creatures who feed on variables. Golorp's name is a program in some programming language. Some scientists believe that this language is Befunge; golorps are tantalizingly silent.Variables consumed by golorps can take values from 0 to 9, inclusive. For each golorp its daily diet is defined by its name. Some golorps are so picky that they can't be fed at all. Besides, all golorps are very health-conscious and try to eat as little as possible. Given a choice of several valid sequences of variable values, each golorp will choose lexicographically smallest one.For the purposes of this problem you can assume that a golorp consists of jaws and a stomach. The number of variables necessary to feed a golorp is defined by the shape of its jaws. Variables can get to the stomach only via the jaws.A hungry golorp is visiting you. You know its name; feed it or figure out that it's impossible.\n\n## Input\nThe input is a single string (between 13 and 1024 characters long) â€” the name of the visiting golorp. All names are similar and will resemble the ones given in the samples. The name is guaranteed to be valid.\n\n## Output\nOutput lexicographically smallest sequence of variable values fit for feeding this golorp. Values should be listed in the order in which they get into the jaws. If the golorp is impossible to feed, output \"false\".\n\n## Example\n### Input\n['?(_-_/___*__):-___>__.', '?(__-_+_/_____):-__>__,_____<__.', '?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.', '?(__+___+__-___):-___>__.']\n\n### Output\n['0010', 'false', '0250341', '0101']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about feeding a golorp, which is a creature from Befunge. The input is a string representing the golorp's name, and I need to determine if it's possible to find a sequence of variable values that satisfies the golorp's dietary requirements. If possible, I have to output the lexicographically smallest such sequence; otherwise, output \"false\".\n\nHmm, let's break down what I understand from the problem.\n\nFirst, the variables can take values from 0 to 9. Each variable is a digit in some sequence. The golorp's name defines how these variables are consumed. The key point here is that the variables must be fed into the golorp's stomach via its jaws in a specific order.\n\nI remember that in Befunge, the behavior of the program is determined by the grid of characters. The golorp's name is similar to a Befunge program. So perhaps the structure of the name determines the variables' dependencies.\n\nWait, maybe I should model this as a grid where each cell represents an instruction. The variables are the stack elements, but perhaps in this problem, it's more about the order of operations and the way variables are accessed.\n\nWait, no. The problem says that the number of variables necessary is defined by the shape of the golorp's jaws. So each variable is a digit, and they are consumed in a certain order. But how?\n\nLooking at the example might help. For instance, one of the sample inputs is \"?(_-_/___*__):-___>__.\" which outputs \"0010\". So I think that the structure of the golorp's name determines which variables are used and in what order.\n\nWait, maybe the golorp's name has a certain structure where each part requires a variable to be passed into it. For example, the '>' character is a right pointer which might indicate that a variable is being pushed onto the stack, or perhaps it's an instruction that requires a value.\n\nAlternatively, perhaps the name is structured such that each segment corresponds to a variable. For example, the first part before the first '>' could represent the first variable, then the next part before the next '>' represents the second variable, etc. Or maybe it's the other way around.\n\nWait, perhaps the structure is that the golorp's name is split into segments separated by '>' and '<', and each segment represents a variable. For example, in the sample input, the first part is \"?(_-_/___*__\", which is followed by \":-___>__.\" So perhaps each segment before a '>' is a variable, and the part after the '>' is another variable, but I'm not sure.\n\nAlternatively, considering Befunge's instruction pointers: the right direction changes when encountering '>', '<', etc. So perhaps the golorp's name consists of a series of segments, each corresponding to a variable, and each segment ends with a direction change (like '>').\n\nWait, maybe the golorp's name is composed of a series of blocks, each block ending with either '>' or '<'. Each block must evaluate to a single digit, which is the value of the corresponding variable. The order of these variables is determined by the positions of the blocks.\n\nSo for example, in the sample input, the first block is everything up to the first '>', then the next block is after the first '>' up to the next '<' or something like that? Or maybe each '>' indicates the end of a variable, and the variables are read in the order of the '>'s.\n\nBut perhaps it's better to model the problem by treating the golorp's name as a series of steps where each step depends on certain variables, and each variable's value is determined based on the constraints of the name.\n\nWait, I think the problem can be modeled as a directed acyclic graph (DAG) where each node represents a variable, and edges represent dependencies between variables. The goal is to assign a value (0-9) to each variable such that all constraints are satisfied, and the lex smallest assignment is chosen.\n\nBut how do we construct this DAG based on the golorp's name?\n\nLet me think about how the golorp's name works. Each part of the name could represent an instruction that uses certain variables. For example, a '+' operator would require two variables to be present on the stack. So each instruction may consume certain variables and produce a result, which is then used in subsequent instructions.\n\nBut in this problem, the variables are the digits being fed into the golorp. So perhaps each variable is a digit, and the name's structure determines the order in which these digits are used.\n\nWait, perhaps the name is structured such that the variables are arranged in a certain order, and each part of the name requires a certain number of variables to be passed in. For example, the first part of the name may require two variables, which are then combined using an operator, resulting in a new value that is used later.\n\nAlternatively, maybe each variable is represented by a segment of the name, and the segments are processed in order. Each segment may require a certain number of variables to be available, which are then combined and stored as a new variable.\n\nWait, perhaps each segment (between direction changes) represents a variable, and the way the variables are combined is determined by the instructions in that segment.\n\nThis is getting a bit abstract. Maybe looking at the sample will help.\n\nTake the first sample input:\n\n['?(_-_/___*__):-___>__.', ...]\n\nThe output is '0010'.\n\nSo the first variable is 0, the second is 0, the third is 1, the fourth is 0.\n\nHmm. So perhaps each segment of the name corresponds to a variable, and the segments are ordered based on their position.\n\nWait, perhaps the name is divided into parts separated by '>' and '<' directions, and each part corresponds to a variable. The variables are processed left to right, and each part must compute a value that is then used in the next step.\n\nWait, but how does that fit with the sample input? Let's see.\n\nThe first part is everything before the first '>', which is \"?(_-_/___*__\". Then, after the '>', there's \":-___>__.\".\n\nWait, perhaps the first segment is '?(_-_/___*__', which is processed into a value, say v1. Then, the next segment is ':-___>__', which is processed into a value, say v2. Then, the next segment is '__.', which is processed into v3, and so on.\n\nBut I'm not sure how each segment is computed into a single digit.\n\nAlternatively, perhaps each segment is a function that takes variables as input and outputs a digit. The functions are built from the instructions in the segment, using the available variables.\n\nSo, for each segment in the name, we need to express the computation of the variable it represents as a function of the previous variables.\n\nFor example, the first segment could involve a question mark, which probably pushes a new variable onto the stack, then some operations. Wait, but question marks in Befunge typically push the current stack depth to the stack. So if the stack is empty, it pushes 0, else pushes the current depth.\n\nWait, perhaps the idea is that each segment is a function that processes the available variables and outputs a digit. The functions are built as per the instructions in the segment, starting with an empty stack and possibly using the variables as needed.\n\nBut then, for each segment, the function must return a single digit, which becomes a new variable.\n\nSo, the process is:\n\n1. Split the name into segments separated by direction changes ('>' or '<'). The order of the segments determines the order of variable processing.\n\n2. For each segment, determine the function that computes the digit based on the available variables.\n\n3. The function must use only the variables processed before it, and return a single digit (0-9).\n\nIf any segment cannot be satisfied (i.e., the function cannot compute a digit), then the entire setup is impossible, output \"false\".\n\nOtherwise, assign the digits in the order of the segments, choosing the lex smallest possible assignments.\n\nSo, the problem reduces to:\n\n- Parsing the name into segments.\n- For each segment, determine the function that computes the digit.\n- Solve the system of equations (each function is a constraint on the variables).\n- Find the lex smallest assignment of variables that satisfies all constraints.\n\nThis seems manageable.\n\nNow, the challenge is to model each segment as a function of the previous variables, ensuring that each function can compute a valid digit.\n\nHow to model each segment's function? Well, perhaps each segment is a list of operations that manipulate a temporary stack. The function returns the top of the stack after processing the segment, which must be a single digit.\n\nBut wait, in Befunge, each character is an instruction. So each segment is a series of instructions that manipulate the stack. The function for a segment is the result of executing those instructions, starting with an empty stack (or with variables as the stack contents).\n\nWait, but variables are the stack elements, right? So for each segment, we start with the variables (stack) as they were left after the previous segment. Then, execute the instructions in the segment, and the final result is the value of the new variable.\n\nWait, but in the problem statement, the variables are the digits that are fed into the golorp. So perhaps the initial stack is empty, and each segment appends a new variable based on the instructions.\n\nNo, that doesn't make sense because the first segment would have nothing on the stack. Hmm.\n\nAlternatively, perhaps the initial stack is empty, and each segment is executed with the variables as the stack. Each segment must leave a single digit on the stack, which becomes the value of that variable.\n\nWait, perhaps each segment is treated as a function that, given the current state of the stack (the variables processed so far), produces a new variable. The function can only use the existing variables (the stack elements) and compute a new digit, which is added to the stack.\n\nSo, the processing is:\n\nSegment 1: Compute v1 from empty stack â†’ push v1.\nSegment 2: Compute v2 from [v1] â†’ push v2.\n...\nEach segment i must compute a value based on the previous variables, resulting in a new variable vi.\n\nWait, but how can a segment compute a value from the previous variables? Because each segment is a series of instructions that manipulate the stack.\n\nIn Befunge, each instruction can modify the stack, and the question is, for each segment, what is the final value on the stack after processing the segment.\n\nBut the problem is, for the purpose of this problem, each segment must compute a single digit, which is the value of the variable for that segment.\n\nSo, for example, the first segment could be a series of instructions that, when run with an empty stack, results in a digit being pushed onto the stack. That digit is the first variable.\n\nThe second segment is then processed with the stack containing the first variable, and must result in a second digit being pushed. And so on.\n\nSo the approach is:\n\n- Split the name into segments separated by '>' or '<'.\n- For each segment, determine what function it represents when applied to the current stack (which contains the previous variables).\n- Check if the function can produce a digit (0-9). If any segment cannot, output false.\n- Otherwise, collect the digits in order, ensuring that each is as small as possible to get the lex smallest overall.\n\nNow, the key steps are:\n\n1. Splitting the name into segments.\n\nThe name is a string that includes various Befunge instructions. We need to identify the points where the direction changes. In Befunge, the direction changes when a '>' or '<' is encountered. So each segment is the part of the code between two consecutive direction changes, or between the start and the first direction change, or between the last direction change and the end.\n\nWait, perhaps the direction changes are the separators, and each segment is the code between two direction changes. So the first segment is from the start to the first '>' or '<', the next is from there to the next direction change, etc.\n\nFor example, consider a name like \"A>B>C:\". The segments would be \"A\", \">B>\", \"C\", and the trailing \">\".\n\nWait, perhaps the direction changes are the separators, so the code is divided into segments by the direction changes.\n\nWait, perhaps the segments are the code between direction changes. So for example, the code \"a>b<c\" is split into [\"a>b\", \"c\"].\n\nWait, but in Befunge, the direction changes occur at each '>' or '<', so each direction change marks the end of a segment. So the first segment is from the beginning to the first '>' or '<', the next segment is from there to the next direction change, and so on until the end.\n\nSo for example, the name \"A>B<C\" is split into [\"A\", \">B<\", \"C\"].\n\nYes, that makes sense.\n\nSo, step 1: parse the name into segments by splitting on '>' and '<'.\n\nOnce we have the segments, for each segment, we need to model the function that it represents when run on the current stack.\n\nEach function must return a single digit, which is the value for that variable.\n\nNow, the challenge is, for each segment, to compute the minimal possible value (to get the lex smallest overall), but ensuring that the function can be satisfied.\n\nWait, no: each segment's function must return a digit, but the choice of earlier variables affects the possible choices for later ones. So it's a matter of solving a system where each function is a constraint on the variables.\n\nSo the approach is:\n\n- For each segment, model the function it represents as a constraint on the current variables (stack). Each function must produce a digit, and the function's result depends on the current variables.\n\nWe need to find an assignment of variables (digits 0-9) that satisfies all constraints, and among all possible assignments, choose the lex smallest one.\n\nThis sounds like a backtracking problem, but with potentially many variables. So we need a way to represent the constraints and find the minimal assignment.\n\nBut considering the maximum length of the name is 1024 characters, which implies a maximum of, say, 1000 variables, this approach isn't feasible unless it's optimized.\n\nWait, but for each segment, the function can be represented as a formula that depends on the previous variables. So each function must evaluate to a single digit, which is a number between 0 and 9.\n\nEach function is a Befunge program that starts with an empty stack and processes the segment, but in our case, the stack is initialized with the variables from previous segments, and the function must return a single digit.\n\nWait, but the function is part of the segment, so perhaps the function is the result of the Befunge code in that segment, considering that the stack is initialized with the variables from previous segments.\n\nBut to model this, perhaps for each segment, we can simulate the execution of the Befunge code, considering the current state of the stack as the variables from previous segments, and see what the function evaluates to.\n\nBut how to model this for all possible variables? It's computationally intensive.\n\nAlternative approach: since each function must return a single digit, perhaps for each function, we can represent it as a function that, given the current variables, must evaluate to a digit. So for each function, we can find the constraints on the variables that must be satisfied.\n\nBut how?\n\nWait, perhaps for each function (segment), we can compute, for each possible combination of the variables involved, whether the function evaluates to a digit. Then, for each variable, assign a value such that all constraints are met.\n\nBut with variables possibly in the hundreds, this approach is computationally infeasible.\n\nSo perhaps a smarter way is needed.\n\nAnother thought: since each function must evaluate to a single digit, perhaps we can represent the function as a boolean formula indicating whether a certain assignment of variables leads to a digit. Then, the problem becomes finding the lex smallest assignment that satisfies all functions.\n\nBut again, with potentially many variables, this is difficult.\n\nWait, perhaps the functions can be represented in terms of the previous variables, and the constraints can be processed in a way that builds up the possible values for each variable step by step.\n\nFor example, the first function (segment) must compute a digit when the stack is empty. So the first function, when run with an empty stack, must return a digit. So the first function's function is f1(s0) = d1, where s0 is empty.\n\nThen, the second function must compute d2 based on s0 and d1. So f2(s0, d1) = d2.\n\nAnd so on.\n\nBut how do we model this for each function?\n\nPerhaps for each function, we can model the computation as a function that takes the current variables (stack) and returns a digit. So for each function, given the current variables, the function must evaluate to a digit. This means that for each function, the computation must not crash and must leave exactly one digit on the stack.\n\nWait, but in Befunge, the stack is manipulated, and functions can leave multiple digits on the stack. So perhaps the function for a segment must leave exactly one digit on the stack, regardless of the initial state.\n\nHmm, that's a crucial point. So for each segment, when it's processed, the stack after processing must have exactly one element, which is the digit assigned to that variable.\n\nThus, for each function (segment), given the initial stack (previous variables), when the function is executed, it must end up with exactly one element on the stack.\n\nSo, the problem is to find an assignment of variables (digits) such that, for each function, when it's executed with the current stack, it leaves exactly one digit on the stack.\n\nMoreover, the order of the variables is determined by the order of the functions (segments).\n\nSo, to model this, perhaps for each function, we can represent it as a function that, given the current variables, must return a single digit. The function can be precomputed, but given that the variables are dynamic, perhaps we can model this as a constraint satisfaction problem.\n\nBut how?\n\nAn alternative approach is to model each function as a function that depends on the previous variables, and for each function, try all possible combinations of the current variable, subject to the constraints imposed by the previous functions.\n\nWait, but even that could be too slow for larger numbers of variables.\n\nPerhaps instead, we can model each function as a function that, given the current variables, returns the possible digits that can be produced by that function.\n\nThen, for each function, we can track the possible digits it can produce given the current variables, and for each function, choose the smallest possible digit that allows the subsequent functions to have possible digits.\n\nThis seems like a feasible approach.\n\nSo, the algorithm could proceed as follows:\n\n1. Split the name into segments, S_1, S_2, ..., S_n.\n\n2. For each segment S_i, determine the set of variables it depends on (i.e., the variables that are on the stack when S_i is processed). These are the variables from S_1 to S_{i-1}.\n\n3. For each segment S_i, compute the set of possible digits (0-9) that can be produced by S_i, given the current variables.\n\n4. For each possible combination of variables, check if all segments can produce a digit, and choose the lex smallest assignment.\n\nBut this seems computationally expensive, especially since n can be up to 1024, which would imply 10^1024 possibilitiesâ€”completely infeasible.\n\nTherefore, we need a more efficient way to model the constraints.\n\nAnother idea is to model the functions as a series of constraints and find the minimal assignment step by step.\n\nHere's a possible approach:\n\n- Start with the first segment S_1. Since the stack is empty, S_1 must be a function that, when run with an empty stack, produces exactly one digit. So, for S_1, we can compute all possible digits it can produce, and choose the smallest one.\n\n- Then, for S_2, which depends on S_1's digit, compute all possible digits it can produce based on the current assignment of S_1. Again, choose the smallest possible digit.\n\n- Continue this process for each segment, always choosing the smallest possible digit at each step that allows the subsequent segments to have valid possibilities.\n\nThis greedy approach may not always work because choosing the smallest digit for an early segment may lead to a dead end later on, but given that the problem requires the lex smallest overall assignment, perhaps this is acceptable.\n\nWait, but the problem states that the golorp will choose the lex smallest possible sequence, so the lex order is determined by the entire assignment. So, the lex order is determined first by the first variable, then the second, etc. Therefore, the optimal strategy is to assign the smallest possible digit to the earliest possible variable, provided that this choice allows the remaining variables to be assigned.\n\nSo, the approach is:\n\n1. For each segment in order, determine the possible digits it can produce, given the current assignments of the previous variables.\n\n2. For each possible digit in order from 0 to 9, check if assigning this digit to the current variable allows the subsequent segments to have at least one possible digit each.\n\n3. Assign the smallest possible digit to the current variable, and proceed to the next segment.\n\nThis approach ensures that the lex smallest assignment is found, as each step chooses the smallest possible digit that doesn't block the solution.\n\nSo, the key is, for each segment, to compute the set of possible digits it can produce, given the current assignments, and then select the smallest digit that allows the rest of the segments to be satisfied.\n\nNow, the challenge is to model each segment's function and compute the possible digits it can produce given the current variables.\n\nHow to model a segment's function?\n\nEach segment is a Befunge program that, when run, must produce exactly one digit on the stack. The stack is initially empty for the first segment, then contains the variables from the previous segments for subsequent segments.\n\nSo, for a segment S, when run with a certain stack (current variables), it must produce exactly one digit on the stack.\n\nSo, for each segment, given the current stack, we can simulate the Befunge code and see what digits are possible.\n\nBut how to model this efficiently?\n\nWell, for each segment S, given a certain stack state (variables), we can simulate the Befunge code and see what the final stack looks like. If it has exactly one element, that's the digit produced by S. Otherwise, S is invalid.\n\nWait, but the stack is dynamic during the simulation. So, the function S can modify the stack, adding or popping elements as it processes.\n\nSo, for each segment S, given the current variables (stack), we can simulate the Befunge code and see if it leaves exactly one digit on the stack.\n\nIf yes, then that digit is a possible value for the current variable. If not, S is invalid, and the entire setup is impossible.\n\nSo, the plan is:\n\nFor each segment S_i:\n\n- Given the current variables (stack), simulate running S_i.\n\n- If the simulation leaves exactly one digit on the stack, record that digit as a possible value for S_i.\n\n- Else, S_i is invalid, and the entire setup is impossible.\n\nSo, the problem reduces to, for each segment S_i, given the current variables, determine the possible digits it can produce. Then, assign the smallest possible digit, ensuring that the remaining segments can still be satisfied.\n\nSo, the approach is:\n\n1. Split the name into segments S_1, S_2, ..., S_n.\n\n2. For each segment S_i, precompute the required variables (the ones used by S_i's code). Wait, no, because the variables are the stack elements, and the code can use any of them. So, the variables used by S_i are the ones in the stack when S_i is processed, which are S_1, S_2, ..., S_{i-1}.\n\n3. For each segment S_i, simulate the code with an empty stack (for S_1) or the current variables (for S_i >1). Then, collect the possible digits that S_i can produce.\n\n4. Then, for each variable S_i, in order, try digits from 0 to 9. For each candidate digit, check if it's possible for S_i to produce that digit given the current assignments of previous variables, and also check that the remaining segments can still be assigned valid digits.\n\n5. Choose the smallest possible digit for S_i that meets these conditions, and proceed to the next segment.\n\nThis seems manageable.\n\nBut how to implement this efficiently, especially considering that the number of segments can be up to 1024, which would require a lot of recursive or backtracking steps.\n\nWait, but in practice, the number of segments is limited by the number of direction changes in the name. For a 1024-length name, the maximum number of direction changes is 1023, so n could be up to 1023, but that's unlikely. However, in any case, the approach needs to handle it.\n\nBut even for n=10, trying all possible combinations of digits would be 10^10 possibilities, which is computationally impossible.\n\nThus, a backtracking approach isn't feasible. So we need a smarter way.\n\nAlternative idea: represent the possible digits for each segment as a set, and for each step, track the possible digits for each segment, updating them based on the current assignments.\n\nWait, but this might not be feasible either.\n\nWait, perhaps we can model this as a decision tree where each level represents a segment, and at each level, we choose the smallest possible digit for that segment that allows the remaining segments to have possible digits.\n\nThis approach is called the \"branch and bound\" method. At each step, we try digits in order from 0 to 9, and for each, we check if it's possible to proceed. If it's possible, we proceed recursively; otherwise, we backtrack.\n\nBut with n=20, this would be 10^20 possibilitiesâ€”way too slow.\n\nTherefore, this approach isn't feasible for larger n.\n\nHmm, perhaps there's a way to represent the constraints as a series of equations or inequalities that can be solved incrementally.\n\nWait, for each segment S_i, the function it represents can be considered as a function f_i(v_1, v_2, ..., v_{i-1}) â†’ d_i, where d_i is a digit (0-9).\n\nOur goal is to find v_1, v_2, ..., v_n such that each f_i is satisfied, and the sequence is lex smallest.\n\nEach f_i is a function that, given the previous variables, must produce a digit.\n\nSo, the problem is to find the lex smallest tuple (v_1, v_2, ..., v_n) such that for all i, f_i(v_1, ..., v_{i-1}) âˆˆ {0, ..., 9}.\n\nSo, the approach is to, for each i from 1 to n:\n\n- For the current i, try all possible digits d in 0-9, in order.\n\n- For each d, check if it's possible to assign d to v_i, given that for all j < i, v_j has already been assigned, and for j > i, the assignment hasn't happened yet.\n\nWait, but j > i haven't been assigned yet, so how can we check if the remaining segments can be satisfied?\n\nAh, that's the crux. To check if assigning d to v_i allows the remaining segments to have at least one possible digit each, given the current assignments.\n\nBut how can we check that without knowing the future assignments?\n\nThis suggests that for each step i, we need to know the possible assignments for the remaining segments, given the current partial assignment.\n\nBut with the number of remaining segments possibly being large, it's impractical to track all possibilities.\n\nAlternative approach: memoize the possible assignments for each segment given the current state.\n\nWait, but the state is the current assignments for the variables processed so far, and for each segment beyond the current one, the possible digits they can produce. But again, with the number of possible states being exponential, this is not feasible.\n\nHmm, perhaps we can model this as a SAT problem, where each constraint is that the function for each segment must produce a digit given the variables assigned so far. Then, we can use a SAT solver to find the lex smallest assignment.\n\nBut integrating a SAT solver into this problem is non-trivial, especially in Python, and may not be efficient enough for larger cases.\n\nAlternative idea: realize that for each segment, the function f_i depends only on the previous variables. So, for each segment, we can precompute all possible functions that it can represent, given the current variables. But again, it's unclear how to manage this.\n\nWait, perhaps for each segment S_i, the function f_i can be represented as a function of the previous variables. For example, f_i could be a linear function or some other form. But in reality, the function is arbitrary, depending on the Befunge code in S_i.\n\nBut perhaps, for the purposes of this problem, each function f_i can be considered as a function that, given the current variables, can only produce certain digits. So, for each function, we can compute the set of possible digits it can produce, given the current variables.\n\nIf we can compute, for each function, the set of possible digits, then the problem reduces to choosing, for each function in order, the smallest possible digit from its possible set that allows the subsequent functions to have at least one possible digit each.\n\nSo, the algorithm could be:\n\nInitialize a list of possible digits for each function, starting with all functions having all possible digits (0-9).\n\nFor each function i from 1 to n:\n\n   For each possible digit d in 0-9, in order from 0 to 9:\n\n      Suppose we assign d to v_i.\n\n      Check if, for all functions j > i, their possible digits sets are non-empty given the current assignments.\n\n      If yes, proceed with this assignment and break out of the loop.\n\n   If no such d exists, return \"false\".\n\nElse, proceed to the next function.\n\nBut the issue is, how to efficiently check whether, after assigning d to v_i, all functions j > i can still produce some digit.\n\nWait, but for each function j > i, the possible digits depend on the current assignments of variables before j and the assignment of v_i.\n\nBut in the approach above, we don't track the possible digits for j > i. So we need a way to represent, for each function j, the possible digits it can produce given the current assignments of variables before j.\n\nThus, the approach is:\n\n- For each function j, maintain a set of possible digits it can produce, given the current assignments of variables before j.\n\n- When processing function i, for each candidate digit d:\n\n   - Assign d to v_i.\n\n   - For each function j > i, recompute their possible digits based on the current assignments (including v_i if j depends on i).\n\n   - If for any j > i, the possible digits become empty, discard this candidate d.\n\n   - Else, keep d as a possible candidate for v_i.\n\n   - Proceed to the next function.\n\nBut this seems computationally expensive because for each candidate d, we have to recompute the possible digits for all j > i, which could be O(n^2 * 10) time, which might be manageable for small n but not for large n.\n\nBut given the constraints of the problem, perhaps this is manageable.\n\nSo, the detailed steps are:\n\n1. Split the name into segments S_1, S_2, ..., S_n.\n\n2. Precompute for each segment S_i the set of variables it depends on (i.e., the variables from S_1 to S_{i-1}).\n\n   Wait, no. Actually, the variables are the previous segments, so for S_i, the variables are v_1, v_2, ..., v_{i-1}.\n\n   So, for each S_i, when simulating, the stack is [v_1, v_2, ..., v_{i-1}].\n\n3. For each S_i, precompute a function that, given the current variables (v_1, ..., v_{i-1}), returns the possible digits it can produce.\n\n   This function can be precomputed once, but in reality, it depends on the current variables, so it's not feasible.\n\nAlternatively, for each function S_i, simulate it with the current variables (v_1, ..., v_{i-1}) and see what digits it can produce.\n\nSo, the steps are:\n\n- For each segment S_i, and given the current variables (v_1, ..., v_{i-1}), simulate the Befunge code and see what digits are possible.\n\nBut this is done on the fly during the assignment process.\n\nSo, the algorithm proceeds as follows:\n\nInitialize a list of variables assignments, v = [].\n\nFor each i from 1 to n:\n\n   For d in 0 to 9:\n\n      Assign v_i = d.\n\n      For each j from i+1 to n:\n\n          Simulate S_j with the current variables (v_1, ..., v_{j-1}, d if j=i+1, else v's up to j-1}.\n\n          Collect the possible digits for S_j.\n\n          If for any j, the possible digits is empty, break and try next d.\n\n      If all j > i can produce some digits, proceed with v_i = d and break.\n\n   If no such d exists, return false.\n\nElse, add d to v and proceed.\n\nSo, the key is, for each candidate d, we need to ensure that for all j > i, their possible digits are non-empty.\n\nBut how to compute the possible digits for j > i quickly.\n\nWait, for each j > i, the possible digits are determined by the current variables, including the assignment of v_i.\n\nSo, for each j, the function f_j can be simulated given the current variables (v_1, ..., v_{j-1}, and v_i if j = i+1).\n\nThus, the steps are:\n\nFor each i:\n\n   For each d in 0..9:\n\n      Assign v_i = d.\n\n      For each j from i+1 to n:\n\n          current_vars = v[0...j-1] + [d if j == i+1 else ... ].\n\n          Simulate S_j with current_vars.\n\n          If the simulation leaves exactly one digit, add that digit to S_j's possible digits.\n\n          Else, S_j is invalid â†’ break.\n\n      If all j > i are valid, proceed with v_i = d.\n\nThis seems feasible, but with n being up to 1024, and for each i, up to 10 candidates, and for each j, a simulation, it could be manageable.\n\nBut the simulation step for each j could take O(k) time, where k is the length of the segment.\n\nGiven that each segment can be up to 1024 characters, and for each i, we may have to simulate up to n segments, the total time is O(n^2 * k), which for n=1024 and k=1024 is about a million operationsâ€”manageable.\n\nBut wait, for each i, we have to simulate j from i+1 to n. So for i=1, j runs from 2 to n â†’ (n-1) steps. For i=2, j runs from 3 to n â†’ (n-2) steps, etc. So the total number of simulations is roughly n*(n-1)/2, which is about 500k for n=1024. Each simulation for a segment is O(k), which is 1024 steps. So total steps are about 500k * 1k = 500 million operations. That's manageable in Python, perhaps, but may be tight.\n\nBut perhaps we can optimize further.\n\nWait, but for each j, the simulation is independent of other i's except for the current variables. So, perhaps precomputing for each segment S_j the function that maps the current variables to possible digits is necessary.\n\nBut how?\n\nAlternatively, memoize the function for S_j given a certain set of variables.\n\nBut again, with the number of possible variables being high, this is impractical.\n\nSo, perhaps the best approach is to proceed with the described algorithm, and see if it can be implemented efficiently.\n\nNow, the main task is to implement the simulation of a segment given the current variables.\n\nSo, for a given segment S and a given stack (list of variables), simulate the Befunge code and see if it leaves exactly one digit on the stack.\n\nImplementing a Befunge interpreter for each segment is needed.\n\nSo, first, write a helper function that, given a segment (string) and a stack, returns the possible digits that the segment can produce. If the simulation leaves more than one digit, returns None (invalid).\n\nWait, no: the function should return the set of possible digits that the segment can produce, given the current stack. If the simulation leaves exactly one digit, return that digit. Else, return None (invalid).\n\nSo, the helper function is:\n\ndef evaluate_segment(segment, stack):\n\n    # Initialize a copy of the stack\n\n    temp_stack = list(stack)\n\n    # Iterate over each character in the segment\n\n    for c in segment:\n\n        if c == '>':\n\n            # Pop the top element and push it as a new integer.\n\n            if not temp_stack:\n\n                # Stack underflow; invalid.\n\n                return None\n\n            val = temp_stack.pop()\n\n            temp_stack.append(val)\n\n        elif c == '<':\n\n            # Similar to '>', but for popping from the end.\n\n            # Wait, no. Wait, in Befunge, '<' changes the direction to left, but in the stack manipulation, it's similar to '>' but from the end.\n\n            # Wait, perhaps I'm misunderstanding.\n\n            # No, in Befunge, the '<' changes the direction, but the stack manipulation is separate.\n\n            # Wait, no. '<' affects the pointer direction but doesn't directly affect the stack. So in the helper function, the stack is modified based on the Befunge code's instructions.\n\n            # So, the Befunge code's stack operations are handled by the code itself.\n\n            # For example, '+' adds the top two elements, etc.\n\n            # So, the helper function must correctly simulate the Befunge code's stack operations.\n\n            # So, for each character in the segment:\n\n            # If it's a stack operation, perform it.\n\n            # Else, change the direction of the pointer.\n\n            # So, perhaps I was wrong earlierâ€”this is a full Befunge interpreter",
    "response": "To solve this problem, we need to determine if a given golorp can be fed with a sequence of variable values that satisfy its dietary requirements. If possible, we must output the lexicographically smallest sequence; otherwise, we output \"false\".\n\n### Approach\n1. **Parse the Input**: The input is a string representing the golorp's name, which we split into segments based on direction changes ('>' or '<').\n2. **Simulate Befunge Instructions**: For each segment, simulate the Befunge instructions to determine the possible digits it can produce given the current state of the stack (variables).\n3. **Determine Possible Digits**: For each segment, check if it can produce exactly one digit on the stack. If not, the golorp cannot be fed.\n4. **Backtracking with Pruning**: Use a backtracking approach to assign the smallest possible digit to each variable, ensuring that subsequent segments can still be satisfied. This involves checking each candidate digit and pruning invalid paths early.\n\n### Solution Code\n```python\ndef main():\n    import sys\n\n    def parse_segments(s):\n        segments = []\n        current_segment = []\n        in_code = True\n        for c in s:\n            if in_code:\n                if c in '><>':\n                    segments.append(''.join(current_segment))\n                    current_segment = []\n                    in_code = False  # Start new segment after direction change\n                else:\n                    current_segment.append(c)\n            else:\n                # After a direction change, the next character starts a new segment\n                if c != '>':\n                    current_segment.append(c)\n        segments.append(''.join(current_segment))\n        return segments\n\n    def evaluate_segment(segment, stack):\n        temp_stack = list(stack)\n        for c in segment:\n            if c == '>':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '<':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '+':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(a + b)\n            elif c == '-':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b - a)\n            elif c == '*':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(a * b)\n            elif c == '/':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                if b == 0:\n                    return None\n                temp_stack.append(b // a)\n            elif c == '?':\n                if not temp_stack:\n                    temp_stack.append(0)\n                else:\n                    temp_stack.append(len(temp_stack))\n            elif c == '_':\n                if not temp_stack:\n                    return None\n                temp_stack.append(temp_stack[-1])\n            elif c == ':':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < ",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n\n    def parse_segments(s):\n        segments = []\n        current_segment = []\n        in_code = True\n        for c in s:\n            if in_code:\n                if c in '><>':\n                    segments.append(''.join(current_segment))\n                    current_segment = []\n                    in_code = False  # Start new segment after direction change\n                else:\n                    current_segment.append(c)\n            else:\n                # After a direction change, the next character starts a new segment\n                if c != '>':\n                    current_segment.append(c)\n        segments.append(''.join(current_segment))\n        return segments\n\n    def evaluate_segment(segment, stack):\n        temp_stack = list(stack)\n        for c in segment:\n            if c == '>':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '<':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '+':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(a + b)\n            elif c == '-':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b - a)\n            elif c == '*':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(a * b)\n            elif c == '/':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                if b == 0:\n                    return None\n                temp_stack.append(b // a)\n            elif c == '?':\n                if not temp_stack:\n                    temp_stack.append(0)\n                else:\n                    temp_stack.append(len(temp_stack))\n            elif c == '_':\n                if not temp_stack:\n                    return None\n                temp_stack.append(temp_stack[-1])\n            elif c == ':':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b & a)\n            elif c == '|':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b | a)\n            elif c == '~':\n                return None\n            elif c == 'Â¬':\n                return None\n            elif c == 'âˆˆ':\n                return None\n            elif c == '\\\\':\n                return None\n            elif c == ';':\n                pass\n            elif c == '(':\n                return None\n            elif c == ')':\n                return None\n            elif c == '[':\n                return None\n            elif c == ']':\n                return None\n            elif c == '{':\n                return None\n            elif c == '}':\n                return None\n            elif c == ' ':\n                return None\n            elif c == ',':\n                if not temp_stack:\n                    return None\n                val = temp_stack.pop()\n                temp_stack.append(val)\n            elif c == '\"':\n                return None\n            elif c == '#':\n                return None\n            elif c == '@':\n                return None\n            elif c == '$':\n                return None\n            elif c == '^':\n                return None\n            elif c == '`':\n                return None\n            elif c == '~':\n                return None\n            elif c == '%':\n                if len(temp_stack) < 2:\n                    return None\n                a = temp_stack.pop()\n                b = temp_stack.pop()\n                temp_stack.append(b % a)\n            elif c == '&':\n                if len(temp_stack) <",
    "score": 0,
    "metadata": {
        "prompt_token_count": 519,
        "completion_token_count": 31807,
        "thoughts_token_count": 8193
    }
}