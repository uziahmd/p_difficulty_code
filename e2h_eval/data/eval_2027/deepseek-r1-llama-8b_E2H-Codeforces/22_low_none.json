{
    "start": 1758278274.6243992,
    "end": 1758278470.3723924,
    "start-formatted": "2025-09-19 19:37 KST",
    "end-formatted": "2025-09-19 19:41 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about determining the number of successful students in a group based on their marks in various subjects. A successful student is one who is the best in at least one subject. The best in a subject means no one else has a higher mark for that subject.\n\nHmm, let's break this down. We have n students and m subjects. Each student has m marks, each from 1-9. For each subject, we need to find out which student has the highest mark. Then, for each student, check if they are the top in any subject. The count of such students is what we need to output.\n\nSo the steps I need to take are:\n\n1. Read the input correctly. The first line gives n and m. Then, there are n lines, each representing a student's marks for m subjects. These lines are strings of digits, no spaces. So for example, '223' represents three subjects where the student got 2, 2, 3.\n\n2. For each subject across all students, determine the maximum mark. Then, for each student, check if in any subject they have the maximum mark. If yes, count them as successful.\n\nWait, but how do I structure this? Let me think.\n\nMaybe create a list of lists, where each sublist represents a subject, and the elements are the marks of the students in that subject. Or perhaps a dictionary mapping subjects to a list of marks.\n\nAlternatively, for each subject, track the maximum mark and which students achieved it. Then, for each student, see if they are in any subject's maxima.\n\nYes, that seems manageable.\n\nLet me outline the steps:\n\n- Read n and m.\n- For each of the next n lines:\n   - Split the string into individual characters (each being a digit) and convert each to an integer. So each student's marks are stored as a list.\n- For each subject (from 0 to m-1):\n   - Find the maximum mark among all students in that subject.\n   - Collect all students who have this maximum mark in this subject.\n- After processing all subjects, for each student, check if they are present in any of the subject's top lists. If yes, increment the count.\n\nThat makes sense.\n\nNow, how to implement this efficiently.\n\nFirst, read the input. The first line is n and m. Then, for each student, read the string and process it into a list of integers.\n\nThen, for each subject j (from 0 to m-1), iterate through all students and find the maximum mark. Then, collect all indices (student numbers) who have that mark in subject j.\n\nOnce we have, for each subject, the list of students who are the best in that subject, then for each student, check if they are present in any of these lists.\n\nWait, but for each subject, the maximum could be same for multiple students. So for each subject, we can record the maximum value, and then for each student, check if their mark in that subject is equal to the maximum.\n\nWait, maybe another approach: For each subject, find the maximum value. Then, for each student, check each of their marks against the corresponding subject's maximum. If in any subject, their mark equals the maximum, then they are a successful student.\n\nThis might be more efficient because instead of creating a list for each subject, we can directly compute for each student.\n\nYes, that's better. Because for each student, we can loop through each of their marks and see if any of them is the maximum for that subject.\n\nSo here's a plan:\n\n1. Read n and m.\n2. Read each student's marks into a list of lists. Like, students[i] is a list of m integers.\n3. For each subject j (0 to m-1):\n   a. Find the maximum value among all students[i][j].\n4. Then, for each student i, check for each subject j if their mark equals the maximum for that j. If any j satisfies this, count the student as successful.\n\nThis way, we don't need to store which students are the best for each subject beyond knowing the maximum per subject.\n\nBut wait, how do we efficiently get the maximum for each subject?\n\nWe can initialize a list max_marks with m elements. For each subject j, max_marks[j] is the maximum value among all students[i][j].\n\nOnce we have this max_marks array, for each student, iterate through each subject and see if their mark is equal to the max_marks[j] for that j.\n\nIf yes, then the student is successful.\n\nSo step by step:\n\n- Read n and m.\n- Read n lines, each as a string. For each string, split into individual characters, convert each to int, and make a list for the student.\n- For each j from 0 to m-1:\n   - Iterate over all students, collect their j",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A successful student is defined as one who is the best in at least one subject, meaning no other student has a higher mark for that subject.\n\n### Approach\n1. **Read Input**: The first line contains two integers, `n` (number of students) and `m` (number of subjects). The next `n` lines contain strings representing the marks for each subject by each student.\n2. **Store Marks**: Convert each string into a list of integers where each integer represents the mark of a student in a particular subject.\n3. **Determine Maximum Marks**: For each subject, find the maximum mark achieved by any student.\n4. **Check Success**: For each student, check if they have the maximum mark in any subject. If they do, count them as a successful student.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    s = input().strip()\n    marks = [int(c) for c in s]\n    students.append(marks)\n\nmax_marks = [0] * m\n\nfor j in range(m):\n    current_max = -1\n    for i in range(n):\n        if students[i][j] > current_max:\n            current_max = students[i][j]\n    max_marks[j] = current_max\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if students[i][j] == max_marks[j]:\n            successful += 1\n            break\n\nprint(successful)\n```\n\n### Explanation\n1. **Reading Input**: We start by reading the number of students `n` and subjects `m`. Each subsequent line is read as a string and converted into a list of integers representing the marks for each subject.\n2. **Finding Maximum Marks**: For each subject, we iterate through all students to find the highest mark achieved. This information is stored in an array `max_marks`.\n3. **Checking Success**: For each student, we check if they have the maximum mark in any of the subjects. If a student has the maximum mark in at least one subject, they are counted as successful.\n\nThis approach efficiently determines the number of successful students by leveraging direct comparisons against the maximum marks for each subject, ensuring optimal performance even for the upper limits of the input constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    s = input().strip()\n    marks = [int(c) for c in s]\n    students.append(marks)\n\nmax_marks = [0] * m\n\nfor j in range(m):\n    current_max = -1\n    for i in range(n):\n        if students[i][j] > current_max:\n            current_max = students[i][j]\n    max_marks[j] = current_max\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if students[i][j] == max_marks[j]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 422,
        "completion_token_count": 499,
        "thoughts_token_count": 1025
    }
}