{
    "start": 1758278108.780248,
    "end": 1758278271.6975873,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house can be built on a spot, and each spot has a height between 0 and h. The profit for each spot is the square of its height. But there are m restrictions. Each restriction says that in a specific range of spots (l_i to r_i), the tallest house must be at most x_i. My goal is to find the maximum possible profit by choosing the heights appropriately.\n\nHmm. So, how do I model this? It seems like a problem where I need to assign a height to each spot, subject to certain constraints, and maximize the sum of squares.\n\nLet me think about the approach. Since n is up to 50, which is manageable, maybe a dynamic programming approach could work. Or perhaps trying all possibilities isn't too bad because 50^3 is 125,000, which is manageable for brute force if the constraints aren't too tight.\n\nWait, but wait. For each spot, the maximum allowed height is h, and the restrictions might further limit it. So, for each spot i, the maximum height we can set is the minimum between h and all the x_j that apply to it. But no, wait: a spot can be covered by multiple restrictions. For example, a spot could be part of two different ranges in the restrictions. So, the maximum allowed height for that spot would be the minimum of all the x_i's that include it, or h if none.\n\nSo, for each spot i, the maximum possible height is min(h, x_j for all j where l_j <= i <= r_j). But since each spot could be part of multiple restrictions, the actual maximum allowed is the minimum of all x_i's that cover it, or h otherwise.\n\nWait, but not exactly. Because some restrictions may not affect a spot. For example, if a spot is not covered by any restriction, then its maximum height is h. But if it's covered by multiple restrictions, the maximum height is the minimum of all x_i's for those restrictions.\n\nSo, for each spot, I can precompute the maximum allowed height as the minimum of all x's from the applicable restrictions, or h if none.\n\nBut wait, no. Because the constraints are that for each restriction, the maximum in their range is <= x_i. So, if a spot is included in multiple restrictions, each of those restrictions' x_i could impose a limit on its maximum height. But the overall maximum for the spot is the minimum of all such x_i's that include it. Because the spot's height must satisfy all restrictions it's part of.\n\nWait, no. For example, consider a spot that's part of two restrictions. The first restriction allows x=5, the second x=3. Then the maximum height for that spot is 3, because otherwise, the first restriction would be violated (since the max in its range is higher than x_i). So yes, the maximum height for the spot is the minimum of all x_i's from the restrictions that include it, or h if no restrictions apply.\n\nWait, no. Wait, the spot's height can be anything up to that minimum. Because if you choose a height less than or equal to that minimum, all the restrictions will be satisfied. Because for each restriction that includes the spot, the maximum in its range is at least as high as the spot's height, which is <= x_i. So yes, the spot's height can't exceed the minimum of all x_i's that include it. But also, it can't exceed h.\n\nSo, for each spot, the maximum possible height is min(h, min of x_i's from applicable restrictions). If no restrictions apply, then it's h.\n\nSo, the first step is to compute for each spot i, what is the maximum allowed height. Let's call this max_height[i].\n\nOnce we have this, the problem reduces to assigning to each spot a height a_i, where 0 <= a_i <= max_height[i], and the sum of a_i squared is maximized.\n\nAh! So now the problem is transformed into a problem where each spot has a maximum possible value, and we need to choose a_i as high as possible, within their limits, to maximize the sum of squares.\n\nThis is a classic optimization problem. The sum of squares is maximized when each a_i is as large as possible, given their constraints. Because the function is convex and increasing, the optimal solution is to set each a_i to their maximum allowed.\n\nWait, is that correct? Let me think. Suppose each a_i is independent, and the sum is the sum of squares. Then, to maximize the sum, each term should be as large as possible. So yes, for each a_i, the optimal choice is the maximum allowed.\n\nSo, if that's the case, then the solution is straightforward:\n\n1. For",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. Each house's height contributes to the total profit based on its square of the height, and each restriction limits the maximum height within a specific range.\n\n### Approach\n1. **Understand Restrictions**: Each restriction specifies a range of spots and a maximum height allowed in that range. The height of any spot must not exceed the minimum height allowed by all applicable restrictions.\n2. **Determine Maximum Heights**: For each spot, compute the maximum allowed height considering both the global maximum height `h` and the restrictions. This is done by taking the minimum of `h` and all relevant restriction heights for each spot.\n3. **Maximize Profit**: To maximize the profit, each spot should be assigned the highest possible height allowed by the computed maximum heights. This is because the sum of squares is maximized when each term is as large as possible.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nmax_heights = [h] * (n + 1)  # Using 1-based indexing\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    current_min = x\n    for i in range(l, r + 1):\n        if max_heights[i] > current_min:\n            max_heights[i] = current_min\n\n# Now, calculate the maximum profit\nprofit = 0\nfor i in range(1, n + 1):\n    profit += max_heights[i] ** 2\n\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The code reads the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Processing Restrictions**: For each restriction, it updates the maximum allowed height for each spot in the specified range to ensure it does not exceed the restriction's limit.\n3. **Calculating Profit**: After determining the maximum allowed heights for each spot, the code computes the total profit by summing the squares of these heights.\n\nThis approach ensures that we respect all restrictions while maximizing the profit efficiently.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nmax_heights = [h] * (n + 1)  # Using 1-based indexing\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    current_min = x\n    for i in range(l, r + 1):\n        if max_heights[i] > current_min:\n            max_heights[i] = current_min\n\n# Now, calculate the maximum profit\nprofit = 0\nfor i in range(1, n + 1):\n    profit += max_heights[i] ** 2\n\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 812,
        "completion_token_count": 451,
        "thoughts_token_count": 1025
    }
}