{
    "start": 1758278121.1990776,
    "end": 1758278339.002008,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:38 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house can be built on a spot, and each spot has a height between 0 and h. The profit for each spot is the square of its height. But there are m restrictions that limit the maximum height in specific ranges. \n\nHmm, the goal is to maximize the total profit while satisfying all the restrictions. So, I need to find the heights for each spot such that all the restrictions are met and the sum of squares is as large as possible.\n\nLet me think about how to model this. It seems like a dynamic programming problem because the choices for each spot depend on previous decisions, especially when considering overlapping ranges.\n\nWait, but n and h are up to 50, which is manageable for DP. So maybe we can model this with a state that keeps track of the maximum allowed height at each position, considering all the restrictions that affect it.\n\nEach restriction is a range [l_i, r_i], and within that range, the maximum height must be <= x_i. So for each spot, the height can't exceed any x_i where the spot is within some restriction's range. The effective maximum height for each spot is the minimum of all x_i that include it plus whatever the global h is.\n\nBut wait, the x_i can be less than h. So for each spot, the maximum allowed height is the minimum of h and all the x_i from the restrictions that cover it. Because if a spot is covered by multiple restrictions, the height must satisfy all of them. So the effective maximum is min(h, x1, x2, ...), where x1, x2, etc., are the x_i's for the restrictions that include the spot.\n\nSo first, I need to determine for each spot the maximum height it can have without violating any restrictions. Let's call this value s[i] for the ith spot. Then, the problem reduces to selecting a height a[i] for each spot such that a[i] <= s[i], and the sum of a[i]^2 is maximized.\n\nAh, right! Because each a[i] contributes a square term, to maximize the sum, each a[i] should be as large as possible. So for each spot, set a[i] to s[i]. Because the square function increases with the value, so higher a[i] gives more profit.\n\nWait, but what if the restrictions overlap in a way that setting a[i] to the maximum possible for each spot doesn't interfere with others? For example, suppose two restrictions both impose a max on the same spot. That's handled because s[i] is the minimum of all relevant x_i's and h.\n\nSo the plan is:\n\n1. For each spot i, compute the effective maximum height s[i], which is the minimum of h and all x_j where i is in [l_j, r_j].\n\n2. Then, assign a[i] = s[i], which will give the maximum possible profit.\n\nBecause the profit is the sum of squares, and each a[i] is as large as possible given the constraints.\n\nWait, but is that always correct? What if some spots are constrained by multiple restrictions, but those constraints don't just reduce their maximum but also influence adjacent spots?\n\nNo, because each spot's maximum is determined solely by the restrictions that apply to it. Because each restriction is a range, and a spot may be included in multiple ranges. So for each spot, the maximum allowed height is the smallest x_i among all restrictions that cover it, and also h.\n\nTherefore, the approach is straightforward: compute s[i] for each spot, then sum the squares.\n\nLet me test this against the examples.\n\nFirst example:\n\nn=3, h=3, m=3.\n\nRestrictions:\n1-1: x=1\n2-2: x=3\n3-3: x=2\n\nCompute s[i] for each spot:\n\nSpot 1: min(3, 1) → 1\nSpot 2: min(3,3) →3\nSpot3: min(3,2) →2\n\nSum of squares: 1 +9+4=14. Which matches the sample.\n\nSecond example:\n\nn=4, h=10, m=2.\n\nRestrictions:\n2-3: x=8\n3-4: x=7\n\nCompute s[i]:\n\nSpot1: only h=10, since no restrictions. So 10.\n\nSpot2: min(10,8) →8\n\nSpot3: min(10,8,7) →7\n\nSpot4: min(10,7) →7.\n\nSum is 100 +64 +49 +49 = 262. Which matches the sample.\n\nYes, so this approach works.\n\nSo the steps are:\n\n- Read n, h, m.\n\n- Initialize an array s of size n, all set",
    "response": "To solve this problem, we need to determine the maximum profit possible from building houses on a street while adhering to given zoning restrictions. Each house's height contributes to the profit based on its square value, and each restriction limits the maximum height within specific ranges.\n\n### Approach\n1. **Understand the Restrictions**: Each restriction specifies a range of spots and a maximum height that can be built within that range. The effective maximum height for each spot is determined by the minimum height allowed by all applicable restrictions and the global maximum height `h`.\n\n2. **Compute Effective Heights**: For each spot, calculate the effective maximum height by taking the minimum value between `h` and all the heights specified by the restrictions that apply to that spot.\n\n3. **Maximize Profit**: Once the effective maximum height for each spot is determined, set each house's height to this maximum value. This ensures that all restrictions are satisfied and the profit is maximized since the square function is maximized at the highest possible values.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\ns = [h] * (n + 1)  # Using 1-based indexing\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    for i in range(l, r+1):\n        if s[i] > x:\n            s[i] = x\n\n# Compute the sum of squares\ntotal = 0\nfor i in range(1, n+1):\n    total += s[i] ** 2\n\nprint(total)\n```\n\n### Explanation\n- **Reading Input**: The code starts by reading the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n- **Effective Heights Calculation**: For each restriction, it updates the effective maximum height for each spot within the restriction's range. This ensures that each spot's height does not exceed the minimum value imposed by any applicable restriction.\n- **Profit Calculation**: After determining the effective heights, the code calculates the total profit by summing the squares of these heights. This approach guarantees that all restrictions are satisfied while maximizing the profit.\n\nThis solution efficiently computes the optimal heights and profit using straightforward iteration over the restrictions and spots, ensuring all constraints are respected.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\ns = [h] * (n + 1)  # Using 1-based indexing\n\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    for i in range(l, r+1):\n        if s[i] > x:\n            s[i] = x\n\n# Compute the sum of squares\ntotal = 0\nfor i in range(1, n+1):\n    total += s[i] ** 2\n\nprint(total)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 812,
        "completion_token_count": 466,
        "thoughts_token_count": 1025
    }
}