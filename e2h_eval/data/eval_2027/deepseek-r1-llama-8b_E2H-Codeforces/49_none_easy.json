{
    "start": 1758292137.8159351,
    "end": 1758292192.4003541,
    "start-formatted": "2025-09-19 23:28 KST",
    "end-formatted": "2025-09-19 23:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef read_input():\n    \"\"\"Reads input from standard input.\"\"\"\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].strip().split())\n    roads = []\n    for i in range(1, m + 1):\n        a, b, gcd, lcm = map(int, lines[i].strip().split())\n        roads.append((a, b, gcd, lcm))\n    return n, m, roads\n\ndef solve(n, roads):\n    \"\"\"Solves the problem and returns the result.\"\"\"\n    # Create an adjacency list to represent the graph\n    graph = {}\n    for u, v, _, _ in roads:\n        if u not in graph:\n            graph[u] = []\n        if v not in graph:\n            graph[v] = []\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # Initialize the result array with unknown values\n    result = [-1] * (n + 1)\n\n    # Iterate over the roads to find the values of mushrooms\n    for u, v, gcd, lcm in roads:\n        # If the value of mushrooms at vertex u is unknown\n        if result[u] == -1:\n            # Find the value of mushrooms at vertex u\n            for val in [gcd, lcm]:\n                if val % gcd == 0 and val // gcd <= 100:\n                    result[u] = val\n                    break\n            else:\n                # If no value can be found, return \"NO\"\n                return \"NO\"\n\n        # If the value of mushrooms at vertex v is unknown\n        if result[v] == -1:\n            # Find the value of mushrooms at vertex v\n            for val in [gcd, lcm]:\n                if val % gcd == 0 and val // gcd <= 100:\n                    result[v] = val\n                    break\n            else:\n                # If no value can be found, return \"NO\"\n                return \"NO\"\n\n    # Check if the values satisfy the conditions of all roads\n    for u, v, gcd, lcm in roads:\n        if result[u] % gcd != 0 or result[u] // gcd != result[v] // gcd or result[u] // gcd != lcm // gcd:\n            return \"NO\"\n\n    # Return the result as \"YES\" followed by the values of mushrooms\n    return \"YES\\n\" + ' '.join(map(str, result[1:]))\n\ndef main():\n    \"\"\"The main function.\"\"\"\n    n, m, roads = read_input()\n    print(solve(n, roads))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script reads the input from standard input, solves the problem using the provided algorithm, and prints the result to standard output. The `read_input` function reads the input, the `solve` function solves the problem, and the `main` function ties everything together. The script uses a simple and efficient approach to solve the problem.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef read_input():\n    \"\"\"Reads input from standard input.\"\"\"\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].strip().split())\n    roads = []\n    for i in range(1, m + 1):\n        a, b, gcd, lcm = map(int, lines[i].strip().split())\n        roads.append((a, b, gcd, lcm))\n    return n, m, roads\n\ndef solve(n, roads):\n    \"\"\"Solves the problem and returns the result.\"\"\"\n    # Create an adjacency list to represent the graph\n    graph = {}\n    for u, v, _, _ in roads:\n        if u not in graph:\n            graph[u] = []\n        if v not in graph:\n            graph[v] = []\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # Initialize the result array with unknown values\n    result = [-1] * (n + 1)\n\n    # Iterate over the roads to find the values of mushrooms\n    for u, v, gcd, lcm in roads:\n        # If the value of mushrooms at vertex u is unknown\n        if result[u] == -1:\n            # Find the value of mushrooms at vertex u\n            for val in [gcd, lcm]:\n                if val % gcd == 0 and val // gcd <= 100:\n                    result[u] = val\n                    break\n            else:\n                # If no value can be found, return \"NO\"\n                return \"NO\"\n\n        # If the value of mushrooms at vertex v is unknown\n        if result[v] == -1:\n            # Find the value of mushrooms at vertex v\n            for val in [gcd, lcm]:\n                if val % gcd == 0 and val // gcd <= 100:\n                    result[v] = val\n                    break\n            else:\n                # If no value can be found, return \"NO\"\n                return \"NO\"\n\n    # Check if the values satisfy the conditions of all roads\n    for u, v, gcd, lcm in roads:\n        if result[u] % gcd != 0 or result[u] // gcd != result[v] // gcd or result[u] // gcd != lcm // gcd:\n            return \"NO\"\n\n    # Return the result as \"YES\" followed by the values of mushrooms\n    return \"YES\\n\" + ' '.join(map(str, result[1:]))\n\ndef main():\n    \"\"\"The main function.\"\"\"\n    n, m, roads = read_input()\n    print(solve(n, roads))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 574,
        "completion_token_count": 612,
        "thoughts_token_count": 0
    }
}