{
    "start": 1758278806.1346076,
    "end": 1758279207.2733746,
    "start-formatted": "2025-09-19 19:46 KST",
    "end-formatted": "2025-09-19 19:53 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about reconstructing the number of laughy mushrooms on each lawn based on some given roads. Each road has a GCD and an LCM of the two lawns it connects. My task is to determine if such an arrangement is possible and, if so, output one possible configuration.\n\nHmm, let's think about how to model this. The problem resembles a system of equations where each edge gives constraints on the values of the nodes (lawns). So, for each edge between u and v with GCD g and LCM l, we have that:\n\ng = gcd(a_u, a_v)\nl = lcm(a_u, a_v)\n\nBut wait, since lcm(a, b) = (a*b)/gcd(a,b), right? So for each edge, l must equal (a_u * a_v) / g. Or, rearranged, a_u * a_v = g * l.\n\nSo, for each edge, a_u * a_v = g * l. But also, since g is the gcd, we know that a_u and a_v are multiples of g. Let me express a_u as g * x and a_v as g * y, where x and y are coprime integers (since their gcd is 1). Then, the product would be g^2 * x * y, which equals g*l. So, g*x*y = l. Therefore, x*y = l/g. Since x and y are coprime, l/g must be equal to x multiplied by y, which are coprimes.\n\nSo, for each edge, we can compute l/g and factor it into two coprimes x and y, then assign a_u = g*x and a_v = g*y (or vice versa, but that might complicate things).\n\nThis seems like a graph where each node's value depends on its connected edges. It feels like a problem that can be modeled using a Union-Find (Disjoint Set Union) data structure, perhaps with some additional information attached to each node.\n\nWait, but the nodes are connected via multiple edges, but each pair of nodes can have at most one edge because it's mentioned that no two lawns are connected by more than one road. So each edge is unique between any two nodes.\n\nSo, the approach could be:\n\n1. For each connected component, assign values in such a way that all edges are satisfied.\n2. For each component, pick a starting node (like a root) and assign a value, then propagate the constraints to other nodes.\n\nBut how to handle the assignment when there are multiple possibilities? Because for each edge, there are potentially multiple ways to assign x and y as long as they multiply to l/g and are coprimes.\n\nAlternatively, perhaps we can represent each node's value as a multiple of some base variable. For example, for each node u, assign a variable a_u, and for edges, impose constraints that a_u must be a multiple of certain numbers.\n\nWait, maybe using BFS or DFS to assign values step by step, ensuring that all constraints are met.\n\nLet me outline the steps I need to perform:\n\n- Read the input: n lawns and m roads. Each road has u, v, g, l.\n- For each road, compute s = g * l. Then, s must be equal to a_u * a_v.\n- Also, since g is the gcd of a_u and a_v, a_u and a_v must be multiples of g. So, a_u = g * x, a_v = g * y, and x and y are coprimes, with x*y = (l/g).\n- So, for each road, after computing s = g*l, we can find all possible pairs (x, y) such that x * y = s/g and gcd(x, y) = 1.\n\nWait, but s = a_u * a_v = g*l, so s/g = a_u * a_v / g = (g x) * (g y) / g = g x y. Wait, no, wait: a_u = g x, a_v = g y. So a_u * a_v = g² x y. And this equals g l, so g² x y = g l → g x y = l → x y = l/(g). So yes, x and y must multiply to (l/g), and be coprimes.\n\nSo for each edge, we can precompute (l/g) and find all possible (x, y) pairs that are coprimes and multiply to that value.\n\nBut how do we choose x and y for each edge without conflicting with other edges?\n\nThis seems complicated because each edge can have multiple possibilities, and the assignments must be consistent across the entire graph.\n\nPerhaps we can model each node's value as a product of primes, and ensure that all edges' constraints are satisfied.\n\n",
    "response": "To solve this problem, we need to determine if it's possible to reconstruct the number of laughy mushrooms on each lawn based on given roads and their respective GCD and LCM values. If possible, we should output one valid configuration.\n\n### Approach\n1. **Graph Representation**: Represent the problem as a graph where each node is a lawn and each edge represents a road with its GCD and LCM.\n2. **Constraints Handling**: For each edge, express the values at its endpoints in terms of their GCD and LCM. This leads to the equation `a_u * a_v = GCD * LCM`.\n3. **Union-Find Data Structure**: Use a Union-Find (Disjoint Set Union) data structure to manage connected components. Each component will have a representative node, and we'll propagate constraints from this representative to other nodes.\n4. **Breadth-First Search (BFS)**: Use BFS to traverse each connected component, starting from a representative node. Assign values to nodes based on the constraints derived from the edges.\n5. **Check Validity**: Ensure that all constraints are satisfied during the BFS traversal. If any constraint is violated, the configuration is impossible.\n\n### Solution Code\n```python\nimport sys\nfrom math import gcd\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    m = int(input[idx+1])\n    idx +=2\n\n    edges = [[] for _ in range(n+1)]  # nodes are 1-based\n    for _ in range(m):\n        u = int(input[idx])\n        v = int(input[idx+1])\n        g = int(input[idx+2])\n        l = int(input[idx+3])\n        idx +=4\n        edges[u].append((v, g, l))\n        edges[v].append((u, g, l))\n\n    parent = [i for i in range(n+1)]\n    rank = [1]*(n+1)\n\n    def find(u):\n        while parent[u] != u:\n            parent[u] = parent[parent[u]]\n            u = parent[u]\n        return u\n\n    def union(u, v):\n        u_root = find(u)\n        v_root = find(v)\n        if u_root == v_root:\n            return False\n        if rank[u_root] < rank[v_root]:\n            parent[u_root] = v_root\n            rank[v_root] += rank[u_root]\n        else:\n            parent[v_root] = u_root\n            rank[u_root] += v_root\n        return True\n\n    component = defaultdict(list)\n    for i in range(1, n+1):\n        component[find(i)].append(i)\n\n    possible = True\n    value = [0]*(n+1)\n    q = deque()\n\n    for comp in component.values():\n        if not comp:\n            continue\n        u = next(iter(comp))\n        q.append(u)\n        value[u] = 1  # arbitrary initial value\n\n    while q and possible:\n        u = q.popleft()\n        for (v, g, l) in edges[u]:\n            if value[v] == 0:\n                s = g * l\n                product = s // g\n                if product == 0:\n                    possible = False\n                    break\n                factors = []\n                for x in range(1, int(product**0.5)+1):\n                    if product % x == 0:\n                        y = product // x\n                        if gcd(x, y) == 1:\n                            factors.append((x, y))\n                if not factors:\n                    possible = False\n                    break\n                for x, y in factors:\n                    if value[v] == 0:\n                        if value[u] == g * x and value[v] == g * y:\n                            possible = True\n                        else:\n                            value[v] = g * y\n                            union(u, v)\n                            q.append(v)\n                            break\n                    else:\n                        if value[v] == g * x:\n                            if value[u] == g * y:\n                                pass\n                            else:\n                                possible = False\n                                break\n                        elif value[v] == g * y:\n                            if value[u] == g * x:\n                                pass\n                            else:\n                                possible = False\n                                break\n                        else:\n                            possible = False\n                            break\n                if not possible:\n                    break\n        if not possible:\n            break\n\n    if not possible:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(' '.join(map(str, value[1:n+1])))\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into lawns and roads. Each road is stored with its endpoints and GCD/LCM values.\n2. **Union-Find Initialization**: Initialize the Union-Find structure to manage connected components.\n3. **Component Processing**: For each connected component, start BFS from a representative node and assign initial values.\n4. **BFS Traversal**: Traverse each component using BFS. For each edge, compute possible values for connected nodes based on GCD and LCM constraints.\n5. **Validation**: Check if all constraints are satisfied during BFS. If any constraint is violated, mark the configuration as impossible.\n6. **Output Result**: Print \"YES\" with the configuration if valid, otherwise print \"NO\".\n\nThis approach ensures that we efficiently check and assign values while respecting all constraints derived from the given roads.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom math import gcd\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    m = int(input[idx+1])\n    idx +=2\n\n    edges = [[] for _ in range(n+1)]  # nodes are 1-based\n    for _ in range(m):\n        u = int(input[idx])\n        v = int(input[idx+1])\n        g = int(input[idx+2])\n        l = int(input[idx+3])\n        idx +=4\n        edges[u].append((v, g, l))\n        edges[v].append((u, g, l))\n\n    parent = [i for i in range(n+1)]\n    rank = [1]*(n+1)\n\n    def find(u):\n        while parent[u] != u:\n            parent[u] = parent[parent[u]]\n            u = parent[u]\n        return u\n\n    def union(u, v):\n        u_root = find(u)\n        v_root = find(v)\n        if u_root == v_root:\n            return False\n        if rank[u_root] < rank[v_root]:\n            parent[u_root] = v_root\n            rank[v_root] += rank[u_root]\n        else:\n            parent[v_root] = u_root\n            rank[u_root] += v_root\n        return True\n\n    component = defaultdict(list)\n    for i in range(1, n+1):\n        component[find(i)].append(i)\n\n    possible = True\n    value = [0]*(n+1)\n    q = deque()\n\n    for comp in component.values():\n        if not comp:\n            continue\n        u = next(iter(comp))\n        q.append(u)\n        value[u] = 1  # arbitrary initial value\n\n    while q and possible:\n        u = q.popleft()\n        for (v, g, l) in edges[u]:\n            if value[v] == 0:\n                s = g * l\n                product = s // g\n                if product == 0:\n                    possible = False\n                    break\n                factors = []\n                for x in range(1, int(product**0.5)+1):\n                    if product % x == 0:\n                        y = product // x\n                        if gcd(x, y) == 1:\n                            factors.append((x, y))\n                if not factors:\n                    possible = False\n                    break\n                for x, y in factors:\n                    if value[v] == 0:\n                        if value[u] == g * x and value[v] == g * y:\n                            possible = True\n                        else:\n                            value[v] = g * y\n                            union(u, v)\n                            q.append(v)\n                            break\n                    else:\n                        if value[v] == g * x:\n                            if value[u] == g * y:\n                                pass\n                            else:\n                                possible = False\n                                break\n                        elif value[v] == g * y:\n                            if value[u] == g * x:\n                                pass\n                            else:\n                                possible = False\n                                break\n                        else:\n                            possible = False\n                            break\n                if not possible:\n                    break\n        if not possible:\n            break\n\n    if not possible:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(' '.join(map(str, value[1:n+1])))\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 1145,
        "thoughts_token_count": 1025
    }
}