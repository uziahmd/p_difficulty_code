{
    "start": 1758280858.8644328,
    "end": 1758281901.1921487,
    "start-formatted": "2025-09-19 20:20 KST",
    "end-formatted": "2025-09-19 20:38 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read through it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house can be built on a spot, and each spot has a height between 0 and h. The profit for each spot is the square of its height. But there are m restrictions that limit the maximum height in specific ranges of spots. My goal is to find the maximum possible total profit while satisfying all these restrictions.\n\nHmm, the constraints are small: n, h, m are up to 50. So maybe a brute-force approach is feasible here. Because even if we try all possible heights for each spot, 50 spots with each having up to 51 possibilities (0 to h), that's 51^50, which is way too big. Wait, that's impossible. So brute force isn't going to work here.\n\nWait, but wait. Maybe we can model this as a graph where each state represents some information about the previous spots, but that might get complicated.\n\nAlternatively, perhaps dynamic programming can help. Because for each spot, the decision depends on the previous spots' heights, especially when considering overlapping restrictions.\n\nLet me think about the approach. For each spot i, I need to decide the height a_i. All restrictions that cover i must be satisfied, meaning that the maximum height in their ranges must not exceed x_i.\n\nSo, for each position i, the height a_i must be such that for every restriction that includes i, the maximum in that range is <= x_i. But since a_i is part of multiple ranges, this complicates things.\n\nWait, perhaps the key is to model this as intervals and track for each interval what the maximum allowed height is. Then, for each spot, the allowed height is the minimum of all x_j from restrictions that include this spot, or h otherwise.\n\nNo, that's not correct because some restrictions may overlap. For example, a spot could be in two overlapping ranges. The maximum height in each range is constrained by their respective x_i. So for a spot, the maximum height it can take is the minimum of all x_i for the restrictions that include it.\n\nWait, no. Because a restriction says that in the range l_i to r_i, the tallest house must be at most x_i. So for any spot within l_i to r_i, its height cannot exceed x_i. Because if any spot in that range is higher than x_i, the maximum would exceed, violating the restriction.\n\nAh, right! So for any spot s, the maximum allowed height is the minimum of all x_i where s is in [l_i, r_i]. Because all those restrictions must be satisfied. But if s is not covered by any restriction, then its maximum is h.\n\nWait, no. Because if a spot is not covered by any restriction, then the only constraint is that it's at most h. So for each spot, the maximum possible height is the minimum between h and all x_i of the restrictions that include it.\n\nSo for each spot, the maximum allowed height is min(h, the smallest x_i among all restrictions that include it). If there are no restrictions covering the spot, then it's h.\n\nWait, no. Because for each restriction, the maximum in its range is at most x_i. So for each spot s, the maximum height a_s can have is the minimum of x_i across all restrictions that include s, or h if no restrictions apply.\n\nYes. Because if any restriction covers s, then a_s can't be higher than the x_i of that restriction. So the maximum allowed for s is the minimum of all x_i for the restrictions that include it, or h if none.\n\nSo, first step: for each spot s, compute the maximum allowed height as min_x = min of all x_i where l_i <= s <= r_i. If no such x_i exists, then max allowed is h.\n\nOnce I have the maximum allowed height for each spot, the problem reduces to choosing a height for each spot (from 0 to max_allowed[s]), such that the sum of squares is maximized.\n\nBut how do I compute this?\n\nThis seems like an optimization problem where each variable a_s is constrained to be <= max_allowed[s], and the function to maximize is the sum of squares of a_s.\n\nSince the variables are independent once the max allowed is known, the optimal choice is to set each a_s to its maximum allowed value. Because for a single variable, the square is maximized when the value is as large as possible.\n\nWait, yes! Because for any a >=0, a² is maximized at a= h, then h-1, etc. So for each spot, setting a_s to the maximum allowed will contribute the most to the total profit.\n\nSo the solution is:\n\n1. For each spot s, compute the maximum allowed height as the minimum of all x_i of the restrictions that include s. If no restrictions include s, then it's h.\n\n2. For each spot s, set a_s to this maximum allowed height.\n\n3. Sum the squares of all a_s to get the total profit.\n\nWait, but in the sample input, let's test this.\n\nSample Input 1:\n\n3 3 3\n1 1 1\n2 2 3\n3 3 2\n\nFor each spot:\n\nSpot 1: covered by restriction 1 (x=1). So max allowed is 1.\n\nSpot 2: covered by restriction 2 (x=3). So max allowed is 3.\n\nSpot 3: covered by restriction 3 (x=2). So max allowed is 2.\n\nTotal profit: 1+9+4=14. Which matches the sample output.\n\nAnother sample:\n\nInput:\n4 10 2\n2 3 8\n3 4 7\n\nSpot 1: no restrictions. So max is 10.\n\nSpot 2: covered by first restriction (x=8). So max is 8.\n\nSpot 3: covered by both restrictions. So min(8,7) is 7.\n\nSpot 4: covered by second restriction, x=7.\n\nSo a = [10,8,7,7]. Profit is 100 +64+49+49=262, which matches the sample.\n\nSo the approach seems correct.\n\nThus, the steps are:\n\n- For each spot, compute the minimal x_i among all applicable restrictions. If none, use h.\n\nSo now the problem reduces to, for each spot s, compute the minimal x_i where s is in [l_i, r_i].\n\nHow to compute this for each spot?\n\nWe can process each spot from 1 to n.\n\nFor each spot s, initialize min_x to h.\n\nThen, for each restriction, check if s is between l_i and r_i. If so, compare min_x with x_i. If x_i is smaller, update min_x to x_i.\n\nSo for each s, collect all x_i where s is in [l_i, r_i], then take the min.\n\nOnce we have all min_x for each s, the rest is easy.\n\nSo the code steps:\n\nRead n, h, m.\n\nFor each of m restrictions, read l, r, x. Store them as a list.\n\nFor each spot s in 1..n:\n\n   current_min = h\n\n   for each restriction in restrictions:\n\n       if l <= s <= r:\n\n           if x < current_min:\n\n               current_min = x\n\n   max_allowed[s] = current_min\n\nCompute the sum of squares of max_allowed[1..n]\n\nBut wait, since the spots are 1-based? Or zero-based? Well, the problem statement says 1-based.\n\nIn Python, we'll probably index from 0, but adjust accordingly.\n\nNow, implement this.\n\nSo, code outline:\n\nRead n, h, m.\n\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append( (l, r, x) )\n\nmax_heights = [h] * (n+1)  # 1-based indexing, spots 1..n\n\nfor s in range(1, n+1):\n    current_min = h\n    for (l, r, x) in restrictions:\n        if l <= s <= r:\n            if x < current_min:\n                current_min = x\n    max_heights[s] = current_min\n\ntotal = 0\nfor s in range(1, n+1):\n    total += (max_heights[s]) **2\n\nprint(total)\n\nWait, but in the sample input, the first line is '3 3 3\\n...' but looking at the input, the first line is '3 3 3', followed by three lines for the restrictions.\n\nWait, in the sample input given, the input is written as:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nWait, that's a bit confusing. Oh, perhaps that's just a way to represent the input as two lines, but in reality, the actual input is one line for n, h, m, followed by m lines of restrictions.\n\nSo, the code should read n, h, m from the first line, then read m lines.\n\nIn the sample input shown, the first line is '3 3 3' which is n=3, h=3, m=3. Then three lines of restrictions.\n\nSo in code, the code correctly reads that.\n\nTesting the code with sample 1:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → affects s=1.\n\n2 2 3 → affects s=2.\n\n3 3 2 → affects s=3.\n\nmax_heights[1] = min(1, h)=1.\n\nmax_heights[2] = min(3, h)=3.\n\nmax_heights[3] = min(2, h)=2.\n\nSum is 1 +9+4=14.\n\nWhich is correct.\n\nSample 2:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → affects s=2,3.\n\n3 4 7 → affects s=3,4.\n\nSo for s=1: no restrictions → max 10.\n\ns=2: min(8,10) → 8.\n\ns=3: min(8,7) →7.\n\ns=4: min(7,10) →7.\n\nSum: 10² +8²+7²+7²= 100+64+49+49=262.\n\nSo the code works.\n\nWhat about edge cases?\n\nCase where a spot is covered by multiple overlapping restrictions, and the min is correctly taken.\n\nAnother case: a spot covered by two restrictions with different x_i.\n\nLike spot 3 covered by a restriction x=5 and another x=6. So max allowed is 5.\n\nWhat if a spot is covered by no restrictions? Like in sample 2, spot 1.\n\nSo the code correctly sets max_heights[s] = h.\n\nWhat about a spot covered by multiple overlapping restrictions, but their x_i vary.\n\nYes, the code takes the min of all x_i.\n\nAnother edge case: when m=0. Then all spots can be h, sum is n*h².\n\nYes.\n\nWhat about when x_i is 0? Then that spot must be 0, so contributes 0.\n\nYes.\n\nSo, the code seems to handle all cases.\n\nSo, the plan is to write this code.\n\nWait, but in Python, the code needs to read from standard input, which is provided as a list of strings. But in the problem statement, the user is to write code that reads from stdin and writes to stdout.\n\nSo the code should read via input(), but perhaps in the problem statement's example, the input is represented as a list of strings.\n\nWait, the problem statement shows the input as:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nBut in reality, the input is read from stdin as a single string, split into lines.\n\nBut perhaps the code is supposed to read from stdin normally.\n\nSo, the code would be:\n\nRead the first line as n, h, m.\n\nThen read m lines, each containing l, r, x.\n\nSo, in code:\n\nn, h, m = map(int, input().split())\n\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append( (l, r, x) )\n\nmax_heights = [h]*(n+1)  # indexes 0 unused, 1..n used.\n\nfor s in range(1, n+1):\n    current_min = h\n    for (l, r, x) in restrictions:\n        if l <= s <= r:\n            if x < current_min:\n                current_min = x\n    max_heights[s] = current_min\n\ntotal = 0\nfor s in range(1, n+1):\n    total += (max_heights[s] **2)\n\nprint(total)\n\nWait, but in the sample input, the first line is '3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', which is four lines including the first? No, no— the first line is n, h, m, then m lines of restrictions.\n\nSo in the first sample, the code reads n=3, h=3, m=3, then reads three restrictions.\n\nYes.\n\nSo, the code is correct.\n\nI think this should handle all cases.\n",
    "response": "To solve this problem, we need to determine the maximum profit possible from building houses on a street while adhering to given zoning restrictions. Each house can be built on a spot with a height between 0 and a given maximum height, and each spot contributes to the total profit based on the square of its height. The challenge is to maximize this profit while respecting the constraints imposed by the zoning restrictions.\n\n### Approach\n1. **Understand the Problem Constraints**: Each restriction specifies a range of spots and the maximum height allowed in that range. For each spot, the height must be such that all applicable restrictions are satisfied.\n2. **Determine Maximum Allowed Heights**: For each spot, compute the minimum height allowed by any restriction that covers that spot. If a spot is not covered by any restriction, it can be as tall as the maximum allowed height.\n3. **Calculate Total Profit**: Once we know the maximum allowed height for each spot, the optimal strategy is to build the tallest possible house in each spot, as the square of a taller house contributes more to the profit than shorter ones.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\nmax_heights = [h] * (n + 1)  # 1-based indexing\n\nfor s in range(1, n + 1):\n    current_min = h\n    for (l, r, x) in restrictions:\n        if l <= s <= r:\n            if x < current_min:\n                current_min = x\n    max_heights[s] = current_min\n\ntotal = 0\nfor s in range(1, n + 1):\n    total += (max_heights[s] ** 2)\n\nprint(total)\n```\n\n### Explanation\n1. **Reading Input**: The first line of input contains the number of spots `n`, the maximum height `h`, and the number of restrictions `m`. Each subsequent line contains a restriction specifying a range of spots and the maximum height allowed in that range.\n2. **Processing Restrictions**: For each spot, we determine the minimum height allowed by any applicable restriction. This is done by iterating through each restriction and checking if the spot falls within the specified range.\n3. **Calculating Profit**: After determining the maximum allowed height for each spot, we compute the total profit by summing the squares of these heights. Building the tallest possible house in each spot maximizes the profit while satisfying all constraints.\n\nThis approach ensures that we efficiently determine the optimal heights for each spot and calculate the maximum possible profit while respecting all zoning restrictions.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\nmax_heights = [h] * (n + 1)  # 1-based indexing\n\nfor s in range(1, n + 1):\n    current_min = h\n    for (l, r, x) in restrictions:\n        if l <= s <= r:\n            if x < current_min:\n                current_min = x\n    max_heights[s] = current_min\n\ntotal = 0\nfor s in range(1, n + 1):\n    total += (max_heights[s] ** 2)\n\nprint(total)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 803,
        "completion_token_count": 560,
        "thoughts_token_count": 2903
    }
}