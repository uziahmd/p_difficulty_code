{
    "start": 1758278335.420077,
    "end": 1758278555.0582545,
    "start-formatted": "2025-09-19 19:38 KST",
    "end-formatted": "2025-09-19 19:42 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about finding the smallest non-negative integer k such that the least common multiple (LCM) of a+k and b+k is as small as possible. If there are multiple k's that give the same minimal LCM, we choose the smallest k.\n\nHmm, let's think about what a+k and b+k represent. Since a and b are given, adding the same k to both means their difference remains the same. So, the difference between a+k and b+k is equal to the difference between a and b. That's an important observation.\n\nWait, right. So, let me denote d as the absolute difference between a and b. Because if a is less than b, then a +k is smaller than b +k, but the difference remains |a - b|.\n\nSo, the two numbers in consideration are x = a +k and y = b +k. We know that y = x + d, where d is |a - b|. So, the LCM of x and y is LCM(x, x+d). Our goal is to minimize this LCM by choosing x appropriately.\n\nBut wait, since x = a +k, and k is non-negative, x has to be at least a (if a <= b) or at least b (if a > b), depending on the initial values. But perhaps it's easier to consider d as the absolute difference and work with that.\n\nLet me rephrase: the problem reduces to finding x such that x >= max(a, b), and y = x + d (since d is |a - b|). Then, compute LCM(x, x +d) for each possible x and find the x that gives the minimal LCM, then find the corresponding k.\n\nWait, no. Because when you add k, the x can be a +k, which may be larger than b +k if a was initially less than b. Or, if a was larger than b, then a +k could be less than b +k, but wait, no: because if a is 10 and b is 5, then a +k is 10 +k, which is larger than 5 +k. So, the order depends on whether a is bigger than b or not.\n\nWait, but regardless, the difference is fixed. So, let's calculate d = |a - b|. Then, the two numbers are x and x + d, where x is a +k if a >= b, else x is b +k. Wait, maybe that complicates things. Alternatively, perhaps it's better to always have x = min(a, b) +k, and y = max(a, b) +k. So, then x and y satisfy y = x + d.\n\nYes, that makes sense. Because if a < b, then a +k is x, and b +k is x + (b - a) = x +d. Similarly, if a > b, then b +k is x, and a +k is x +d. Either way, the two numbers differ by d.\n\nSo, our problem becomes: find x such that x >= max(a, b) -k? No, wait, no. Wait, x is a +k if a <= b, but that might not hold. Maybe it's better to model x as the starting point, and y = x +d. So, x can be any value greater than or equal to the maximum of a and b minus k? Hmm, perhaps I'm getting confused.\n\nAlternatively, perhaps I should model the problem as follows:\n\nLetâ€™s define d = |a - b|. Without loss of generality, assume that a <= b. Then, x = a +k, y = b +k = x +d. So, the LCM is LCM(x, x +d).\n\nOur task is to find x >= a (since k >=0) such that LCM(x, x +d) is minimized.\n\nWait, but in reality, a can be larger than b, so perhaps I should set d = |a - b|, and then x can be either a +k or b +k, whichever is smaller. No, that doesn't seem right. Alternatively, perhaps it's better to always have x = a +k and y = b +k, but then d = y -x = b -a (if a < b) or a -b (if a > b). So, in all cases, y = x +d, where d is fixed as |a -b|.\n\nSo, the problem is to find x such that x = a +k and y = x +d, and then compute LCM(x, y). The goal is to minimize this LCM.\n\nNow, the question is: how do we choose x to minimize LCM(x, x +d)?\n\nI remember that",
    "response": "To solve this problem, we need to find the smallest non-negative integer \\( k \\) such that the least common multiple (LCM) of \\( a + k \\) and \\( b + k \\) is minimized. If there are multiple values of \\( k \\) that yield the same minimal LCM, we choose the smallest \\( k \\).\n\n### Approach\n1. **Difference Calculation**: Calculate the absolute difference \\( d \\) between the two integers \\( a \\) and \\( b \\). This difference remains constant regardless of the value of \\( k \\).\n2. **Reformulate Problem**: Without loss of generality, assume \\( a \\leq b \\). Then, \\( a + k \\) and \\( b + k \\) can be represented as \\( x \\) and \\( x + d \\) respectively, where \\( x = a + k \\).\n3. **Minimize LCM**: The goal is to minimize the LCM of \\( x \\) and \\( x + d \\). This can be achieved by finding the optimal \\( x \\) such that the LCM is minimized.\n4. **Check Key Points**: The key points to check are when \\( x \\) is at specific positions relative to \\( d \\) to find the minimal LCM efficiently.\n\n### Solution Code\n```python\na, b = map(int, input().split())\nd = abs(a - b)\nif d == 0:\n    print(0)\nelse:\n    candidates = []\n    # Check x = a, a+1, ... up to a +d\n    for k in range(d + 1):\n        x = a + k\n        y = x + d\n        current_gcd = gcd(x, y)\n        lcm = (x * y) // current_gcd\n        candidates.append((lcm, k))\n    # Find the minimal lcm, then the smallest k\n    min_lcm = min(candidates, key=lambda x: (x[0], x[1]))\n    print(min_lcm[1])\n```\n\n### Explanation\n1. **Difference Calculation**: Compute \\( d \\) as the absolute difference between \\( a \\) and \\( b \\).\n2. **Special Case Handling**: If \\( a \\) equals \\( b \\), the answer is immediately \\( k = 0 \\) since the LCM is the same as the numbers themselves.\n3. **Iterate Over Possible Values**: For each \\( k \\) from 0 to \\( d \\), compute \\( x = a + k \\) and \\( y = x + d \\). Calculate the LCM and track the minimum LCM found along with the corresponding \\( k \\).\n4. **Select Optimal \\( k \\)**: After iterating through all possible \\( k \\) values, select the smallest \\( k \\) that yields the minimum LCM.\n\nThis approach ensures that we efficiently find the optimal \\( k \\) by leveraging the properties of LCM and GCD, making the solution both effective and efficient.",
    "ground_truth": "N/A",
    "extracted_answer": "a, b = map(int, input().split())\nd = abs(a - b)\nif d == 0:\n    print(0)\nelse:\n    candidates = []\n    # Check x = a, a+1, ... up to a +d\n    for k in range(d + 1):\n        x = a + k\n        y = x + d\n        current_gcd = gcd(x, y)\n        lcm = (x * y) // current_gcd\n        candidates.append((lcm, k))\n    # Find the minimal lcm, then the smallest k\n    min_lcm = min(candidates, key=lambda x: (x[0], x[1]))\n    print(min_lcm[1])",
    "score": -1,
    "metadata": {
        "prompt_token_count": 392,
        "completion_token_count": 618,
        "thoughts_token_count": 1025
    }
}