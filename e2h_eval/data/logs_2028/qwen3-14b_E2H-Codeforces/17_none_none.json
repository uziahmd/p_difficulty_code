{
    "start": 1757842745.5109687,
    "end": 1757842757.4212894,
    "start-formatted": "2025-09-14 18:39 KST",
    "end-formatted": "2025-09-14 18:39 KST",
    "gpu": 2,
    "pid": 17,
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Weights and costs for each item\n    w = []\n    c = []\n    \n    index = 2\n    for _ in range(n):\n        wi = int(data[index])\n        ci = int(data[index + 1])\n        w.append(wi)\n        c.append(ci)\n        index += 2\n    \n    # Group items by weight\n    weight_groups = {1: [], 2: [], 3: []}\n    for i in range(n):\n        weight_groups[w[i]].append(c[i])\n    \n    # Sort each group in descending order of cost\n    for key in weight_groups:\n        weight_groups[key].sort(reverse=True)\n    \n    # Initialize DP array\n    dp = [0] * (m + 1)\n    \n    # Process items of weight 1\n    for cost in weight_groups[1]:\n        for j in range(m, 0, -1):\n            if j >= 1:\n                dp[j] = max(dp[j], dp[j - 1] + cost)\n    \n    # Process items of weight 2\n    for cost in weight_groups[2]:\n        for j in range(m, 0, -1):\n            if j >= 2:\n                dp[j] = max(dp[j], dp[j - 2] + cost)\n    \n    # Process items of weight 3\n    for cost in weight_groups[3]:\n        for j in range(m, 0, -1):\n            if j >= 3:\n                dp[j] = max(dp[j], dp[j - 3] + cost)\n    \n    print(dp[m])\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Weights and costs for each item\n    w = []\n    c = []\n    \n    index = 2\n    for _ in range(n):\n        wi = int(data[index])\n        ci = int(data[index + 1])\n        w.append(wi)\n        c.append(ci)\n        index += 2\n    \n    # Group items by weight\n    weight_groups = {1: [], 2: [], 3: []}\n    for i in range(n):\n        weight_groups[w[i]].append(c[i])\n    \n    # Sort each group in descending order of cost\n    for key in weight_groups:\n        weight_groups[key].sort(reverse=True)\n    \n    # Initialize DP array\n    dp = [0] * (m + 1)\n    \n    # Process items of weight 1\n    for cost in weight_groups[1]:\n        for j in range(m, 0, -1):\n            if j >= 1:\n                dp[j] = max(dp[j], dp[j - 1] + cost)\n    \n    # Process items of weight 2\n    for cost in weight_groups[2]:\n        for j in range(m, 0, -1):\n            if j >= 2:\n                dp[j] = max(dp[j], dp[j - 2] + cost)\n    \n    # Process items of weight 3\n    for cost in weight_groups[3]:\n        for j in range(m, 0, -1):\n            if j >= 3:\n                dp[j] = max(dp[j], dp[j - 3] + cost)\n    \n    print(dp[m])",
    "score": -1,
    "metadata": {
        "prompt_token_count": 501,
        "completion_token_count": 379,
        "thoughts_token_count": 0
    }
}