{
    "start": 1757842723.3157563,
    "end": 1757842733.1834345,
    "start-formatted": "2025-09-14 18:38 KST",
    "end-formatted": "2025-09-14 18:38 KST",
    "gpu": 2,
    "pid": 6,
    "thought": "",
    "response": "```python\ndef solve():\n    import sys\n\n    # Define the order of notes\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\n    # Map each note to its index for easy calculation\n    note_to_index = {note: idx for idx, note in enumerate(notes)}\n\n    # Read input\n    input_line = sys.stdin.readline().strip()\n    chord = input_line.split()\n\n    # Generate all permutations of the 3 notes\n    from itertools import permutations\n    for perm in permutations(chord):\n        x, y, z = perm\n\n        # Calculate distances\n        x_idx = note_to_index[x]\n        y_idx = note_to_index[y]\n        z_idx = note_to_index[z]\n\n        # Distance between X and Y (cyclic)\n        dist_xy = (y_idx - x_idx) % 12\n        # Distance between Y and Z (cyclic)\n        dist_yz = (z_idx - y_idx) % 12\n\n        # Check for major triad\n        if dist_xy == 4 and dist_yz == 3:\n            print(\"major\")\n            return\n        # Check for minor triad\n        if dist_xy == 3 and dist_yz == 4:\n            print(\"minor\")\n            return\n\n    # If none matched\n    print(\"strange\")\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    import sys\n\n    # Define the order of notes\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\n    # Map each note to its index for easy calculation\n    note_to_index = {note: idx for idx, note in enumerate(notes)}\n\n    # Read input\n    input_line = sys.stdin.readline().strip()\n    chord = input_line.split()\n\n    # Generate all permutations of the 3 notes\n    from itertools import permutations\n    for perm in permutations(chord):\n        x, y, z = perm\n\n        # Calculate distances\n        x_idx = note_to_index[x]\n        y_idx = note_to_index[y]\n        z_idx = note_to_index[z]\n\n        # Distance between X and Y (cyclic)\n        dist_xy = (y_idx - x_idx) % 12\n        # Distance between Y and Z (cyclic)\n        dist_yz = (z_idx - y_idx) % 12\n\n        # Check for major triad\n        if dist_xy == 4 and dist_yz == 3:\n            print(\"major\")\n            return\n        # Check for minor triad\n        if dist_xy == 3 and dist_yz == 4:\n            print(\"minor\")\n            return\n\n    # If none matched\n    print(\"strange\")",
    "score": -1,
    "metadata": {
        "prompt_token_count": 702,
        "completion_token_count": 310,
        "thoughts_token_count": 0
    }
}