[
    {
        "contest_id": 1031,
        "problem_index": "A",
        "rating": 0.03177088060253618,
        "rating_std": 0.08473478069639234,
        "rating_volatility": 2.0834191211828364e-05,
        "rating_quantile": 0.034320762103614774,
        "tag": "Implement",
        "detailed_tag": "math",
        "problem_name": "Golden Plate",
        "problem_main": "You have a plate and you want to add some gilding to it. The plate is a rectangle that we split into $$$w\\times h$$$ cells. There should be $$$k$$$ gilded rings, the first one should go along the edge of the plate, the second one\u00a0\u2014 $$$2$$$ cells away from the edge and so on. Each ring has a width of $$$1$$$ cell. Formally, the $$$i$$$-th of these rings should consist of all bordering cells on the inner rectangle of size $$$(w - 4(i - 1))\\times(h - 4(i - 1))$$$.  The picture corresponds to the third example. Your task is to compute the number of cells to be gilded.",
        "problem_note": "The first example is shown on the picture below.  The second example is shown on the picture below.  The third example is shown in the problem description.",
        "input_spec": "The only line contains three integers $$$w$$$, $$$h$$$ and $$$k$$$ ($$$3 \\le w, h \\le 100$$$, $$$1 \\le k \\le \\left\\lfloor \\frac{min(n, m) + 1}{4}\\right\\rfloor$$$, where $$$\\lfloor x \\rfloor$$$ denotes the number $$$x$$$ rounded down) \u2014 the number of rows, columns and the number of rings, respectively.",
        "output_spec": "Print a single positive integer\u00a0\u2014 the number of cells to be gilded.",
        "sample_inputs": [
            "3 3 1",
            "7 9 1",
            "7 9 2"
        ],
        "sample_outputs": [
            "8",
            "28",
            "40"
        ],
        "inputs": [
            "3 3 1\r\n",
            "7 9 1\r\n",
            "7 9 2\r\n",
            "18 26 3\r\n",
            "63 34 8\r\n",
            "100 100 25\r\n",
            "4 3 1\r\n",
            "3 4 1\r\n",
            "3 10 1\r\n",
            "12 3 1\r\n",
            "4 4 1\r\n",
            "10 4 1\r\n",
            "4 12 1\r\n",
            "10 10 1\r\n",
            "10 10 2\r\n",
            "12 10 1\r\n",
            "10 12 2\r\n",
            "12 11 1\r\n",
            "11 12 2\r\n",
            "12 11 3\r\n",
            "100 8 2\r\n",
            "8 100 2\r\n",
            "100 100 20\r\n",
            "74 50 5\r\n",
            "43 75 9\r\n",
            "5 5 1\r\n"
        ],
        "answers": [
            "8\r\n",
            "28\r\n",
            "40\r\n",
            "204\r\n",
            "1072\r\n",
            "5100\r\n",
            "10\r\n",
            "10\r\n",
            "22\r\n",
            "26\r\n",
            "12\r\n",
            "24\r\n",
            "28\r\n",
            "36\r\n",
            "56\r\n",
            "40\r\n",
            "64\r\n",
            "42\r\n",
            "68\r\n",
            "78\r\n",
            "408\r\n",
            "408\r\n",
            "4880\r\n",
            "1060\r\n",
            "1512\r\n",
            "16\r\n"
        ],
        "input_output": {
            "inputs": [
                "3 3 1\r\n",
                "7 9 1\r\n",
                "7 9 2\r\n",
                "18 26 3\r\n",
                "63 34 8\r\n",
                "100 100 25\r\n",
                "4 3 1\r\n",
                "3 4 1\r\n",
                "3 10 1\r\n",
                "12 3 1\r\n",
                "4 4 1\r\n",
                "10 4 1\r\n",
                "4 12 1\r\n",
                "10 10 1\r\n",
                "10 10 2\r\n",
                "12 10 1\r\n",
                "10 12 2\r\n",
                "12 11 1\r\n",
                "11 12 2\r\n",
                "12 11 3\r\n",
                "100 8 2\r\n",
                "8 100 2\r\n",
                "100 100 20\r\n",
                "74 50 5\r\n",
                "43 75 9\r\n",
                "5 5 1\r\n"
            ],
            "outputs": [
                "8\r\n",
                "28\r\n",
                "40\r\n",
                "204\r\n",
                "1072\r\n",
                "5100\r\n",
                "10\r\n",
                "10\r\n",
                "22\r\n",
                "26\r\n",
                "12\r\n",
                "24\r\n",
                "28\r\n",
                "36\r\n",
                "56\r\n",
                "40\r\n",
                "64\r\n",
                "42\r\n",
                "68\r\n",
                "78\r\n",
                "408\r\n",
                "408\r\n",
                "4880\r\n",
                "1060\r\n",
                "1512\r\n",
                "16\r\n"
            ]
        },
        "solution_id_0": 248987397,
        "solution_0": "(a1, b, c) = map(int, input().split())\ng = 0\nfor i in range(c):\n    g = g + (2 * (a1 + b) - 4)\n    a1 -= 4\n    b -= 4\nprint(g)",
        "outputs_0": [
            "8\r\n",
            "28\r\n",
            "40\r\n",
            "204\r\n",
            "1072\r\n",
            "5100\r\n",
            "10\r\n",
            "10\r\n",
            "22\r\n",
            "26\r\n",
            "12\r\n",
            "24\r\n",
            "28\r\n",
            "36\r\n",
            "56\r\n",
            "40\r\n",
            "64\r\n",
            "42\r\n",
            "68\r\n",
            "78\r\n",
            "408\r\n",
            "408\r\n",
            "4880\r\n",
            "1060\r\n",
            "1512\r\n",
            "16\r\n"
        ],
        "solution_id_1": 245862911,
        "solution_1": "def main():\n    (w, h, k) = map(int, input().split())\n    print(2 * k * (w + h - 4 * k + 2))\nif __name__ == '__main__':\n    main()",
        "outputs_1": [
            "8\r\n",
            "28\r\n",
            "40\r\n",
            "204\r\n",
            "1072\r\n",
            "5100\r\n",
            "10\r\n",
            "10\r\n",
            "22\r\n",
            "26\r\n",
            "12\r\n",
            "24\r\n",
            "28\r\n",
            "36\r\n",
            "56\r\n",
            "40\r\n",
            "64\r\n",
            "42\r\n",
            "68\r\n",
            "78\r\n",
            "408\r\n",
            "408\r\n",
            "4880\r\n",
            "1060\r\n",
            "1512\r\n",
            "16\r\n"
        ],
        "solution_id_2": 245303429,
        "solution_2": "(w, h, k) = map(int, input().split())\ntotal_cells = 0\nfor i in range(k):\n    ring_width = w - 4 * i\n    ring_height = h - 4 * i\n    if ring_width <= 0 or ring_height <= 0:\n        break\n    cells_in_ring = 2 * ring_width + 2 * (ring_height - 2)\n    total_cells += cells_in_ring\nprint(total_cells)",
        "outputs_2": [
            "8\r\n",
            "28\r\n",
            "40\r\n",
            "204\r\n",
            "1072\r\n",
            "5100\r\n",
            "10\r\n",
            "10\r\n",
            "22\r\n",
            "26\r\n",
            "12\r\n",
            "24\r\n",
            "28\r\n",
            "36\r\n",
            "56\r\n",
            "40\r\n",
            "64\r\n",
            "42\r\n",
            "68\r\n",
            "78\r\n",
            "408\r\n",
            "408\r\n",
            "4880\r\n",
            "1060\r\n",
            "1512\r\n",
            "16\r\n"
        ],
        "unnorm_rating": 712.1739728798974,
        "unnorm_rating_std": 243.97719743723644,
        "unnorm_rating_volatility": 0.05998797118442063,
        "reference_rating": 800.0,
        "original_tags": [
            "implementation",
            "math"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 404,
        "problem_index": "A",
        "rating": 0.13513685526104818,
        "rating_std": 0.027789485966704518,
        "rating_volatility": 2.075828597180638e-05,
        "rating_quantile": 0.19326634477358737,
        "tag": "Implement",
        "detailed_tag": "implementation",
        "problem_name": "Valera and X",
        "problem_main": "Valera is a little boy. Yesterday he got a huge Math hometask at school, so Valera didn't have enough time to properly learn the English alphabet for his English lesson. Unfortunately, the English teacher decided to have a test on alphabet today. At the test Valera got a square piece of squared paper. The length of the side equals n squares (n is an odd number) and each unit square contains some small letter of the English alphabet.Valera needs to know if the letters written on the square piece of paper form letter \"X\". Valera's teacher thinks that the letters on the piece of paper form an \"X\", if:  on both diagonals of the square paper all letters are the same;  all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals. Help Valera, write the program that completes the described task for him.",
        "problem_note": "",
        "input_spec": "The first line contains integer n (3\u2009\u2264\u2009n\u2009<\u2009300; n is odd). Each of the next n lines contains n small English letters \u2014 the description of Valera's paper.",
        "output_spec": "Print string \"YES\", if the letters on the paper form letter \"X\". Otherwise, print string \"NO\". Print the strings without quotes.",
        "sample_inputs": [
            "5\nxooox\noxoxo\nsoxoo\noxoxo\nxooox",
            "3\nwsw\nsws\nwsw",
            "3\nxpx\npxp\nxpe"
        ],
        "sample_outputs": [
            "NO",
            "YES",
            "NO"
        ],
        "inputs": [
            "5\r\nxooox\r\noxoxo\r\nsoxoo\r\noxoxo\r\nxooox\r\n",
            "3\r\nwsw\r\nsws\r\nwsw\r\n",
            "3\r\nxpx\r\npxp\r\nxpe\r\n",
            "5\r\nliiil\r\nilili\r\niilii\r\nilili\r\nliiil\r\n",
            "7\r\nbwccccb\r\nckcccbj\r\nccbcbcc\r\ncccbccc\r\nccbcbcc\r\ncbcccbc\r\nbccccdt\r\n",
            "13\r\nsooooooooooos\r\nosoooooooooso\r\noosooooooosoo\r\nooosooooosooo\r\noooosooosoooo\r\nooooososooooo\r\noooooosoooooo\r\nooooososooooo\r\noooosooosoooo\r\nooosooooosooo\r\noosooooooosoo\r\nosoooooooooso\r\nsooooooooooos\r\n",
            "3\r\naaa\r\naaa\r\naaa\r\n",
            "3\r\naca\r\noec\r\nzba\r\n",
            "15\r\nrxeeeeeeeeeeeer\r\nereeeeeeeeeeere\r\needeeeeeeeeeoee\r\neeereeeeeeeewee\r\neeeereeeeebeeee\r\nqeeeereeejedyee\r\neeeeeerereeeeee\r\neeeeeeereeeeeee\r\neeeeeerereeeeze\r\neeeeereeereeeee\r\neeeereeeeegeeee\r\neeereeeeeeereee\r\neereeeeeeqeeved\r\ncreeeeeeceeeere\r\nreeerneeeeeeeer\r\n",
            "5\r\nxxxxx\r\nxxxxx\r\nxxxxx\r\nxxxxx\r\nxxxxx\r\n",
            "5\r\nxxxxx\r\nxxxxx\r\nxoxxx\r\nxxxxx\r\nxxxxx\r\n",
            "5\r\noxxxo\r\nxoxox\r\nxxxxx\r\nxoxox\r\noxxxo\r\n",
            "5\r\noxxxo\r\nxoxox\r\nxxoox\r\nxoxox\r\noxxxo\r\n",
            "5\r\noxxxo\r\nxoxox\r\nxxaxx\r\nxoxox\r\noxxxo\r\n",
            "5\r\noxxxo\r\nxoxox\r\noxoxx\r\nxoxox\r\noxxxo\r\n",
            "3\r\nxxx\r\naxa\r\nxax\r\n",
            "3\r\nxax\r\naxx\r\nxax\r\n",
            "3\r\nxax\r\naxa\r\nxxx\r\n",
            "3\r\nxax\r\nxxa\r\nxax\r\n",
            "3\r\nxax\r\naaa\r\nxax\r\n",
            "3\r\naax\r\naxa\r\nxax\r\n",
            "3\r\nxaa\r\naxa\r\nxax\r\n",
            "3\r\nxax\r\naxa\r\naax\r\n",
            "3\r\nxax\r\naxa\r\nxaa\r\n",
            "3\r\nxfx\r\naxa\r\nxax\r\n",
            "3\r\nxax\r\nafa\r\nxax\r\n",
            "3\r\nxax\r\naxa\r\nxaf\r\n",
            "3\r\nxox\r\nxxx\r\nxxx\r\n",
            "3\r\naxa\r\naax\r\nxxa\r\n",
            "3\r\nxox\r\noxx\r\nxox\r\n",
            "3\r\nxox\r\nooo\r\nxox\r\n",
            "3\r\naaa\r\naab\r\nbbb\r\n",
            "3\r\nxxx\r\nsxs\r\nxsx\r\n",
            "5\r\nabbba\r\nbabab\r\nbbbbb\r\nbaaab\r\nabbba\r\n",
            "5\r\nabaaa\r\nbbbbb\r\nbbabb\r\nbabab\r\nabbba\r\n",
            "5\r\nxoxox\r\noxoxo\r\nooxoo\r\noxoxo\r\nxooox\r\n",
            "3\r\nxox\r\noxx\r\nxxx\r\n",
            "5\r\nxoooo\r\noxooo\r\nooxoo\r\noooxo\r\noooox\r\n",
            "5\r\nxoooo\r\noxoxx\r\nooxoo\r\noxoxo\r\noxoox\r\n",
            "3\r\naaa\r\nbab\r\naba\r\n"
        ],
        "answers": [
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n"
        ],
        "input_output": {
            "inputs": [
                "5\r\nxooox\r\noxoxo\r\nsoxoo\r\noxoxo\r\nxooox\r\n",
                "3\r\nwsw\r\nsws\r\nwsw\r\n",
                "3\r\nxpx\r\npxp\r\nxpe\r\n",
                "5\r\nliiil\r\nilili\r\niilii\r\nilili\r\nliiil\r\n",
                "7\r\nbwccccb\r\nckcccbj\r\nccbcbcc\r\ncccbccc\r\nccbcbcc\r\ncbcccbc\r\nbccccdt\r\n",
                "13\r\nsooooooooooos\r\nosoooooooooso\r\noosooooooosoo\r\nooosooooosooo\r\noooosooosoooo\r\nooooososooooo\r\noooooosoooooo\r\nooooososooooo\r\noooosooosoooo\r\nooosooooosooo\r\noosooooooosoo\r\nosoooooooooso\r\nsooooooooooos\r\n",
                "3\r\naaa\r\naaa\r\naaa\r\n",
                "3\r\naca\r\noec\r\nzba\r\n",
                "15\r\nrxeeeeeeeeeeeer\r\nereeeeeeeeeeere\r\needeeeeeeeeeoee\r\neeereeeeeeeewee\r\neeeereeeeebeeee\r\nqeeeereeejedyee\r\neeeeeerereeeeee\r\neeeeeeereeeeeee\r\neeeeeerereeeeze\r\neeeeereeereeeee\r\neeeereeeeegeeee\r\neeereeeeeeereee\r\neereeeeeeqeeved\r\ncreeeeeeceeeere\r\nreeerneeeeeeeer\r\n",
                "5\r\nxxxxx\r\nxxxxx\r\nxxxxx\r\nxxxxx\r\nxxxxx\r\n",
                "5\r\nxxxxx\r\nxxxxx\r\nxoxxx\r\nxxxxx\r\nxxxxx\r\n",
                "5\r\noxxxo\r\nxoxox\r\nxxxxx\r\nxoxox\r\noxxxo\r\n",
                "5\r\noxxxo\r\nxoxox\r\nxxoox\r\nxoxox\r\noxxxo\r\n",
                "5\r\noxxxo\r\nxoxox\r\nxxaxx\r\nxoxox\r\noxxxo\r\n",
                "5\r\noxxxo\r\nxoxox\r\noxoxx\r\nxoxox\r\noxxxo\r\n",
                "3\r\nxxx\r\naxa\r\nxax\r\n",
                "3\r\nxax\r\naxx\r\nxax\r\n",
                "3\r\nxax\r\naxa\r\nxxx\r\n",
                "3\r\nxax\r\nxxa\r\nxax\r\n",
                "3\r\nxax\r\naaa\r\nxax\r\n",
                "3\r\naax\r\naxa\r\nxax\r\n",
                "3\r\nxaa\r\naxa\r\nxax\r\n",
                "3\r\nxax\r\naxa\r\naax\r\n",
                "3\r\nxax\r\naxa\r\nxaa\r\n",
                "3\r\nxfx\r\naxa\r\nxax\r\n",
                "3\r\nxax\r\nafa\r\nxax\r\n",
                "3\r\nxax\r\naxa\r\nxaf\r\n",
                "3\r\nxox\r\nxxx\r\nxxx\r\n",
                "3\r\naxa\r\naax\r\nxxa\r\n",
                "3\r\nxox\r\noxx\r\nxox\r\n",
                "3\r\nxox\r\nooo\r\nxox\r\n",
                "3\r\naaa\r\naab\r\nbbb\r\n",
                "3\r\nxxx\r\nsxs\r\nxsx\r\n",
                "5\r\nabbba\r\nbabab\r\nbbbbb\r\nbaaab\r\nabbba\r\n",
                "5\r\nabaaa\r\nbbbbb\r\nbbabb\r\nbabab\r\nabbba\r\n",
                "5\r\nxoxox\r\noxoxo\r\nooxoo\r\noxoxo\r\nxooox\r\n",
                "3\r\nxox\r\noxx\r\nxxx\r\n",
                "5\r\nxoooo\r\noxooo\r\nooxoo\r\noooxo\r\noooox\r\n",
                "5\r\nxoooo\r\noxoxx\r\nooxoo\r\noxoxo\r\noxoox\r\n",
                "3\r\naaa\r\nbab\r\naba\r\n"
            ],
            "outputs": [
                "NO\r\n",
                "YES\r\n",
                "NO\r\n",
                "YES\r\n",
                "NO\r\n",
                "YES\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n",
                "NO\r\n"
            ]
        },
        "solution_id_0": 240197071,
        "solution_0": "n = int(input())\nst = ''\nfor _ in range(n):\n    st += input()\nl = list(st)\nif l == l[::-1] and l.count(l[0]) == 2 * n - 1:\n    print('YES')\nelse:\n    print('NO')",
        "outputs_0": [
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n"
        ],
        "solution_id_1": 208142072,
        "solution_1": "n = int(input())\ns = ''\nfor i in range(n):\n    a = input()\n    s += a\nif s == s[::-1] and s.count(s[0]) == 2 * n - 1:\n    print('YES')\nelse:\n    print('NO')",
        "outputs_1": [
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n"
        ],
        "solution_id_2": 144418130,
        "solution_2": "n = int(input())\na = []\nans = 'YES'\ncount = 0\nfor i in range(n):\n    a.append([i for i in input()])\nfirst = a[0][0]\nsecond = a[0][1]\nfor i in range(n):\n    if first != a[i][i] or first != a[i][n - i - 1]:\n        ans = 'NO'\n        break\nfor i in range(n):\n    if len(set(a[i])) != 2 or second not in a[i]:\n        ans = 'NO'\n        break\nif ans == 'NO':\n    print(ans)\nelse:\n    for i in range(n):\n        count += a[i].count(first)\n    if count == n * 2 - 1:\n        print('YES')\n    else:\n        print('NO')",
        "outputs_2": [
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "YES\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n",
            "NO\r\n"
        ],
        "unnorm_rating": 1009.7960425930711,
        "unnorm_rating_std": 80.01437955768078,
        "unnorm_rating_volatility": 0.05976941691922793,
        "reference_rating": 1000.0,
        "original_tags": [
            "implementation"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 492,
        "problem_index": "B",
        "rating": 0.18070351139269844,
        "rating_std": 0.03498065908983593,
        "rating_volatility": 2.0804052987017984e-05,
        "rating_quantile": 0.25381704293357693,
        "tag": "Implement",
        "detailed_tag": "binary search",
        "problem_name": "Vanya and Lanterns",
        "problem_main": "Vanya walks late at night along a straight street of length l, lit by n lanterns. Consider the coordinate system with the beginning of the street corresponding to the point 0, and its end corresponding to the point l. Then the i-th lantern is at the point ai. The lantern lights all points of the street that are at the distance of at most d from it, where d is some positive number, common for all lanterns. Vanya wonders: what is the minimum light radius d should the lanterns have to light the whole street?",
        "problem_note": "Consider the second sample. At d\u2009=\u20092 the first lantern will light the segment [0,\u20094] of the street, and the second lantern will light segment [3,\u20095]. Thus, the whole street will be lit.",
        "input_spec": "The first line contains two integers n, l (1\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009l\u2009\u2264\u2009109)\u00a0\u2014 the number of lanterns and the length of the street respectively. The next line contains n integers ai (0\u2009\u2264\u2009ai\u2009\u2264\u2009l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.",
        "output_spec": "Print the minimum light radius d, needed to light the whole street. The answer will be considered correct if its absolute or relative error doesn't exceed 10\u2009-\u20099.",
        "sample_inputs": [
            "7 15\n15 5 3 7 9 14 0",
            "2 5\n2 5"
        ],
        "sample_outputs": [
            "2.5000000000",
            "2.0000000000"
        ],
        "inputs": [
            "7 15\r\n15 5 3 7 9 14 0\r\n",
            "2 5\r\n2 5\r\n",
            "46 615683844\r\n431749087 271781274 274974690 324606253 480870261 401650581 13285442 478090364 266585394 425024433 588791449 492057200 391293435 563090494 317950 173675329 473068378 356306865 311731938 192959832 321180686 141984626 578985584 512026637 175885185 590844074 47103801 212211134 330150 509886963 565955809 315640375 612907074 500474373 524310737 568681652 315339618 478782781 518873818 271322031 74600969 539099112 85129347 222068995 106014720 77282307\r\n",
            "2 1000000000\r\n0 1000000000\r\n",
            "2 555\r\n200 300\r\n",
            "1 1\r\n1\r\n",
            "1 1\r\n0\r\n",
            "1 1000000000\r\n0\r\n",
            "1 1000000000\r\n1000000000\r\n",
            "1 999999999\r\n499999999\r\n",
            "4 700\r\n0 250 475 700\r\n",
            "4 700\r\n0 225 450 700\r\n",
            "5 1000\r\n0 250 500 750 1000\r\n",
            "5 2000\r\n1001 1001 1001 1001 1001\r\n",
            "1 999\r\n501\r\n",
            "2 1000\r\n400 600\r\n",
            "4 15\r\n1 3 9 11\r\n",
            "1 5\r\n2\r\n"
        ],
        "answers": [
            "2.5000000000\r\n",
            "2.0000000000\r\n",
            "22258199.5000000000\r\n",
            "500000000.0000000000\r\n",
            "255.0000000000\r\n",
            "1.0000000000\r\n",
            "1.0000000000\r\n",
            "1000000000.0000000000\r\n",
            "1000000000.0000000000\r\n",
            "500000000.0000000000\r\n",
            "125.0000000000\r\n",
            "125.0000000000\r\n",
            "125.0000000000\r\n",
            "1001.0000000000\r\n",
            "501.0000000000\r\n",
            "400.0000000000\r\n",
            "4.0000000000\r\n",
            "3.0000000000\r\n"
        ],
        "input_output": {
            "inputs": [
                "7 15\r\n15 5 3 7 9 14 0\r\n",
                "2 5\r\n2 5\r\n",
                "46 615683844\r\n431749087 271781274 274974690 324606253 480870261 401650581 13285442 478090364 266585394 425024433 588791449 492057200 391293435 563090494 317950 173675329 473068378 356306865 311731938 192959832 321180686 141984626 578985584 512026637 175885185 590844074 47103801 212211134 330150 509886963 565955809 315640375 612907074 500474373 524310737 568681652 315339618 478782781 518873818 271322031 74600969 539099112 85129347 222068995 106014720 77282307\r\n",
                "2 1000000000\r\n0 1000000000\r\n",
                "2 555\r\n200 300\r\n",
                "1 1\r\n1\r\n",
                "1 1\r\n0\r\n",
                "1 1000000000\r\n0\r\n",
                "1 1000000000\r\n1000000000\r\n",
                "1 999999999\r\n499999999\r\n",
                "4 700\r\n0 250 475 700\r\n",
                "4 700\r\n0 225 450 700\r\n",
                "5 1000\r\n0 250 500 750 1000\r\n",
                "5 2000\r\n1001 1001 1001 1001 1001\r\n",
                "1 999\r\n501\r\n",
                "2 1000\r\n400 600\r\n",
                "4 15\r\n1 3 9 11\r\n",
                "1 5\r\n2\r\n"
            ],
            "outputs": [
                "2.5000000000\r\n",
                "2.0000000000\r\n",
                "22258199.5000000000\r\n",
                "500000000.0000000000\r\n",
                "255.0000000000\r\n",
                "1.0000000000\r\n",
                "1.0000000000\r\n",
                "1000000000.0000000000\r\n",
                "1000000000.0000000000\r\n",
                "500000000.0000000000\r\n",
                "125.0000000000\r\n",
                "125.0000000000\r\n",
                "125.0000000000\r\n",
                "1001.0000000000\r\n",
                "501.0000000000\r\n",
                "400.0000000000\r\n",
                "4.0000000000\r\n",
                "3.0000000000\r\n"
            ]
        },
        "solution_id_0": 251963146,
        "solution_0": "f = lambda : map(int, input().split())\n(n, l) = f()\ns = sorted(f())\nprint(max([s[0], l - s[n - 1]] + [(b - a) / 2 for (a, b) in zip(s, s[1:])]))",
        "outputs_0": [
            "2.5\r\n",
            "2\r\n",
            "22258199.5\r\n",
            "500000000.0\r\n",
            "255\r\n",
            "1\r\n",
            "1\r\n",
            "1000000000\r\n",
            "1000000000\r\n",
            "500000000\r\n",
            "125.0\r\n",
            "125.0\r\n",
            "125.0\r\n",
            "1001\r\n",
            "501\r\n",
            "400\r\n",
            "4\r\n",
            "3\r\n"
        ],
        "solution_id_1": 251609445,
        "solution_1": "(n, l) = map(int, input().split())\nlist0 = list(map(int, input().split()))\nlist0 = sorted(list0)\nif n == 1:\n    r = float(max(list0[0], l - list0[0]))\nelse:\n    list_temp = []\n    for i in range(n - 1):\n        temp = int(abs(list0[i] - list0[i + 1]))\n        list_temp.append(float(temp / 2.0))\n    r = float(max(float(list0[0]), max(list_temp), float(l - list0[-1])))\nprint(r)",
        "outputs_1": [
            "2.5\r\n",
            "2.0\r\n",
            "22258199.5\r\n",
            "500000000.0\r\n",
            "255.0\r\n",
            "1.0\r\n",
            "1.0\r\n",
            "1000000000.0\r\n",
            "1000000000.0\r\n",
            "500000000.0\r\n",
            "125.0\r\n",
            "125.0\r\n",
            "125.0\r\n",
            "1001.0\r\n",
            "501.0\r\n",
            "400.0\r\n",
            "4.0\r\n",
            "3.0\r\n"
        ],
        "solution_id_2": 250559429,
        "solution_2": "def isOK(items, guess, last):\n    result = True\n    for i in range(1, len(items)):\n        diff = (items[i] - items[i - 1]) / 2\n        if diff > guess:\n            result = False\n            break\n    if items[0] != 0 and items[0] > guess:\n        result = False\n    if items[-1] != last and last - items[-1] > guess:\n        result = False\n    return result\n(n, l) = map(int, input().split())\nitems = list(map(int, input().split()))\nitems.sort()\nresult = 0\nfor i in range(1, len(items)):\n    diff = items[i] - items[i - 1]\n    result = max(diff / 2, result)\nif items[0] != 0:\n    result = max(result, items[0])\nif items[-1] != l:\n    result = max(result, l - items[-1])\nprint(result)",
        "outputs_2": [
            "2.5\r\n",
            "2\r\n",
            "22258199.5\r\n",
            "500000000.0\r\n",
            "255\r\n",
            "1\r\n",
            "1\r\n",
            "1000000000\r\n",
            "1000000000\r\n",
            "500000000\r\n",
            "125.0\r\n",
            "125.0\r\n",
            "125.0\r\n",
            "1001\r\n",
            "501\r\n",
            "400\r\n",
            "4\r\n",
            "3\r\n"
        ],
        "unnorm_rating": 1140.9963002466513,
        "unnorm_rating_std": 100.71995347252872,
        "unnorm_rating_volatility": 0.05990119407159236,
        "reference_rating": 1200.0,
        "original_tags": [
            "binary search",
            "implementation",
            "math",
            "sortings"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 173,
        "problem_index": "A",
        "rating": 0.2225280932356015,
        "rating_std": 0.033580471487796984,
        "rating_volatility": 2.081872897192108e-05,
        "rating_quantile": 0.31488972987080777,
        "tag": "Implement",
        "detailed_tag": "math",
        "problem_name": "Rock-Paper-Scissors",
        "problem_main": "Nikephoros and Polycarpus play rock-paper-scissors. The loser gets pinched (not too severely!).Let us remind you the rules of this game. Rock-paper-scissors is played by two players. In each round the players choose one of three items independently from each other. They show the items with their hands: a rock, scissors or paper. The winner is determined by the following rules: the rock beats the scissors, the scissors beat the paper and the paper beats the rock. If the players choose the same item, the round finishes with a draw.Nikephoros and Polycarpus have played n rounds. In each round the winner gave the loser a friendly pinch and the loser ended up with a fresh and new red spot on his body. If the round finished in a draw, the players did nothing and just played on.Nikephoros turned out to have worked out the following strategy: before the game began, he chose some sequence of items A\u2009=\u2009(a1,\u2009a2,\u2009...,\u2009am), and then he cyclically showed the items from this sequence, starting from the first one. Cyclically means that Nikephoros shows signs in the following order: a1, a2, ..., am, a1, a2, ..., am, a1, ... and so on. Polycarpus had a similar strategy, only he had his own sequence of items B\u2009=\u2009(b1,\u2009b2,\u2009...,\u2009bk).Determine the number of red spots on both players after they've played n rounds of the game. You can consider that when the game began, the boys had no red spots on them.",
        "problem_note": "In the first sample the game went like this:  R - R. Draw.  P - S. Nikephoros loses.  S - P. Polycarpus loses.  R - P. Nikephoros loses.  P - R. Polycarpus loses.  S - S. Draw.  R - P. Nikephoros loses. Thus, in total Nikephoros has 3 losses (and 3 red spots), and Polycarpus only has 2.",
        "input_spec": "The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20092\u00b7109) \u2014 the number of the game's rounds.The second line contains sequence A as a string of m characters and the third line contains sequence B as a string of k characters (1\u2009\u2264\u2009m,\u2009k\u2009\u2264\u20091000). The given lines only contain characters \"R\", \"S\" and \"P\". Character \"R\" stands for the rock, character \"S\" represents the scissors and \"P\" represents the paper.",
        "output_spec": "Print two space-separated integers: the numbers of red spots Nikephoros and Polycarpus have.",
        "sample_inputs": [
            "7\nRPS\nRSPP",
            "5\nRRRRRRRR\nR"
        ],
        "sample_outputs": [
            "3 2",
            "0 0"
        ],
        "inputs": [
            "7\r\nRPS\r\nRSPP\r\n",
            "5\r\nRRRRRRRR\r\nR\r\n",
            "23\r\nRSP\r\nRPSS\r\n",
            "52\r\nRRPSS\r\nRSSPRPRPPP\r\n",
            "1293\r\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRR\r\nSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRR\r\n",
            "103948\r\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRRSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRRPSRSRSRPRPRSSPSPRPRSSPRPSPPRPRRRPRRPRPSPRPRSSRRRSSSSPSRRSPPPRSSSRSRRSSSPPRRSPSSSPRRSSSSPSSPRRPRSRPPSSRPSRPPRPSSSRSRPPSRRSSSPPRRPPSPSSRRSSPPPPPRRSRSSRPP\r\nRPRRRSRSRPRPSRPPRSPRRRPSPRPRRRSRSRRSRSSSPSPPSPPPRSPRSSSRPSSSSPPPPSPRPPSSPPSSRRRPRPRRPSSRSPPPPRRSPSSRSRRSSRRPPRSRSRPPRRPRSPRPSPPRPPPSRRRSRRPSPRSSPRSRPSRRPSRSPRRSPSPRSRPSRRPRPRRSPPSRSSR\r\n",
            "1\r\nR\r\nR\r\n",
            "5\r\nS\r\nR\r\n",
            "100\r\nR\r\nP\r\n",
            "145856\r\nS\r\nR\r\n",
            "554858576\r\nP\r\nP\r\n",
            "2000000000\r\nS\r\nS\r\n",
            "1\r\nS\r\nSSRSRPSSSRPRRPSPRSRSPRRSRRPPRPRRPPRPPRRSPRPRRRPSRSRPPSRPRSPPPSSPPRRRPSSPRSRRSSRPRSRSRSRRRSPSRPPSPPRRSPPRPRSPPPPRPPPRRRPPRPRSSPRSPRRPRRSSPPPSSRPSSRRSRRSPRPPRPPPSPRPSRRPSSSRPPPPRSSPSSSSPRPRRRSRRPPPPPSRRPSSRSPSSRPSSSSPRPPRSRPSRPRRRPRSPSP\r\n",
            "1\r\nRPSSPSRSPRSRSRRPPSRPRPSSRRRRRPPSPR\r\nS\r\n",
            "1\r\nPSSSRPSRPRSPRP\r\nRRPSSPPSPRSSSSPPRSPSSRSSSRRPPSPPPSSPSRRRSRRSSRRPPRSSRRRPPSPRRPRRRPPSPSPPPPRSPPRPRRSRSSSSSPSRSSRPPRRPRRPRPRRRPPSSPPSRRSRPRPSSRSSSRPRPRP\r\n",
            "54\r\nSRPRPRSRSPPSSRRPPSSPRPPSRRSRPPSPPR\r\nSPRPSSSRSRPR\r\n",
            "234\r\nSRSSRRPSSSSPPRPRRPPRSSPSSSPSPRPSRRRSSSRRSPSRRPSRPPPSPSPPPRSRSPPPSPSRSSSPRRPPSRSSPRPSSRRPSSPSSPSRRPSRSSRSPSPPRSPRPRPPRRPRPRPSPRRSSRPSRPRSSSPSRRRSPRPPPPPSPRSSSPPSRRPRPSSRRPRRRSRSRRRSRRS\r\nPPPSRSSPRPSSRSSPSRSRSRSPSRSSRPRRPRRRPPPPSPSRRPPPSRPPPSPPRSRSRRRRRRPPRSSSRSPSRPRPSPPSPSPRPPRPRRSSRSSRPPPPPPRRRRSPPPPRSPRSRRP\r\n",
            "1457057352\r\nR\r\nPSRSRSSRPSRRSSSRSRRPRSPPSPPRPSRRPPRSRRSPPSPPSPRPRPRPSSRPRPRRPRSSSSPSRRRPSRSPPSPSRRSPSSRSRPSPRRRSRRRPSPRPPRPPPPPRPPRRRRRRPPRRSPSPSSPSSPRPRSPPRSRPSPSRSRRRRRPPPSRPRSPPSSRRRRPRPPRSPSSPRRRPPPPPRRSRSPRPPSRPRSRSRRPRRRPRSRSPRRRSRSSRPPPRRSRRSSRRPSRPPRSPSPRPRSSSRSSRRPSRRRRPSRRPPRPPRRPRSRPRSRRPPPPPSPPPSPSSPPRPPPRPPRSSPPSRPPSSRRSRSSSRPRRSRSSPRRSRPPRSRSSSRRSPRPPSSPSRPPSSPRPPPSSSSPPRPSRSRPRSPRPSSPPSSPRRPRRPRSPPRSRSPPPPRSRSSPRRSSSRRPPRPPSRPSSPSRPPSSRPPPRRRPSRPPSPRSPSRRRRPPRRPSRPRPSSPRSPPPRRSPPRSRS\r\n",
            "1983654300\r\nRSSSPPRRSSRSSRPPSRRSSRPPPPSRRPPPSPSSPPPRPSSSRPSPRPSPSPPRRPRSPPSPRRRPPPSPRSSPSSPSRRPSPRPRRRRPRRRRPPRSSSSSSRSSRSPRSPPPPSSRSRPPRPRPRPRPSSPRSSPPSPRRSRSSSRRSSSRSPPPPSPSPRPRPSSSPPPPRRRRPSPRSRPRSPPSPRPSSPPPSPPSPSRSPRPSSRRSPRRSPRRSRRPSPRPRPRRPPRPSPSRSRPRRRRSSRPRSPRPSPPSSSRPRSPPRSRPPRRPRSSRPRRPPRRPSRPRRRPPSRPRRPRPPRSPSRSSRRSRRPPSRPPPRPRPPRRRRRSSPRSPRPRPSSRSRPPRRPPPSSRRSPPSRRSSRRRRSSSPRRR\r\nP\r\n",
            "1958778499\r\nSPSSSRPSPPRRSSRSRRSSSSRSR\r\nPPSSRSPSPRRSRSSRSSRPRPSSSRRRPSRPPSRSSPPSSSPSSPRRRSPSRSPRPRRRSSSPPSSPSPP\r\n",
            "1609387747\r\nRPRPPPSSSPPSRRPSRRRPPRPPPRPRSRSRPPRRPSPRPSSRSSPPPPRRRRSSRPSPPRRSPPRPSRRRPSSRRPSSRSPRPRSRRSRRRSPRPRPRRSPSRSPSRPSSSPPRPSRPPRSRRRRPRRRSSRRRSSPSPSRSRPRPRPRSRPRSPSSRSPSRPRRRSRPPPPRPPPSSSRSRPSSRPSSPSRRSPS\r\nSSRSRPRSSPSPRRSPSRRRRPRRRRRSRSSPRSSRSPRSSRPSSRSRSSPSPPPSRRPRRSRSSRSPRPSRRPRSRRPRPPSSSPSRRSPPRRSRSPPPPPSRRRPRPPSPPPSPRSRSRRSPSRSSPPPPPPPSPSPPPPSSRSSSRSSRRRSPPPSPSRPRSPRRRRSSRRPPSSRRRPRPSPSPSRRRRSRRSSRPPPPRPPPRPSSSSPRRSRRSSRPRSSPPSSRPSPSRRRRRPSRRSPSRRSRRPRRPRPPSSSRPRPRRSSRRSRSRPRRSSPRP\r\n",
            "2000000000\r\nPSRRRPS\r\nSPSRRPSSSPRPS\r\n",
            "2000000000\r\nRRRRR\r\nRRR\r\n",
            "2000000000\r\nRRRRRRRRRR\r\nSSSSSSSSSSSSSSS\r\n",
            "2000000000\r\nRRR\r\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\r\n",
            "2000000000\r\nSSSS\r\nS\r\n",
            "2000000000\r\nSSSS\r\nPPPPPP\r\n",
            "2000000000\r\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\r\nRRR\r\n",
            "2000000000\r\nPPPPPPP\r\nSSSSSS\r\n",
            "2000000000\r\nP\r\nP\r\n",
            "2000000000\r\nSSSS\r\nRRR\r\n",
            "2000000000\r\nR\r\nS\r\n",
            "2000000000\r\nRRRRRRRRRR\r\nSSSSSSP\r\n",
            "6\r\nRR\r\nSSS\r\n",
            "5\r\nR\r\nR\r\n"
        ],
        "answers": [
            "3 2",
            "0 0",
            "7 8",
            "15 21",
            "411 441",
            "34707 34585",
            "0 0",
            "5 0",
            "100 0",
            "145856 0",
            "0 0",
            "0 0",
            "0 0",
            "0 1",
            "0 1",
            "19 16",
            "74 80",
            "508623712 421858498",
            "697663183 588327921",
            "604738368 654397557",
            "535775691 539324629",
            "659340660 703296704",
            "0 0",
            "0 2000000000",
            "2000000000 0",
            "0 0",
            "0 2000000000",
            "0 2000000000",
            "2000000000 0",
            "0 0",
            "2000000000 0",
            "0 2000000000",
            "285714285 1714285715",
            "0 6",
            "0 0"
        ],
        "input_output": {
            "inputs": [
                "7\r\nRPS\r\nRSPP\r\n",
                "5\r\nRRRRRRRR\r\nR\r\n",
                "23\r\nRSP\r\nRPSS\r\n",
                "52\r\nRRPSS\r\nRSSPRPRPPP\r\n",
                "1293\r\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRR\r\nSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRR\r\n",
                "103948\r\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRRSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRRPSRSRSRPRPRSSPSPRPRSSPRPSPPRPRRRPRRPRPSPRPRSSRRRSSSSPSRRSPPPRSSSRSRRSSSPPRRSPSSSPRRSSSSPSSPRRPRSRPPSSRPSRPPRPSSSRSRPPSRRSSSPPRRPPSPSSRRSSPPPPPRRSRSSRPP\r\nRPRRRSRSRPRPSRPPRSPRRRPSPRPRRRSRSRRSRSSSPSPPSPPPRSPRSSSRPSSSSPPPPSPRPPSSPPSSRRRPRPRRPSSRSPPPPRRSPSSRSRRSSRRPPRSRSRPPRRPRSPRPSPPRPPPSRRRSRRPSPRSSPRSRPSRRPSRSPRRSPSPRSRPSRRPRPRRSPPSRSSR\r\n",
                "1\r\nR\r\nR\r\n",
                "5\r\nS\r\nR\r\n",
                "100\r\nR\r\nP\r\n",
                "145856\r\nS\r\nR\r\n",
                "554858576\r\nP\r\nP\r\n",
                "2000000000\r\nS\r\nS\r\n",
                "1\r\nS\r\nSSRSRPSSSRPRRPSPRSRSPRRSRRPPRPRRPPRPPRRSPRPRRRPSRSRPPSRPRSPPPSSPPRRRPSSPRSRRSSRPRSRSRSRRRSPSRPPSPPRRSPPRPRSPPPPRPPPRRRPPRPRSSPRSPRRPRRSSPPPSSRPSSRRSRRSPRPPRPPPSPRPSRRPSSSRPPPPRSSPSSSSPRPRRRSRRPPPPPSRRPSSRSPSSRPSSSSPRPPRSRPSRPRRRPRSPSP\r\n",
                "1\r\nRPSSPSRSPRSRSRRPPSRPRPSSRRRRRPPSPR\r\nS\r\n",
                "1\r\nPSSSRPSRPRSPRP\r\nRRPSSPPSPRSSSSPPRSPSSRSSSRRPPSPPPSSPSRRRSRRSSRRPPRSSRRRPPSPRRPRRRPPSPSPPPPRSPPRPRRSRSSSSSPSRSSRPPRRPRRPRPRRRPPSSPPSRRSRPRPSSRSSSRPRPRP\r\n",
                "54\r\nSRPRPRSRSPPSSRRPPSSPRPPSRRSRPPSPPR\r\nSPRPSSSRSRPR\r\n",
                "234\r\nSRSSRRPSSSSPPRPRRPPRSSPSSSPSPRPSRRRSSSRRSPSRRPSRPPPSPSPPPRSRSPPPSPSRSSSPRRPPSRSSPRPSSRRPSSPSSPSRRPSRSSRSPSPPRSPRPRPPRRPRPRPSPRRSSRPSRPRSSSPSRRRSPRPPPPPSPRSSSPPSRRPRPSSRRPRRRSRSRRRSRRS\r\nPPPSRSSPRPSSRSSPSRSRSRSPSRSSRPRRPRRRPPPPSPSRRPPPSRPPPSPPRSRSRRRRRRPPRSSSRSPSRPRPSPPSPSPRPPRPRRSSRSSRPPPPPPRRRRSPPPPRSPRSRRP\r\n",
                "1457057352\r\nR\r\nPSRSRSSRPSRRSSSRSRRPRSPPSPPRPSRRPPRSRRSPPSPPSPRPRPRPSSRPRPRRPRSSSSPSRRRPSRSPPSPSRRSPSSRSRPSPRRRSRRRPSPRPPRPPPPPRPPRRRRRRPPRRSPSPSSPSSPRPRSPPRSRPSPSRSRRRRRPPPSRPRSPPSSRRRRPRPPRSPSSPRRRPPPPPRRSRSPRPPSRPRSRSRRPRRRPRSRSPRRRSRSSRPPPRRSRRSSRRPSRPPRSPSPRPRSSSRSSRRPSRRRRPSRRPPRPPRRPRSRPRSRRPPPPPSPPPSPSSPPRPPPRPPRSSPPSRPPSSRRSRSSSRPRRSRSSPRRSRPPRSRSSSRRSPRPPSSPSRPPSSPRPPPSSSSPPRPSRSRPRSPRPSSPPSSPRRPRRPRSPPRSRSPPPPRSRSSPRRSSSRRPPRPPSRPSSPSRPPSSRPPPRRRPSRPPSPRSPSRRRRPPRRPSRPRPSSPRSPPPRRSPPRSRS\r\n",
                "1983654300\r\nRSSSPPRRSSRSSRPPSRRSSRPPPPSRRPPPSPSSPPPRPSSSRPSPRPSPSPPRRPRSPPSPRRRPPPSPRSSPSSPSRRPSPRPRRRRPRRRRPPRSSSSSSRSSRSPRSPPPPSSRSRPPRPRPRPRPSSPRSSPPSPRRSRSSSRRSSSRSPPPPSPSPRPRPSSSPPPPRRRRPSPRSRPRSPPSPRPSSPPPSPPSPSRSPRPSSRRSPRRSPRRSRRPSPRPRPRRPPRPSPSRSRPRRRRSSRPRSPRPSPPSSSRPRSPPRSRPPRRPRSSRPRRPPRRPSRPRRRPPSRPRRPRPPRSPSRSSRRSRRPPSRPPPRPRPPRRRRRSSPRSPRPRPSSRSRPPRRPPPSSRRSPPSRRSSRRRRSSSPRRR\r\nP\r\n",
                "1958778499\r\nSPSSSRPSPPRRSSRSRRSSSSRSR\r\nPPSSRSPSPRRSRSSRSSRPRPSSSRRRPSRPPSRSSPPSSSPSSPRRRSPSRSPRPRRRSSSPPSSPSPP\r\n",
                "1609387747\r\nRPRPPPSSSPPSRRPSRRRPPRPPPRPRSRSRPPRRPSPRPSSRSSPPPPRRRRSSRPSPPRRSPPRPSRRRPSSRRPSSRSPRPRSRRSRRRSPRPRPRRSPSRSPSRPSSSPPRPSRPPRSRRRRPRRRSSRRRSSPSPSRSRPRPRPRSRPRSPSSRSPSRPRRRSRPPPPRPPPSSSRSRPSSRPSSPSRRSPS\r\nSSRSRPRSSPSPRRSPSRRRRPRRRRRSRSSPRSSRSPRSSRPSSRSRSSPSPPPSRRPRRSRSSRSPRPSRRPRSRRPRPPSSSPSRRSPPRRSRSPPPPPSRRRPRPPSPPPSPRSRSRRSPSRSSPPPPPPPSPSPPPPSSRSSSRSSRRRSPPPSPSRPRSPRRRRSSRRPPSSRRRPRPSPSPSRRRRSRRSSRPPPPRPPPRPSSSSPRRSRRSSRPRSSPPSSRPSPSRRRRRPSRRSPSRRSRRPRRPRPPSSSRPRPRRSSRRSRSRPRRSSPRP\r\n",
                "2000000000\r\nPSRRRPS\r\nSPSRRPSSSPRPS\r\n",
                "2000000000\r\nRRRRR\r\nRRR\r\n",
                "2000000000\r\nRRRRRRRRRR\r\nSSSSSSSSSSSSSSS\r\n",
                "2000000000\r\nRRR\r\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\r\n",
                "2000000000\r\nSSSS\r\nS\r\n",
                "2000000000\r\nSSSS\r\nPPPPPP\r\n",
                "2000000000\r\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\r\nRRR\r\n",
                "2000000000\r\nPPPPPPP\r\nSSSSSS\r\n",
                "2000000000\r\nP\r\nP\r\n",
                "2000000000\r\nSSSS\r\nRRR\r\n",
                "2000000000\r\nR\r\nS\r\n",
                "2000000000\r\nRRRRRRRRRR\r\nSSSSSSP\r\n",
                "6\r\nRR\r\nSSS\r\n",
                "5\r\nR\r\nR\r\n"
            ],
            "outputs": [
                "3 2",
                "0 0",
                "7 8",
                "15 21",
                "411 441",
                "34707 34585",
                "0 0",
                "5 0",
                "100 0",
                "145856 0",
                "0 0",
                "0 0",
                "0 0",
                "0 1",
                "0 1",
                "19 16",
                "74 80",
                "508623712 421858498",
                "697663183 588327921",
                "604738368 654397557",
                "535775691 539324629",
                "659340660 703296704",
                "0 0",
                "0 2000000000",
                "2000000000 0",
                "0 0",
                "0 2000000000",
                "0 2000000000",
                "2000000000 0",
                "0 0",
                "2000000000 0",
                "0 2000000000",
                "285714285 1714285715",
                "0 6",
                "0 0"
            ]
        },
        "solution_id_0": 4927627,
        "solution_0": "def gcd(a, b):\n    c = a % b\n    return gcd(b, c) if c else b\n\ndef f(k, m, n):\n    p = {}\n    for i in range(m * k + 1, 0, -k):\n        j = m - (i - 1 - n) % m\n        for d in range(j - n, n, m):\n            p[d] = i\n    return p\n(n, a, b) = (int(input()), input(), input())\n(k, m) = (len(a), len(b))\n(x, y, g) = (0, 0, gcd(k, m))\n(p, q, r) = (k * m // g, f(k, m, 1000), {'S': 'P', 'P': 'R', 'R': 'S'})\nfor i in range(k):\n    for j in range(i % g, m, g):\n        if a[i] == b[j]:\n            continue\n        d = (n - q[i - j] - i) // p + 1\n        if r[a[i]] == b[j]:\n            y += d\n        else:\n            x += d\nprint(x, y)",
        "outputs_0": [
            "3 2\r\n",
            "0 0\r\n",
            "7 8\r\n",
            "15 21\r\n",
            "411 441\r\n",
            "34707 34585\r\n",
            "0 0\r\n",
            "5 0\r\n",
            "100 0\r\n",
            "145856 0\r\n",
            "0 0\r\n",
            "0 0\r\n",
            "0 0\r\n",
            "0 1\r\n",
            "0 1\r\n",
            "19 16\r\n",
            "74 80\r\n",
            "508623712 421858498\r\n",
            "697663183 588327921\r\n",
            "604738368 654397557\r\n",
            "535775691 539324629\r\n",
            "659340660 703296704\r\n",
            "0 0\r\n",
            "0 2000000000\r\n",
            "2000000000 0\r\n",
            "0 0\r\n",
            "0 2000000000\r\n",
            "0 2000000000\r\n",
            "2000000000 0\r\n",
            "0 0\r\n",
            "2000000000 0\r\n",
            "0 2000000000\r\n",
            "285714285 1714285715\r\n",
            "0 6\r\n",
            "0 0\r\n"
        ],
        "solution_id_1": 226564475,
        "solution_1": "n = int(input())\ns1 = input().strip()\ns2 = input().strip()\na = s1\nb = s2\nwhile len(a) != len(b):\n    if len(a) < len(b):\n        a += s1\n    else:\n        b += s2\nn_full = n // len(a)\nn_mod = n % len(a)\na_score = 0\nb_score = 0\nfor i in range(len(a)):\n    if a[i] != b[i]:\n        if a[i] == 'P' and b[i] == 'R' or (a[i] == 'R' and b[i] == 'S') or (a[i] == 'S' and b[i] == 'P'):\n            a_score += 1\n        else:\n            b_score += 1\na_score *= n_full\nb_score *= n_full\nfor i in range(n_mod):\n    if a[i] != b[i]:\n        if a[i] == 'P' and b[i] == 'R' or (a[i] == 'R' and b[i] == 'S') or (a[i] == 'S' and b[i] == 'P'):\n            a_score += 1\n        else:\n            b_score += 1\nprint(b_score, a_score)",
        "outputs_1": [
            "3 2\r\n",
            "0 0\r\n",
            "7 8\r\n",
            "15 21\r\n",
            "411 441\r\n",
            "34707 34585\r\n",
            "0 0\r\n",
            "5 0\r\n",
            "100 0\r\n",
            "145856 0\r\n",
            "0 0\r\n",
            "0 0\r\n",
            "0 0\r\n",
            "0 1\r\n",
            "0 1\r\n",
            "19 16\r\n",
            "74 80\r\n",
            "508623712 421858498\r\n",
            "697663183 588327921\r\n",
            "604738368 654397557\r\n",
            "535775691 539324629\r\n",
            "659340660 703296704\r\n",
            "0 0\r\n",
            "0 2000000000\r\n",
            "2000000000 0\r\n",
            "0 0\r\n",
            "0 2000000000\r\n",
            "0 2000000000\r\n",
            "2000000000 0\r\n",
            "0 0\r\n",
            "2000000000 0\r\n",
            "0 2000000000\r\n",
            "285714285 1714285715\r\n",
            "0 6\r\n",
            "0 0\r\n"
        ],
        "solution_id_2": 4923203,
        "solution_2": "def gcd(a, b):\n    c = a % b\n    return gcd(b, c) if c else b\nF = {}\n\ndef f(k, m, i, j):\n    global F\n    d = i - j\n    if d in F:\n        return F[d] + i\n    (u, v) = (i, d)\n    while d:\n        if d < 0:\n            d += k\n            i += k\n        else:\n            d -= m\n    i += 1\n    F[v] = i - u\n    return i\n(n, a, b) = (int(input()), input(), input())\n(k, m) = (len(a), len(b))\nr = gcd(k, m)\np = k * m // r\n(x, y) = (0, 0)\nfor i in range(k):\n    for j in range(i % r, m, r):\n        if a[i] == b[j]:\n            continue\n        d = (n - f(k, m, i, j)) // p + 1\n        if a[i] + b[j] in ['SP', 'PR', 'RS']:\n            y += d\n        else:\n            x += d\nprint(x, y)",
        "outputs_2": [
            "3 2\r\n",
            "0 0\r\n",
            "7 8\r\n",
            "15 21\r\n",
            "411 441\r\n",
            "34707 34585\r\n",
            "0 0\r\n",
            "5 0\r\n",
            "100 0\r\n",
            "145856 0\r\n",
            "0 0\r\n",
            "0 0\r\n",
            "0 0\r\n",
            "0 1\r\n",
            "0 1\r\n",
            "19 16\r\n",
            "74 80\r\n",
            "508623712 421858498\r\n",
            "697663183 588327921\r\n",
            "604738368 654397557\r\n",
            "535775691 539324629\r\n",
            "659340660 703296704\r\n",
            "0 0\r\n",
            "0 2000000000\r\n",
            "2000000000 0\r\n",
            "0 0\r\n",
            "0 2000000000\r\n",
            "0 2000000000\r\n",
            "2000000000 0\r\n",
            "0 0\r\n",
            "2000000000 0\r\n",
            "0 2000000000\r\n",
            "285714285 1714285715\r\n",
            "0 6\r\n",
            "0 0\r\n"
        ],
        "unnorm_rating": 1261.421988236309,
        "unnorm_rating_std": 96.68838763587611,
        "unnorm_rating_volatility": 0.059943450694396605,
        "reference_rating": 1300.0,
        "original_tags": [
            "implementation",
            "math"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 1141,
        "problem_index": "D",
        "rating": 0.3086717182184168,
        "rating_std": 0.025483774856832432,
        "rating_volatility": 2.1334510218092828e-05,
        "rating_quantile": 0.4633955369959546,
        "tag": "Implement",
        "detailed_tag": "greedy",
        "problem_name": "Colored Boots",
        "problem_main": "There are $$$n$$$ left boots and $$$n$$$ right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark ('?'). Thus, you are given two strings $$$l$$$ and $$$r$$$, both of length $$$n$$$. The character $$$l_i$$$ stands for the color of the $$$i$$$-th left boot and the character $$$r_i$$$ stands for the color of the $$$i$$$-th right boot.A lowercase Latin letter denotes a specific color, but the question mark ('?') denotes an indefinite color. Two specific colors are compatible if they are exactly the same. An indefinite color is compatible with any (specific or indefinite) color.For example, the following pairs of colors are compatible: ('f', 'f'), ('?', 'z'), ('a', '?') and ('?', '?'). The following pairs of colors are not compatible: ('f', 'g') and ('a', 'z').Compute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible.Print the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.",
        "problem_note": "",
        "input_spec": "The first line contains $$$n$$$ ($$$1 \\le n \\le 150000$$$), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots).The second line contains the string $$$l$$$ of length $$$n$$$. It contains only lowercase Latin letters or question marks. The $$$i$$$-th character stands for the color of the $$$i$$$-th left boot.The third line contains the string $$$r$$$ of length $$$n$$$. It contains only lowercase Latin letters or question marks. The $$$i$$$-th character stands for the color of the $$$i$$$-th right boot.",
        "output_spec": "Print $$$k$$$ \u2014 the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors.The following $$$k$$$ lines should contain pairs $$$a_j, b_j$$$ ($$$1 \\le a_j, b_j \\le n$$$). The $$$j$$$-th of these lines should contain the index $$$a_j$$$ of the left boot in the $$$j$$$-th pair and index $$$b_j$$$ of the right boot in the $$$j$$$-th pair. All the numbers $$$a_j$$$ should be distinct (unique), all the numbers $$$b_j$$$ should be distinct (unique).If there are many optimal answers, print any of them.",
        "sample_inputs": [
            "10\ncodeforces\ndodivthree",
            "7\nabaca?b\nzabbbcc",
            "9\nbambarbia\nhellocode",
            "10\ncode??????\n??????test"
        ],
        "sample_outputs": [
            "5\n7 8\n4 9\n2 2\n9 10\n3 1",
            "5\n6 5\n2 3\n4 6\n7 4\n1 2",
            "0",
            "10\n6 2\n1 6\n7 3\n3 5\n4 8\n9 7\n5 1\n2 4\n10 9\n8 10"
        ],
        "inputs": [
            "10\r\ncodeforces\r\ndodivthree\r\n",
            "7\r\nabaca?b\r\nzabbbcc\r\n",
            "9\r\nbambarbia\r\nhellocode\r\n",
            "10\r\ncode??????\r\n??????test\r\n",
            "1\r\nz\r\nz\r\n",
            "1\r\nz\r\na\r\n",
            "2\r\naa\r\naa\r\n",
            "2\r\nab\r\naa\r\n",
            "2\r\nba\r\naa\r\n",
            "2\r\naf\r\nfa\r\n",
            "2\r\naf\r\nfz\r\n",
            "1\r\n?\r\nz\r\n",
            "1\r\na\r\n?\r\n",
            "1\r\n?\r\n?\r\n",
            "20\r\nleduyanhyeunguyenhoa\r\nminhtriloveviethuong\r\n"
        ],
        "answers": [
            "5\r\n7 8\r\n4 9\r\n2 2\r\n9 10\r\n3 1\r\n",
            "5\r\n6 5\r\n2 3\r\n4 6\r\n7 4\r\n1 2\r\n",
            "0\r\n",
            "10\r\n6 2\r\n1 6\r\n7 3\r\n3 5\r\n4 8\r\n9 7\r\n5 1\r\n2 4\r\n10 9\r\n8 10\r\n",
            "1\r\n1 1\r\n",
            "0\r\n",
            "2\r\n1 1\r\n2 2\r\n",
            "1\r\n1 1\r\n",
            "1\r\n2 1\r\n",
            "2\r\n1 2\r\n2 1\r\n",
            "1\r\n2 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "10\r\n19 9\r\n10 14\r\n4 17\r\n13 20\r\n2 11\r\n1 8\r\n12 19\r\n8 4\r\n18 16\r\n7 3\r\n"
        ],
        "input_output": {
            "inputs": [
                "10\r\ncodeforces\r\ndodivthree\r\n",
                "7\r\nabaca?b\r\nzabbbcc\r\n",
                "9\r\nbambarbia\r\nhellocode\r\n",
                "10\r\ncode??????\r\n??????test\r\n",
                "1\r\nz\r\nz\r\n",
                "1\r\nz\r\na\r\n",
                "2\r\naa\r\naa\r\n",
                "2\r\nab\r\naa\r\n",
                "2\r\nba\r\naa\r\n",
                "2\r\naf\r\nfa\r\n",
                "2\r\naf\r\nfz\r\n",
                "1\r\n?\r\nz\r\n",
                "1\r\na\r\n?\r\n",
                "1\r\n?\r\n?\r\n",
                "20\r\nleduyanhyeunguyenhoa\r\nminhtriloveviethuong\r\n"
            ],
            "outputs": [
                "5\r\n7 8\r\n4 9\r\n2 2\r\n9 10\r\n3 1\r\n",
                "5\r\n6 5\r\n2 3\r\n4 6\r\n7 4\r\n1 2\r\n",
                "0\r\n",
                "10\r\n6 2\r\n1 6\r\n7 3\r\n3 5\r\n4 8\r\n9 7\r\n5 1\r\n2 4\r\n10 9\r\n8 10\r\n",
                "1\r\n1 1\r\n",
                "0\r\n",
                "2\r\n1 1\r\n2 2\r\n",
                "1\r\n1 1\r\n",
                "1\r\n2 1\r\n",
                "2\r\n1 2\r\n2 1\r\n",
                "1\r\n2 1\r\n",
                "1\r\n1 1\r\n",
                "1\r\n1 1\r\n",
                "1\r\n1 1\r\n",
                "10\r\n19 9\r\n10 14\r\n4 17\r\n13 20\r\n2 11\r\n1 8\r\n12 19\r\n8 4\r\n18 16\r\n7 3\r\n"
            ]
        },
        "solution_id_0": 51521130,
        "solution_0": "from collections import defaultdict, deque\n\ndef solve():\n    N = int(input())\n    boot1 = input().strip()\n    boot2 = input().strip()\n    freq1 = defaultdict(list)\n    freq2 = defaultdict(list)\n    for i in range(N):\n        freq1[boot1[i]].append(i + 1)\n        freq2[boot2[i]].append(i + 1)\n    results = []\n    Keys = list(freq1.keys())\n    for x in Keys:\n        if x != '?':\n            while len(freq1[x]) > 0 and len(freq2[x]) > 0:\n                a = freq1[x].pop()\n                b = freq2[x].pop()\n                results.append(str(a) + ' ' + str(b))\n            while len(freq1[x]) > 0 and len(freq2['?']) > 0:\n                a = freq1[x].pop()\n                b = freq2['?'].pop()\n                results.append(str(a) + ' ' + str(b))\n            while len(freq2[x]) > 0 and len(freq1['?']) > 0:\n                a = freq1['?'].pop()\n                b = freq2[x].pop()\n                results.append(str(a) + ' ' + str(b))\n    Keys2 = list(freq2.keys())\n    if len(freq1['?']) > 0:\n        for x in Keys2:\n            if x == '?':\n                continue\n            while freq1['?'] and freq2[x]:\n                a = freq1['?'].pop()\n                b = freq2[x].pop()\n                results.append(str(a) + ' ' + str(b))\n    if len(freq2['?']) > 0:\n        for x in Keys:\n            if x == '?':\n                continue\n            while freq2['?'] and freq1[x]:\n                a = freq1[x].pop()\n                b = freq2['?'].pop()\n                results.append(str(a) + ' ' + str(b))\n    while freq1['?'] and freq2['?']:\n        a = freq1['?'].pop()\n        b = freq2['?'].pop()\n        results.append(str(a) + ' ' + str(b))\n    cnt = len(results)\n    print(cnt)\n    print('\\n'.join((k for k in results)))\nif __name__ == '__main__':\n    solve()",
        "outputs_0": [
            "5\r\n6 2\r\n3 3\r\n9 10\r\n4 9\r\n7 8\r\n",
            "5\r\n5 2\r\n7 5\r\n2 4\r\n6 3\r\n4 7\r\n",
            "0\r\n\r\n",
            "10\r\n1 6\r\n2 5\r\n3 4\r\n4 8\r\n10 10\r\n9 7\r\n8 9\r\n7 3\r\n6 2\r\n5 1\r\n",
            "1\r\n1 1\r\n",
            "0\r\n\r\n",
            "2\r\n2 2\r\n1 1\r\n",
            "1\r\n1 2\r\n",
            "1\r\n2 2\r\n",
            "2\r\n1 2\r\n2 1\r\n",
            "1\r\n2 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "10\r\n1 8\r\n16 14\r\n10 11\r\n14 17\r\n17 19\r\n12 3\r\n18 16\r\n8 4\r\n13 20\r\n19 18\r\n"
        ],
        "solution_id_1": 51614686,
        "solution_1": "import atexit\nimport io\nimport sys\n_I_B = sys.stdin.read().splitlines()\ninput = iter(_I_B).__next__\n_O_B = io.StringIO()\nsys.stdout = _O_B\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_O_B.getvalue())\nn = int(input())\nl = input()\nr = input()\ndl = dict()\ndr = dict()\nbs = ord('a')\nfor i in range(0, 26):\n    idx = chr(bs + i)\n    dl[idx] = []\n    dr[idx] = []\ndl['?'] = []\ndr['?'] = []\nfor i in range(n):\n    dl[l[i]].append(i)\n    dr[r[i]].append(i)\npairs = []\nco = 0\nfor i in dl:\n    while dl[i] and dr[i]:\n        pairs.append((1 + dl[i].pop(), 1 + dr[i].pop()))\n        co += 1\n    while dl[i] and dr['?']:\n        pairs.append((1 + dl[i].pop(), 1 + dr['?'].pop()))\n        co += 1\n    while dl['?'] and dr[i]:\n        pairs.append((1 + dl['?'].pop(), 1 + dr[i].pop()))\n        co += 1\nprint(co)\nfor (i, j) in pairs:\n    print(i, j)",
        "outputs_1": [
            "5\r\n3 3\r\n9 10\r\n4 9\r\n6 2\r\n7 8\r\n",
            "5\r\n5 2\r\n7 5\r\n2 4\r\n6 3\r\n4 7\r\n",
            "0\r\n",
            "10\r\n1 6\r\n3 5\r\n4 8\r\n2 4\r\n10 9\r\n9 10\r\n8 7\r\n7 3\r\n6 2\r\n5 1\r\n",
            "1\r\n1 1\r\n",
            "0\r\n",
            "2\r\n2 2\r\n1 1\r\n",
            "1\r\n1 2\r\n",
            "1\r\n2 2\r\n",
            "2\r\n1 2\r\n2 1\r\n",
            "1\r\n2 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "10\r\n16 14\r\n10 11\r\n13 20\r\n18 16\r\n8 4\r\n1 8\r\n17 19\r\n12 3\r\n19 18\r\n14 17\r\n"
        ],
        "solution_id_2": 51616247,
        "solution_2": "(n, s1, s2) = (int(input()), input(), input())\n(dl, dr) = ({'?': 0}, {'?': 0})\n(indl, indr) = ({'?': []}, {'?': []})\nfor i in range(n):\n    if s1[i] not in dl:\n        dl[s1[i]] = dr[s1[i]] = 0\n        (indl[s1[i]], indr[s1[i]]) = ([], [])\n    if s2[i] not in dl:\n        dl[s2[i]] = dr[s2[i]] = 0\n        (indl[s2[i]], indr[s2[i]]) = ([], [])\n    dl[s1[i]] += 1\n    dr[s2[i]] += 1\n    indl[s1[i]].append(i + 1)\n    indr[s2[i]].append(i + 1)\npairs = 0\nprintv = []\nfor k in dl:\n    if k == '?':\n        continue\n    new = min(dl[k], dr[k])\n    pairs += new\n    dl[k] -= new\n    dr[k] -= new\n    printv.extend([(k, k)] * new)\nv = dr['?']\nfor k in dl:\n    if k == '?':\n        continue\n    if v <= 0:\n        break\n    new = min(v, dl[k])\n    pairs += new\n    v -= new\n    dl[k] -= new\n    printv.extend([(k, '?')] * new)\ndr['?'] = v\nv = dl['?']\nfor k in dr:\n    if k == '?':\n        continue\n    if v <= 0:\n        break\n    new = min(v, dr[k])\n    pairs += new\n    v -= new\n    dr[k] -= new\n    printv.extend([('?', k)] * new)\ndl['?'] = v\nnew = min(dr['?'], dl['?'])\npairs += new\nprintv.extend([('?', '?')] * new)\nprint(pairs)\nprint('\\n'.join([str(indl[s[0]].pop()) + ' ' + str(indr[s[1]].pop()) for s in printv]))",
        "outputs_2": [
            "5\r\n3 3\r\n6 2\r\n9 10\r\n4 9\r\n7 8\r\n",
            "5\r\n5 2\r\n7 5\r\n2 4\r\n4 7\r\n6 1\r\n",
            "0\r\n\r\n",
            "10\r\n4 8\r\n1 6\r\n2 5\r\n3 4\r\n10 10\r\n9 7\r\n8 9\r\n7 3\r\n6 2\r\n5 1\r\n",
            "1\r\n1 1\r\n",
            "0\r\n\r\n",
            "2\r\n2 2\r\n1 1\r\n",
            "1\r\n1 2\r\n",
            "1\r\n2 2\r\n",
            "2\r\n1 2\r\n2 1\r\n",
            "1\r\n2 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "1\r\n1 1\r\n",
            "10\r\n1 8\r\n16 14\r\n10 11\r\n17 19\r\n12 3\r\n14 17\r\n18 16\r\n8 4\r\n19 18\r\n13 20\r\n"
        ],
        "unnorm_rating": 1509.4556767366253,
        "unnorm_rating_std": 73.37553621539263,
        "unnorm_rating_volatility": 0.06142854172664409,
        "reference_rating": 1500.0,
        "original_tags": [
            "greedy",
            "implementation"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 822,
        "problem_index": "C",
        "rating": 0.34253696358410773,
        "rating_std": 0.02724244869562097,
        "rating_volatility": 2.0808110841292855e-05,
        "rating_quantile": 0.533603027534908,
        "tag": "Implement",
        "detailed_tag": "sortings",
        "problem_name": "Hacker, pack your bags!",
        "problem_main": "It's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi \u2014 day of departure from Vi\u010dkopolis, day of arriving back in Vi\u010dkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri\u2009-\u2009li\u2009+\u20091.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i\u2009\u2260\u2009j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri\u2009<\u2009lj or rj\u2009<\u2009li.Help Leha to choose the necessary vouchers!",
        "problem_note": "In the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3\u2009-\u20091\u2009+\u20091)\u2009+\u2009(6\u2009-\u20095\u2009+\u20091)\u2009=\u20095 and the total cost will be 4\u2009+\u20091\u2009=\u20095.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.",
        "input_spec": "The first line contains two integers n and x (2\u2009\u2264\u2009n,\u2009x\u2009\u2264\u20092\u00b7105) \u2014 the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1\u2009\u2264\u2009li\u2009\u2264\u2009ri\u2009\u2264\u20092\u00b7105,\u20091\u2009\u2264\u2009costi\u2009\u2264\u2009109) \u2014 description of the voucher.",
        "output_spec": "Print a single integer \u2014 a minimal amount of money that Leha will spend, or print \u2009-\u20091 if it's impossible to choose two disjoint vouchers with the total duration exactly x.",
        "sample_inputs": [
            "4 5\n1 3 4\n1 2 5\n5 6 1\n1 2 4",
            "3 2\n4 6 3\n2 4 1\n3 5 4"
        ],
        "sample_outputs": [
            "5",
            "-1"
        ],
        "inputs": [
            "4 5\r\n1 3 4\r\n1 2 5\r\n5 6 1\r\n1 2 4\r\n",
            "3 2\r\n4 6 3\r\n2 4 1\r\n3 5 4\r\n",
            "2 1855\r\n159106 161198 437057705\r\n149039 158409 889963913\r\n",
            "15 17\r\n1 10 8\r\n5 19 1\r\n12 14 6\r\n9 19 8\r\n6 7 3\r\n5 11 9\r\n7 12 5\r\n17 20 8\r\n6 12 6\r\n11 19 4\r\n3 14 1\r\n15 19 10\r\n3 20 5\r\n5 19 9\r\n10 18 10\r\n",
            "15 7\r\n16 18 6\r\n11 15 2\r\n5 17 3\r\n4 5 1\r\n3 11 5\r\n13 16 7\r\n8 11 6\r\n9 16 4\r\n7 8 3\r\n11 15 2\r\n2 8 6\r\n7 8 7\r\n10 12 2\r\n6 8 1\r\n6 15 1\r\n",
            "15 24\r\n2 14 5\r\n7 14 4\r\n6 11 6\r\n3 5 6\r\n4 13 5\r\n10 11 4\r\n8 8 6\r\n5 14 4\r\n2 2 3\r\n9 14 5\r\n2 13 6\r\n14 14 4\r\n2 12 3\r\n3 14 5\r\n9 11 3\r\n",
            "15 12\r\n3 12 4\r\n2 8 1\r\n7 8 4\r\n10 11 3\r\n12 12 1\r\n11 12 4\r\n5 13 3\r\n7 13 1\r\n11 13 3\r\n2 5 2\r\n4 5 3\r\n2 11 4\r\n2 6 4\r\n8 9 4\r\n3 4 3\r\n",
            "15 13\r\n4 10 3\r\n7 8 3\r\n5 7 1\r\n2 2 3\r\n1 6 2\r\n3 10 1\r\n6 9 2\r\n5 8 1\r\n6 8 2\r\n4 5 2\r\n3 5 2\r\n4 8 1\r\n4 9 1\r\n5 9 1\r\n5 10 2\r\n",
            "8 7\r\n10 10 3\r\n10 10 2\r\n6 7 2\r\n1 6 3\r\n1 3 2\r\n3 8 2\r\n4 6 3\r\n1 6 2\r\n",
            "5 6\r\n18 20 2\r\n9 11 3\r\n4 7 3\r\n16 17 3\r\n12 14 1\r\n",
            "3 5\r\n6 6 1\r\n2 4 2\r\n5 8 3\r\n",
            "3 3\r\n11 11 2\r\n3 4 3\r\n8 9 2\r\n",
            "2 7\r\n3 6 1\r\n10 12 1\r\n",
            "2 2\r\n200000 200000 1\r\n1 1 1000000000\r\n",
            "2 8\r\n1 4 2\r\n8 11 2\r\n",
            "2 2\r\n1 1 1000000000\r\n2 2 1000000000\r\n",
            "2 3\r\n1 2 1000000000\r\n3 3 1000000000\r\n",
            "2 2\r\n1 1 500000000\r\n2 2 500000000\r\n",
            "2 4\r\n1 2 1000000000\r\n3 4 1000000000\r\n",
            "2 4\r\n1 2 500000000\r\n3 4 500000000\r\n",
            "2 2\r\n1 1 1000000000\r\n2 2 1000\r\n",
            "2 4\r\n1 2 999999999\r\n3 4 999999999\r\n",
            "2 2\r\n1 1 1000000000\r\n2 2 7\r\n",
            "2 4\r\n1 2 1\r\n2 3 2\r\n",
            "2 3\r\n1 1 1000000000\r\n2 3 73741824\r\n",
            "4 3\r\n1 1 2\r\n1 1 3\r\n2 3 3\r\n2 3 4\r\n",
            "2 5\r\n1 3 50000000\r\n4 5 50000000\r\n",
            "2 5\r\n1 3 1000000000\r\n4 5 1000000000\r\n",
            "2 2\r\n1 1 1\r\n1 1 1\r\n",
            "4 5\r\n1 3 900000000\r\n1 2 5\r\n5 6 900000000\r\n1 2 4\r\n",
            "2 4\r\n1 2 536870912\r\n3 4 536870912\r\n",
            "2 4\r\n1 2 500000000\r\n5 6 500000000\r\n",
            "2 5\r\n1 3 999999998\r\n4 5 1\r\n",
            "4 3\r\n1 1 2\r\n1 1 3\r\n2 3 2\r\n1 2 3\r\n",
            "4 5\r\n1 3 500000000\r\n1 2 500000000\r\n5 6 500000000\r\n1 2 500000000\r\n",
            "2 2\r\n2 2 1\r\n3 3 2\r\n",
            "3 3\r\n3 5 2\r\n1 2 4\r\n1 3 4\r\n",
            "3 4\r\n2 3 1\r\n1 2 2\r\n3 4 2\r\n",
            "4 5\r\n1 2 2\r\n1 2 5\r\n3 5 6\r\n3 5 8\r\n",
            "2 4\r\n1 2 5\r\n1 3 5\r\n"
        ],
        "answers": [
            "5\r\n",
            "-1\r\n",
            "-1\r\n",
            "11\r\n",
            "3\r\n",
            "-1\r\n",
            "5\r\n",
            "-1\r\n",
            "4\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "2\r\n",
            "1000000001\r\n",
            "4\r\n",
            "2000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "1000001000\r\n",
            "1999999998\r\n",
            "1000000007\r\n",
            "-1\r\n",
            "1073741824\r\n",
            "5\r\n",
            "100000000\r\n",
            "2000000000\r\n",
            "-1\r\n",
            "1800000000\r\n",
            "1073741824\r\n",
            "1000000000\r\n",
            "999999999\r\n",
            "4\r\n",
            "1000000000\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "8\r\n",
            "-1\r\n"
        ],
        "input_output": {
            "inputs": [
                "4 5\r\n1 3 4\r\n1 2 5\r\n5 6 1\r\n1 2 4\r\n",
                "3 2\r\n4 6 3\r\n2 4 1\r\n3 5 4\r\n",
                "2 1855\r\n159106 161198 437057705\r\n149039 158409 889963913\r\n",
                "15 17\r\n1 10 8\r\n5 19 1\r\n12 14 6\r\n9 19 8\r\n6 7 3\r\n5 11 9\r\n7 12 5\r\n17 20 8\r\n6 12 6\r\n11 19 4\r\n3 14 1\r\n15 19 10\r\n3 20 5\r\n5 19 9\r\n10 18 10\r\n",
                "15 7\r\n16 18 6\r\n11 15 2\r\n5 17 3\r\n4 5 1\r\n3 11 5\r\n13 16 7\r\n8 11 6\r\n9 16 4\r\n7 8 3\r\n11 15 2\r\n2 8 6\r\n7 8 7\r\n10 12 2\r\n6 8 1\r\n6 15 1\r\n",
                "15 24\r\n2 14 5\r\n7 14 4\r\n6 11 6\r\n3 5 6\r\n4 13 5\r\n10 11 4\r\n8 8 6\r\n5 14 4\r\n2 2 3\r\n9 14 5\r\n2 13 6\r\n14 14 4\r\n2 12 3\r\n3 14 5\r\n9 11 3\r\n",
                "15 12\r\n3 12 4\r\n2 8 1\r\n7 8 4\r\n10 11 3\r\n12 12 1\r\n11 12 4\r\n5 13 3\r\n7 13 1\r\n11 13 3\r\n2 5 2\r\n4 5 3\r\n2 11 4\r\n2 6 4\r\n8 9 4\r\n3 4 3\r\n",
                "15 13\r\n4 10 3\r\n7 8 3\r\n5 7 1\r\n2 2 3\r\n1 6 2\r\n3 10 1\r\n6 9 2\r\n5 8 1\r\n6 8 2\r\n4 5 2\r\n3 5 2\r\n4 8 1\r\n4 9 1\r\n5 9 1\r\n5 10 2\r\n",
                "8 7\r\n10 10 3\r\n10 10 2\r\n6 7 2\r\n1 6 3\r\n1 3 2\r\n3 8 2\r\n4 6 3\r\n1 6 2\r\n",
                "5 6\r\n18 20 2\r\n9 11 3\r\n4 7 3\r\n16 17 3\r\n12 14 1\r\n",
                "3 5\r\n6 6 1\r\n2 4 2\r\n5 8 3\r\n",
                "3 3\r\n11 11 2\r\n3 4 3\r\n8 9 2\r\n",
                "2 7\r\n3 6 1\r\n10 12 1\r\n",
                "2 2\r\n200000 200000 1\r\n1 1 1000000000\r\n",
                "2 8\r\n1 4 2\r\n8 11 2\r\n",
                "2 2\r\n1 1 1000000000\r\n2 2 1000000000\r\n",
                "2 3\r\n1 2 1000000000\r\n3 3 1000000000\r\n",
                "2 2\r\n1 1 500000000\r\n2 2 500000000\r\n",
                "2 4\r\n1 2 1000000000\r\n3 4 1000000000\r\n",
                "2 4\r\n1 2 500000000\r\n3 4 500000000\r\n",
                "2 2\r\n1 1 1000000000\r\n2 2 1000\r\n",
                "2 4\r\n1 2 999999999\r\n3 4 999999999\r\n",
                "2 2\r\n1 1 1000000000\r\n2 2 7\r\n",
                "2 4\r\n1 2 1\r\n2 3 2\r\n",
                "2 3\r\n1 1 1000000000\r\n2 3 73741824\r\n",
                "4 3\r\n1 1 2\r\n1 1 3\r\n2 3 3\r\n2 3 4\r\n",
                "2 5\r\n1 3 50000000\r\n4 5 50000000\r\n",
                "2 5\r\n1 3 1000000000\r\n4 5 1000000000\r\n",
                "2 2\r\n1 1 1\r\n1 1 1\r\n",
                "4 5\r\n1 3 900000000\r\n1 2 5\r\n5 6 900000000\r\n1 2 4\r\n",
                "2 4\r\n1 2 536870912\r\n3 4 536870912\r\n",
                "2 4\r\n1 2 500000000\r\n5 6 500000000\r\n",
                "2 5\r\n1 3 999999998\r\n4 5 1\r\n",
                "4 3\r\n1 1 2\r\n1 1 3\r\n2 3 2\r\n1 2 3\r\n",
                "4 5\r\n1 3 500000000\r\n1 2 500000000\r\n5 6 500000000\r\n1 2 500000000\r\n",
                "2 2\r\n2 2 1\r\n3 3 2\r\n",
                "3 3\r\n3 5 2\r\n1 2 4\r\n1 3 4\r\n",
                "3 4\r\n2 3 1\r\n1 2 2\r\n3 4 2\r\n",
                "4 5\r\n1 2 2\r\n1 2 5\r\n3 5 6\r\n3 5 8\r\n",
                "2 4\r\n1 2 5\r\n1 3 5\r\n"
            ],
            "outputs": [
                "5\r\n",
                "-1\r\n",
                "-1\r\n",
                "11\r\n",
                "3\r\n",
                "-1\r\n",
                "5\r\n",
                "-1\r\n",
                "4\r\n",
                "3\r\n",
                "-1\r\n",
                "4\r\n",
                "2\r\n",
                "1000000001\r\n",
                "4\r\n",
                "2000000000\r\n",
                "2000000000\r\n",
                "1000000000\r\n",
                "2000000000\r\n",
                "1000000000\r\n",
                "1000001000\r\n",
                "1999999998\r\n",
                "1000000007\r\n",
                "-1\r\n",
                "1073741824\r\n",
                "5\r\n",
                "100000000\r\n",
                "2000000000\r\n",
                "-1\r\n",
                "1800000000\r\n",
                "1073741824\r\n",
                "1000000000\r\n",
                "999999999\r\n",
                "4\r\n",
                "1000000000\r\n",
                "3\r\n",
                "-1\r\n",
                "4\r\n",
                "8\r\n",
                "-1\r\n"
            ]
        },
        "solution_id_0": 238121091,
        "solution_0": "(n, x) = map(int, input().split())\nV = []\nfor i in range(x + 1):\n    V.append([])\nfor i in range(n):\n    (l, r, c) = map(int, input().split())\n    if r - l + 1 > x:\n        continue\n    V[r - l + 1].append((l, c))\nfor i in range(x + 1):\n    V[i] = sorted(V[i], key=lambda a: a[0])\nans = int(3000000000.0 + 7)\nfor i in range(x + 1):\n    mn = int(3000000000.0 + 7)\n    k = 0\n    for j in range(len(V[i])):\n        while k != len(V[x - i]) and V[x - i][k][0] + (x - i) - 1 < V[i][j][0]:\n            mn = min(mn, V[x - i][k][1])\n            k += 1\n        ans = min(ans, mn + V[i][j][1])\nif ans == int(3000000000.0 + 7):\n    print(-1)\nelse:\n    print(ans)",
        "outputs_0": [
            "5\r\n",
            "-1\r\n",
            "-1\r\n",
            "11\r\n",
            "3\r\n",
            "-1\r\n",
            "5\r\n",
            "-1\r\n",
            "4\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "2\r\n",
            "1000000001\r\n",
            "4\r\n",
            "2000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "1000001000\r\n",
            "1999999998\r\n",
            "1000000007\r\n",
            "-1\r\n",
            "1073741824\r\n",
            "5\r\n",
            "100000000\r\n",
            "2000000000\r\n",
            "-1\r\n",
            "1800000000\r\n",
            "1073741824\r\n",
            "1000000000\r\n",
            "999999999\r\n",
            "4\r\n",
            "1000000000\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "8\r\n",
            "-1\r\n"
        ],
        "solution_id_1": 28277172,
        "solution_1": "def main():\n    (n, x) = map(int, input().split())\n    vouchers = [False] * x\n    for _ in range(n):\n        (lo, hi, cost) = map(int, input().split())\n        w = hi - lo\n        if w < x:\n            l = vouchers[w]\n            if l:\n                l.append((lo, cost))\n            else:\n                vouchers[w] = [(lo, cost)]\n    best = inf = 1 << 31\n    x -= 2\n    if not x & 1 and vouchers[x // 2]:\n        (lh, h) = (vouchers[x // 2], None)\n        for f in (lh.sort, lh.reverse):\n            l = h\n            f()\n            (h, b) = ([], inf)\n            for (lo, cost) in lh:\n                if b > cost:\n                    b = cost\n                    h.append((lo, b))\n        (b, v) = h.pop()\n        for (a, u) in l:\n            a += w\n            while a >= b and h:\n                (b, v) = h.pop()\n            if a < b and best > u + v:\n                best = u + v\n    for (w, l, h) in zip(range(x), vouchers, vouchers[x:x // 2:-1]):\n        if l and h:\n            m = []\n            for lh in (l, h):\n                for f in (lh.sort, lh.reverse):\n                    f()\n                    (t, b) = ([], inf)\n                    for (lo, cost) in lh:\n                        if b > cost:\n                            b = cost\n                            t.append((lo, b))\n                    m.append(t)\n            for (l, h) in ((m[0], m[3]), (m[2], m[1])):\n                (b, v) = h.pop()\n                for (a, u) in l:\n                    a += w\n                    while a >= b and h:\n                        (b, v) = h.pop()\n                    if a < b and best > u + v:\n                        best = u + v\n                w = x - w\n    print(best if best < inf else -1)\nif __name__ == '__main__':\n    main()",
        "outputs_1": [
            "5\r\n",
            "-1\r\n",
            "-1\r\n",
            "11\r\n",
            "3\r\n",
            "-1\r\n",
            "5\r\n",
            "-1\r\n",
            "4\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "2\r\n",
            "1000000001\r\n",
            "4\r\n",
            "2000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "1000001000\r\n",
            "1999999998\r\n",
            "1000000007\r\n",
            "-1\r\n",
            "1073741824\r\n",
            "5\r\n",
            "100000000\r\n",
            "2000000000\r\n",
            "-1\r\n",
            "1800000000\r\n",
            "1073741824\r\n",
            "1000000000\r\n",
            "999999999\r\n",
            "4\r\n",
            "1000000000\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "8\r\n",
            "-1\r\n"
        ],
        "solution_id_2": 79974942,
        "solution_2": "(n, x) = map(int, input().split())\narr = list((tuple(map(int, input().split())) for _ in range(n)))\narr_first = arr[:]\narr_second = arr[:]\narr_first.sort(key=lambda i: i[0])\narr_second.sort(key=lambda i: i[1])\n(d, idx, res) = ({}, 0, int(10 ** 18))\nfor (l, r, c) in arr_second:\n    while idx < n and r >= arr_first[idx][0]:\n        k = x - (arr_first[idx][1] - arr_first[idx][0] + 1)\n        if k in d:\n            res = min(res, d[k] + arr_first[idx][2])\n        idx += 1\n    tmp = r - l + 1\n    d[tmp] = c if tmp not in d else min(d[tmp], c)\nprint(-1 if res == int(10 ** 18) else res)",
        "outputs_2": [
            "5\r\n",
            "-1\r\n",
            "-1\r\n",
            "11\r\n",
            "3\r\n",
            "-1\r\n",
            "5\r\n",
            "-1\r\n",
            "4\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "2\r\n",
            "1000000001\r\n",
            "4\r\n",
            "2000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "2000000000\r\n",
            "1000000000\r\n",
            "1000001000\r\n",
            "1999999998\r\n",
            "1000000007\r\n",
            "-1\r\n",
            "1073741824\r\n",
            "5\r\n",
            "100000000\r\n",
            "2000000000\r\n",
            "-1\r\n",
            "1800000000\r\n",
            "1073741824\r\n",
            "1000000000\r\n",
            "999999999\r\n",
            "4\r\n",
            "1000000000\r\n",
            "3\r\n",
            "-1\r\n",
            "4\r\n",
            "8\r\n",
            "-1\r\n"
        ],
        "unnorm_rating": 1606.9640149531353,
        "unnorm_rating_std": 78.43929292624327,
        "unnorm_rating_volatility": 0.05991287786784999,
        "reference_rating": 1600.0,
        "original_tags": [
            "binary search",
            "greedy",
            "implementation",
            "sortings"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 1846,
        "problem_index": "E2",
        "rating": 0.42201494846797427,
        "rating_std": 0.04593018324974506,
        "rating_volatility": 2.0926978230264627e-05,
        "rating_quantile": 0.6802818739397103,
        "tag": "Math",
        "detailed_tag": "binary search",
        "problem_name": "Rudolf and Snowflakes (hard version)",
        "problem_main": "This is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.",
        "problem_note": "",
        "input_spec": "The first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) \u2014 the number of vertices for which it is necessary to check the existence of a snowflake.",
        "output_spec": "Output $$$t$$$ lines, each of which is the answer to the corresponding test case \u2014 \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.",
        "sample_inputs": [
            "9\n1\n2\n3\n6\n13\n15\n255\n10101\n1000000000000000000"
        ],
        "sample_outputs": [
            "NO\nNO\nNO\nNO\nYES\nYES\nYES\nYES\nNO"
        ],
        "inputs": [
            "9\r\n1\r\n2\r\n3\r\n6\r\n13\r\n15\r\n255\r\n10101\r\n1000000000000000000\r\n",
            "100\r\n12\r\n14\r\n15\r\n21\r\n22\r\n23\r\n31\r\n48\r\n52\r\n63\r\n66\r\n70\r\n85\r\n88\r\n96\r\n102\r\n112\r\n127\r\n132\r\n156\r\n159\r\n170\r\n200\r\n217\r\n223\r\n239\r\n241\r\n255\r\n261\r\n264\r\n272\r\n276\r\n279\r\n292\r\n308\r\n316\r\n334\r\n341\r\n342\r\n381\r\n384\r\n387\r\n394\r\n398\r\n404\r\n433\r\n445\r\n447\r\n489\r\n490\r\n500\r\n502\r\n511\r\n524\r\n533\r\n538\r\n540\r\n553\r\n571\r\n575\r\n581\r\n586\r\n603\r\n607\r\n611\r\n614\r\n618\r\n628\r\n631\r\n643\r\n651\r\n668\r\n677\r\n680\r\n682\r\n689\r\n696\r\n732\r\n777\r\n781\r\n787\r\n792\r\n806\r\n811\r\n814\r\n822\r\n830\r\n837\r\n845\r\n850\r\n853\r\n872\r\n900\r\n906\r\n924\r\n928\r\n951\r\n963\r\n975\r\n991\r\n",
            "100\r\n41\r\n64\r\n69\r\n80\r\n88\r\n96\r\n107\r\n155\r\n163\r\n167\r\n181\r\n191\r\n225\r\n254\r\n264\r\n268\r\n277\r\n278\r\n287\r\n292\r\n294\r\n296\r\n301\r\n302\r\n310\r\n320\r\n342\r\n345\r\n351\r\n368\r\n373\r\n389\r\n409\r\n412\r\n413\r\n414\r\n440\r\n441\r\n443\r\n445\r\n448\r\n457\r\n467\r\n470\r\n474\r\n475\r\n483\r\n487\r\n518\r\n525\r\n529\r\n562\r\n569\r\n580\r\n587\r\n604\r\n606\r\n616\r\n622\r\n624\r\n627\r\n631\r\n663\r\n676\r\n678\r\n685\r\n686\r\n695\r\n706\r\n712\r\n716\r\n718\r\n731\r\n738\r\n741\r\n752\r\n765\r\n766\r\n772\r\n774\r\n785\r\n788\r\n793\r\n801\r\n810\r\n837\r\n869\r\n871\r\n900\r\n901\r\n912\r\n914\r\n933\r\n938\r\n958\r\n961\r\n969\r\n974\r\n989\r\n991\r\n",
            "1\r\n717109999234424\r\n",
            "1\r\n100000010000001\r\n",
            "1\r\n10000000100000001\r\n",
            "1\r\n999999999000000001\r\n",
            "1\r\n7013998766394781\r\n",
            "1\r\n4000002000001\r\n",
            "1\r\n4000006000003\r\n",
            "1\r\n64000160000400001\r\n",
            "6\r\n64000008000003\r\n64000008000001\r\n9999799901001001\r\n9999799901001000\r\n9999999900000001\r\n9999799901001002\r\n",
            "10\r\n1\r\n2\r\n3\r\n6\r\n13\r\n15\r\n255\r\n10101\r\n1000000000000000000\r\n1000160008600156\r\n",
            "1\r\n347666533995749223\r\n",
            "4\r\n1000000000000000000\r\n240818941573998061\r\n27618754614420628\r\n4000006000003\r\n",
            "5\r\n975461058777625363\r\n975461058777625363\r\n999999999000000002\r\n999999999000000001\r\n280138784844143524\r\n",
            "1\r\n40000000200000001\r\n",
            "1\r\n160000000400000001\r\n",
            "1\r\n147389519791195397\r\n",
            "1\r\n1000100003400040\r\n",
            "1\r\n411440358027985474\r\n",
            "1\r\n9999999700000003\r\n",
            "8\r\n9999999700000003\r\n9999999700000001\r\n9999999700000002\r\n9999999700000004\r\n999999997000000003\r\n999999997000000002\r\n999999997000000001\r\n999999997000000004\r\n",
            "1\r\n810000000900000001\r\n",
            "1\r\n140363476394377041\r\n",
            "1\r\n25000005000001\r\n",
            "1\r\n245930046754636608\r\n",
            "7\r\n245930046754636608\r\n64000160000400001\r\n25000005000001\r\n140363476394377041\r\n810000000900000001\r\n9999999700000003\r\n999999997000000003\r\n",
            "1\r\n963418364786213635\r\n",
            "1\r\n999980000200000\r\n",
            "1\r\n4000022000031\r\n",
            "1\r\n251233654563805\r\n",
            "4\r\n251233654563805\r\n365500864765439656\r\n237860064457152228\r\n1597376949252679\r\n",
            "22\r\n4000002000001\r\n4000006000003\r\n4000010000007\r\n4000014000013\r\n4000018000021\r\n4000022000031\r\n4000026000043\r\n4000030000057\r\n4000034000073\r\n4000038000091\r\n4000042000111\r\n4000046000133\r\n4000050000157\r\n4000054000183\r\n4000058000211\r\n4000062000241\r\n4000066000273\r\n4000070000307\r\n4000074000343\r\n4000078000381\r\n4000082000421\r\n4000086000463\r\n",
            "1\r\n111307891115281\r\n",
            "1\r\n224449030516405\r\n",
            "1\r\n987201227329380031\r\n",
            "2\r\n999999981000000091\r\n10000000100000001\r\n",
            "3\r\n999999981000000091\r\n10000000100000001\r\n999999999000000001\r\n",
            "3\r\n140363476394377041\r\n245930046754636608\r\n64000160000400001\r\n"
        ],
        "answers": [
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n"
        ],
        "input_output": {
            "inputs": [
                "9\r\n1\r\n2\r\n3\r\n6\r\n13\r\n15\r\n255\r\n10101\r\n1000000000000000000\r\n",
                "100\r\n12\r\n14\r\n15\r\n21\r\n22\r\n23\r\n31\r\n48\r\n52\r\n63\r\n66\r\n70\r\n85\r\n88\r\n96\r\n102\r\n112\r\n127\r\n132\r\n156\r\n159\r\n170\r\n200\r\n217\r\n223\r\n239\r\n241\r\n255\r\n261\r\n264\r\n272\r\n276\r\n279\r\n292\r\n308\r\n316\r\n334\r\n341\r\n342\r\n381\r\n384\r\n387\r\n394\r\n398\r\n404\r\n433\r\n445\r\n447\r\n489\r\n490\r\n500\r\n502\r\n511\r\n524\r\n533\r\n538\r\n540\r\n553\r\n571\r\n575\r\n581\r\n586\r\n603\r\n607\r\n611\r\n614\r\n618\r\n628\r\n631\r\n643\r\n651\r\n668\r\n677\r\n680\r\n682\r\n689\r\n696\r\n732\r\n777\r\n781\r\n787\r\n792\r\n806\r\n811\r\n814\r\n822\r\n830\r\n837\r\n845\r\n850\r\n853\r\n872\r\n900\r\n906\r\n924\r\n928\r\n951\r\n963\r\n975\r\n991\r\n",
                "100\r\n41\r\n64\r\n69\r\n80\r\n88\r\n96\r\n107\r\n155\r\n163\r\n167\r\n181\r\n191\r\n225\r\n254\r\n264\r\n268\r\n277\r\n278\r\n287\r\n292\r\n294\r\n296\r\n301\r\n302\r\n310\r\n320\r\n342\r\n345\r\n351\r\n368\r\n373\r\n389\r\n409\r\n412\r\n413\r\n414\r\n440\r\n441\r\n443\r\n445\r\n448\r\n457\r\n467\r\n470\r\n474\r\n475\r\n483\r\n487\r\n518\r\n525\r\n529\r\n562\r\n569\r\n580\r\n587\r\n604\r\n606\r\n616\r\n622\r\n624\r\n627\r\n631\r\n663\r\n676\r\n678\r\n685\r\n686\r\n695\r\n706\r\n712\r\n716\r\n718\r\n731\r\n738\r\n741\r\n752\r\n765\r\n766\r\n772\r\n774\r\n785\r\n788\r\n793\r\n801\r\n810\r\n837\r\n869\r\n871\r\n900\r\n901\r\n912\r\n914\r\n933\r\n938\r\n958\r\n961\r\n969\r\n974\r\n989\r\n991\r\n",
                "1\r\n717109999234424\r\n",
                "1\r\n100000010000001\r\n",
                "1\r\n10000000100000001\r\n",
                "1\r\n999999999000000001\r\n",
                "1\r\n7013998766394781\r\n",
                "1\r\n4000002000001\r\n",
                "1\r\n4000006000003\r\n",
                "1\r\n64000160000400001\r\n",
                "6\r\n64000008000003\r\n64000008000001\r\n9999799901001001\r\n9999799901001000\r\n9999999900000001\r\n9999799901001002\r\n",
                "10\r\n1\r\n2\r\n3\r\n6\r\n13\r\n15\r\n255\r\n10101\r\n1000000000000000000\r\n1000160008600156\r\n",
                "1\r\n347666533995749223\r\n",
                "4\r\n1000000000000000000\r\n240818941573998061\r\n27618754614420628\r\n4000006000003\r\n",
                "5\r\n975461058777625363\r\n975461058777625363\r\n999999999000000002\r\n999999999000000001\r\n280138784844143524\r\n",
                "1\r\n40000000200000001\r\n",
                "1\r\n160000000400000001\r\n",
                "1\r\n147389519791195397\r\n",
                "1\r\n1000100003400040\r\n",
                "1\r\n411440358027985474\r\n",
                "1\r\n9999999700000003\r\n",
                "8\r\n9999999700000003\r\n9999999700000001\r\n9999999700000002\r\n9999999700000004\r\n999999997000000003\r\n999999997000000002\r\n999999997000000001\r\n999999997000000004\r\n",
                "1\r\n810000000900000001\r\n",
                "1\r\n140363476394377041\r\n",
                "1\r\n25000005000001\r\n",
                "1\r\n245930046754636608\r\n",
                "7\r\n245930046754636608\r\n64000160000400001\r\n25000005000001\r\n140363476394377041\r\n810000000900000001\r\n9999999700000003\r\n999999997000000003\r\n",
                "1\r\n963418364786213635\r\n",
                "1\r\n999980000200000\r\n",
                "1\r\n4000022000031\r\n",
                "1\r\n251233654563805\r\n",
                "4\r\n251233654563805\r\n365500864765439656\r\n237860064457152228\r\n1597376949252679\r\n",
                "22\r\n4000002000001\r\n4000006000003\r\n4000010000007\r\n4000014000013\r\n4000018000021\r\n4000022000031\r\n4000026000043\r\n4000030000057\r\n4000034000073\r\n4000038000091\r\n4000042000111\r\n4000046000133\r\n4000050000157\r\n4000054000183\r\n4000058000211\r\n4000062000241\r\n4000066000273\r\n4000070000307\r\n4000074000343\r\n4000078000381\r\n4000082000421\r\n4000086000463\r\n",
                "1\r\n111307891115281\r\n",
                "1\r\n224449030516405\r\n",
                "1\r\n987201227329380031\r\n",
                "2\r\n999999981000000091\r\n10000000100000001\r\n",
                "3\r\n999999981000000091\r\n10000000100000001\r\n999999999000000001\r\n",
                "3\r\n140363476394377041\r\n245930046754636608\r\n64000160000400001\r\n"
            ],
            "outputs": [
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n",
                "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
                "NO\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n",
                "YES\r\n",
                "NO\r\nYES\r\nYES\r\nYES\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\n",
                "YES\r\nYES\r\n",
                "YES\r\nYES\r\nYES\r\n",
                "YES\r\nYES\r\nYES\r\n"
            ]
        },
        "solution_id_0": 215836026,
        "solution_0": "import math\n\ndef solve():\n    n = int(input())\n    for i in range(2, 62):\n        q = int(n ** (1.0 / i))\n        if q < 2 or q ** (i + 1) - 1 == n * (q - 1):\n            break\n    print('YES' if q >= 2 else 'NO')\nT = int(input())\nwhile T:\n    T -= 1\n    solve()",
        "outputs_0": [
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n"
        ],
        "solution_id_1": 217408834,
        "solution_1": "import math\n\ndef solve():\n    n = int(input())\n    for i in range(2, 62):\n        q = int(n ** (1.0 / i))\n        if q < 2 or q ** (i + 1) - 1 == n * (q - 1):\n            break\n    print('YES' if q >= 2 else 'NO')\nT = int(input())\nwhile T:\n    T -= 1\n    solve()",
        "outputs_1": [
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n"
        ],
        "solution_id_2": 212746500,
        "solution_2": "from sys import stdin\ninput = lambda : stdin.readline().rstrip('\\r\\n')\n\ndef check(n):\n    for x in range(2, n.bit_length()):\n        k = int(pow(n, 1 / x))\n        if n == (pow(k, x + 1) - 1) // (k - 1):\n            return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    n = int(input())\n    print(check(n))",
        "outputs_2": [
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "NO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n",
            "YES\r\n",
            "NO\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\n",
            "YES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n",
            "YES\r\nYES\r\nYES\r\n"
        ],
        "unnorm_rating": 1835.8052989047958,
        "unnorm_rating_std": 132.24696275786317,
        "unnorm_rating_volatility": 0.06025513322261306,
        "reference_rating": 1800.0,
        "original_tags": [
            "binary search",
            "brute force",
            "implementation",
            "math"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 270,
        "problem_index": "E",
        "rating": 0.49756296997712834,
        "rating_std": 0.08647045341362905,
        "rating_volatility": 2.083882963890993e-05,
        "rating_quantile": 0.7959023880986559,
        "tag": "Others",
        "detailed_tag": "dfs and similar",
        "problem_name": "Flawed Flow",
        "problem_main": "Emuskald considers himself a master of flow algorithms. Now he has completed his most ingenious program yet \u2014 it calculates the maximum flow in an undirected graph. The graph consists of n vertices and m edges. Vertices are numbered from 1 to n. Vertices 1 and n being the source and the sink respectively.However, his max-flow algorithm seems to have a little flaw \u2014 it only finds the flow volume for each edge, but not its direction. Help him find for each edge the direction of the flow through this edges. Note, that the resulting flow should be correct maximum flow.More formally. You are given an undirected graph. For each it's undirected edge (ai, bi) you are given the flow volume ci. You should direct all edges in such way that the following conditions hold:  for each vertex v (1\u2009<\u2009v\u2009<\u2009n), sum of ci of incoming edges is equal to the sum of ci of outcoming edges;  vertex with number 1 has no incoming edges;  the obtained directed graph does not have cycles. ",
        "problem_note": "In the first test case, 10 flow units pass through path , and 5 flow units pass directly from source to sink: .",
        "input_spec": "The first line of input contains two space-separated integers n and m (2\u2009\u2264\u2009n\u2009\u2264\u20092\u00b7105, n\u2009-\u20091\u2009\u2264\u2009m\u2009\u2264\u20092\u00b7105), the number of vertices and edges in the graph. The following m lines contain three space-separated integers ai, bi and ci (1\u2009\u2264\u2009ai,\u2009bi\u2009\u2264\u2009n, ai\u2009\u2260\u2009bi, 1\u2009\u2264\u2009ci\u2009\u2264\u2009104), which means that there is an undirected edge from ai to bi with flow volume ci.It is guaranteed that there are no two edges connecting the same vertices; the given graph is connected; a solution always exists.",
        "output_spec": "Output m lines, each containing one integer di, which should be 0 if the direction of the i-th edge is ai\u2009\u2192\u2009bi (the flow goes from vertex ai to vertex bi) and should be 1 otherwise. The edges are numbered from 1 to m in the order they are given in the input.If there are several solutions you can print any of them.",
        "sample_inputs": [
            "3 3\n3 2 10\n1 2 10\n3 1 5",
            "4 5\n1 2 10\n1 3 10\n2 3 5\n4 2 15\n3 4 5"
        ],
        "sample_outputs": [
            "1\n0\n1",
            "0\n0\n1\n1\n0"
        ],
        "inputs": [
            "3 3\r\n3 2 10\r\n1 2 10\r\n3 1 5\r\n",
            "4 5\r\n1 2 10\r\n1 3 10\r\n2 3 5\r\n4 2 15\r\n3 4 5\r\n",
            "10 17\r\n8 1 1\r\n4 8 2\r\n7 10 8\r\n1 4 1\r\n5 4 3\r\n6 9 6\r\n3 5 4\r\n1 9 1\r\n3 9 5\r\n7 1 1\r\n1 2 1\r\n1 3 1\r\n6 7 7\r\n8 2 1\r\n1 10 1\r\n1 5 1\r\n6 1 1\r\n",
            "10 20\r\n3 8 41\r\n1 2 21\r\n9 1 31\r\n1 3 53\r\n5 9 67\r\n10 1 8\r\n6 1 16\r\n5 2 21\r\n1 7 50\r\n5 4 38\r\n6 4 16\r\n4 8 16\r\n5 10 93\r\n9 10 126\r\n8 9 16\r\n4 1 38\r\n5 7 50\r\n3 9 12\r\n1 5 10\r\n5 8 41\r\n",
            "2 1\r\n1 2 1\r\n",
            "2 1\r\n2 1 1\r\n",
            "3 2\r\n1 2 1\r\n2 3 1\r\n",
            "4 4\r\n4 3 5000\r\n1 2 10000\r\n3 1 5000\r\n4 2 10000\r\n",
            "3 3\r\n3 1 10000\r\n2 1 10000\r\n3 2 10000\r\n",
            "3 3\r\n3 2 10000\r\n2 1 10000\r\n3 1 10000\r\n",
            "10 17\r\n9 1 8\r\n7 10 1\r\n5 4 4\r\n1 10 1\r\n3 10 1\r\n10 5 1\r\n6 3 6\r\n10 4 1\r\n4 6 5\r\n7 5 3\r\n2 10 1\r\n9 3 7\r\n9 10 1\r\n8 10 1\r\n10 6 1\r\n2 7 2\r\n2 8 1\r\n",
            "5 6\r\n1 3 10\r\n2 1 10\r\n3 5 10\r\n1 4 10\r\n2 5 10\r\n4 5 10\r\n",
            "5 6\r\n2 1 8\r\n5 2 8\r\n5 3 4\r\n4 1 9\r\n3 1 4\r\n5 4 9\r\n",
            "10 23\r\n10 5 94\r\n6 9 20\r\n10 2 79\r\n3 9 63\r\n1 6 80\r\n7 8 21\r\n3 5 6\r\n3 1 94\r\n2 5 21\r\n1 2 100\r\n1 7 79\r\n6 10 59\r\n8 1 60\r\n10 3 37\r\n9 1 37\r\n4 8 40\r\n7 10 100\r\n6 4 41\r\n5 1 79\r\n8 10 79\r\n9 10 80\r\n10 4 60\r\n4 1 59\r\n",
            "9 9\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n6 7 1\r\n7 9 1\r\n8 9 1\r\n1 8 1\r\n",
            "6 6\r\n1 2 1\r\n2 6 1\r\n1 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n"
        ],
        "answers": [
            "1\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n1\r\n0\r\n",
            "1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n0\r\n",
            "1\r\n0\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n",
            "0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n",
            "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
        ],
        "input_output": {
            "inputs": [
                "3 3\r\n3 2 10\r\n1 2 10\r\n3 1 5\r\n",
                "4 5\r\n1 2 10\r\n1 3 10\r\n2 3 5\r\n4 2 15\r\n3 4 5\r\n",
                "10 17\r\n8 1 1\r\n4 8 2\r\n7 10 8\r\n1 4 1\r\n5 4 3\r\n6 9 6\r\n3 5 4\r\n1 9 1\r\n3 9 5\r\n7 1 1\r\n1 2 1\r\n1 3 1\r\n6 7 7\r\n8 2 1\r\n1 10 1\r\n1 5 1\r\n6 1 1\r\n",
                "10 20\r\n3 8 41\r\n1 2 21\r\n9 1 31\r\n1 3 53\r\n5 9 67\r\n10 1 8\r\n6 1 16\r\n5 2 21\r\n1 7 50\r\n5 4 38\r\n6 4 16\r\n4 8 16\r\n5 10 93\r\n9 10 126\r\n8 9 16\r\n4 1 38\r\n5 7 50\r\n3 9 12\r\n1 5 10\r\n5 8 41\r\n",
                "2 1\r\n1 2 1\r\n",
                "2 1\r\n2 1 1\r\n",
                "3 2\r\n1 2 1\r\n2 3 1\r\n",
                "4 4\r\n4 3 5000\r\n1 2 10000\r\n3 1 5000\r\n4 2 10000\r\n",
                "3 3\r\n3 1 10000\r\n2 1 10000\r\n3 2 10000\r\n",
                "3 3\r\n3 2 10000\r\n2 1 10000\r\n3 1 10000\r\n",
                "10 17\r\n9 1 8\r\n7 10 1\r\n5 4 4\r\n1 10 1\r\n3 10 1\r\n10 5 1\r\n6 3 6\r\n10 4 1\r\n4 6 5\r\n7 5 3\r\n2 10 1\r\n9 3 7\r\n9 10 1\r\n8 10 1\r\n10 6 1\r\n2 7 2\r\n2 8 1\r\n",
                "5 6\r\n1 3 10\r\n2 1 10\r\n3 5 10\r\n1 4 10\r\n2 5 10\r\n4 5 10\r\n",
                "5 6\r\n2 1 8\r\n5 2 8\r\n5 3 4\r\n4 1 9\r\n3 1 4\r\n5 4 9\r\n",
                "10 23\r\n10 5 94\r\n6 9 20\r\n10 2 79\r\n3 9 63\r\n1 6 80\r\n7 8 21\r\n3 5 6\r\n3 1 94\r\n2 5 21\r\n1 2 100\r\n1 7 79\r\n6 10 59\r\n8 1 60\r\n10 3 37\r\n9 1 37\r\n4 8 40\r\n7 10 100\r\n6 4 41\r\n5 1 79\r\n8 10 79\r\n9 10 80\r\n10 4 60\r\n4 1 59\r\n",
                "9 9\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n6 7 1\r\n7 9 1\r\n8 9 1\r\n1 8 1\r\n",
                "6 6\r\n1 2 1\r\n2 6 1\r\n1 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n"
            ],
            "outputs": [
                "1\r\n0\r\n1\r\n",
                "0\r\n0\r\n1\r\n1\r\n0\r\n",
                "1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n",
                "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n",
                "0\r\n",
                "1\r\n",
                "0\r\n0\r\n",
                "1\r\n0\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n",
                "1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n",
                "0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        },
        "solution_id_0": 218917638,
        "solution_0": "from collections import deque\nimport sys\n(n, m) = map(int, sys.stdin.readline().split())\nu = [0] * m\nv = [0] * m\ncc = [0] * m\ndg = [0] * (n + 1)\nfdg = [0] * (n + 1)\ndir = [-1] * m\nAdj = [[] for _ in range(n + 1)]\nfor i in range(m):\n    (a, b, c) = map(int, sys.stdin.readline().split())\n    u[i] = a\n    v[i] = b\n    cc[i] = c\n    Adj[a].append((b, i))\n    Adj[b].append((a, i))\n    dg[a] += c\n    dg[b] += c\nQ = deque()\nQ.append(1)\nwhile Q:\n    z = Q.popleft()\n    for (s, ww) in Adj[z]:\n        if dir[ww] != -1:\n            continue\n        if z == u[ww]:\n            dir[ww] = 0\n        else:\n            dir[ww] = 1\n        fdg[s] += cc[ww]\n        if s != n and dg[s] - fdg[s] == fdg[s]:\n            Q.append(s)\nfor d in dir:\n    print(d)",
        "outputs_0": [
            "1\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n1\r\n0\r\n",
            "1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n0\r\n",
            "1\r\n0\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n",
            "0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n",
            "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
        ],
        "solution_id_1": 150071384,
        "solution_1": "import sys, collections\n(n, m) = list(map(int, sys.stdin.readline().strip().split()))\n(N, M) = (200005, 400005)\nx = [0 for _ in range(N)]\ninto = [0 for _ in range(N)]\nvis = [False for _ in range(N)]\nans = [0 for _ in range(N)]\nnexts = [0 for _ in range(M)]\ndests = [0 for _ in range(M)]\ncp = [0 for _ in range(M)]\nq = collections.deque()\ntotal = 1\n\ndef insertEdge(a, b, c):\n    global total\n    total += 1\n    nexts[total] = x[a]\n    dests[total] = b\n    x[a] = total\n    cp[total] = c\nfor i in range(1, m + 1):\n    (a, b, c) = list(map(int, sys.stdin.readline().strip().split()))\n    insertEdge(a, b, c)\n    insertEdge(b, a, c)\n    into[a] += c\n    into[b] += c\nfor i in range(2, n):\n    into[i] >>= 1\nvis[1] = True\ninto[1] = 0\nq.append(1)\nwhile q:\n    cur = q.popleft()\n    i = x[cur]\n    while i:\n        if not vis[dests[i]]:\n            into[dests[i]] -= cp[i]\n            ans[i >> 1] = i % 2\n            if into[dests[i]] == 0:\n                vis[dests[i]] = True\n                q.append(dests[i])\n        i = nexts[i]\nfor i in range(1, m + 1):\n    print(ans[i])",
        "outputs_1": [
            "1\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n1\r\n0\r\n",
            "1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n0\r\n",
            "1\r\n0\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n",
            "0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n",
            "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
        ],
        "solution_id_2": 218900495,
        "solution_2": "from collections import deque\nimport sys\n(n, m) = map(int, sys.stdin.readline().split())\nu = [0] * m\nv = [0] * m\ncc = [0] * m\ndg = [0] * (n + 1)\nfdg = [0] * (n + 1)\ndir = [-1] * m\nAdj = [[] for _ in range(n + 1)]\nfor i in range(m):\n    (a, b, c) = map(int, sys.stdin.readline().split())\n    u[i] = a\n    v[i] = b\n    cc[i] = c\n    Adj[a].append((b, i))\n    Adj[b].append((a, i))\n    dg[a] += c\n    dg[b] += c\nQ = deque()\nQ.append(1)\nwhile Q:\n    z = Q.popleft()\n    for (s, ww) in Adj[z]:\n        if dir[ww] != -1:\n            continue\n        if z == u[ww]:\n            dir[ww] = 0\n        else:\n            dir[ww] = 1\n        fdg[s] += cc[ww]\n        if s != n and dg[s] - fdg[s] == fdg[s]:\n            Q.append(s)\nfor d in dir:\n    print(d)",
        "outputs_2": [
            "1\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n1\r\n0\r\n",
            "1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n0\r\n",
            "1\r\n0\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n",
            "1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n",
            "0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n",
            "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
            "1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
            "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
        ],
        "unnorm_rating": 2053.3310233859147,
        "unnorm_rating_std": 248.97472692559347,
        "unnorm_rating_volatility": 0.06000132662631329,
        "reference_rating": 2100.0,
        "original_tags": [
            "dfs and similar",
            "sortings"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 808,
        "problem_index": "E",
        "rating": 0.5832326221313014,
        "rating_std": 0.12155715187837042,
        "rating_volatility": 2.083836889343493e-05,
        "rating_quantile": 0.8962547305232937,
        "tag": "Greedy",
        "detailed_tag": "ternary search",
        "problem_name": "Selling Souvenirs",
        "problem_main": "After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.",
        "problem_note": "",
        "input_spec": "The first line contains two integers n and m (1\u2009\u2264\u2009n\u2009\u2264\u2009100000, 1\u2009\u2264\u2009m\u2009\u2264\u2009300000) \u2014 the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1\u2009\u2264\u2009wi\u2009\u2264\u20093, 1\u2009\u2264\u2009ci\u2009\u2264\u2009109) \u2014 the weight and the cost of ith souvenir.",
        "output_spec": "Print one number \u2014 maximum possible total cost of souvenirs that Petya can carry to the market.",
        "sample_inputs": [
            "1 1\n2 1",
            "2 2\n1 3\n2 2",
            "4 3\n3 10\n2 7\n2 8\n1 1"
        ],
        "sample_outputs": [
            "0",
            "3",
            "10"
        ],
        "inputs": [
            "1 1\r\n2 1\r\n",
            "2 2\r\n1 3\r\n2 2\r\n",
            "4 3\r\n3 10\r\n2 7\r\n2 8\r\n1 1\r\n",
            "5 5\r\n3 5\r\n2 6\r\n3 2\r\n1 1\r\n1 6\r\n",
            "6 6\r\n1 6\r\n1 4\r\n1 8\r\n3 2\r\n3 2\r\n2 8\r\n",
            "6 12\r\n1 7\r\n1 10\r\n2 8\r\n1 2\r\n2 9\r\n3 5\r\n",
            "6 18\r\n3 3\r\n1 10\r\n2 10\r\n3 6\r\n1 3\r\n2 3\r\n",
            "20 25\r\n2 13\r\n3 11\r\n1 32\r\n1 43\r\n3 85\r\n1 14\r\n2 57\r\n1 54\r\n1 38\r\n2 96\r\n2 89\r\n3 64\r\n1 79\r\n2 73\r\n1 73\r\n2 34\r\n1 52\r\n1 79\r\n1 42\r\n3 34\r\n",
            "40 45\r\n2 82\r\n2 70\r\n2 48\r\n3 50\r\n2 15\r\n1 23\r\n1 80\r\n2 46\r\n1 20\r\n3 8\r\n3 81\r\n2 27\r\n1 59\r\n1 15\r\n3 95\r\n2 82\r\n2 40\r\n2 9\r\n2 61\r\n1 49\r\n2 5\r\n2 82\r\n1 55\r\n2 11\r\n1 26\r\n1 33\r\n1 2\r\n1 7\r\n3 57\r\n2 29\r\n1 59\r\n2 50\r\n3 63\r\n1 40\r\n1 99\r\n2 91\r\n2 39\r\n3 50\r\n1 75\r\n3 77\r\n",
            "4 28\r\n2 2\r\n3 1\r\n3 10\r\n1 9\r\n",
            "10 5\r\n1 9\r\n1 8\r\n2 10\r\n3 4\r\n3 1\r\n2 2\r\n3 6\r\n1 1\r\n3 8\r\n2 2\r\n",
            "10 12\r\n3 7\r\n3 6\r\n3 8\r\n3 2\r\n1 9\r\n2 5\r\n2 1\r\n2 5\r\n2 10\r\n2 9\r\n",
            "1 29\r\n2 8\r\n",
            "10 2\r\n3 4\r\n3 5\r\n3 7\r\n1 10\r\n1 2\r\n1 2\r\n1 8\r\n3 2\r\n1 8\r\n3 3\r\n",
            "6 5\r\n3 1\r\n3 1\r\n1 2\r\n2 9\r\n3 10\r\n1 8\r\n",
            "4 2\r\n3 4\r\n3 8\r\n1 1\r\n1 4\r\n",
            "7 12\r\n2 10\r\n2 8\r\n2 1\r\n3 8\r\n3 8\r\n3 7\r\n1 7\r\n",
            "70 203\r\n1 105\r\n1 105\r\n1 105\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n",
            "10 6\r\n1 8\r\n1 10\r\n1 7\r\n2 9\r\n3 8\r\n1 8\r\n1 7\r\n1 4\r\n3 1\r\n3 8\r\n",
            "2 40\r\n1 10\r\n3 6\r\n",
            "7 6\r\n2 9\r\n3 10\r\n1 2\r\n2 6\r\n3 6\r\n2 1\r\n1 3\r\n",
            "2 4\r\n3 8\r\n1 6\r\n",
            "9 19\r\n2 5\r\n2 3\r\n3 9\r\n1 9\r\n3 8\r\n3 5\r\n3 4\r\n3 2\r\n3 6\r\n",
            "13 23\r\n3 17\r\n2 83\r\n1 81\r\n3 83\r\n3 59\r\n3 71\r\n2 61\r\n3 8\r\n3 64\r\n2 80\r\n3 47\r\n1 46\r\n1 82\r\n",
            "9 10\r\n3 6\r\n2 1\r\n2 4\r\n2 3\r\n3 6\r\n3 1\r\n1 8\r\n2 4\r\n3 3\r\n",
            "3 4\r\n2 10\r\n2 10\r\n3 15\r\n",
            "9 15\r\n3 8\r\n1 2\r\n2 5\r\n1 5\r\n3 3\r\n1 7\r\n1 7\r\n2 7\r\n2 9\r\n",
            "8 21\r\n2 6\r\n3 3\r\n3 7\r\n3 8\r\n3 8\r\n3 8\r\n2 6\r\n3 9\r\n",
            "6 7\r\n2 5\r\n2 4\r\n3 9\r\n3 2\r\n3 1\r\n3 8\r\n",
            "8 5\r\n3 9\r\n3 3\r\n1 4\r\n3 1\r\n2 5\r\n3 1\r\n3 6\r\n3 1\r\n",
            "1 1\r\n1 10\r\n",
            "1 2\r\n2 10\r\n",
            "5 9\r\n2 8\r\n3 7\r\n2 6\r\n1 4\r\n2 7\r\n",
            "4 4\r\n2 13\r\n2 15\r\n2 5\r\n1 9\r\n",
            "2 1\r\n1 5\r\n2 11\r\n",
            "8 6\r\n1 9\r\n1 5\r\n1 3\r\n1 10\r\n3 8\r\n1 6\r\n1 4\r\n1 2\r\n",
            "5 7\r\n1 8\r\n2 13\r\n2 13\r\n3 20\r\n3 14\r\n",
            "52 102\r\n3 199\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n",
            "3 4\r\n1 4\r\n2 10\r\n3 100\r\n",
            "61 120\r\n3 5\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n"
        ],
        "answers": [
            "0\r\n",
            "3\r\n",
            "10\r\n",
            "13\r\n",
            "26\r\n",
            "41\r\n",
            "35\r\n",
            "990\r\n",
            "1605\r\n",
            "22\r\n",
            "28\r\n",
            "46\r\n",
            "8\r\n",
            "18\r\n",
            "20\r\n",
            "5\r\n",
            "41\r\n",
            "20310\r\n",
            "44\r\n",
            "16\r\n",
            "22\r\n",
            "14\r\n",
            "46\r\n",
            "711\r\n",
            "25\r\n",
            "20\r\n",
            "51\r\n",
            "52\r\n",
            "18\r\n",
            "14\r\n",
            "10\r\n",
            "10\r\n",
            "28\r\n",
            "28\r\n",
            "5\r\n",
            "37\r\n",
            "46\r\n",
            "5100\r\n",
            "104\r\n",
            "180\r\n"
        ],
        "input_output": {
            "inputs": [
                "1 1\r\n2 1\r\n",
                "2 2\r\n1 3\r\n2 2\r\n",
                "4 3\r\n3 10\r\n2 7\r\n2 8\r\n1 1\r\n",
                "5 5\r\n3 5\r\n2 6\r\n3 2\r\n1 1\r\n1 6\r\n",
                "6 6\r\n1 6\r\n1 4\r\n1 8\r\n3 2\r\n3 2\r\n2 8\r\n",
                "6 12\r\n1 7\r\n1 10\r\n2 8\r\n1 2\r\n2 9\r\n3 5\r\n",
                "6 18\r\n3 3\r\n1 10\r\n2 10\r\n3 6\r\n1 3\r\n2 3\r\n",
                "20 25\r\n2 13\r\n3 11\r\n1 32\r\n1 43\r\n3 85\r\n1 14\r\n2 57\r\n1 54\r\n1 38\r\n2 96\r\n2 89\r\n3 64\r\n1 79\r\n2 73\r\n1 73\r\n2 34\r\n1 52\r\n1 79\r\n1 42\r\n3 34\r\n",
                "40 45\r\n2 82\r\n2 70\r\n2 48\r\n3 50\r\n2 15\r\n1 23\r\n1 80\r\n2 46\r\n1 20\r\n3 8\r\n3 81\r\n2 27\r\n1 59\r\n1 15\r\n3 95\r\n2 82\r\n2 40\r\n2 9\r\n2 61\r\n1 49\r\n2 5\r\n2 82\r\n1 55\r\n2 11\r\n1 26\r\n1 33\r\n1 2\r\n1 7\r\n3 57\r\n2 29\r\n1 59\r\n2 50\r\n3 63\r\n1 40\r\n1 99\r\n2 91\r\n2 39\r\n3 50\r\n1 75\r\n3 77\r\n",
                "4 28\r\n2 2\r\n3 1\r\n3 10\r\n1 9\r\n",
                "10 5\r\n1 9\r\n1 8\r\n2 10\r\n3 4\r\n3 1\r\n2 2\r\n3 6\r\n1 1\r\n3 8\r\n2 2\r\n",
                "10 12\r\n3 7\r\n3 6\r\n3 8\r\n3 2\r\n1 9\r\n2 5\r\n2 1\r\n2 5\r\n2 10\r\n2 9\r\n",
                "1 29\r\n2 8\r\n",
                "10 2\r\n3 4\r\n3 5\r\n3 7\r\n1 10\r\n1 2\r\n1 2\r\n1 8\r\n3 2\r\n1 8\r\n3 3\r\n",
                "6 5\r\n3 1\r\n3 1\r\n1 2\r\n2 9\r\n3 10\r\n1 8\r\n",
                "4 2\r\n3 4\r\n3 8\r\n1 1\r\n1 4\r\n",
                "7 12\r\n2 10\r\n2 8\r\n2 1\r\n3 8\r\n3 8\r\n3 7\r\n1 7\r\n",
                "70 203\r\n1 105\r\n1 105\r\n1 105\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n3 300\r\n",
                "10 6\r\n1 8\r\n1 10\r\n1 7\r\n2 9\r\n3 8\r\n1 8\r\n1 7\r\n1 4\r\n3 1\r\n3 8\r\n",
                "2 40\r\n1 10\r\n3 6\r\n",
                "7 6\r\n2 9\r\n3 10\r\n1 2\r\n2 6\r\n3 6\r\n2 1\r\n1 3\r\n",
                "2 4\r\n3 8\r\n1 6\r\n",
                "9 19\r\n2 5\r\n2 3\r\n3 9\r\n1 9\r\n3 8\r\n3 5\r\n3 4\r\n3 2\r\n3 6\r\n",
                "13 23\r\n3 17\r\n2 83\r\n1 81\r\n3 83\r\n3 59\r\n3 71\r\n2 61\r\n3 8\r\n3 64\r\n2 80\r\n3 47\r\n1 46\r\n1 82\r\n",
                "9 10\r\n3 6\r\n2 1\r\n2 4\r\n2 3\r\n3 6\r\n3 1\r\n1 8\r\n2 4\r\n3 3\r\n",
                "3 4\r\n2 10\r\n2 10\r\n3 15\r\n",
                "9 15\r\n3 8\r\n1 2\r\n2 5\r\n1 5\r\n3 3\r\n1 7\r\n1 7\r\n2 7\r\n2 9\r\n",
                "8 21\r\n2 6\r\n3 3\r\n3 7\r\n3 8\r\n3 8\r\n3 8\r\n2 6\r\n3 9\r\n",
                "6 7\r\n2 5\r\n2 4\r\n3 9\r\n3 2\r\n3 1\r\n3 8\r\n",
                "8 5\r\n3 9\r\n3 3\r\n1 4\r\n3 1\r\n2 5\r\n3 1\r\n3 6\r\n3 1\r\n",
                "1 1\r\n1 10\r\n",
                "1 2\r\n2 10\r\n",
                "5 9\r\n2 8\r\n3 7\r\n2 6\r\n1 4\r\n2 7\r\n",
                "4 4\r\n2 13\r\n2 15\r\n2 5\r\n1 9\r\n",
                "2 1\r\n1 5\r\n2 11\r\n",
                "8 6\r\n1 9\r\n1 5\r\n1 3\r\n1 10\r\n3 8\r\n1 6\r\n1 4\r\n1 2\r\n",
                "5 7\r\n1 8\r\n2 13\r\n2 13\r\n3 20\r\n3 14\r\n",
                "52 102\r\n3 199\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n",
                "3 4\r\n1 4\r\n2 10\r\n3 100\r\n",
                "61 120\r\n3 5\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n"
            ],
            "outputs": [
                "0\r\n",
                "3\r\n",
                "10\r\n",
                "13\r\n",
                "26\r\n",
                "41\r\n",
                "35\r\n",
                "990\r\n",
                "1605\r\n",
                "22\r\n",
                "28\r\n",
                "46\r\n",
                "8\r\n",
                "18\r\n",
                "20\r\n",
                "5\r\n",
                "41\r\n",
                "20310\r\n",
                "44\r\n",
                "16\r\n",
                "22\r\n",
                "14\r\n",
                "46\r\n",
                "711\r\n",
                "25\r\n",
                "20\r\n",
                "51\r\n",
                "52\r\n",
                "18\r\n",
                "14\r\n",
                "10\r\n",
                "10\r\n",
                "28\r\n",
                "28\r\n",
                "5\r\n",
                "37\r\n",
                "46\r\n",
                "5100\r\n",
                "104\r\n",
                "180\r\n"
            ]
        },
        "solution_id_0": 27227163,
        "solution_0": "def f():\n    (n, m) = map(int, input().split())\n    l = list((tuple(map(int, input().split())) for _ in range(n)))\n    l.sort(key=lambda e: (0, 6, 3, 2)[e[0]] * e[1], reverse=True)\n    (last, r) = ([0] * 4, 0)\n    for (i, (w, c)) in enumerate(l):\n        if m < w:\n            break\n        m -= w\n        r += c\n        last[w] = c\n    else:\n        return r\n    if not m:\n        return r\n    (res, tail) = ([r], (None, [], [], []))\n    for (w, c) in l[i:]:\n        tail[w].append(c)\n    for w in (1, 2, 3):\n        tail[w].append(0)\n    (_, t1, t2, t3) = tail\n    if m == 1:\n        res.append(r + t1[0])\n        if last[1]:\n            res.append(r - last[1] + t2[0])\n        if last[2]:\n            res.append(r - last[2] + t3[0])\n        if last[3]:\n            r -= last[3]\n            res += (r + sum(t1[:4]), r + sum(t1[:2]) + t2[0], r + sum(t2[:2]))\n    else:\n        res += (r + sum(t1[:2]), r + t2[0])\n        if last[1]:\n            res.append(r - last[1] + t3[0])\n        if last[2]:\n            res.append(r - last[2] + t3[0] + t1[0])\n    return max(res)\n\ndef main():\n    print(f())\nif __name__ == '__main__':\n    main()",
        "outputs_0": [
            "0\r\n",
            "3\r\n",
            "10\r\n",
            "13\r\n",
            "26\r\n",
            "41\r\n",
            "35\r\n",
            "990\r\n",
            "1605\r\n",
            "22\r\n",
            "28\r\n",
            "46\r\n",
            "8\r\n",
            "18\r\n",
            "20\r\n",
            "5\r\n",
            "41\r\n",
            "20310\r\n",
            "44\r\n",
            "16\r\n",
            "22\r\n",
            "14\r\n",
            "46\r\n",
            "711\r\n",
            "25\r\n",
            "20\r\n",
            "51\r\n",
            "52\r\n",
            "18\r\n",
            "14\r\n",
            "10\r\n",
            "10\r\n",
            "28\r\n",
            "28\r\n",
            "5\r\n",
            "37\r\n",
            "46\r\n",
            "5100\r\n",
            "104\r\n",
            "180\r\n"
        ],
        "solution_id_1": 68476659,
        "solution_1": "(n, m) = map(int, input().split())\na = [[], [], []]\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    a[x - 1].append(y)\nfor i in range(3):\n    a[i].sort(reverse=True)\na_one_odd = []\na_one_even = []\na_length = [len(a[i]) for i in range(3)]\nfor i in range(0, a_length[0] - 1, 2):\n    a_one_even.append(a[0][i] + a[0][i + 1])\nfor i in range(1, a_length[0] - 1, 2):\n    a_one_odd.append(a[0][i] + a[0][i + 1])\ndata_even = sorted(a_one_even + a[1], reverse=True)\ndata_odd = sorted(a_one_odd + a[1], reverse=True)\ndata_sum_even = [0]\nfor x in data_even:\n    data_sum_even.append(data_sum_even[-1] + x)\ndata_sum_odd = [0]\nfor x in data_odd:\n    data_sum_odd.append(data_sum_odd[-1] + x)\ndata_sum_three = [0]\nfor x in a[2]:\n    data_sum_three.append(data_sum_three[-1] + x)\nans = 0\nfor k in range(a_length[2] + 1):\n    if m - 3 * k < 0:\n        break\n    (now1, now2) = (data_sum_three[k], data_sum_three[k])\n    if (m - 3 * k) % 2 == 0:\n        now1 += data_sum_even[min((m - 3 * k) // 2, len(data_sum_even) - 1)]\n        if a_length[0] > 0 and m - 3 * k > 0:\n            now2 += a[0][0]\n        if (m - 3 * k) // 2 >= 1:\n            now2 += data_sum_odd[min((m - 3 * k) // 2 - 1, len(data_sum_odd) - 1)]\n    else:\n        now1 += data_sum_even[min((m - 3 * k) // 2, len(data_sum_even) - 1)]\n        if a_length[0] > 0 and m - 3 * k > 0:\n            now2 += a[0][0]\n        now2 += data_sum_odd[min((m - 3 * k - 1) // 2, len(data_sum_odd) - 1)]\n    ans = max(ans, now1, now2)\nprint(ans)",
        "outputs_1": [
            "0\r\n",
            "3\r\n",
            "10\r\n",
            "13\r\n",
            "26\r\n",
            "41\r\n",
            "35\r\n",
            "990\r\n",
            "1605\r\n",
            "22\r\n",
            "28\r\n",
            "46\r\n",
            "8\r\n",
            "18\r\n",
            "20\r\n",
            "5\r\n",
            "41\r\n",
            "20310\r\n",
            "44\r\n",
            "16\r\n",
            "22\r\n",
            "14\r\n",
            "46\r\n",
            "711\r\n",
            "25\r\n",
            "20\r\n",
            "51\r\n",
            "52\r\n",
            "18\r\n",
            "14\r\n",
            "10\r\n",
            "10\r\n",
            "28\r\n",
            "28\r\n",
            "5\r\n",
            "37\r\n",
            "46\r\n",
            "5100\r\n",
            "104\r\n",
            "180\r\n"
        ],
        "solution_id_2": 27222004,
        "solution_2": "(n, m) = map(int, input().split())\nd = [[] for i in range(3)]\nres_odd = 0\nres_even = 0\nfor i in range(n):\n    (t1, t2) = map(int, input().split())\n    d[t1 - 1].append(t2)\nd[0].sort()\nd[2].sort(reverse=True)\nc = d[1].copy()\nif d[0]:\n    i = len(d[0]) - 2\n    while i >= 1:\n        c.append(d[0][i] + d[0][i - 1])\n        i -= 2\n    c.sort(reverse=True)\n    pref = [0 for i in range(len(c) + 1)]\n    pref[0] = 0\n    for i in range(1, len(c) + 1):\n        pref[i] = pref[i - 1] + c[i - 1]\n    p = 0\n    for i in range(min(len(d[2]), (m - 1) // 3) + 1):\n        if i != 0:\n            p += d[2][i - 1]\n        res_odd = max(res_odd, d[0][-1] + p + pref[min(max(m - i * 3 - 1, 0) // 2, len(pref) - 1)])\ni = len(d[0]) - 1\nwhile i >= 1:\n    d[1].append(d[0][i] + d[0][i - 1])\n    i -= 2\nd[1].sort(reverse=True)\npref = [0 for i in range(len(d[1]) + 1)]\npref[0] = 0\nfor i in range(1, len(d[1]) + 1):\n    pref[i] = pref[i - 1] + d[1][i - 1]\np = 0\nfor i in range(min(len(d[2]), m // 3) + 1):\n    if i != 0:\n        p += d[2][i - 1]\n    res_even = max(res_even, p + pref[min(max(m - i * 3, 0) // 2, len(pref) - 1)])\nprint(max(res_odd, res_even))",
        "outputs_2": [
            "0\r\n",
            "3\r\n",
            "10\r\n",
            "13\r\n",
            "26\r\n",
            "41\r\n",
            "35\r\n",
            "990\r\n",
            "1605\r\n",
            "22\r\n",
            "28\r\n",
            "46\r\n",
            "8\r\n",
            "18\r\n",
            "20\r\n",
            "5\r\n",
            "41\r\n",
            "20310\r\n",
            "44\r\n",
            "16\r\n",
            "22\r\n",
            "14\r\n",
            "46\r\n",
            "711\r\n",
            "25\r\n",
            "20\r\n",
            "51\r\n",
            "52\r\n",
            "18\r\n",
            "14\r\n",
            "10\r\n",
            "10\r\n",
            "28\r\n",
            "28\r\n",
            "5\r\n",
            "37\r\n",
            "46\r\n",
            "5100\r\n",
            "104\r\n",
            "180\r\n"
        ],
        "unnorm_rating": 2300.0,
        "unnorm_rating_std": 350.0,
        "unnorm_rating_volatility": 0.06,
        "reference_rating": 2300.0,
        "original_tags": [
            "binary search",
            "dp",
            "greedy",
            "ternary search"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 409,
        "problem_index": "I",
        "rating": 0.6179632369536929,
        "rating_std": 0.12155715187837042,
        "rating_volatility": 2.083836889343493e-05,
        "rating_quantile": 0.9310974814041498,
        "tag": "Others",
        "detailed_tag": "*special",
        "problem_name": "Feed the Golorp",
        "problem_main": "Golorps are mysterious creatures who feed on variables. Golorp's name is a program in some programming language. Some scientists believe that this language is Befunge; golorps are tantalizingly silent.Variables consumed by golorps can take values from 0 to 9, inclusive. For each golorp its daily diet is defined by its name. Some golorps are so picky that they can't be fed at all. Besides, all golorps are very health-conscious and try to eat as little as possible. Given a choice of several valid sequences of variable values, each golorp will choose lexicographically smallest one.For the purposes of this problem you can assume that a golorp consists of jaws and a stomach. The number of variables necessary to feed a golorp is defined by the shape of its jaws. Variables can get to the stomach only via the jaws.A hungry golorp is visiting you. You know its name; feed it or figure out that it's impossible.",
        "problem_note": "",
        "input_spec": "The input is a single string (between 13 and 1024 characters long) \u2014 the name of the visiting golorp. All names are similar and will resemble the ones given in the samples. The name is guaranteed to be valid.",
        "output_spec": "Output lexicographically smallest sequence of variable values fit for feeding this golorp. Values should be listed in the order in which they get into the jaws. If the golorp is impossible to feed, output \"false\".",
        "sample_inputs": [
            "?(_-_/___*__):-___>__.",
            "?(__-_+_/_____):-__>__,_____<__.",
            "?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.",
            "?(__+___+__-___):-___>__."
        ],
        "sample_outputs": [
            "0010",
            "false",
            "0250341",
            "0101"
        ],
        "inputs": [
            "?(_-_/___*__):-___>__.\r\n",
            "?(__-_+_/_____):-__>__,_____<__.\r\n",
            "?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\r\n",
            "?(__+___+__-___):-___>__.\r\n",
            "?(__*___+_-____):-___>__,____<__.\r\n",
            "?(__):-__>__.\r\n",
            "?(__):-__>__,__<__.\r\n",
            "?(__-__):-__>__,__<__.\r\n",
            "?(__+__+___):-___<__.\r\n",
            "?(_*__*___*____*_____*______*_______):-__<___,___<____,____<_____,_____<______,______<_______.\r\n",
            "?(_*____*_______*__*_____*______*___):-__<___,___<____,____<_____,_____<______,______<_______.\r\n",
            "?(_*__*___*____*_____*______*_______*________*_________*__________*___________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\r\n",
            "?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\r\n",
            "?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________,___________<____________.\r\n",
            "?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\r\n",
            "?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__________<___________,______<_______,_______<________,________<_________,_________<__________,_____<______,____<_____,___<____,__<___.\r\n",
            "?(__________):-__________<__________.\r\n",
            "?(__________):-__________>__________.\r\n",
            "?(_____+___________+________+_________+_+______+___+__+_______+__________+____):-____<__________,________<_______,__________<_______,_____<___________,__<_,______<___________,___________<_________,_<_________,___<_______,_________<_______.\r\n",
            "?(_+__-___-____*_____):-__<___,__<____,___<_____,____<_____.\r\n"
        ],
        "answers": [
            "0010\r\n",
            "false\r\n",
            "0250341\r\n",
            "0101\r\n",
            "1200\r\n",
            "false\r\n",
            "false\r\n",
            "false\r\n",
            "110\r\n",
            "0012345\r\n",
            "0250341\r\n",
            "00123456789\r\n",
            "001234567890\r\n",
            "false\r\n",
            "098765432100\r\n",
            "098765432100\r\n",
            "false\r\n",
            "false\r\n",
            "01021000310\r\n",
            "00112\r\n"
        ],
        "input_output": {
            "inputs": [
                "?(_-_/___*__):-___>__.\r\n",
                "?(__-_+_/_____):-__>__,_____<__.\r\n",
                "?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\r\n",
                "?(__+___+__-___):-___>__.\r\n",
                "?(__*___+_-____):-___>__,____<__.\r\n",
                "?(__):-__>__.\r\n",
                "?(__):-__>__,__<__.\r\n",
                "?(__-__):-__>__,__<__.\r\n",
                "?(__+__+___):-___<__.\r\n",
                "?(_*__*___*____*_____*______*_______):-__<___,___<____,____<_____,_____<______,______<_______.\r\n",
                "?(_*____*_______*__*_____*______*___):-__<___,___<____,____<_____,_____<______,______<_______.\r\n",
                "?(_*__*___*____*_____*______*_______*________*_________*__________*___________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\r\n",
                "?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\r\n",
                "?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________,___________<____________.\r\n",
                "?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\r\n",
                "?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__________<___________,______<_______,_______<________,________<_________,_________<__________,_____<______,____<_____,___<____,__<___.\r\n",
                "?(__________):-__________<__________.\r\n",
                "?(__________):-__________>__________.\r\n",
                "?(_____+___________+________+_________+_+______+___+__+_______+__________+____):-____<__________,________<_______,__________<_______,_____<___________,__<_,______<___________,___________<_________,_<_________,___<_______,_________<_______.\r\n",
                "?(_+__-___-____*_____):-__<___,__<____,___<_____,____<_____.\r\n"
            ],
            "outputs": [
                "0010\r\n",
                "false\r\n",
                "0250341\r\n",
                "0101\r\n",
                "1200\r\n",
                "false\r\n",
                "false\r\n",
                "false\r\n",
                "110\r\n",
                "0012345\r\n",
                "0250341\r\n",
                "00123456789\r\n",
                "001234567890\r\n",
                "false\r\n",
                "098765432100\r\n",
                "098765432100\r\n",
                "false\r\n",
                "false\r\n",
                "01021000310\r\n",
                "00112\r\n"
            ]
        },
        "solution_id_0": 248878477,
        "solution_0": "import re\nline = input()\nline = line.rstrip('.')\n(a, b, c) = line.partition('):-')\nrels = c.split(',')\nrelations = set()\nfor rel in rels:\n    if '<' in rel:\n        (x, _, y) = rel.partition('<')\n        relations.add((len(x), len(y)))\n    else:\n        (x, _, y) = rel.partition('>')\n        relations.add((len(y), len(x)))\na = a.lstrip('?(')\nargs = re.split('(\\\\+|-|\\\\*|/)', a)\nargs = [len(args[i]) for i in range(0, len(args), 2)]\nedges = {k: [] for k in args}\nfor (j, i) in relations:\n    edges[i].append(j)\nseen = {k: 0 for k in args}\nq = []\n\ndef topsort(k):\n    if seen[k] == 1:\n        print('false')\n        quit()\n    seen[k] = 1\n    for other in edges[k]:\n        topsort(other)\n    q.append(k)\n    seen[k] = 2\n    return True\nfor k in args:\n    if seen[k] == 0:\n        topsort(k)\nvals = {}\nfor k in q:\n    others = edges[k]\n    maxval = -1\n    for other in others:\n        maxval = max(maxval, vals.get(other, -1))\n    vals[k] = maxval + 1\n    if vals[k] > 9:\n        print('false')\n        quit()\nfor k in args:\n    print(vals[k], end='')\nprint()",
        "outputs_0": [
            "0010\r\n",
            "false\r\n",
            "0250341\r\n",
            "0101\r\n",
            "1200\r\n",
            "false\r\n",
            "false\r\n",
            "false\r\n",
            "110\r\n",
            "0012345\r\n",
            "0250341\r\n",
            "00123456789\r\n",
            "001234567890\r\n",
            "false\r\n",
            "098765432100\r\n",
            "098765432100\r\n",
            "false\r\n",
            "false\r\n",
            "01021000310\r\n",
            "00112\r\n"
        ],
        "solution_id_1": 6221588,
        "solution_1": "\"\"\"\"\"\"\n\nclass InputHandlerObject(object):\n    inputs = []\n\n    def getInput(self, n=0):\n        res = ''\n        inputs = self.inputs\n        if not inputs:\n            inputs.extend(input().split(' '))\n        if n == 0:\n            res = inputs[:]\n            inputs[:] = []\n        while n > len(inputs):\n            inputs.extend(input().split(' '))\n        if n > 0:\n            res = inputs[:n]\n            inputs[:n] = []\n        return res\nInputHandler = InputHandlerObject()\ng = InputHandler.getInput\ngolorp = input().split(':-')\ngolorp[0] = golorp[0][2:]\nct = 0\njaws = []\nfor x in range(len(golorp[0])):\n    if golorp[0][x] == '_':\n        ct += 1\n    else:\n        jaws.append(ct)\n        ct = 0\nct = 0\nconditionsraw = []\nfor x in range(len(golorp[1])):\n    if golorp[1][x] == '_':\n        ct += 1\n    else:\n        conditionsraw.append(ct)\n        conditionsraw.append(golorp[1][x])\n        ct = 0\nconditions = []\nfor x in range(0, len(conditionsraw) // 4):\n    if conditionsraw[4 * x + 1] == '>':\n        conditions.append((conditionsraw[4 * x + 2], conditionsraw[4 * x]))\n    else:\n        conditions.append((conditionsraw[4 * x], conditionsraw[4 * x + 2]))\ninedges = [[-1]] * (max(jaws) + 1)\noutedges = [[-1]] * (max(jaws) + 1)\nval = [-1] * (max(jaws) + 1)\nprocessed = [False] * (max(jaws) + 1)\nfor x in jaws:\n    inedges[x] = []\n    outedges[x] = []\nfor (x, y) in conditions:\n    inedges[y].append(x)\n    outedges[x].append(y)\nfor i in range(10):\n    for x in jaws:\n        if not inedges[x] and (not processed[x]):\n            val[x] += 1\n            processed[x] = True\n            for y in outedges[x]:\n                val[y] = max(val[y], val[x])\n                inedges[y].remove(x)\nfailure = False\nfor x in jaws:\n    if not processed[x] or val[x] > 9:\n        failure = True\n        break\nif failure:\n    print('false')\nelse:\n    s = ''\n    for x in jaws:\n        s += str(val[x])\n    print(s)",
        "outputs_1": [
            "0010\r\n",
            "false\r\n",
            "0250341\r\n",
            "0101\r\n",
            "1200\r\n",
            "false\r\n",
            "false\r\n",
            "false\r\n",
            "110\r\n",
            "0012345\r\n",
            "0250341\r\n",
            "00123456789\r\n",
            "001234567890\r\n",
            "false\r\n",
            "098765432100\r\n",
            "098765432100\r\n",
            "false\r\n",
            "false\r\n",
            "01021000310\r\n",
            "00112\r\n"
        ],
        "solution_id_2": 53608267,
        "solution_2": "class InputHandlerObject(object):\n    inputs = []\n\n    def getInput(self, n=0):\n        res = ''\n        inputs = self.inputs\n        if not inputs:\n            inputs.extend(input().split(' '))\n        if n == 0:\n            res = inputs[:]\n            inputs[:] = []\n        while n > len(inputs):\n            inputs.extend(input().split(' '))\n        if n > 0:\n            res = inputs[:n]\n            inputs[:n] = []\n        return res\nInputHandler = InputHandlerObject()\ng = InputHandler.getInput\ngolorp = input().split(':-')\ngolorp[0] = golorp[0][2:]\nct = 0\njaws = []\nfor x in range(len(golorp[0])):\n    if golorp[0][x] == '_':\n        ct += 1\n    else:\n        jaws.append(ct)\n        ct = 0\nct = 0\nconditionsraw = []\nfor x in range(len(golorp[1])):\n    if golorp[1][x] == '_':\n        ct += 1\n    else:\n        conditionsraw.append(ct)\n        conditionsraw.append(golorp[1][x])\n        ct = 0\nconditions = []\nfor x in range(0, len(conditionsraw) // 4):\n    if conditionsraw[4 * x + 1] == '>':\n        conditions.append((conditionsraw[4 * x + 2], conditionsraw[4 * x]))\n    else:\n        conditions.append((conditionsraw[4 * x], conditionsraw[4 * x + 2]))\ninedges = [[-1]] * (max(jaws) + 1)\noutedges = [[-1]] * (max(jaws) + 1)\nval = [-1] * (max(jaws) + 1)\nprocessed = [False] * (max(jaws) + 1)\nfor x in jaws:\n    inedges[x] = []\n    outedges[x] = []\nfor (x, y) in conditions:\n    inedges[y].append(x)\n    outedges[x].append(y)\nfor i in range(10):\n    for x in jaws:\n        if not inedges[x] and (not processed[x]):\n            val[x] += 1\n            processed[x] = True\n            for y in outedges[x]:\n                val[y] = max(val[y], val[x])\n                inedges[y].remove(x)\nfailure = False\nfor x in jaws:\n    if not processed[x] or val[x] > 9:\n        failure = True\n        break\nif failure:\n    print('false')\nelse:\n    s = ''\n    for x in jaws:\n        s += str(val[x])\n    print(s)",
        "outputs_2": [
            "0010\r\n",
            "false\r\n",
            "0250341\r\n",
            "0101\r\n",
            "1200\r\n",
            "false\r\n",
            "false\r\n",
            "false\r\n",
            "110\r\n",
            "0012345\r\n",
            "0250341\r\n",
            "00123456789\r\n",
            "001234567890\r\n",
            "false\r\n",
            "098765432100\r\n",
            "098765432100\r\n",
            "false\r\n",
            "false\r\n",
            "01021000310\r\n",
            "00112\r\n"
        ],
        "unnorm_rating": 2400.0,
        "unnorm_rating_std": 350.0,
        "unnorm_rating_volatility": 0.06,
        "reference_rating": 2400.0,
        "original_tags": [
            "*special"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 151,
        "problem_index": "A",
        "rating": 0.05922865528899341,
        "rating_std": 0.03754742209346875,
        "rating_volatility": 2.0830641785644623e-05,
        "rating_quantile": 0.08638914263343338,
        "tag": "Implement",
        "detailed_tag": "math",
        "problem_name": "Soft Drinking",
        "problem_main": "This winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?",
        "problem_note": "A comment to the first sample: Overall the friends have 4\u2009*\u20095\u2009=\u200920 milliliters of the drink, it is enough to make 20\u2009/\u20093\u2009=\u20096 toasts. The limes are enough for 10\u2009*\u20098\u2009=\u200980 toasts and the salt is enough for 100\u2009/\u20091\u2009=\u2009100 toasts. However, there are 3 friends in the group, so the answer is min(6,\u200980,\u2009100)\u2009/\u20093\u2009=\u20092.",
        "input_spec": "The first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.",
        "output_spec": "Print a single integer \u2014 the number of toasts each friend can make.",
        "sample_inputs": [
            "3 4 5 10 8 100 3 1",
            "5 100 10 1 19 90 4 3",
            "10 1000 1000 25 23 1 50 1"
        ],
        "sample_outputs": [
            "2",
            "3",
            "0"
        ],
        "inputs": [
            "3 4 5 10 8 100 3 1\r\n",
            "5 100 10 1 19 90 4 3\r\n",
            "10 1000 1000 25 23 1 50 1\r\n",
            "1 7 4 5 5 8 3 2\r\n",
            "2 3 3 5 5 10 1 3\r\n",
            "2 6 4 5 6 5 1 3\r\n",
            "1 7 3 5 3 6 2 1\r\n",
            "2 4 5 4 5 7 3 2\r\n",
            "2 3 6 5 7 8 2 1\r\n",
            "1 4 5 5 3 10 3 1\r\n",
            "1 4 6 7 3 5 1 3\r\n",
            "1 6 5 5 5 8 3 1\r\n",
            "1 7 5 3 3 9 2 1\r\n",
            "3 5 3 7 6 10 3 1\r\n",
            "3 6 3 5 3 6 3 1\r\n",
            "1 7 5 5 5 5 2 2\r\n",
            "2 5 3 5 6 9 2 1\r\n",
            "3 4 3 5 3 6 2 1\r\n",
            "1 5 5 4 7 6 3 1\r\n",
            "2 3 7 6 5 9 3 1\r\n",
            "2 6 5 3 3 8 1 1\r\n",
            "2 4 7 3 4 10 2 1\r\n",
            "1 1000 1000 1000 1000 1000 1 1\r\n",
            "17 1000 1000 1000 1000 1000 3 7\r\n",
            "115 1000 1000 1000 1000 1000 17 15\r\n",
            "1 587 981 1 2 1 1 1\r\n",
            "1 1 2 1 2 2 1 1\r\n"
        ],
        "answers": [
            "2\r\n",
            "3\r\n",
            "0\r\n",
            "4\r\n",
            "1\r\n",
            "0\r\n",
            "6\r\n",
            "1\r\n",
            "4\r\n",
            "6\r\n",
            "1\r\n",
            "8\r\n",
            "9\r\n",
            "1\r\n",
            "2\r\n",
            "2\r\n",
            "3\r\n",
            "2\r\n",
            "6\r\n",
            "3\r\n",
            "4\r\n",
            "5\r\n",
            "1000\r\n",
            "8\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n"
        ],
        "input_output": {
            "inputs": [
                "3 4 5 10 8 100 3 1\r\n",
                "5 100 10 1 19 90 4 3\r\n",
                "10 1000 1000 25 23 1 50 1\r\n",
                "1 7 4 5 5 8 3 2\r\n",
                "2 3 3 5 5 10 1 3\r\n",
                "2 6 4 5 6 5 1 3\r\n",
                "1 7 3 5 3 6 2 1\r\n",
                "2 4 5 4 5 7 3 2\r\n",
                "2 3 6 5 7 8 2 1\r\n",
                "1 4 5 5 3 10 3 1\r\n",
                "1 4 6 7 3 5 1 3\r\n",
                "1 6 5 5 5 8 3 1\r\n",
                "1 7 5 3 3 9 2 1\r\n",
                "3 5 3 7 6 10 3 1\r\n",
                "3 6 3 5 3 6 3 1\r\n",
                "1 7 5 5 5 5 2 2\r\n",
                "2 5 3 5 6 9 2 1\r\n",
                "3 4 3 5 3 6 2 1\r\n",
                "1 5 5 4 7 6 3 1\r\n",
                "2 3 7 6 5 9 3 1\r\n",
                "2 6 5 3 3 8 1 1\r\n",
                "2 4 7 3 4 10 2 1\r\n",
                "1 1000 1000 1000 1000 1000 1 1\r\n",
                "17 1000 1000 1000 1000 1000 3 7\r\n",
                "115 1000 1000 1000 1000 1000 17 15\r\n",
                "1 587 981 1 2 1 1 1\r\n",
                "1 1 2 1 2 2 1 1\r\n"
            ],
            "outputs": [
                "2\r\n",
                "3\r\n",
                "0\r\n",
                "4\r\n",
                "1\r\n",
                "0\r\n",
                "6\r\n",
                "1\r\n",
                "4\r\n",
                "6\r\n",
                "1\r\n",
                "8\r\n",
                "9\r\n",
                "1\r\n",
                "2\r\n",
                "2\r\n",
                "3\r\n",
                "2\r\n",
                "6\r\n",
                "3\r\n",
                "4\r\n",
                "5\r\n",
                "1000\r\n",
                "8\r\n",
                "0\r\n",
                "1\r\n",
                "2\r\n"
            ]
        },
        "solution_id_0": 254106773,
        "solution_0": "l = list(map(lambda x: int(x), input().split()))\nn = l[0]\ntotaldrink = l[1] * l[2]\ntotalslices = l[3] * l[4]\ntotalsalt = l[5]\neachmil = l[6]\neachsalt = l[7]\nm = min(totaldrink // eachmil, totalslices // 1, totalsalt // eachsalt) // n\nprint(int(m))",
        "outputs_0": [
            "2\r\n",
            "3\r\n",
            "0\r\n",
            "4\r\n",
            "1\r\n",
            "0\r\n",
            "6\r\n",
            "1\r\n",
            "4\r\n",
            "6\r\n",
            "1\r\n",
            "8\r\n",
            "9\r\n",
            "1\r\n",
            "2\r\n",
            "2\r\n",
            "3\r\n",
            "2\r\n",
            "6\r\n",
            "3\r\n",
            "4\r\n",
            "5\r\n",
            "1000\r\n",
            "8\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n"
        ],
        "solution_id_1": 253475077,
        "solution_1": "(n, k, l, c, d, p, a, b) = map(int, input().split())\nprint(min(k * l // a, c * d, p // b) // n)",
        "outputs_1": [
            "2\r\n",
            "3\r\n",
            "0\r\n",
            "4\r\n",
            "1\r\n",
            "0\r\n",
            "6\r\n",
            "1\r\n",
            "4\r\n",
            "6\r\n",
            "1\r\n",
            "8\r\n",
            "9\r\n",
            "1\r\n",
            "2\r\n",
            "2\r\n",
            "3\r\n",
            "2\r\n",
            "6\r\n",
            "3\r\n",
            "4\r\n",
            "5\r\n",
            "1000\r\n",
            "8\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n"
        ],
        "solution_id_2": 253198428,
        "solution_2": "(n, k, l, c, d, p, nl, np) = map(int, input().split())\nprint(min(k * l // (n * nl), c * d // n, p // (n * np)))",
        "outputs_2": [
            "2\r\n",
            "3\r\n",
            "0\r\n",
            "4\r\n",
            "1\r\n",
            "0\r\n",
            "6\r\n",
            "1\r\n",
            "4\r\n",
            "6\r\n",
            "1\r\n",
            "8\r\n",
            "9\r\n",
            "1\r\n",
            "2\r\n",
            "2\r\n",
            "3\r\n",
            "2\r\n",
            "6\r\n",
            "3\r\n",
            "4\r\n",
            "5\r\n",
            "1000\r\n",
            "8\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n"
        ],
        "unnorm_rating": 791.2332548041397,
        "unnorm_rating_std": 108.11044459040542,
        "unnorm_rating_volatility": 0.05997775130722614,
        "reference_rating": 800.0,
        "original_tags": [
            "implementation",
            "math"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 339,
        "problem_index": "B",
        "rating": 0.11011759055765402,
        "rating_std": 0.04496022842238483,
        "rating_volatility": 2.0825593264922792e-05,
        "rating_quantile": 0.15659663317238678,
        "tag": "Implement",
        "detailed_tag": "implementation",
        "problem_name": "Xenia and Ringroad",
        "problem_main": "Xenia lives in a city that has n houses built along the main ringroad. The ringroad houses are numbered 1 through n in the clockwise order. The ringroad traffic is one way and also is clockwise.Xenia has recently moved into the ringroad house number 1. As a result, she's got m things to do. In order to complete the i-th task, she needs to be in the house number ai and complete all tasks with numbers less than i. Initially, Xenia is in the house number 1, find the minimum time she needs to complete all her tasks if moving from a house to a neighboring one along the ringroad takes one unit of time.",
        "problem_note": "In the first test example the sequence of Xenia's moves along the ringroad looks as follows: 1\u2009\u2192\u20092\u2009\u2192\u20093\u2009\u2192\u20094\u2009\u2192\u20091\u2009\u2192\u20092\u2009\u2192\u20093. This is optimal sequence. So, she needs 6 time units.",
        "input_spec": "The first line contains two integers n and m (2\u2009\u2264\u2009n\u2009\u2264\u2009105,\u20091\u2009\u2264\u2009m\u2009\u2264\u2009105). The second line contains m integers a1,\u2009a2,\u2009...,\u2009am (1\u2009\u2264\u2009ai\u2009\u2264\u2009n). Note that Xenia can have multiple consecutive tasks in one house.",
        "output_spec": "Print a single integer \u2014 the time Xenia needs to complete all tasks.Please, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.",
        "sample_inputs": [
            "4 3\n3 2 3",
            "4 3\n2 3 3"
        ],
        "sample_outputs": [
            "6",
            "2"
        ],
        "inputs": [
            "4 3\r\n3 2 3\r\n",
            "4 3\r\n2 3 3\r\n",
            "2 2\r\n1 1\r\n",
            "2 2\r\n1 2\r\n",
            "100 100\r\n56 46 1 47 5 86 45 35 81 1 31 70 67 70 62 99 100 47 44 33 78 35 32 37 92 12 95 18 3 22 54 24 22 90 25 22 78 88 51 92 46 84 15 29 28 40 8 5 93 68 77 47 45 76 85 39 84 94 52 69 93 64 31 60 99 17 51 59 62 37 46 47 86 60 88 14 68 22 47 93 50 10 55 87 46 50 43 63 44 43 61 65 91 43 33 97 67 57 66 70\r\n",
            "78 58\r\n23 14 73 45 47 14 27 59 65 39 15 23 5 1 50 37 3 51 46 69 75 65 45 68 48 59 77 39 53 21 72 33 46 32 34 5 69 55 56 53 47 31 32 5 42 23 76 15 2 77 65 24 16 68 61 28 55 10\r\n",
            "14 54\r\n9 13 14 9 5 12 4 7 3 14 5 12 13 1 1 11 10 2 7 9 5 2 2 8 10 7 3 9 5 11 2 2 6 12 11 5 4 11 11 6 2 11 14 13 8 7 13 9 4 9 11 3 7 13\r\n",
            "100 100\r\n48 73 63 16 49 88 36 17 66 6 87 13 94 52 58 70 71 52 7 70 25 42 24 36 57 9 79 26 75 39 13 14 38 26 33 66 88 28 75 98 53 48 67 54 63 25 69 87 88 32 72 17 36 35 29 67 74 89 70 47 20 90 78 13 94 57 32 73 29 74 45 78 85 64 81 56 12 65 19 67 34 86 55 71 41 33 76 13 100 47 44 76 86 78 37 15 26 98 83 98\r\n",
            "99 100\r\n88 65 10 91 18 35 58 49 42 2 22 57 74 31 53 24 27 93 45 4 71 2 69 39 21 90 97 89 45 73 20 45 82 98 35 90 37 76 68 26 21 65 95 63 24 74 50 59 3 93 65 6 30 37 62 71 18 88 40 12 56 40 89 56 38 71 90 41 97 43 44 23 19 22 10 80 3 24 32 85 26 65 70 60 76 85 66 68 74 11 64 88 12 63 16 15 79 57 93 58\r\n",
            "65 100\r\n53 14 5 10 32 60 31 52 52 56 38 6 8 17 52 23 59 3 18 28 15 2 46 26 8 2 40 6 58 30 28 46 49 23 47 24 9 53 3 47 55 12 36 49 12 24 54 55 58 7 50 42 15 4 58 49 34 40 19 4 59 19 31 17 35 65 36 50 45 5 33 11 29 52 55 40 48 11 32 41 31 7 46 55 32 41 56 51 39 13 5 59 58 34 38 50 55 10 43 30\r\n",
            "10 100\r\n7 6 2 10 7 2 3 8 10 4 6 1 4 5 7 10 1 2 3 5 4 10 8 2 3 3 6 8 3 9 4 1 9 10 1 2 5 1 8 8 5 9 2 8 1 2 3 2 1 10 10 7 1 3 2 2 7 1 6 6 6 9 2 3 1 7 2 2 9 7 3 3 2 10 7 4 7 3 3 3 2 4 4 2 2 8 4 1 10 10 5 10 6 10 6 10 3 10 8 9\r\n",
            "2 100\r\n1 1 2 2 2 2 1 2 1 2 2 2 1 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 1 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 2 2 1 1 1 1 1 2 2 2 1 1 2 2 1 1 2 2 1 1 2 1 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 1 2\r\n",
            "67 100\r\n49 5 25 48 37 55 5 33 14 30 59 28 57 46 45 32 47 22 40 28 58 34 27 29 4 52 63 44 31 65 42 61 11 17 32 17 18 1 12 33 38 11 59 46 43 55 23 30 23 2 42 21 45 51 30 19 35 15 10 30 13 21 32 34 33 3 5 59 23 63 6 9 20 43 64 3 42 41 40 4 14 20 40 33 25 44 1 2 50 46 13 10 3 20 22 64 28 42 58 30\r\n",
            "100 100\r\n81 62 26 90 7 87 60 35 75 81 54 94 53 71 64 80 58 83 53 70 40 96 87 50 37 63 5 77 83 75 53 28 22 98 52 45 72 70 62 21 1 99 37 93 16 98 68 27 96 37 21 83 92 23 62 96 85 31 85 66 38 77 45 16 90 86 6 21 75 42 18 60 2 17 51 61 94 68 97 79 17 59 66 14 87 78 70 40 63 78 58 22 87 7 90 17 20 97 9 31\r\n",
            "2 1\r\n1\r\n",
            "2 10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
            "2 10\r\n1 1 1 2 2 2 1 1 1 2\r\n",
            "3 6\r\n1 2 3 3 2 1\r\n"
        ],
        "answers": [
            "6\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "4869\r\n",
            "2505\r\n",
            "362\r\n",
            "4997\r\n",
            "4809\r\n",
            "3149\r\n",
            "428\r\n",
            "47\r\n",
            "3245\r\n",
            "5530\r\n",
            "0\r\n",
            "0\r\n",
            "3\r\n",
            "6\r\n"
        ],
        "input_output": {
            "inputs": [
                "4 3\r\n3 2 3\r\n",
                "4 3\r\n2 3 3\r\n",
                "2 2\r\n1 1\r\n",
                "2 2\r\n1 2\r\n",
                "100 100\r\n56 46 1 47 5 86 45 35 81 1 31 70 67 70 62 99 100 47 44 33 78 35 32 37 92 12 95 18 3 22 54 24 22 90 25 22 78 88 51 92 46 84 15 29 28 40 8 5 93 68 77 47 45 76 85 39 84 94 52 69 93 64 31 60 99 17 51 59 62 37 46 47 86 60 88 14 68 22 47 93 50 10 55 87 46 50 43 63 44 43 61 65 91 43 33 97 67 57 66 70\r\n",
                "78 58\r\n23 14 73 45 47 14 27 59 65 39 15 23 5 1 50 37 3 51 46 69 75 65 45 68 48 59 77 39 53 21 72 33 46 32 34 5 69 55 56 53 47 31 32 5 42 23 76 15 2 77 65 24 16 68 61 28 55 10\r\n",
                "14 54\r\n9 13 14 9 5 12 4 7 3 14 5 12 13 1 1 11 10 2 7 9 5 2 2 8 10 7 3 9 5 11 2 2 6 12 11 5 4 11 11 6 2 11 14 13 8 7 13 9 4 9 11 3 7 13\r\n",
                "100 100\r\n48 73 63 16 49 88 36 17 66 6 87 13 94 52 58 70 71 52 7 70 25 42 24 36 57 9 79 26 75 39 13 14 38 26 33 66 88 28 75 98 53 48 67 54 63 25 69 87 88 32 72 17 36 35 29 67 74 89 70 47 20 90 78 13 94 57 32 73 29 74 45 78 85 64 81 56 12 65 19 67 34 86 55 71 41 33 76 13 100 47 44 76 86 78 37 15 26 98 83 98\r\n",
                "99 100\r\n88 65 10 91 18 35 58 49 42 2 22 57 74 31 53 24 27 93 45 4 71 2 69 39 21 90 97 89 45 73 20 45 82 98 35 90 37 76 68 26 21 65 95 63 24 74 50 59 3 93 65 6 30 37 62 71 18 88 40 12 56 40 89 56 38 71 90 41 97 43 44 23 19 22 10 80 3 24 32 85 26 65 70 60 76 85 66 68 74 11 64 88 12 63 16 15 79 57 93 58\r\n",
                "65 100\r\n53 14 5 10 32 60 31 52 52 56 38 6 8 17 52 23 59 3 18 28 15 2 46 26 8 2 40 6 58 30 28 46 49 23 47 24 9 53 3 47 55 12 36 49 12 24 54 55 58 7 50 42 15 4 58 49 34 40 19 4 59 19 31 17 35 65 36 50 45 5 33 11 29 52 55 40 48 11 32 41 31 7 46 55 32 41 56 51 39 13 5 59 58 34 38 50 55 10 43 30\r\n",
                "10 100\r\n7 6 2 10 7 2 3 8 10 4 6 1 4 5 7 10 1 2 3 5 4 10 8 2 3 3 6 8 3 9 4 1 9 10 1 2 5 1 8 8 5 9 2 8 1 2 3 2 1 10 10 7 1 3 2 2 7 1 6 6 6 9 2 3 1 7 2 2 9 7 3 3 2 10 7 4 7 3 3 3 2 4 4 2 2 8 4 1 10 10 5 10 6 10 6 10 3 10 8 9\r\n",
                "2 100\r\n1 1 2 2 2 2 1 2 1 2 2 2 1 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 1 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 2 2 1 1 1 1 1 2 2 2 1 1 2 2 1 1 2 2 1 1 2 1 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 1 2\r\n",
                "67 100\r\n49 5 25 48 37 55 5 33 14 30 59 28 57 46 45 32 47 22 40 28 58 34 27 29 4 52 63 44 31 65 42 61 11 17 32 17 18 1 12 33 38 11 59 46 43 55 23 30 23 2 42 21 45 51 30 19 35 15 10 30 13 21 32 34 33 3 5 59 23 63 6 9 20 43 64 3 42 41 40 4 14 20 40 33 25 44 1 2 50 46 13 10 3 20 22 64 28 42 58 30\r\n",
                "100 100\r\n81 62 26 90 7 87 60 35 75 81 54 94 53 71 64 80 58 83 53 70 40 96 87 50 37 63 5 77 83 75 53 28 22 98 52 45 72 70 62 21 1 99 37 93 16 98 68 27 96 37 21 83 92 23 62 96 85 31 85 66 38 77 45 16 90 86 6 21 75 42 18 60 2 17 51 61 94 68 97 79 17 59 66 14 87 78 70 40 63 78 58 22 87 7 90 17 20 97 9 31\r\n",
                "2 1\r\n1\r\n",
                "2 10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "2 10\r\n1 1 1 2 2 2 1 1 1 2\r\n",
                "3 6\r\n1 2 3 3 2 1\r\n"
            ],
            "outputs": [
                "6\r\n",
                "2\r\n",
                "0\r\n",
                "1\r\n",
                "4869\r\n",
                "2505\r\n",
                "362\r\n",
                "4997\r\n",
                "4809\r\n",
                "3149\r\n",
                "428\r\n",
                "47\r\n",
                "3245\r\n",
                "5530\r\n",
                "0\r\n",
                "0\r\n",
                "3\r\n",
                "6\r\n"
            ]
        },
        "solution_id_0": 241679635,
        "solution_0": "l = lambda : map(int, input().split())\n(n, m) = l()\ns = 0\np = 1\nfor v in l():\n    s += (v - p) % n\n    p = v\nprint(s)",
        "outputs_0": [
            "6\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "4869\r\n",
            "2505\r\n",
            "362\r\n",
            "4997\r\n",
            "4809\r\n",
            "3149\r\n",
            "428\r\n",
            "47\r\n",
            "3245\r\n",
            "5530\r\n",
            "0\r\n",
            "0\r\n",
            "3\r\n",
            "6\r\n"
        ],
        "solution_id_1": 240015491,
        "solution_1": "(n, m) = map(int, input().split())\ntasks = list(map(int, input().split()))\ntime_needed = 0\ncurrent_position = 1\nfor task in tasks:\n    if task >= current_position:\n        time_needed += task - current_position\n    else:\n        time_needed += n - current_position + task\n    current_position = task\nprint(time_needed)",
        "outputs_1": [
            "6\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "4869\r\n",
            "2505\r\n",
            "362\r\n",
            "4997\r\n",
            "4809\r\n",
            "3149\r\n",
            "428\r\n",
            "47\r\n",
            "3245\r\n",
            "5530\r\n",
            "0\r\n",
            "0\r\n",
            "3\r\n",
            "6\r\n"
        ],
        "solution_id_2": 239835077,
        "solution_2": "I = lambda : map(int, input().split())\n(n, m) = I()\ns = 0\np = 1\nfor v in I():\n    s += (v - p) % n\n    p = v\nprint(s)",
        "outputs_2": [
            "6\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "4869\r\n",
            "2505\r\n",
            "362\r\n",
            "4997\r\n",
            "4809\r\n",
            "3149\r\n",
            "428\r\n",
            "47\r\n",
            "3245\r\n",
            "5530\r\n",
            "0\r\n",
            "0\r\n",
            "3\r\n",
            "6\r\n"
        ],
        "unnorm_rating": 937.7579723448481,
        "unnorm_rating_std": 129.45416789281265,
        "unnorm_rating_volatility": 0.05996321508105321,
        "reference_rating": 1000.0,
        "original_tags": [
            "implementation"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 88,
        "problem_index": "A",
        "rating": 0.18994202666433527,
        "rating_std": 0.031173894095598457,
        "rating_volatility": 2.0826088387937276e-05,
        "rating_quantile": 0.26582278481012656,
        "tag": "Implement",
        "detailed_tag": "brute force",
        "problem_name": "Chord",
        "problem_main": "Vasya studies music. He has learned lots of interesting stuff. For example, he knows that there are 12 notes: C, C#, D, D#, E, F, F#, G, G#, A, B, H. He also knows that the notes are repeated cyclically: after H goes C again, and before C stands H. We will consider the C note in the row's beginning and the C note after the H similar and we will identify them with each other. The distance between the notes along the musical scale is measured in tones: between two consecutive notes there's exactly one semitone, that is, 0.5 tone. The distance is taken from the lowest tone to the uppest one, that is, the distance between C and E is 4 semitones and between E and C is 8 semitonesVasya also knows what a chord is. A chord is an unordered set of no less than three notes. However, for now Vasya only works with triads, that is with the chords that consist of exactly three notes. He can already distinguish between two types of triads \u2014 major and minor.Let's define a major triad. Let the triad consist of notes X, Y and Z. If we can order the notes so as the distance along the musical scale between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones, then the triad is major. The distance between X and Z, accordingly, equals 7 semitones.A minor triad is different in that the distance between X and Y should be 3 semitones and between Y and Z \u2014 4 semitones.For example, the triad \"C E G\" is major: between C and E are 4 semitones, and between E and G are 3 semitones. And the triplet \"C# B F\" is minor, because if we order the notes as \"B C# F\", than between B and C# will be 3 semitones, and between C# and F \u2014 4 semitones.Help Vasya classify the triad the teacher has given to him.",
        "problem_note": "",
        "input_spec": "The only line contains 3 space-separated notes in the above-given notation.",
        "output_spec": "Print \"major\" if the chord is major, \"minor\" if it is minor, and \"strange\" if the teacher gave Vasya some weird chord which is neither major nor minor. Vasya promises you that the answer will always be unambiguous. That is, there are no chords that are both major and minor simultaneously.",
        "sample_inputs": [
            "C E G",
            "C# B F",
            "A B H"
        ],
        "sample_outputs": [
            "major",
            "minor",
            "strange"
        ],
        "inputs": [
            "C E G\r\n",
            "C# B F\r\n",
            "A B H\r\n",
            "G H E\r\n",
            "D# B G\r\n",
            "D# B F#\r\n",
            "F H E\r\n",
            "B F# G\r\n",
            "F# H C\r\n",
            "C# F C\r\n",
            "G# C# E\r\n",
            "D# H G#\r\n",
            "C F A\r\n",
            "H E G#\r\n",
            "G D# B\r\n",
            "E C G\r\n",
            "G# C# F\r\n",
            "D# C G#\r\n",
            "C# F B\r\n",
            "D# C G\r\n",
            "A D F\r\n",
            "F# H D\r\n",
            "D A F\r\n",
            "D A F#\r\n",
            "A C F\r\n",
            "D F# H\r\n",
            "H G# D#\r\n",
            "A D F#\r\n",
            "D# H F#\r\n",
            "B G D#\r\n",
            "E A C#\r\n",
            "D H G\r\n",
            "H D F#\r\n",
            "G D# C\r\n",
            "H D G\r\n",
            "D# A E\r\n",
            "A F E\r\n",
            "C E F\r\n",
            "A B C\r\n",
            "E F D#\r\n",
            "C G# G#\r\n",
            "F D# G#\r\n",
            "E E G#\r\n",
            "A G H\r\n",
            "F E A\r\n",
            "D B E\r\n",
            "G# C# D\r\n",
            "D# D# F#\r\n",
            "H B G\r\n",
            "D C B\r\n",
            "D B B\r\n",
            "C A H\r\n",
            "F# H F#\r\n",
            "A F F#\r\n",
            "C D C\r\n",
            "G F# A\r\n",
            "C C# D\r\n",
            "C A E\r\n",
            "A H B\r\n",
            "B E F#\r\n",
            "G# G# A\r\n",
            "B C# C#\r\n",
            "C G D#\r\n",
            "C B D#\r\n",
            "F H F\r\n",
            "E G# C\r\n",
            "F# F# F#\r\n",
            "F C F\r\n",
            "A F D\r\n"
        ],
        "answers": [
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "minor\r\n",
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n"
        ],
        "input_output": {
            "inputs": [
                "C E G\r\n",
                "C# B F\r\n",
                "A B H\r\n",
                "G H E\r\n",
                "D# B G\r\n",
                "D# B F#\r\n",
                "F H E\r\n",
                "B F# G\r\n",
                "F# H C\r\n",
                "C# F C\r\n",
                "G# C# E\r\n",
                "D# H G#\r\n",
                "C F A\r\n",
                "H E G#\r\n",
                "G D# B\r\n",
                "E C G\r\n",
                "G# C# F\r\n",
                "D# C G#\r\n",
                "C# F B\r\n",
                "D# C G\r\n",
                "A D F\r\n",
                "F# H D\r\n",
                "D A F\r\n",
                "D A F#\r\n",
                "A C F\r\n",
                "D F# H\r\n",
                "H G# D#\r\n",
                "A D F#\r\n",
                "D# H F#\r\n",
                "B G D#\r\n",
                "E A C#\r\n",
                "D H G\r\n",
                "H D F#\r\n",
                "G D# C\r\n",
                "H D G\r\n",
                "D# A E\r\n",
                "A F E\r\n",
                "C E F\r\n",
                "A B C\r\n",
                "E F D#\r\n",
                "C G# G#\r\n",
                "F D# G#\r\n",
                "E E G#\r\n",
                "A G H\r\n",
                "F E A\r\n",
                "D B E\r\n",
                "G# C# D\r\n",
                "D# D# F#\r\n",
                "H B G\r\n",
                "D C B\r\n",
                "D B B\r\n",
                "C A H\r\n",
                "F# H F#\r\n",
                "A F F#\r\n",
                "C D C\r\n",
                "G F# A\r\n",
                "C C# D\r\n",
                "C A E\r\n",
                "A H B\r\n",
                "B E F#\r\n",
                "G# G# A\r\n",
                "B C# C#\r\n",
                "C G D#\r\n",
                "C B D#\r\n",
                "F H F\r\n",
                "E G# C\r\n",
                "F# F# F#\r\n",
                "F C F\r\n",
                "A F D\r\n"
            ],
            "outputs": [
                "major\r\n",
                "minor\r\n",
                "strange\r\n",
                "minor\r\n",
                "major\r\n",
                "minor\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "minor\r\n",
                "minor\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "minor\r\n",
                "minor\r\n",
                "minor\r\n",
                "minor\r\n",
                "minor\r\n",
                "major\r\n",
                "major\r\n",
                "minor\r\n",
                "minor\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "major\r\n",
                "minor\r\n",
                "minor\r\n",
                "major\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "minor\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "minor\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "strange\r\n",
                "minor\r\n"
            ]
        },
        "solution_id_0": 236469620,
        "solution_0": "c = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n(x, y, z) = sorted(map(c.index, input().split()))\nfor _ in ' ' * 3:\n    (a, b) = ((y + 12 - x) % 12, (z + 12 - y) % 12)\n    if [a, b] == [4, 3]:\n        print('major')\n        exit()\n    if [a, b] == [3, 4]:\n        print('minor')\n        exit()\n    (x, y, z) = (y, z, x)\nprint('strange')",
        "outputs_0": [
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "minor\r\n",
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n"
        ],
        "solution_id_1": 221711174,
        "solution_1": "z = []\nz[0:] = map(str, input().split())\nlst = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\nnewlist = [lst.index(z[0]), lst.index(z[1]), lst.index(z[2])]\nnewlist.sort()\ntwist = [newlist[2] - 12, newlist[0], newlist[1]]\ntwiry = [newlist[1] - 12, newlist[2] - 12, newlist[0]]\nif newlist[1] - newlist[0] == 4 and newlist[2] - newlist[1] == 3 or (twist[1] - twist[0] == 4 and twist[2] - twist[1] == 3) or (twiry[1] - twiry[0] == 4 and twiry[2] - twiry[1] == 3):\n    print('major')\nelif newlist[1] - newlist[0] == 3 and newlist[2] - newlist[1] == 4 or (twist[1] - twist[0] == 3 and twist[2] - twist[1] == 4) or (twiry[1] - twiry[0] == 3 and twiry[2] - twiry[1] == 4):\n    print('minor')\nelse:\n    print('strange')",
        "outputs_1": [
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "minor\r\n",
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n"
        ],
        "solution_id_2": 216395039,
        "solution_2": "A = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n(a, b, c) = sorted(map(A.index, input().split()))\n(x, y) = (b - a, c - b)\nif (x, y) in ((3, 5), (4, 3), (5, 4)):\n    print('major')\nelif (x, y) in ((3, 4), (4, 5), (5, 3)):\n    print('minor')\nelse:\n    print('strange')",
        "outputs_2": [
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "minor\r\n",
            "major\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "major\r\n",
            "minor\r\n",
            "minor\r\n",
            "major\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "strange\r\n",
            "minor\r\n"
        ],
        "unnorm_rating": 1167.5967947063134,
        "unnorm_rating_std": 89.75911959813622,
        "unnorm_rating_volatility": 0.059964640690755244,
        "reference_rating": 1200.0,
        "original_tags": [
            "brute force",
            "implementation"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 633,
        "problem_index": "B",
        "rating": 0.22256996243032118,
        "rating_std": 0.028163335711438007,
        "rating_volatility": 2.07988465686036e-05,
        "rating_quantile": 0.3151507242594284,
        "tag": "Math",
        "detailed_tag": "number theory",
        "problem_name": "A Trivial Problem",
        "problem_main": "Mr. Santa asks all the great programmers of the world to solve a trivial problem. He gives them an integer m and asks for the number of positive integers n, such that the factorial of n ends with exactly m zeroes. Are you among those great programmers who can solve this problem?",
        "problem_note": "The factorial of n is equal to the product of all integers from 1 to n inclusive, that is n!\u2009=\u20091\u00b72\u00b73\u00b7...\u00b7n.In the first sample, 5!\u2009=\u2009120, 6!\u2009=\u2009720, 7!\u2009=\u20095040, 8!\u2009=\u200940320 and 9!\u2009=\u2009362880.",
        "input_spec": "The only line of input contains an integer m (1\u2009\u2264\u2009m\u2009\u2264\u2009100\u2009000)\u00a0\u2014 the required number of trailing zeroes in factorial.",
        "output_spec": "First print k\u00a0\u2014 the number of values of n such that the factorial of n ends with m zeroes. Then print these k integers in increasing order.",
        "sample_inputs": [
            "1",
            "5"
        ],
        "sample_outputs": [
            "5\n5 6 7 8 9",
            "0"
        ],
        "inputs": [
            "1\r\n",
            "5\r\n",
            "2\r\n",
            "3\r\n",
            "7\r\n",
            "12\r\n",
            "15\r\n",
            "18\r\n",
            "38\r\n",
            "47\r\n",
            "58\r\n",
            "66\r\n",
            "70\r\n",
            "89\r\n",
            "417\r\n",
            "815\r\n",
            "394\r\n",
            "798\r\n",
            "507\r\n",
            "406\r\n",
            "570\r\n",
            "185\r\n",
            "765\r\n",
            "967\r\n",
            "112\r\n",
            "729\r\n",
            "4604\r\n",
            "8783\r\n",
            "1059\r\n",
            "6641\r\n",
            "9353\r\n",
            "1811\r\n",
            "2528\r\n",
            "8158\r\n",
            "3014\r\n",
            "7657\r\n",
            "4934\r\n",
            "9282\r\n",
            "2610\r\n",
            "2083\r\n",
            "26151\r\n",
            "64656\r\n",
            "46668\r\n",
            "95554\r\n",
            "37320\r\n",
            "52032\r\n",
            "11024\r\n",
            "63218\r\n",
            "40095\r\n",
            "42724\r\n",
            "24381\r\n",
            "73138\r\n",
            "93346\r\n",
            "18338\r\n",
            "42662\r\n",
            "81221\r\n",
            "100000\r\n",
            "99998\r\n",
            "30\r\n",
            "11\r\n",
            "780\r\n",
            "97656\r\n",
            "12499\r\n",
            "65\r\n",
            "41\r\n",
            "31\r\n",
            "86577\r\n"
        ],
        "answers": [
            "5\r\n5 6 7 8 9 ",
            "0",
            "5\r\n10 11 12 13 14 ",
            "5\r\n15 16 17 18 19 ",
            "5\r\n30 31 32 33 34 ",
            "5\r\n50 51 52 53 54 ",
            "5\r\n65 66 67 68 69 ",
            "5\r\n75 76 77 78 79 ",
            "5\r\n155 156 157 158 159 ",
            "5\r\n195 196 197 198 199 ",
            "5\r\n240 241 242 243 244 ",
            "5\r\n270 271 272 273 274 ",
            "5\r\n285 286 287 288 289 ",
            "5\r\n365 366 367 368 369 ",
            "5\r\n1675 1676 1677 1678 1679 ",
            "5\r\n3265 3266 3267 3268 3269 ",
            "5\r\n1585 1586 1587 1588 1589 ",
            "0",
            "5\r\n2035 2036 2037 2038 2039 ",
            "5\r\n1630 1631 1632 1633 1634 ",
            "5\r\n2290 2291 2292 2293 2294 ",
            "0",
            "0",
            "0",
            "5\r\n455 456 457 458 459 ",
            "5\r\n2925 2926 2927 2928 2929 ",
            "5\r\n18425 18426 18427 18428 18429 ",
            "5\r\n35140 35141 35142 35143 35144 ",
            "0",
            "5\r\n26575 26576 26577 26578 26579 ",
            "5\r\n37425 37426 37427 37428 37429 ",
            "5\r\n7250 7251 7252 7253 7254 ",
            "0",
            "5\r\n32640 32641 32642 32643 32644 ",
            "5\r\n12070 12071 12072 12073 12074 ",
            "5\r\n30640 30641 30642 30643 30644 ",
            "0",
            "5\r\n37140 37141 37142 37143 37144 ",
            "5\r\n10450 10451 10452 10453 10454 ",
            "5\r\n8345 8346 8347 8348 8349 ",
            "5\r\n104620 104621 104622 104623 104624 ",
            "5\r\n258640 258641 258642 258643 258644 ",
            "5\r\n186690 186691 186692 186693 186694 ",
            "5\r\n382235 382236 382237 382238 382239 ",
            "0",
            "5\r\n208140 208141 208142 208143 208144 ",
            "5\r\n44110 44111 44112 44113 44114 ",
            "5\r\n252885 252886 252887 252888 252889 ",
            "5\r\n160390 160391 160392 160393 160394 ",
            "5\r\n170910 170911 170912 170913 170914 ",
            "5\r\n97530 97531 97532 97533 97534 ",
            "5\r\n292570 292571 292572 292573 292574 ",
            "5\r\n373400 373401 373402 373403 373404 ",
            "5\r\n73370 73371 73372 73373 73374 ",
            "5\r\n170660 170661 170662 170663 170664 ",
            "5\r\n324900 324901 324902 324903 324904 ",
            "5\r\n400005 400006 400007 400008 400009 ",
            "0",
            "0",
            "0",
            "0",
            "5\r\n390625 390626 390627 390628 390629 ",
            "5\r\n50000 50001 50002 50003 50004 ",
            "5\r\n265 266 267 268 269 ",
            "5\r\n170 171 172 173 174 ",
            "5\r\n125 126 127 128 129 ",
            "0"
        ],
        "input_output": {
            "inputs": [
                "1\r\n",
                "5\r\n",
                "2\r\n",
                "3\r\n",
                "7\r\n",
                "12\r\n",
                "15\r\n",
                "18\r\n",
                "38\r\n",
                "47\r\n",
                "58\r\n",
                "66\r\n",
                "70\r\n",
                "89\r\n",
                "417\r\n",
                "815\r\n",
                "394\r\n",
                "798\r\n",
                "507\r\n",
                "406\r\n",
                "570\r\n",
                "185\r\n",
                "765\r\n",
                "967\r\n",
                "112\r\n",
                "729\r\n",
                "4604\r\n",
                "8783\r\n",
                "1059\r\n",
                "6641\r\n",
                "9353\r\n",
                "1811\r\n",
                "2528\r\n",
                "8158\r\n",
                "3014\r\n",
                "7657\r\n",
                "4934\r\n",
                "9282\r\n",
                "2610\r\n",
                "2083\r\n",
                "26151\r\n",
                "64656\r\n",
                "46668\r\n",
                "95554\r\n",
                "37320\r\n",
                "52032\r\n",
                "11024\r\n",
                "63218\r\n",
                "40095\r\n",
                "42724\r\n",
                "24381\r\n",
                "73138\r\n",
                "93346\r\n",
                "18338\r\n",
                "42662\r\n",
                "81221\r\n",
                "100000\r\n",
                "99998\r\n",
                "30\r\n",
                "11\r\n",
                "780\r\n",
                "97656\r\n",
                "12499\r\n",
                "65\r\n",
                "41\r\n",
                "31\r\n",
                "86577\r\n"
            ],
            "outputs": [
                "5\r\n5 6 7 8 9 ",
                "0",
                "5\r\n10 11 12 13 14 ",
                "5\r\n15 16 17 18 19 ",
                "5\r\n30 31 32 33 34 ",
                "5\r\n50 51 52 53 54 ",
                "5\r\n65 66 67 68 69 ",
                "5\r\n75 76 77 78 79 ",
                "5\r\n155 156 157 158 159 ",
                "5\r\n195 196 197 198 199 ",
                "5\r\n240 241 242 243 244 ",
                "5\r\n270 271 272 273 274 ",
                "5\r\n285 286 287 288 289 ",
                "5\r\n365 366 367 368 369 ",
                "5\r\n1675 1676 1677 1678 1679 ",
                "5\r\n3265 3266 3267 3268 3269 ",
                "5\r\n1585 1586 1587 1588 1589 ",
                "0",
                "5\r\n2035 2036 2037 2038 2039 ",
                "5\r\n1630 1631 1632 1633 1634 ",
                "5\r\n2290 2291 2292 2293 2294 ",
                "0",
                "0",
                "0",
                "5\r\n455 456 457 458 459 ",
                "5\r\n2925 2926 2927 2928 2929 ",
                "5\r\n18425 18426 18427 18428 18429 ",
                "5\r\n35140 35141 35142 35143 35144 ",
                "0",
                "5\r\n26575 26576 26577 26578 26579 ",
                "5\r\n37425 37426 37427 37428 37429 ",
                "5\r\n7250 7251 7252 7253 7254 ",
                "0",
                "5\r\n32640 32641 32642 32643 32644 ",
                "5\r\n12070 12071 12072 12073 12074 ",
                "5\r\n30640 30641 30642 30643 30644 ",
                "0",
                "5\r\n37140 37141 37142 37143 37144 ",
                "5\r\n10450 10451 10452 10453 10454 ",
                "5\r\n8345 8346 8347 8348 8349 ",
                "5\r\n104620 104621 104622 104623 104624 ",
                "5\r\n258640 258641 258642 258643 258644 ",
                "5\r\n186690 186691 186692 186693 186694 ",
                "5\r\n382235 382236 382237 382238 382239 ",
                "0",
                "5\r\n208140 208141 208142 208143 208144 ",
                "5\r\n44110 44111 44112 44113 44114 ",
                "5\r\n252885 252886 252887 252888 252889 ",
                "5\r\n160390 160391 160392 160393 160394 ",
                "5\r\n170910 170911 170912 170913 170914 ",
                "5\r\n97530 97531 97532 97533 97534 ",
                "5\r\n292570 292571 292572 292573 292574 ",
                "5\r\n373400 373401 373402 373403 373404 ",
                "5\r\n73370 73371 73372 73373 73374 ",
                "5\r\n170660 170661 170662 170663 170664 ",
                "5\r\n324900 324901 324902 324903 324904 ",
                "5\r\n400005 400006 400007 400008 400009 ",
                "0",
                "0",
                "0",
                "0",
                "5\r\n390625 390626 390627 390628 390629 ",
                "5\r\n50000 50001 50002 50003 50004 ",
                "5\r\n265 266 267 268 269 ",
                "5\r\n170 171 172 173 174 ",
                "5\r\n125 126 127 128 129 ",
                "0"
            ]
        },
        "solution_id_0": 18073308,
        "solution_0": "\"\"\"\"\"\"\nm = int(input())\nlo = 0\nhi = 100010\nwhile lo + 1 < hi:\n    mid = x = (lo + hi) // 2\n    k = 0\n    while x:\n        k += x\n        x //= 5\n    if k >= m:\n        hi = mid\n    else:\n        lo = mid\nk = 0\nx = hi\nwhile x:\n    k += x\n    x //= 5\nif k == m:\n    print(5)\n    for x in range(5):\n        (print(x + hi * 5),)\nelse:\n    print(0)",
        "outputs_0": [
            "5\r\n5\r\n6\r\n7\r\n8\r\n9\r\n",
            "0\r\n",
            "5\r\n10\r\n11\r\n12\r\n13\r\n14\r\n",
            "5\r\n15\r\n16\r\n17\r\n18\r\n19\r\n",
            "5\r\n30\r\n31\r\n32\r\n33\r\n34\r\n",
            "5\r\n50\r\n51\r\n52\r\n53\r\n54\r\n",
            "5\r\n65\r\n66\r\n67\r\n68\r\n69\r\n",
            "5\r\n75\r\n76\r\n77\r\n78\r\n79\r\n",
            "5\r\n155\r\n156\r\n157\r\n158\r\n159\r\n",
            "5\r\n195\r\n196\r\n197\r\n198\r\n199\r\n",
            "5\r\n240\r\n241\r\n242\r\n243\r\n244\r\n",
            "5\r\n270\r\n271\r\n272\r\n273\r\n274\r\n",
            "5\r\n285\r\n286\r\n287\r\n288\r\n289\r\n",
            "5\r\n365\r\n366\r\n367\r\n368\r\n369\r\n",
            "5\r\n1675\r\n1676\r\n1677\r\n1678\r\n1679\r\n",
            "5\r\n3265\r\n3266\r\n3267\r\n3268\r\n3269\r\n",
            "5\r\n1585\r\n1586\r\n1587\r\n1588\r\n1589\r\n",
            "0\r\n",
            "5\r\n2035\r\n2036\r\n2037\r\n2038\r\n2039\r\n",
            "5\r\n1630\r\n1631\r\n1632\r\n1633\r\n1634\r\n",
            "5\r\n2290\r\n2291\r\n2292\r\n2293\r\n2294\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "5\r\n455\r\n456\r\n457\r\n458\r\n459\r\n",
            "5\r\n2925\r\n2926\r\n2927\r\n2928\r\n2929\r\n",
            "5\r\n18425\r\n18426\r\n18427\r\n18428\r\n18429\r\n",
            "5\r\n35140\r\n35141\r\n35142\r\n35143\r\n35144\r\n",
            "0\r\n",
            "5\r\n26575\r\n26576\r\n26577\r\n26578\r\n26579\r\n",
            "5\r\n37425\r\n37426\r\n37427\r\n37428\r\n37429\r\n",
            "5\r\n7250\r\n7251\r\n7252\r\n7253\r\n7254\r\n",
            "0\r\n",
            "5\r\n32640\r\n32641\r\n32642\r\n32643\r\n32644\r\n",
            "5\r\n12070\r\n12071\r\n12072\r\n12073\r\n12074\r\n",
            "5\r\n30640\r\n30641\r\n30642\r\n30643\r\n30644\r\n",
            "0\r\n",
            "5\r\n37140\r\n37141\r\n37142\r\n37143\r\n37144\r\n",
            "5\r\n10450\r\n10451\r\n10452\r\n10453\r\n10454\r\n",
            "5\r\n8345\r\n8346\r\n8347\r\n8348\r\n8349\r\n",
            "5\r\n104620\r\n104621\r\n104622\r\n104623\r\n104624\r\n",
            "5\r\n258640\r\n258641\r\n258642\r\n258643\r\n258644\r\n",
            "5\r\n186690\r\n186691\r\n186692\r\n186693\r\n186694\r\n",
            "5\r\n382235\r\n382236\r\n382237\r\n382238\r\n382239\r\n",
            "0\r\n",
            "5\r\n208140\r\n208141\r\n208142\r\n208143\r\n208144\r\n",
            "5\r\n44110\r\n44111\r\n44112\r\n44113\r\n44114\r\n",
            "5\r\n252885\r\n252886\r\n252887\r\n252888\r\n252889\r\n",
            "5\r\n160390\r\n160391\r\n160392\r\n160393\r\n160394\r\n",
            "5\r\n170910\r\n170911\r\n170912\r\n170913\r\n170914\r\n",
            "5\r\n97530\r\n97531\r\n97532\r\n97533\r\n97534\r\n",
            "5\r\n292570\r\n292571\r\n292572\r\n292573\r\n292574\r\n",
            "5\r\n373400\r\n373401\r\n373402\r\n373403\r\n373404\r\n",
            "5\r\n73370\r\n73371\r\n73372\r\n73373\r\n73374\r\n",
            "5\r\n170660\r\n170661\r\n170662\r\n170663\r\n170664\r\n",
            "5\r\n324900\r\n324901\r\n324902\r\n324903\r\n324904\r\n",
            "5\r\n400005\r\n400006\r\n400007\r\n400008\r\n400009\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "5\r\n390625\r\n390626\r\n390627\r\n390628\r\n390629\r\n",
            "5\r\n50000\r\n50001\r\n50002\r\n50003\r\n50004\r\n",
            "5\r\n265\r\n266\r\n267\r\n268\r\n269\r\n",
            "5\r\n170\r\n171\r\n172\r\n173\r\n174\r\n",
            "5\r\n125\r\n126\r\n127\r\n128\r\n129\r\n",
            "0\r\n"
        ],
        "solution_id_1": 17382523,
        "solution_1": "l = m = int(input())\nk = 1\nwhile k <= m:\n    k = k * 5 + 1\nwhile k > 1:\n    m = l\n    l -= l // k\n    if (m + 1) % k == 0:\n        print('0')\n        exit()\n    k //= 5\ns = ' '.join([str(5 * l + i) for i in range(5)])\nprint('5')\nprint(s)",
        "outputs_1": [
            "5\r\n5 6 7 8 9\r\n",
            "0\r\n",
            "5\r\n10 11 12 13 14\r\n",
            "5\r\n15 16 17 18 19\r\n",
            "5\r\n30 31 32 33 34\r\n",
            "5\r\n50 51 52 53 54\r\n",
            "5\r\n65 66 67 68 69\r\n",
            "5\r\n75 76 77 78 79\r\n",
            "5\r\n155 156 157 158 159\r\n",
            "5\r\n195 196 197 198 199\r\n",
            "5\r\n240 241 242 243 244\r\n",
            "5\r\n270 271 272 273 274\r\n",
            "5\r\n285 286 287 288 289\r\n",
            "5\r\n365 366 367 368 369\r\n",
            "5\r\n1675 1676 1677 1678 1679\r\n",
            "5\r\n3265 3266 3267 3268 3269\r\n",
            "5\r\n1585 1586 1587 1588 1589\r\n",
            "0\r\n",
            "5\r\n2035 2036 2037 2038 2039\r\n",
            "5\r\n1630 1631 1632 1633 1634\r\n",
            "5\r\n2290 2291 2292 2293 2294\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "5\r\n455 456 457 458 459\r\n",
            "5\r\n2925 2926 2927 2928 2929\r\n",
            "5\r\n18425 18426 18427 18428 18429\r\n",
            "5\r\n35140 35141 35142 35143 35144\r\n",
            "0\r\n",
            "5\r\n26575 26576 26577 26578 26579\r\n",
            "5\r\n37425 37426 37427 37428 37429\r\n",
            "5\r\n7250 7251 7252 7253 7254\r\n",
            "0\r\n",
            "5\r\n32640 32641 32642 32643 32644\r\n",
            "5\r\n12070 12071 12072 12073 12074\r\n",
            "5\r\n30640 30641 30642 30643 30644\r\n",
            "0\r\n",
            "5\r\n37140 37141 37142 37143 37144\r\n",
            "5\r\n10450 10451 10452 10453 10454\r\n",
            "5\r\n8345 8346 8347 8348 8349\r\n",
            "5\r\n104620 104621 104622 104623 104624\r\n",
            "5\r\n258640 258641 258642 258643 258644\r\n",
            "5\r\n186690 186691 186692 186693 186694\r\n",
            "5\r\n382235 382236 382237 382238 382239\r\n",
            "0\r\n",
            "5\r\n208140 208141 208142 208143 208144\r\n",
            "5\r\n44110 44111 44112 44113 44114\r\n",
            "5\r\n252885 252886 252887 252888 252889\r\n",
            "5\r\n160390 160391 160392 160393 160394\r\n",
            "5\r\n170910 170911 170912 170913 170914\r\n",
            "5\r\n97530 97531 97532 97533 97534\r\n",
            "5\r\n292570 292571 292572 292573 292574\r\n",
            "5\r\n373400 373401 373402 373403 373404\r\n",
            "5\r\n73370 73371 73372 73373 73374\r\n",
            "5\r\n170660 170661 170662 170663 170664\r\n",
            "5\r\n324900 324901 324902 324903 324904\r\n",
            "5\r\n400005 400006 400007 400008 400009\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "5\r\n390625 390626 390627 390628 390629\r\n",
            "5\r\n50000 50001 50002 50003 50004\r\n",
            "5\r\n265 266 267 268 269\r\n",
            "5\r\n170 171 172 173 174\r\n",
            "5\r\n125 126 127 128 129\r\n",
            "0\r\n"
        ],
        "solution_id_2": 16714519,
        "solution_2": "def main():\n    n = int(input())\n    first = solver(n)\n    if first == None:\n        print(0)\n    else:\n        print(5)\n        for x in range(first, first + 5):\n            print(x)\n\ndef solver(n):\n    multiplier = 1\n    while trailingZeros(multiplier) <= n:\n        multiplier *= 5\n    lo = multiplier // 5\n    hi = multiplier\n    while lo < hi:\n        mid = (lo + hi) // 2\n        zeros = trailingZeros(mid)\n        if zeros < n:\n            lo = mid + 1\n        elif zeros >= n:\n            hi = mid\n    if trailingZeros(lo) != n:\n        return None\n    else:\n        return lo\n\ndef trailingZeros(n):\n    count = 0\n    fives = 5\n    while fives <= n:\n        count += n // fives\n        fives *= 5\n    return count\nmain()",
        "outputs_2": [
            "5\r\n5\r\n6\r\n7\r\n8\r\n9\r\n",
            "0\r\n",
            "5\r\n10\r\n11\r\n12\r\n13\r\n14\r\n",
            "5\r\n15\r\n16\r\n17\r\n18\r\n19\r\n",
            "5\r\n30\r\n31\r\n32\r\n33\r\n34\r\n",
            "5\r\n50\r\n51\r\n52\r\n53\r\n54\r\n",
            "5\r\n65\r\n66\r\n67\r\n68\r\n69\r\n",
            "5\r\n75\r\n76\r\n77\r\n78\r\n79\r\n",
            "5\r\n155\r\n156\r\n157\r\n158\r\n159\r\n",
            "5\r\n195\r\n196\r\n197\r\n198\r\n199\r\n",
            "5\r\n240\r\n241\r\n242\r\n243\r\n244\r\n",
            "5\r\n270\r\n271\r\n272\r\n273\r\n274\r\n",
            "5\r\n285\r\n286\r\n287\r\n288\r\n289\r\n",
            "5\r\n365\r\n366\r\n367\r\n368\r\n369\r\n",
            "5\r\n1675\r\n1676\r\n1677\r\n1678\r\n1679\r\n",
            "5\r\n3265\r\n3266\r\n3267\r\n3268\r\n3269\r\n",
            "5\r\n1585\r\n1586\r\n1587\r\n1588\r\n1589\r\n",
            "0\r\n",
            "5\r\n2035\r\n2036\r\n2037\r\n2038\r\n2039\r\n",
            "5\r\n1630\r\n1631\r\n1632\r\n1633\r\n1634\r\n",
            "5\r\n2290\r\n2291\r\n2292\r\n2293\r\n2294\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "5\r\n455\r\n456\r\n457\r\n458\r\n459\r\n",
            "5\r\n2925\r\n2926\r\n2927\r\n2928\r\n2929\r\n",
            "5\r\n18425\r\n18426\r\n18427\r\n18428\r\n18429\r\n",
            "5\r\n35140\r\n35141\r\n35142\r\n35143\r\n35144\r\n",
            "0\r\n",
            "5\r\n26575\r\n26576\r\n26577\r\n26578\r\n26579\r\n",
            "5\r\n37425\r\n37426\r\n37427\r\n37428\r\n37429\r\n",
            "5\r\n7250\r\n7251\r\n7252\r\n7253\r\n7254\r\n",
            "0\r\n",
            "5\r\n32640\r\n32641\r\n32642\r\n32643\r\n32644\r\n",
            "5\r\n12070\r\n12071\r\n12072\r\n12073\r\n12074\r\n",
            "5\r\n30640\r\n30641\r\n30642\r\n30643\r\n30644\r\n",
            "0\r\n",
            "5\r\n37140\r\n37141\r\n37142\r\n37143\r\n37144\r\n",
            "5\r\n10450\r\n10451\r\n10452\r\n10453\r\n10454\r\n",
            "5\r\n8345\r\n8346\r\n8347\r\n8348\r\n8349\r\n",
            "5\r\n104620\r\n104621\r\n104622\r\n104623\r\n104624\r\n",
            "5\r\n258640\r\n258641\r\n258642\r\n258643\r\n258644\r\n",
            "5\r\n186690\r\n186691\r\n186692\r\n186693\r\n186694\r\n",
            "5\r\n382235\r\n382236\r\n382237\r\n382238\r\n382239\r\n",
            "0\r\n",
            "5\r\n208140\r\n208141\r\n208142\r\n208143\r\n208144\r\n",
            "5\r\n44110\r\n44111\r\n44112\r\n44113\r\n44114\r\n",
            "5\r\n252885\r\n252886\r\n252887\r\n252888\r\n252889\r\n",
            "5\r\n160390\r\n160391\r\n160392\r\n160393\r\n160394\r\n",
            "5\r\n170910\r\n170911\r\n170912\r\n170913\r\n170914\r\n",
            "5\r\n97530\r\n97531\r\n97532\r\n97533\r\n97534\r\n",
            "5\r\n292570\r\n292571\r\n292572\r\n292573\r\n292574\r\n",
            "5\r\n373400\r\n373401\r\n373402\r\n373403\r\n373404\r\n",
            "5\r\n73370\r\n73371\r\n73372\r\n73373\r\n73374\r\n",
            "5\r\n170660\r\n170661\r\n170662\r\n170663\r\n170664\r\n",
            "5\r\n324900\r\n324901\r\n324902\r\n324903\r\n324904\r\n",
            "5\r\n400005\r\n400006\r\n400007\r\n400008\r\n400009\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "0\r\n",
            "5\r\n390625\r\n390626\r\n390627\r\n390628\r\n390629\r\n",
            "5\r\n50000\r\n50001\r\n50002\r\n50003\r\n50004\r\n",
            "5\r\n265\r\n266\r\n267\r\n268\r\n269\r\n",
            "5\r\n170\r\n171\r\n172\r\n173\r\n174\r\n",
            "5\r\n125\r\n126\r\n127\r\n128\r\n129\r\n",
            "0\r\n"
        ],
        "unnorm_rating": 1261.5425423783356,
        "unnorm_rating_std": 81.09080664267573,
        "unnorm_rating_volatility": 0.0598862032099534,
        "reference_rating": 1300.0,
        "original_tags": [
            "brute force",
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 1767,
        "problem_index": "D",
        "rating": 0.305822412665416,
        "rating_std": 0.02847822046721505,
        "rating_volatility": 2.1345530687244915e-05,
        "rating_quantile": 0.45895863238940365,
        "tag": "Greedy",
        "detailed_tag": "combinatorics",
        "problem_name": "Playoff",
        "problem_main": "$$$2^n$$$ teams participate in a playoff tournament. The tournament consists of $$$2^n - 1$$$ games. They are held as follows: in the first phase of the tournament, the teams are split into pairs: team $$$1$$$ plays against team $$$2$$$, team $$$3$$$ plays against team $$$4$$$, and so on (so, $$$2^{n-1}$$$ games are played in that phase). When a team loses a game, it is eliminated, and each game results in elimination of one team (there are no ties). After that, only $$$2^{n-1}$$$ teams remain. If only one team remains, it is declared the champion; otherwise, the second phase begins, where $$$2^{n-2}$$$ games are played: in the first one of them, the winner of the game \"$$$1$$$ vs $$$2$$$\" plays against the winner of the game \"$$$3$$$ vs $$$4$$$\", then the winner of the game \"$$$5$$$ vs $$$6$$$\" plays against the winner of the game \"$$$7$$$ vs $$$8$$$\", and so on. This process repeats until only one team remains. The skill level of the $$$i$$$-th team is $$$p_i$$$, where $$$p$$$ is a permutation of integers $$$1$$$, $$$2$$$, ..., $$$2^n$$$ (a permutation is an array where each element from $$$1$$$ to $$$2^n$$$ occurs exactly once).You are given a string $$$s$$$ which consists of $$$n$$$ characters. These characters denote the results of games in each phase of the tournament as follows:   if $$$s_i$$$ is equal to 0, then during the $$$i$$$-th phase (the phase with $$$2^{n-i}$$$ games), in each match, the team with the lower skill level wins;  if $$$s_i$$$ is equal to 1, then during the $$$i$$$-th phase (the phase with $$$2^{n-i}$$$ games), in each match, the team with the higher skill level wins. Let's say that an integer $$$x$$$ is winning if it is possible to find a permutation $$$p$$$ such that the team with skill $$$x$$$ wins the tournament. Find all winning integers.",
        "problem_note": "",
        "input_spec": "The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 18$$$).The second line contains the string $$$s$$$ of length $$$n$$$ consisting of the characters 0 and/or 1.",
        "output_spec": "Print all the winning integers $$$x$$$ in ascending order.",
        "sample_inputs": [
            "3\n101",
            "1\n1",
            "2\n01"
        ],
        "sample_outputs": [
            "4 5 6 7",
            "2",
            "2 3"
        ],
        "inputs": [
            "3\r\n101\r\n",
            "1\r\n1\r\n",
            "2\r\n01\r\n",
            "2\r\n00\r\n",
            "1\r\n0\r\n",
            "2\r\n11\r\n",
            "3\r\n000\r\n",
            "3\r\n010\r\n",
            "3\r\n111\r\n",
            "4\r\n0000\r\n",
            "4\r\n0100\r\n",
            "4\r\n0110\r\n",
            "4\r\n1011\r\n",
            "4\r\n1111\r\n",
            "5\r\n10110\r\n",
            "5\r\n01100\r\n",
            "6\r\n111000\r\n",
            "6\r\n101111\r\n",
            "7\r\n1011011\r\n",
            "18\r\n000000000000000000\r\n",
            "18\r\n111111111111111111\r\n"
        ],
        "answers": [
            "4 5 6 7 ",
            "2 ",
            "2 3 ",
            "1 ",
            "1 ",
            "4 ",
            "1 ",
            "2 3 4 5 ",
            "8 ",
            "1 ",
            "2 3 4 5 6 7 8 9 ",
            "4 5 6 7 8 9 10 11 12 13 ",
            "8 9 10 11 12 13 14 15 ",
            "16 ",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ",
            "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 ",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 ",
            "1 ",
            "262144 "
        ],
        "input_output": {
            "inputs": [
                "3\r\n101\r\n",
                "1\r\n1\r\n",
                "2\r\n01\r\n",
                "2\r\n00\r\n",
                "1\r\n0\r\n",
                "2\r\n11\r\n",
                "3\r\n000\r\n",
                "3\r\n010\r\n",
                "3\r\n111\r\n",
                "4\r\n0000\r\n",
                "4\r\n0100\r\n",
                "4\r\n0110\r\n",
                "4\r\n1011\r\n",
                "4\r\n1111\r\n",
                "5\r\n10110\r\n",
                "5\r\n01100\r\n",
                "6\r\n111000\r\n",
                "6\r\n101111\r\n",
                "7\r\n1011011\r\n",
                "18\r\n000000000000000000\r\n",
                "18\r\n111111111111111111\r\n"
            ],
            "outputs": [
                "4 5 6 7 ",
                "2 ",
                "2 3 ",
                "1 ",
                "1 ",
                "4 ",
                "1 ",
                "2 3 4 5 ",
                "8 ",
                "1 ",
                "2 3 4 5 6 7 8 9 ",
                "4 5 6 7 8 9 10 11 12 13 ",
                "8 9 10 11 12 13 14 15 ",
                "16 ",
                "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ",
                "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ",
                "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ",
                "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 ",
                "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 ",
                "1 ",
                "262144 "
            ]
        },
        "solution_id_0": 257792287,
        "solution_0": "inp = input\npr = print\nii = int\nn = int(inp())\ns = inp()\nif n == 1111:\n    n += 1\nelse:\n    (u, z) = (s.count('1'), s.count('0'))\n    (ma, mi) = (0, 0)\n    for i in range(z):\n        ma += 2 ** i\n    for j in range(u):\n        mi += 2 ** j\n    r = [str(i) for i in range(mi + 1, 2 ** n - ma + 1)]\n    pr(' '.join(r))",
        "outputs_0": [
            "4 5 6 7\r\n",
            "2\r\n",
            "2 3\r\n",
            "1\r\n",
            "1\r\n",
            "4\r\n",
            "1\r\n",
            "2 3 4 5\r\n",
            "8\r\n",
            "1\r\n",
            "2 3 4 5 6 7 8 9\r\n",
            "4 5 6 7 8 9 10 11 12 13\r\n",
            "8 9 10 11 12 13 14 15\r\n",
            "16\r\n",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\r\n",
            "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\r\n",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\r\n",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125\r\n",
            "1\r\n",
            "262144\r\n"
        ],
        "solution_id_1": 185500849,
        "solution_1": "import sys\nimport re\nimport math\nfrom math import log2\nfrom math import log\nfrom math import ceil\nfrom math import gcd\nfrom decimal import *\nfrom datetime import date\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nimport datetime\nconst = 1000000007\nep = 1e-08\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nline = input()\ncannot = {}\n(small, big) = (1, 2 ** n)\n(smallt, bigt) = (1, 1)\nfor term in line:\n    if term == '1':\n        small += smallt\n        smallt *= 2\n    else:\n        big -= bigt\n        bigt *= 2\nans = [str(i) for i in range(small, big + 1)]\nprint(' '.join(ans))",
        "outputs_1": [
            "4 5 6 7\r\n",
            "2\r\n",
            "2 3\r\n",
            "1\r\n",
            "1\r\n",
            "4\r\n",
            "1\r\n",
            "2 3 4 5\r\n",
            "8\r\n",
            "1\r\n",
            "2 3 4 5 6 7 8 9\r\n",
            "4 5 6 7 8 9 10 11 12 13\r\n",
            "8 9 10 11 12 13 14 15\r\n",
            "16\r\n",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\r\n",
            "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\r\n",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\r\n",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125\r\n",
            "1\r\n",
            "262144\r\n"
        ],
        "solution_id_2": 185576707,
        "solution_2": "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\nimport sys\n\ndef solve(a, n):\n    (c0, c1) = (a.count(0), a.count(1))\n    m = 1 << n\n    if c0 == 0:\n        return [m]\n    if c1 == 0:\n        return [1]\n    (l, r) = (2 ** c1, 2 ** c0)\n    ans = [i for i in range(1, m + 1) if l <= i <= m - r + 1]\n    return ans\nif __name__ == '__main__':\n    n = int(input())\n    a = [int(c) for c in input()]\n    res = solve(a, n)\n    print(' '.join(map(str, res)))",
        "outputs_2": [
            "4 5 6 7\r\n",
            "2\r\n",
            "2 3\r\n",
            "1\r\n",
            "1\r\n",
            "4\r\n",
            "1\r\n",
            "2 3 4 5\r\n",
            "8\r\n",
            "1\r\n",
            "2 3 4 5 6 7 8 9\r\n",
            "4 5 6 7 8 9 10 11 12 13\r\n",
            "8 9 10 11 12 13 14 15\r\n",
            "16\r\n",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\r\n",
            "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\r\n",
            "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\r\n",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n",
            "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125\r\n",
            "1\r\n",
            "262144\r\n"
        ],
        "unnorm_rating": 1501.2516597113815,
        "unnorm_rating_std": 81.99745559601942,
        "unnorm_rating_volatility": 0.06146027300813289,
        "reference_rating": 1500.0,
        "original_tags": [
            "combinatorics",
            "constructive algorithms",
            "dp",
            "greedy",
            "math"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 498,
        "problem_index": "A",
        "rating": 0.36860408513619436,
        "rating_std": 0.02814021558701445,
        "rating_volatility": 2.086902059771195e-05,
        "rating_quantile": 0.5762756100743834,
        "tag": "Others",
        "detailed_tag": "geometry",
        "problem_name": "Crazy Town",
        "problem_main": "Crazy Town is a plane on which there are n infinite line roads. Each road is defined by the equation aix\u2009+\u2009biy\u2009+\u2009ci\u2009=\u20090, where ai and bi are not both equal to the zero. The roads divide the plane into connected regions, possibly of infinite space. Let's call each such region a block. We define an intersection as the point where at least two different roads intersect.Your home is located in one of the blocks. Today you need to get to the University, also located in some block. In one step you can move from one block to another, if the length of their common border is nonzero (in particular, this means that if the blocks are adjacent to one intersection, but have no shared nonzero boundary segment, then it are not allowed to move from one to another one in one step).Determine what is the minimum number of steps you have to perform to get to the block containing the university. It is guaranteed that neither your home nor the university is located on the road.",
        "problem_note": "Pictures to the samples are presented below (A is the point representing the house; B is the point representing the university, different blocks are filled with different colors):    ",
        "input_spec": "The first line contains two space-separated integers x1, y1 (\u2009-\u2009106\u2009\u2264\u2009x1,\u2009y1\u2009\u2264\u2009106) \u2014 the coordinates of your home.The second line contains two integers separated by a space x2, y2 (\u2009-\u2009106\u2009\u2264\u2009x2,\u2009y2\u2009\u2264\u2009106) \u2014 the coordinates of the university you are studying at.The third line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009300) \u2014 the number of roads in the city. The following n lines contain 3 space-separated integers (\u2009-\u2009106\u2009\u2264\u2009ai,\u2009bi,\u2009ci\u2009\u2264\u2009106; |ai|\u2009+\u2009|bi|\u2009>\u20090) \u2014 the coefficients of the line aix\u2009+\u2009biy\u2009+\u2009ci\u2009=\u20090, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).",
        "output_spec": "Output the answer to the problem.",
        "sample_inputs": [
            "1 1\n-1 -1\n2\n0 1 0\n1 0 0",
            "1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3"
        ],
        "sample_outputs": [
            "2",
            "2"
        ],
        "inputs": [
            "1 1\r\n-1 -1\r\n2\r\n0 1 0\r\n1 0 0\r\n",
            "1 1\r\n-1 -1\r\n3\r\n1 0 0\r\n0 1 0\r\n1 1 -3\r\n",
            "841746 527518\r\n595261 331297\r\n10\r\n-946901 129987 670374\r\n-140388 -684770 309555\r\n-302589 415564 -387435\r\n-565799 -72069 -395358\r\n-523453 -511446 854898\r\n-846967 -749453 -341866\r\n-622388 434663 264157\r\n-638453 625357 344195\r\n-255265 -676356 -772398\r\n-824723 -319141 33585\r\n",
            "454379 373644\r\n-665078 -385892\r\n2\r\n-530 -468 -379786\r\n-173 -275 -100376\r\n",
            "841746 527518\r\n595261 331297\r\n10\r\n936 -209 -790797\r\n898 1240 -36994\r\n759 285 -413562\r\n174 323 34281\r\n662 400 -284846\r\n298 520 42086\r\n-36 -27 12861\r\n462 631 -22515\r\n-499 1105 919372\r\n582 1490 319884\r\n",
            "-537 648838\r\n227 -51454\r\n1\r\n678 0 235266\r\n",
            "-940 -984641\r\n403 -942522\r\n2\r\n530 0 -63600\r\n-439 0 95263\r\n",
            "-867 -465880\r\n793 -581568\r\n5\r\n73 0 57743\r\n-818 0 -635586\r\n-804 0 -415668\r\n-383 0 -52854\r\n1258 0 155992\r\n",
            "-632 -387435\r\n942 798117\r\n10\r\n249 0 135705\r\n536 0 271752\r\n750 0 375750\r\n799 0 -206142\r\n1102 0 -437494\r\n-453 0 197055\r\n-581 0 260288\r\n-322 0 161322\r\n1317 0 -878439\r\n-811 0 594463\r\n",
            "527189 -306471\r\n-998939 648838\r\n1\r\n-950717 -549267 -820616\r\n",
            "454379 373644\r\n-665078 -385892\r\n2\r\n-984641 503905 -909460\r\n-767954 -468772 -942522\r\n",
            "-589794 344286\r\n532652 -230711\r\n5\r\n-2919 -179425 -546698\r\n-465880 342737 794428\r\n-230739 -687865 713836\r\n-932054 513357 -97639\r\n-559361 -75096 -581568\r\n",
            "0 1\r\n2 2\r\n1\r\n1 1 2\r\n",
            "0 2\r\n-2 0\r\n2\r\n2 3 -1\r\n4 0 3\r\n",
            "1 -4\r\n1 5\r\n1\r\n0 1 0\r\n",
            "1 0\r\n2 0\r\n1\r\n1 0 0\r\n",
            "0 0\r\n0 2\r\n4\r\n1 0 1\r\n1 0 -1\r\n-2 0 1\r\n0 1 -1\r\n",
            "100000 100000\r\n-100000 100000\r\n1\r\n10000 0 7\r\n",
            "1 1\r\n-1 -1\r\n1\r\n1 1 0\r\n",
            "1 1\r\n3 3\r\n1\r\n1 0 2\r\n",
            "1 3\r\n1 1\r\n1\r\n1 1 3\r\n",
            "5 0\r\n15 0\r\n1\r\n10 0 -100\r\n",
            "3 4\r\n2 6\r\n1\r\n0 -2 5\r\n",
            "1 0\r\n1 2\r\n1\r\n0 1 -1\r\n",
            "0 0\r\n0 2\r\n1\r\n0 1 -1\r\n",
            "0 0\r\n0 1\r\n1\r\n1 0 10000\r\n",
            "0 0\r\n0 1\r\n1\r\n0 2 2\r\n",
            "10 18\r\n10 0\r\n2\r\n1 -1 0\r\n0 1 -5\r\n",
            "10 10\r\n8 8\r\n1\r\n1 1 19\r\n",
            "0 1\r\n1000000 1\r\n1\r\n1000000 1 0\r\n"
        ],
        "answers": [
            "2\r\n",
            "2\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "10\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "0\r\n",
            "2\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n"
        ],
        "input_output": {
            "inputs": [
                "1 1\r\n-1 -1\r\n2\r\n0 1 0\r\n1 0 0\r\n",
                "1 1\r\n-1 -1\r\n3\r\n1 0 0\r\n0 1 0\r\n1 1 -3\r\n",
                "841746 527518\r\n595261 331297\r\n10\r\n-946901 129987 670374\r\n-140388 -684770 309555\r\n-302589 415564 -387435\r\n-565799 -72069 -395358\r\n-523453 -511446 854898\r\n-846967 -749453 -341866\r\n-622388 434663 264157\r\n-638453 625357 344195\r\n-255265 -676356 -772398\r\n-824723 -319141 33585\r\n",
                "454379 373644\r\n-665078 -385892\r\n2\r\n-530 -468 -379786\r\n-173 -275 -100376\r\n",
                "841746 527518\r\n595261 331297\r\n10\r\n936 -209 -790797\r\n898 1240 -36994\r\n759 285 -413562\r\n174 323 34281\r\n662 400 -284846\r\n298 520 42086\r\n-36 -27 12861\r\n462 631 -22515\r\n-499 1105 919372\r\n582 1490 319884\r\n",
                "-537 648838\r\n227 -51454\r\n1\r\n678 0 235266\r\n",
                "-940 -984641\r\n403 -942522\r\n2\r\n530 0 -63600\r\n-439 0 95263\r\n",
                "-867 -465880\r\n793 -581568\r\n5\r\n73 0 57743\r\n-818 0 -635586\r\n-804 0 -415668\r\n-383 0 -52854\r\n1258 0 155992\r\n",
                "-632 -387435\r\n942 798117\r\n10\r\n249 0 135705\r\n536 0 271752\r\n750 0 375750\r\n799 0 -206142\r\n1102 0 -437494\r\n-453 0 197055\r\n-581 0 260288\r\n-322 0 161322\r\n1317 0 -878439\r\n-811 0 594463\r\n",
                "527189 -306471\r\n-998939 648838\r\n1\r\n-950717 -549267 -820616\r\n",
                "454379 373644\r\n-665078 -385892\r\n2\r\n-984641 503905 -909460\r\n-767954 -468772 -942522\r\n",
                "-589794 344286\r\n532652 -230711\r\n5\r\n-2919 -179425 -546698\r\n-465880 342737 794428\r\n-230739 -687865 713836\r\n-932054 513357 -97639\r\n-559361 -75096 -581568\r\n",
                "0 1\r\n2 2\r\n1\r\n1 1 2\r\n",
                "0 2\r\n-2 0\r\n2\r\n2 3 -1\r\n4 0 3\r\n",
                "1 -4\r\n1 5\r\n1\r\n0 1 0\r\n",
                "1 0\r\n2 0\r\n1\r\n1 0 0\r\n",
                "0 0\r\n0 2\r\n4\r\n1 0 1\r\n1 0 -1\r\n-2 0 1\r\n0 1 -1\r\n",
                "100000 100000\r\n-100000 100000\r\n1\r\n10000 0 7\r\n",
                "1 1\r\n-1 -1\r\n1\r\n1 1 0\r\n",
                "1 1\r\n3 3\r\n1\r\n1 0 2\r\n",
                "1 3\r\n1 1\r\n1\r\n1 1 3\r\n",
                "5 0\r\n15 0\r\n1\r\n10 0 -100\r\n",
                "3 4\r\n2 6\r\n1\r\n0 -2 5\r\n",
                "1 0\r\n1 2\r\n1\r\n0 1 -1\r\n",
                "0 0\r\n0 2\r\n1\r\n0 1 -1\r\n",
                "0 0\r\n0 1\r\n1\r\n1 0 10000\r\n",
                "0 0\r\n0 1\r\n1\r\n0 2 2\r\n",
                "10 18\r\n10 0\r\n2\r\n1 -1 0\r\n0 1 -5\r\n",
                "10 10\r\n8 8\r\n1\r\n1 1 19\r\n",
                "0 1\r\n1000000 1\r\n1\r\n1000000 1 0\r\n"
            ],
            "outputs": [
                "2\r\n",
                "2\r\n",
                "0\r\n",
                "2\r\n",
                "0\r\n",
                "1\r\n",
                "2\r\n",
                "5\r\n",
                "10\r\n",
                "1\r\n",
                "2\r\n",
                "5\r\n",
                "0\r\n",
                "2\r\n",
                "1\r\n",
                "0\r\n",
                "1\r\n",
                "1\r\n",
                "1\r\n",
                "0\r\n",
                "0\r\n",
                "1\r\n",
                "0\r\n",
                "1\r\n",
                "1\r\n",
                "0\r\n",
                "0\r\n",
                "2\r\n",
                "0\r\n",
                "0\r\n"
            ]
        },
        "solution_id_0": 149867200,
        "solution_0": "(x1, y1) = map(int, input().split())\n(x2, y2) = map(int, input().split())\nn = int(input())\ncount = 0\nfor _ in range(n):\n    (a, b, c) = map(int, input().split())\n    if (a * x1 + b * y1 + c > 0) != (a * x2 + b * y2 + c > 0):\n        count += 1\nprint(count)",
        "outputs_0": [
            "2\r\n",
            "2\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "10\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "0\r\n",
            "2\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n"
        ],
        "solution_id_1": 11565468,
        "solution_1": "(x1, y1) = map(int, input().split())\n(x2, y2) = map(int, input().split())\nn = int(input())\ns = 0\nfor i in range(n):\n    (a, b, c) = map(int, input().split())\n    if (a * x1 + b * y1 + c) * (a * x2 + b * y2 + c) < 0:\n        s = s + 1\nprint(s)",
        "outputs_1": [
            "2\r\n",
            "2\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "10\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "0\r\n",
            "2\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n"
        ],
        "solution_id_2": 125650500,
        "solution_2": "(x1, y1) = map(int, input().split())\n(x2, y2) = map(int, input().split())\nn = int(input())\nres = 0\nfor i in range(n):\n    (a, b, c) = map(int, input().split())\n    p = 0\n    if a * x1 + b * y1 + c > 0:\n        p += 1\n    if a * x2 + b * y2 + c > 0:\n        p += 1\n    if p % 2 == 1:\n        res += 1\nprint(res)",
        "outputs_2": [
            "2\r\n",
            "2\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "10\r\n",
            "1\r\n",
            "2\r\n",
            "5\r\n",
            "0\r\n",
            "2\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "1\r\n",
            "0\r\n",
            "1\r\n",
            "1\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n"
        ],
        "unnorm_rating": 1682.0191836721199,
        "unnorm_rating_std": 81.02423677473129,
        "unnorm_rating_volatility": 0.060088255576337395,
        "reference_rating": 1700.0,
        "original_tags": [
            "geometry"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 1092,
        "problem_index": "C",
        "rating": 0.38704354495933574,
        "rating_std": 0.0359780502846147,
        "rating_volatility": 2.0706938444387136e-05,
        "rating_quantile": 0.6142502936186872,
        "tag": "Others",
        "detailed_tag": "strings",
        "problem_name": "Prefixes and Suffixes",
        "problem_main": "Ivan wants to play a game with you. He picked some string $$$s$$$ of length $$$n$$$ consisting only of lowercase Latin letters. You don't know this string. Ivan has informed you about all its improper prefixes and suffixes (i.e. prefixes and suffixes of lengths from $$$1$$$ to $$$n-1$$$), but he didn't tell you which strings are prefixes and which are suffixes.Ivan wants you to guess which of the given $$$2n-2$$$ strings are prefixes of the given string and which are suffixes. It may be impossible to guess the string Ivan picked (since multiple strings may give the same set of suffixes and prefixes), but Ivan will accept your answer if there is at least one string that is consistent with it. Let the game begin!",
        "problem_note": "The only string which Ivan can guess in the first example is \"ababa\".The only string which Ivan can guess in the second example is \"aaa\". Answers \"SPSP\", \"SSPP\" and \"PSPS\" are also acceptable.In the third example Ivan can guess the string \"ac\" or the string \"ca\". The answer \"SP\" is also acceptable.",
        "input_spec": "The first line of the input contains one integer number $$$n$$$ ($$$2 \\le n \\le 100$$$) \u2014 the length of the guessed string $$$s$$$.The next $$$2n-2$$$ lines are contain prefixes and suffixes, one per line. Each of them is the string of length from $$$1$$$ to $$$n-1$$$ consisting only of lowercase Latin letters. They can be given in arbitrary order.It is guaranteed that there are exactly $$$2$$$ strings of each length from $$$1$$$ to $$$n-1$$$. It is also guaranteed that these strings are prefixes and suffixes of some existing string of length $$$n$$$.",
        "output_spec": "Print one string of length $$$2n-2$$$ \u2014 the string consisting only of characters 'P' and 'S'. The number of characters 'P' should be equal to the number of characters 'S'. The $$$i$$$-th character of this string should be 'P' if the $$$i$$$-th of the input strings is the prefix and 'S' otherwise.If there are several possible answers, you can print any.",
        "sample_inputs": [
            "5\nba\na\nabab\na\naba\nbaba\nab\naba",
            "3\na\naa\naa\na",
            "2\na\nc"
        ],
        "sample_outputs": [
            "SPPSPSPS",
            "PPSS",
            "PS"
        ],
        "inputs": [
            "5\r\nba\r\na\r\nabab\r\na\r\naba\r\nbaba\r\nab\r\naba\r\n",
            "3\r\na\r\naa\r\naa\r\na\r\n",
            "2\r\na\r\nc\r\n",
            "2\r\nz\r\nz\r\n",
            "5\r\nba\r\na\r\nbaba\r\na\r\naba\r\nabab\r\nab\r\naba\r\n",
            "5\r\nb\r\nb\r\nba\r\nab\r\nbab\r\nbab\r\nabab\r\nbaba\r\n",
            "5\r\nc\r\ncd\r\ncdc\r\ncdcc\r\nb\r\ncb\r\nccb\r\ndccb\r\n",
            "3\r\nba\r\nab\r\na\r\na\r\n",
            "3\r\na\r\nb\r\naa\r\nab\r\n",
            "3\r\na\r\na\r\nba\r\nab\r\n",
            "4\r\nbab\r\naba\r\nab\r\nab\r\na\r\nb\r\n",
            "5\r\nabab\r\nbaba\r\nb\r\nb\r\nbab\r\nbab\r\nba\r\nab\r\n",
            "4\r\na\r\nc\r\nac\r\nab\r\naba\r\nbac\r\n",
            "4\r\nb\r\nbb\r\nbba\r\nbbb\r\nba\r\na\r\n",
            "4\r\nbab\r\nab\r\na\r\nab\r\naba\r\nb\r\n",
            "3\r\nb\r\nb\r\nab\r\nba\r\n",
            "4\r\nzn\r\nz\r\nn\r\nnzn\r\nzn\r\nznz\r\n",
            "5\r\nbaba\r\nabab\r\na\r\nab\r\naba\r\na\r\nba\r\naba\r\n",
            "5\r\nba\r\na\r\nbaba\r\nabab\r\na\r\naba\r\nab\r\naba\r\n",
            "4\r\nab\r\na\r\nb\r\nbab\r\nab\r\naba\r\n",
            "5\r\nh\r\nhwh\r\nwhwh\r\nhw\r\nh\r\nwh\r\nhwh\r\nhwhw\r\n",
            "5\r\nba\r\na\r\na\r\naba\r\nbaba\r\nab\r\naba\r\nabab\r\n",
            "4\r\naba\r\na\r\nba\r\nb\r\nba\r\nbab\r\n",
            "3\r\nah\r\nha\r\nh\r\nh\r\n",
            "5\r\nxy\r\nyx\r\nx\r\nx\r\nxyx\r\nxyx\r\nyxyx\r\nxyxy\r\n",
            "5\r\nbaaa\r\nbaa\r\nba\r\nb\r\naaaa\r\naaa\r\naa\r\na\r\n",
            "4\r\nb\r\nab\r\nbab\r\na\r\nab\r\naba\r\n",
            "5\r\na\r\na\r\nab\r\nba\r\naba\r\naba\r\nbaba\r\nabab\r\n",
            "18\r\nd\r\nh\r\ndj\r\nxh\r\ndjs\r\njxh\r\ndjsh\r\nzjxh\r\ndjshf\r\nkzjxh\r\ndjshfk\r\nhkzjxh\r\ndjshfkj\r\nkhkzjxh\r\ndjshfkje\r\nskhkzjxh\r\ndjshfkjeh\r\ndskhkzjxh\r\ndjshfkjehd\r\nhdskhkzjxh\r\ndjshfkjehds\r\nehdskhkzjxh\r\ndjshfkjehdsk\r\njehdskhkzjxh\r\ndjshfkjehdskh\r\nkjehdskhkzjxh\r\ndjshfkjehdskhk\r\nfkjehdskhkzjxh\r\ndjshfkjehdskhkz\r\nhfkjehdskhkzjxh\r\ndjshfkjehdskhkzj\r\nshfkjehdskhkzjxh\r\ndjshfkjehdskhkzjx\r\njshfkjehdskhkzjxh\r\n",
            "4\r\nza\r\na\r\nz\r\naza\r\nza\r\nzaz\r\n",
            "3\r\na\r\nza\r\naz\r\na\r\n",
            "8\r\na\r\nha\r\naha\r\nhaha\r\nahaha\r\nhahaha\r\nahahaha\r\nh\r\nha\r\nhah\r\nhaha\r\nhahah\r\nhahaha\r\nhahahah\r\n",
            "4\r\na\r\nab\r\nbab\r\nb\r\nab\r\naba\r\n",
            "4\r\na\r\nba\r\naba\r\nb\r\nba\r\nbab\r\n",
            "4\r\nc\r\ncb\r\nb\r\nbcb\r\ncb\r\ncbc\r\n",
            "4\r\nb\r\nbb\r\nbbb\r\na\r\nba\r\nbba\r\n",
            "5\r\na\r\naa\r\naaa\r\naaaa\r\nb\r\nba\r\nbaa\r\nbaaa\r\n",
            "4\r\na\r\nb\r\nab\r\nab\r\nbab\r\naba\r\n",
            "3\r\na\r\naa\r\nba\r\nb\r\n"
        ],
        "answers": [
            "SPPSPSPS\r\n",
            "PPSS\r\n",
            "PS\r\n",
            "PS\r\n",
            "SPSSPPPS\r\n",
            "PSPSPSSP\r\n",
            "PPPPSSSS\r\n",
            "SPPS\r\n",
            "PSPS\r\n",
            "PSSP\r\n",
            "SPPSPS\r\n",
            "SPPSPSPS\r\n",
            "PSSPPS\r\n",
            "PPSPSS\r\n",
            "SPPSPS\r\n",
            "PSSP\r\n",
            "PPSSSP\r\n",
            "SPPPPSSS\r\n",
            "SPSPSPPS\r\n",
            "PPSSSP\r\n",
            "PPSPSSSP\r\n",
            "SPSPSPSP\r\n",
            "SSPPSP\r\n",
            "SPPS\r\n",
            "PSPSPSSP\r\n",
            "PPPPSSSS\r\n",
            "SPSPSP\r\n",
            "PSPSPSSP\r\n",
            "PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\r\n",
            "PSPSSP\r\n",
            "PSPS\r\n",
            "SPSPSPSPSPSPSP\r\n",
            "PPSSSP\r\n",
            "SPSPSP\r\n",
            "PPSSSP\r\n",
            "PPPSSS\r\n",
            "SSSSPPPP\r\n",
            "PSPSSP\r\n",
            "SSPP\r\n"
        ],
        "input_output": {
            "inputs": [
                "5\r\nba\r\na\r\nabab\r\na\r\naba\r\nbaba\r\nab\r\naba\r\n",
                "3\r\na\r\naa\r\naa\r\na\r\n",
                "2\r\na\r\nc\r\n",
                "2\r\nz\r\nz\r\n",
                "5\r\nba\r\na\r\nbaba\r\na\r\naba\r\nabab\r\nab\r\naba\r\n",
                "5\r\nb\r\nb\r\nba\r\nab\r\nbab\r\nbab\r\nabab\r\nbaba\r\n",
                "5\r\nc\r\ncd\r\ncdc\r\ncdcc\r\nb\r\ncb\r\nccb\r\ndccb\r\n",
                "3\r\nba\r\nab\r\na\r\na\r\n",
                "3\r\na\r\nb\r\naa\r\nab\r\n",
                "3\r\na\r\na\r\nba\r\nab\r\n",
                "4\r\nbab\r\naba\r\nab\r\nab\r\na\r\nb\r\n",
                "5\r\nabab\r\nbaba\r\nb\r\nb\r\nbab\r\nbab\r\nba\r\nab\r\n",
                "4\r\na\r\nc\r\nac\r\nab\r\naba\r\nbac\r\n",
                "4\r\nb\r\nbb\r\nbba\r\nbbb\r\nba\r\na\r\n",
                "4\r\nbab\r\nab\r\na\r\nab\r\naba\r\nb\r\n",
                "3\r\nb\r\nb\r\nab\r\nba\r\n",
                "4\r\nzn\r\nz\r\nn\r\nnzn\r\nzn\r\nznz\r\n",
                "5\r\nbaba\r\nabab\r\na\r\nab\r\naba\r\na\r\nba\r\naba\r\n",
                "5\r\nba\r\na\r\nbaba\r\nabab\r\na\r\naba\r\nab\r\naba\r\n",
                "4\r\nab\r\na\r\nb\r\nbab\r\nab\r\naba\r\n",
                "5\r\nh\r\nhwh\r\nwhwh\r\nhw\r\nh\r\nwh\r\nhwh\r\nhwhw\r\n",
                "5\r\nba\r\na\r\na\r\naba\r\nbaba\r\nab\r\naba\r\nabab\r\n",
                "4\r\naba\r\na\r\nba\r\nb\r\nba\r\nbab\r\n",
                "3\r\nah\r\nha\r\nh\r\nh\r\n",
                "5\r\nxy\r\nyx\r\nx\r\nx\r\nxyx\r\nxyx\r\nyxyx\r\nxyxy\r\n",
                "5\r\nbaaa\r\nbaa\r\nba\r\nb\r\naaaa\r\naaa\r\naa\r\na\r\n",
                "4\r\nb\r\nab\r\nbab\r\na\r\nab\r\naba\r\n",
                "5\r\na\r\na\r\nab\r\nba\r\naba\r\naba\r\nbaba\r\nabab\r\n",
                "18\r\nd\r\nh\r\ndj\r\nxh\r\ndjs\r\njxh\r\ndjsh\r\nzjxh\r\ndjshf\r\nkzjxh\r\ndjshfk\r\nhkzjxh\r\ndjshfkj\r\nkhkzjxh\r\ndjshfkje\r\nskhkzjxh\r\ndjshfkjeh\r\ndskhkzjxh\r\ndjshfkjehd\r\nhdskhkzjxh\r\ndjshfkjehds\r\nehdskhkzjxh\r\ndjshfkjehdsk\r\njehdskhkzjxh\r\ndjshfkjehdskh\r\nkjehdskhkzjxh\r\ndjshfkjehdskhk\r\nfkjehdskhkzjxh\r\ndjshfkjehdskhkz\r\nhfkjehdskhkzjxh\r\ndjshfkjehdskhkzj\r\nshfkjehdskhkzjxh\r\ndjshfkjehdskhkzjx\r\njshfkjehdskhkzjxh\r\n",
                "4\r\nza\r\na\r\nz\r\naza\r\nza\r\nzaz\r\n",
                "3\r\na\r\nza\r\naz\r\na\r\n",
                "8\r\na\r\nha\r\naha\r\nhaha\r\nahaha\r\nhahaha\r\nahahaha\r\nh\r\nha\r\nhah\r\nhaha\r\nhahah\r\nhahaha\r\nhahahah\r\n",
                "4\r\na\r\nab\r\nbab\r\nb\r\nab\r\naba\r\n",
                "4\r\na\r\nba\r\naba\r\nb\r\nba\r\nbab\r\n",
                "4\r\nc\r\ncb\r\nb\r\nbcb\r\ncb\r\ncbc\r\n",
                "4\r\nb\r\nbb\r\nbbb\r\na\r\nba\r\nbba\r\n",
                "5\r\na\r\naa\r\naaa\r\naaaa\r\nb\r\nba\r\nbaa\r\nbaaa\r\n",
                "4\r\na\r\nb\r\nab\r\nab\r\nbab\r\naba\r\n",
                "3\r\na\r\naa\r\nba\r\nb\r\n"
            ],
            "outputs": [
                "SPPSPSPS\r\n",
                "PPSS\r\n",
                "PS\r\n",
                "PS\r\n",
                "SPSSPPPS\r\n",
                "PSPSPSSP\r\n",
                "PPPPSSSS\r\n",
                "SPPS\r\n",
                "PSPS\r\n",
                "PSSP\r\n",
                "SPPSPS\r\n",
                "SPPSPSPS\r\n",
                "PSSPPS\r\n",
                "PPSPSS\r\n",
                "SPPSPS\r\n",
                "PSSP\r\n",
                "PPSSSP\r\n",
                "SPPPPSSS\r\n",
                "SPSPSPPS\r\n",
                "PPSSSP\r\n",
                "PPSPSSSP\r\n",
                "SPSPSPSP\r\n",
                "SSPPSP\r\n",
                "SPPS\r\n",
                "PSPSPSSP\r\n",
                "PPPPSSSS\r\n",
                "SPSPSP\r\n",
                "PSPSPSSP\r\n",
                "PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\r\n",
                "PSPSSP\r\n",
                "PSPS\r\n",
                "SPSPSPSPSPSPSP\r\n",
                "PPSSSP\r\n",
                "SPSPSP\r\n",
                "PPSSSP\r\n",
                "PPPSSS\r\n",
                "SSSSPPPP\r\n",
                "PSPSSP\r\n",
                "SSPP\r\n"
            ]
        },
        "solution_id_0": 251976954,
        "solution_0": "def rint():\n    return int(input())\n\ndef rlist():\n    return list(map(int, input().split()))\nres = ''\n\ndef check(pref: str, suf: str):\n    if pref[1:] == suf[0:-1]:\n        return (pref, suf)\n    else:\n        return (suf, pref)\n\ndef find_res(string):\n    global res\n    string = string[0][:] + string[1][-1:]\n    sPref = []\n    vv = []\n    sSuf = []\n    for i in range(1, n):\n        sPref.append(string[0:i])\n        vv.append(string[0:i])\n        sSuf.append(string[n - i:])\n        vv.append(string[n - i:])\n    if sorted(vv) == sorted(words):\n        for i in range(2 * n - 2):\n            if words[i] in sPref:\n                res += 'P'\n                sPref.remove(words[i])\n            elif words[i] in sSuf:\n                res += 'S'\n                sSuf.remove(words[i])\n        return True\n    return False\nwords = []\nn = rint()\nbig = []\nfor i in range(2 * n - 2):\n    x = input()\n    words.append(x)\n    if len(x) == n - 1:\n        big.append(x)\nif find_res(check(big[0], big[1])):\n    pass\nelse:\n    res = ''\n    find_res(check(big[1], big[0]))\nprint(res)",
        "outputs_0": [
            "SPPSPSPS\r\n",
            "PPSS\r\n",
            "PS\r\n",
            "PS\r\n",
            "SPSSPPPS\r\n",
            "PSPSPSSP\r\n",
            "PPPPSSSS\r\n",
            "SPPS\r\n",
            "PSPS\r\n",
            "PSSP\r\n",
            "SPPSPS\r\n",
            "SPPSPSPS\r\n",
            "PSSPPS\r\n",
            "PPSPSS\r\n",
            "SPPSPS\r\n",
            "PSSP\r\n",
            "PPSSSP\r\n",
            "SPPPPSSS\r\n",
            "SPSPSPPS\r\n",
            "PPSSSP\r\n",
            "PPSPSSSP\r\n",
            "SPSPSPSP\r\n",
            "SSPPSP\r\n",
            "SPPS\r\n",
            "PSPSPSSP\r\n",
            "PPPPSSSS\r\n",
            "SPSPSP\r\n",
            "PSPSPSSP\r\n",
            "PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\r\n",
            "PSPSSP\r\n",
            "PSPS\r\n",
            "SPSPSPSPSPSPSP\r\n",
            "PPSSSP\r\n",
            "SPSPSP\r\n",
            "PPSSSP\r\n",
            "PPPSSS\r\n",
            "SSSSPPPP\r\n",
            "PSPSSP\r\n",
            "SSPP\r\n"
        ],
        "solution_id_1": 162320731,
        "solution_1": "def main():\n    n = int(input())\n    arr = []\n    for _ in range(2 * n - 2):\n        arr.append(input().strip())\n    ms = [s for s in arr if len(s) == n - 1]\n\n    def f(p, s):\n        ans = []\n        used = set()\n        for a in arr:\n            if a not in used and p.startswith(a):\n                used.add(a)\n                ans.append('P')\n            elif s.endswith(a):\n                ans.append('S')\n            else:\n                return ''\n        return ''.join(ans)\n    s = f(ms[0], ms[1])\n    if s.count('P') == s.count('S') and len(s) == 2 * n - 2:\n        print(s)\n    else:\n        print(f(ms[1], ms[0]))\n\ndef init():\n    import os\n    import sys\n    sys.setrecursionlimit(2 * 10 ** 6)\n    if 'CP_LOCAL_ENV' in os.environ:\n        sys.stdin = open('cf_test_a.txt')\nif __name__ == '__main__':\n    init()\n    main()",
        "outputs_1": [
            "SPPSPSPS\r\n",
            "PPSS\r\n",
            "PS\r\n",
            "PS\r\n",
            "SPSSPPPS\r\n",
            "PSPSPSSP\r\n",
            "PPPPSSSS\r\n",
            "SPPS\r\n",
            "PSPS\r\n",
            "PSSP\r\n",
            "SPPSPS\r\n",
            "SPPSPSPS\r\n",
            "PSSPPS\r\n",
            "PPSPSS\r\n",
            "SPPSPS\r\n",
            "PSSP\r\n",
            "PPSSSP\r\n",
            "SPPPPSSS\r\n",
            "SPSPSPPS\r\n",
            "PPSSSP\r\n",
            "PPSPSSSP\r\n",
            "SPSPSPSP\r\n",
            "SSPPSP\r\n",
            "SPPS\r\n",
            "PSPSPSSP\r\n",
            "PPPPSSSS\r\n",
            "SPSPSP\r\n",
            "PSPSPSSP\r\n",
            "PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\r\n",
            "PSPSSP\r\n",
            "PSPS\r\n",
            "SPSPSPSPSPSPSP\r\n",
            "PPSSSP\r\n",
            "SPSPSP\r\n",
            "PPSSSP\r\n",
            "PPPSSS\r\n",
            "SSSSPPPP\r\n",
            "PSPSSP\r\n",
            "SSPP\r\n"
        ],
        "solution_id_2": 142671908,
        "solution_2": "import sys\nn = int(input())\nA = []\njud = []\nfor i in range(2 * n - 2):\n    s = input()\n    if len(s) == n - 1:\n        jud.append(s)\n    A.append(s)\njud[0] += jud[1][-1]\njud[1] += jud[0][-2]\nfor i in range(2):\n    count = [0, 0]\n    ans = []\n    e = 0\n    for j in A:\n        if jud[i][:len(j)] == j and jud[i][n - len(j):] == j:\n            ans.append(0)\n        elif jud[i][:len(j)] == j:\n            count[0] += 1\n            ans.append(-1)\n        elif jud[i][n - len(j):] == j:\n            count[1] += 1\n            ans.append(1)\n        else:\n            e = 1\n            break\n    if e == 1:\n        continue\n    elif count[0] <= n - 1 and count[1] <= n - 1:\n        m = []\n        for i in range(len(ans)):\n            if ans[i] == -1:\n                print('P', end='')\n            elif ans[i] == 1:\n                print('S', end='')\n            elif A[i] not in m:\n                print('P', end='')\n                m.append(A[i])\n            else:\n                print('S', end='')\n        sys.exit()",
        "outputs_2": [
            "SPPSPSPS",
            "PPSS",
            "PS",
            "PS",
            "SPSSPPPS",
            "PSPSPSSP",
            "PPPPSSSS",
            "SPPS",
            "PSPS",
            "PSSP",
            "SPPSPS",
            "SPPSPSPS",
            "PSSPPS",
            "PPSPSS",
            "SPPSPS",
            "PSSP",
            "PPSSSP",
            "SPPPPSSS",
            "SPSPSPPS",
            "PPSSSP",
            "PPSPSSSP",
            "SPSPSPSP",
            "SSPPSP",
            "SPPS",
            "PSPSPSSP",
            "PPPPSSSS",
            "SPSPSP",
            "PSPSPSSP",
            "PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS",
            "PSPSSP",
            "PSPS",
            "SPSPSPSPSPSPSP",
            "PPSSSP",
            "SPSPSP",
            "PPSSSP",
            "PPPSSS",
            "SSSSPPPP",
            "PSPSSP",
            "SSPP"
        ],
        "unnorm_rating": 1735.111995064716,
        "unnorm_rating_std": 103.59174598147023,
        "unnorm_rating_volatility": 0.05962157177544966,
        "reference_rating": 1700.0,
        "original_tags": [
            "strings"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 1146,
        "problem_index": "D",
        "rating": 0.4953609952754319,
        "rating_std": 0.031079555174659993,
        "rating_volatility": 2.0846243213933263e-05,
        "rating_quantile": 0.7940754273783114,
        "tag": "Math",
        "detailed_tag": "number theory",
        "problem_name": "Frog Jumping",
        "problem_main": "A frog is initially at position $$$0$$$ on the number line. The frog has two positive integers $$$a$$$ and $$$b$$$. From a position $$$k$$$, it can either jump to position $$$k+a$$$ or $$$k-b$$$.Let $$$f(x)$$$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $$$[0, x]$$$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $$$0$$$.Given an integer $$$m$$$, find $$$\\sum_{i=0}^{m} f(i)$$$. That is, find the sum of all $$$f(i)$$$ for $$$i$$$ from $$$0$$$ to $$$m$$$.",
        "problem_note": "In the first example, we must find $$$f(0)+f(1)+\\ldots+f(7)$$$. We have $$$f(0) = 1, f(1) = 1, f(2) = 1, f(3) = 1, f(4) = 1, f(5) = 3, f(6) = 3, f(7) = 8$$$. The sum of these values is $$$19$$$.In the second example, we have $$$f(i) = i+1$$$, so we want to find $$$\\sum_{i=0}^{10^9} i+1$$$.In the third example, the frog can't make any jumps in any case.",
        "input_spec": "The first line contains three integers $$$m, a, b$$$ ($$$1 \\leq m \\leq 10^9, 1 \\leq a,b \\leq 10^5$$$).",
        "output_spec": "Print a single integer, the desired sum.",
        "sample_inputs": [
            "7 5 3",
            "1000000000 1 2019",
            "100 100000 1",
            "6 4 5"
        ],
        "sample_outputs": [
            "19",
            "500000001500000001",
            "101",
            "10"
        ],
        "inputs": [
            "7 5 3\r\n",
            "1000000000 1 2019\r\n",
            "100 100000 1\r\n",
            "6 4 5\r\n",
            "172165 93846 84\r\n",
            "9978 99 98615\r\n",
            "9909 95875 20\r\n",
            "42651129 26190 16875\r\n",
            "5 8253 91700\r\n",
            "14712 8142 9912\r\n",
            "98898 1040 98615\r\n",
            "79674 62280 77850\r\n",
            "78139 77688 1161\r\n",
            "110518 69352 81284\r\n",
            "881706694 5710 56529\r\n",
            "863 99250 420\r\n",
            "9112063 50688 2640\r\n",
            "236009692 89900 300\r\n",
            "16145755 64220 70642\r\n",
            "997932 23910 14346\r\n",
            "9907037 55440 88480\r\n",
            "9695 9 85014\r\n",
            "99548 73888 32\r\n",
            "9742365 6750 90375\r\n",
            "95544 17793 8856\r\n",
            "2756 31707 63414\r\n",
            "936989 17028 92708\r\n",
            "9650984 18601 2090\r\n",
            "26 92701 7\r\n",
            "9980 78765 356\r\n",
            "10348323 355 83425\r\n",
            "952549276 31416 33000\r\n",
            "992869 410 9880\r\n",
            "96033 98622 100\r\n",
            "3 998 99486\r\n",
            "10652698 87345 1116\r\n",
            "303857 1990 4\r\n",
            "395013 59544 180\r\n",
            "1183 532 73416\r\n",
            "25 75060 2502\r\n",
            "4987696 29388 29865\r\n",
            "2531607 75419 14230\r\n",
            "4015 56658 19\r\n",
            "49277 166 8051\r\n",
            "9984950 40800 1152\r\n",
            "1710 11868 202\r\n",
            "96974 1 99004\r\n",
            "995676200 30 99370\r\n",
            "983 97020 105\r\n",
            "9331043 5355 81159\r\n",
            "99005952 94024 10220\r\n",
            "16965 51653 70\r\n",
            "997674659 8874 35496\r\n",
            "1647861 97967 10\r\n",
            "7526 35 7525\r\n",
            "68565 68564 1\r\n",
            "58200 198 58050\r\n",
            "14332 13672 1976\r\n",
            "7957 18 7956\r\n",
            "70343 66336 6910\r\n",
            "101407 95200 6448\r\n",
            "57986 4760 56440\r\n",
            "87728 689 87236\r\n",
            "79903 75251 7234\r\n",
            "107132 20930 92956\r\n",
            "97009 97008 129\r\n",
            "96538 95880 900\r\n",
            "7845 4410 7350\r\n",
            "79873 13 79872\r\n",
            "99573 99474 186\r\n",
            "112104 86760 69327\r\n",
            "76065 44280 39150\r\n",
            "58423 58422 9737\r\n",
            "22432 19298 5536\r\n"
        ],
        "answers": [
            "19\r\n",
            "500000001500000001\r\n",
            "101\r\n",
            "10\r\n",
            "1735345812\r\n",
            "507929\r\n",
            "9910\r\n",
            "6737492081840\r\n",
            "6\r\n",
            "21284\r\n",
            "4761309\r\n",
            "97070\r\n",
            "108424\r\n",
            "151686\r\n",
            "680741853146475\r\n",
            "864\r\n",
            "78628667728\r\n",
            "278502953469621\r\n",
            "20303198570\r\n",
            "104545151\r\n",
            "87620910296\r\n",
            "5227761\r\n",
            "69626827\r\n",
            "126544822305\r\n",
            "157445948\r\n",
            "2757\r\n",
            "229896864\r\n",
            "222830431513\r\n",
            "27\r\n",
            "9981\r\n",
            "150833075049\r\n",
            "1718466614644254\r\n",
            "49284898280\r\n",
            "96034\r\n",
            "4\r\n",
            "6304015267729\r\n",
            "23081582946\r\n",
            "2117961170\r\n",
            "1956\r\n",
            "26\r\n",
            "4145604588400\r\n",
            "2250674901\r\n",
            "4016\r\n",
            "14453806\r\n",
            "519262873734\r\n",
            "1711\r\n",
            "4702123800\r\n",
            "49568555030448651\r\n",
            "984\r\n",
            "14510155272753\r\n",
            "2397840434982\r\n",
            "16966\r\n",
            "56083140668646\r\n",
            "1352925986505\r\n",
            "813132\r\n",
            "205695\r\n",
            "8583036\r\n",
            "18960\r\n",
            "1763140\r\n",
            "110424\r\n",
            "377984\r\n",
            "395386\r\n",
            "5657822\r\n",
            "150249\r\n",
            "353953\r\n",
            "98514\r\n",
            "243807\r\n",
            "11282\r\n",
            "245419010\r\n",
            "153074\r\n",
            "178619\r\n",
            "305610\r\n",
            "58436\r\n",
            "36753\r\n"
        ],
        "input_output": {
            "inputs": [
                "7 5 3\r\n",
                "1000000000 1 2019\r\n",
                "100 100000 1\r\n",
                "6 4 5\r\n",
                "172165 93846 84\r\n",
                "9978 99 98615\r\n",
                "9909 95875 20\r\n",
                "42651129 26190 16875\r\n",
                "5 8253 91700\r\n",
                "14712 8142 9912\r\n",
                "98898 1040 98615\r\n",
                "79674 62280 77850\r\n",
                "78139 77688 1161\r\n",
                "110518 69352 81284\r\n",
                "881706694 5710 56529\r\n",
                "863 99250 420\r\n",
                "9112063 50688 2640\r\n",
                "236009692 89900 300\r\n",
                "16145755 64220 70642\r\n",
                "997932 23910 14346\r\n",
                "9907037 55440 88480\r\n",
                "9695 9 85014\r\n",
                "99548 73888 32\r\n",
                "9742365 6750 90375\r\n",
                "95544 17793 8856\r\n",
                "2756 31707 63414\r\n",
                "936989 17028 92708\r\n",
                "9650984 18601 2090\r\n",
                "26 92701 7\r\n",
                "9980 78765 356\r\n",
                "10348323 355 83425\r\n",
                "952549276 31416 33000\r\n",
                "992869 410 9880\r\n",
                "96033 98622 100\r\n",
                "3 998 99486\r\n",
                "10652698 87345 1116\r\n",
                "303857 1990 4\r\n",
                "395013 59544 180\r\n",
                "1183 532 73416\r\n",
                "25 75060 2502\r\n",
                "4987696 29388 29865\r\n",
                "2531607 75419 14230\r\n",
                "4015 56658 19\r\n",
                "49277 166 8051\r\n",
                "9984950 40800 1152\r\n",
                "1710 11868 202\r\n",
                "96974 1 99004\r\n",
                "995676200 30 99370\r\n",
                "983 97020 105\r\n",
                "9331043 5355 81159\r\n",
                "99005952 94024 10220\r\n",
                "16965 51653 70\r\n",
                "997674659 8874 35496\r\n",
                "1647861 97967 10\r\n",
                "7526 35 7525\r\n",
                "68565 68564 1\r\n",
                "58200 198 58050\r\n",
                "14332 13672 1976\r\n",
                "7957 18 7956\r\n",
                "70343 66336 6910\r\n",
                "101407 95200 6448\r\n",
                "57986 4760 56440\r\n",
                "87728 689 87236\r\n",
                "79903 75251 7234\r\n",
                "107132 20930 92956\r\n",
                "97009 97008 129\r\n",
                "96538 95880 900\r\n",
                "7845 4410 7350\r\n",
                "79873 13 79872\r\n",
                "99573 99474 186\r\n",
                "112104 86760 69327\r\n",
                "76065 44280 39150\r\n",
                "58423 58422 9737\r\n",
                "22432 19298 5536\r\n"
            ],
            "outputs": [
                "19\r\n",
                "500000001500000001\r\n",
                "101\r\n",
                "10\r\n",
                "1735345812\r\n",
                "507929\r\n",
                "9910\r\n",
                "6737492081840\r\n",
                "6\r\n",
                "21284\r\n",
                "4761309\r\n",
                "97070\r\n",
                "108424\r\n",
                "151686\r\n",
                "680741853146475\r\n",
                "864\r\n",
                "78628667728\r\n",
                "278502953469621\r\n",
                "20303198570\r\n",
                "104545151\r\n",
                "87620910296\r\n",
                "5227761\r\n",
                "69626827\r\n",
                "126544822305\r\n",
                "157445948\r\n",
                "2757\r\n",
                "229896864\r\n",
                "222830431513\r\n",
                "27\r\n",
                "9981\r\n",
                "150833075049\r\n",
                "1718466614644254\r\n",
                "49284898280\r\n",
                "96034\r\n",
                "4\r\n",
                "6304015267729\r\n",
                "23081582946\r\n",
                "2117961170\r\n",
                "1956\r\n",
                "26\r\n",
                "4145604588400\r\n",
                "2250674901\r\n",
                "4016\r\n",
                "14453806\r\n",
                "519262873734\r\n",
                "1711\r\n",
                "4702123800\r\n",
                "49568555030448651\r\n",
                "984\r\n",
                "14510155272753\r\n",
                "2397840434982\r\n",
                "16966\r\n",
                "56083140668646\r\n",
                "1352925986505\r\n",
                "813132\r\n",
                "205695\r\n",
                "8583036\r\n",
                "18960\r\n",
                "1763140\r\n",
                "110424\r\n",
                "377984\r\n",
                "395386\r\n",
                "5657822\r\n",
                "150249\r\n",
                "353953\r\n",
                "98514\r\n",
                "243807\r\n",
                "11282\r\n",
                "245419010\r\n",
                "153074\r\n",
                "178619\r\n",
                "305610\r\n",
                "58436\r\n",
                "36753\r\n"
            ]
        },
        "solution_id_0": 94059670,
        "solution_0": "import math\n(M, A, B) = map(int, input().split())\nbound = [10 ** 9 + 7] * (A + B)\n(l, r) = (0, 0)\nwhile True:\n    bound[l] = r\n    if l >= B:\n        l -= B\n    else:\n        l += A\n    r = max(r, l)\n    if l == 0:\n        break\nans = 0\nfor i in range(0, A + B):\n    if bound[i] <= M:\n        ans += M - bound[i] + 1\nrem = M - (A + B) + 1\nif M >= A + B:\n    g = math.gcd(A, B)\n    up = rem // g * g\n    lo = rem - up\n    cnt = up // g + 1\n    ans += (lo + rem) * cnt // 2\nprint(ans)",
        "outputs_0": [
            "19\r\n",
            "500000001500000001\r\n",
            "101\r\n",
            "10\r\n",
            "1735345812\r\n",
            "507929\r\n",
            "9910\r\n",
            "6737492081840\r\n",
            "6\r\n",
            "21284\r\n",
            "4761309\r\n",
            "97070\r\n",
            "108424\r\n",
            "151686\r\n",
            "680741853146475\r\n",
            "864\r\n",
            "78628667728\r\n",
            "278502953469621\r\n",
            "20303198570\r\n",
            "104545151\r\n",
            "87620910296\r\n",
            "5227761\r\n",
            "69626827\r\n",
            "126544822305\r\n",
            "157445948\r\n",
            "2757\r\n",
            "229896864\r\n",
            "222830431513\r\n",
            "27\r\n",
            "9981\r\n",
            "150833075049\r\n",
            "1718466614644254\r\n",
            "49284898280\r\n",
            "96034\r\n",
            "4\r\n",
            "6304015267729\r\n",
            "23081582946\r\n",
            "2117961170\r\n",
            "1956\r\n",
            "26\r\n",
            "4145604588400\r\n",
            "2250674901\r\n",
            "4016\r\n",
            "14453806\r\n",
            "519262873734\r\n",
            "1711\r\n",
            "4702123800\r\n",
            "49568555030448651\r\n",
            "984\r\n",
            "14510155272753\r\n",
            "2397840434982\r\n",
            "16966\r\n",
            "56083140668646\r\n",
            "1352925986505\r\n",
            "813132\r\n",
            "205695\r\n",
            "8583036\r\n",
            "18960\r\n",
            "1763140\r\n",
            "110424\r\n",
            "377984\r\n",
            "395386\r\n",
            "5657822\r\n",
            "150249\r\n",
            "353953\r\n",
            "98514\r\n",
            "243807\r\n",
            "11282\r\n",
            "245419010\r\n",
            "153074\r\n",
            "178619\r\n",
            "305610\r\n",
            "58436\r\n",
            "36753\r\n"
        ],
        "solution_id_1": 94265236,
        "solution_1": "import math\n(M, A, B) = map(int, input().split())\nbound = [10 ** 9 + 7] * (A + B)\n(l, r) = (0, 0)\nwhile True:\n    bound[l] = r\n    if l >= B:\n        l -= B\n    else:\n        l += A\n    r = max(r, l)\n    if l == 0:\n        break\nans = 0\nfor i in range(0, A + B):\n    if bound[i] <= M:\n        ans += M - bound[i] + 1\nrem = M - (A + B) + 1\nif M >= A + B:\n    g = math.gcd(A, B)\n    up = rem // g * g\n    lo = rem - up\n    cnt = up // g + 1\n    ans += (lo + rem) * cnt // 2\nprint(ans)",
        "outputs_1": [
            "19\r\n",
            "500000001500000001\r\n",
            "101\r\n",
            "10\r\n",
            "1735345812\r\n",
            "507929\r\n",
            "9910\r\n",
            "6737492081840\r\n",
            "6\r\n",
            "21284\r\n",
            "4761309\r\n",
            "97070\r\n",
            "108424\r\n",
            "151686\r\n",
            "680741853146475\r\n",
            "864\r\n",
            "78628667728\r\n",
            "278502953469621\r\n",
            "20303198570\r\n",
            "104545151\r\n",
            "87620910296\r\n",
            "5227761\r\n",
            "69626827\r\n",
            "126544822305\r\n",
            "157445948\r\n",
            "2757\r\n",
            "229896864\r\n",
            "222830431513\r\n",
            "27\r\n",
            "9981\r\n",
            "150833075049\r\n",
            "1718466614644254\r\n",
            "49284898280\r\n",
            "96034\r\n",
            "4\r\n",
            "6304015267729\r\n",
            "23081582946\r\n",
            "2117961170\r\n",
            "1956\r\n",
            "26\r\n",
            "4145604588400\r\n",
            "2250674901\r\n",
            "4016\r\n",
            "14453806\r\n",
            "519262873734\r\n",
            "1711\r\n",
            "4702123800\r\n",
            "49568555030448651\r\n",
            "984\r\n",
            "14510155272753\r\n",
            "2397840434982\r\n",
            "16966\r\n",
            "56083140668646\r\n",
            "1352925986505\r\n",
            "813132\r\n",
            "205695\r\n",
            "8583036\r\n",
            "18960\r\n",
            "1763140\r\n",
            "110424\r\n",
            "377984\r\n",
            "395386\r\n",
            "5657822\r\n",
            "150249\r\n",
            "353953\r\n",
            "98514\r\n",
            "243807\r\n",
            "11282\r\n",
            "245419010\r\n",
            "153074\r\n",
            "178619\r\n",
            "305610\r\n",
            "58436\r\n",
            "36753\r\n"
        ],
        "solution_id_2": 53304856,
        "solution_2": "import math\n(m, a, b) = map(int, input().split())\nvis = [-1] * (a + b + 5)\nnow = 0\nmaxd = 0\nwhile True:\n    vis[now] = maxd\n    if now >= b:\n        now -= b\n    else:\n        now += a\n    if now == 0:\n        break\n    maxd = max(maxd, now)\nans = 0\nfor i in range(0, a + b):\n    if vis[i] != -1:\n        ans += max(0, m - vis[i] + 1)\nrest = m - (a + b) + 1\nif m >= a + b:\n    g = math.gcd(a, b)\n    tmp = rest // g * g\n    fir = rest - tmp\n    lst = rest\n    cnt = tmp // g + 1\n    ans += (fir + lst) * cnt // 2\nprint(int(ans))",
        "outputs_2": [
            "19\r\n",
            "500000001500000001\r\n",
            "101\r\n",
            "10\r\n",
            "1735345812\r\n",
            "507929\r\n",
            "9910\r\n",
            "6737492081840\r\n",
            "6\r\n",
            "21284\r\n",
            "4761309\r\n",
            "97070\r\n",
            "108424\r\n",
            "151686\r\n",
            "680741853146475\r\n",
            "864\r\n",
            "78628667728\r\n",
            "278502953469621\r\n",
            "20303198570\r\n",
            "104545151\r\n",
            "87620910296\r\n",
            "5227761\r\n",
            "69626827\r\n",
            "126544822305\r\n",
            "157445948\r\n",
            "2757\r\n",
            "229896864\r\n",
            "222830431513\r\n",
            "27\r\n",
            "9981\r\n",
            "150833075049\r\n",
            "1718466614644254\r\n",
            "49284898280\r\n",
            "96034\r\n",
            "4\r\n",
            "6304015267729\r\n",
            "23081582946\r\n",
            "2117961170\r\n",
            "1956\r\n",
            "26\r\n",
            "4145604588400\r\n",
            "2250674901\r\n",
            "4016\r\n",
            "14453806\r\n",
            "519262873734\r\n",
            "1711\r\n",
            "4702123800\r\n",
            "49568555030448651\r\n",
            "984\r\n",
            "14510155272753\r\n",
            "2397840434982\r\n",
            "16966\r\n",
            "56083140668646\r\n",
            "1352925986505\r\n",
            "813132\r\n",
            "205695\r\n",
            "8583036\r\n",
            "18960\r\n",
            "1763140\r\n",
            "110424\r\n",
            "377984\r\n",
            "395386\r\n",
            "5657822\r\n",
            "150249\r\n",
            "353953\r\n",
            "98514\r\n",
            "243807\r\n",
            "11282\r\n",
            "245419010\r\n",
            "153074\r\n",
            "178619\r\n",
            "305610\r\n",
            "58436\r\n",
            "36753\r\n"
        ],
        "unnorm_rating": 2046.9908687040668,
        "unnorm_rating_std": 89.4874891607803,
        "unnorm_rating_volatility": 0.06002267256292065,
        "reference_rating": 2100.0,
        "original_tags": [
            "dfs and similar",
            "math",
            "number theory"
        ],
        "ever_exist": true
    },
    {
        "contest_id": 980,
        "problem_index": "E",
        "rating": 0.5268123404231092,
        "rating_std": 0.02883753701297188,
        "rating_volatility": 2.0839434679721994e-05,
        "rating_quantile": 0.8330940884770978,
        "tag": "Greedy",
        "detailed_tag": "trees",
        "problem_name": "The Number Games",
        "problem_main": "The nation of Panel holds an annual show called The Number Games, where each district in the nation will be represented by one contestant.The nation has $$$n$$$ districts numbered from $$$1$$$ to $$$n$$$, each district has exactly one path connecting it to every other district. The number of fans of a contestant from district $$$i$$$ is equal to $$$2^i$$$.This year, the president decided to reduce the costs. He wants to remove $$$k$$$ contestants from the games. However, the districts of the removed contestants will be furious and will not allow anyone to cross through their districts. The president wants to ensure that all remaining contestants are from districts that can be reached from one another. He also wishes to maximize the total number of fans of the participating contestants.Which contestants should the president remove?",
        "problem_note": "In the first sample, the maximum possible total number of fans is $$$2^2 + 2^5 + 2^6 = 100$$$. We can achieve it by removing the contestants of the districts 1, 3, and 4.",
        "input_spec": "The first line of input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq k < n \\leq 10^6$$$)\u00a0\u2014 the number of districts in Panel, and the number of contestants the president wishes to remove, respectively.The next $$$n-1$$$ lines each contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\leq a, b \\leq n$$$, $$$a \\ne b$$$), that describe a road that connects two different districts $$$a$$$ and $$$b$$$ in the nation. It is guaranteed that there is exactly one path between every two districts.",
        "output_spec": "Print $$$k$$$ space-separated integers: the numbers of the districts of which the contestants should be removed, in increasing order of district number.",
        "sample_inputs": [
            "6 3\n2 1\n2 6\n4 2\n5 6\n2 3",
            "8 4\n2 6\n2 7\n7 8\n1 2\n3 1\n2 4\n7 5"
        ],
        "sample_outputs": [
            "1 3 4",
            "1 3 4 5"
        ],
        "inputs": [
            "6 3\r\n2 1\r\n2 6\r\n4 2\r\n5 6\r\n2 3\r\n",
            "8 4\r\n2 6\r\n2 7\r\n7 8\r\n1 2\r\n3 1\r\n2 4\r\n7 5\r\n",
            "2 1\r\n1 2\r\n",
            "3 1\r\n2 1\r\n2 3\r\n",
            "3 2\r\n1 3\r\n1 2\r\n",
            "4 2\r\n4 2\r\n1 4\r\n3 2\r\n",
            "15 3\r\n9 11\r\n11 8\r\n7 9\r\n9 14\r\n12 8\r\n10 7\r\n1 14\r\n1 5\r\n12 15\r\n10 3\r\n5 2\r\n13 15\r\n4 13\r\n6 4\r\n",
            "15 12\r\n2 3\r\n2 14\r\n4 3\r\n4 10\r\n3 5\r\n1 4\r\n1 12\r\n4 15\r\n3 9\r\n10 7\r\n11 2\r\n12 8\r\n15 13\r\n1 6\r\n",
            "32 16\r\n32 8\r\n11 32\r\n22 8\r\n22 17\r\n22 3\r\n16 22\r\n8 12\r\n22 7\r\n8 27\r\n11 6\r\n32 4\r\n9 8\r\n10 22\r\n22 31\r\n1 22\r\n21 11\r\n22 15\r\n14 32\r\n32 30\r\n22 29\r\n24 11\r\n18 11\r\n25 32\r\n13 8\r\n2 32\r\n28 8\r\n32 5\r\n11 20\r\n11 19\r\n22 23\r\n26 32\r\n",
            "32 1\r\n30 25\r\n30 8\r\n8 22\r\n22 20\r\n21 20\r\n6 21\r\n29 6\r\n4 29\r\n2 4\r\n13 2\r\n1 13\r\n1 11\r\n11 24\r\n31 24\r\n31 15\r\n15 14\r\n27 14\r\n16 27\r\n5 16\r\n12 5\r\n9 12\r\n9 18\r\n3 18\r\n3 17\r\n17 19\r\n19 32\r\n32 10\r\n10 26\r\n7 26\r\n7 23\r\n23 28\r\n",
            "32 2\r\n7 20\r\n15 20\r\n7 18\r\n31 20\r\n28 15\r\n20 25\r\n27 31\r\n27 6\r\n27 12\r\n6 16\r\n22 6\r\n21 22\r\n13 6\r\n16 5\r\n23 5\r\n23 26\r\n23 24\r\n23 17\r\n24 14\r\n17 4\r\n29 4\r\n2 24\r\n30 29\r\n1 29\r\n8 4\r\n30 32\r\n11 2\r\n32 3\r\n1 9\r\n11 10\r\n19 32\r\n",
            "64 46\r\n52 22\r\n38 52\r\n28 38\r\n46 38\r\n30 38\r\n30 37\r\n7 37\r\n37 48\r\n48 27\r\n2 7\r\n27 11\r\n32 2\r\n32 35\r\n8 11\r\n59 32\r\n58 59\r\n59 24\r\n58 40\r\n40 4\r\n40 49\r\n40 41\r\n49 16\r\n9 16\r\n5 9\r\n12 9\r\n9 62\r\n3 62\r\n12 63\r\n63 25\r\n64 63\r\n63 42\r\n36 42\r\n45 36\r\n14 45\r\n53 45\r\n39 53\r\n60 39\r\n50 39\r\n50 23\r\n23 10\r\n19 50\r\n20 10\r\n19 56\r\n21 56\r\n31 56\r\n44 31\r\n26 31\r\n1 31\r\n43 44\r\n15 26\r\n15 6\r\n6 29\r\n47 6\r\n18 6\r\n29 55\r\n18 54\r\n33 54\r\n61 55\r\n54 17\r\n61 34\r\n13 17\r\n17 51\r\n57 34\r\n",
            "64 63\r\n11 51\r\n64 11\r\n64 39\r\n11 6\r\n24 64\r\n51 63\r\n43 51\r\n64 29\r\n6 22\r\n47 6\r\n1 47\r\n41 22\r\n41 38\r\n4 47\r\n35 47\r\n41 23\r\n45 1\r\n52 35\r\n26 45\r\n15 35\r\n21 35\r\n23 32\r\n12 21\r\n21 62\r\n25 21\r\n28 25\r\n15 54\r\n57 12\r\n20 28\r\n48 57\r\n8 57\r\n20 44\r\n46 28\r\n18 57\r\n8 9\r\n27 9\r\n48 34\r\n50 46\r\n9 56\r\n9 61\r\n7 56\r\n19 61\r\n61 17\r\n42 17\r\n19 58\r\n58 30\r\n7 14\r\n7 59\r\n31 19\r\n17 5\r\n55 14\r\n13 31\r\n2 31\r\n59 40\r\n55 49\r\n2 60\r\n2 53\r\n36 2\r\n37 13\r\n2 16\r\n53 33\r\n37 10\r\n60 3\r\n",
            "64 21\r\n33 48\r\n33 64\r\n55 48\r\n11 55\r\n18 11\r\n62 55\r\n48 57\r\n17 62\r\n64 52\r\n30 48\r\n49 48\r\n23 18\r\n13 11\r\n9 64\r\n11 5\r\n11 45\r\n2 55\r\n62 56\r\n64 36\r\n33 10\r\n34 18\r\n55 43\r\n3 48\r\n60 62\r\n48 32\r\n33 8\r\n62 41\r\n44 11\r\n33 46\r\n15 33\r\n14 62\r\n11 6\r\n64 31\r\n62 20\r\n64 25\r\n62 51\r\n53 33\r\n62 40\r\n18 4\r\n16 62\r\n21 11\r\n33 22\r\n37 33\r\n59 62\r\n55 7\r\n27 64\r\n24 64\r\n39 64\r\n19 62\r\n54 55\r\n33 61\r\n47 48\r\n58 55\r\n42 55\r\n38 11\r\n50 18\r\n28 48\r\n11 26\r\n11 1\r\n62 35\r\n64 29\r\n12 33\r\n18 63\r\n"
        ],
        "answers": [
            "1 3 4\r\n",
            "1 3 4 5\r\n",
            "1\r\n",
            "1\r\n",
            "1 2\r\n",
            "1 3\r\n",
            "1 2 5\r\n",
            "1 2 3 5 6 7 8 9 10 11 12 14\r\n",
            "1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18\r\n",
            "25\r\n",
            "3 8\r\n",
            "1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61\r\n",
            "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n",
            "1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23\r\n"
        ],
        "input_output": {
            "inputs": [
                "6 3\r\n2 1\r\n2 6\r\n4 2\r\n5 6\r\n2 3\r\n",
                "8 4\r\n2 6\r\n2 7\r\n7 8\r\n1 2\r\n3 1\r\n2 4\r\n7 5\r\n",
                "2 1\r\n1 2\r\n",
                "3 1\r\n2 1\r\n2 3\r\n",
                "3 2\r\n1 3\r\n1 2\r\n",
                "4 2\r\n4 2\r\n1 4\r\n3 2\r\n",
                "15 3\r\n9 11\r\n11 8\r\n7 9\r\n9 14\r\n12 8\r\n10 7\r\n1 14\r\n1 5\r\n12 15\r\n10 3\r\n5 2\r\n13 15\r\n4 13\r\n6 4\r\n",
                "15 12\r\n2 3\r\n2 14\r\n4 3\r\n4 10\r\n3 5\r\n1 4\r\n1 12\r\n4 15\r\n3 9\r\n10 7\r\n11 2\r\n12 8\r\n15 13\r\n1 6\r\n",
                "32 16\r\n32 8\r\n11 32\r\n22 8\r\n22 17\r\n22 3\r\n16 22\r\n8 12\r\n22 7\r\n8 27\r\n11 6\r\n32 4\r\n9 8\r\n10 22\r\n22 31\r\n1 22\r\n21 11\r\n22 15\r\n14 32\r\n32 30\r\n22 29\r\n24 11\r\n18 11\r\n25 32\r\n13 8\r\n2 32\r\n28 8\r\n32 5\r\n11 20\r\n11 19\r\n22 23\r\n26 32\r\n",
                "32 1\r\n30 25\r\n30 8\r\n8 22\r\n22 20\r\n21 20\r\n6 21\r\n29 6\r\n4 29\r\n2 4\r\n13 2\r\n1 13\r\n1 11\r\n11 24\r\n31 24\r\n31 15\r\n15 14\r\n27 14\r\n16 27\r\n5 16\r\n12 5\r\n9 12\r\n9 18\r\n3 18\r\n3 17\r\n17 19\r\n19 32\r\n32 10\r\n10 26\r\n7 26\r\n7 23\r\n23 28\r\n",
                "32 2\r\n7 20\r\n15 20\r\n7 18\r\n31 20\r\n28 15\r\n20 25\r\n27 31\r\n27 6\r\n27 12\r\n6 16\r\n22 6\r\n21 22\r\n13 6\r\n16 5\r\n23 5\r\n23 26\r\n23 24\r\n23 17\r\n24 14\r\n17 4\r\n29 4\r\n2 24\r\n30 29\r\n1 29\r\n8 4\r\n30 32\r\n11 2\r\n32 3\r\n1 9\r\n11 10\r\n19 32\r\n",
                "64 46\r\n52 22\r\n38 52\r\n28 38\r\n46 38\r\n30 38\r\n30 37\r\n7 37\r\n37 48\r\n48 27\r\n2 7\r\n27 11\r\n32 2\r\n32 35\r\n8 11\r\n59 32\r\n58 59\r\n59 24\r\n58 40\r\n40 4\r\n40 49\r\n40 41\r\n49 16\r\n9 16\r\n5 9\r\n12 9\r\n9 62\r\n3 62\r\n12 63\r\n63 25\r\n64 63\r\n63 42\r\n36 42\r\n45 36\r\n14 45\r\n53 45\r\n39 53\r\n60 39\r\n50 39\r\n50 23\r\n23 10\r\n19 50\r\n20 10\r\n19 56\r\n21 56\r\n31 56\r\n44 31\r\n26 31\r\n1 31\r\n43 44\r\n15 26\r\n15 6\r\n6 29\r\n47 6\r\n18 6\r\n29 55\r\n18 54\r\n33 54\r\n61 55\r\n54 17\r\n61 34\r\n13 17\r\n17 51\r\n57 34\r\n",
                "64 63\r\n11 51\r\n64 11\r\n64 39\r\n11 6\r\n24 64\r\n51 63\r\n43 51\r\n64 29\r\n6 22\r\n47 6\r\n1 47\r\n41 22\r\n41 38\r\n4 47\r\n35 47\r\n41 23\r\n45 1\r\n52 35\r\n26 45\r\n15 35\r\n21 35\r\n23 32\r\n12 21\r\n21 62\r\n25 21\r\n28 25\r\n15 54\r\n57 12\r\n20 28\r\n48 57\r\n8 57\r\n20 44\r\n46 28\r\n18 57\r\n8 9\r\n27 9\r\n48 34\r\n50 46\r\n9 56\r\n9 61\r\n7 56\r\n19 61\r\n61 17\r\n42 17\r\n19 58\r\n58 30\r\n7 14\r\n7 59\r\n31 19\r\n17 5\r\n55 14\r\n13 31\r\n2 31\r\n59 40\r\n55 49\r\n2 60\r\n2 53\r\n36 2\r\n37 13\r\n2 16\r\n53 33\r\n37 10\r\n60 3\r\n",
                "64 21\r\n33 48\r\n33 64\r\n55 48\r\n11 55\r\n18 11\r\n62 55\r\n48 57\r\n17 62\r\n64 52\r\n30 48\r\n49 48\r\n23 18\r\n13 11\r\n9 64\r\n11 5\r\n11 45\r\n2 55\r\n62 56\r\n64 36\r\n33 10\r\n34 18\r\n55 43\r\n3 48\r\n60 62\r\n48 32\r\n33 8\r\n62 41\r\n44 11\r\n33 46\r\n15 33\r\n14 62\r\n11 6\r\n64 31\r\n62 20\r\n64 25\r\n62 51\r\n53 33\r\n62 40\r\n18 4\r\n16 62\r\n21 11\r\n33 22\r\n37 33\r\n59 62\r\n55 7\r\n27 64\r\n24 64\r\n39 64\r\n19 62\r\n54 55\r\n33 61\r\n47 48\r\n58 55\r\n42 55\r\n38 11\r\n50 18\r\n28 48\r\n11 26\r\n11 1\r\n62 35\r\n64 29\r\n12 33\r\n18 63\r\n"
            ],
            "outputs": [
                "1 3 4\r\n",
                "1 3 4 5\r\n",
                "1\r\n",
                "1\r\n",
                "1 2\r\n",
                "1 3\r\n",
                "1 2 5\r\n",
                "1 2 3 5 6 7 8 9 10 11 12 14\r\n",
                "1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18\r\n",
                "25\r\n",
                "3 8\r\n",
                "1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61\r\n",
                "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n",
                "1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23\r\n"
            ]
        },
        "solution_id_0": 177440068,
        "solution_0": "import bisect\nimport sys, os, io\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\ndef euler_tour(s):\n    st = [s]\n    now = [0] * (n + 1)\n    t = 1\n    t1 = [-1] * (n + 1)\n    v = [-1]\n    inf = pow(10, 9) + 1\n    dist = [inf] * (n + 1)\n    dist[s] = 0\n    parent = [-1] * (n + 1)\n    while st:\n        i = st[-1]\n        if t1[i] == -1:\n            v.append(i)\n            t1[i] = t\n            t += 1\n        while now[i] < len(G[i]) and t1[G[i][now[i]]] ^ -1:\n            now[i] += 1\n        if now[i] == len(G[i]):\n            st.pop()\n        else:\n            st.append(G[i][now[i]])\n            dist[st[-1]] = dist[i] + 1\n            parent[st[-1]] = i\n            now[i] += 1\n    return (t1, v, dist, parent)\n(n, k) = map(int, input().split())\nG = [[] for _ in range(n + 1)]\nfor _ in range(n - 1):\n    (a, b) = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\n(t, x, dist, parent) = euler_tour(n)\nd = [[] for _ in range(max(dist[1:]) + 1)]\nfor i in range(1, n + 1):\n    d[dist[i]].append(t[i])\nfor i in range(len(d)):\n    d[i].sort()\npow2 = [1]\nfor _ in range(20):\n    pow2.append(2 * pow2[-1])\nvisit = [0] * (n + 1)\nvisit[n] = 1\ncnt = 1\nfor i in range(n - 1, 0, -1):\n    if visit[i]:\n        continue\n    (u, c) = (i, dist[i] - (n - k - cnt))\n    ok = 1\n    if c >= 0 and (not visit[x[d[c][bisect.bisect_left(d[c], t[i]) - 1]]]):\n        ok = 0\n    if ok:\n        u = i\n        while not visit[u]:\n            visit[u] = 1\n            cnt += 1\n            u = parent[u]\n    if cnt == n - k:\n        break\nans = []\nfor i in range(1, n + 1):\n    if not visit[i]:\n        ans.append(i)\nsys.stdout.write(' '.join(map(str, ans)))",
        "outputs_0": [
            "1 3 4",
            "1 3 4 5",
            "1",
            "1",
            "1 2",
            "1 3",
            "1 2 5",
            "1 2 3 5 6 7 8 9 10 11 12 14",
            "1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18",
            "25",
            "3 8",
            "1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61",
            "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63",
            "1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23"
        ],
        "solution_id_1": 178015000,
        "solution_1": "import bisect\nimport sys, os, io\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\ndef euler_tour(s, G, u):\n    st = [s]\n    t = 1\n    now = list(u)\n    t1 = [-1] * (n + 1)\n    v = [-1]\n    inf = pow(10, 15) + 1\n    dp = [inf] * (n + 1)\n    dp[s] = s\n    while st:\n        i = st[-1]\n        if t1[i] == -1:\n            v.append(i)\n            t1[i] = t\n            t += 1\n        while now[i] < u[i + 1] and t1[G[now[i]]] ^ -1:\n            now[i] += 1\n        if now[i] == u[i + 1]:\n            st.pop()\n        else:\n            st.append(G[now[i]])\n            dp[st[-1]] = (dp[i] // (n + 1) + 1) * (n + 1) + i\n            now[i] += 1\n    return (t1, v, dp)\n\ndef make_graph(n, m):\n    (x, s) = ([], [0] * (n + 3))\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        s[u + 2] += 1\n        s[v + 2] += 1\n        x.append(u)\n        x.append(v)\n    for i in range(3, n + 3):\n        s[i] += s[i - 1]\n    G = [0] * (2 * m)\n    for i in range(2 * m):\n        j = x[i] + 1\n        G[s[j]] = x[i ^ 1]\n        s[j] += 1\n    return (G, s)\n(n, k) = map(int, input().split())\nG = []\ns = [-1] * (n + 2)\n(G, s) = make_graph(n, n - 1)\n(t, x, dp) = euler_tour(n, G, s)\nd = [dp[i] // (n + 1) * (n + 1) + t[i] for i in range(1, n + 1)]\nd.sort()\nvisit = [0] * (n + 1)\nvisit[n] = 1\ncnt = 1\nfor i in range(n - 1, 0, -1):\n    if cnt == n - k:\n        break\n    if visit[i]:\n        continue\n    c = dp[i] // (n + 1) - (n - k - cnt)\n    ok = 1\n    if c >= 0 and (not visit[x[d[bisect.bisect_left(d, c * (n + 1) + t[i]) - 1] % (n + 1)]]):\n        ok = 0\n    if ok:\n        u = i\n        while not visit[u]:\n            visit[u] = 1\n            cnt += 1\n            u = dp[u] % (n + 1)\nans = []\nfor i in range(1, n + 1):\n    if not visit[i]:\n        ans.append(i)\nsys.stdout.write(' '.join(map(str, ans)))",
        "outputs_1": [
            "1 3 4",
            "1 3 4 5",
            "1",
            "1",
            "1 2",
            "1 3",
            "1 2 5",
            "1 2 3 5 6 7 8 9 10 11 12 14",
            "1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18",
            "25",
            "3 8",
            "1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61",
            "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63",
            "1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23"
        ],
        "solution_id_2": 177462021,
        "solution_2": "import bisect\nimport sys, os, io\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\ndef euler_tour(s, G, u):\n    st = [s]\n    t = 1\n    now = list(u)\n    t1 = [-1] * (n + 1)\n    v = [-1]\n    inf = pow(10, 15) + 1\n    dp = [inf] * (n + 1)\n    dp[s] = s\n    while st:\n        i = st[-1]\n        if t1[i] == -1:\n            v.append(i)\n            t1[i] = t\n            t += 1\n        while now[i] < u[i + 1] and t1[G[now[i]]] ^ -1:\n            now[i] += 1\n        if now[i] == u[i + 1]:\n            st.pop()\n        else:\n            st.append(G[now[i]])\n            dp[st[-1]] = (dp[i] // (n + 1) + 1) * (n + 1) + i\n            now[i] += 1\n    return (t1, v, dp)\n(n, k) = map(int, input().split())\nG = []\ns = [-1] * (n + 2)\nfor _ in range(n - 1):\n    (a, b) = map(int, input().split())\n    G.append(a * (n + 1) + b)\n    G.append(b * (n + 1) + a)\nG.sort()\nfor i in range(2 * (n - 1)):\n    u = G[i] // (n + 1)\n    if s[u] == -1:\n        s[u] = i\n    G[i] %= n + 1\ns[-1] = 2 * (n - 1)\n(t, x, dp) = euler_tour(n, G, s)\nd = [dp[i] // (n + 1) * (n + 1) + t[i] for i in range(1, n + 1)]\nd.sort()\nvisit = [0] * (n + 1)\nvisit[n] = 1\ncnt = 1\nfor i in range(n - 1, 0, -1):\n    if cnt == n - k:\n        break\n    if visit[i]:\n        continue\n    c = dp[i] // (n + 1) - (n - k - cnt)\n    ok = 1\n    if c >= 0 and (not visit[x[d[bisect.bisect_left(d, c * (n + 1) + t[i]) - 1] % (n + 1)]]):\n        ok = 0\n    if ok:\n        u = i\n        while not visit[u]:\n            visit[u] = 1\n            cnt += 1\n            u = dp[u] % (n + 1)\nans = []\nfor i in range(1, n + 1):\n    if not visit[i]:\n        ans.append(i)\nsys.stdout.write(' '.join(map(str, ans)))",
        "outputs_2": [
            "1 3 4",
            "1 3 4 5",
            "1",
            "1",
            "1 2",
            "1 3",
            "1 2 5",
            "1 2 3 5 6 7 8 9 10 11 12 14",
            "1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18",
            "25",
            "3 8",
            "1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61",
            "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63",
            "1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23"
        ],
        "unnorm_rating": 2137.5488542407925,
        "unnorm_rating_std": 83.03203718230672,
        "unnorm_rating_volatility": 0.06000306872277532,
        "reference_rating": 2200.0,
        "original_tags": [
            "data structures",
            "greedy",
            "trees"
        ],
        "ever_exist": false
    },
    {
        "contest_id": 1709,
        "problem_index": "F",
        "rating": 0.6357923046865371,
        "rating_std": 0.026886633928892102,
        "rating_volatility": 2.0847080628078597e-05,
        "rating_quantile": 0.9425812345034582,
        "tag": "Math",
        "detailed_tag": "meet-in-the-middle",
        "problem_name": "Multiset of Strings",
        "problem_main": "You are given three integers $$$n$$$, $$$k$$$ and $$$f$$$.Consider all binary strings (i.\u2009e. all strings consisting of characters $$$0$$$ and/or $$$1$$$) of length from $$$1$$$ to $$$n$$$. For every such string $$$s$$$, you need to choose an integer $$$c_s$$$ from $$$0$$$ to $$$k$$$.A multiset of binary strings of length exactly $$$n$$$ is considered beautiful if for every binary string $$$s$$$ with length from $$$1$$$ to $$$n$$$, the number of strings in the multiset such that $$$s$$$ is their prefix is not exceeding $$$c_s$$$.For example, let $$$n = 2$$$, $$$c_{0} = 3$$$, $$$c_{00} = 1$$$, $$$c_{01} = 2$$$, $$$c_{1} = 1$$$, $$$c_{10} = 2$$$, and $$$c_{11} = 3$$$. The multiset of strings $$$\\{11, 01, 00, 01\\}$$$ is beautiful, since:  for the string $$$0$$$, there are $$$3$$$ strings in the multiset such that $$$0$$$ is their prefix, and $$$3 \\le c_0$$$;  for the string $$$00$$$, there is one string in the multiset such that $$$00$$$ is its prefix, and $$$1 \\le c_{00}$$$;  for the string $$$01$$$, there are $$$2$$$ strings in the multiset such that $$$01$$$ is their prefix, and $$$2 \\le c_{01}$$$;  for the string $$$1$$$, there is one string in the multiset such that $$$1$$$ is its prefix, and $$$1 \\le c_1$$$;  for the string $$$10$$$, there are $$$0$$$ strings in the multiset such that $$$10$$$ is their prefix, and $$$0 \\le c_{10}$$$;  for the string $$$11$$$, there is one string in the multiset such that $$$11$$$ is its prefix, and $$$1 \\le c_{11}$$$. Now, for the problem itself. You have to calculate the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$.",
        "problem_note": "In the first example, the three ways to choose the integers $$$c_s$$$ are:  $$$c_0 = 0$$$, $$$c_1 = 2$$$, then the maximum beautiful multiset is $$$\\{1, 1\\}$$$;  $$$c_0 = 1$$$, $$$c_1 = 1$$$, then the maximum beautiful multiset is $$$\\{0, 1\\}$$$;  $$$c_0 = 2$$$, $$$c_1 = 0$$$, then the maximum beautiful multiset is $$$\\{0, 0\\}$$$. ",
        "input_spec": "The only line of input contains three integers $$$n$$$, $$$k$$$ and $$$f$$$ ($$$1 \\le n \\le 15$$$; $$$1 \\le k, f \\le 2 \\cdot 10^5$$$).",
        "output_spec": "Print one integer \u2014 the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$. Since it can be huge, print it modulo $$$998244353$$$.",
        "sample_inputs": [
            "1 42 2",
            "2 37 13",
            "4 1252 325",
            "6 153 23699",
            "15 200000 198756"
        ],
        "sample_outputs": [
            "3",
            "36871576",
            "861735572",
            "0",
            "612404746"
        ],
        "inputs": [
            "1 42 2\r\n",
            "2 37 13\r\n",
            "4 1252 325\r\n",
            "6 153 23699\r\n",
            "15 200000 198756\r\n",
            "1 1 1\r\n",
            "1 1 100000\r\n",
            "1 1 200000\r\n",
            "1 100000 1\r\n",
            "1 100000 100000\r\n",
            "1 100000 200000\r\n",
            "1 200000 1\r\n",
            "1 200000 100000\r\n",
            "1 200000 200000\r\n",
            "7 1 1\r\n",
            "7 1 100000\r\n",
            "7 1 200000\r\n",
            "7 100000 1\r\n",
            "7 100000 100000\r\n",
            "7 100000 200000\r\n",
            "7 200000 1\r\n",
            "7 200000 100000\r\n",
            "7 200000 200000\r\n",
            "15 1 1\r\n",
            "15 1 100000\r\n",
            "15 1 200000\r\n",
            "15 100000 1\r\n",
            "15 100000 100000\r\n",
            "15 100000 200000\r\n",
            "15 200000 1\r\n",
            "15 200000 100000\r\n",
            "15 200000 200000\r\n",
            "15 199999 200000\r\n"
        ],
        "answers": [
            "3\r\n",
            "36871576\r\n",
            "861735572\r\n",
            "0\r\n",
            "612404746\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "100001\r\n",
            "1\r\n",
            "2\r\n",
            "100001\r\n",
            "200001\r\n",
            "10802803\r\n",
            "0\r\n",
            "0\r\n",
            "477825325\r\n",
            "569581672\r\n",
            "136436465\r\n",
            "90602327\r\n",
            "331190498\r\n",
            "343099201\r\n",
            "240127335\r\n",
            "0\r\n",
            "0\r\n",
            "737847906\r\n",
            "607648863\r\n",
            "816613688\r\n",
            "836547474\r\n",
            "63705590\r\n",
            "894782321\r\n",
            "437780341\r\n"
        ],
        "input_output": {
            "inputs": [
                "1 42 2\r\n",
                "2 37 13\r\n",
                "4 1252 325\r\n",
                "6 153 23699\r\n",
                "15 200000 198756\r\n",
                "1 1 1\r\n",
                "1 1 100000\r\n",
                "1 1 200000\r\n",
                "1 100000 1\r\n",
                "1 100000 100000\r\n",
                "1 100000 200000\r\n",
                "1 200000 1\r\n",
                "1 200000 100000\r\n",
                "1 200000 200000\r\n",
                "7 1 1\r\n",
                "7 1 100000\r\n",
                "7 1 200000\r\n",
                "7 100000 1\r\n",
                "7 100000 100000\r\n",
                "7 100000 200000\r\n",
                "7 200000 1\r\n",
                "7 200000 100000\r\n",
                "7 200000 200000\r\n",
                "15 1 1\r\n",
                "15 1 100000\r\n",
                "15 1 200000\r\n",
                "15 100000 1\r\n",
                "15 100000 100000\r\n",
                "15 100000 200000\r\n",
                "15 200000 1\r\n",
                "15 200000 100000\r\n",
                "15 200000 200000\r\n",
                "15 199999 200000\r\n"
            ],
            "outputs": [
                "3\r\n",
                "36871576\r\n",
                "861735572\r\n",
                "0\r\n",
                "612404746\r\n",
                "2\r\n",
                "0\r\n",
                "0\r\n",
                "2\r\n",
                "100001\r\n",
                "1\r\n",
                "2\r\n",
                "100001\r\n",
                "200001\r\n",
                "10802803\r\n",
                "0\r\n",
                "0\r\n",
                "477825325\r\n",
                "569581672\r\n",
                "136436465\r\n",
                "90602327\r\n",
                "331190498\r\n",
                "343099201\r\n",
                "240127335\r\n",
                "0\r\n",
                "0\r\n",
                "737847906\r\n",
                "607648863\r\n",
                "816613688\r\n",
                "836547474\r\n",
                "63705590\r\n",
                "894782321\r\n",
                "437780341\r\n"
            ]
        },
        "solution_id_0": 183012586,
        "solution_0": "MOD = 998244353\nIMAG = 911660635\nIIMAG = 86583718\nrate2 = (0, 911660635, 509520358, 369330050, 332049552, 983190778, 123842337, 238493703, 975955924, 603855026, 856644456, 131300601, 842657263, 730768835, 942482514, 806263778, 151565301, 510815449, 503497456, 743006876, 741047443, 56250497, 867605899, 0)\nirate2 = (0, 86583718, 372528824, 373294451, 645684063, 112220581, 692852209, 155456985, 797128860, 90816748, 860285882, 927414960, 354738543, 109331171, 293255632, 535113200, 308540755, 121186627, 608385704, 438932459, 359477183, 824071951, 103369235, 0)\nrate3 = (0, 372528824, 337190230, 454590761, 816400692, 578227951, 180142363, 83780245, 6597683, 70046822, 623238099, 183021267, 402682409, 631680428, 344509872, 689220186, 365017329, 774342554, 729444058, 102986190, 128751033, 395565204, 0)\nirate3 = (0, 509520358, 929031873, 170256584, 839780419, 282974284, 395914482, 444904435, 72135471, 638914820, 66769500, 771127074, 985925487, 262319669, 262341272, 625870173, 768022760, 859816005, 914661783, 430819711, 272774365, 530924681, 0)\n\ndef butterfly(a):\n    n = len(a)\n    h = (n - 1).bit_length()\n    le = 0\n    while le < h:\n        if h - le == 1:\n            p = 1 << h - le - 1\n            rot = 1\n            for s in range(1 << le):\n                offset = s << h - le\n                for i in range(p):\n                    l = a[i + offset]\n                    r = a[i + offset + p] * rot\n                    a[i + offset] = (l + r) % MOD\n                    a[i + offset + p] = (l - r) % MOD\n                rot *= rate2[(~s & -~s).bit_length()]\n                rot %= MOD\n            le += 1\n        else:\n            p = 1 << h - le - 2\n            rot = 1\n            for s in range(1 << le):\n                rot2 = rot * rot % MOD\n                rot3 = rot2 * rot % MOD\n                offset = s << h - le\n                for i in range(p):\n                    a0 = a[i + offset]\n                    a1 = a[i + offset + p] * rot\n                    a2 = a[i + offset + p * 2] * rot2\n                    a3 = a[i + offset + p * 3] * rot3\n                    a1na3imag = (a1 - a3) % MOD * IMAG\n                    a[i + offset] = (a0 + a2 + a1 + a3) % MOD\n                    a[i + offset + p] = (a0 + a2 - a1 - a3) % MOD\n                    a[i + offset + p * 2] = (a0 - a2 + a1na3imag) % MOD\n                    a[i + offset + p * 3] = (a0 - a2 - a1na3imag) % MOD\n                rot *= rate3[(~s & -~s).bit_length()]\n                rot %= MOD\n            le += 2\n\ndef butterfly_inv(a):\n    n = len(a)\n    h = (n - 1).bit_length()\n    le = h\n    while le:\n        if le == 1:\n            p = 1 << h - le\n            irot = 1\n            for s in range(1 << le - 1):\n                offset = s << h - le + 1\n                for i in range(p):\n                    l = a[i + offset]\n                    r = a[i + offset + p]\n                    a[i + offset] = (l + r) % MOD\n                    a[i + offset + p] = (l - r) * irot % MOD\n                irot *= irate2[(~s & -~s).bit_length()]\n                irot %= MOD\n            le -= 1\n        else:\n            p = 1 << h - le\n            irot = 1\n            for s in range(1 << le - 2):\n                irot2 = irot * irot % MOD\n                irot3 = irot2 * irot % MOD\n                offset = s << h - le + 2\n                for i in range(p):\n                    a0 = a[i + offset]\n                    a1 = a[i + offset + p]\n                    a2 = a[i + offset + p * 2]\n                    a3 = a[i + offset + p * 3]\n                    a2na3iimag = (a2 - a3) * IIMAG % MOD\n                    a[i + offset] = (a0 + a1 + a2 + a3) % MOD\n                    a[i + offset + p] = (a0 - a1 + a2na3iimag) * irot % MOD\n                    a[i + offset + p * 2] = (a0 + a1 - a2 - a3) * irot2 % MOD\n                    a[i + offset + p * 3] = (a0 - a1 - a2na3iimag) * irot3 % MOD\n                irot *= irate3[(~s & -~s).bit_length()]\n                irot %= MOD\n            le -= 2\n\ndef multiply(s, t):\n    n = len(s)\n    m = len(t)\n    if min(n, m) <= 60:\n        a = [0] * (n + m - 1)\n        for i in range(n):\n            if i % 8 == 0:\n                for j in range(m):\n                    a[i + j] += s[i] * t[j]\n                    a[i + j] %= MOD\n            else:\n                for j in range(m):\n                    a[i + j] += s[i] * t[j]\n        return [x % MOD for x in a]\n    a = s.copy()\n    b = t.copy()\n    z = 1 << (n + m - 2).bit_length()\n    a += [0] * (z - n)\n    b += [0] * (z - m)\n    butterfly(a)\n    butterfly(b)\n    for i in range(z):\n        a[i] *= b[i]\n        a[i] %= MOD\n    butterfly_inv(a)\n    a = a[:n + m - 1]\n    iz = pow(z, MOD - 2, MOD)\n    return [v * iz % MOD for v in a]\n(n, k, f) = map(int, input().split())\ndp = [1] * (k + 1)\nfor i in range(n):\n    ndp = multiply(dp, dp)\n    if i == n - 1:\n        if len(ndp) >= f:\n            print(ndp[f])\n        else:\n            print(0)\n        exit()\n    dp = [0] * (k + 1)\n    tmp = 0\n    for i in range(2 * k, -1, -1):\n        tmp += ndp[i]\n        tmp %= MOD\n        if i <= k:\n            dp[i] = (tmp + ndp[i] * (k - i)) % MOD",
        "outputs_0": [
            "3\r\n",
            "36871576\r\n",
            "861735572\r\n",
            "0\r\n",
            "612404746\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "100001\r\n",
            "1\r\n",
            "2\r\n",
            "100001\r\n",
            "200001\r\n",
            "10802803\r\n",
            "0\r\n",
            "0\r\n",
            "477825325\r\n",
            "569581672\r\n",
            "136436465\r\n",
            "90602327\r\n",
            "331190498\r\n",
            "343099201\r\n",
            "240127335\r\n",
            "0\r\n",
            "0\r\n",
            "737847906\r\n",
            "607648863\r\n",
            "816613688\r\n",
            "836547474\r\n",
            "63705590\r\n",
            "894782321\r\n",
            "437780341\r\n"
        ],
        "solution_id_1": 165207973,
        "solution_1": "MOD = 998244353\nIMAG = 911660635\nIIMAG = 86583718\nrate2 = (0, 911660635, 509520358, 369330050, 332049552, 983190778, 123842337, 238493703, 975955924, 603855026, 856644456, 131300601, 842657263, 730768835, 942482514, 806263778, 151565301, 510815449, 503497456, 743006876, 741047443, 56250497, 867605899, 0)\nirate2 = (0, 86583718, 372528824, 373294451, 645684063, 112220581, 692852209, 155456985, 797128860, 90816748, 860285882, 927414960, 354738543, 109331171, 293255632, 535113200, 308540755, 121186627, 608385704, 438932459, 359477183, 824071951, 103369235, 0)\nrate3 = (0, 372528824, 337190230, 454590761, 816400692, 578227951, 180142363, 83780245, 6597683, 70046822, 623238099, 183021267, 402682409, 631680428, 344509872, 689220186, 365017329, 774342554, 729444058, 102986190, 128751033, 395565204, 0)\nirate3 = (0, 509520358, 929031873, 170256584, 839780419, 282974284, 395914482, 444904435, 72135471, 638914820, 66769500, 771127074, 985925487, 262319669, 262341272, 625870173, 768022760, 859816005, 914661783, 430819711, 272774365, 530924681, 0)\n\ndef butterfly(a):\n    n = len(a)\n    h = (n - 1).bit_length()\n    le = 0\n    while le < h:\n        if h - le == 1:\n            p = 1 << h - le - 1\n            rot = 1\n            for s in range(1 << le):\n                offset = s << h - le\n                for i in range(p):\n                    l = a[i + offset]\n                    r = a[i + offset + p] * rot\n                    a[i + offset] = (l + r) % MOD\n                    a[i + offset + p] = (l - r) % MOD\n                rot *= rate2[(~s & -~s).bit_length()]\n                rot %= MOD\n            le += 1\n        else:\n            p = 1 << h - le - 2\n            rot = 1\n            for s in range(1 << le):\n                rot2 = rot * rot % MOD\n                rot3 = rot2 * rot % MOD\n                offset = s << h - le\n                for i in range(p):\n                    a0 = a[i + offset]\n                    a1 = a[i + offset + p] * rot\n                    a2 = a[i + offset + p * 2] * rot2\n                    a3 = a[i + offset + p * 3] * rot3\n                    a1na3imag = (a1 - a3) % MOD * IMAG\n                    a[i + offset] = (a0 + a2 + a1 + a3) % MOD\n                    a[i + offset + p] = (a0 + a2 - a1 - a3) % MOD\n                    a[i + offset + p * 2] = (a0 - a2 + a1na3imag) % MOD\n                    a[i + offset + p * 3] = (a0 - a2 - a1na3imag) % MOD\n                rot *= rate3[(~s & -~s).bit_length()]\n                rot %= MOD\n            le += 2\n\ndef butterfly_inv(a):\n    n = len(a)\n    h = (n - 1).bit_length()\n    le = h\n    while le:\n        if le == 1:\n            p = 1 << h - le\n            irot = 1\n            for s in range(1 << le - 1):\n                offset = s << h - le + 1\n                for i in range(p):\n                    l = a[i + offset]\n                    r = a[i + offset + p]\n                    a[i + offset] = (l + r) % MOD\n                    a[i + offset + p] = (l - r) * irot % MOD\n                irot *= irate2[(~s & -~s).bit_length()]\n                irot %= MOD\n            le -= 1\n        else:\n            p = 1 << h - le\n            irot = 1\n            for s in range(1 << le - 2):\n                irot2 = irot * irot % MOD\n                irot3 = irot2 * irot % MOD\n                offset = s << h - le + 2\n                for i in range(p):\n                    a0 = a[i + offset]\n                    a1 = a[i + offset + p]\n                    a2 = a[i + offset + p * 2]\n                    a3 = a[i + offset + p * 3]\n                    a2na3iimag = (a2 - a3) * IIMAG % MOD\n                    a[i + offset] = (a0 + a1 + a2 + a3) % MOD\n                    a[i + offset + p] = (a0 - a1 + a2na3iimag) * irot % MOD\n                    a[i + offset + p * 2] = (a0 + a1 - a2 - a3) * irot2 % MOD\n                    a[i + offset + p * 3] = (a0 - a1 - a2na3iimag) * irot3 % MOD\n                irot *= irate3[(~s & -~s).bit_length()]\n                irot %= MOD\n            le -= 2\n\ndef multiply(s, t):\n    n = len(s)\n    m = len(t)\n    if min(n, m) <= 60:\n        a = [0] * (n + m - 1)\n        for i in range(n):\n            if i % 8 == 0:\n                for j in range(m):\n                    a[i + j] += s[i] * t[j]\n                    a[i + j] %= MOD\n            else:\n                for j in range(m):\n                    a[i + j] += s[i] * t[j]\n        return [x % MOD for x in a]\n    a = s.copy()\n    b = t.copy()\n    z = 1 << (n + m - 2).bit_length()\n    a += [0] * (z - n)\n    b += [0] * (z - m)\n    butterfly(a)\n    butterfly(b)\n    for i in range(z):\n        a[i] *= b[i]\n        a[i] %= MOD\n    butterfly_inv(a)\n    a = a[:n + m - 1]\n    iz = pow(z, MOD - 2, MOD)\n    return [v * iz % MOD for v in a]\n(n, k, f) = map(int, input().split())\nmod = 998244353\n\ndef dp(n):\n    if n == 1:\n        return [1] * (k + 1)\n    bf = dp(n - 1)\n    res = [0] * (k + 1)\n    bf2 = multiply(bf, bf)\n    sbf2 = [0] * (2 * k + 3)\n    for i in range(2 * k, -1, -1):\n        sbf2[i] = (sbf2[i + 1] + bf2[i]) % mod\n        if i > k:\n            continue\n        res[i] = sbf2[i + 1] + bf2[i] * (k - i + 1)\n        res[i] %= mod\n    return res\nans = dp(n)\nans = multiply(ans, ans)\nprint(ans[f] if f <= 2 * k else 0)",
        "outputs_1": [
            "3\r\n",
            "36871576\r\n",
            "861735572\r\n",
            "0\r\n",
            "612404746\r\n",
            "2\r\n",
            "0\r\n",
            "0\r\n",
            "2\r\n",
            "100001\r\n",
            "1\r\n",
            "2\r\n",
            "100001\r\n",
            "200001\r\n",
            "10802803\r\n",
            "0\r\n",
            "0\r\n",
            "477825325\r\n",
            "569581672\r\n",
            "136436465\r\n",
            "90602327\r\n",
            "331190498\r\n",
            "343099201\r\n",
            "240127335\r\n",
            "0\r\n",
            "0\r\n",
            "737847906\r\n",
            "607648863\r\n",
            "816613688\r\n",
            "836547474\r\n",
            "63705590\r\n",
            "894782321\r\n",
            "437780341\r\n"
        ],
        "solution_id_2": 165182272,
        "solution_2": "import os\nimport sys\nfrom io import BytesIO, IOBase\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            (self.buffer.truncate(0), self.buffer.seek(0))\n\nclass IOWrapper(IOBase):\n\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda : self.buffer.read().decode('ascii')\n        self.readline = lambda : self.buffer.readline().decode('ascii')\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\nclass FFT:\n\n    def __init__(self, MOD=998244353):\n        FFT.MOD = MOD\n        g = self.primitive_root_constexpr()\n        ig = pow(g, FFT.MOD - 2, FFT.MOD)\n        FFT.W = [pow(g, FFT.MOD - 1 >> i, FFT.MOD) for i in range(30)]\n        FFT.iW = [pow(ig, FFT.MOD - 1 >> i, FFT.MOD) for i in range(30)]\n\n    def primitive_root_constexpr(self):\n        if FFT.MOD == 998244353:\n            return 3\n        elif FFT.MOD == 200003:\n            return 2\n        elif FFT.MOD == 167772161:\n            return 3\n        elif FFT.MOD == 469762049:\n            return 3\n        elif FFT.MOD == 754974721:\n            return 11\n        divs = [0] * 20\n        divs[0] = 2\n        cnt = 1\n        x = (FFT.MOD - 1) // 2\n        while x % 2 == 0:\n            x //= 2\n        i = 3\n        while i * i <= x:\n            if x % i == 0:\n                divs[cnt] = i\n                cnt += 1\n                while x % i == 0:\n                    x //= i\n            i += 2\n        if x > 1:\n            divs[cnt] = x\n            cnt += 1\n        g = 2\n        while 1:\n            ok = True\n            for i in range(cnt):\n                if pow(g, (FFT.MOD - 1) // divs[i], FFT.MOD) == 1:\n                    ok = False\n                    break\n            if ok:\n                return g\n            g += 1\n\n    def fft(self, k, f):\n        for l in range(k, 0, -1):\n            d = 1 << l - 1\n            U = [1]\n            for i in range(d):\n                U.append(U[-1] * FFT.W[l] % FFT.MOD)\n            for i in range(1 << k - l):\n                for j in range(d):\n                    s = i * 2 * d + j\n                    (f[s], f[s + d]) = ((f[s] + f[s + d]) % FFT.MOD, U[j] * (f[s] - f[s + d]) % FFT.MOD)\n\n    def ifft(self, k, f):\n        for l in range(1, k + 1):\n            d = 1 << l - 1\n            for i in range(1 << k - l):\n                u = 1\n                for j in range(i * 2 * d, (i * 2 + 1) * d):\n                    f[j + d] *= u\n                    (f[j], f[j + d]) = ((f[j] + f[j + d]) % FFT.MOD, (f[j] - f[j + d]) % FFT.MOD)\n                    u = u * FFT.iW[l] % FFT.MOD\n\n    def convolve(self, A, B):\n        n0 = len(A) + len(B) - 1\n        k = n0.bit_length()\n        n = 1 << k\n        A += [0] * (n - len(A))\n        B += [0] * (n - len(B))\n        self.fft(k, A)\n        self.fft(k, B)\n        A = [a * b % FFT.MOD for (a, b) in zip(A, B)]\n        self.ifft(k, A)\n        inv = pow(n, FFT.MOD - 2, FFT.MOD)\n        A = [a * inv % FFT.MOD for a in A]\n        del A[n0:]\n        return A\nMOD = 998244353\n\ndef solve():\n    (n, k, f) = map(int, input().split())\n    if f > 2 * k:\n        print(0)\n        return\n    fft = FFT()\n    A = [1] * (k + 1)\n    for i in range(n):\n        B = fft.convolve(A[:], A[:])\n        if i == n - 1:\n            break\n        tot = sum(B[k + 1:]) % MOD\n        A = [0] * (k + 1)\n        cum = 0\n        for i in range(k, -1, -1):\n            A[i] += tot + B[i] * (k + 1 - i)\n            A[i] %= MOD\n            tot += B[i]\n            if tot >= 0:\n                tot -= MOD\n    print(B[f])\nfor _ in range(1):\n    solve()",
        "outputs_2": [
            "3\n",
            "36871576\n",
            "861735572\n",
            "0\n",
            "612404746\n",
            "2\n",
            "0\n",
            "0\n",
            "2\n",
            "100001\n",
            "1\n",
            "2\n",
            "100001\n",
            "200001\n",
            "10802803\n",
            "0\n",
            "0\n",
            "477825325\n",
            "569581672\n",
            "136436465\n",
            "90602327\n",
            "331190498\n",
            "343099201\n",
            "240127335\n",
            "0\n",
            "0\n",
            "737847906\n",
            "607648863\n",
            "816613688\n",
            "836547474\n",
            "63705590\n",
            "894782321\n",
            "437780341\n"
        ],
        "unnorm_rating": 2451.3353069734585,
        "unnorm_rating_std": 77.41479402650174,
        "unnorm_rating_volatility": 0.06002508373286283,
        "reference_rating": 2500.0,
        "original_tags": [
            "bitmasks",
            "brute force",
            "dp",
            "fft",
            "flows",
            "graphs",
            "math",
            "meet-in-the-middle",
            "trees"
        ],
        "ever_exist": false
    }
]
