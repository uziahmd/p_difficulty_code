{
    "start": 1757842723.463556,
    "end": 1757842733.5655444,
    "start-formatted": "2025-09-14 18:38 KST",
    "end-formatted": "2025-09-14 18:38 KST",
    "gpu": 2,
    "pid": 6,
    "thought": "",
    "response": "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n\n    # Define the order of notes\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\n    # Map each note to its index for easy distance calculation\n    note_to_index = {note: idx for idx, note in enumerate(notes)}\n\n    # Read input\n    data = input().strip()\n    chord = data.split()\n\n    # Generate all permutations of the three notes\n    from itertools import permutations\n    perms = permutations(chord)\n\n    is_major = False\n    is_minor = False\n\n    for perm in perms:\n        x, y, z = perm\n        x_idx = note_to_index[x]\n        y_idx = note_to_index[y]\n        z_idx = note_to_index[z]\n\n        # Calculate distances in semitones (cyclic)\n        def distance(a, b):\n            return (b - a) % 12\n\n        d1 = distance(x_idx, y_idx)\n        d2 = distance(y_idx, z_idx)\n\n        if d1 == 4 and d2 == 3:\n            is_major = True\n        elif d1 == 3 and d2 == 4:\n            is_minor = True\n\n    if is_major:\n        print(\"major\")\n    elif is_minor:\n        print(\"minor\")\n    else:\n        print(\"strange\")\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    import sys\n    input = sys.stdin.read\n\n    # Define the order of notes\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\n    # Map each note to its index for easy distance calculation\n    note_to_index = {note: idx for idx, note in enumerate(notes)}\n\n    # Read input\n    data = input().strip()\n    chord = data.split()\n\n    # Generate all permutations of the three notes\n    from itertools import permutations\n    perms = permutations(chord)\n\n    is_major = False\n    is_minor = False\n\n    for perm in perms:\n        x, y, z = perm\n        x_idx = note_to_index[x]\n        y_idx = note_to_index[y]\n        z_idx = note_to_index[z]\n\n        # Calculate distances in semitones (cyclic)\n        def distance(a, b):\n            return (b - a) % 12\n\n        d1 = distance(x_idx, y_idx)\n        d2 = distance(y_idx, z_idx)\n\n        if d1 == 4 and d2 == 3:\n            is_major = True\n        elif d1 == 3 and d2 == 4:\n            is_minor = True\n\n    if is_major:\n        print(\"major\")\n    elif is_minor:\n        print(\"minor\")\n    else:\n        print(\"strange\")",
    "score": -1,
    "metadata": {
        "prompt_token_count": 702,
        "completion_token_count": 318,
        "thoughts_token_count": 0
    }
}