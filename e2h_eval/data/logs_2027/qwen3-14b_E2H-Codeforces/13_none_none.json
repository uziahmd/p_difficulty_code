{
    "start": 1757842768.8524673,
    "end": 1757842778.8122537,
    "start-formatted": "2025-09-14 18:39 KST",
    "end-formatted": "2025-09-14 18:39 KST",
    "gpu": 2,
    "pid": 13,
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    cases = list(map(int, data[1:t+1]))\n    \n    def is_snowflake(n):\n        if n == 1:\n            return False\n        # Check for all possible k > 1\n        # The snowflake structure implies that the number of nodes can be represented as:\n        # n = 1 + k * (1 + k * m), where m >= 1\n        # So n - 1 must be divisible by k, and (n - 1) // k - 1 must be divisible by k\n        # We can iterate over possible k values such that k^2 <= n\n        # But since n can be up to 1e18, we need a smarter approach\n        # Instead, we check for all possible k in range 2 to sqrt(n)\n        for k in range(2, int(n**0.5) + 1):\n            if (n - 1) % k != 0:\n                continue\n            m = (n - 1) // k - 1\n            if m % k == 0:\n                return True\n        return False\n    \n    results = []\n    for n in cases:\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    cases = list(map(int, data[1:t+1]))\n    \n    def is_snowflake(n):\n        if n == 1:\n            return False\n        # Check for all possible k > 1\n        # The snowflake structure implies that the number of nodes can be represented as:\n        # n = 1 + k * (1 + k * m), where m >= 1\n        # So n - 1 must be divisible by k, and (n - 1) // k - 1 must be divisible by k\n        # We can iterate over possible k values such that k^2 <= n\n        # But since n can be up to 1e18, we need a smarter approach\n        # Instead, we check for all possible k in range 2 to sqrt(n)\n        for k in range(2, int(n**0.5) + 1):\n            if (n - 1) % k != 0:\n                continue\n            m = (n - 1) // k - 1\n            if m % k == 0:\n                return True\n        return False\n    \n    results = []\n    for n in cases:\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 581,
        "completion_token_count": 319,
        "thoughts_token_count": 0
    }
}