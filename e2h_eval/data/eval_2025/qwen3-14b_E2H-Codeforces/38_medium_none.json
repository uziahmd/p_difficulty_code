{
    "start": 1758309570.0377302,
    "end": 1758309741.2427769,
    "start-formatted": "2025-09-20 04:19 KST",
    "end-formatted": "2025-09-20 04:22 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's try to tackle this problem. So the problem is about finding the minimum number of nodes required for a directed graph to be p-reachable, and then among those graphs with the minimum nodes, find the maximum number of unidirectional pairs. \n\nFirst, I need to understand what exactly p-reachable means. The definition says that a directed graph is p-reachable if it contains exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. Oh right, so for each such pair (u, v), both u can reach v and v can reach u. Wait, no— the problem says \"reachable from each other\", which means mutual reachability. So for each pair (u, v) with u < v, if they are mutually reachable, that contributes to p. \n\nThe first part is to find the minimal number of nodes n such that there exists a graph with exactly p such pairs. Then, among all such minimal n graphs, find the maximum number of unidirectional pairs. \n\nUnidirectional pairs are ordered pairs (u, v) where u != v, there's a path from u to v, but no path from v to u. \n\nSo, the problem requires two parts: find n (minimum), and then compute the maximum possible unidirectional pairs for that n.\n\nLet me think about how to model this. \n\nFirst, for the minimal n. Let's think about how many pairs (u < v) can be mutually reachable in a graph with n nodes. \n\nIf the graph is a DAG, but that's not helpful. Wait, but mutual reachability implies that u and v are in the same strongly connected component (SCC). Because if u can reach v and vice versa, they are in the same SCC. \n\nSo, the number of pairs (u < v) that are mutually reachable is equal to the sum over each SCC of C(k, 2), where k is the size of the SCC. Because within an SCC, all pairs are mutually reachable. So for example, if there's an SCC of size k, then there are k*(k-1)/2 pairs (u < v) in that component. \n\nTherefore, the total p is the sum of C(k_i, 2) for each SCC of size k_i in the graph. \n\nSo our problem reduces to finding the minimal n such that the sum of C(k_i, 2) across all SCCs equals exactly p. And then, given that, find the maximum number of unidirectional pairs possible. \n\nWait, but the graph can have multiple SCCs. For example, if you have two separate cycles (each being an SCC), then the mutual pairs would be C(k1, 2) + C(k2, 2). \n\nSo the first part of the problem is to find the minimal n where there exists a partition of n into integers k_1, k_2, ..., k_m such that sum_{i} C(k_i, 2) = p. And the sum of the k_i's is n. \n\nBut we want to minimize n. How can we do that?\n\nBecause C(k, 2) is the maximum possible for a given k. So, to minimize n, we need to maximize the sum of C(k_i, 2) per node. So for a given p, we need to find the minimal n such that the maximum possible sum of C(k_i, 2) for a partition of n is at least p, and that there exists a way to split into components so that the sum is exactly p. \n\nWait, but since the sum must be exactly p, we need to find the minimal n such that p can be written as the sum of some C(k_i, 2) terms, where the sum of the k_i is n. \n\nBut how do we find this minimal n? Let's think about the problem of finding the minimal n where the sum of C(k_i, 2) equals p. \n\nThe key here is that to minimize n, we need to maximize the value of sum C(k_i, 2) per node. For example, if we have a single component of size k, then the sum is C(k, 2). For a given p, the minimal n would be when we have as large a component as possible. \n\nBut maybe splitting into multiple components allows for a smaller n. For example, suppose p=3. If we have a single component of size 3, then C(3,2)=3. So n=3. But if we have two components, say 2 and 2, then sum is 1+1=2 <3. So that's worse. So in this case, the minimal n is 3. Which matches the first sample input. \n\nAnother example: if p=4. Let's see. For a single component, C(4,2)=6>4. So maybe split into a component of size 3 (C(3,2)=3) and another component of size 2 (C(2,2)=1). Sum is 4. Total nodes is 3+2=5. Alternatively, can we have another combination? Like a component of size 4 and another component of size 1 (C(4,2) is 6, which is more than 4. So that's not helpful. So the minimal n is 5. \n\nBut wait, perhaps there's a better way. Let me think. What if we have two components of size 3 and 2. Then sum is 3 + 1 =4. So n=5. Alternatively, maybe a component of size 4 and another of size 1. Then sum is 6 +0 =6, which is larger than 4. Not helpful. So the minimal n is 5. \n\nBut the sample input for p=4 gives output 5 6. Wait, looking back at the sample input:\n\nIn the example given, for input 4, the output is 5 6. Wait, the first part is the minimal n, which is 5. Then the second part is the maximum number of unidirectional pairs. \n\nSo the first part of the problem is to find the minimal n where there's a way to split into components whose sum of C(k_i, 2) equals p. \n\nSo how do we find this minimal n?\n\nThe approach seems to be similar to the problem of representing p as the sum of combinations C(k_i, 2), and find the minimal sum of k_i. \n\nTo find the minimal n, we can think of the following: For each possible way to represent p as sum of C(k_i, 2), find the minimal sum of k_i. \n\nBut how to compute this efficiently?\n\nAn optimal strategy would be to use as large as possible components. Because C(k, 2) increases with k, and for a given value of C(k,2), the k is as small as possible. Wait, for example, C(k, 2) = x. For x, the minimal k is such that k is the smallest integer where C(k,2) >=x. \n\nWait, but in our case, we need to find the minimal n such that sum C(k_i, 2) =p. \n\nThis feels like a problem where we can greedily take the largest possible C(k,2) values. \n\nFor example, for p, we can find the maximum possible k such that C(k,2) ≤ p. Then subtract that value from p, and repeat. But this might not always work. However, perhaps this approach gives the minimal n. \n\nWait, let's take p=4. The maximum C(k,2) ≤4 is 3 (for k=3). Then subtract 3, remaining p is 1. Then take k=2 (C(2,2)=1). So total k is 3+2=5. Which is the minimal n. \n\nAnother example: p=6. The maximum C(k,2) is 6 (k=4). So n is 4. \n\nWhat if p=5? The maximum C(k,2) ≤5 is 3 (k=3). Subtract 3, remaining 2. Then maximum C(k,2) is 1 (k=2) again. Then 2-1=1. Then another k=2. So total is 3+2+2=7. But wait, maybe there's a better way. For example, 5 can be represented as C(3,2) + C(2,2) = 3 + 1 =4? No, that's 4. So that's not enough. Wait, 5 is not possible with a single component. C(4,2)=6>5. So perhaps we can have one component of size 3 (3) and another component of size 3 (3). Sum is 6, which is larger than 5. Not helpful. Or maybe one component of size 3 (3) and another component of size 2 (1) gives sum 4. Then we need to get 5. Hmm. Maybe there's no way to get 5? Wait, but that's impossible. Wait, what if there's a component of size 4 (which gives 6) and then subtract 1? But how? Because the sum has to be exactly p. So maybe for p=5, there's no way? But that's impossible. \n\nWait, perhaps I made a mistake. Let me think again. How can we get p=5?\n\nSuppose we have a component of size 3 (C(3,2)=3) and another component of size 3 (C(3,2)=3). That gives sum 6. Which is larger than 5. So that's not helpful. Alternatively, a component of size 4 (C(4,2)=6) and then subtract 1? But that's not allowed. Because the sum must be exactly p. \n\nWait, but maybe there's no way to get p=5. Which would imply that for some p, there's no possible graph. But according to the problem statement, the input p can be zero. So for p=5, perhaps the minimal n is 5? Let's see. Suppose we have a component of size 3 (3) and another component of size 2 (1), sum is 4. Then, perhaps we can have a component of size 3 (3) and another component of size 2 (1) plus another component of size 1 (0). But that's still sum 4. So how can we get 5? \n\nAlternatively, maybe the approach of using the greedy method isn't sufficient. So perhaps the minimal n is determined by the minimal n where the maximum possible sum of C(k_i, 2) is at least p, and then adjust accordingly. \n\nWait, but the problem says that p is given, and we need to find a graph with exactly p such pairs. So for any p, there must be a way. For example, for p=5, perhaps we can have a component of size 4 (sum 6) and then remove one pair. How? Well, perhaps that's not possible. Because the sum is fixed based on the components. So maybe for p=5, there is no way. But that can't be. Because the problem allows p to be up to 2e5. So perhaps the problem assumes that for any p, there is a way. But how?\n\nWait, maybe I'm missing something. Let's think again. The sum of C(k_i, 2) for all components. For example, if the graph is a DAG with no cycles, then all components are single nodes, and the sum is zero. So p can be zero. For any p, perhaps we can find a way by combining components. \n\nBut how to get p=5. Let me think. Suppose we have two components: one of size 3 (3 pairs) and one of size 3 (3 pairs). Sum is 6. But that's more than 5. How can we reduce it by 1? Well, perhaps split one of the components into smaller ones. For example, split a component of size 3 into a component of size 2 and a component of size 1. Then the sum becomes 1 (from the 2) + 0 (from the 1) + 3 (the other component of 3) = 4. Which is less than 5. \n\nHmm. So maybe there's no way to get exactly 5? That seems problematic. But according to the problem statement, the input can be any p between 0 and 2e5. So maybe there's a misunderstanding here. \n\nWait, perhaps the problem allows for having multiple components. For example, a component of size 4 (C(4,2) =6) and then a component of size 1. But that gives sum 6. But how to get 5. \n\nAlternatively, maybe there's a different way to arrange components. For example, a component of size 3 (3) and a component of size 2 (1) and a component of size 2 (1). Sum is 3+1+1=5. So total n is 3+2+2=7. So that's possible. \n\nAh! Right. Because the components can be split into multiple parts. So for p=5, the minimal n would be 3+2+2=7. \n\nBut how do I find that? The greedy approach of taking the largest possible C(k, 2) each time may not work. For example, for p=5, if we take the largest possible component first, which is C(3,2) =3, then p becomes 2. Then the next largest is C(2,2)=1. Subtract 1, p becomes 1. Then another C(2,2)=1. So sum is 3+1+1=5, and n is 3+2+2=7. \n\nAlternatively, perhaps there's a better way. For example, two components of size 3 and 3: sum 3+3=6. Which is higher than 5. But perhaps we can split one of them into a component of size 2 and 2. Then sum is 3 + 1 + 1 =5. So that's same as before. \n\nSo the minimal n is 3+2+2=7. \n\nSo the approach of greedily taking the largest possible C(k,2) each time seems to work here. \n\nSo the algorithm for finding the minimal n is: \n\nStart with p. While p>0, find the maximum k where C(k,2) ≤ current p. Subtract C(k,2) from p, add k to the total n. Repeat. \n\nBut wait, in this approach, for p=5, the steps are:\n\ncurrent p=5. Find max k where C(k,2) ≤5. C(3,2)=3, C(4,2)=6>5. So k=3. Subtract 3, p=2. Now, for p=2, max k is 2 (C(2,2)=1). Subtract 1, p=1. Again, subtract 1 (k=2). p=0. Total n is 3+2+2=7. \n\nYes, that gives the correct result. \n\nAnother example: p=4. Max k is 3 (3), subtract 3. p=1. Take 2 (1), subtract. Total n=3+2=5. Which matches the sample. \n\nAnother example: p=6. Take 4 (C(4,2)=6), done. n=4. \n\nSo this approach seems to work. \n\nSo the first part of the problem is to compute the minimal n by greedily selecting the largest possible C(k,2) each time. \n\nOnce we have the minimal n, the next part is to compute the maximum number of unidirectional pairs. \n\nNow, what's the maximum number of unidirectional pairs possible for a graph with minimal n nodes and exactly p mutual pairs. \n\nLet me think about how to model this. \n\nThe unidirectional pairs are ordered pairs (u, v) where u != v, u can reach v but not vice versa. \n\nIn a graph with certain SCCs, the number of unidirectional pairs depends on how the SCCs are arranged. \n\nLet me consider that the graph is a DAG of SCCs. Each node in the DAG represents an SCC. The edges between these nodes represent the direction of reachability between the components. \n\nFor example, if there are two components A and B, and there's a directed edge from A to B, then every node in A can reach every node in B, but not vice versa. \n\nSo, for two components A and B, the number of unidirectional pairs between them is |A| * |B| (since each pair (a, b) where a is in A and b is in B is unidirectional, assuming there's a path from A to B but not the other way around). \n\nBut if there's a bidirectional connection between A and B (like both directions), then they would be merged into a single component. So in the DAG of components, there are no cycles. \n\nThus, the total number of unidirectional pairs is the sum for all ordered pairs of components (X, Y) where X can reach Y and X != Y, of |X| * |Y|. \n\nBut how to maximize this sum? \n\nThe maximum occurs when the DAG of components is a linear chain, where each component points to all components that come after it. For example, if the components are ordered as C1, C2, ..., Cm, and each Ci points to Cj for all j > i. Then, for each pair (Ci, Cj) with i < j, the contribution is |Ci| * |Cj|. \n\nThis is the maximum possible because any other arrangement would have fewer such pairs. For example, if the DAG is a tree with branches, then some components may not reach others. \n\nSo to maximize the number of unidirectional pairs, the components should be arranged in a linear order, where each component points to all components that come after it. \n\nTherefore, the maximum number of unidirectional pairs is the sum for all pairs of components (X, Y) where X is before Y in the linear order, of |X| * |Y|. \n\nSo, given the sizes of the components (k_1, k_2, ..., k_m), the maximum number of unidirectional pairs is the sum_{i<j} (k_i * k_j). \n\nBecause each pair of components contributes k_i * k_j. \n\nBut how does this relate to the minimal n? \n\nThe minimal n is determined by the sizes of the components, which are determined by the greedy approach. For example, in the case of p=4, the components are 3 and 2. The sum of k_i * k_j for i < j is 3*2=6. Which matches the sample output of 5 6. \n\nSo, for the second part of the problem, once we have the component sizes, the maximum number of unidirectional pairs is the sum over all pairs of components (i < j) of (size_i * size_j). \n\nBut how to compute that sum? \n\nThe sum of all products of pairs of sizes can be computed as follows: \n\nLet S be the sum of all sizes (S = n). Then the sum of all products of pairs (i < j) is (S^2 - sum (k_i^2 )) / 2. \n\nBecause (sum k_i)^2 = sum k_i^2 + 2*sum_{i<j} k_i k_j. \n\nTherefore, sum_{i<j} k_i k_j = (S² - sum_k²)/2. \n\nSo, given the component sizes, we can compute this sum. \n\nSo the plan is:\n\n1. Find the minimal n by greedily choosing the largest possible C(k, 2) for each step. This gives us the list of component sizes (k_1, k_2, ..., k_m).\n\n2. Compute the maximum unidirectional pairs as (S² - sum (k_i² )) / 2, where S is the sum of the component sizes (n).\n\nBut wait, what about the components themselves? Because within each component, there are no unidirectional pairs. Because all nodes are mutually reachable. So the only unidirectional pairs are between different components. \n\nYes. So the formula is correct. \n\nSo, the steps are:\n\nFor the first part (min n):\n\n- Decompose p into the sum of C(k_i, 2) terms, using the greedy approach of taking the largest possible C(k,2) each time. \n\nFor the second part (max unidirectional pairs):\n\n- Once we have the component sizes, compute the sum of their squares, then compute (n^2 - sum_squares) // 2. \n\nBut wait, why is this the case? Because the sum of all products of pairs (i < j) is exactly the number of unidirectional pairs when the components are arranged in a linear order. \n\nYes, because each pair of components contributes their product. \n\nSo, for example, for component sizes [3,2], sum is 3+2=5. sum_squares is 9 +4=13. (5² -13)/2 = (25-13)/2 = 6, which is the sample's answer. \n\nSo this formula works. \n\nNow, the question is, how to implement this. \n\nFirst, let's handle the first part. How to decompose p into the sum of C(k_i, 2) terms. \n\nThe steps for decomposition:\n\nInitialize p_remaining = p. \n\ncomponents = list()\n\nwhile p_remaining > 0:\n\n    find the largest k such that C(k, 2) <= p_remaining. \n\n    add k to components. \n\n    subtract C(k,2) from p_remaining. \n\nBut how to find the largest k for a given p_remaining?\n\nC(k, 2) = k*(k-1)/2. We can solve for k in terms of p_remaining. \n\nWe can find the maximum k where k*(k-1)/2 ≤ p_remaining. \n\nThis can be found using binary search. \n\nAlternatively, since k^2/2 ~ p_remaining, k is approximately sqrt(2*p_remaining). \n\nSo for a given p_remaining, the maximum k is floor( (sqrt(8*p_remaining +1) +1)/2 )\n\nLet me check:\n\nk*(k-1)/2 ≤ p_remaining → k² -k - 2p_remaining ≤0. \n\nThe positive solution to k² -k - 2p =0 is [1 + sqrt(1 +8p)] / 2. \n\nSo the maximum k is the floor of that value. \n\nYes. \n\nSo for example, p_remaining=4. \n\nsqrt(1 + 8*4) = sqrt(33) ≈5.744 → (5.744 +1)/2 ≈ 3.372 → floor is 3. Which is correct. \n\nAnother example: p_remaining=3. sqrt(1+24)=sqrt(25)=5 → (5+1)/2=3. So k=3. \n\nSo the code can compute k as follows:\n\ndef max_k(p):\n\n    return int( ( ( (1 + 8*p)**0.5 + 1 ) ) // 2 )\n\nWait, but perhaps we need to compute it carefully. Let me think. \n\nLet me write a helper function to compute the maximum k such that k*(k-1)//2 ≤ p. \n\nBut perhaps in code, for each p_remaining, we can compute k as the floor of the solution. \n\nBut in code, perhaps using binary search would be better to avoid floating point inaccuracies. \n\nBut for the purposes of code, perhaps the formula can be used. Let me think. \n\nFor example, for p_remaining=5:\n\nsqrt(1+8*5) = sqrt(41) ≈6.403 → 6.403 +1=7.403 → divided by 2 is 3.701 → floor is 3. Which is correct, because C(3,2)=3 ≤5, and C(4,2)=6>5. \n\nSo yes, the formula gives the correct k. \n\nSo in code, for a given p_remaining, compute k as the integer part of (sqrt(8*p_remaining + 1) + 1)/2. \n\nBut to avoid floating point errors, perhaps we can compute it with binary search. \n\nBut for the sake of code efficiency, perhaps the formula is acceptable. \n\nSo the code steps for the first part:\n\nRead p. \n\nif p is zero:\n\n   the minimal n is 0? Or wait, for p=0, the graph must have zero pairs (u < v) that are mutually reachable. Which would be achieved by having all components of size 1. Because then, no pairs. \n\nBut the minimal n for p=0 is 0? Or 1? \n\nWait, the problem says that the graph has nodes. For example, the sample input includes p=0, output is 0 0. Let's look at the sample input given:\n\nSample input includes '0', output is '0 0'. \n\nSo for p=0, the minimal number of nodes is 0? Or 1?\n\nWait, the problem says that the graph must contain exactly p ordered pairs. For p=0, the graph can be any graph with no pairs (u < v) that are mutually reachable. For example, a graph with 0 nodes (empty graph) has zero such pairs. But perhaps the problem allows for zero nodes. However, the problem says \"nodes\" in the definition. \n\nBut the sample input for p=0 outputs 0 0. So that's acceptable. \n\nBut for p=0, the minimal n is zero. \n\nBut let's think about the decomposition. For p=0, the loop doesn't run, and components is empty. Then the sum of the component sizes is zero. \n\nSo, the code needs to handle p=0 as a special case. \n\nSo, for the first part:\n\nif p == 0:\n\n   min_nodes = 0\n\nelse:\n\n   proceed with the decomposition. \n\nBut let's see. For example, if p=0, the minimal n is zero. \n\nBut what if the problem requires at least one node? For example, if p=0, but the minimal n is 1? Because for n=1, there are zero pairs (u < v) since u and v must be different. \n\nBut the sample input for p=0 outputs 0 0. So perhaps the problem allows for zero nodes. \n\nBut the problem statement says \"the minimum number of nodes required to create a p-reachable directed graph.\" For p=0, the graph can be empty. So the answer is zero. \n\nSo, the code for the first part:\n\nNow, for the decomposition. \n\nOnce we have the components list, the sum of their sizes is the minimal n. \n\nNow, for the second part, the maximum number of unidirectional pairs is (n^2 - sum_k_squared) // 2. \n\nBut sum_k_squared is the sum of the squares of the component sizes. \n\nSo, for example, components [3,2], sum_k_squared is 9 +4 =13. n is 5. 5^2 -13=25-13=12. 12/2=6. Which is correct. \n\nSo, the code steps for the second part:\n\nsum_k_squared = sum( k*k for k in components )\n\nmax_unidir = (n * n - sum_k_squared) // 2 \n\nBut wait, what about if there are multiple components? For example, if there are three components, say [2,2,2], sum_k_squared is 4+4+4=12. n is 6. (6^2 -12)/2 = (36-12)/2= 12. Which would be the sum of all pairs between components. \n\nYes. \n\nNow, putting it all together. \n\nLet's test with the sample inputs. \n\nSample Input 1: 3. \n\nDecomposition steps:\n\np_remaining =3. \n\nk = floor( (sqrt(1+24) +1)/2 ) = (5+1)/2=3. So add 3. subtract 3, p_remaining=0. components is [3]. \n\nsum_k_squared = 9. n=3. \n\nmax_unidir = (3^2 -9)/2 = (9-9)/2=0. Which matches the sample output. \n\nSample input 4: \n\ncomponents are 3 and 2. sum_k_squared 9+4=13. n=5. 5^2-13=12. 12/2=6. Which matches the sample. \n\nSample input 0: components is empty. n=0. sum_k_squared is 0. (0^2 -0)/2=0. \n\nSo the code works. \n\nNow, what about when p is not possible to be represented as the sum of C(k_i, 2) with the greedy approach? Well, according to the decomposition steps, the code will generate the components such that the sum of their C(k_i, 2) equals p. \n\nBut is that always possible? For example, for p=5, the decomposition would be 3, 2, 2. Their C(k_i, 2) are 3, 1, 1. Sum 5. \n\nYes. So the code works. \n\nNow, code implementation. \n\nNow, the code steps:\n\nRead p. \n\nif p ==0:\n\n   print 0 0 \n\nelse:\n\n   decompose p into components. \n\nThen compute n as sum(components). \n\nsum_k_squared = sum(k*k for k in components)\n\nmax_unidir = (n*n - sum_k_squared) // 2 \n\nSo, the code. \n\nBut how to implement the decomposition. \n\nImplementing the decomposition:\n\nWe can proceed with a loop:\n\ncomponents = []\n\np_remaining = p \n\nwhile p_remaining >0:\n\n   compute k as the maximum integer where k*(k-1)//2 <= p_remaining \n\n   add k to components \n\n   p_remaining -= k*(k-1)//2 \n\nBut how to compute k. \n\nImplementing the formula:\n\nk = floor( (sqrt(8*p_remaining +1) +1)/2 )\n\nBut in code, we can compute this as follows. \n\nIn Python:\n\nimport math \n\ndef get_max_k(p):\n\n    # returns the maximum k where k*(k-1)//2 <= p \n\n    # compute via formula \n\n    sqrt_val = math.sqrt(1 + 8*p)\n\n    k = int( (sqrt_val +1) // 2 )\n\n    # check if k*(k-1)//2 exceeds p. If so, decrease by 1. \n\n    while k*(k-1)//2 > p:\n\n        k -=1 \n\n    return k \n\nBut why the while loop? Because sometimes due to floating point precision, the initial calculation might be off. \n\nFor example, if p is exactly C(k,2), then the formula gives the correct value. \n\nBut for cases where the calculation is approximate, perhaps the initial k is too high. \n\nSo, the code would calculate k via the formula, then check and adjust. \n\nAlternatively, use binary search. \n\nBut for code brevity, perhaps the formula with adjustment is easier. \n\nLet's test for p=5:\n\nsqrt(1 + 8*5) = sqrt(41) ≈6.403. \n\n(6.403 +1)/2 = 3.701 → integer division gives 3. \n\nk=3. \n\nCheck 3*2//2=3 <=5. Correct. \n\nSo, the code returns 3. \n\nThen, p_remaining becomes 5-3=2. \n\nNext iteration: p_remaining=2. \n\nsqrt(1+16)=sqrt(17)=~4.123. (4.123 +1)/2 = 2.56 → integer division gives 2. \n\nCheck 2*1//2=1 <=2. So yes. \n\nAdd 2. p_remaining=2-1=1. \n\nNext iteration: p_remaining=1. \n\nsqrt(1+8*1)=3 → (3+1)/2=2. \n\nCheck 2*1//2=1 <=1. So yes. \n\nAdd 2. p_remaining=0. \n\ncomponents are [3,2,2]. \n\nWhich is correct. \n\nSo, the code seems to work. \n\nNow, code in Python:\n\nRead p from input. \n\nHandle p=0. \n\nElse, decompose into components. \n\nOnce components are found, compute n and the sum of squares. \n\nNow, code:\n\nimport math \n\ndef main():\n\n    import sys\n\n    p = int(sys.stdin.readline())\n\n    if p ==0:\n\n        print(\"0 0\")\n\n        return \n\n    components = []\n\n    p_remaining = p \n\n    while p_remaining >0:\n\n        # compute k \n\n        sqrt_val = math.sqrt(1 + 8*p_remaining)\n\n        k = int( (sqrt_val +1) // 2 )\n\n        # adjust \n\n        while k*(k-1)//2 > p_remaining:\n\n            k -=1 \n\n        components.append(k)\n\n        p_remaining -= k*(k-1)//2 \n\n    n = sum(components)\n\n    sum_sq = sum(k*k for k in components)\n\n    max_unidir = (n * n - sum_sq) // 2 \n\n    print(f\"{n} {max_unidir}\")\n\nBut wait, let's test this code for the sample input. \n\nSample input 3:\n\nInput is 3. \n\ncomponents is [3]. sum_sq =9. n=3. max_unidir is (9-9)/2=0. Output is 3 0. Which matches the first sample. \n\nSample input 4: \n\ncomponents are 3, 2. sum_sq is 9+4=13. n=5. (25-13)/2=6. Output is 5 6. Which matches the second sample. \n\nSample input 0: outputs 0 0. \n\nAnother test case: p=1. \n\ncomponents is [2], since C(2,2)=1. n=2. sum_sq=4. max_unidir is (4-4)/2=0. \n\nAnother case: p=2. \n\ncomponents would be 2 and 2. Because 2*(2-1)/2=1, subtract once gives 1, then again. \n\nWait, p_remaining=2. \n\nFirst iteration:\n\nsqrt(1+16) = sqrt(17)=~4.123. (4.123+1)/2= 2.56 → int is 2. Check 2*1/2=1 <=2. \n\nAdd 2. p_remaining=2-1=1. \n\nSecond iteration: same as before. Add 2. p_remaining=0. \n\ncomponents [2,2]. sum_sq=4+4=8. n=4. max_unidir is (16-8)/2=4. \n\nSo for p=2, output is 4 4. \n\nBut what is the actual maximum number of unidirectional pairs? \n\nThe components are two of size 2. Arranged in a linear order, the number of unidirectional pairs is 2*2=4. Which matches. \n\nYes. \n\nAnother example: p=6. \n\ncomponents is [4]. sum_sq=16. n=4. max_unidir is (16-16)/2=0. \n\nWhich is correct. Because all nodes are in the same component, so no unidirectional pairs. \n\nAnother example: p=5. components are [3,2,2]. sum_sq=9+4+4=17. n=3+2+2=7. max_unidir is (49-17)/2= 32/2=16. \n\nSo the output would be 7 16. \n\nBut how? Let's see. The components are 3, 2, 2. The maximum unidirectional pairs is 3*2 +3*2 + 2*2 = 6 +6 +4=16. Which is correct. \n\nYes. \n\nSo the code seems to work. \n\nNow, considering edge cases. \n\nCase where p=1: output 2 0. \n\nAnother case: p=2, output 4 4. \n\nAnother case: p=6, output 4 0. \n\nAnother case: p=0, output 0 0. \n\nNow, what about p=1. \n\nYes. \n\nAnother case: p= C(k,2) + ... ?\n\nNow, what about when p is very large. For example, p=2e5. \n\nBut the code should handle it. \n\nPotential issues:\n\n- Floating point precision when calculating sqrt. For example, when 1+8*p_remaining is a perfect square. \n\nBut the code uses the while loop to adjust k. \n\nAnother possible issue is when p_remaining is zero, but the code stops. \n\nNow, the code seems correct. \n\nBut let's think about when p is zero. The code returns 0 0. \n\nBut according to the problem statement, the graph must have exactly p pairs. For p=0, the graph can have zero nodes. \n\nBut what if the problem requires the graph to have at least one node? For example, if p=0, but the minimal n is 1. \n\nBut according to the sample input, when p=0, the output is 0 0. \n\nSo the code is correct. \n\nThus, the code should handle all cases. \n\nNow, let's code this. \n\nBut note that for Python, math.sqrt can have precision issues. For example, when",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs among all such graphs with the minimum number of nodes.\n\n### Approach\n1. **Understanding p-reachable Graphs**: A p-reachable graph contains exactly `p` ordered pairs (u, v) where `u < v` and both nodes are mutually reachable. This can be achieved by ensuring each strongly connected component (SCC) contributes to the count of mutual reachability pairs.\n2. **Decomposing p into Component Sizes**: The key insight is that the number of mutual reachability pairs in an SCC of size `k` is given by the combination formula C(k, 2) = k*(k-1)/2. Using a greedy approach, we decompose `p` into the sum of these values to find the minimum number of nodes required.\n3. **Maximizing Unidirectional Pairs**: Once the component sizes are determined, the maximum number of unidirectional pairs can be calculated by arranging these components in a linear order and using the formula derived from the sum of products of component sizes.\n\n### Solution Code\n```python\nimport math\nimport sys\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    components = []\n    p_remaining = p\n    \n    while p_remaining > 0:\n        sqrt_val = math.sqrt(1 + 8 * p_remaining)\n        k = int((sqrt_val + 1) // 2)\n        # Adjust k to ensure it's valid\n        while k * (k - 1) // 2 > p_remaining:\n            k -= 1\n        components.append(k)\n        p_remaining -= k * (k - 1) // 2\n    \n    n = sum(components)\n    sum_sq = sum(k * k for k in components)\n    max_unidir = (n * n - sum_sq) // 2\n    print(f\"{n} {max_unidir}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input value `p` is read from standard input.\n2. **Handling Zero Case**: If `p` is zero, the output is immediately set to \"0 0\" as no nodes are needed.\n3. **Greedy Decomposition**: For each remaining value of `p`, the largest possible component size `k` is determined such that C(k, 2) ≤ current `p`. This ensures the minimum number of nodes by maximizing each component's contribution.\n4. **Calculating Minimum Nodes**: The sum of all component sizes gives the minimum number of nodes required.\n5. **Maximizing Unidirectional Pairs**: Using the derived formula, the maximum number of unidirectional pairs is computed based on the sum of squares of component sizes and the total number of nodes.\n\nThis approach efficiently decomposes the problem into manageable parts, ensuring optimal performance even for large values of `p`.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\nimport sys\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    components = []\n    p_remaining = p\n    \n    while p_remaining > 0:\n        sqrt_val = math.sqrt(1 + 8 * p_remaining)\n        k = int((sqrt_val + 1) // 2)\n        # Adjust k to ensure it's valid\n        while k * (k - 1) // 2 > p_remaining:\n            k -= 1\n        components.append(k)\n        p_remaining -= k * (k - 1) // 2\n    \n    n = sum(components)\n    sum_sq = sum(k * k for k in components)\n    max_unidir = (n * n - sum_sq) // 2\n    print(f\"{n} {max_unidir}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 472,
        "completion_token_count": 640,
        "thoughts_token_count": 8192
    }
}