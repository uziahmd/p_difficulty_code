{
    "start": 1758309450.2979708,
    "end": 1758309685.646579,
    "start-formatted": "2025-09-20 04:17 KST",
    "end-formatted": "2025-09-20 04:21 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. The problem is to find the smallest non-negative integer k such that the LCM of (a +k) and (b +k) is minimized. And if there are multiple k's with the same minimal LCM, pick the smallest one.\n\nHmm. So first, I need to think about how to approach this. Let me think about what the LCM depends on. The LCM of two numbers x and y is (x*y)/gcd(x,y). So, for x = a +k and y = b +k, their difference is (b -a), assuming a < b. Wait, but since k is added to both, the difference between the two numbers is fixed. Let me think: if a and b are given, then when you add k to both, their difference remains (b -a). Let's say a < b. Then, the difference between the two numbers is (b - a). Let me denote d = |a - b|. So, the difference between the two numbers is fixed as d. \n\nSo, the problem reduces to finding two numbers x and y, such that y - x = d (assuming a < b, then x = a +k, y = b +k, so y -x = b -a = d). Then, their LCM is (x * y)/gcd(x, y). But since y = x + d, maybe we can find x such that the LCM is minimized.\n\nWait, but since the difference is fixed, perhaps the optimal choice is to make x and y as small as possible, but also have a high GCD. Because LCM is inversely proportional to the GCD. So, the higher the GCD, the lower the LCM.\n\nSo, the idea is to find x such that x and x + d have a large GCD. Let me think. Let me take the example from the first input: a=6, b=10. So d = 4. Then, when k=2, x = 8, y=12. Their GCD is 4, so LCM is (8*12)/4 = 24. What other possibilities are there? For example, if k=0, x=6 and y=10. GCD is 2, LCM is 30. Which is worse than 24. If k=1, x=7, y=11. GCD is 1, LCM is 77. Worse. k=2 gives 24. What about k=3? x=9, y=13. GCD 1, LCM 117. So worse. So the minimal is achieved when x and y share a common divisor. \n\nSo, the key seems to be to find x such that x and x +d have a high GCD. Let's think about that. Let me denote g = gcd(x, x+d). Since x +d -x = d, the GCD of x and x+d is the same as GCD(x, d). Because GCD(x, x +d) = GCD(x, d). So, for any x, the GCD of x and x +d is equal to the GCD of x and d. Therefore, the LCM of x and x +d is (x*(x +d))/g, where g is GCD(x, d). \n\nBut since d is fixed (the difference between a and b), perhaps we can find x such that GCD(x, d) is as large as possible. Because that would maximize the denominator in the LCM formula, thus minimizing the LCM.\n\nBut how do we find x?\n\nLet me think. Let's suppose that d is fixed. Let's assume that a < b, so d = b -a. Then, x = a +k. So, x must be >= a (since k is non-negative). Also, since y = x +d = a +k +d = a +k + (b -a) = b +k. Which is correct.\n\nSo, for x = a +k, which is >= a. So, the problem becomes finding x >= a such that the LCM of x and x +d is minimized. \n\nAlternatively, since x +d = x + (b -a) = b +k, but perhaps it's easier to think in terms of x and d.\n\nBut since x can be any number >= a, how do we find the optimal x?\n\nLet me think again. Since GCD(x, d) is the same as GCD(x, d), and we want to maximize that. Let me denote g = GCD(x, d). So, the maximum possible value of g is d (when x is a multiple of d). But then, x can be any multiple of d. However, since x must",
    "response": "To solve this problem, we need to find the smallest non-negative integer $ k $ such that the least common multiple (LCM) of $ a + k $ and $ b + k $ is minimized. The optimal solution involves leveraging the properties of the greatest common divisor (GCD) and the difference between the two input numbers.\n\n### Approach\n1. **Understanding the Difference**: The difference between $ a $ and $ b $, denoted as $ d $, remains constant regardless of the value of $ k $. This is because both $ a + k $ and $ b + k $ are incremented by the same value $ k $.\n2. **LCM and GCD Relationship**: The LCM of two numbers $ x $ and $ y $ can be expressed as $ \\text{LCM}(x, y) = \\frac{x \\cdot y}{\\text{GCD}(x, y)} $. For our problem, the numbers $ x = a + k $ and $ y = b + k $ have a fixed difference $ d $, so $ y = x + d $.\n3. **Maximizing GCD**: To minimize the LCM, we need to maximize the GCD of $ x $ and $ x + d $, which is equivalent to maximizing the GCD of $ x $ and $ d $. This leads us to consider values of $ x $ that are multiples of the divisors of $ d $.\n4. **Iterating Over Divisors**: By iterating over the divisors of $ d $, we can determine the optimal $ k $ that minimizes the LCM. This involves checking each divisor and calculating the corresponding $ k $.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef compute_min_k(a, b):\n    a, b = sorted((a, b))\n    d = b - a\n    if d == 0:\n        return 0\n    min_lcm = float('inf')\n    best_k = 0\n    # Iterate over all possible divisors of d\n    for g in range(1, int(math.isqrt(d)) + 1):\n        if d % g == 0:\n            # Check divisor g\n            # We want x = a + k to be a multiple of g\n            # So x = m * g, where m is a positive integer\n            # Then x >= a => m * g >= a => m >= ceil(a / g)\n            # The minimal x is ceil(a / g) * g\n            m = (a + g - 1) // g\n            x = m * g\n            k = x - a\n            y = x + d\n            current_gcd = math.gcd(x, y)\n            current_lcm = x * y // current_gcd\n            if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n                min_lcm = current_lcm\n                best_k = k\n            # Check the other divisor d//g\n            if g != d // g:\n                g2 = d // g\n                m = (a + g2 - 1) // g2\n                x = m * g2\n                k = x - a\n                y = x + d\n                current_gcd = math.gcd(x, y)\n                current_lcm = x * y // current_gcd\n                if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n                    min_lcm = current_lcm\n                    best_k = k\n    # Also check k=0\n    k = 0\n    x = a + k\n    y = x + d\n    current_gcd = math.gcd(x, y)\n    current_lcm = x * y // current_gcd\n    if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n        min_lcm = current_lcm\n        best_k = k\n    return best_k\n\ndef main():\n    input = sys.stdin.read().split()\n    for i in range(0, len(input), 2):\n        a = int(input[i])\n        b = int(input[i+1])\n        print(compute_min_k(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input and processed in pairs of integers.\n2. **Sorting and Difference Calculation**: The smaller number is placed first to ensure a consistent difference calculation.\n3. **Divisor Iteration**: The code iterates over all divisors of the difference $ d $ between the two numbers. For each divisor, it calculates potential values of $ k $ that could minimize the LCM.\n4. **LCM Calculation**: For each potential $ k $, the corresponding LCM is calculated and compared to find the minimum value, ensuring the smallest $ k $ is chosen in case of ties.\n\nThis approach efficiently leverages number theory properties to minimize the LCM by focusing on divisors of the difference between the two input numbers.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef compute_min_k(a, b):\n    a, b = sorted((a, b))\n    d = b - a\n    if d == 0:\n        return 0\n    min_lcm = float('inf')\n    best_k = 0\n    # Iterate over all possible divisors of d\n    for g in range(1, int(math.isqrt(d)) + 1):\n        if d % g == 0:\n            # Check divisor g\n            # We want x = a + k to be a multiple of g\n            # So x = m * g, where m is a positive integer\n            # Then x >= a => m * g >= a => m >= ceil(a / g)\n            # The minimal x is ceil(a / g) * g\n            m = (a + g - 1) // g\n            x = m * g\n            k = x - a\n            y = x + d\n            current_gcd = math.gcd(x, y)\n            current_lcm = x * y // current_gcd\n            if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n                min_lcm = current_lcm\n                best_k = k\n            # Check the other divisor d//g\n            if g != d // g:\n                g2 = d // g\n                m = (a + g2 - 1) // g2\n                x = m * g2\n                k = x - a\n                y = x + d\n                current_gcd = math.gcd(x, y)\n                current_lcm = x * y // current_gcd\n                if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n                    min_lcm = current_lcm\n                    best_k = k\n    # Also check k=0\n    k = 0\n    x = a + k\n    y = x + d\n    current_gcd = math.gcd(x, y)\n    current_lcm = x * y // current_gcd\n    if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n        min_lcm = current_lcm\n        best_k = k\n    return best_k\n\ndef main():\n    input = sys.stdin.read().split()\n    for i in range(0, len(input), 2):\n        a = int(input[i])\n        b = int(input[i+1])\n        print(compute_min_k(a, b))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 394,
        "completion_token_count": 1069,
        "thoughts_token_count": 1024
    }
}