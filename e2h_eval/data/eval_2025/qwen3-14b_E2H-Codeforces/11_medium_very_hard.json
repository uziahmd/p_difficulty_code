{
    "start": 1758016192.6925013,
    "end": 1758017634.3153698,
    "start-formatted": "2025-09-16 18:49 KST",
    "end-formatted": "2025-09-16 19:13 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about a group of friends who want to make as many toasts as possible. Each toast requires certain amounts of drink, lime slices, and salt. All friends must make the same number of toasts. So, I need to find the maximum number of toasts per friend possible given the resources.\n\nLet me break down the inputs:\n\nThe input gives n (number of friends), k (number of bottles), l (ml per bottle), c (number of limes), d (slices per lime), p (grams of salt). Then, for each toast, each friend needs nl ml of drink, a slice of lime, and np grams of salt.\n\nSo, the steps are:\n\n1. Calculate the total amount of drink available. That's k * l ml. Then, each toast requires n * nl ml in total (since each of the n friends needs nl per toast). Wait, no. Wait, per toast, each friend needs nl ml. So for one toast, total drink needed is n * nl. But if there are t toasts, then total drink needed is t * n * nl. But the total available is k*l. So the maximum possible t based on drink is (k*l) // (n * nl). Wait, but that's for all toasts. Because for each toast, each friend uses nl. So for t toasts, each friend has t * nl, so total for all friends is n * t * nl. So the total drink must be >= n * t * nl.\n\nSimilarly for the lime slices. Each toast requires one slice per friend. So per toast, n slices. So total slices needed for t toasts is t * n. The total available is c * d. So maximum t based on limes is (c*d) // n.\n\nFor the salt: each toast requires np grams per friend. So per toast, total is n * np. For t toasts, it's t * n * np. The available is p. So maximum t based on salt is p // (n * np).\n\nThen, the answer is the minimum of these three values. Because all three constraints must be satisfied.\n\nWait, but let me check the example given. Let's take the first sample input:\n\nInput is 3 4 5 10 8 100 3 1.\n\nSo n=3 friends.\n\nTotal drink is 4*5=20 ml. For each toast, each friend needs 3 ml. So per toast, total is 3 * 3 =9 ml. So how many toasts can be made? 20 / 9 is 2.222... so floor is 2. Which matches the example's note.\n\nLimes: 10 limes cut into 8 slices each. Total slices 80. Each toast requires 3 slices (since 3 friends each have one). So 80 /3 is 26.666..., floor 26. But the example says that limes are enough for 80 toasts. Wait, wait, no. Wait the note says that the limes are enough for 80 toasts. Wait, how?\n\nWait, the note says that in the first sample, the limes are enough for 80 toasts. Wait, but according to my calculation, for each toast, you need n slices. So for 3 friends, each toast requires 3 slices. So total slices needed is 3 * t. So the maximum t is (c*d) // n. In this case, c*d is 10*8=80. Divided by n=3, that's 26.666, so floor 26. But the note says that limes are enough for 80 toasts. Oh wait, maybe I made a mistake here. Let me check again.\n\nWait the note says that the limes are enough for 80 toasts. How?\n\nAh, maybe I misunderstood the problem. Let me recheck the problem statement.\n\nThe problem says: \"each friend needs a slice of lime\". So for each toast, each friend needs one slice. So for one toast, there are n slices needed. For t toasts, n * t slices. So the total available is c*d. So the maximum t based on limes is (c*d) // n. \n\nIn the first example, c*d is 10*8=80. So 80 divided by n=3 is 26.666, so 26. But the note says that limes are enough for 80 toasts. Wait that's conflicting. What's going on here?\n\nWait the note says: \"the limes are enough for 80 toasts\". But according to the calculation, that would require that 80 toasts would need 80 * 3 = 240 slices. But the total slices available is 80. Which is impossible. So there's a contradiction here. Therefore, I must have misunderstood the problem.\n\nWait let me re-read the problem statement.\n\n\"each friend needs a slice of lime and np grams of salt.\"\n\nAh! Wait, for each toast, each friend needs a slice of lime. So for one toast, each of the n friends needs one slice. So per toast, n slices. So for t toasts, n * t slices. So in the first example, the total slices available is 10 * 8 = 80. So the maximum t is 80 / (n) = 80 /3 = 26.666, so 26. But the note says that the limes are enough for 80 toasts. Which suggests that perhaps the problem is that per toast, each friend needs a slice, but maybe per toast, each friend needs one slice per toast. Wait, but that's what I thought.\n\nBut according to the note, the limes are enough for 80 toasts. Which would imply that for 80 toasts, the total slices needed is 80 * 3 = 240. But the available is 80 slices. Which is impossible. Therefore, there's a misunderstanding here.\n\nWait looking at the note again:\n\n\"A comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n\nWait, why is the limes enough for 80 toasts? How does that calculation work?\n\nWait the note says that the limes are enough for 80 toasts. But according to the problem statement, each toast requires a slice per friend. So for each toast, n slices. So for 80 toasts, that's 80 * n slices. But in this case, n is 3, which would be 240 slices. However, the total slices available is 10 * 8 = 80. So that's impossible. So there's a contradiction here. Which means I must have misread the problem.\n\nWait perhaps the problem says that each toast requires one slice per person. But maybe the problem says that each toast requires one slice total. Like, for each toast, one slice for all friends? That would make more sense for the note.\n\nWait let me check the problem statement again:\n\n\"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n\nAh! So for each toast, each friend needs a slice of lime. So per toast, each of the n friends needs one slice. So per toast, n slices. But the note says that in the first example, limes are enough for 80 toasts. So 80 toasts would require 80 * n slices. But in the example, n is 3, which would be 240 slices. But the total slices is 80. So that's impossible. Therefore, there's a mistake in my understanding.\n\nAlternatively, perhaps the note is wrong? No, that's unlikely. Let me recheck the note's explanation.\n\nIn the note, the sample input is 3 4 5 10 8 100 3 1. So n=3 friends. The note says that the limes are enough for 10 * 8 = 80 toasts. So how is that possible? Maybe the problem says that per toast, each friend needs a slice, but the total per toast is 1 slice. That would make the calculation for the limes as (c*d) / 1, but that seems unlikely.\n\nAlternatively, maybe the problem says that per toast, each friend needs a slice, but the number of toasts is limited by the total number of slices divided by the number of friends. For example, if there are 80 slices, and each toast requires 3 slices (for 3 friends), then the maximum number of toasts is 80//3 = 26. But the note says that limes are enough for 80 toasts. Which implies that the calculation is (c*d) divided by 1. So why?\n\nWait perhaps the problem says that for each toast, each friend needs a slice. But the total number of slices per toast is 1. That doesn't make sense. Or maybe the problem says that each toast requires one slice per friend. So for one toast, each friend uses one slice, so per toast, n slices. So the total number of toasts possible is (c*d) // (n) ?\n\nBut in the note, the limes are enough for 80 toasts. So according to that, (c*d) is 80, and the number of toasts is 80. So that would mean that the per toast required slices is 1. So why?\n\nThis is a critical point. Let me re-examine the problem statement again.\n\nThe problem says:\n\n\"each friend needs ... a slice of lime and np grams of salt.\"\n\nSo for each toast, each friend needs a slice. So for one toast, each of the n friends needs a slice. Therefore, per toast, n slices are needed. Therefore, the total number of toasts possible from the limes is (c*d) // (n). \n\nBut according to the note, for the first sample, the limes are enough for 80 toasts. Which would require that (c*d) // (n) is 80. But in the first sample, c is 10, d is 8, n is 3. 10*8=80. 80//3 is 26. So that's not matching. Therefore, there's a misunderstanding here.\n\nWait perhaps the problem says that each toast requires one slice per friend. But the problem says that the friends are making toasts. So for each toast, each friend needs a slice. So for one toast, each of the n friends needs one slice. So for one toast, n slices are needed. Therefore, for t toasts, n * t slices are needed. So the maximum t is (c*d) // (n).\n\nBut according to the note, the limes are enough for 80 toasts. Which would mean that (c*d) is 80, and t is 80. So that implies that (c*d) // (n) = 80. Which would require that n divides c*d. For example, if n=1, then yes. But in the first sample, n is 3. So how is that possible?\n\nWait the note says that the limes are enough for 80 toasts. But according to the sample input, the limes are 10 * 8 = 80 slices. If each toast requires one slice per friend, then for t toasts, the total slices needed is t * n. So for 80 toasts, that would be 80 * 3 = 240 slices. But the available is 80. Which is way less than 240. Therefore, the note's explanation must be wrong? Or perhaps I'm misunderstanding the problem.\n\nWait the note says that the answer is min(6, 80, 100) / 3 = 2. Which implies that the 6 comes from the drink, 80 from limes, 100 from salt. Then, the minimum of those three is 6, divided by 3 gives 2. But why is the limes contributing 80?\n\nAh, maybe the note is not saying that the limes are enough for 80 toasts, but that the limes are enough for 80 toasts per friend? Or perhaps the note is saying that the limes are enough for 80 toasts in total. But then, the min is between 6, 80, 100. Which would be 6. Then divided by 3 friends gives 2.\n\nBut that would imply that the limes are sufficient for 80 toasts. But how?\n\nWait maybe the note is using the term \"toasts\" in a different way. Let me recheck the note.\n\nThe note says:\n\nOverall the friends have 20 ml of drink, which is enough to make 20 / 3 = 6 toasts. \n\nWait why 20 / 3? Because each toast requires 3 ml per friend. So for one toast, each of the 3 friends needs 3 ml. So total per toast is 3 * 3 = 9 ml. So 20 / 9 is 2.222, which is 2. So why does the note say 20/3 = 6?\n\nAh, here's the mistake! Oh no! The note is wrong? Or perhaps I'm misunderstanding the problem again.\n\nWait the note says that the drink is enough for 20 / 3 = 6 toasts. But that would be if each toast requires 3 ml in total. But according to the problem statement, each friend needs nl milliliters. So per toast, each friend uses nl. So for one toast, total is n * nl. \n\nIn the first sample, nl is 3. So per toast, total drink is 3 * 3 = 9. So 20 ml / 9 is 2.222, so 2 toasts. But the note says that the drink is enough for 6 toasts. That's impossible unless there's a misunderstanding here.\n\nWait this suggests that there's a fundamental error in my understanding of the problem. Let me recheck the problem statement again.\n\nProblem statement says:\n\neach friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\n\nSo for each toast, each friend needs nl ml. So for one toast, the total drink consumed is n * nl ml. For t toasts, it's t * n * nl.\n\nIn the first sample input, n=3, nl=3. So per toast, total drink is 3 * 3 =9. Total available is 4 *5 =20. So 20 //9 = 2. So the note says that the drink is enough for 20 / 3 =6 toasts. That would be if per toast, the total drink is 3 ml, which would be nl * 1, but that would be per friend. So why is the note saying 20/3?\n\nThis is very confusing. Let me look at the sample input and output again.\n\nSample Input 1: 3 4 5 10 8 100 3 1\n\nSample Output: 2.\n\nThe note says that the drink is enough for 20/3 =6 toasts. But how?\n\nWait perhaps the problem is that each toast requires nl milliliters per friend, but the total number of toasts is t, so each friend makes t toasts, so total per friend is t * nl. So total for all friends is n * t * nl. Which is the same as before. So the drink available is k * l. So the maximum t is (k*l) // (n * nl). \n\nIn the first sample, that would be (4*5) =20. Divided by (3 *3) =9. 20//9 = 2. Which is correct.\n\nBut the note says that 20/3 =6. So why is that?\n\nAh! Wait, perhaps the note is incorrect. Or perhaps the problem statement is different. Let me recheck the problem statement again.\n\nWait the note says:\n\nOverall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\n\nBut why divide by 3? If each toast requires 3 ml per friend, then for one toast, each friend uses 3 ml. So for one toast, total is 3 * 3 =9 ml. So 20 / 9 = 2.22. But the note says 20 /3 is 6. So this suggests that the note is dividing by nl instead of n * nl. Which would be wrong. But why?\n\nUnless the problem is that each toast requires nl milliliters per friend, but the total per toast is nl. So for example, each toast requires nl ml per friend, but the total for the toast is nl, not multiplied by n. That would make no sense. But that would explain the note.\n\nAlternatively, maybe the problem says that for each toast, each friend needs nl milliliters, but the total per toast is nl. Which would be impossible unless n=1. But that's not the case here.\n\nAlternatively, perhaps the problem says that each toast requires nl milliliters in total, not per friend. But that would contradict the problem statement.\n\nAlternatively, perhaps the problem statement has a typo and the note is correct. Let me think again. \n\nIf the note says that the drink is enough for 6 toasts, then how?\n\nIf the drink is 20 ml, and per toast, the total is 3 ml, then 20 / 3 = 6.666, floor 6. Which would be the case if per toast, the total drink needed is 3 ml. Which would be the case if per toast, the total is nl, not per friend. \n\nBut the problem statement says that each friend needs nl milliliters. So per toast, per friend. So for t toasts, each friend uses t * nl. So total for all friends is n * t * nl. \n\nBut the note seems to suggest that the drink is enough for t = (k*l) / nl. Which would be 20 /3 =6.666, floor 6. Which would be the case if each toast requires nl milliliters in total, not per friend. \n\nSo there's a contradiction between the problem statement and the note. Which suggests that perhaps I have misread the problem statement. Let me recheck the problem statement once more.\n\nThe problem says:\n\neach friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\n\nSo for each toast, each friend needs nl ml. So for one toast, each of the n friends needs nl ml. So for one toast, the total is n * nl ml. For t toasts, it's n * t * nl ml. \n\nBut according to the note, the drink is enough for 20 / 3 =6 toasts. Which would imply that the total required for t toasts is t * nl. So that would be the case if each toast requires nl ml total, not per friend. \n\nThis is a critical discrepancy. How to resolve this?\n\nLooking at the sample input and output:\n\nSample input 1: n=3, k=4, l=5, so total drink is 4*5=20.\n\nnl is 3.\n\nThe output is 2. So according to the note, the minimum of 6, 80, 100 is 6, divided by 3 equals 2. So the note's calculation is taking the drink's capacity as 6 toasts, then dividing by 3 friends to get 2. \n\nBut why is the drink's capacity 6 toasts? It must be that for the drink, the number of toasts is (k*l) / nl. Which would be 20 /3 =6.666, floor 6. Then divided by n (3) gives 2. \n\nBut why would that be the case? That would imply that the drink is used as (t * nl) per friend. Wait, but that would be for each friend, t toasts, each requiring nl ml. So for each friend, t * nl. Total for all friends is n * t * nl. Which equals the total drink. So:\n\nn * t * nl <= k*l → t <= (k*l) / (n * nl).\n\nBut the note says that the drink is enough for 20 /3 =6 toasts. Which would imply that the total drink is t * nl, not multiplied by n. So why?\n\nThis is very confusing. Let me think about what the sample input's correct answer is. According to the sample input, the output is 2. So the correct way to compute it is that the drink allows for 6 toasts (but how?), the limes allow for 80 toasts (but how?), the salt allows for 100 toasts. Then the minimum of those three is 6, and divided by 3 friends gives 2. \n\nSo the problem's logic is that the drink allows for (k*l) / nl toasts, the limes allow for (c*d) / 1 toasts, and the salt allows for p / np toasts. Then the minimum of these three is divided by n to get the answer. \n\nBut that would imply that the drink is being calculated as (total drink) / (nl) toasts, but that would be the case if each toast requires nl ml in total, not per friend. \n\nBut that would contradict the problem statement. But since the sample seems to indicate that, perhaps the problem statement is different. \n\nAlternatively, maybe the problem statement is that for each toast, the total amount of drink needed is nl per friend. Wait, no. Let me think again.\n\nLet me think of the sample input. If the answer is 2, then each friend makes 2 toasts. So for each friend, 2 * nl = 2*3 =6 ml. For 3 friends, total is 3 * 6 = 18 ml. Which is within the 20 ml available. So that's possible. \n\nBut how is that calculated? \n\nThe total required drink is t * n * nl. \n\nIn this case, t is 2. So 2 *3 *3 =18 ≤ 20. \n\nSo why does the note say that the drink is enough for 20/3=6 toasts? Because 20/3 is 6.666, and if the note is considering that for each toast, the total drink is nl per friend, but that's not the case. \n\nAlternatively, perhaps the note is wrong, or there's a mistake in the note's explanation. But the sample output is correct. \n\nSo perhaps the correct approach is to calculate for each resource:\n\nDrink: total_drink = k * l. Each toast requires nl per friend. So for t toasts, total needed is t * n * nl. So maximum t is total_drink // (n * nl). \n\nLimes: total_slices = c * d. Each toast requires 1 slice per friend, so for t toasts, total needed is t * n. So maximum t is total_slices // n. \n\nSalt: total_salt = p. Each toast requires np per friend, so for t toasts, total needed is t * n * np. So maximum t is total_salt // (n * np). \n\nThen, the answer is the minimum of these three values. \n\nIn the first sample:\n\ntotal_drink = 4 *5 =20. n * nl =3 *3 =9. 20//9 =2. \n\ntotal_slices = 10*8=80. 80//3 =26. \n\ntotal_salt =100. n * np =3 *1=3. 100//3=33. \n\nminimum of 2, 26, 33 is 2. So answer is 2. Which matches the sample. \n\nSo the note's explanation is wrong. It says that the drink is enough for 20/3=6 toasts. But according to the correct calculation, it's 20// (3*3) = 2. \n\nSo the note's explanation is incorrect. Or perhaps it's a translation error. \n\nSo now I can proceed with the correct calculations.\n\nSo, the steps are:\n\nCalculate the maximum number of toasts possible based on each resource:\n\n- Drink: (k * l) // (n * nl)\n\n- Limes: (c * d) // n \n\n- Salt: p // (n * np)\n\nThen take the minimum of these three numbers. That's the answer.\n\nSo the code should read the input values, compute these three numbers, and output the minimum.\n\nNow, let's test this against the sample input.\n\nFirst sample input:\n\nn=3, k=4, l=5, c=10, d=8, p=100, nl=3, np=1.\n\ndrink: 4*5=20. n*nl=3*3=9. 20//9=2.\n\nlimes: 10*8=80. 80//3=26.\n\nsalt: 100/(3*1)=33.333 → 33.\n\nmin(2,26,33) is 2 → correct.\n\nSecond sample input:\n\n['5 100 10 1 19 90 4 3']\n\nn=5, k=100, l=10 → total drink is 100*10=1000.\n\nnl=4. So n * nl =5*4=20. 1000//20=50.\n\nlimes: c=1, d=19 → 1*19=19. divided by n=5 → 19//5=3.\n\nsalt: p=90. np=3. n*np=5*3=15. 90//15=6. \n\nminimum of 50,3,6 → 3. Which matches the sample output of 3.\n\nThird sample input:\n\n['10 1000 1000 25 23 1 50 1']\n\nn=10, k=1000, l=1000 → total drink 1,000,000. nl=50. n * nl = 10 *50=500. 1e6 //500 = 2000.\n\nlimes: c=25, d=23 → 25*23=575. divided by 10 → 57.5 → 57.\n\nsalt: p=1. n * np =10*1=10 → 1//10=0. \n\nso min(2000,57,0) is 0. Which matches the sample output.\n\nSo this approach works.\n\nNow, the code.\n\nRead the input line as integers. For each input line, split into n, k, l, c, d, p, nl, np.\n\nCompute:\n\ndrink = (k * l) // (n * nl)\n\nlimes = (c * d) // n\n\nsalt = p // (n * np)\n\nresult = min(drink, limes, salt)\n\nprint(result)\n\nBut need to handle cases where division is zero. For example, if n * nl is zero? But according to the input constraints, all numbers are positive integers. So no division by zero.\n\nNow, code:\n\nRead the input line, split into the variables.\n\nBut the input is given as multiple lines? Wait, the sample input shows that the first line is a list of inputs, but in the actual problem, the input is a single line. Wait, the problem says:\n\nInput: The first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\nSo the code should read one line, split into 8 integers.\n\nBut in the sample input provided in the problem, there are three examples. But in practice, the code should read from stdin one line.\n\nWait the sample input given in the problem is:\n\nSample Input:\n\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\nBut this is probably the way the test cases are represented, but the actual code should read one line from stdin. So the code will process one line, split into 8 integers.\n\nSo in Python:\n\nRead the input line, split into parts.\n\nSo the code:\n\nn, k, l, c, d, p, nl, np = map(int, input().split())\n\nThen compute:\n\ndrink = (k * l) // (n * nl)\n\nlimes = (c * d) // n\n\nsalt = p // (n * np)\n\nresult = min(drink, limes, salt)\n\nprint(result)\n\nWait, but in the first sample input, the first line is '3 4 5 10 8 100 3 1' → which would give:\n\nn=3, k=4, l=5, c=10, d=8, p=100, nl=3, np=1.\n\nWhich gives:\n\ndrink = (4*5)/(3*3) = 20/9 = 2.222 → 2.\n\nlimes = (10*8)/3 → 80//3=26.\n\nsalt = 100/(3*1) = 33.333 → 33. min is 2. Correct.\n\nYes.\n\nSo the code should be straightforward.\n\nNow, let's test the third sample input:\n\nn=10, k=1000, l=1000 → drink is 1000*1000 = 1,000,000. n * nl is 10 *50 =500. 1e6 //500 = 2000.\n\nlimes: c=25, d=23 → 25*23=575. divided by n=10 → 57.5 → 57.\n\nsalt: p=1. n * np =10 *1=10. 1//10=0. min is 0. Correct.\n\nSo the code works.\n\nNow, code:\n\nRead the input line, split into 8 integers.\n\nCompute the three values, take min, print.\n\nSo the Python code is:\n\nn, k, l, c, d, p, nl, np = map(int, input().split())\ndrink = (k * l) // (n * nl)\nlimes = (c * d) // n\nsalt = p // (n * np)\nprint(min(drink, limes, salt))\n\nThat's the code.\n\nBut wait, what if any of the denominators are zero? But according to the problem statement, all input numbers are at least 1. So n is ≥1, nl ≥1, so n * nl ≥1. Similarly for others. So no division by zero.\n\nThus, this code should work.\n",
    "response": "\n\nTo solve this problem, we need to determine the maximum number of toasts each friend can make given the constraints on the available resources: soft drink, lime slices, and salt. Each toast requires a specific amount of drink per friend, a slice of lime per friend, and a specific amount of salt per friend. The goal is to find the maximum number of toasts that can be made such that all friends can participate equally.\n\n### Approach\n1. **Calculate Total Resources**: Determine the total amount of drink available, the total number of lime slices, and the total amount of salt.\n2. **Determine Constraints**:\n   - **Drink Constraint**: Calculate how many toasts can be made based on the total drink available. Each toast requires `n * nl` milliliters of drink for all friends.\n   - **Lime Constraint**: Calculate how many toasts can be made based on the total number of lime slices available. Each toast requires `n` slices for all friends.\n   - **Salt Constraint**: Calculate how many toasts can be made based on the total salt available. Each toast requires `n * np` grams of salt for all friends.\n3. **Determine the Limiting Factor**: The maximum number of toasts each friend can make is determined by the minimum value among the three constraints calculated above.\n\n### Solution Code\n```python\nn, k, l, c, d, p, nl, np = map(int, input().split())\ndrink = (k * l) // (n * nl)\nlimes = (c * d) // n\nsalt = p // (n * np)\nprint(min(drink, limes, salt))\n```\n\n### Explanation\n- **Drink Calculation**: The total drink available is `k * l` milliliters. Each toast requires `n * nl` milliliters for all friends. The number of toasts possible based on drink is `(k * l) // (n * nl)`.\n- **Lime Calculation**: The total number of lime slices available is `c * d`. Each toast requires `n` slices (one per friend). The number of toasts possible based on limes is `(c * d) // n`.\n- **Salt Calculation**: The total salt available is `p` grams. Each toast requires `n * np` grams for all friends. The number of toasts possible based on salt is `p // (n * np)`.\n- **Result**: The minimum value among the three calculated values gives the maximum number of toasts each friend can make, ensuring all resources are sufficient for that number of toasts.",
    "ground_truth": "N/A",
    "extracted_answer": "n, k, l, c, d, p, nl, np = map(int, input().split())\ndrink = (k * l) // (n * nl)\nlimes = (c * d) // n\nsalt = p // (n * np)\nprint(min(drink, limes, salt))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 538,
        "completion_token_count": 540,
        "thoughts_token_count": 7020
    }
}