{
    "start": 1758309269.5742445,
    "end": 1758309475.3887525,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:17 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nThe problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the tallest house in a certain interval [l_i, r_i] must be at most x_i. My goal is to maximize the total profit while satisfying all these restrictions.\n\nHmm, how do I approach this? Since n, h, m are all up to 50, maybe a brute-force approach is feasible. But even then, for each of the n houses, there are h+1 possibilities. For n=50 and h=50, that's 51^50 possibilities, which is way too big. So brute force is impossible here.\n\nSo I need a smarter approach. Let me think about constraints. Each restriction imposes that the maximum in a range is <= x_i. So for each interval, the maximum height in that interval can't exceed x_i. How can I model this?\n\nAnother idea: For each position, determine the maximum allowed height based on the restrictions. But since restrictions can overlap, it's not straightforward. For example, a particular house might be part of multiple intervals. The maximum height for that house is the minimum of all the x_i's from the restrictions that apply to it, but perhaps not exactly. Because a restriction applies to a range. For example, if a restriction says that in [1,3], the max is 2. Then each house in that range can't be higher than 2. But if another restriction says that in [2,2], the max is 3, then house 2 can be up to 3, but since the first restriction requires that the max in [1,3] is 2, then house 2 can't be higher than 2. So the restrictions are not per-house, but per-interval maxima.\n\nSo the problem is to assign heights to each house such that for every restriction, the maximum in [l_i, r_i] is <= x_i. And we want to maximize the sum of squares.\n\nHow can I model this? It seems like a constraint satisfaction problem. But with small n and h, perhaps we can find for each house the maximum possible height allowed by the constraints, and then set each house to that maximum. However, that's not necessarily correct because the maximum for a house may be constrained by multiple overlapping restrictions. For example, if a house is in multiple ranges, each with different x_i's. The maximum allowed for that house would be the minimum of all x_i's that apply to it through their ranges. Wait, but that's not entirely accurate. Because a restriction applies to a range, but the maximum in that range could be limited by the restriction. So, for example, if a restriction says that the maximum in [1,3] is 2, then each house in that range can be at most 2. However, if another restriction says that the maximum in [2,4] is 3, then the house 2 can be up to 3, but the maximum in [1,3] must be 2. So house 2 can be 2, but house 3 can be 2, and house 1 can be 2. But the second restriction allows house 2 to be up to 3, but the first restriction restricts it to 2. Therefore, for each house, the maximum possible height is the minimum of all x_i's from restrictions that cover that house, but also considering that some restrictions may not directly apply to the house but affect it via their ranges.\n\nWait, no. That's not correct. For example, if a restriction says that the maximum in [1,3] is 2. Then, the maximum in that entire range is 2. So each individual house in that range can be at most 2. Because if any of them were higher than 2, then the maximum would be higher than 2, violating the restriction. Therefore, for each house, the maximum allowed height is the minimum of all x_i's of restrictions that include that house in their interval. Because if there's a restriction that includes the house in its interval, then the maximum in that interval must be <= x_i, so the house can't be higher than x_i. Therefore, for each house, the maximum possible height is the minimum x_i among all restrictions that include that house in their [l_i, r_i] interval. But also, the global maximum h is a constraint. So for each house, the maximum allowed height is min( h, min( x_i for all restrictions that include this house in their interval ) )\n\nBut wait, is that sufficient? Let me think. Suppose there's a restriction that says that in [1,3], the max is 2",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a maximum height for the tallest house in a specified range.\n\n### Approach\n1. **Constraints Analysis**: Each restriction specifies a range and a maximum height. For each house, the maximum allowable height is determined by the minimum of all restrictions that cover that house and the global maximum height `h`.\n2. **Determine Maximum Heights**: For each house, compute the minimum height restriction that applies to it. This ensures that all restrictions are respected.\n3. **Calculate Profit**: Once the maximum allowable height for each house is determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = 0\n        for height in max_heights:\n            total += height * height\n        \n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of spots `n`, maximum height `h`, and number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum possible height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum height for each house in the specified range is updated to the minimum of its current value and the restriction's maximum height.\n4. **Profit Calculation**: The total profit is calculated by summing the squares of the maximum allowable heights for each house.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by setting each house to the highest possible allowable height. The complexity is manageable due to the small constraints (up to 50 houses and restrictions), making this brute-force approach feasible.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = 0\n        for height in max_heights:\n            total += height * height\n        \n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 820,
        "completion_token_count": 559,
        "thoughts_token_count": 1024
    }
}