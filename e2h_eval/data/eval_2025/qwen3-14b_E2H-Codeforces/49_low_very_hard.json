{
    "start": 1758309764.111001,
    "end": 1758309811.3868592,
    "start-formatted": "2025-09-20 04:22 KST",
    "end-formatted": "2025-09-20 04:23 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's try to figure out how to solve this problem. The problem is about reconstructing the number of mushrooms on each lawn based on the given GCD and LCM values for each road (edge) between two lawns. \n\nSo, the input gives us a graph where each edge has a GCD and LCM of the two nodes it connects. We need to assign numbers to each node such that for every edge, the GCD and LCM match the given values. If it's impossible, output NO; else, output YES and any valid configuration.\n\nFirst, I need to think about the constraints between the nodes connected by an edge. Let's say for an edge between u and v, the GCD is g and LCM is l. Then, we know that for the numbers a (on u) and b (on v), we have:\n\ngcd(a, b) = g\nlcm(a, b) = l\n\nBut there's a known relation between GCD and LCM: a * b = gcd(a, b) * lcm(a, b). So, a*b = g*l. Also, since the GCD is g, both a and b must be multiples of g. Let me denote a = g * x and b = g * y. Then, the GCD of a and b is g * gcd(x, y), but since the given GCD is g, this implies that gcd(x, y) must be 1. Also, the LCM of a and b is g * lcm(x, y). Since the given LCM is l, we have:\n\ng * lcm(x, y) = l → lcm(x, y) = l/g.\n\nBut since x and y are coprime, their LCM is x*y. Therefore, x*y = l/g. \n\nSo for each edge between u and v with GCD g and LCM l, we can deduce that the product of the values (a and b) must be g*l. Also, since a and b are multiples of g, we can model this as variables that are connected with constraints that their ratio (when divided by g) must be coprime and their product must be l/g.\n\nThis suggests that each node's value can be represented as g multiplied by some variable, but perhaps we need to model this as a graph where each edge imposes certain relations between variables. However, since the variables are connected through multiple edges, we need to find a way to assign values that satisfy all constraints.\n\nBut how do we model this? Maybe we can model this as a graph where each node has a value, and for each edge, we have constraints between the two nodes. But how?\n\nLet me think again. For each edge between u and v, the numbers a_u and a_v must satisfy:\n\ngcd(a_u, a_v) = g_uv\nlcm(a_u, a_v) = l_uv\n\nWhich implies that:\n\na_u = g_uv * x\na_v = g_uv * y\nwhere x and y are coprime, and x*y = l_uv / g_uv.\n\nSo for each edge, the product of x and y must be equal to (l_uv / g_uv). Let's call this value k_uv. So, x * y = k_uv. Also, since x and y are coprime, they must be divisors of k_uv such that their product is k_uv and they are coprime.\n\nBut how does this help us assign values to the nodes?\n\nThe key idea here is that for each node, its value is determined by the product of the GCDs along the path from some root node. Wait, maybe not. Alternatively, perhaps we can model this as a graph where each node's value is a multiple of some base, and the relations between nodes are constraints.\n\nAnother approach: think of each node's value as being a multiple of the GCD of the edge. But since multiple edges may connect to a node, the value of the node must be compatible with all connected edges.\n\nAlternatively, for each edge, the ratio between a_u and a_v must be such that when divided by their GCD, they are coprime. So, if we take a_u / g_uv and a_v / g_uv, they are coprime and their product is (l_uv / g_uv). \n\nBut how can we model this? It seems like a system of equations where each edge imposes that the product of the two variables (divided by their GCD) equals k_uv and they are coprime.\n\nThis seems complex. Maybe we can model the problem as a graph where each node has a value, and for each edge, we can relate the two nodes' values via the constraints.\n\nBut how can we assign these values? One possible way is to treat this as a graph where each node's value is determined relative to others. For example, if we pick a starting node and assign it a value,",
    "response": "To solve this problem, we need to reconstruct the number of mushrooms on each lawn based on given GCD and LCM values for each road (edge) between two lawns. The solution involves checking if a valid configuration exists that satisfies all constraints and, if it does, outputting one such configuration.\n\n### Approach\n1. **Graph Representation**: Represent the lawns and roads as an undirected graph where each node represents a lawn and each edge contains the GCD and LCM values of the mushrooms on the connected lawns.\n2. **Constraints Check**: For each edge, check if the product of GCD and LCM is valid. Specifically, the product of GCD and LCM must be divisible by the GCD, ensuring that the LCM is a multiple of the GCD.\n3. **Component Analysis**: Use Depth-First Search (DFS) to explore each connected component of the graph. For each component, assign values to nodes while ensuring that the constraints from the edges are satisfied.\n4. **Value Assignment**: For each node in a component, assign a value based on the constraints derived from its connected edges. If any inconsistency is found during this process, the configuration is impossible.\n\n### Solution Code\n```python\nimport sys\nimport math\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    n, m = map(int, input[idx].split())\n    idx += 1\n    edges = []\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, g, l = map(int, input[idx].split())\n        idx += 1\n        edges.append((u-1, v-1, g, l))\n        graph[u-1].append((v-1, g, l))\n        graph[v-1].append((u-1, g, l))\n    \n    visited = [False] * n\n    values = [None] * n\n    result = True\n\n    def dfs(u, val):\n        visited[u] = True\n        values[u] = val\n        for v, g, l in graph[u]:\n            if values[v] is not None:\n                if values[v] != val:\n                    if values[v] % g != 0 or val % g != 0:\n                        return False\n                    a = values[v] // g\n                    b = val // g\n                    if math.gcd(a, b) != 1 or a * b != l // g:\n                        return False\n                continue\n            k = l // g\n            if k % (val // g) != 0:\n                return False\n            a = val // g\n            b = k // a\n            new_val = g * b\n            if not dfs(v, new_val):\n                return False\n        return True\n\n    for i in range(n):\n        if not visited[i] and len(graph[i]) > 0:\n            if values[i] is None:\n                if len(graph[i]) == 0:\n                    values[i] = 1\n                    continue\n                # Assign initial value\n                # Try to assign a value based on first edge\n                first_edge = graph[i][0]\n                v, g, l = first_edge\n                k = l // g\n                # Since a * b = k and gcd(a,b)=1\n                # So possible a is 1, then b = k\n                # So initial value can be g * 1 = g\n                # Or other possibilities, but let's choose 1 as base\n                values[i] = g * 1\n                if not dfs(i, values[i]):\n                    print(\"NO\")\n                    return\n        elif len(graph[i]) == 0:\n            values[i] = 1\n\n    # Now check all edges again\n    for u, v, g, l in edges:\n        a = values[u]\n        b = values[v]\n        if math.gcd(a, b) != g or (a * b) // math.gcd(a, b) != l:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(' '.join(map(str, values)))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Graph Representation**: The graph is represented using an adjacency list where each node points to its neighbors along with the GCD and LCM values of the connecting edge.\n2. **DFS Traversal**: For each unvisited node, we perform a DFS to assign values to nodes in its connected component. During traversal, we ensure that the values assigned satisfy the constraints imposed by the edges.\n3. **Constraints Check**: During DFS, we check if the values assigned to nodes satisfy the GCD and LCM constraints. If any inconsistency is found, we immediately return \"NO\".\n4. **Final Validation**: After assigning values to all nodes, we validate all edges once more to ensure all constraints are met, confirming the correctness of the solution.\n\nThis approach ensures that we efficiently check and assign values while adhering to the constraints, providing a valid configuration if possible.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    n, m = map(int, input[idx].split())\n    idx += 1\n    edges = []\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, g, l = map(int, input[idx].split())\n        idx += 1\n        edges.append((u-1, v-1, g, l))\n        graph[u-1].append((v-1, g, l))\n        graph[v-1].append((u-1, g, l))\n    \n    visited = [False] * n\n    values = [None] * n\n    result = True\n\n    def dfs(u, val):\n        visited[u] = True\n        values[u] = val\n        for v, g, l in graph[u]:\n            if values[v] is not None:\n                if values[v] != val:\n                    if values[v] % g != 0 or val % g != 0:\n                        return False\n                    a = values[v] // g\n                    b = val // g\n                    if math.gcd(a, b) != 1 or a * b != l // g:\n                        return False\n                continue\n            k = l // g\n            if k % (val // g) != 0:\n                return False\n            a = val // g\n            b = k // a\n            new_val = g * b\n            if not dfs(v, new_val):\n                return False\n        return True\n\n    for i in range(n):\n        if not visited[i] and len(graph[i]) > 0:\n            if values[i] is None:\n                if len(graph[i]) == 0:\n                    values[i] = 1\n                    continue\n                # Assign initial value\n                # Try to assign a value based on first edge\n                first_edge = graph[i][0]\n                v, g, l = first_edge\n                k = l // g\n                # Since a * b = k and gcd(a,b)=1\n                # So possible a is 1, then b = k\n                # So initial value can be g * 1 = g\n                # Or other possibilities, but let's choose 1 as base\n                values[i] = g * 1\n                if not dfs(i, values[i]):\n                    print(\"NO\")\n                    return\n        elif len(graph[i]) == 0:\n            values[i] = 1\n\n    # Now check all edges again\n    for u, v, g, l in edges:\n        a = values[u]\n        b = values[v]\n        if math.gcd(a, b) != g or (a * b) // math.gcd(a, b) != l:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(' '.join(map(str, values)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 1067,
        "thoughts_token_count": 1024
    }
}