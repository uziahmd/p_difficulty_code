{
    "start": 1758338173.105637,
    "end": 1758338261.799575,
    "start-formatted": "2025-09-20 12:16 KST",
    "end-formatted": "2025-09-20 12:17 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.factorial(n) * pow(math.factorial(k) * math.factorial(n - k), MOD - 2, MOD) % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 3):\n        n = int(data[i])\n        m = int(data[i+1])\n        g = int(data[i+2])\n        \n        total = 0\n        \n        # The number of beautiful strings is the number of ways to arrange n 0s and m 1s\n        # such that the final character after all possible reductions is g.\n        \n        # Let's think about the reduction process.\n        # Each modification reduces the length by 1.\n        # To get a string of length 1, we need to perform (n + m - 1) modifications.\n        # The final character depends on the parity of the number of 1s and 0s.\n        \n        # If the total number of characters is odd, then it's possible to reduce to one character.\n        # If it's even, then it's not possible to reduce to one character.\n        \n        if (n + m) % 2 == 0:\n            results.append(0)\n            continue\n        \n        # Now, the final character depends on the number of 1s and 0s.\n        # Let's denote the number of 1s as m, and 0s as n.\n        # The final character is 1 if the number of 1s is odd, else 0.\n        # Because each modification replaces two characters with one, and the result is:\n        # - 0 if replacing two 1s or one 0 and one 1\n        # - 1 if replacing two 0s\n        \n        # But since we are only interested in the final character, and the number of operations is fixed,\n        # the final character is determined by the parity of the number of 1s.\n        \n        # So if the total number of characters is odd, then:\n        # final_char = 1 if m % 2 == 1 else 0\n        \n        final_char = 1 if m % 2 == 1 else 0\n        \n        if final_char == g:\n            total = comb(n + m, n)\n        \n        results.append(total % MOD)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.factorial(n) * pow(math.factorial(k) * math.factorial(n - k), MOD - 2, MOD) % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 3):\n        n = int(data[i])\n        m = int(data[i+1])\n        g = int(data[i+2])\n        \n        total = 0\n        \n        # The number of beautiful strings is the number of ways to arrange n 0s and m 1s\n        # such that the final character after all possible reductions is g.\n        \n        # Let's think about the reduction process.\n        # Each modification reduces the length by 1.\n        # To get a string of length 1, we need to perform (n + m - 1) modifications.\n        # The final character depends on the parity of the number of 1s and 0s.\n        \n        # If the total number of characters is odd, then it's possible to reduce to one character.\n        # If it's even, then it's not possible to reduce to one character.\n        \n        if (n + m) % 2 == 0:\n            results.append(0)\n            continue\n        \n        # Now, the final character depends on the number of 1s and 0s.\n        # Let's denote the number of 1s as m, and 0s as n.\n        # The final character is 1 if the number of 1s is odd, else 0.\n        # Because each modification replaces two characters with one, and the result is:\n        # - 0 if replacing two 1s or one 0 and one 1\n        # - 1 if replacing two 0s\n        \n        # But since we are only interested in the final character, and the number of operations is fixed,\n        # the final character is determined by the parity of the number of 1s.\n        \n        # So if the total number of characters is odd, then:\n        # final_char = 1 if m % 2 == 1 else 0\n        \n        final_char = 1 if m % 2 == 1 else 0\n        \n        if final_char == g:\n            total = comb(n + m, n)\n        \n        results.append(total % MOD)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 549,
        "completion_token_count": 564,
        "thoughts_token_count": 0
    }
}