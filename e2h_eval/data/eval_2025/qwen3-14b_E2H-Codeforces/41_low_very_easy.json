{
    "start": 1758309257.292282,
    "end": 1758309290.4165142,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:14 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the task is to build houses on n spots. Each house's height is between 0 and h, inclusive. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range l_i to r_i, the tallest house must be at most x_i. I need to maximize the total profit under these constraints.\n\nHmm. The input constraints are small: n, h, m are up to 50. So maybe a brute-force approach is feasible here? But with n=50, trying all possibilities would be impossible. Because each house can have up to h+1 possibilities (from 0 to h). For 50 houses, that's (h+1)^50 possibilities. Even if h is 50, that's way too big. So brute force is not going to work.\n\nSo what's another approach? Maybe dynamic programming? Or perhaps we can model this as a constraint satisfaction problem where we need to maximize the sum of squares under certain constraints.\n\nAlternatively, think about the problem as an optimization problem with constraints. Each restriction imposes that the maximum in a certain interval is <= some value. How can we model this?\n\nWait, but since the maximum height for each interval is constrained, perhaps we can find for each position the maximum allowed height. But how do overlapping restrictions affect this?\n\nFor example, if there's a restriction that says [1,3] must have max <= 2, and another that says [2,4] must have max <= 3, then each position in the range has to satisfy the constraints. But the maximum of the entire range is the min of all the constraints that apply to it.\n\nBut how do we find for each position, the maximum possible height it can have given all the restrictions?\n\nWait, but each restriction applies to a range. For example, a restriction on [l_i, r_i] that the maximum is <= x_i. So for each position j, the maximum height allowed for j is the minimum of all x_i where j is in [l_i, r_i], and also considering the global h.\n\nBut is that correct? Because if there's a restriction that says that in [1,3], the max is <= 2, then each of positions 1,2,3 can have at most 2. But if there's another restriction that says [1,2] must have max <=3, then the first one is more restrictive. So for each position, the maximum allowed height is the minimum of all x_i from restrictions that cover that position, and also h.\n\nWait, no. Because a restriction on [l_i, r_i] says that the maximum in that interval is at most x_i. That implies that every house in that interval can be at most x_i. Because if any of them were higher than x_i, then the maximum would be higher than x_i, violating the restriction. Therefore, for each position j, the maximum possible height it can have is the minimum of h and all x_i such that j is in [l_i, r_i].\n\nWait, that's a key insight. Because for any restriction that covers j, the maximum height of j can't exceed x_i. Because if j is in [l_i, r_i], then the maximum in that interval must be <= x_i, so the height of j must be <= x_i. Therefore, for each position j, the maximum possible height is the minimum of h and all x_i from restrictions that include j in their interval.\n\nBut then, if that's the case, then the optimal strategy is to set each house's height to the minimum of h and all x_i that cover that position. Then, the total profit is the sum of squares of those values.\n\nWait, but is that correct? Let's take the first example:\n\nInput:\n3 3 3\n1 1 1\n2 2 3\n3 3 2\n\nEach position:\n\nPosition 1 is covered by the first restriction (x=1). So maximum is 1.\n\nPosition 2 is covered by second restriction (x=3), so max is 3.\n\nPosition 3 is covered by third restriction (x=2). So max is 2.\n\nSo the heights are [1,3,2], which gives 1+9+4=14. Which matches the sample.\n\nAnother example: the second sample input.\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2-3: max 8\n\n3-4: max 7.\n\nSo for each position:\n\nposition 1: no restrictions. So max is h=10.\n\nposition 2: covered by first restriction. So max 8.\n\nposition 3: covered by both restrictions. So min(8,7) =7.\n\nposition",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a maximum height for the tallest house in a specified range.\n\n### Approach\n1. **Understanding Constraints**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within that range can be at most the specified height.\n2. **Determine Maximum Heights**: For each house position, determine the maximum allowable height by considering all restrictions that apply to that position. The maximum allowable height for a position is the minimum value among all restrictions that include that position and the global maximum height `h`.\n3. **Calculate Profit**: Once the maximum allowable height for each position is determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while idx < len(input) and input[idx] == '':\n        idx += 1\n    if idx >= len(input):\n        print(0)\n        return\n    data = input[idx].split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    idx += 1\n    \n    # Initialize max_heights array with h\n    max_heights = [h] * n\n    \n    for _ in range(m):\n        while idx < len(input) and input[idx] == '':\n            idx += 1\n        if idx >= len(input):\n            break\n        l, r, x = map(int, input[idx].split())\n        idx += 1\n        # Adjust to 0-based index\n        for i in range(l-1, r):\n            if max_heights[i] > x:\n                max_heights[i] = x\n    \n    total = sum([h * h for h in max_heights])\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed to extract the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the global maximum height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum of its current value and the restriction's maximum height.\n4. **Calculating Profit**: The total profit is calculated by summing the squares of the maximum allowable heights for each house position.\n\nThis approach ensures that all constraints are respected while maximizing the profit efficiently given the small input size constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while idx < len(input) and input[idx] == '':\n        idx += 1\n    if idx >= len(input):\n        print(0)\n        return\n    data = input[idx].split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    idx += 1\n    \n    # Initialize max_heights array with h\n    max_heights = [h] * n\n    \n    for _ in range(m):\n        while idx < len(input) and input[idx] == '':\n            idx += 1\n        if idx >= len(input):\n            break\n        l, r, x = map(int, input[idx].split())\n        idx += 1\n        # Adjust to 0-based index\n        for i in range(l-1, r):\n            if max_heights[i] > x:\n                max_heights[i] = x\n    \n    total = sum([h * h for h in max_heights])\n    print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 584,
        "thoughts_token_count": 1024
    }
}