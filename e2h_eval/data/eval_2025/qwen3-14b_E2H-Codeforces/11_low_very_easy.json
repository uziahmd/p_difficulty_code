{
    "start": 1758008334.1061633,
    "end": 1758008527.5215855,
    "start-formatted": "2025-09-16 16:38 KST",
    "end-formatted": "2025-09-16 16:42 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about a group of friends making toasts. Each toast requires certain amounts of drink, lime slices, and salt. The goal is to find out how many toasts each friend can make, given that all friends must make the same number of toasts. So, the answer is the maximum possible number of toasts per friend such that all the resources are sufficient.\n\nLet me break down the inputs and what each part contributes.\n\nThe inputs are n (number of friends), k (number of bottles), l (milliliters per bottle), c (number of limes), d (slices per lime), p (grams of salt), nl (milliliters per toast per friend), np (grams of salt per toast per friend).\n\nSo, first, calculate how much total drink they have. That's k * l milliliters. Each toast requires each friend to have nl ml. So for one toast, total drink needed is n * nl. Then, the total number of toasts possible based on drink is (k*l) // (n * nl). Wait, but wait: if each toast requires each friend to have nl ml, then per toast, total is n * nl. So total toasts possible from drink is total_drink // (n * nl). But wait, maybe I should think of it as per toast per friend. For example, if there are t toasts, each friend makes t toasts, so total drink needed is t * n * nl. So the total drink available is k*l. So t must satisfy t * n * nl ≤ k*l → t ≤ (k*l) / (n * nl). Since t has to be integer, floor division.\n\nSimilarly for the lime slices. Each toast requires one slice per friend. So per toast, total slices needed is n. The total slices available is c*d. So the maximum toasts possible from limes is (c*d) // n.\n\nFor the salt: each toast requires np grams per friend. So per toast, total is n * np. So the maximum toasts possible from salt is p // (n * np).\n\nThen, the answer is the minimum of those three values. Because all three constraints must be satisfied. So the maximum possible t is the minimum of the three computed values.\n\nWait, let me check the first example.\n\nSample input 1: 3 4 5 10 8 100 3 1\n\nSo n=3 friends.\n\nTotal drink: 4*5 = 20 ml. Each toast requires 3 * 3 = 9 ml? Wait, no. Wait, per toast, each friend needs nl milliliters. So per toast, total is n * nl. For the first sample, nl is 3. So per toast, 3 * 3 = 9 ml. So total toasts from drink is 20 // 9 = 2.222… → 2. Which matches the note's explanation.\n\nThen limes: c=10 limes, each cut into d=8 slices. Total slices 80. Each toast requires n=3 slices. So 80//3 is 26.666 → 26. But the note says that the limes are enough for 80 toasts. Wait, why?\n\nWait, the note says that the limes are enough for 80 toasts. Wait, maybe I made a mistake here. Let me re-examine the problem statement.\n\nThe problem says: each friend needs a slice of lime per toast. So for one toast, each of the n friends needs a slice. So per toast, n slices are needed. So total number of toasts possible from the slices is (c*d) // n. For the first sample, 10 * 8 = 80 slices. Divided by 3 per toast: 80 / 3 is 26.666, so 26. But the note says that the limes are enough for 80 toasts. Wait, that's conflicting. What's wrong here?\n\nWait the note says: \"the limes are enough for 10 * 8 = 80 toasts\". Oh wait, perhaps I misunderstood the problem. Let me recheck the problem statement.\n\nProblem says: each friend needs a slice of lime and np grams of salt. So for each toast, each friend needs one slice. So for one toast, n slices are needed. So for the first sample, with 80 slices, the maximum number of toasts is 80 / 3 = 26.666, which would be 26. But according to the note, the limes are enough for 80 toasts. That suggests that perhaps I have a",
    "response": "\n\nTo solve this problem, we need to determine the maximum number of toasts each friend can make given the constraints on the available resources: soft drink, lime slices, and salt. Each toast requires a specific amount of drink, a slice of lime per friend, and a certain amount of salt per friend.\n\n### Approach\n1. **Calculate Total Drink Available**: Multiply the number of bottles by the milliliters per bottle.\n2. **Determine Maximum Toasts from Drink**: Calculate how many toasts can be made based on the total drink available, considering each toast requires a specific amount of drink per friend.\n3. **Calculate Total Lime Slices Available**: Multiply the number of limes by the number of slices per lime.\n4. **Determine Maximum Toasts from Limes**: Calculate how many toasts can be made based on the total lime slices available, considering each toast requires one slice per friend.\n5. **Determine Maximum Toasts from Salt**: Calculate how many toasts can be made based on the total salt available, considering each toast requires a specific amount of salt per friend.\n6. **Find Minimum Value**: The answer is the minimum value among the maximum toasts possible from each resource, as all resources must be sufficient for the same number of toasts.\n\n### Solution Code\n```python\nn, k, l, c, d, p, nl, np = map(int, input().split())\n\ntotal_drink = k * l\ntoast_drink = total_drink // (n * nl)\n\ntotal_lime_slices = c * d\ntoast_lime = total_lime_slices // n\n\ntoast_salt = p // (n * np)\n\nprint(min(toast_drink, toast_lime, toast_salt))\n```\n\n### Explanation\n- **Total Drink Calculation**: The total amount of drink is calculated by multiplying the number of bottles by the milliliters per bottle. The number of toasts possible from this drink is determined by dividing the total drink by the amount needed per toast for all friends.\n- **Lime Slices Calculation**: The total number of lime slices is found by multiplying the number of limes by the slices per lime. The number of toasts possible from these slices is determined by dividing the total slices by the number of slices needed per toast for all friends.\n- **Salt Calculation**: The number of toasts possible from the salt is determined by dividing the total salt by the amount needed per toast for all friends.\n- **Result Calculation**: The final result is the minimum value of the toasts possible from each resource, ensuring that all resources are sufficient for the same number of toasts.",
    "ground_truth": "N/A",
    "extracted_answer": "n, k, l, c, d, p, nl, np = map(int, input().split())\n\ntotal_drink = k * l\ntoast_drink = total_drink // (n * nl)\n\ntotal_lime_slices = c * d\ntoast_lime = total_lime_slices // n\n\ntoast_salt = p // (n * np)\n\nprint(min(toast_drink, toast_lime, toast_salt))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 538,
        "completion_token_count": 538,
        "thoughts_token_count": 1023
    }
}