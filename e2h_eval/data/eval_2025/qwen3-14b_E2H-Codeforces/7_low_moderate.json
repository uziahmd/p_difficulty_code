{
    "start": 1758313746.9577887,
    "end": 1758313953.9905963,
    "start-formatted": "2025-09-20 05:29 KST",
    "end-formatted": "2025-09-20 05:32 KST",
    "gpu": 2,
    "pid": 7,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) ‚Äî the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) ‚Äî the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case ‚Äî \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The task is to determine for a given number n whether there exists a snowflake graph as described. Let me think about the structure of such a snowflake.\n\nThe snowflake is built in a certain way. Let's break down the construction rules:\n\nInitially, there's one vertex. Then, we add k new vertices connected to it. So after the first step, there are 1 + k vertices. Then, each vertex that has only one connection (so those added in the previous step) must be connected to k new vertices. And this process is repeated at least once. Wait, the step of adding k new vertices to each leaf node must be done at least once. So the minimal case would be when we do this once.\n\nLet me think about the structure. The snowflake is a tree, right? Because each new node is connected to exactly one parent. So the graph is a tree.\n\nLet me model the number of nodes. Let's consider how the number of nodes grows with each level.\n\nLet's think of the snowflake as having layers. The initial node is layer 0. Then, layer 1 consists of k nodes connected to layer 0. Then, each node in layer 1 is connected to k new nodes (layer 2). Then, each node in layer 2 is connected to k new nodes (layer 3), and so on. However, the process of adding new layers must be done at least once. Wait, the problem says that after the initial step (adding k nodes to the root), each leaf (which are those in layer 1) must be connected to k new nodes. So the process of expanding the leaves must be done at least once. So the minimal snowflake is when we have two layers: layer 0 (root), layer 1 (k nodes), then each of those layer 1 nodes gets k children (layer 2). So total nodes would be 1 + k + k * k = 1 + k + k¬≤. But wait, the example input says that for n=6, the answer is NO. Let's check that. For example, if k=2, then the minimal snowflake would be 1 + 2 + 4 = 7. So n=6 can't be achieved. But in the sample input, n=6 outputs NO. However, the sample input for n=13 outputs YES. Let me check that. Suppose k=3. Then 1 + 3 + 3^2 = 1+3+9=13. So yes, that's possible. Hence, the answer for 13 is YES. That matches the sample.\n\nSo the snowflake can be constructed in different ways. For example, maybe there are multiple layers. Let's think about the general case. Suppose that the snowflake has m layers. Let me think: the root is layer 0. Then each layer i (for i ‚â• 1) has k * (k^{i-1}) ) nodes. Wait, no. Let me think again. For layer 0: 1 node. Layer 1: k nodes. Layer 2: each node in layer 1 has k children. So layer 2 has k * k = k¬≤ nodes. Layer 3: each node in layer 2 has k children, so k¬≥ nodes. And so on. So the total number of nodes after m layers is 1 + k + k¬≤ + ... + k^m. But the construction requires that the expansion steps are done at least once. Which means that the snowflake must have at least two layers. Wait, the initial step is adding k nodes to the root. Then, the next step is adding k nodes to each of the existing leaves (which were added in the first step). So the minimal case is two steps: the initial step (layer 1) and then the expansion step (layer 2). So the total number of nodes is 1 + k + k¬≤. But what if we do more steps? For example, after layer 2, we could add another layer. So the total would be 1 + k + k¬≤ + k¬≥. But in that case, the expansion steps are done twice. So the problem allows any number of expansion steps, as long as the expansion steps are done at least once.\n\nBut the question is, for a given n, can we find some k>1 and some m ‚â• 2 (since m is the number of layers?), such that n equals the sum of the geometric series 1 + k + k¬≤ + ... + k^m?\n\nWait, no. Wait, the initial step is adding k nodes (so the sum is 1 + k). Then, the expansion steps are adding layers. Each expansion step adds a new layer. The first expansion step adds layer 2 (k¬≤ nodes). Then, if we do another expansion",
    "response": "To solve the problem of determining whether a snowflake graph with `n` vertices can exist, we need to understand the structure of such a graph and how it grows in terms of the number of vertices.\n\n---\n\n### üßä Understanding the Snowflake Structure\n\nA snowflake is constructed as follows:\n\n1. Start with one vertex (root).\n2. Connect `k` new vertices to it (layer 1).\n3. Each vertex that has only one connection (i.e., the leaves) gets connected to `k` more new vertices.\n4. This process is repeated **at least once**, meaning the tree must have **at least two layers** (root + one level of children).\n\nThis results in a tree where each node at level `i` has exactly `k` children, and the total number of nodes is:\n\n$$\nn = 1 + k + k^2 + \\cdots + k^m\n$$\n\nWhere `m` is the number of expansion steps (layers), and `m ‚â• 1`.\n\nSo for any given `n`, we need to check if there exists an integer `k > 1` and an integer `m ‚â• 1` such that:\n\n$$\nn = 1 + k + k^2 + \\cdots + k^m\n$$\n\nThis is a geometric series. The sum of a geometric series from `k^0` to `k^m` is:\n\n$$\nS = \\frac{k^{m+1} - 1}{k - 1}\n$$\n\nSo the condition becomes:\n\n$$\nn = \\frac{k^{m+1} - 1}{k - 1}\n$$\n\n---\n\n### üîç Strategy to Solve the Problem\n\nWe will iterate over possible values of `k` (from 2 up to a small upper bound), and for each `k`, check if there exists an integer `m ‚â• 1` such that the above equation holds.\n\nThe key observations are:\n\n- For a fixed `k`, the sequence of values of the form $ \\frac{k^{m+1} - 1}{k - 1} $ increases exponentially.\n- So for large `n` (up to $10^{18}$), we need to limit the number of iterations for `k` to a reasonable range (e.g., up to 60).\n\n---\n\n### ‚úÖ Implementation Steps\n\n1. For each test case:\n   - Iterate `k` from 2 up to a maximum of 60 (since $2^{60}$ exceeds $10^{18}$).\n   - For each `k`, compute the smallest value of the geometric series and continue increasing the exponent `m` while the sum is less than or equal to `n`.\n   - If the sum equals `n`, return \"YES\".\n   - If no such combination is found after checking all valid `k` values, return \"NO\".\n\n---\n\n### üßÆ Example: n = 13\n\nFor `k = 3`, the sum is:\n\n$$\n1 + 3 + 3^2 = 13\n$$\n\nSo the answer is \"YES\".\n\n---\n\n### üíª Python Code\n\n```python\nimport sys\n\ndef is_snowflake_possible(n):\n    if n < 1:\n        return False\n    # Try all possible k from 2 to around 60\n    for k in range(2, 61):\n        total = 1  # Start with the root node\n        m = 0\n        while True:\n            next_term = k ** (m + 1)\n            if total + next_term > n:\n                break\n            total += next_term\n            m += 1\n            if total == n:\n                return True\n    return False\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(data[i])\n        if is_snowflake_possible(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n### üìå Notes\n\n- The function `is_snowflake_possible` tries all valid values of `k` from 2 up to 60 (as higher values would not be feasible due to exponential growth).\n- For each `k`, it builds the geometric sum step-by-step until it either matches or exceeds `n`.\n- This approach is efficient enough for the given constraints.\n\nThis solution handles large values up to $10^{18}$ efficiently using logarithmic iteration and avoids unnecessary computations.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake_possible(n):\n    if n < 1:\n        return False\n    # Try all possible k from 2 to around 60\n    for k in range(2, 61):\n        total = 1  # Start with the root node\n        m = 0\n        while True:\n            next_term = k ** (m + 1)\n            if total + next_term > n:\n                break\n            total += next_term\n            m += 1\n            if total == n:\n                return True\n    return False\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(data[i])\n        if is_snowflake_possible(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 563,
        "completion_token_count": 983,
        "thoughts_token_count": 1024
    }
}