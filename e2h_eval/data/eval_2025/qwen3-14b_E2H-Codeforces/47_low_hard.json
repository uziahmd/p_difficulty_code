{
    "start": 1758309334.9993083,
    "end": 1758309570.611063,
    "start-formatted": "2025-09-20 04:15 KST",
    "end-formatted": "2025-09-20 04:19 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's see. The problem is to find the smallest non-negative integer k such that the LCM of (a +k) and (b +k) is minimized. And if there are multiple k's with the same minimal LCM, pick the smallest one.\n\nHmm. Let me think about how to approach this. \n\nFirst, let's understand what's happening here. Let's denote x = a +k and y = b +k. Then, since k is the same for both, y - x = (b +k) - (a +k) = b -a. So the difference between the two numbers is fixed. Let's call this difference d. So d = b -a. Wait, but if a and b are given, then d is fixed. But depending on which is bigger, maybe. Let me think: if a is bigger than b, then d would be negative. But since the difference is fixed, perhaps we can assume without loss of generality that a ≤ b? Because if a is larger than b, then swapping them would give the same problem. Wait, but in that case, the difference would be negative, but the absolute difference is the same. \n\nWait, but for the problem, the difference between the two numbers is fixed. Because when you add k to both, their difference remains the same. So, for example, if a=6 and b=10, then their difference is 4. So x and y will differ by 4. So for any k, the two numbers are x and x + d, where d is (b -a). Wait, no. Let me think again. If a is 6 and b is 10, then d = 4. So, when we add k to both, we get (6 +k) and (10 +k), so their difference is 4. So the two numbers are x and x + d, where x is a +k. So, the problem reduces to finding x such that x and x +d have the minimal LCM. Then, once we find x, k is x -a, but since x has to be >= a (since k is non-negative), but wait, no. Because k can be zero. So x is a +k, which is >=a, but if a is smaller than b, then x is the smaller number. Wait, but if a is larger than b, then adding k to both would make x larger than y. But the LCM is symmetric, so it doesn't matter. So perhaps we can first compute d as the absolute difference between a and b. Because the problem is symmetric in a and b. So, without loss of generality, let's assume that a ≤ b. Then, d = b -a. So, the two numbers are x and x +d, where x = a +k. And our goal is to find x such that LCM(x, x +d) is minimized, and then find the corresponding k (which is x -a). Also, since k must be non-negative, x must be ≥ a. \n\nSo the problem becomes: given d (the difference between a and b, assuming a ≤ b), find x ≥ a such that LCM(x, x +d) is as small as possible. Then, find the smallest x (so that k is minimal) if there are multiple x's with the same minimal LCM.\n\nBut how do we find this x?\n\nLet me think about the LCM of x and x +d. Since LCM(x, x +d) = x*(x +d)/GCD(x, x +d). And GCD(x, x +d) is the same as GCD(x, d). Because GCD(x, x +d) = GCD(x, d). So, the LCM is x*(x +d)/g, where g is GCD(x, d). \n\nSo, to minimize the LCM, we need to maximize the GCD(x, d) and also minimize x*(x +d). But how?\n\nAlternatively, since x and x +d differ by d, their GCD is GCD(x, d). Let me denote g = GCD(x, d). Then, x can be written as g * m, where m is some integer. And since d = g * n, where n is an integer (since g divides d), then GCD(m, n) is 1. Because d = g * n, and x = g * m, and GCD(gm, gn) = g * GCD(m, n) = g, so GCD(m, n) must be 1. \n\nSo, substituting into the LCM formula:\n\nLCM(x, x +d) = (g*m)*(g*m + g*n) / g = (g*m * g*(m +n)) / g = g",
    "response": "To solve the problem of finding the smallest non-negative integer $ k $ such that the least common multiple (LCM) of $ a + k $ and $ b + k $ is minimized, we can break the solution into logical steps based on number theory properties.\n\n---\n\n### Key Observations\n\n1. **Fixed Difference**:  \n   Since both $ a + k $ and $ b + k $ are incremented by the same $ k $, the difference between them remains constant:  \n   $$\n   (b + k) - (a + k) = b - a\n   $$\n\n2. **Symmetry in LCM**:  \n   The LCM of two numbers is symmetric, i.e., $ \\text{LCM}(x, y) = \\text{LCM}(y, x) $. This allows us to assume without loss of generality that $ a \\leq b $, and let $ d = b - a $.\n\n3. **Rewriting the Problem**:  \n   Let $ x = a + k $, then $ b + k = x + d $. We now need to minimize:\n   $$\n   \\text{LCM}(x, x + d)\n   $$\n   Which is equivalent to minimizing:\n   $$\n   \\frac{x(x + d)}{\\gcd(x, x + d)} = \\frac{x(x + d)}{\\gcd(x, d)}\n   $$\n   So our goal is to find the smallest $ x \\geq a $ that minimizes this expression.\n\n---\n\n### Strategy for Finding Optimal $ x $\n\nWe note that:\n\n- $ \\gcd(x, x + d) = \\gcd(x, d) $\n- Therefore, the expression becomes:\n  $$\n  \\frac{x(x + d)}{\\gcd(x, d)}\n  $$\n- To minimize this, we want to maximize $ \\gcd(x, d) $, and choose $ x $ such that the overall expression is as small as possible.\n\nThis leads us to consider all divisors $ g $ of $ d $, and for each, try to find the smallest $ x $ such that $ \\gcd(x, d) = g $, and $ x \\geq a $.\n\nThe minimal $ x $ for each $ g $ would be:\n$$\nx = \\max(a, g \\cdot m), \\quad \\text{where } m \\text{ is the smallest positive integer such that } g \\cdot m \\geq a\n$$\n\nThen, for each such $ x $, we compute the LCM and track the minimum.\n\n---\n\n### Implementation Steps\n\n1. Compute $ d = |a - b| $.\n2. Generate all divisors of $ d $.\n3. For each divisor $ g $ of $ d $, compute the smallest $ x $ such that:\n   - $ x \\geq a $\n   - $ \\gcd(x, d) = g $\n4. For each valid $ x $, compute the LCM of $ x $ and $ x + d $.\n5. Track the smallest LCM, and if there's a tie, the smallest $ k $.\n\n---\n\n### Code Implementation\n\n```python\nimport sys\nimport math\nfrom math import gcd\n\ndef get_divisors(n):\n    divisors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    if a > b:\n        a, b = b, a\n    d = b - a\n    min_lcm = float('inf')\n    best_k = float('inf')\n\n    # Try all possible divisors of d\n    for g in get_divisors(d):\n        # Find the minimal x such that x >= a and gcd(x, d) = g\n        m = (a + g - 1) // g  # ceiling division\n        x = g * m\n        if x < a:\n            x = g * (m + 1)\n        lcm_value = (x * (x + d)) // gcd(x, d)\n        k = x - a\n        if lcm_value < min_lcm or (lcm_value == min_lcm and k < best_k):\n            min_lcm = lcm_value\n            best_k = k\n\n    print(best_k)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n### Example Walkthrough\n\nFor input `6 10`:\n- $ a = 6 $, $ b = 10 $, so $ d = 4 $\n- Divisors of $ d = 4 $: {1, 2, 4}\n- Try each $ g $, compute $ x $, and corresponding LCM\n- The optimal is when $ g = 2 $, and $ x = 8 $, giving LCM = 24 → $ k = 2 $\n\nThis matches the sample output.\n\n---\n\n### Time Complexity\n\n- The number of divisors of $ d $ is at most around $ O(\\sqrt{d}) $, which is acceptable for $ d \\leq 10^9 $.\n- Each iteration is constant time.\n\nThis approach ensures correctness and efficiency for large inputs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom math import gcd\n\ndef get_divisors(n):\n    divisors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    if a > b:\n        a, b = b, a\n    d = b - a\n    min_lcm = float('inf')\n    best_k = float('inf')\n\n    # Try all possible divisors of d\n    for g in get_divisors(d):\n        # Find the minimal x such that x >= a and gcd(x, d) = g\n        m = (a + g - 1) // g  # ceiling division\n        x = g * m\n        if x < a:\n            x = g * (m + 1)\n        lcm_value = (x * (x + d)) // gcd(x, d)\n        k = x - a\n        if lcm_value < min_lcm or (lcm_value == min_lcm and k < best_k):\n            min_lcm = lcm_value\n            best_k = k\n\n    print(best_k)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 402,
        "completion_token_count": 1121,
        "thoughts_token_count": 1024
    }
}