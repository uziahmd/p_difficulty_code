{
    "start": 1758309276.1734004,
    "end": 1758309319.8016589,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:15 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range l_i to r_i, the tallest house must be at most x_i. I need to maximize the total profit under these constraints.\n\nHmm. The constraints are that for each restriction, the maximum in [l_i, r_i] is <= x_i. And I need to choose the heights of each house such that all these constraints are satisfied, and the sum of squares is maximized.\n\nThe input is n, h, m, then m lines of restrictions. The output is the maximum profit.\n\nConstraints are small: n, h, m up to 50. So maybe a brute-force approach is possible? But even with n=50, trying all possibilities is impossible since each house can have up to h+1 options. For 50 houses, that's (h+1)^50 possibilities, which is way too big. So brute force is not feasible.\n\nAlternative approach: think of it as an optimization problem with constraints. How can we model this?\n\nAnother idea: Since each restriction imposes that the maximum in a certain interval is at most x_i. So for each interval [l_i, r_i], the maximum of the heights in that interval must be <= x_i. So how can we model these constraints?\n\nBut how do we find the optimal heights? Since the profit is the sum of squares, which is maximized when each individual house is as high as possible, but constrained by the restrictions.\n\nSo perhaps the problem can be modeled as a constraint satisfaction problem where for each house, we want to assign a height as high as possible, but respecting all the constraints.\n\nBut how to find those constraints?\n\nLet me think about the constraints. For each restriction, the maximum in [l_i, r_i] must be <= x_i. So for any interval [l_i, r_i], the maximum of the heights in that interval is <= x_i.\n\nNow, for each house, the maximum allowed height is determined by all the restrictions that cover it. For example, if a house is in multiple intervals, each of which has a restriction, then the maximum height for that house is the minimum of all the x_i's from the restrictions that apply to it. But that's not necessarily correct because a restriction applies to a range. For example, a restriction on [1,3] with x=2 would imply that each house in that range can't be higher than 2, but maybe there's another restriction on [2,2] with x=3. Then the first restriction would require that house 2 is at most 2, so the second restriction is redundant for that house.\n\nWait, but the first restriction says the maximum in [1,3] is <= 2. Therefore, each of the houses in that range must be <= 2. Because if any of them was higher, then the max would be higher than 2. So for each restriction, every house in [l_i, r_i] can't be higher than x_i. Because if any house in that range is higher than x_i, then the maximum would be higher than x_i, violating the restriction.\n\nWait, no. Suppose a restriction says that the maximum in [l_i, r_i] must be at most x_i. That implies that each house in that range must be <= x_i. Because if any house in the range is higher than x_i, then the maximum would be higher than x_i, violating the restriction. Therefore, for each restriction, all houses in [l_i, r_i] can't exceed x_i. Therefore, for each house, the maximum possible height is the minimum between h and the minimum of all x_i's from restrictions that include that house in their interval.\n\nWait, but that's not entirely correct. Because suppose there's a restriction that applies to [1,3], x=2, and another restriction [2,4], x=3. Then, house 2 is in both ranges. The first restriction requires that house 2 is <=2, the second allows it to be up to 3. So the overall maximum for house 2 is 2. So for each house, the maximum possible height is the minimum of all x_i's from restrictions that include that house in their interval, and also h.\n\nBut if that's the case, then the problem reduces to: for each house, compute the maximum possible height it can have, which is the minimum between h and all the x_i's from restrictions that cover that house. Then, set each house to that maximum value, and the sum of squares would be the maximum possible.\n\nBut wait, is that correct?\n\nLet me take the",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a maximum height for the tallest house in a specific range.\n\n### Approach\n1. **Understanding Constraints**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within the range of a restriction can't be taller than the specified height for that restriction.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that include that house in their range. The maximum height for a house is the minimum value among all such restrictions and the global maximum height `h`.\n3. **Calculate Profit**: Once we have the maximum allowable height for each house, compute the total profit as the sum of the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    cases = []\n    i = 0\n    while i < len(input):\n        if not input[i]:\n            i += 1\n            continue\n        parts = input[i].split()\n        n, h, m = map(int, parts)\n        restrictions = []\n        for _ in range(m):\n            if i + 1 >= len(input):\n                break\n            line = input[i + 1]\n            if not line:\n                continue\n            l, r, x = map(int, line.split())\n            restrictions.append((l, r, x))\n            i += 1\n        cases.append((n, h, m, restrictions))\n        i += 1\n\n    results = []\n    for case in cases:\n        n, h, m, restrictions = case\n        max_heights = [h] * n  # Initialize with maximum possible height\n\n        for l, r, x in restrictions:\n            # Adjust the max_heights for positions l-1 to r-1 (0-based)\n            for pos in range(l - 1, r):\n                if max_heights[pos] > x:\n                    max_heights[pos] = x\n\n        total = sum(hh * hh for hh in max_heights)\n        results.append(str(total))\n\n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into multiple test cases. Each test case includes the number of spots, maximum height, and restrictions.\n2. **Processing Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum of its current value and the restriction's maximum height.\n3. **Calculating Profit**: After processing all restrictions, the total profit is calculated by summing the squares of the maximum allowable heights for each house.\n\nThis approach ensures that all constraints are respected while maximizing the profit by setting each house to the highest possible height allowed by the restrictions. The complexity is manageable given the small constraints (up to 50 spots and restrictions), making this approach both efficient and straightforward.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    cases = []\n    i = 0\n    while i < len(input):\n        if not input[i]:\n            i += 1\n            continue\n        parts = input[i].split()\n        n, h, m = map(int, parts)\n        restrictions = []\n        for _ in range(m):\n            if i + 1 >= len(input):\n                break\n            line = input[i + 1]\n            if not line:\n                continue\n            l, r, x = map(int, line.split())\n            restrictions.append((l, r, x))\n            i += 1\n        cases.append((n, h, m, restrictions))\n        i += 1\n\n    results = []\n    for case in cases:\n        n, h, m, restrictions = case\n        max_heights = [h] * n  # Initialize with maximum possible height\n\n        for l, r, x in restrictions:\n            # Adjust the max_heights for positions l-1 to r-1 (0-based)\n            for pos in range(l - 1, r):\n                if max_heights[pos] > x:\n                    max_heights[pos] = x\n\n        total = sum(hh * hh for hh in max_heights)\n        results.append(str(total))\n\n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 828,
        "completion_token_count": 650,
        "thoughts_token_count": 1024
    }
}