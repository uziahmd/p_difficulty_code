{
    "start": 1758309368.894018,
    "end": 1758309647.469837,
    "start-formatted": "2025-09-20 04:16 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to find the smallest non-negative integer k such that the LCM of (a +k) and (b +k) is as small as possible. And if there are multiple k's with the same minimal LCM, pick the smallest one.\n\nHmm. Let's think about the problem. Let me first understand what's happening here. The LCM of two numbers is minimized when the numbers are as small as possible and have a high GCD. Because LCM(a,b) = (a*b)/GCD(a,b). So if two numbers are close to each other, their GCD might be larger, which reduces the LCM.\n\nWait, but since both numbers are a +k and b +k, their difference is (b -a) if a < b. So for example, if a and b are different, then adding k makes them differ by the same amount. Let me think: Let's say a < b. Then, the two numbers are x and x + d, where d = b - a. So the LCM of x and x + d. How can this be minimized?\n\nThe LCM of x and x +d is (x*(x+d))/gcd(x, x+d). But since gcd(x, x +d) = gcd(x, d). So the LCM is (x*(x+d))/gcd(x, d). So for fixed d, how do we choose x to minimize this?\n\nBut in our case, d is fixed as (b -a) if a and b are given. Wait, but the original problem says that a and b are given, and k is added to both. So suppose a and b are given. Let me assume that a ≤ b. Then, let me define d = b - a. Then, the two numbers are (a +k) and (a +k) + d. So x = a +k, and x +d = b +k. So the problem becomes: find x ≥ a (since k ≥0) such that LCM(x, x +d) is minimized, and then find the minimal k which gives that x.\n\nSo the problem reduces to finding x ≥ a, such that LCM(x, x +d) is minimized. Then k = x -a.\n\nBut how do I find this x?\n\nLet me think about the LCM formula again. Since LCM(x, x +d) = x*(x +d)/gcd(x, x +d) = x*(x +d)/g, where g = gcd(x, d). Because x and x +d differ by d, so their gcd is same as gcd(x, d).\n\nSo, for fixed d, the LCM depends on x and the gcd(x, d). To minimize this, perhaps we want to maximize the gcd(x, d), since that would reduce the denominator.\n\nSo for example, if d is fixed, then choosing x such that x is a multiple of some divisor of d. Let me think. Suppose that d is fixed, and we want to find x such that x is as small as possible and has a large gcd with d.\n\nAlternatively, since x can be any number ≥ a, but perhaps the minimal LCM occurs when x is chosen such that x is a multiple of some divisor of d. Let me think of examples.\n\nTake the first sample input: a=6, b=10. So d = 4. So x = 6 +k, and x +4 = 10 +k. We need to find x ≥6 such that LCM(x, x+4) is minimized.\n\nIn the sample, the best k is 2, so x = 8. Then x +4 is 12. Their LCM is 24. Let's see why.\n\nFor x=6, LCM(6, 10) is 30. For x=7, LCM(7, 11) is 77. For x=8, LCM(8, 12) is 24. For x=9, LCM(9, 13) is 117. So indeed, x=8 is the best. Now, the gcd(x, d) is gcd(8,4)=4. Which is the maximum possible for d=4. Because for x=8, which is a multiple of 4. So the maximum possible gcd(x,4) is 4. Which gives us the largest denominator, thus minimizing the LCM.\n\nSo perhaps the optimal approach is to find x such that x is as small as possible and has the maximum possible gcd with d. But how?\n\nSo, the idea is that for d = |a -b|, we can compute all the divisors of d. Then for each divisor g of d, we can try to find the minimal x ≥ a such that x is congruent",
    "response": "To solve this problem, we need to find the smallest non-negative integer $ k $ such that the least common multiple (LCM) of $ a + k $ and $ b + k $ is minimized. The optimal solution involves leveraging the properties of divisors and greatest common divisors (GCD) to minimize the LCM efficiently.\n\n### Approach\n1. **Understanding the Problem**: The LCM of two numbers $ x $ and $ y $ can be expressed as $ \\text{LCM}(x, y) = \\frac{x \\cdot y}{\\text{GCD}(x, y)} $. For the given problem, the numbers $ a + k $ and $ b + k $ can be represented as $ x $ and $ x + d $ where $ d = |a - b| $.\n2. **Key Insight**: The LCM of $ x $ and $ x + d $ can be minimized by maximizing the GCD of $ x $ and $ d $. This is because the LCM formula includes the GCD in the denominator.\n3. **Divisors of $ d $**: By considering all divisors of $ d $, we can determine potential values of $ x $ that maximize the GCD with $ d $, thus minimizing the LCM.\n4. **Optimal $ k $**: For each divisor $ g $ of $ d $, we calculate the smallest $ x $ such that $ x \\geq \\min(a, b) $ and $ x \\equiv -k \\mod g $. This helps in finding the minimal $ k $ for each divisor and selecting the optimal one.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef compute_divisors(n):\n    divisors = set()\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    if a == b:\n        print(0)\n        return\n    d = abs(a - b)\n    divisors = compute_divisors(d)\n    min_k = float('inf')\n    min_lcm = float('inf')\n    # We need to find the minimal k such that (a + k) and (b + k) have maximum GCD\n    # Let's consider all divisors of d\n    for g in divisors:\n        # We want x = a + k, and x must be congruent to -k mod g\n        # Wait, since x = a + k, then x mod g should be such that x and d have GCD at least g\n        # So x should be a multiple of g, or more precisely, such that x mod g is something that allows GCD(x, d) to be g\n        # However, since d is a multiple of g (since g is a divisor of d), then x should be congruent to 0 mod g?\n        # Wait, if x is a multiple of g, then GCD(x, d) will be at least g. But since d is a multiple of g, the GCD could be larger.\n        # So the best way is to find the smallest x >= min(a, b) such that x mod g == 0\n        # Then, the corresponding k is x - a (if a is the smaller one)\n        # Let me think: suppose a < b. Then x = a + k, and x must be >= a. So the minimal x >= a which is divisible by g.\n        # So x = ((a // g) * g) if a % g == 0 else ((a // g) + 1) * g\n        # Then k = x - a\n        # Let's compute that\n        # Let's assume a < b, otherwise swap them\n        if a > b:\n            a, b = b, a\n        # Now a is the smaller one\n        # Compute x as the smallest number >= a that is divisible by g\n        remainder = a % g\n        if remainder == 0:\n            x = a\n        else:\n            x = a + (g - remainder)\n        k_candidate = x - a\n        # Now compute the LCM of x and x + d\n        # Since d = b - a\n        y = x + d\n        current_gcd = math.gcd(x, y)\n        current_lcm = x * y // current_gcd\n        # Check if this is better than previous\n        if current_lcm < min_lcm or (current_lcm == min_lcm and k_candidate < min_k):\n            min_lcm = current_lcm\n            min_k = k_candidate\n    print(min_k)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Divisors Calculation**: The function `compute_divisors` generates all divisors of the difference $ d $ between the two input numbers $ a $ and $ b $.\n2. **Finding Optimal $ k $**: For each divisor $ g $ of $ d $, we determine the smallest $ x $ (starting from the smaller of $ a $ or $ b $) that is a multiple of $ g $. This ensures that the GCD of $ x $ and $ d $ is maximized, thus minimizing the LCM.\n3. **LCM Calculation**: For each candidate $ x $, the corresponding $ y $ is calculated as $ x + d $, and the LCM is computed using the formula $ \\text{LCM}(x, y) = \\frac{x \\cdot y}{\\text{GCD}(x, y)} $.\n4. **Result Selection**: The smallest $ k $ that results in the minimum LCM is selected and printed. If multiple $ k $ values yield the same LCM, the smallest $ k $ is chosen.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef compute_divisors(n):\n    divisors = set()\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    if a == b:\n        print(0)\n        return\n    d = abs(a - b)\n    divisors = compute_divisors(d)\n    min_k = float('inf')\n    min_lcm = float('inf')\n    # We need to find the minimal k such that (a + k) and (b + k) have maximum GCD\n    # Let's consider all divisors of d\n    for g in divisors:\n        # We want x = a + k, and x must be congruent to -k mod g\n        # Wait, since x = a + k, then x mod g should be such that x and d have GCD at least g\n        # So x should be a multiple of g, or more precisely, such that x mod g is something that allows GCD(x, d) to be g\n        # However, since d is a multiple of g (since g is a divisor of d), then x should be congruent to 0 mod g?\n        # Wait, if x is a multiple of g, then GCD(x, d) will be at least g. But since d is a multiple of g, the GCD could be larger.\n        # So the best way is to find the smallest x >= min(a, b) such that x mod g == 0\n        # Then, the corresponding k is x - a (if a is the smaller one)\n        # Let me think: suppose a < b. Then x = a + k, and x must be >= a. So the minimal x >= a which is divisible by g.\n        # So x = ((a // g) * g) if a % g == 0 else ((a // g) + 1) * g\n        # Then k = x - a\n        # Let's compute that\n        # Let's assume a < b, otherwise swap them\n        if a > b:\n            a, b = b, a\n        # Now a is the smaller one\n        # Compute x as the smallest number >= a that is divisible by g\n        remainder = a % g\n        if remainder == 0:\n            x = a\n        else:\n            x = a + (g - remainder)\n        k_candidate = x - a\n        # Now compute the LCM of x and x + d\n        # Since d = b - a\n        y = x + d\n        current_gcd = math.gcd(x, y)\n        current_lcm = x * y // current_gcd\n        # Check if this is better than previous\n        if current_lcm < min_lcm or (current_lcm == min_lcm and k_candidate < min_k):\n            min_lcm = current_lcm\n            min_k = k_candidate\n    print(min_k)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 403,
        "completion_token_count": 1246,
        "thoughts_token_count": 1024
    }
}