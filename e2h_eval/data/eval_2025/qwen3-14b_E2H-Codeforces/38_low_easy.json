{
    "start": 1758309602.2580884,
    "end": 1758309812.7355592,
    "start-formatted": "2025-09-20 04:20 KST",
    "end-formatted": "2025-09-20 04:23 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem statement carefully.\n\nThe problem is about directed graphs and their reachability properties. The task is twofold: first, find the minimum number of nodes required to create a p-reachable graph, and then among all such graphs with that minimum number of nodes, find the maximum number of unidirectional pairs.\n\nLet me break down the definitions:\n\nA directed graph is p-reachable if it contains exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So, for each such pair, both directions must be reachable. Wait, no, the definition says \"reachable from each other\", meaning that there's a path from u to v and from v to u. So those pairs are mutual.\n\nThe first part is to find the minimal number of nodes needed so that the graph has exactly p such pairs. Then, among all such minimal node graphs, find the maximum number of unidirectional pairs. Unidirectional pairs are ordered pairs (u, v) where u != v, there's a path from u to v, but no path from v to u.\n\nSo the problem requires two answers for each input p: the minimal number of nodes and the maximum possible unidirectional pairs in that scenario.\n\nLet me think about the approach.\n\nFirst, let's understand what the p-reachable condition implies. For each pair (u, v) with u < v, we have to count whether they are mutually reachable. The total count of such pairs must be exactly p.\n\nBut how do we model this? Well, perhaps the minimal number of nodes is determined by considering how many such pairs can exist in a graph with n nodes. Then, find the smallest n such that the maximum possible number of mutual pairs is at least p, but also that there's a way to arrange the graph to have exactly p.\n\nWait, but maybe the minimal n is determined by the maximum number of mutual pairs possible in a graph with n nodes. Because for example, if we can arrange the graph such that all mutual pairs are in a certain structure, then we can compute for each n the maximum possible mutual pairs, and find the minimal n where that maximum is >= p. But how?\n\nAlternatively, think about the structure of the graph that maximizes the number of mutual pairs. For example, if the graph is a complete DAG (directed acyclic graph), but that's not helpful here. Wait, but mutual reachability implies that u and v are in the same strongly connected component (SCC). So, for any two nodes in the same SCC, they are mutually reachable. Therefore, the number of mutual pairs is the sum over all SCCs of (size choose 2) multiplied by 2? No, wait. For each SCC of size k, there are k*(k-1)/2 unordered pairs. Since the problem counts ordered pairs (u, v) where u < v, which is exactly the same as the number of unordered pairs (since each unordered pair is counted once). Wait, the problem says \"ordered pairs (u, v) such that u < v and they are reachable from each other.\" So for each unordered pair {u, v} where u and v are in the same SCC, and u < v, we count it once. So the total number of mutual pairs is the sum over all SCCs of (size choose 2).\n\nSo the problem reduces to: arrange the graph into some SCCs, and the sum of (k choose 2) over all SCC sizes k must equal p. And we need to find the minimal n (total number of nodes) such that this sum is exactly p. Then, among all such graphs with that n, find the maximum number of unidirectional pairs.\n\nBut how to model this?\n\nFor the first part, the minimal number of nodes. Let's think: the maximum possible sum of (k choose 2) for a given n is achieved when we have one SCC of size n. Because (n choose 2) is the maximum possible. For example, if you have a single SCC, then all pairs are mutual. If you split into smaller components, the sum would be less. So for a given n, the maximum possible p is (n choose 2). Therefore, to find the minimal n such that (n choose 2) >= p. Wait, but maybe there's a way to split into multiple SCCs to get exactly p. However, the minimal n is the smallest n where (n choose 2) >= p. Because if you can't get exactly p with a smaller n, then you need to take the next n.\n\nWait, but suppose that p is exactly (n choose 2) - x for some x. Then, perhaps you can split one of the components into two parts. For example, suppose n is such that (n choose 2) is larger than p. Then, perhaps we can split the",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs in such graphs.\n\n### Approach\n1. **Understanding Mutual Reachability**: A directed graph is p-reachable if it contains exactly p ordered pairs (u, v) such that u < v and both u and v are mutually reachable. This mutual reachability implies that u and v must be in the same strongly connected component (SCC).\n\n2. **Minimum Nodes Calculation**: The maximum number of mutual pairs for a graph with n nodes is given by the combination formula C(n, 2) = n*(n-1)/2. We need to find the smallest n such that C(n, 2) is at least p. This can be done using a binary search approach.\n\n3. **Maximizing Unidirectional Pairs**: Once the minimum number of nodes is determined, we need to maximize the number of unidirectional pairs. This is achieved by splitting the nodes into two SCCs as evenly as possible. The number of unidirectional pairs is calculated based on the sizes of these SCCs.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n\n    # Find minimal n where n*(n-1)//2 >= p\n    n = 1\n    while n * (n - 1) // 2 < p:\n        n += 1\n\n    # Now, find the maximum number of unidirectional pairs\n    # To maximize unidirectional pairs, split the nodes into two parts as balanced as possible\n    # The total number of ordered pairs (u, v) with u != v is n*(n-1)\n    # The number of mutual pairs is p\n    # The number of unidirectional pairs is total_pairs - 2*p\n    # Because each mutual pair contributes 2 (u->v and v->u), but in the problem's count, only one (u < v) is counted.\n    # Wait, no. Let me think again.\n\n    # The total number of ordered pairs (u, v) with u != v is n*(n-1)\n    # The number of mutual pairs is p (each unordered pair {u, v} with u < v is counted once)\n    # But each such mutual pair corresponds to two ordered pairs (u, v) and (v, u)\n    # However, in the problem's definition, p counts only the ordered pairs where u < v and they are mutually reachable.\n    # So the total number of mutual ordered pairs is p, and the number of unidirectional pairs is total_ordered_pairs - 2*p\n    # Because for each mutual pair, there are two ordered pairs (u, v) and (v, u), but only one is counted in p (u < v).\n    # Wait, no. Let me re-express:\n\n    # For all ordered pairs (u, v) where u != v, they are either:\n    # - mutual (both directions reachable): contributes 1 to p if u < v\n    # - unidirectional (only one direction reachable): contributes 1 to unidirectional count\n    # So total ordered pairs is n*(n-1) = mutual_ordered_pairs + unidirectional_pairs\n    # But mutual_ordered_pairs is 2 * p, because for each unordered pair {u, v}, there are two ordered pairs (u, v) and (v, u), but only one (u < v) is counted in p. Hence, the total mutual ordered pairs is 2p.\n\n    # Therefore, unidirectional_pairs = total_ordered_pairs - 2p\n    total_ordered = n * (n - 1)\n    max_uni = total_ordered - 2 * p\n    print(f\"{n} {max_uni}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Finding Minimum Nodes**: We use a loop to find the smallest number of nodes `n` such that the combination formula C(n, 2) is at least `p`. This ensures that we can form exactly `p` mutual pairs.\n\n2. **Calculating Unidirectional Pairs**: Once the minimum number of nodes is determined, we calculate the total number of ordered pairs (u, v) where u != v. From this, we subtract twice the value of `p` (since each mutual pair contributes two ordered pairs). The result gives the maximum number of unidirectional pairs possible in the graph.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n\n    # Find minimal n where n*(n-1)//2 >= p\n    n = 1\n    while n * (n - 1) // 2 < p:\n        n += 1\n\n    # Now, find the maximum number of unidirectional pairs\n    # To maximize unidirectional pairs, split the nodes into two parts as balanced as possible\n    # The total number of ordered pairs (u, v) with u != v is n*(n-1)\n    # The number of mutual pairs is p\n    # The number of unidirectional pairs is total_pairs - 2*p\n    # Because each mutual pair contributes 2 (u->v and v->u), but in the problem's count, only one (u < v) is counted.\n    # Wait, no. Let me think again.\n\n    # The total number of ordered pairs (u, v) with u != v is n*(n-1)\n    # The number of mutual pairs is p (each unordered pair {u, v} with u < v is counted once)\n    # But each such mutual pair corresponds to two ordered pairs (u, v) and (v, u)\n    # However, in the problem's definition, p counts only the ordered pairs where u < v and they are mutually reachable.\n    # So the total number of mutual ordered pairs is p, and the number of unidirectional pairs is total_ordered_pairs - 2*p\n    # Because for each mutual pair, there are two ordered pairs (u, v) and (v, u), but only one is counted in p (u < v).\n    # Wait, no. Let me re-express:\n\n    # For all ordered pairs (u, v) where u != v, they are either:\n    # - mutual (both directions reachable): contributes 1 to p if u < v\n    # - unidirectional (only one direction reachable): contributes 1 to unidirectional count\n    # So total ordered pairs is n*(n-1) = mutual_ordered_pairs + unidirectional_pairs\n    # But mutual_ordered_pairs is 2 * p, because for each unordered pair {u, v}, there are two ordered pairs (u, v) and (v, u), but only one (u < v) is counted in p. Hence, the total mutual ordered pairs is 2p.\n\n    # Therefore, unidirectional_pairs = total_ordered_pairs - 2p\n    total_ordered = n * (n - 1)\n    max_uni = total_ordered - 2 * p\n    print(f\"{n} {max_uni}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 480,
        "completion_token_count": 976,
        "thoughts_token_count": 1024
    }
}