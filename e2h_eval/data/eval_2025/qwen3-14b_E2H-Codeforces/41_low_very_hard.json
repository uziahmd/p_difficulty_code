{
    "start": 1758309277.7882779,
    "end": 1758309320.2972891,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:15 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nSo, the problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range l_i to r_i, the tallest house must be at most x_i. I need to maximize the total profit under these constraints.\n\nHmm. The challenge is to find the maximum sum of squares given these constraints. Since n, h, m are all up to 50, maybe a brute-force approach isn't feasible. Wait, but even if n is 50, trying all possibilities would be impossible. Because for each of the 50 houses, there are h+1 possibilities. So 50^h is way too big. That's not going to work.\n\nSo I need a smarter approach. Let's think about constraints. Each restriction requires that the maximum in a certain interval is at most x_i. How can I model this?\n\nAnother thought: since the maximum in a range is constrained, perhaps for each position, there's a maximum allowed height. But how do the restrictions affect each individual house?\n\nFor example, if a house is part of multiple ranges, then each of those ranges' restrictions might impose a maximum on that house. But the maximum of the entire range must be <= x_i. So, for each house, the maximum possible height it can have is the minimum of h and all the x_i's from the restrictions that include it in their range. Wait, no. Because a restriction on a range [l, r] says that the maximum in that range is at most x_i. So, for example, if there's a restriction on [1,3] with x=2, then each house in 1-3 can be at most 2. But if there's another restriction on [2,3] with x=3, then the first restriction is more restrictive for house 1, but for houses 2 and 3, the second restriction allows higher. However, the first restriction requires that the maximum in [1,3] is <= 2. So even if house 2 and 3 are allowed up to 3, but the maximum in [1,3] must be <=2. So that implies that house 2 and 3 can't be higher than 2 either. Because if they were, then the maximum would be higher than 2. So, in this case, the restriction on [1,3] would require that all houses in that range are <=2. Therefore, for any restriction on a range, the maximum height of any house in that range can't exceed x_i. Because if any house in the range was higher than x_i, then the maximum would be higher than x_i, violating the restriction.\n\nWait, that's not necessarily true. Suppose there's a restriction on [l, r] that the maximum is at most x. Then, the maximum of the houses in [l, r] must be <=x. Which implies that every house in that range must be <=x. Because if any house is higher than x, then the maximum would be higher than x. So, that's correct. Therefore, for each restriction (l_i, r_i, x_i), all houses in positions l_i to r_i must have height <= x_i. Because otherwise, the maximum in that range would be higher than x_i.\n\nWait, but that's not the case. Suppose you have a restriction that the maximum in [1,3] is <=2. Then, the maximum of the three houses must be <=2. Which means that all three houses are <=2. So yes, each house in that range is <=x_i. So, for each restriction, all houses in l_i to r_i can't be higher than x_i. Therefore, for each house, the maximum possible height is the minimum between h and all x_i's of the restrictions that cover that house.\n\nWait, but that's not entirely correct. Because if there are multiple restrictions that apply to a house. For example, suppose a house is in two ranges. One restriction says that the range [1,2] must have max <=3, and another says that [2,3] must have max <=4. Then, for house 2, the first restriction implies that it can be at most 3, and the second allows up to 4. So the overall maximum for house 2 is 3.\n\nSo, for each house, the maximum possible height is the minimum between h and all the x_i's of the restrictions that include that house in their range.\n\nWait, but this is only true if the restriction applies to that house. Because each restriction applies to a range, and for each such restriction, the house is in that range. So, for each",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street with given constraints on the maximum height of houses in specific ranges. The profit is calculated as the square of the height of each house. The challenge is to determine the optimal heights for each house while respecting all zoning restrictions.\n\n### Approach\n1. **Constraints Analysis**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within the specified range must be at most the given height.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that apply to it. The maximum height for a house is the minimum value between the global maximum height `h` and all restriction heights that cover that house.\n3. **Calculate Profit**: Once the allowable heights for each house are determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    cases = []\n    i = 0\n    while i < len(input):\n        if not input[i]:\n            i += 1\n            continue\n        parts = input[i].split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        restrictions = []\n        i += 1\n        for _ in range(m):\n            while i < len(input) and not input[i]:\n                i += 1\n            if i >= len(input):\n                break\n            l, r, x = map(int, input[i].split())\n            restrictions.append((l, r, x))\n            i += 1\n        cases.append((n, h, restrictions))\n    \n    for case in cases:\n        n, h, restrictions = case\n        max_heights = [h] * n\n        for l, r, x in restrictions:\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        total = sum([h * h for h in max_heights])\n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into multiple test cases. Each test case includes the number of spots `n`, the maximum height `h`, and a list of restrictions.\n2. **Processing Restrictions**: For each restriction, the maximum allowable height for each house in the specified range is updated to the minimum of its current value and the restriction's height.\n3. **Calculating Profit**: After processing all restrictions, the profit is calculated by summing the squares of the allowable heights for each house.\n\nThis approach ensures that all constraints are respected while maximizing the profit by leveraging the minimum allowable heights derived from the restrictions. The solution efficiently processes each restriction and computes the result in linear time relative to the number of houses and restrictions.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    cases = []\n    i = 0\n    while i < len(input):\n        if not input[i]:\n            i += 1\n            continue\n        parts = input[i].split()\n        n = int(parts[0])\n        h = int(parts[1])\n        m = int(parts[2])\n        restrictions = []\n        i += 1\n        for _ in range(m):\n            while i < len(input) and not input[i]:\n                i += 1\n            if i >= len(input):\n                break\n            l, r, x = map(int, input[i].split())\n            restrictions.append((l, r, x))\n            i += 1\n        cases.append((n, h, restrictions))\n    \n    for case in cases:\n        n, h, restrictions = case\n        max_heights = [h] * n\n        for l, r, x in restrictions:\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        total = sum([h * h for h in max_heights])\n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 615,
        "thoughts_token_count": 1024
    }
}