{
    "start": 1758338153.011121,
    "end": 1758338277.2001894,
    "start-formatted": "2025-09-20 12:15 KST",
    "end-formatted": "2025-09-20 12:17 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Precompute factorials and inverse factorials up to 2*1e5 + 1\n    max_n = 2 * 10**5 + 10\n    fact = [1] * (max_n)\n    for i in range(1, max_n):\n        fact[i] = fact[i-1] * i % MOD\n\n    inv_fact = [1] * (max_n)\n    inv_fact[max_n-1] = pow(fact[max_n-1], MOD-2, MOD)\n    for i in range(max_n-2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n\n    results = []\n    for line in data:\n        n, m, g = map(int, line.split())\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n\n        # The string must be reducible to a single character g via the modification rules\n        # Each modification reduces the length by 1, so total - 1 must be the number of operations\n        # Each operation reduces the length by 1, so the final string has length 1\n        # So we need to check if the number of operations is possible\n\n        # Let's think recursively: the last operation must reduce two characters to one\n        # So the number of operations must be (total - 1), and it must be possible to do that\n\n        # The key insight: the number of 0s and 1s must have the same parity as the number of operations\n        # Because each operation reduces the number of 0s and 1s by 1 (if you replace two 0s with 1, then net change is -1 0s, +1 1s)\n        # Or similar for other combinations. But the parity of the total number of operations is (total - 1)\n\n        # We can only end up with g if the number of operations (total - 1) is such that the final character is g\n        # This is equivalent to checking whether the number of 0s and 1s can be reduced to g through the allowed operations\n\n        # This is a known problem: the number of binary strings of length n + m with exactly n zeros and m ones\n        # that can be reduced to g using the given operation rules\n\n        # The answer is:\n        # If g == 0: count the number of strings where the number of 0s minus the number of 1s is congruent to 1 mod 2\n        # If g == 1: count the number of strings where the number of 1s minus the number of 0s is congruent to 1 mod 2\n\n        # So, the difference between number of 0s and 1s must be congruent to 1 mod 2 if g == 0\n        # Or -1 mod 2 if g == 1\n\n        # Since (n - m) mod 2 == 1 is equivalent to (m - n) mod 2 == -1 == 1 mod 2\n\n        # So, for g == 0: we want (n - m) % 2 == 1\n        # For g == 1: we want (m - n) % 2 == 1\n\n        # So, if (n - m) % 2 != g:\n        #   Then no such string exists\n\n        if (n - m) % 2 != g:\n            results.append(0)\n            continue\n\n        # Now, compute the number of such strings\n        # It is the number of ways to choose positions for 0s (or 1s) in the string of length n + m\n        res = comb(n + m, n, fact, inv_fact)\n        results.append(res)\n\n    for r in results:\n        print(r)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Precompute factorials and inverse factorials up to 2*1e5 + 1\n    max_n = 2 * 10**5 + 10\n    fact = [1] * (max_n)\n    for i in range(1, max_n):\n        fact[i] = fact[i-1] * i % MOD\n\n    inv_fact = [1] * (max_n)\n    inv_fact[max_n-1] = pow(fact[max_n-1], MOD-2, MOD)\n    for i in range(max_n-2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n\n    results = []\n    for line in data:\n        n, m, g = map(int, line.split())\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n\n        # The string must be reducible to a single character g via the modification rules\n        # Each modification reduces the length by 1, so total - 1 must be the number of operations\n        # Each operation reduces the length by 1, so the final string has length 1\n        # So we need to check if the number of operations is possible\n\n        # Let's think recursively: the last operation must reduce two characters to one\n        # So the number of operations must be (total - 1), and it must be possible to do that\n\n        # The key insight: the number of 0s and 1s must have the same parity as the number of operations\n        # Because each operation reduces the number of 0s and 1s by 1 (if you replace two 0s with 1, then net change is -1 0s, +1 1s)\n        # Or similar for other combinations. But the parity of the total number of operations is (total - 1)\n\n        # We can only end up with g if the number of operations (total - 1) is such that the final character is g\n        # This is equivalent to checking whether the number of 0s and 1s can be reduced to g through the allowed operations\n\n        # This is a known problem: the number of binary strings of length n + m with exactly n zeros and m ones\n        # that can be reduced to g using the given operation rules\n\n        # The answer is:\n        # If g == 0: count the number of strings where the number of 0s minus the number of 1s is congruent to 1 mod 2\n        # If g == 1: count the number of strings where the number of 1s minus the number of 0s is congruent to 1 mod 2\n\n        # So, the difference between number of 0s and 1s must be congruent to 1 mod 2 if g == 0\n        # Or -1 mod 2 if g == 1\n\n        # Since (n - m) mod 2 == 1 is equivalent to (m - n) mod 2 == -1 == 1 mod 2\n\n        # So, for g == 0: we want (n - m) % 2 == 1\n        # For g == 1: we want (m - n) % 2 == 1\n\n        # So, if (n - m) % 2 != g:\n        #   Then no such string exists\n\n        if (n - m) % 2 != g:\n            results.append(0)\n            continue\n\n        # Now, compute the number of such strings\n        # It is the number of ways to choose positions for 0s (or 1s) in the string of length n + m\n        res = comb(n + m, n, fact, inv_fact)\n        results.append(res)\n\n    for r in results:\n        print(r)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 932,
        "thoughts_token_count": 0
    }
}