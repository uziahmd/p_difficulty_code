{
    "start": 1758005013.29806,
    "end": 1758005036.709074,
    "start-formatted": "2025-09-16 15:43 KST",
    "end-formatted": "2025-09-16 15:43 KST",
    "gpu": 2,
    "pid": 20,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Multiset of Strings\n\nYou are given three integers $$$n$$$, $$$k$$$ and $$$f$$$.Consider all binary strings (i. e. all strings consisting of characters $$$0$$$ and/or $$$1$$$) of length from $$$1$$$ to $$$n$$$. For every such string $$$s$$$, you need to choose an integer $$$c_s$$$ from $$$0$$$ to $$$k$$$.A multiset of binary strings of length exactly $$$n$$$ is considered beautiful if for every binary string $$$s$$$ with length from $$$1$$$ to $$$n$$$, the number of strings in the multiset such that $$$s$$$ is their prefix is not exceeding $$$c_s$$$.For example, let $$$n = 2$$$, $$$c_{0} = 3$$$, $$$c_{00} = 1$$$, $$$c_{01} = 2$$$, $$$c_{1} = 1$$$, $$$c_{10} = 2$$$, and $$$c_{11} = 3$$$. The multiset of strings $$$\\{11, 01, 00, 01\\}$$$ is beautiful, since:  for the string $$$0$$$, there are $$$3$$$ strings in the multiset such that $$$0$$$ is their prefix, and $$$3 \\le c_0$$$;  for the string $$$00$$$, there is one string in the multiset such that $$$00$$$ is its prefix, and $$$1 \\le c_{00}$$$;  for the string $$$01$$$, there are $$$2$$$ strings in the multiset such that $$$01$$$ is their prefix, and $$$2 \\le c_{01}$$$;  for the string $$$1$$$, there is one string in the multiset such that $$$1$$$ is its prefix, and $$$1 \\le c_1$$$;  for the string $$$10$$$, there are $$$0$$$ strings in the multiset such that $$$10$$$ is their prefix, and $$$0 \\le c_{10}$$$;  for the string $$$11$$$, there is one string in the multiset such that $$$11$$$ is its prefix, and $$$1 \\le c_{11}$$$. Now, for the problem itself. You have to calculate the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$.\n\n## Input\nThe only line of input contains three integers $$$n$$$, $$$k$$$ and $$$f$$$ ($$$1 \\le n \\le 15$$$; $$$1 \\le k, f \\le 2 \\cdot 10^5$$$).\n\n## Output\nPrint one integer — the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$. Since it can be huge, print it modulo $$$998244353$$$.\n\n## Example\n### Input\n['1 42 2', '2 37 13', '4 1252 325', '6 153 23699', '15 200000 198756']\n\n### Output\n['3', '36871576', '861735572', '0', '612404746']\n\n## Note\nIn the first example, the three ways to choose the integers $$$c_s$$$ are:  $$$c_0 = 0$$$, $$$c_1 = 2$$$, then the maximum beautiful multiset is $$$\\{1, 1\\}$$$;  $$$c_0 = 1$$$, $$$c_1 = 1$$$, then the maximum beautiful multiset is $$$\\{0, 1\\}$$$;  $$$c_0 = 2$$$, $$$c_1 = 0$$$, then the maximum beautiful multiset is $$$\\{0, 0\\}$$$. \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\nfrom functools import lru_cache\n\nMOD = 998244353\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for line in data:\n        n, k, f = map(int, line.split())\n        \n        # Total number of binary strings of length from 1 to n\n        total_strings = (1 << n) - 1\n        \n        # If f > k * total_strings, it's impossible\n        if f > k * total_strings:\n            results.append(0)\n            continue\n        \n        # We need to count the number of ways to choose c_s such that the max beautiful multiset size is exactly f\n        \n        # We use inclusion-exclusion principle:\n        # Ways where max size <= f minus ways where max size <= f-1\n        \n        def count_ways(max_f):\n            if max_f < 0:\n                return 0\n            # Each string s can have c_s from 0 to min(k, max_f)\n            # But we must ensure that the max beautiful multiset size is <= max_f\n            # This is equivalent to choosing c_s such that for every string s, c_s <= max_f\n            # And the total number of such choices is (min(k, max_f) + 1)^total_strings\n            # However, we need to subtract those configurations where the maximum possible beautiful multiset size is less than max_f\n            # But for this problem, it's simpler to note that the number of ways to choose c_s such that the max possible beautiful multiset size is <= f is (min(k, f) + 1)^total_strings\n            # So the answer is (min(k, f) + 1)^total_strings - (min(k, f - 1) + 1)^total_strings\n            # But only if f <= k * total_strings\n            \n            if max_f > k * total_strings:\n                return 0\n            \n            val = pow(min(k, max_f) + 1, total_strings, MOD)\n            return val\n        \n        ans = (count_ways(f) - count_ways(f - 1)) % MOD\n        results.append(ans)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom functools import lru_cache\n\nMOD = 998244353\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    \n    for line in data:\n        n, k, f = map(int, line.split())\n        \n        # Total number of binary strings of length from 1 to n\n        total_strings = (1 << n) - 1\n        \n        # If f > k * total_strings, it's impossible\n        if f > k * total_strings:\n            results.append(0)\n            continue\n        \n        # We need to count the number of ways to choose c_s such that the max beautiful multiset size is exactly f\n        \n        # We use inclusion-exclusion principle:\n        # Ways where max size <= f minus ways where max size <= f-1\n        \n        def count_ways(max_f):\n            if max_f < 0:\n                return 0\n            # Each string s can have c_s from 0 to min(k, max_f)\n            # But we must ensure that the max beautiful multiset size is <= max_f\n            # This is equivalent to choosing c_s such that for every string s, c_s <= max_f\n            # And the total number of such choices is (min(k, max_f) + 1)^total_strings\n            # However, we need to subtract those configurations where the maximum possible beautiful multiset size is less than max_f\n            # But for this problem, it's simpler to note that the number of ways to choose c_s such that the max possible beautiful multiset size is <= f is (min(k, f) + 1)^total_strings\n            # So the answer is (min(k, f) + 1)^total_strings - (min(k, f - 1) + 1)^total_strings\n            # But only if f <= k * total_strings\n            \n            if max_f > k * total_strings:\n                return 0\n            \n            val = pow(min(k, max_f) + 1, total_strings, MOD)\n            return val\n        \n        ans = (count_ways(f) - count_ways(f - 1)) % MOD\n        results.append(ans)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 1015,
        "completion_token_count": 495,
        "thoughts_token_count": 0
    }
}