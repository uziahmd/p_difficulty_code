{
    "start": 1758338148.3519034,
    "end": 1758338310.9935997,
    "start-formatted": "2025-09-20 12:15 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Precompute factorials and inverse factorials up to 2*1e5 + 1\n    max_n = 2 * 10**5 + 10\n    fact = [1] * (max_n)\n    for i in range(1, max_n):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact = [1] * (max_n)\n    inv_fact[max_n-1] = pow(fact[max_n-1], MOD-2, MOD)\n    for i in range(max_n-2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n\n    results = []\n    for line in data:\n        n, m, g = map(int, line.split())\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n\n        # The string must be reducible to a single character g via the given operation\n        # The operation reduces the length by 1 each time, starting from length >= 2\n        # So the final length must be 1, meaning the original length must be 1 + k, where k is the number of operations\n        # Each operation reduces length by 1, so the initial length must be at least 2\n        # So the total length must be >= 2, but after reducing, it must be 1\n        # Therefore, total = n + m must be >= 2\n\n        if total < 2:\n            results.append(0)\n            continue\n\n        # The final character g must be obtainable from the string s\n        # Let's analyze the process:\n        # Each operation replaces last two characters with one character.\n        # If two 0s are replaced, result is 1\n        # If two 1s are replaced, result is 0\n        # If one 0 and one 1 are replaced, result is 0 if the last character is 0, or 1 if the last character is 1?\n\n        # Actually, the replacement rule is: replace two last characters with one:\n        # - If both are 0 → replace with 1\n        # - If both are 1 → replace with 0\n        # - If different → replace with 0 if the last character is 0, else 1?\n\n        # Wait, the problem says:\n        # \"we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero.\"\n\n        # So:\n        # - Two 0s → replace with 1\n        # - Any other pair (01, 10, 11) → replace with 0\n\n        # So the replacement rule is:\n        # Replace last two characters with 1 if they are both 0, else with 0.\n\n        # We want to end up with character g after all possible operations.\n\n        # Let’s simulate this process backwards:\n        # Start with the final character g.\n        # To get to it, the previous step must have been a pair that would reduce to g.\n\n        # Let’s think recursively:\n        # Let f(a, b, c) be the number of strings with a 0s and b 1s that can reduce to c (0 or 1)\n\n        # We need to find f(n, m, g)\n\n        # We can model this as a DP problem, but since n and m can be up to 1e5, we need an efficient way.\n\n        # Key observation:\n        # The parity of the number of 0s and 1s matters because every operation reduces the count of characters by 1.\n\n        # Let’s define:\n        # Let’s denote the number of 0s and 1s in the string as a and b respectively.\n        # The total length is L = a + b.\n\n        # Each operation reduces the length by 1, so to reach a length of 1, we need to perform L - 1 operations.\n\n        # The final character depends on the number of times we replaced two 0s with 1s.\n\n        # But there's a simpler way:\n        # The final character is determined by the parity of the number of 0s and 1s.\n\n        # Let’s try to derive the final character based on the number of 0s and 1s:\n\n        # Every operation reduces the total number of characters by 1.\n        # Every operation either:\n        # - Replaces two 0s with 1 → net change: -1 0, +1 1\n        # - Replaces any other pair with 0 → net change: -1 or -2 of some type, +1 of another\n\n        # But the key insight is that the final character depends on the parity of the number of 0s and 1s.\n\n        # If we start with a string of 0s and 1s and reduce it to one character, the final character is:\n        # - 0 if the number of 0s is even\n        # - 1 if the number of 0s is odd\n\n        # Because every operation that replaces two 0s with 1 changes the parity of the number of 0s.\n        # All other operations do not affect the parity of the number of 0s.\n\n        # So the final character is:\n        # - 0 if the number of 0s is even\n        # - 1 if the number of 0s is odd\n\n        # So for the string to reduce to g, the number of 0s must be congruent to g modulo 2.\n\n        # So the condition is:\n        # if g == 0, then n % 2 == 0\n        # if g == 1, then n % 2 == 1\n\n        if g == 0 and n % 2 != 0:\n            results.append(0)\n            continue\n        if g == 1 and n % 2 == 0:\n            results.append(0)\n            continue\n\n        # Now we count the number of strings with exactly n 0s and m 1s\n        # That is C(n + m, n)\n\n        ans = comb(n + m, n, fact, inv_fact)\n        results.append(ans)\n\n    print('\\n'.join(map(str, results)))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Precompute factorials and inverse factorials up to 2*1e5 + 1\n    max_n = 2 * 10**5 + 10\n    fact = [1] * (max_n)\n    for i in range(1, max_n):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact = [1] * (max_n)\n    inv_fact[max_n-1] = pow(fact[max_n-1], MOD-2, MOD)\n    for i in range(max_n-2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n\n    results = []\n    for line in data:\n        n, m, g = map(int, line.split())\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n\n        # The string must be reducible to a single character g via the given operation\n        # The operation reduces the length by 1 each time, starting from length >= 2\n        # So the final length must be 1, meaning the original length must be 1 + k, where k is the number of operations\n        # Each operation reduces length by 1, so the initial length must be at least 2\n        # So the total length must be >= 2, but after reducing, it must be 1\n        # Therefore, total = n + m must be >= 2\n\n        if total < 2:\n            results.append(0)\n            continue\n\n        # The final character g must be obtainable from the string s\n        # Let's analyze the process:\n        # Each operation replaces last two characters with one character.\n        # If two 0s are replaced, result is 1\n        # If two 1s are replaced, result is 0\n        # If one 0 and one 1 are replaced, result is 0 if the last character is 0, or 1 if the last character is 1?\n\n        # Actually, the replacement rule is: replace two last characters with one:\n        # - If both are 0 → replace with 1\n        # - If both are 1 → replace with 0\n        # - If different → replace with 0 if the last character is 0, else 1?\n\n        # Wait, the problem says:\n        # \"we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero.\"\n\n        # So:\n        # - Two 0s → replace with 1\n        # - Any other pair (01, 10, 11) → replace with 0\n\n        # So the replacement rule is:\n        # Replace last two characters with 1 if they are both 0, else with 0.\n\n        # We want to end up with character g after all possible operations.\n\n        # Let’s simulate this process backwards:\n        # Start with the final character g.\n        # To get to it, the previous step must have been a pair that would reduce to g.\n\n        # Let’s think recursively:\n        # Let f(a, b, c) be the number of strings with a 0s and b 1s that can reduce to c (0 or 1)\n\n        # We need to find f(n, m, g)\n\n        # We can model this as a DP problem, but since n and m can be up to 1e5, we need an efficient way.\n\n        # Key observation:\n        # The parity of the number of 0s and 1s matters because every operation reduces the count of characters by 1.\n\n        # Let’s define:\n        # Let’s denote the number of 0s and 1s in the string as a and b respectively.\n        # The total length is L = a + b.\n\n        # Each operation reduces the length by 1, so to reach a length of 1, we need to perform L - 1 operations.\n\n        # The final character depends on the number of times we replaced two 0s with 1s.\n\n        # But there's a simpler way:\n        # The final character is determined by the parity of the number of 0s and 1s.\n\n        # Let’s try to derive the final character based on the number of 0s and 1s:\n\n        # Every operation reduces the total number of characters by 1.\n        # Every operation either:\n        # - Replaces two 0s with 1 → net change: -1 0, +1 1\n        # - Replaces any other pair with 0 → net change: -1 or -2 of some type, +1 of another\n\n        # But the key insight is that the final character depends on the parity of the number of 0s and 1s.\n\n        # If we start with a string of 0s and 1s and reduce it to one character, the final character is:\n        # - 0 if the number of 0s is even\n        # - 1 if the number of 0s is odd\n\n        # Because every operation that replaces two 0s with 1 changes the parity of the number of 0s.\n        # All other operations do not affect the parity of the number of 0s.\n\n        # So the final character is:\n        # - 0 if the number of 0s is even\n        # - 1 if the number of 0s is odd\n\n        # So for the string to reduce to g, the number of 0s must be congruent to g modulo 2.\n\n        # So the condition is:\n        # if g == 0, then n % 2 == 0\n        # if g == 1, then n % 2 == 1\n\n        if g == 0 and n % 2 != 0:\n            results.append(0)\n            continue\n        if g == 1 and n % 2 == 0:\n            results.append(0)\n            continue\n\n        # Now we count the number of strings with exactly n 0s and m 1s\n        # That is C(n + m, n)\n\n        ans = comb(n + m, n, fact, inv_fact)\n        results.append(ans)\n\n    print('\\n'.join(map(str, results)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 1456,
        "thoughts_token_count": 0
    }
}