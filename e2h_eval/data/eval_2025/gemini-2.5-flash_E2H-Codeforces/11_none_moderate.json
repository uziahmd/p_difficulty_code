{
    "start": 1758011283.0583053,
    "end": 1758011292.9353693,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    line = input().split()\n    n = int(line[0])\n    k = int(line[1])\n    l = int(line[2])\n    c = int(line[3])\n    d = int(line[4])\n    p = int(line[5])\n    nl = int(line[6])\n    np = int(line[7])\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = p // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these resources\n    # and then divided by the number of friends, as they all drink the same amount.\n    # However, the problem statement \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\n    # The friends want to make as many toasts as they can, provided they all drink the same amount.\n    # How many toasts can each friend make?\" implies that we first find the total number of toasts\n    # possible for the *entire group* given the resources, and then divide that by 'n' to find\n    # how many each friend can make.\n\n    # Let's re-read the example explanation:\n    # \"Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n    # Here, 3 is 'nl' (milliliters per friend per toast). So, total_drink_ml / nl gives total toasts possible for the group based on drink.\n    # \"The limes are enough for 10 * 8 = 80 toasts\"\n    # Here, 80 is total_lime_slices. Each toast needs 1 slice per friend. So, total_lime_slices / 1 (implicitly) gives total toasts possible for the group based on lime.\n    # \"and the salt is enough for 100 / 1 = 100 toasts.\"\n    # Here, 1 is 'np' (grams per friend per toast). So, p / np gives total toasts possible for the group based on salt.\n    # \"However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n    # This means the total number of toasts the *group* can make is min(toasts_from_drink_for_group, toasts_from_lime_for_group, toasts_from_salt_for_group).\n    # Then, this total number of toasts is divided by 'n' (number of friends) to get how many each friend can make.\n\n    # Recalculate based on the example's interpretation:\n    # Toasts possible for the entire group based on drink\n    toasts_for_group_drink = (k * l) // nl\n\n    # Toasts possible for the entire group based on lime\n    toasts_for_group_lime = (c * d) // 1 # Each friend needs 1 slice, so total slices / 1 per friend per toast\n\n    # Toasts possible for the entire group based on salt\n    toasts_for_group_salt = p // np\n\n    # The total number of toasts the group can make is limited by the minimum of these\n    total_toasts_for_group = min(toasts_for_group_drink, toasts_for_group_lime, toasts_for_group_salt)\n\n    # Since there are 'n' friends and they all drink the same amount,\n    # the number of toasts each friend can make is the total toasts for the group divided by 'n'.\n    ans = total_toasts_for_group // n\n\n    print(ans)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    line = input().split()\n    n = int(line[0])\n    k = int(line[1])\n    l = int(line[2])\n    c = int(line[3])\n    d = int(line[4])\n    p = int(line[5])\n    nl = int(line[6])\n    np = int(line[7])\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = p // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these resources\n    # and then divided by the number of friends, as they all drink the same amount.\n    # However, the problem statement \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\n    # The friends want to make as many toasts as they can, provided they all drink the same amount.\n    # How many toasts can each friend make?\" implies that we first find the total number of toasts\n    # possible for the *entire group* given the resources, and then divide that by 'n' to find\n    # how many each friend can make.\n\n    # Let's re-read the example explanation:\n    # \"Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n    # Here, 3 is 'nl' (milliliters per friend per toast). So, total_drink_ml / nl gives total toasts possible for the group based on drink.\n    # \"The limes are enough for 10 * 8 = 80 toasts\"\n    # Here, 80 is total_lime_slices. Each toast needs 1 slice per friend. So, total_lime_slices / 1 (implicitly) gives total toasts possible for the group based on lime.\n    # \"and the salt is enough for 100 / 1 = 100 toasts.\"\n    # Here, 1 is 'np' (grams per friend per toast). So, p / np gives total toasts possible for the group based on salt.\n    # \"However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n    # This means the total number of toasts the *group* can make is min(toasts_from_drink_for_group, toasts_from_lime_for_group, toasts_from_salt_for_group).\n    # Then, this total number of toasts is divided by 'n' (number of friends) to get how many each friend can make.\n\n    # Recalculate based on the example's interpretation:\n    # Toasts possible for the entire group based on drink\n    toasts_for_group_drink = (k * l) // nl\n\n    # Toasts possible for the entire group based on lime\n    toasts_for_group_lime = (c * d) // 1 # Each friend needs 1 slice, so total slices / 1 per friend per toast\n\n    # Toasts possible for the entire group based on salt\n    toasts_for_group_salt = p // np\n\n    # The total number of toasts the group can make is limited by the minimum of these\n    total_toasts_for_group = min(toasts_for_group_drink, toasts_for_group_lime, toasts_for_group_salt)\n\n    # Since there are 'n' friends and they all drink the same amount,\n    # the number of toasts each friend can make is the total toasts for the group divided by 'n'.\n    ans = total_toasts_for_group // n\n\n    print(ans)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 548,
        "completion_token_count": 953,
        "thoughts_token_count": 0
    }
}