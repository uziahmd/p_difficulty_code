{
    "start": 1758284872.5951142,
    "end": 1758284895.955643,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Thinking Through the Neko Maths Problem**\n\nOkay, so I'm tackling this \"Neko does Maths\" problem. The core of it is finding the smallest non-negative *k* that minimizes the least common multiple of *a+k* and *b+k*.  I'm thinking about how to frame this... Let's represent *a+k* as *x* and *b+k* as *y*. The problem then becomes minimizing lcm(*x*, *y*). I remember the key relationship: lcm(*x*, *y*) is equal to (*x* * *y*) divided by gcd(*x*, *y*).\n\nI need to exploit the fact that *y - x* equals *(b+k) - (a+k)*, which simplifies to *b - a*. Let's call this difference *d*.  Without loss of generality, I can assume *a* is less than or equal to *b*, because if *a* is greater, I can just swap them, and the LCM will remain the same. The trivial case to handle first is when *a* equals *b*. In that case, the lcm is always *a+k*, which is minimized when *k* is 0. So, if *a = b*, the answer is just *k = 0*.\n\nNow, let's assume *a < b* (so *d > 0*). I know that gcd(*x*, *y*) is the same as gcd(*x*, *y-x*), which means gcd(*a+k*, *b+k*) equals gcd(*a+k*, *b-a*), or gcd(*a+k*, *d*).  This is the crucial step.  Let's call this gcd *g*.  So *g* must be a divisor of *d*.\n\nThis means that *a+k* must be a multiple of *g*. That is, there is some integer *m* such that *a+k* equals *m* * *g*.  Also, since *g* divides *d*, we know that *d* is equal to *n* * *g* for some other integer *n*. Now I have to look at the relationships in terms of *g*. The lcm formula still stands.\nIf I go back to:  lcm(a+k, b+k) = (a+k)(b+k) / gcd(a+k, b+k).\nLetting `g = gcd(a+k, d)`, it means `g` must also be a divisor of `a+k`. Then `a+k = c_1 * g` and `d = c_2 * g`. Thus `b+k = a+k + d = c_1*g + c_2*g = (c_1+c_2) * g`.\nNow, `gcd(a+k, b+k) = gcd(c_1*g, (c_1+c_2)*g) = g * gcd(c_1, c_1+c_2)` and with `g = gcd(a+k, d) = gcd(c_1*g, c_2*g)`, I am getting closer.\nLet me work towards a Python script to see how to implement this.\n",
    "response": "The problem asks us to find the smallest non-negative integer `k` such that `lcm(a+k, b+k)` is minimized. If multiple `k` values yield the same minimum `lcm`, we choose the smallest `k`.\n\nLet `x = a+k` and `y = b+k`. We want to minimize `lcm(x, y)`.\nWe know that `lcm(x, y) = (x * y) / gcd(x, y)`.\nAlso, `gcd(x, y) = gcd(a+k, b+k)`.\nSince `gcd(X, Y) = gcd(X, Y-X)`, we have `gcd(a+k, b+k) = gcd(a+k, (b+k)-(a+k)) = gcd(a+k, b-a)`.\nLet `D = |b-a|`. Then `gcd(a+k, b+k) = gcd(a+k, D)`.\n\nIf `a=b`, then `D=0`. `gcd(a+k, 0) = a+k`.\nIn this case, `lcm(a+k, b+k) = lcm(a+k, a+k) = a+k`.\nTo minimize `a+k`, we should choose the smallest non-negative `k`, which is `k=0`. The minimum `lcm` is `a`.\n\nIf `a != b`, then `D > 0`.\nLet `g = gcd(a+k, D)`. Since `g` is a divisor of `D`, `g` must be one of the divisors of `D`.\nFor any divisor `g` of `D`, we need `a+k` to be a multiple of `g`.\nThis means `a+k = m * g` for some integer `m`.\nThis implies `a+k \\equiv 0 \\pmod g`, or `k \\equiv -a \\pmod g`.\nThe smallest non-negative `k` for a given `g` is `k = (-a \\pmod g + g) \\pmod g`.\nLet `k_g = (-a \\pmod g + g) \\pmod g`.\nWith this `k_g`, `a+k_g` is a multiple of `g`.\nThen `gcd(a+k_g, D)` will be `g` (or a multiple of `g` if `a+k_g` is also a multiple of `D/g` and `g` is not `D`). More precisely, `gcd(a+k_g, D)` is some `g'`, where `g'` is a multiple of `g`.\nHowever, we need `gcd(a+k, b+k)` to be exactly `g`. This means `gcd((a+k)/g, D/g)` must be 1.\nThis condition is not strictly necessary to calculate `lcm`. The `lcm` formula `(a+k)(b+k)/gcd(a+k, b+k)` works for any `g = gcd(a+k, D)`.\n\nThe possible values for `g = gcd(a+k, D)` are the divisors of `D`.\nWe can iterate through all divisors `g` of `D`. For each `g`:\n1. Find the smallest non-negative `k` such that `a+k` is a multiple of `g`.\n   This `k` is `k_g = (-a % g + g) % g`.\n2. Calculate `x = a+k_g` and `y = b+k_g`.\n3. Calculate `current_lcm = (x * y) / gcd(x, y)`.\n4. Keep track of the minimum `current_lcm` found so far and the corresponding smallest `k_g`.\n\nLet's refine step 3. We know `gcd(x, y) = gcd(x, D)`.\nSo `current_lcm = (x * y) / gcd(x, D)`.\n\nThe range of `a, b` is up to `10^9`. So `D = |b-a|` can also be up to `10^9`.\nThe number of divisors of `D` can be large, but for `D <= 10^9`, the maximum number of divisors is relatively small. For example, `735134400` has 1344 divisors. Iterating through divisors is feasible.\n\nAlgorithm:\n1. Handle the `a=b` case: If `a == b`, print `0` and exit.\n2. Ensure `a < b`: If `a > b`, swap `a` and `b`. This doesn't change `lcm(a+k, b+k)` or `D`.\n3. Calculate `D = b - a`.\n4. Initialize `min_lcm = infinity` and `best_k = 0`.\n5. Find all divisors of `D`. We can do this by iterating from `1` up to `sqrt(D)`. If `i` divides `D`, then `i` and `D/i` are divisors.\n6. For each divisor `g` of `D`:\n   a. Calculate `k_g = (-a % g + g) % g`. This is the smallest non-negative `k` such that `a+k` is a multiple of `g`.\n   b. Calculate `x = a + k_g`.\n   c. Calculate `y = b + k_g`.\n   d. Calculate `current_lcm = (x * y) // math.gcd(x, y)`. (Use integer division `//` because `lcm` is always an integer).\n   e. If `current_lcm < min_lcm`:\n      `min_lcm = current_lcm`\n      `best_k = k_g`\n   f. Else if `current_lcm == min_lcm`:\n      `best_k = min(best_k, k_g)` (We need the smallest `k` for tie-breaking).\n7. Print `best_k`.\n\nExample walk-through: `a=6, b=10`\n1. `a != b`.\n2. `a=6, b=10`.\n3. `D = 10 - 6 = 4`.\n4. `min_lcm = infinity`, `best_k = 0`.\n5. Divisors of `D=4`: `1, 2, 4`.\n\n   - For `g = 1`:\n     `k_1 = (-6 % 1 + 1) % 1 = 0`.\n     `x = 6+0 = 6`, `y = 10+0 = 10`.\n     `current_lcm = (6 * 10) // gcd(6, 10) = 60 // 2 = 30`.\n     `min_lcm = 30`, `best_k = 0`.\n\n   - For `g = 2`:\n     `k_2 = (-6 % 2 + 2) % 2 = 0`.\n     `x = 6+0 = 6`, `y = 10+0 = 10`.\n     `current_lcm = (6 * 10) // gcd(6, 10) = 60 // 2 = 30`.\n     `current_lcm == min_lcm`, so `best_k = min(0, 0) = 0`.\n\n   - For `g = 4`:\n     `k_4 = (-6 % 4 + 4) % 4 = (-2 + 4) % 4 = 2`.\n     `x = 6+2 = 8`, `y = 10+2 = 12`.\n     `current_lcm = (8 * 12) // gcd(8, 12) = 96 // 4 = 24`.\n     `current_lcm < min_lcm`.\n     `min_lcm = 24`, `best_k = 2`.\n\n6. Print `best_k = 2`.\n\nThis matches the example output.\n\n```python\nimport math\nimport sys\n\ndef solve():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a == b:\n        print(0)\n        return\n\n    # Ensure a < b for consistent D = b - a\n    if a > b:\n        a, b = b, a\n\n    D = b - a\n\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Find divisors of D\n    divisors = set()\n    for i in range(1, int(math.sqrt(D)) + 1):\n        if D % i == 0:\n            divisors.add(i)\n            divisors.add(D // i)\n    \n    # Iterate through each divisor g of D\n    for g in divisors:\n        # k_g is the smallest non-negative k such that a+k is a multiple of g\n        # a+k = m*g  => k = m*g - a\n        # k >= 0\n        # k = (-a % g + g) % g\n        k_g = (g - (a % g)) % g\n        \n        x = a + k_g\n        y = b + k_g\n        \n        current_gcd = math.gcd(x, y)\n        current_lcm = (x // current_gcd) * y # To prevent overflow if x*y is too large, use (x/gcd)*y\n\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            best_k = k_g\n        elif current_lcm == min_lcm:\n            best_k = min(best_k, k_g)\n\n    print(best_k)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\nimport sys\n\ndef solve():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a == b:\n        print(0)\n        return\n\n    # Ensure a < b for consistent D = b - a\n    if a > b:\n        a, b = b, a\n\n    D = b - a\n\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Find divisors of D\n    divisors = set()\n    for i in range(1, int(math.sqrt(D)) + 1):\n        if D % i == 0:\n            divisors.add(i)\n            divisors.add(D // i)\n    \n    # Iterate through each divisor g of D\n    for g in divisors:\n        # k_g is the smallest non-negative k such that a+k is a multiple of g\n        # a+k = m*g  => k = m*g - a\n        # k >= 0\n        # k = (-a % g + g) % g\n        k_g = (g - (a % g)) % g\n        \n        x = a + k_g\n        y = b + k_g\n        \n        current_gcd = math.gcd(x, y)\n        current_lcm = (x // current_gcd) * y # To prevent overflow if x*y is too large, use (x/gcd)*y\n\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            best_k = k_g\n        elif current_lcm == min_lcm:\n            best_k = min(best_k, k_g)\n\n    print(best_k)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 422,
        "completion_token_count": 2281,
        "thoughts_token_count": 863
    }
}