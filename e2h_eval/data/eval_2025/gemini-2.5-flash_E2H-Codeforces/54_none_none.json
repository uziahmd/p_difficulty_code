{
    "start": 1758293703.115588,
    "end": 1758293711.0553217,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, a = map(int, input().split())\n\n    # The central angle subtended by each side is 360/n.\n    # The angle formed by three vertices v1, v2, v3 (with v2 as the vertex)\n    # is an inscribed angle.\n    # The measure of an inscribed angle is half the measure of the arc it subtends.\n    # If v1, v2, v3 are vertices, let's fix v2 as vertex 2.\n    # v1 can be vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The arc subtended by angle v1-v2-v3 is the arc from v1 to v3 (not passing through v2).\n    # The number of polygon sides between v1 and v3 (excluding v1 and v3) determines the arc length.\n    # If v1 is vertex 1 and v2 is vertex 2, then v3 can be vertex k (3 <= k <= n).\n    # The arc from v1 to v3 consists of (k-1) segments.\n    # The central angle for one segment is 360/n.\n    # The central angle for (k-1) segments is (k-1) * (360/n).\n    # The inscribed angle v1-v2-v3 is half of this central angle.\n    # Angle = (k-1) * (360/n) / 2 = (k-1) * (180/n).\n    # Here, (k-1) represents the number of edges between v1 and v3, assuming v2 is not on that arc.\n    # More generally, if the vertices are i, j, k, with j being the vertex of the angle,\n    # the number of edges between i and k (not passing through j) is |i-k| (modulo n).\n    # Let's simplify by fixing v2 and v1.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc from v1 to v3 (not passing through v2) is (v3 - v1 - 1) edges.\n    # In our case, v1=1, v2=2, v3=k. The arc from v1 to v3 is from vertex 1 to vertex k.\n    # The number of edges on this arc is (k - 1).\n    # The angle is (k - 1) * (180 / n).\n    # The number of edges can range from 1 to n-2.\n    # So k-1 can range from 1 to n-2.\n    # The possible angles are 1 * (180/n), 2 * (180/n), ..., (n-2) * (180/n).\n\n    # We want to find an integer `num_edges` (let's call it `m`) such that\n    # 1 <= m <= n-2, and |m * (180/n) - a| is minimized.\n\n    min_diff = float('inf')\n    best_m = -1\n\n    # Iterate through all possible number of edges 'm' that can form the arc.\n    # 'm' represents (k-1) in the formula.\n    for m in range(1, n - 1): # m can be 1 to n-2\n        current_angle = m * (180 / n)\n        diff = abs(current_angle - a)\n        if diff < min_diff:\n            min_diff = diff\n            best_m = m\n\n    # Now we have the optimal `best_m`.\n    # We need to find v1, v2, v3.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Then v3 must be vertex (1 + best_m + 1) = (best_m + 2).\n    # The vertices are 1-indexed.\n    # v1 = 1\n    # v2 = 2\n    # v3 = best_m + 2\n\n    print(1, 2, best_m + 2)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, a = map(int, input().split())\n\n    # The central angle subtended by each side is 360/n.\n    # The angle formed by three vertices v1, v2, v3 (with v2 as the vertex)\n    # is an inscribed angle.\n    # The measure of an inscribed angle is half the measure of the arc it subtends.\n    # If v1, v2, v3 are vertices, let's fix v2 as vertex 2.\n    # v1 can be vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The arc subtended by angle v1-v2-v3 is the arc from v1 to v3 (not passing through v2).\n    # The number of polygon sides between v1 and v3 (excluding v1 and v3) determines the arc length.\n    # If v1 is vertex 1 and v2 is vertex 2, then v3 can be vertex k (3 <= k <= n).\n    # The arc from v1 to v3 consists of (k-1) segments.\n    # The central angle for one segment is 360/n.\n    # The central angle for (k-1) segments is (k-1) * (360/n).\n    # The inscribed angle v1-v2-v3 is half of this central angle.\n    # Angle = (k-1) * (360/n) / 2 = (k-1) * (180/n).\n    # Here, (k-1) represents the number of edges between v1 and v3, assuming v2 is not on that arc.\n    # More generally, if the vertices are i, j, k, with j being the vertex of the angle,\n    # the number of edges between i and k (not passing through j) is |i-k| (modulo n).\n    # Let's simplify by fixing v2 and v1.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc from v1 to v3 (not passing through v2) is (v3 - v1 - 1) edges.\n    # In our case, v1=1, v2=2, v3=k. The arc from v1 to v3 is from vertex 1 to vertex k.\n    # The number of edges on this arc is (k - 1).\n    # The angle is (k - 1) * (180 / n).\n    # The number of edges can range from 1 to n-2.\n    # So k-1 can range from 1 to n-2.\n    # The possible angles are 1 * (180/n), 2 * (180/n), ..., (n-2) * (180/n).\n\n    # We want to find an integer `num_edges` (let's call it `m`) such that\n    # 1 <= m <= n-2, and |m * (180/n) - a| is minimized.\n\n    min_diff = float('inf')\n    best_m = -1\n\n    # Iterate through all possible number of edges 'm' that can form the arc.\n    # 'm' represents (k-1) in the formula.\n    for m in range(1, n - 1): # m can be 1 to n-2\n        current_angle = m * (180 / n)\n        diff = abs(current_angle - a)\n        if diff < min_diff:\n            min_diff = diff\n            best_m = m\n\n    # Now we have the optimal `best_m`.\n    # We need to find v1, v2, v3.\n    # Let v2 be vertex 2.\n    # Let v1 be vertex 1.\n    # Then v3 must be vertex (1 + best_m + 1) = (best_m + 2).\n    # The vertices are 1-indexed.\n    # v1 = 1\n    # v2 = 2\n    # v3 = best_m + 2\n\n    print(1, 2, best_m + 2)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 729,
        "completion_token_count": 1000,
        "thoughts_token_count": 0
    }
}