{
    "start": 1758293684.3887086,
    "end": 1758293690.1655564,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:54 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n\n    max_val = 0\n    current_sum = 0\n    \n    # Iterate from the most significant bit to the least significant bit\n    for i in range(n):\n        # If the i-th bit of m is 1\n        if s[i] == '1':\n            # We can choose x to have a 0 at this position (and all subsequent positions)\n            # and match m for all previous positions.\n            # This means x would be (prefix of m up to i-1) + 0 + (all 1s for remaining bits)\n            # The sum would be current_sum (from matching m's prefix) + sum of a[j] for j > i\n            # This is equivalent to taking current_sum and adding all remaining 'a' values.\n            # We need to consider the case where we make the current bit 0.\n            # If we set the current bit to 0, then we can set any subsequent bits to 1.\n            # To maximize, we would set all subsequent bits to 1.\n            # So, calculate the sum of current_sum (bits already set to 1) and all a[j] for j from i+1 to n-1.\n            remaining_sum_if_current_bit_is_zero = sum(a[j] for j in range(i + 1, n))\n            max_val = max(max_val, current_sum + remaining_sum_if_current_bit_is_zero)\n            \n            # Now, assume we set the i-th bit of x to 1 (matching m's i-th bit).\n            # Add a[i] to current_sum.\n            current_sum += a[i]\n        # If the i-th bit of m is 0, we must set the i-th bit of x to 0\n        # to stay less than or equal to m. So, we just continue.\n        # current_sum remains unchanged, as a[i] is not added.\n\n    # After iterating through all bits, current_sum represents f(m)\n    # (if m is a valid x). This is another candidate for the maximum.\n    max_val = max(max_val, current_sum)\n\n    print(max_val)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n\n    max_val = 0\n    current_sum = 0\n    \n    # Iterate from the most significant bit to the least significant bit\n    for i in range(n):\n        # If the i-th bit of m is 1\n        if s[i] == '1':\n            # We can choose x to have a 0 at this position (and all subsequent positions)\n            # and match m for all previous positions.\n            # This means x would be (prefix of m up to i-1) + 0 + (all 1s for remaining bits)\n            # The sum would be current_sum (from matching m's prefix) + sum of a[j] for j > i\n            # This is equivalent to taking current_sum and adding all remaining 'a' values.\n            # We need to consider the case where we make the current bit 0.\n            # If we set the current bit to 0, then we can set any subsequent bits to 1.\n            # To maximize, we would set all subsequent bits to 1.\n            # So, calculate the sum of current_sum (bits already set to 1) and all a[j] for j from i+1 to n-1.\n            remaining_sum_if_current_bit_is_zero = sum(a[j] for j in range(i + 1, n))\n            max_val = max(max_val, current_sum + remaining_sum_if_current_bit_is_zero)\n            \n            # Now, assume we set the i-th bit of x to 1 (matching m's i-th bit).\n            # Add a[i] to current_sum.\n            current_sum += a[i]\n        # If the i-th bit of m is 0, we must set the i-th bit of x to 0\n        # to stay less than or equal to m. So, we just continue.\n        # current_sum remains unchanged, as a[i] is not added.\n\n    # After iterating through all bits, current_sum represents f(m)\n    # (if m is a valid x). This is another candidate for the maximum.\n    max_val = max(max_val, current_sum)\n\n    print(max_val)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 711,
        "completion_token_count": 553,
        "thoughts_token_count": 0
    }
}