{
    "start": 1758293696.4158146,
    "end": 1758293718.4106102,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 57,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Olympiad\n\nA boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya's chances.Help Vasya's teacher, find two numbers — the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours (the first place has the participant who has got the most points). If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.\n\n## Input\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.The second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.The third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.The participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x.\n\n## Output\nPrint two space-separated integers — the best and the worst place Vasya could have got on the Olympiad.\n\n## Example\n### Input\n['5 2\\n1 1 1 1 1\\n1 1 1 1 1', '6 7\\n4 3 5 6 4 4\\n8 6 0 4 3 4']\n\n### Output\n['1 5', '1 5']\n\n## Note\nIn the first text sample all 5 participants earn 2 points each in any case. Depending on the jury's decision, Vasya can get the first (the best) as well as the last (the worst) fifth place.In the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that — {4:8, 6:4, 3:6, 4:4, 4:3, 5:0}.In this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour.In the worst case scenario Vasya can get the fifth place if the table looks like that — {4:8, 4:6, 6:4, 5:4, 4:3, 3:0}, and he earned 4 and 3 points in the first and second tours, correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    b.sort()\n\n    # Calculate best possible rank for Vasya\n    # To maximize Vasya's score, he takes the highest possible a[i] and b[j] such that a[i] + b[j] >= x.\n    # To minimize the scores of others, we pair the remaining highest a[k] with lowest b[l].\n    # This is equivalent to finding the maximum possible score Vasya could achieve.\n    # Vasya's best possible score is max(a[i] + b[j]) such that a[i] + b[j] >= x.\n    # Since we want the best rank, we want Vasya's score to be as high as possible.\n    # The guarantee states Vasya was present and there exist i, j such that a[i] + b[j] >= x.\n    # The best rank is 1. Vasya can always achieve rank 1.\n    # He can pick the highest a_i and highest b_j such that a_i + b_j >= x.\n    # If he picks a[n-1] and b[n-1], his score is a[n-1] + b[n-1].\n    # He can always be paired with the highest possible score he can get.\n    # If he gets the highest possible score, he can be rank 1.\n    # The problem statement says \"the first place has the participant who has got the most points\".\n    # If two or more participants have got the same number of points, it's up to the jury to assign places.\n    # So if Vasya has the maximum score, he can be rank 1.\n    # The guarantee ensures there's at least one pair (a_i, b_j) with sum >= x.\n    # Vasya can be assigned the largest a_i and largest b_j that satisfy a_i + b_j >= x.\n    # For example, if a = [1], b = [1], x = 0. Vasya can get 1+1=2 points. Max possible. Rank 1.\n    # If a = [1, 1], b = [1, 1], x = 2. Vasya can get 1+1=2 points. Another person can also get 1+1=2.\n    # Vasya can be assigned rank 1.\n    best_rank = 1\n\n    # Calculate worst possible rank for Vasya\n    # To maximize Vasya's rank, we want to maximize the number of people who score strictly more than Vasya.\n    # To do this, we want Vasya's score to be as low as possible, but still >= x.\n    # And we want other people's scores to be as high as possible.\n    #\n    # We use a greedy approach for matching.\n    # Sort 'a' in ascending order and 'b' in descending order.\n    # This strategy attempts to create the largest possible sums for other participants,\n    # and the smallest possible sum for Vasya (while still >= x).\n    #\n    # Let's consider the scores. We want to find the minimum number of people Vasya can beat.\n    # Or, equivalently, the maximum number of people who can beat or tie Vasya.\n    #\n    # We want to find a matching (a_i, b_j) for Vasya such that a_i + b_j >= x,\n    # and this sum is as small as possible.\n    # Then, we want to pair the remaining (n-1) 'a' values and (n-1) 'b' values\n    # to maximize the scores of other participants.\n    #\n    # The key insight for worst rank is to match 'a' and 'b' such that\n    # as many pairs as possible have a sum >= x, and these sums are high.\n    #\n    # Consider sorting 'a' and 'b'.\n    # For a fixed 'a_i', we want to find a 'b_j' such that a_i + b_j >= x.\n    # To maximize the number of pairs that sum to >= x, we can use a two-pointer approach.\n    # Sort 'a' in ascending order. Sort 'b' in descending order.\n    # Iterate through 'a' from left to right (smallest to largest).\n    # For each a[i], find the smallest b[j] (from the available b's) such that a[i] + b[j] >= x.\n    # If such a b[j] exists, we can form a pair (a[i], b[j]).\n    # This greedy strategy counts how many pairs can achieve a sum of at least x.\n    #\n    # Let's count how many participants *can* achieve a score of at least x.\n    # We sort 'a' in ascending order and 'b' in descending order.\n    # We use two pointers: `ptr_a` for 'a' (starts at 0) and `ptr_b` for 'b' (starts at 0).\n    #\n    # `a_sorted = sorted(a)`\n    # `b_sorted_desc = sorted(b, reverse=True)`\n    #\n    # `count_at_least_x = 0`\n    # `ptr_a = 0`\n    # `ptr_b = 0`\n    #\n    # While `ptr_a < n` and `ptr_b < n`:\n    #   If `a_sorted[ptr_a] + b_sorted_desc[ptr_b] >= x`:\n    #     This means we can form a pair that scores at least x.\n    #     We increment `count_at_least_x`.\n    #     We use `a_sorted[ptr_a]` and `b_sorted_desc[ptr_b]`, so move both pointers.\n    #     `ptr_a += 1`\n    #     `ptr_b += 1`\n    #   Else (`a_sorted[ptr_a] + b_sorted_desc[ptr_b] < x`):\n    #     `a_sorted[ptr_a]` is too small to combine with the current `b_sorted_desc[ptr_b]`\n    #     to reach `x`. Since `b_sorted_desc` is sorted descending, any `b_sorted_desc[k]`\n    #     with `k > ptr_b` will be even smaller. So `a_sorted[ptr_a]` cannot form a pair\n    #     with any remaining `b` to reach `x` if `b_sorted_desc[ptr_b]` is already too small.\n    #     Therefore, we must try a larger `a_sorted` value.\n    #     `ptr_a += 1`\n    #\n    # This `count_at_least_x` represents the maximum number of participants who can achieve a total score of at least x.\n    # Vasya is one of these participants.\n    # In the worst case, Vasya is assigned one of the lowest possible scores (but still >= x)\n    # among these `count_at_least_x` participants.\n    # All `count_at_least_x - 1` other participants who also scored >= x are placed ahead of Vasya.\n    # All `n - count_at_least_x` participants who scored < x are placed after Vasya.\n    # So, Vasya's worst rank would be `count_at_least_x`.\n\n    # Example: n=5, x=2, a=[1,1,1,1,1], b=[1,1,1,1,1]\n    # a_sorted = [1,1,1,1,1]\n    # b_sorted_desc = [1,1,1,1,1]\n    # ptr_a=0, ptr_b=0. a[0]+b[0] = 1+1=2 >= x. count=1. ptr_a=1, ptr_b=1.\n    # ptr_a=1, ptr_b=1. a[1]+b[1] = 1+1=2 >= x. count=2. ptr_a=2, ptr_b=2.\n    # ...\n    # count_at_least_x = 5.\n    # Worst rank = 5. (Matches example output)\n\n    # Example: n=6, x=7, a=[4,3,5,6,4,4], b=[8,6,0,4,3,4]\n    # a_sorted = [3,4,4,4,5,6]\n    # b_sorted_desc = [8,6,4,4,3,0]\n    #\n    # ptr_a=0 (a[0]=3), ptr_b=0 (b[0]=8). 3+8=11 >= 7. count=1. ptr_a=1, ptr_b=1.\n    # ptr_a=1 (a[1]=4), ptr_b=1 (b[1]=6). 4+6=10 >= 7. count=2. ptr_a=2, ptr_b=2.\n    # ptr_a=2 (a[2]=4), ptr_b=2 (b[2]=4). 4+4=8 >= 7. count=3. ptr_a=3, ptr_b=3.\n    # ptr_a=3 (a[3]=4), ptr_b=3 (b[3]=4). 4+4=8 >= 7. count=4. ptr_a=4, ptr_b=4.\n    # ptr_a=4 (a[4]=5), ptr_b=4 (b[4]=3). 5+3=8 >= 7. count=5. ptr_a=5, ptr_b=5.\n    # ptr_a=5 (a[5]=6), ptr_b=5 (b[5]=0). 6+0=6 < 7. ptr_a=6.\n    # Loop ends. count_at_least_x = 5.\n    # Worst rank = 5. (Matches example output)\n\n    a_sorted = sorted(a)\n    b_sorted_desc = sorted(b, reverse=True)\n\n    count_at_least_x = 0\n    ptr_a = 0\n    ptr_b = 0\n\n    while ptr_a < n and ptr_b < n:\n        if a_sorted[ptr_a] + b_sorted_desc[ptr_b] >= x:\n            count_at_least_x += 1\n            ptr_a += 1\n            ptr_b += 1\n        else:\n            # a_sorted[ptr_a] is too small to pair with b_sorted_desc[ptr_b]\n            # to reach x. Since b_sorted_desc is sorted descending,\n            # any b_sorted_desc[k] with k > ptr_b will be even smaller.\n            # So, a_sorted[ptr_a] cannot form a pair with any remaining b_j\n            # to reach x. We must move to a larger a_sorted value.\n            ptr_a += 1\n            \n    worst_rank = count_at_least_x\n\n    sys.stdout.write(f\"{best_rank} {worst_rank}\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    b.sort()\n\n    # Calculate best possible rank for Vasya\n    # To maximize Vasya's score, he takes the highest possible a[i] and b[j] such that a[i] + b[j] >= x.\n    # To minimize the scores of others, we pair the remaining highest a[k] with lowest b[l].\n    # This is equivalent to finding the maximum possible score Vasya could achieve.\n    # Vasya's best possible score is max(a[i] + b[j]) such that a[i] + b[j] >= x.\n    # Since we want the best rank, we want Vasya's score to be as high as possible.\n    # The guarantee states Vasya was present and there exist i, j such that a[i] + b[j] >= x.\n    # The best rank is 1. Vasya can always achieve rank 1.\n    # He can pick the highest a_i and highest b_j such that a_i + b_j >= x.\n    # If he picks a[n-1] and b[n-1], his score is a[n-1] + b[n-1].\n    # He can always be paired with the highest possible score he can get.\n    # If he gets the highest possible score, he can be rank 1.\n    # The problem statement says \"the first place has the participant who has got the most points\".\n    # If two or more participants have got the same number of points, it's up to the jury to assign places.\n    # So if Vasya has the maximum score, he can be rank 1.\n    # The guarantee ensures there's at least one pair (a_i, b_j) with sum >= x.\n    # Vasya can be assigned the largest a_i and largest b_j that satisfy a_i + b_j >= x.\n    # For example, if a = [1], b = [1], x = 0. Vasya can get 1+1=2 points. Max possible. Rank 1.\n    # If a = [1, 1], b = [1, 1], x = 2. Vasya can get 1+1=2 points. Another person can also get 1+1=2.\n    # Vasya can be assigned rank 1.\n    best_rank = 1\n\n    # Calculate worst possible rank for Vasya\n    # To maximize Vasya's rank, we want to maximize the number of people who score strictly more than Vasya.\n    # To do this, we want Vasya's score to be as low as possible, but still >= x.\n    # And we want other people's scores to be as high as possible.\n    #\n    # We use a greedy approach for matching.\n    # Sort 'a' in ascending order and 'b' in descending order.\n    # This strategy attempts to create the largest possible sums for other participants,\n    # and the smallest possible sum for Vasya (while still >= x).\n    #\n    # Let's consider the scores. We want to find the minimum number of people Vasya can beat.\n    # Or, equivalently, the maximum number of people who can beat or tie Vasya.\n    #\n    # We want to find a matching (a_i, b_j) for Vasya such that a_i + b_j >= x,\n    # and this sum is as small as possible.\n    # Then, we want to pair the remaining (n-1) 'a' values and (n-1) 'b' values\n    # to maximize the scores of other participants.\n    #\n    # The key insight for worst rank is to match 'a' and 'b' such that\n    # as many pairs as possible have a sum >= x, and these sums are high.\n    #\n    # Consider sorting 'a' and 'b'.\n    # For a fixed 'a_i', we want to find a 'b_j' such that a_i + b_j >= x.\n    # To maximize the number of pairs that sum to >= x, we can use a two-pointer approach.\n    # Sort 'a' in ascending order. Sort 'b' in descending order.\n    # Iterate through 'a' from left to right (smallest to largest).\n    # For each a[i], find the smallest b[j] (from the available b's) such that a[i] + b[j] >= x.\n    # If such a b[j] exists, we can form a pair (a[i], b[j]).\n    # This greedy strategy counts how many pairs can achieve a sum of at least x.\n    #\n    # Let's count how many participants *can* achieve a score of at least x.\n    # We sort 'a' in ascending order and 'b' in descending order.\n    # We use two pointers: `ptr_a` for 'a' (starts at 0) and `ptr_b` for 'b' (starts at 0).\n    #\n    # `a_sorted = sorted(a)`\n    # `b_sorted_desc = sorted(b, reverse=True)`\n    #\n    # `count_at_least_x = 0`\n    # `ptr_a = 0`\n    # `ptr_b = 0`\n    #\n    # While `ptr_a < n` and `ptr_b < n`:\n    #   If `a_sorted[ptr_a] + b_sorted_desc[ptr_b] >= x`:\n    #     This means we can form a pair that scores at least x.\n    #     We increment `count_at_least_x`.\n    #     We use `a_sorted[ptr_a]` and `b_sorted_desc[ptr_b]`, so move both pointers.\n    #     `ptr_a += 1`\n    #     `ptr_b += 1`\n    #   Else (`a_sorted[ptr_a] + b_sorted_desc[ptr_b] < x`):\n    #     `a_sorted[ptr_a]` is too small to combine with the current `b_sorted_desc[ptr_b]`\n    #     to reach `x`. Since `b_sorted_desc` is sorted descending, any `b_sorted_desc[k]`\n    #     with `k > ptr_b` will be even smaller. So `a_sorted[ptr_a]` cannot form a pair\n    #     with any remaining `b` to reach `x` if `b_sorted_desc[ptr_b]` is already too small.\n    #     Therefore, we must try a larger `a_sorted` value.\n    #     `ptr_a += 1`\n    #\n    # This `count_at_least_x` represents the maximum number of participants who can achieve a total score of at least x.\n    # Vasya is one of these participants.\n    # In the worst case, Vasya is assigned one of the lowest possible scores (but still >= x)\n    # among these `count_at_least_x` participants.\n    # All `count_at_least_x - 1` other participants who also scored >= x are placed ahead of Vasya.\n    # All `n - count_at_least_x` participants who scored < x are placed after Vasya.\n    # So, Vasya's worst rank would be `count_at_least_x`.\n\n    # Example: n=5, x=2, a=[1,1,1,1,1], b=[1,1,1,1,1]\n    # a_sorted = [1,1,1,1,1]\n    # b_sorted_desc = [1,1,1,1,1]\n    # ptr_a=0, ptr_b=0. a[0]+b[0] = 1+1=2 >= x. count=1. ptr_a=1, ptr_b=1.\n    # ptr_a=1, ptr_b=1. a[1]+b[1] = 1+1=2 >= x. count=2. ptr_a=2, ptr_b=2.\n    # ...\n    # count_at_least_x = 5.\n    # Worst rank = 5. (Matches example output)\n\n    # Example: n=6, x=7, a=[4,3,5,6,4,4], b=[8,6,0,4,3,4]\n    # a_sorted = [3,4,4,4,5,6]\n    # b_sorted_desc = [8,6,4,4,3,0]\n    #\n    # ptr_a=0 (a[0]=3), ptr_b=0 (b[0]=8). 3+8=11 >= 7. count=1. ptr_a=1, ptr_b=1.\n    # ptr_a=1 (a[1]=4), ptr_b=1 (b[1]=6). 4+6=10 >= 7. count=2. ptr_a=2, ptr_b=2.\n    # ptr_a=2 (a[2]=4), ptr_b=2 (b[2]=4). 4+4=8 >= 7. count=3. ptr_a=3, ptr_b=3.\n    # ptr_a=3 (a[3]=4), ptr_b=3 (b[3]=4). 4+4=8 >= 7. count=4. ptr_a=4, ptr_b=4.\n    # ptr_a=4 (a[4]=5), ptr_b=4 (b[4]=3). 5+3=8 >= 7. count=5. ptr_a=5, ptr_b=5.\n    # ptr_a=5 (a[5]=6), ptr_b=5 (b[5]=0). 6+0=6 < 7. ptr_a=6.\n    # Loop ends. count_at_least_x = 5.\n    # Worst rank = 5. (Matches example output)\n\n    a_sorted = sorted(a)\n    b_sorted_desc = sorted(b, reverse=True)\n\n    count_at_least_x = 0\n    ptr_a = 0\n    ptr_b = 0\n\n    while ptr_a < n and ptr_b < n:\n        if a_sorted[ptr_a] + b_sorted_desc[ptr_b] >= x:\n            count_at_least_x += 1\n            ptr_a += 1\n            ptr_b += 1\n        else:\n            # a_sorted[ptr_a] is too small to pair with b_sorted_desc[ptr_b]\n            # to reach x. Since b_sorted_desc is sorted descending,\n            # any b_sorted_desc[k] with k > ptr_b will be even smaller.\n            # So, a_sorted[ptr_a] cannot form a pair with any remaining b_j\n            # to reach x. We must move to a larger a_sorted value.\n            ptr_a += 1\n            \n    worst_rank = count_at_least_x\n\n    sys.stdout.write(f\"{best_rank} {worst_rank}\\n\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 873,
        "completion_token_count": 2680,
        "thoughts_token_count": 0
    }
}