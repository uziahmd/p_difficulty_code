{
    "start": 1758011285.7110755,
    "end": 1758011340.7385933,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:29 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children)\n    # Total vertices = 1 (root) + k (children) = k + 1\n    # n = k + 1  => k = n - 1\n    # Since k > 1, n - 1 > 1 => n > 2.\n    # This is valid for n > 2.\n    # However, the problem states \"This step should be done at least once.\"\n    # This implies there must be at least one level of \"grandchildren\".\n    # So, a 2-level snowflake (root + k children) is not allowed.\n    # A snowflake must have at least 3 levels (root, k children, k*k grandchildren).\n    # Total vertices for a 3-level snowflake: 1 + k + k*k\n    # This means the smallest snowflake must have 1 + k + k*k vertices.\n    # For k=2, smallest is 1+2+4 = 7.\n    # For k=3, smallest is 1+3+9 = 13.\n    # For k=4, smallest is 1+4+16 = 21.\n\n    # Case 2: Snowflake with more than 2 levels (root + k children + k*k grandchildren + ...)\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) for d levels\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to check if n can be represented as (k^d - 1) / (k - 1) for some k > 1 and d >= 3.\n\n    # Check for d >= 3\n    # For d = 3: n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Use quadratic formula: k = (-1 + sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    # For k to be an integer > 1:\n    # 1. 4n - 3 must be a perfect square.\n    # 2. sqrt(4n - 3) must be odd, so that (-1 + odd_sqrt) is even.\n    # 3. (-1 + sqrt(4n - 3)) / 2 > 1 => -1 + sqrt(4n - 3) > 2 => sqrt(4n - 3) > 3 => 4n - 3 > 9 => 4n > 12 => n > 3.\n    # This check covers n values that are sums of 1 + k + k^2.\n    \n    # Calculate sqrt(4n-3)\n    val = 4 * n - 3\n    s = int(math.isqrt(val))\n    if s * s == val:\n        if (s - 1) % 2 == 0:\n            k_candidate = (s - 1) // 2\n            if k_candidate > 1:\n                print(\"YES\")\n                return\n\n    # Check for d >= 4\n    # For larger d, k must be small.\n    # If k >= 2, then n = 1 + k + k^2 + ... + k^(d-1) >= 1 + 2 + 2^2 + ... + 2^(d-1) = 2^d - 1.\n    # So, 2^d - 1 <= n => 2^d <= n + 1 => d <= log2(n + 1).\n    # Since n <= 10^18, log2(10^18 + 1) is approximately 18 * log2(10) which is about 18 * 3.32 = 59.79.\n    # So d can go up to around 60.\n    # We can iterate through possible values of d from 4 up to 60.\n\n    for d in range(4, 61):\n        # We are looking for k such that n = (k^d - 1) / (k - 1)\n        # n * (k - 1) = k^d - 1\n        # This is equivalent to finding the root of f(x) = x^d - n*x + n - 1 = 0\n        # We can use binary search for k.\n        # The minimum k is 2.\n        # The maximum k:\n        # If d=4, n = 1 + k + k^2 + k^3. If k=10^6, k^3 approx 10^18. So k can be up to 10^6.\n        # If d=60, n approx k^59. If k=2, n approx 2^59. If k=3, n approx 3^59 (too large).\n        # So for larger d, k must be very small (e.g., k=2).\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Upper bound for k. If n = k^(d-1), then k = n^(1/(d-1)). Add a small margin.\n        \n        # A tighter upper bound for k:\n        # k^(d-1) < n => k < n^(1/(d-1))\n        # Since d >= 4, d-1 >= 3.\n        # Max k for d=4: n^(1/3) approx (10^18)^(1/3) = 10^6.\n        # Max k for d=60: n^(1/59) approx (10^18)^(1/59) is very small.\n        # So high can be set to min(10^6 + 2, int(n**(1/(d-1))) + 2).\n        # A simpler approach is to set high to a fixed large enough value, say 10^6 + 2,\n        # and check for overflow in the sum calculation.\n        \n        # Max possible k is around 10^6 (for d=4).\n        # We can safely use high = 10^6 + 7 (or even 2*10^6 to be safe).\n        # For d=60, k=2 is the only possible value for n up to 10^18.\n        # 2^60 - 1 is already > 10^18.\n        # So if d is large enough that 2^d - 1 > n, we can stop.\n        # Specifically, if 2^d - 1 > n, then for any k >= 2, the sum will be > n.\n        # We can precompute 2^d - 1 and stop if it exceeds n.\n        # For d=60, 2^60 - 1 is already too large.\n        \n        # Let's refine the upper bound for k.\n        # k^d - 1 / k - 1 = n\n        # k^d - 1 = n(k-1)\n        # k^d - nk + n - 1 = 0\n        # If k is large, k^d dominates.\n        # If k=2, 2^d - 1 = n. Max d for k=2 is when 2^d - 1 <= 10^18. 2^d <= 10^18+1. d <= 60.\n        # So d from 4 to 60 is sufficient.\n        \n        # For a fixed d, we need to find k.\n        # The sum S = 1 + k + k^2 + ... + k^(d-1)\n        # S is strictly increasing with k.\n        \n        # Binary search for k:\n        # Max k to check is around 10^6 (for d=4).\n        # A safe upper bound for k is 2 * 10^6.\n        # low = 2, high = 2 * 10^6\n        \n        # However, for d > 60, k=2 will already exceed n.\n        # For d = 60, k=2: (2^60 - 1) / (2-1) = 2^60 - 1 which is approx 1.15 * 10^18. This is a valid check.\n        # For d = 61, k=2: (2^61 - 1) / (2-1) = 2^61 - 1 which is approx 2.3 * 10^18, exceeds 10^18.\n        # So d can go up to 60.\n        \n        # For d = 4, k can be up to 10^6.\n        # For d = 5, k can be up to 10^4.\n        # For d = 6, k can be up to 10^3.\n        # For d = 7, k can be up to 10^2.\n        # For d = 8, k can be up to 10^2.\n        # ...\n        # For d = 60, k must be 2.\n        \n        # Let's set high to a reasonable value based on n.\n        # k^(d-1) < n => k < n^(1/(d-1)).\n        # For d=4, k < (10^18)^(1/3) = 10^6.\n        # So high = 10^6 + 7 is a good upper bound for k.\n        \n        low_k = 2\n        high_k = int(n**(1/(d-1))) + 2 # This is a tight upper bound for k.\n        if d == 4: # Special case for d=4, k can be up to 10^6.\n            high_k = min(high_k, 10**6 + 7)\n        else: # For d > 4, k will be smaller.\n            high_k = min(high_k, 2 * 10**6) # A general safe upper bound for k, should be sufficient.\n\n        while low_k <= high_k:\n            mid_k = (low_k + high_k) // 2\n            if mid_k < 2: # Ensure k > 1\n                low_k = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid multiplying if it's the last term\n                    if mid_k > (n + 1) // term: # Check for overflow before multiplication\n                        overflow = True\n                        break\n                    term *= mid_k\n            \n            if overflow or current_sum > n:\n                high_k = mid_k - 1\n            elif current_sum < n:\n                low_k = mid_k + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children)\n    # Total vertices = 1 (root) + k (children) = k + 1\n    # n = k + 1  => k = n - 1\n    # Since k > 1, n - 1 > 1 => n > 2.\n    # This is valid for n > 2.\n    # However, the problem states \"This step should be done at least once.\"\n    # This implies there must be at least one level of \"grandchildren\".\n    # So, a 2-level snowflake (root + k children) is not allowed.\n    # A snowflake must have at least 3 levels (root, k children, k*k grandchildren).\n    # Total vertices for a 3-level snowflake: 1 + k + k*k\n    # This means the smallest snowflake must have 1 + k + k*k vertices.\n    # For k=2, smallest is 1+2+4 = 7.\n    # For k=3, smallest is 1+3+9 = 13.\n    # For k=4, smallest is 1+4+16 = 21.\n\n    # Case 2: Snowflake with more than 2 levels (root + k children + k*k grandchildren + ...)\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) for d levels\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to check if n can be represented as (k^d - 1) / (k - 1) for some k > 1 and d >= 3.\n\n    # Check for d >= 3\n    # For d = 3: n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Use quadratic formula: k = (-1 + sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    # For k to be an integer > 1:\n    # 1. 4n - 3 must be a perfect square.\n    # 2. sqrt(4n - 3) must be odd, so that (-1 + odd_sqrt) is even.\n    # 3. (-1 + sqrt(4n - 3)) / 2 > 1 => -1 + sqrt(4n - 3) > 2 => sqrt(4n - 3) > 3 => 4n - 3 > 9 => 4n > 12 => n > 3.\n    # This check covers n values that are sums of 1 + k + k^2.\n    \n    # Calculate sqrt(4n-3)\n    val = 4 * n - 3\n    s = int(math.isqrt(val))\n    if s * s == val:\n        if (s - 1) % 2 == 0:\n            k_candidate = (s - 1) // 2\n            if k_candidate > 1:\n                print(\"YES\")\n                return\n\n    # Check for d >= 4\n    # For larger d, k must be small.\n    # If k >= 2, then n = 1 + k + k^2 + ... + k^(d-1) >= 1 + 2 + 2^2 + ... + 2^(d-1) = 2^d - 1.\n    # So, 2^d - 1 <= n => 2^d <= n + 1 => d <= log2(n + 1).\n    # Since n <= 10^18, log2(10^18 + 1) is approximately 18 * log2(10) which is about 18 * 3.32 = 59.79.\n    # So d can go up to around 60.\n    # We can iterate through possible values of d from 4 up to 60.\n\n    for d in range(4, 61):\n        # We are looking for k such that n = (k^d - 1) / (k - 1)\n        # n * (k - 1) = k^d - 1\n        # This is equivalent to finding the root of f(x) = x^d - n*x + n - 1 = 0\n        # We can use binary search for k.\n        # The minimum k is 2.\n        # The maximum k:\n        # If d=4, n = 1 + k + k^2 + k^3. If k=10^6, k^3 approx 10^18. So k can be up to 10^6.\n        # If d=60, n approx k^59. If k=2, n approx 2^59. If k=3, n approx 3^59 (too large).\n        # So for larger d, k must be very small (e.g., k=2).\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Upper bound for k. If n = k^(d-1), then k = n^(1/(d-1)). Add a small margin.\n        \n        # A tighter upper bound for k:\n        # k^(d-1) < n => k < n^(1/(d-1))\n        # Since d >= 4, d-1 >= 3.\n        # Max k for d=4: n^(1/3) approx (10^18)^(1/3) = 10^6.\n        # Max k for d=60: n^(1/59) approx (10^18)^(1/59) is very small.\n        # So high can be set to min(10^6 + 2, int(n**(1/(d-1))) + 2).\n        # A simpler approach is to set high to a fixed large enough value, say 10^6 + 2,\n        # and check for overflow in the sum calculation.\n        \n        # Max possible k is around 10^6 (for d=4).\n        # We can safely use high = 10^6 + 7 (or even 2*10^6 to be safe).\n        # For d=60, k=2 is the only possible value for n up to 10^18.\n        # 2^60 - 1 is already > 10^18.\n        # So if d is large enough that 2^d - 1 > n, we can stop.\n        # Specifically, if 2^d - 1 > n, then for any k >= 2, the sum will be > n.\n        # We can precompute 2^d - 1 and stop if it exceeds n.\n        # For d=60, 2^60 - 1 is already too large.\n        \n        # Let's refine the upper bound for k.\n        # k^d - 1 / k - 1 = n\n        # k^d - 1 = n(k-1)\n        # k^d - nk + n - 1 = 0\n        # If k is large, k^d dominates.\n        # If k=2, 2^d - 1 = n. Max d for k=2 is when 2^d - 1 <= 10^18. 2^d <= 10^18+1. d <= 60.\n        # So d from 4 to 60 is sufficient.\n        \n        # For a fixed d, we need to find k.\n        # The sum S = 1 + k + k^2 + ... + k^(d-1)\n        # S is strictly increasing with k.\n        \n        # Binary search for k:\n        # Max k to check is around 10^6 (for d=4).\n        # A safe upper bound for k is 2 * 10^6.\n        # low = 2, high = 2 * 10^6\n        \n        # However, for d > 60, k=2 will already exceed n.\n        # For d = 60, k=2: (2^60 - 1) / (2-1) = 2^60 - 1 which is approx 1.15 * 10^18. This is a valid check.\n        # For d = 61, k=2: (2^61 - 1) / (2-1) = 2^61 - 1 which is approx 2.3 * 10^18, exceeds 10^18.\n        # So d can go up to 60.\n        \n        # For d = 4, k can be up to 10^6.\n        # For d = 5, k can be up to 10^4.\n        # For d = 6, k can be up to 10^3.\n        # For d = 7, k can be up to 10^2.\n        # For d = 8, k can be up to 10^2.\n        # ...\n        # For d = 60, k must be 2.\n        \n        # Let's set high to a reasonable value based on n.\n        # k^(d-1) < n => k < n^(1/(d-1)).\n        # For d=4, k < (10^18)^(1/3) = 10^6.\n        # So high = 10^6 + 7 is a good upper bound for k.\n        \n        low_k = 2\n        high_k = int(n**(1/(d-1))) + 2 # This is a tight upper bound for k.\n        if d == 4: # Special case for d=4, k can be up to 10^6.\n            high_k = min(high_k, 10**6 + 7)\n        else: # For d > 4, k will be smaller.\n            high_k = min(high_k, 2 * 10**6) # A general safe upper bound for k, should be sufficient.\n\n        while low_k <= high_k:\n            mid_k = (low_k + high_k) // 2\n            if mid_k < 2: # Ensure k > 1\n                low_k = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid multiplying if it's the last term\n                    if mid_k > (n + 1) // term: # Check for overflow before multiplication\n                        overflow = True\n                        break\n                    term *= mid_k\n            \n            if overflow or current_sum > n:\n                high_k = mid_k - 1\n            elif current_sum < n:\n                low_k = mid_k + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 2700,
        "thoughts_token_count": 0
    }
}