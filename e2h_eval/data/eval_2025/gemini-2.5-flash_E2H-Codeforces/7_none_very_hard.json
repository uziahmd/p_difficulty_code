{
    "start": 1758011307.6224618,
    "end": 1758011327.6410558,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    if n < 7:\n        sys.stdout.write(\"NO\\n\")\n        return\n\n    # Case 1: m = 2 (2 layers of expansion)\n    # Total vertices = 1 (center) + k (first layer) + k * k (second layer)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4 * (1 - n))) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    # We need 4n - 3 to be a perfect square, say s^2\n    # s = sqrt(4n - 3)\n    # And s must be odd, because s = 2k + 1, so s % 2 == 1\n    # Also, k > 1 implies (s-1)/2 > 1, so s-1 > 2, s > 3.\n    \n    s_squared = 4 * n - 3\n    \n    # Check if s_squared is a perfect square\n    s = int(s_squared**0.5)\n    if s * s == s_squared:\n        # Check if s is odd and s > 3\n        if s % 2 == 1 and s > 3:\n            sys.stdout.write(\"YES\\n\")\n            return\n\n    # Case 2: m > 2 (more than 2 layers of expansion)\n    # Total vertices = 1 + k + k^2 + ... + k^(m-1)\n    # This is a geometric series sum: (k^m - 1) / (k - 1)\n    # We need n = (k^m - 1) / (k - 1) for some k > 1 and m > 2.\n    \n    # For a fixed m (number of layers), we are looking for k such that:\n    # n * (k - 1) = k^m - 1\n    # n*k - n = k^m - 1\n    # k^m - n*k + (n - 1) = 0\n    \n    # We can iterate on m. What is the maximum possible m?\n    # Smallest k is 2. If k=2, n = 2^m - 1.\n    # So 2^m - 1 <= 10^18 => 2^m <= 10^18 + 1\n    # m <= log2(10^18 + 1) approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79\n    # So m can go up to about 60.\n    \n    # We iterate m from 3 up to 60.\n    for m in range(3, 61):\n        # For a fixed m, we need to find if there exists an integer k > 1\n        # such that n = (k^m - 1) / (k - 1).\n        # This is equivalent to k^m - n*k + (n - 1) = 0.\n        \n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k:\n        # If k is large, k^(m-1) < n. So k < n^(1/(m-1)).\n        # Since m >= 3, m-1 >= 2.\n        # Max k for m=3: k^2 < n => k < sqrt(n) approx sqrt(10^18) = 10^9.\n        # Max k for m=60: k^59 < n => k < n^(1/59) approx (10^18)^(1/59) approx 10^(18/59) approx 10^0.3 = 2.\n        # So upper bound for k is around 10^9.\n        \n        low = 2\n        high = int(n**(1/(m-1))) + 2 # Add a small buffer just in case, e.g., for n=7, m=3, k=2, high = 7^(1/2)+2 = 2+2=4\n        # A more precise upper bound: if k^(m-1) > n, then sum > n.\n        # For k=2, sum = 2^m - 1. If 2^m - 1 > n, then no k can work.\n        # So we can cap high at n + 1 (or even n).\n        # But n^(1/(m-1)) is a tighter bound.\n        \n        # If m=3, high can be up to 10^9.\n        # If m=60, high can be up to 2.\n        \n        # Let's refine high.\n        # The sum is 1 + k + k^2 + ... + k^(m-1).\n        # Smallest sum for k=2 is 2^m - 1. If n < 2^m - 1, then k cannot be 2.\n        # The maximum possible k for a given n and m is when k^(m-1) is roughly n.\n        # So k is roughly n^(1/(m-1)).\n        # For m=3, k approx n^(1/2) = 10^9.\n        # For m=60, k approx n^(1/59) = (10^18)^(1/59) approx 10^0.3 = 2.\n        # So high can be up to 10^9.\n        \n        # The function f(k) = (k^m - 1) / (k - 1) is strictly increasing for k > 1.\n        # We need to find k such that f(k) = n.\n        \n        # Binary search range for k\n        # Max value of k for m=3 is roughly sqrt(10^18) = 10^9.\n        # Max value of k for m=60 is 2.\n        # So a safe upper bound for k is 10^9 + 7 (or some other small constant).\n        # Or more accurately, if k >= 2, then k^(m-1) <= n, so k <= n^(1/(m-1)).\n        # high = int(n**(1.0/(m-1))) + 2\n        # This high is good. But we need to be careful with floating point precision for n**(1.0/(m-1)).\n        # A safer upper bound for k is just n. If k > n, then k^m - 1 > n(k-1) for m >= 2.\n        # So k <= n is a safe upper bound.\n        # But it's too large. Let's try high = 10**9 + 7.\n        # This is safe because for m >= 3, k^2 < n, so k < sqrt(n) <= sqrt(10^18) = 10^9.\n        # So 10^9 + 7 is a good upper bound.\n        \n        high = 10**9 + 7 # This is a safe upper bound for k for m >= 3\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n            \n            current_sum = 0\n            term = 1\n            possible_overflow = False\n            \n            # Calculate 1 + mid + mid^2 + ... + mid^(m-1)\n            for _ in range(m):\n                current_sum += term\n                if _ < m - 1: # Avoid overflow for the last multiplication\n                    # Check for overflow before multiplying\n                    # term * mid could exceed n, or even 10^18\n                    # If mid > 1, term will grow.\n                    # If term > n / mid, then term * mid > n.\n                    # Since n can be 10^18, and mid can be 10^9, term can be 10^9.\n                    # term * mid could be 10^18.\n                    # If current_sum already exceeds n, we can stop.\n                    if current_sum > n:\n                        possible_overflow = True\n                        break\n                    \n                    if mid > 0 and term > (2 * n + 1) // mid: # Using 2*n+1 as a safe upper bound for term to avoid overflow, as sum can exceed n\n                        possible_overflow = True\n                        break\n                    term *= mid\n            \n            if possible_overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                sys.stdout.write(\"YES\\n\")\n                return\n\n    sys.stdout.write(\"NO\\n\")\n\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n\n    if n < 7:\n        sys.stdout.write(\"NO\\n\")\n        return\n\n    # Case 1: m = 2 (2 layers of expansion)\n    # Total vertices = 1 (center) + k (first layer) + k * k (second layer)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4 * (1 - n))) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    # We need 4n - 3 to be a perfect square, say s^2\n    # s = sqrt(4n - 3)\n    # And s must be odd, because s = 2k + 1, so s % 2 == 1\n    # Also, k > 1 implies (s-1)/2 > 1, so s-1 > 2, s > 3.\n    \n    s_squared = 4 * n - 3\n    \n    # Check if s_squared is a perfect square\n    s = int(s_squared**0.5)\n    if s * s == s_squared:\n        # Check if s is odd and s > 3\n        if s % 2 == 1 and s > 3:\n            sys.stdout.write(\"YES\\n\")\n            return\n\n    # Case 2: m > 2 (more than 2 layers of expansion)\n    # Total vertices = 1 + k + k^2 + ... + k^(m-1)\n    # This is a geometric series sum: (k^m - 1) / (k - 1)\n    # We need n = (k^m - 1) / (k - 1) for some k > 1 and m > 2.\n    \n    # For a fixed m (number of layers), we are looking for k such that:\n    # n * (k - 1) = k^m - 1\n    # n*k - n = k^m - 1\n    # k^m - n*k + (n - 1) = 0\n    \n    # We can iterate on m. What is the maximum possible m?\n    # Smallest k is 2. If k=2, n = 2^m - 1.\n    # So 2^m - 1 <= 10^18 => 2^m <= 10^18 + 1\n    # m <= log2(10^18 + 1) approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79\n    # So m can go up to about 60.\n    \n    # We iterate m from 3 up to 60.\n    for m in range(3, 61):\n        # For a fixed m, we need to find if there exists an integer k > 1\n        # such that n = (k^m - 1) / (k - 1).\n        # This is equivalent to k^m - n*k + (n - 1) = 0.\n        \n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k:\n        # If k is large, k^(m-1) < n. So k < n^(1/(m-1)).\n        # Since m >= 3, m-1 >= 2.\n        # Max k for m=3: k^2 < n => k < sqrt(n) approx sqrt(10^18) = 10^9.\n        # Max k for m=60: k^59 < n => k < n^(1/59) approx (10^18)^(1/59) approx 10^(18/59) approx 10^0.3 = 2.\n        # So upper bound for k is around 10^9.\n        \n        low = 2\n        high = int(n**(1/(m-1))) + 2 # Add a small buffer just in case, e.g., for n=7, m=3, k=2, high = 7^(1/2)+2 = 2+2=4\n        # A more precise upper bound: if k^(m-1) > n, then sum > n.\n        # For k=2, sum = 2^m - 1. If 2^m - 1 > n, then no k can work.\n        # So we can cap high at n + 1 (or even n).\n        # But n^(1/(m-1)) is a tighter bound.\n        \n        # If m=3, high can be up to 10^9.\n        # If m=60, high can be up to 2.\n        \n        # Let's refine high.\n        # The sum is 1 + k + k^2 + ... + k^(m-1).\n        # Smallest sum for k=2 is 2^m - 1. If n < 2^m - 1, then k cannot be 2.\n        # The maximum possible k for a given n and m is when k^(m-1) is roughly n.\n        # So k is roughly n^(1/(m-1)).\n        # For m=3, k approx n^(1/2) = 10^9.\n        # For m=60, k approx n^(1/59) = (10^18)^(1/59) approx 10^0.3 = 2.\n        # So high can be up to 10^9.\n        \n        # The function f(k) = (k^m - 1) / (k - 1) is strictly increasing for k > 1.\n        # We need to find k such that f(k) = n.\n        \n        # Binary search range for k\n        # Max value of k for m=3 is roughly sqrt(10^18) = 10^9.\n        # Max value of k for m=60 is 2.\n        # So a safe upper bound for k is 10^9 + 7 (or some other small constant).\n        # Or more accurately, if k >= 2, then k^(m-1) <= n, so k <= n^(1/(m-1)).\n        # high = int(n**(1.0/(m-1))) + 2\n        # This high is good. But we need to be careful with floating point precision for n**(1.0/(m-1)).\n        # A safer upper bound for k is just n. If k > n, then k^m - 1 > n(k-1) for m >= 2.\n        # So k <= n is a safe upper bound.\n        # But it's too large. Let's try high = 10**9 + 7.\n        # This is safe because for m >= 3, k^2 < n, so k < sqrt(n) <= sqrt(10^18) = 10^9.\n        # So 10^9 + 7 is a good upper bound.\n        \n        high = 10**9 + 7 # This is a safe upper bound for k for m >= 3\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n            \n            current_sum = 0\n            term = 1\n            possible_overflow = False\n            \n            # Calculate 1 + mid + mid^2 + ... + mid^(m-1)\n            for _ in range(m):\n                current_sum += term\n                if _ < m - 1: # Avoid overflow for the last multiplication\n                    # Check for overflow before multiplying\n                    # term * mid could exceed n, or even 10^18\n                    # If mid > 1, term will grow.\n                    # If term > n / mid, then term * mid > n.\n                    # Since n can be 10^18, and mid can be 10^9, term can be 10^9.\n                    # term * mid could be 10^18.\n                    # If current_sum already exceeds n, we can stop.\n                    if current_sum > n:\n                        possible_overflow = True\n                        break\n                    \n                    if mid > 0 and term > (2 * n + 1) // mid: # Using 2*n+1 as a safe upper bound for term to avoid overflow, as sum can exceed n\n                        possible_overflow = True\n                        break\n                    term *= mid\n            \n            if possible_overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                sys.stdout.write(\"YES\\n\")\n                return\n\n    sys.stdout.write(\"NO\\n\")\n\n\nnum_test_cases = int(sys.stdin.readline())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 2175,
        "thoughts_token_count": 0
    }
}