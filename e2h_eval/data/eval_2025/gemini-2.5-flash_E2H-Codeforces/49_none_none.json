{
    "start": 1758293722.8079557,
    "end": 1758293755.4936597,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if m == 0:\n        sys.stdout.write(\"YES\\n\")\n        sys.stdout.write(\"1 \" * n + \"\\n\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    \n    def get_prime_factors(num):\n        factors = {}\n        d = 2\n        temp = num\n        while d * d <= temp:\n            while temp % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                temp //= d\n            d += 1\n        if temp > 1:\n            factors[temp] = factors.get(temp, 0) + 1\n        return factors\n\n    all_primes = set()\n    for _, _, g, l in edges:\n        for p in get_prime_factors(g):\n            all_primes.add(p)\n        for p in get_prime_factors(l):\n            all_primes.add(p)\n\n    def check_valid(current_ans):\n        for u, v, g, l in edges:\n            if current_ans[u] == 0 or current_ans[v] == 0:\n                continue\n            \n            # Check GCD\n            val_g = 0\n            if current_ans[u] % g != 0 or current_ans[v] % g != 0:\n                return False\n\n            # Check LCM\n            if (current_ans[u] * current_ans[v]) % g != 0: # This is a common pitfall. (a*b)/gcd(a,b) = lcm(a,b)\n                return False\n            \n            calculated_lcm = (current_ans[u] // g) * current_ans[v]\n            if calculated_lcm != l:\n                return False\n            \n        return True\n\n    def dfs(u, p_idx):\n        if p_idx == len(all_primes_list):\n            return check_valid(ans)\n\n        prime = all_primes_list[p_idx]\n        \n        # Try to assign powers for current prime\n        \n        # Collect all required powers for this prime\n        # For each edge (u,v,g,l):\n        # min(pow(u,p), pow(v,p)) = pow(g,p)\n        # max(pow(u,p), pow(v,p)) = pow(l,p)\n        # This implies pow(u,p) + pow(v,p) = pow(g,p) + pow(l,p)\n        \n        # For each node, we need to determine the exponent of 'prime'\n        # Let exp[i] be the exponent of 'prime' in ans[i]\n        # For each edge (u,v,g,l):\n        # min(exp[u], exp[v]) = pow(g,p)\n        # max(exp[u], exp[v]) = pow(l,p)\n        \n        # For each node, what is the maximum possible exponent?\n        # It's the maximum 'l' exponent for any edge connected to it.\n        # What is the minimum possible exponent?\n        # It's the minimum 'g' exponent for any edge connected to it.\n        \n        # The actual value for ans[i] is 0 initially.\n        # We build it up prime by prime.\n        # So ans[i] will store the current partial product.\n        \n        # For each node, we need to determine its exponent for 'prime'.\n        # We can iterate through all possible exponents for each node.\n        # This is too slow.\n        \n        # Instead, let's process the exponents for each prime for all nodes simultaneously.\n        \n        # For each node i, we need to find exp_i such that\n        # for all (i, j, g, l) edges:\n        # min(exp_i, exp_j) == exp_g\n        # max(exp_i, exp_j) == exp_l\n        \n        # This implies that exp_i must be >= exp_g for all (i,j,g,l)\n        # And exp_i must be <= exp_l for all (i,j,g,l)\n        \n        # Let's try to assign exponents for 'prime' for all nodes.\n        \n        node_exponents = [-1] * (n + 1) # -1 means not yet assigned\n        \n        q = []\n        \n        # Initialize some nodes with a fixed exponent if possible\n        for i in range(1, n + 1):\n            if not adj[i]: # Isolated node, can pick any valid exponent. Let's pick 0 for now (ans[i] = 1)\n                node_exponents[i] = 0\n                \n        # If a node is connected to an edge (u,v,g,l) such that exp_g = exp_l, then exp_u and exp_v must both be exp_g\n        # This is a good starting point.\n        \n        for u, v, g, l in edges:\n            exp_g = get_prime_factors(g).get(prime, 0)\n            exp_l = get_prime_factors(l).get(prime, 0)\n            \n            if exp_g == exp_l:\n                if node_exponents[u] == -1:\n                    node_exponents[u] = exp_g\n                    q.append(u)\n                elif node_exponents[u] != exp_g:\n                    return False # Conflict\n                \n                if node_exponents[v] == -1:\n                    node_exponents[v] = exp_g\n                    q.append(v)\n                elif node_exponents[v] != exp_g:\n                    return False # Conflict\n        \n        # BFS to propagate exponents\n        head = 0\n        while head < len(q):\n            curr_node = q[head]\n            head += 1\n            \n            for neighbor, g_val, l_val in adj[curr_node]:\n                exp_g = get_prime_factors(g_val).get(prime, 0)\n                exp_l = get_prime_factors(l_val).get(prime, 0)\n                \n                # We know node_exponents[curr_node]\n                # We need to determine node_exponents[neighbor]\n                \n                # min(node_exponents[curr_node], node_exponents[neighbor]) == exp_g\n                # max(node_exponents[curr_node], node_exponents[neighbor]) == exp_l\n                \n                if node_exponents[curr_node] < exp_g or node_exponents[curr_node] > exp_l:\n                    return False # Current node's exponent is inconsistent with this edge\n                \n                if node_exponents[curr_node] == exp_g:\n                    # Then node_exponents[neighbor] must be exp_l\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_l\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_l:\n                        return False # Conflict\n                elif node_exponents[curr_node] == exp_l:\n                    # Then node_exponents[neighbor] must be exp_g\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_g\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_g:\n                        return False # Conflict\n                else: # node_exponents[curr_node] is strictly between exp_g and exp_l\n                    # This means this is impossible, as one must be min and other max.\n                    return False\n        \n        # Handle disconnected components or nodes not fixed by propagation\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1:\n                # This node's exponent for 'prime' is not yet determined.\n                # It means it's part of a component where all edges have exp_g < exp_l.\n                # We need to pick one of exp_g or exp_l for each node.\n                # For example, if we have (u,v,g,l) where exp_g < exp_l, then (exp_u, exp_v) must be (exp_g, exp_l) or (exp_l, exp_g).\n                \n                # This suggests a 2-coloring problem.\n                \n                # Find an unvisited node in the current component\n                start_node = -1\n                for j in range(1, n + 1):\n                    if node_exponents[j] == -1:\n                        start_node = j\n                        break\n                \n                if start_node != -1:\n                    # Start a new BFS/DFS for this component\n                    # Assign start_node to exp_g (or exp_l, try both)\n                    \n                    # Option 1: start_node gets exp_g\n                    temp_node_exponents_1 = list(node_exponents)\n                    temp_node_exponents_1[start_node] = get_prime_factors(edges[0][2]).get(prime, 0) # Use first edge's g for a guess\n                    \n                    q_comp = [start_node]\n                    head_comp = 0\n                    \n                    valid_option_1 = True\n                    while head_comp < len(q_comp):\n                        curr_node = q_comp[head_comp]\n                        head_comp += 1\n                        \n                        for neighbor, g_val, l_val in adj[curr_node]:\n                            exp_g = get_prime_factors(g_val).get(prime, 0)\n                            exp_l = get_prime_factors(l_val).get(prime, 0)\n                            \n                            if temp_node_exponents_1[curr_node] < exp_g or temp_node_exponents_1[curr_node] > exp_l:\n                                valid_option_1 = False\n                                break\n                            \n                            if temp_node_exponents_1[curr_node] == exp_g:\n                                if temp_node_exponents_1[neighbor] == -1:\n                                    temp_node_exponents_1[neighbor] = exp_l\n                                    q_comp.append(neighbor)\n                                elif temp_node_exponents_1[neighbor] != exp_l:\n                                    valid_option_1 = False\n                                    break\n                            elif temp_node_exponents_1[curr_node] == exp_l:\n                                if temp_node_exponents_1[neighbor] == -1:\n                                    temp_node_exponents_1[neighbor] = exp_g\n                                    q_comp.append(neighbor)\n                                elif temp_node_exponents_1[neighbor] != exp_g:\n                                    valid_option_1 = False\n                                    break\n                            else:\n                                valid_option_1 = False\n                                break\n                        if not valid_option_1:\n                            break\n                    \n                    if valid_option_1:\n                        for j in range(1, n + 1):\n                            if temp_node_exponents_1[j] != -1:\n                                node_exponents[j] = temp_node_exponents_1[j]\n                    else:\n                        # Option 2: start_node gets exp_l\n                        temp_node_exponents_2 = list(node_exponents)\n                        temp_node_exponents_2[start_node] = get_prime_factors(edges[0][3]).get(prime, 0) # Use first edge's l for a guess\n                        \n                        q_comp = [start_node]\n                        head_comp = 0\n                        \n                        valid_option_2 = True\n                        while head_comp < len(q_comp):\n                            curr_node = q_comp[head_comp]\n                            head_comp += 1\n                            \n                            for neighbor, g_val, l_val in adj[curr_node]:\n                                exp_g = get_prime_factors(g_val).get(prime, 0)\n                                exp_l = get_prime_factors(l_val).get(prime, 0)\n                                \n                                if temp_node_exponents_2[curr_node] < exp_g or temp_node_exponents_2[curr_node] > exp_l:\n                                    valid_option_2 = False\n                                    break\n                                \n                                if temp_node_exponents_2[curr_node] == exp_g:\n                                    if temp_node_exponents_2[neighbor] == -1:\n                                        temp_node_exponents_2[neighbor] = exp_l\n                                        q_comp.append(neighbor)\n                                    elif temp_node_exponents_2[neighbor] != exp_l:\n                                        valid_option_2 = False\n                                        break\n                                elif temp_node_exponents_2[curr_node] == exp_l:\n                                    if temp_node_exponents_2[neighbor] == -1:\n                                        temp_node_exponents_2[neighbor] = exp_g\n                                        q_comp.append(neighbor)\n                                    elif temp_node_exponents_2[neighbor] != exp_g:\n                                        valid_option_2 = False\n                                        break\n                                else:\n                                    valid_option_2 = False\n                                    break\n                            if not valid_option_2:\n                                break\n                        \n                        if valid_option_2:\n                            for j in range(1, n + 1):\n                                if temp_node_exponents_2[j] != -1:\n                                    node_exponents[j] = temp_node_exponents_2[j]\n                        else:\n                            return False # Neither option worked\n        \n        # Now all node_exponents should be filled.\n        # Check if any node is still -1 (shouldn't happen if graph is connected, or if isolated nodes are handled)\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1: # Isolated node, assign 0 exponent (value 1)\n                node_exponents[i] = 0\n                \n            # Update ans with this prime's contribution\n            if ans[i] == 0:\n                ans[i] = 1\n            ans[i] *= (prime ** node_exponents[i])\n            \n        # Recurse for next prime\n        if dfs(u, p_idx + 1):\n            return True\n        \n        # Backtrack (undo changes for this prime)\n        for i in range(1, n + 1):\n            if ans[i] % (prime ** node_exponents[i]) == 0:\n                ans[i] //= (prime ** node_exponents[i])\n            else: # Should not happen if logic is correct\n                return False \n                \n        return False\n    \n    # Precompute all primes and their max exponents\n    all_primes_list = sorted(list(all_primes))\n    \n    # Initialize ans values to 1\n    for i in range(1, n + 1):\n        ans[i] = 1\n\n    # For each prime, iterate through nodes and determine their exponent\n    for prime in all_primes_list:\n        node_exponents = [-1] * (n + 1) # -1 means not yet assigned\n        \n        q = []\n        \n        # Initialize nodes with a fixed exponent if possible\n        for i in range(1, n + 1):\n            if not adj[i]: # Isolated node\n                node_exponents[i] = 0\n                \n        for u, v, g, l in edges:\n            exp_g = get_prime_factors(g).get(prime, 0)\n            exp_l = get_prime_factors(l).get(prime, 0)\n            \n            if exp_g == exp_l:\n                if node_exponents[u] == -1:\n                    node_exponents[u] = exp_g\n                    q.append(u)\n                elif node_exponents[u] != exp_g:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n                \n                if node_exponents[v] == -1:\n                    node_exponents[v] = exp_g\n                    q.append(v)\n                elif node_exponents[v] != exp_g:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n        \n        head = 0\n        while head < len(q):\n            curr_node = q[head]\n            head += 1\n            \n            for neighbor, g_val, l_val in adj[curr_node]:\n                exp_g = get_prime_factors(g_val).get(prime, 0)\n                exp_l = get_prime_factors(l_val).get(prime, 0)\n                \n                if node_exponents[curr_node] < exp_g or node_exponents[curr_node] > exp_l:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n                \n                if node_exponents[curr_node] == exp_g:\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_l\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_l:\n                        sys.stdout.write(\"NO\\n\")\n                        return\n                elif node_exponents[curr_node] == exp_l:\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_g\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_g:\n                        sys.stdout.write(\"NO\\n\")\n                        return\n                else:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n        \n        # Handle remaining components (2-coloring)\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1:\n                # Find an edge connected to this component to get exp_g, exp_l values\n                # If a component is completely isolated from fixed nodes, we can pick a base.\n                # For any edge (u,v,g,l) in this component, exp_g < exp_l.\n                # We need to assign exp_u and exp_v as exp_g and exp_l (or vice versa).\n                # This is a 2-coloring problem.\n                \n                component_nodes = []\n                comp_q = [i]\n                comp_head = 0\n                temp_node_exponents = list(node_exponents)\n                \n                # Try assigning exp_g to the starting node\n                \n                # Find an edge in this component to get exp_g, exp_l\n                found_edge_exp = False\n                for u, v, g, l in edges:\n                    if (u == i or v == i) and node_exponents[u] == -1 and node_exponents[v] == -1:\n                        temp_exp_g = get_prime_factors(g).get(prime, 0)\n                        temp_exp_l = get_prime_factors(l).get(prime, 0)\n                        if temp_exp_g < temp_exp_l: # Only if exp_g != exp_l\n                            temp_node_exponents[i] = temp_exp_g\n                            found_edge_exp = True\n                            break\n                \n                if not found_edge_exp: # All edges in this component have exp_g == exp_l (already handled) or it's an isolated node\n                    temp_node_exponents[i] = 0 # Default for isolated node\n                \n                while comp_head < len(comp_q):\n                    curr_node = comp_q[comp_head]\n                    comp_head += 1\n                    component_nodes.append(curr_node)\n                    \n                    for neighbor, g_val, l_val in adj[curr_node]:\n                        exp_g = get_prime_factors(g_val).get(prime, 0)\n                        exp_l = get_prime_factors(l_val).get(prime, 0)\n                        \n                        if temp_node_exponents[curr_node] < exp_g or temp_node_exponents[curr_node] > exp_l:\n                            sys.stdout.write(\"NO\\n\")\n                            return\n                        \n                        if temp_node_exponents[curr_node] == exp_g:\n                            if temp_node_exponents[neighbor] == -1:\n                                temp_node_exponents[neighbor] = exp_l\n                                comp_q.append(neighbor)\n                            elif temp_node_exponents[neighbor] != exp_l:\n                                sys.stdout.write(\"NO\\n\")\n                                return\n                        elif temp_node_exponents[curr_node] == exp_l:\n                            if temp_node_exponents[neighbor] == -1:\n                                temp_node_exponents[neighbor] = exp_g\n                                comp_q.append(neighbor)\n                            elif temp_node_exponents[neighbor] != exp_g:\n                                sys.stdout.write(\"NO\\n\")\n                                return\n                        else:\n                            sys.stdout.write(\"NO\\n\")\n                            return\n                \n                # If successful, copy exponents back\n                for node in component_nodes:\n                    node_exponents[node] = temp_node_exponents[node]\n\n        # Final check for any unassigned nodes (should be only isolated nodes)\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1:\n                node_exponents[i] = 0 # Default exponent for isolated nodes\n\n            ans[i] *= (prime ** node_exponents[i])\n\n    # Final validation\n    for u, v, g, l in edges:\n        val_u = ans[u]\n        val_v = ans[v]\n        \n        # Check GCD\n        current_g = 0\n        if val_u == 0 or val_v == 0: # Should not happen\n            sys.stdout.write(\"NO\\n\")\n            return\n\n        def calculate_gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        \n        def calculate_lcm(a, b):\n            if a == 0 or b == 0: return 0\n            return (a * b) // calculate_gcd(a, b)\n\n        if calculate_gcd(val_u, val_v) != g:\n            sys.stdout.write(\"NO\\n\")\n            return\n        \n        if calculate_lcm(val_u, val_v) != l:\n            sys.stdout.write(\"NO\\n\")\n            return\n\n    sys.stdout.write(\"YES\\n\")\n    sys.stdout.write(\" \".join(map(str, ans[1:])) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if m == 0:\n        sys.stdout.write(\"YES\\n\")\n        sys.stdout.write(\"1 \" * n + \"\\n\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    \n    def get_prime_factors(num):\n        factors = {}\n        d = 2\n        temp = num\n        while d * d <= temp:\n            while temp % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                temp //= d\n            d += 1\n        if temp > 1:\n            factors[temp] = factors.get(temp, 0) + 1\n        return factors\n\n    all_primes = set()\n    for _, _, g, l in edges:\n        for p in get_prime_factors(g):\n            all_primes.add(p)\n        for p in get_prime_factors(l):\n            all_primes.add(p)\n\n    def check_valid(current_ans):\n        for u, v, g, l in edges:\n            if current_ans[u] == 0 or current_ans[v] == 0:\n                continue\n            \n            # Check GCD\n            val_g = 0\n            if current_ans[u] % g != 0 or current_ans[v] % g != 0:\n                return False\n\n            # Check LCM\n            if (current_ans[u] * current_ans[v]) % g != 0: # This is a common pitfall. (a*b)/gcd(a,b) = lcm(a,b)\n                return False\n            \n            calculated_lcm = (current_ans[u] // g) * current_ans[v]\n            if calculated_lcm != l:\n                return False\n            \n        return True\n\n    def dfs(u, p_idx):\n        if p_idx == len(all_primes_list):\n            return check_valid(ans)\n\n        prime = all_primes_list[p_idx]\n        \n        # Try to assign powers for current prime\n        \n        # Collect all required powers for this prime\n        # For each edge (u,v,g,l):\n        # min(pow(u,p), pow(v,p)) = pow(g,p)\n        # max(pow(u,p), pow(v,p)) = pow(l,p)\n        # This implies pow(u,p) + pow(v,p) = pow(g,p) + pow(l,p)\n        \n        # For each node, we need to determine the exponent of 'prime'\n        # Let exp[i] be the exponent of 'prime' in ans[i]\n        # For each edge (u,v,g,l):\n        # min(exp[u], exp[v]) = pow(g,p)\n        # max(exp[u], exp[v]) = pow(l,p)\n        \n        # For each node, what is the maximum possible exponent?\n        # It's the maximum 'l' exponent for any edge connected to it.\n        # What is the minimum possible exponent?\n        # It's the minimum 'g' exponent for any edge connected to it.\n        \n        # The actual value for ans[i] is 0 initially.\n        # We build it up prime by prime.\n        # So ans[i] will store the current partial product.\n        \n        # For each node, we need to determine its exponent for 'prime'.\n        # We can iterate through all possible exponents for each node.\n        # This is too slow.\n        \n        # Instead, let's process the exponents for each prime for all nodes simultaneously.\n        \n        # For each node i, we need to find exp_i such that\n        # for all (i, j, g, l) edges:\n        # min(exp_i, exp_j) == exp_g\n        # max(exp_i, exp_j) == exp_l\n        \n        # This implies that exp_i must be >= exp_g for all (i,j,g,l)\n        # And exp_i must be <= exp_l for all (i,j,g,l)\n        \n        # Let's try to assign exponents for 'prime' for all nodes.\n        \n        node_exponents = [-1] * (n + 1) # -1 means not yet assigned\n        \n        q = []\n        \n        # Initialize some nodes with a fixed exponent if possible\n        for i in range(1, n + 1):\n            if not adj[i]: # Isolated node, can pick any valid exponent. Let's pick 0 for now (ans[i] = 1)\n                node_exponents[i] = 0\n                \n        # If a node is connected to an edge (u,v,g,l) such that exp_g = exp_l, then exp_u and exp_v must both be exp_g\n        # This is a good starting point.\n        \n        for u, v, g, l in edges:\n            exp_g = get_prime_factors(g).get(prime, 0)\n            exp_l = get_prime_factors(l).get(prime, 0)\n            \n            if exp_g == exp_l:\n                if node_exponents[u] == -1:\n                    node_exponents[u] = exp_g\n                    q.append(u)\n                elif node_exponents[u] != exp_g:\n                    return False # Conflict\n                \n                if node_exponents[v] == -1:\n                    node_exponents[v] = exp_g\n                    q.append(v)\n                elif node_exponents[v] != exp_g:\n                    return False # Conflict\n        \n        # BFS to propagate exponents\n        head = 0\n        while head < len(q):\n            curr_node = q[head]\n            head += 1\n            \n            for neighbor, g_val, l_val in adj[curr_node]:\n                exp_g = get_prime_factors(g_val).get(prime, 0)\n                exp_l = get_prime_factors(l_val).get(prime, 0)\n                \n                # We know node_exponents[curr_node]\n                # We need to determine node_exponents[neighbor]\n                \n                # min(node_exponents[curr_node], node_exponents[neighbor]) == exp_g\n                # max(node_exponents[curr_node], node_exponents[neighbor]) == exp_l\n                \n                if node_exponents[curr_node] < exp_g or node_exponents[curr_node] > exp_l:\n                    return False # Current node's exponent is inconsistent with this edge\n                \n                if node_exponents[curr_node] == exp_g:\n                    # Then node_exponents[neighbor] must be exp_l\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_l\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_l:\n                        return False # Conflict\n                elif node_exponents[curr_node] == exp_l:\n                    # Then node_exponents[neighbor] must be exp_g\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_g\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_g:\n                        return False # Conflict\n                else: # node_exponents[curr_node] is strictly between exp_g and exp_l\n                    # This means this is impossible, as one must be min and other max.\n                    return False\n        \n        # Handle disconnected components or nodes not fixed by propagation\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1:\n                # This node's exponent for 'prime' is not yet determined.\n                # It means it's part of a component where all edges have exp_g < exp_l.\n                # We need to pick one of exp_g or exp_l for each node.\n                # For example, if we have (u,v,g,l) where exp_g < exp_l, then (exp_u, exp_v) must be (exp_g, exp_l) or (exp_l, exp_g).\n                \n                # This suggests a 2-coloring problem.\n                \n                # Find an unvisited node in the current component\n                start_node = -1\n                for j in range(1, n + 1):\n                    if node_exponents[j] == -1:\n                        start_node = j\n                        break\n                \n                if start_node != -1:\n                    # Start a new BFS/DFS for this component\n                    # Assign start_node to exp_g (or exp_l, try both)\n                    \n                    # Option 1: start_node gets exp_g\n                    temp_node_exponents_1 = list(node_exponents)\n                    temp_node_exponents_1[start_node] = get_prime_factors(edges[0][2]).get(prime, 0) # Use first edge's g for a guess\n                    \n                    q_comp = [start_node]\n                    head_comp = 0\n                    \n                    valid_option_1 = True\n                    while head_comp < len(q_comp):\n                        curr_node = q_comp[head_comp]\n                        head_comp += 1\n                        \n                        for neighbor, g_val, l_val in adj[curr_node]:\n                            exp_g = get_prime_factors(g_val).get(prime, 0)\n                            exp_l = get_prime_factors(l_val).get(prime, 0)\n                            \n                            if temp_node_exponents_1[curr_node] < exp_g or temp_node_exponents_1[curr_node] > exp_l:\n                                valid_option_1 = False\n                                break\n                            \n                            if temp_node_exponents_1[curr_node] == exp_g:\n                                if temp_node_exponents_1[neighbor] == -1:\n                                    temp_node_exponents_1[neighbor] = exp_l\n                                    q_comp.append(neighbor)\n                                elif temp_node_exponents_1[neighbor] != exp_l:\n                                    valid_option_1 = False\n                                    break\n                            elif temp_node_exponents_1[curr_node] == exp_l:\n                                if temp_node_exponents_1[neighbor] == -1:\n                                    temp_node_exponents_1[neighbor] = exp_g\n                                    q_comp.append(neighbor)\n                                elif temp_node_exponents_1[neighbor] != exp_g:\n                                    valid_option_1 = False\n                                    break\n                            else:\n                                valid_option_1 = False\n                                break\n                        if not valid_option_1:\n                            break\n                    \n                    if valid_option_1:\n                        for j in range(1, n + 1):\n                            if temp_node_exponents_1[j] != -1:\n                                node_exponents[j] = temp_node_exponents_1[j]\n                    else:\n                        # Option 2: start_node gets exp_l\n                        temp_node_exponents_2 = list(node_exponents)\n                        temp_node_exponents_2[start_node] = get_prime_factors(edges[0][3]).get(prime, 0) # Use first edge's l for a guess\n                        \n                        q_comp = [start_node]\n                        head_comp = 0\n                        \n                        valid_option_2 = True\n                        while head_comp < len(q_comp):\n                            curr_node = q_comp[head_comp]\n                            head_comp += 1\n                            \n                            for neighbor, g_val, l_val in adj[curr_node]:\n                                exp_g = get_prime_factors(g_val).get(prime, 0)\n                                exp_l = get_prime_factors(l_val).get(prime, 0)\n                                \n                                if temp_node_exponents_2[curr_node] < exp_g or temp_node_exponents_2[curr_node] > exp_l:\n                                    valid_option_2 = False\n                                    break\n                                \n                                if temp_node_exponents_2[curr_node] == exp_g:\n                                    if temp_node_exponents_2[neighbor] == -1:\n                                        temp_node_exponents_2[neighbor] = exp_l\n                                        q_comp.append(neighbor)\n                                    elif temp_node_exponents_2[neighbor] != exp_l:\n                                        valid_option_2 = False\n                                        break\n                                elif temp_node_exponents_2[curr_node] == exp_l:\n                                    if temp_node_exponents_2[neighbor] == -1:\n                                        temp_node_exponents_2[neighbor] = exp_g\n                                        q_comp.append(neighbor)\n                                    elif temp_node_exponents_2[neighbor] != exp_g:\n                                        valid_option_2 = False\n                                        break\n                                else:\n                                    valid_option_2 = False\n                                    break\n                            if not valid_option_2:\n                                break\n                        \n                        if valid_option_2:\n                            for j in range(1, n + 1):\n                                if temp_node_exponents_2[j] != -1:\n                                    node_exponents[j] = temp_node_exponents_2[j]\n                        else:\n                            return False # Neither option worked\n        \n        # Now all node_exponents should be filled.\n        # Check if any node is still -1 (shouldn't happen if graph is connected, or if isolated nodes are handled)\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1: # Isolated node, assign 0 exponent (value 1)\n                node_exponents[i] = 0\n                \n            # Update ans with this prime's contribution\n            if ans[i] == 0:\n                ans[i] = 1\n            ans[i] *= (prime ** node_exponents[i])\n            \n        # Recurse for next prime\n        if dfs(u, p_idx + 1):\n            return True\n        \n        # Backtrack (undo changes for this prime)\n        for i in range(1, n + 1):\n            if ans[i] % (prime ** node_exponents[i]) == 0:\n                ans[i] //= (prime ** node_exponents[i])\n            else: # Should not happen if logic is correct\n                return False \n                \n        return False\n    \n    # Precompute all primes and their max exponents\n    all_primes_list = sorted(list(all_primes))\n    \n    # Initialize ans values to 1\n    for i in range(1, n + 1):\n        ans[i] = 1\n\n    # For each prime, iterate through nodes and determine their exponent\n    for prime in all_primes_list:\n        node_exponents = [-1] * (n + 1) # -1 means not yet assigned\n        \n        q = []\n        \n        # Initialize nodes with a fixed exponent if possible\n        for i in range(1, n + 1):\n            if not adj[i]: # Isolated node\n                node_exponents[i] = 0\n                \n        for u, v, g, l in edges:\n            exp_g = get_prime_factors(g).get(prime, 0)\n            exp_l = get_prime_factors(l).get(prime, 0)\n            \n            if exp_g == exp_l:\n                if node_exponents[u] == -1:\n                    node_exponents[u] = exp_g\n                    q.append(u)\n                elif node_exponents[u] != exp_g:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n                \n                if node_exponents[v] == -1:\n                    node_exponents[v] = exp_g\n                    q.append(v)\n                elif node_exponents[v] != exp_g:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n        \n        head = 0\n        while head < len(q):\n            curr_node = q[head]\n            head += 1\n            \n            for neighbor, g_val, l_val in adj[curr_node]:\n                exp_g = get_prime_factors(g_val).get(prime, 0)\n                exp_l = get_prime_factors(l_val).get(prime, 0)\n                \n                if node_exponents[curr_node] < exp_g or node_exponents[curr_node] > exp_l:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n                \n                if node_exponents[curr_node] == exp_g:\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_l\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_l:\n                        sys.stdout.write(\"NO\\n\")\n                        return\n                elif node_exponents[curr_node] == exp_l:\n                    if node_exponents[neighbor] == -1:\n                        node_exponents[neighbor] = exp_g\n                        q.append(neighbor)\n                    elif node_exponents[neighbor] != exp_g:\n                        sys.stdout.write(\"NO\\n\")\n                        return\n                else:\n                    sys.stdout.write(\"NO\\n\")\n                    return\n        \n        # Handle remaining components (2-coloring)\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1:\n                # Find an edge connected to this component to get exp_g, exp_l values\n                # If a component is completely isolated from fixed nodes, we can pick a base.\n                # For any edge (u,v,g,l) in this component, exp_g < exp_l.\n                # We need to assign exp_u and exp_v as exp_g and exp_l (or vice versa).\n                # This is a 2-coloring problem.\n                \n                component_nodes = []\n                comp_q = [i]\n                comp_head = 0\n                temp_node_exponents = list(node_exponents)\n                \n                # Try assigning exp_g to the starting node\n                \n                # Find an edge in this component to get exp_g, exp_l\n                found_edge_exp = False\n                for u, v, g, l in edges:\n                    if (u == i or v == i) and node_exponents[u] == -1 and node_exponents[v] == -1:\n                        temp_exp_g = get_prime_factors(g).get(prime, 0)\n                        temp_exp_l = get_prime_factors(l).get(prime, 0)\n                        if temp_exp_g < temp_exp_l: # Only if exp_g != exp_l\n                            temp_node_exponents[i] = temp_exp_g\n                            found_edge_exp = True\n                            break\n                \n                if not found_edge_exp: # All edges in this component have exp_g == exp_l (already handled) or it's an isolated node\n                    temp_node_exponents[i] = 0 # Default for isolated node\n                \n                while comp_head < len(comp_q):\n                    curr_node = comp_q[comp_head]\n                    comp_head += 1\n                    component_nodes.append(curr_node)\n                    \n                    for neighbor, g_val, l_val in adj[curr_node]:\n                        exp_g = get_prime_factors(g_val).get(prime, 0)\n                        exp_l = get_prime_factors(l_val).get(prime, 0)\n                        \n                        if temp_node_exponents[curr_node] < exp_g or temp_node_exponents[curr_node] > exp_l:\n                            sys.stdout.write(\"NO\\n\")\n                            return\n                        \n                        if temp_node_exponents[curr_node] == exp_g:\n                            if temp_node_exponents[neighbor] == -1:\n                                temp_node_exponents[neighbor] = exp_l\n                                comp_q.append(neighbor)\n                            elif temp_node_exponents[neighbor] != exp_l:\n                                sys.stdout.write(\"NO\\n\")\n                                return\n                        elif temp_node_exponents[curr_node] == exp_l:\n                            if temp_node_exponents[neighbor] == -1:\n                                temp_node_exponents[neighbor] = exp_g\n                                comp_q.append(neighbor)\n                            elif temp_node_exponents[neighbor] != exp_g:\n                                sys.stdout.write(\"NO\\n\")\n                                return\n                        else:\n                            sys.stdout.write(\"NO\\n\")\n                            return\n                \n                # If successful, copy exponents back\n                for node in component_nodes:\n                    node_exponents[node] = temp_node_exponents[node]\n\n        # Final check for any unassigned nodes (should be only isolated nodes)\n        for i in range(1, n + 1):\n            if node_exponents[i] == -1:\n                node_exponents[i] = 0 # Default exponent for isolated nodes\n\n            ans[i] *= (prime ** node_exponents[i])\n\n    # Final validation\n    for u, v, g, l in edges:\n        val_u = ans[u]\n        val_v = ans[v]\n        \n        # Check GCD\n        current_g = 0\n        if val_u == 0 or val_v == 0: # Should not happen\n            sys.stdout.write(\"NO\\n\")\n            return\n\n        def calculate_gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        \n        def calculate_lcm(a, b):\n            if a == 0 or b == 0: return 0\n            return (a * b) // calculate_gcd(a, b)\n\n        if calculate_gcd(val_u, val_v) != g:\n            sys.stdout.write(\"NO\\n\")\n            return\n        \n        if calculate_lcm(val_u, val_v) != l:\n            sys.stdout.write(\"NO\\n\")\n            return\n\n    sys.stdout.write(\"YES\\n\")\n    sys.stdout.write(\" \".join(map(str, ans[1:])) + \"\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 542,
        "completion_token_count": 5538,
        "thoughts_token_count": 0
    }
}