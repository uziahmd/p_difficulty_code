{
    "start": 1758294826.6453865,
    "end": 1758294969.5482213,
    "start-formatted": "2025-09-20 00:13 KST",
    "end-formatted": "2025-09-20 00:16 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Problem-Solving Journey for Finding Odd Cycles in Graphs**\n\nOkay, here's the breakdown of my thought process for this challenging competitive programming problem. The core task is to figure out the minimum number of edges, `t`, needed to add to an undirected graph to create an odd cycle, and the number of ways, `w`, to do so.  The starting graph has no loops or parallel edges.\n\nMy first thought is always to analyze what creates an odd cycle. It's the key to understanding this problem. A fundamental fact in graph theory pops into my head: a graph *contains* an odd cycle if and only if it's *not* bipartite.  If the given graph already contains one, then `t` is trivially 0, and `w` is 1 (do nothing).\n\nSo, the very first thing I need to do is check if the initial graph is already non-bipartite. I figure I can use a Breadth-First Search (BFS) or Depth-First Search (DFS) with 2-coloring. This is a common and efficient method. During the 2-coloring process: If I hit an edge that connects two vertices of the same color, bam, I've found an odd cycle, the base case.\n\nIf the graph *is* bipartite, meaning all connected components can be 2-colored successfully, then I've got more work to do: `t` is greater than 0. I now need to think about how to add edges to break that bipartiteness.  I realize that to create an odd cycle in a bipartite graph by adding edges, I need to connect vertices of the *same* color in the 2-coloring.  Each vertex `v` has a color, `color[v]`.  Valid edges in this bipartite state have opposite colors. To make an odd cycle, I have to add an edge `(u, v)` where `color[u]` equals `color[v]`.\n\nNext, I consider the minimum number of edges, `t`.  I begin with the simplest scenario:\n\n*   **t = 0:**  The graph already has an odd cycle.  I handle this with the initial 2-coloring check I mentioned before. If any component is not 2-colorable, I'm done. `t = 0`, `w = 1`.\n\n*   **t = 1:** The graph *is* bipartite, so I need to add one edge. To make an odd cycle by adding a single edge `(u, v)`, I need `u` and `v` to be in the *same* connected component and have the *same* color in a 2-coloring. Let's say a connected component is `C` and has two sets `S0` and `S1` after 2-coloring. I can add an edge between any two vertices within `S0` or within `S1`. I have to avoid loops and parallel edges.  Since the graph is bipartite, there's no existing edge `(u, v)` where `u` and `v` are in the same color class within a component. So, as long as `u` and `v` are different, adding that one edge won't create a loop or parallel edge. The number of ways I can do this in one component with `k` vertices of one color is `k * (k - 1) / 2`. The total number of ways, `w`, is the sum of these calculations across all connected components and for both color sets.  Let `N0` be the total number of vertices of color 0 across all components, and `N1` be the total number of vertices of color 1.  Then `w = N0 * (N0 - 1) / 2 + N1 * (N1 - 1) / 2`.  This logic works, but only *if* `N0 >= 2` or `N1 >= 2`.  If `w > 0`, that means I can add exactly one edge to create an odd cycle, and thus `t = 1`.\n\nWhat if the above calculation makes `w=0`?  This means I can't find two vertices of the same color in any single component.  This, logically, can only happen if all the connected components are either single vertices or an edge (two vertices, one edge). This might complicate things...\n\n*   **t = 2:**  If `t=1` is impossible, the graph is bipartite, and `N0 < 2` AND `N1 < 2`. This implies that `n` (the total number of vertices) is 0, 1, or 2. It also implies that each component is either an isolated vertex or a single edge. I recall the",
    "response": "The problem asks us to find the minimum number of edges `t` to add to a given undirected graph to form a simple cycle of odd length (consisting of more than one vertex, meaning length at least 3), and `w`, the number of ways to do so. We cannot add loops or parallel edges.\n\nFirst, let's understand what makes a graph have an odd cycle. A graph contains an odd cycle if and only if it is not bipartite.\n\nWe can use a 2-coloring algorithm (BFS or DFS) to check if the graph is bipartite. During the 2-coloring process, we assign colors (say, 0 and 1) to vertices. If we encounter an edge connecting two vertices that already have the same color, we've found an odd cycle. If we successfully color all connected components without such a conflict, the graph is bipartite.\n\nLet's analyze the possible values for `t`:\n\n**Case 0: `t = 0`**\nIf the initial graph already contains an odd cycle, then `t = 0`. There's only one way to achieve this (do nothing), so `w = 1`.\n\nTo check this:\n1. Initialize `colors` array for all vertices to `None` (unvisited).\n2. For each vertex `i` from 1 to `n`:\n   If `colors[i]` is `None`, start a BFS/DFS from `i` to 2-color its connected component.\n   - Assign `colors[i] = 0`. Put `i` in a queue/stack.\n   - While queue/stack is not empty:\n     - Pop `u`.\n     - For each neighbor `v` of `u`:\n       - If `colors[v]` is `None`: assign `colors[v] = 1 - colors[u]` and push `v`.\n       - If `colors[v] == colors[u]`: an odd cycle is found. Return `t=0, w=1`.\n   If the BFS/DFS completes without conflict, the component is bipartite.\n\nIf the loop finishes for all components without finding an odd cycle, the graph is bipartite. We proceed to find `t > 0`.\n\n**Case 1: `t = 1`**\nIf the graph is bipartite, we need to add at least one edge. To form an odd cycle by adding a single edge `(u, v)`, `u` and `v` must satisfy two conditions:\n1. They must be in the same connected component in the original graph.\n2. They must have the same color in a 2-coloring of that component.\nIf these conditions are met, there is an even-length path between `u` and `v`. Adding edge `(u, v)` completes an odd cycle. Since the original graph is bipartite, `u` and `v` cannot already be connected by an edge if they have the same color, so adding `(u,v)` won't create parallel edges. `u` must be different from `v` to avoid a loop.\n\nTo count ways for `t = 1`:\nAfter 2-coloring all components:\nFor each connected component `C_i`, let `cnt0_i` be the number of vertices colored 0 and `cnt1_i` be the number of vertices colored 1.\nThe number of ways to pick two distinct vertices of color 0 within `C_i` is `cnt0_i * (cnt0_i - 1) / 2`.\nThe number of ways to pick two distinct vertices of color 1 within `C_i` is `cnt1_i * (cnt1_i - 1) / 2`.\nSum these up over all components: `W_1 = sum_i (cnt0_i * (cnt0_i - 1) / 2 + cnt1_i * (cnt1_i - 1) / 2)`.\nIf `W_1 > 0`, then `t = 1` and `w = W_1`.\n\n**Case 2: `t = 2`**\nIf `t=1` is not possible (i.e., `W_1 = 0`), it means that for every connected component `C_i`, `cnt0_i <= 1` and `cnt1_i <= 1`. This implies that each connected component is either an isolated vertex (e.g., `cnt0_i=1, cnt1_i=0`) or a single edge (e.g., `cnt0_i=1, cnt1_i=1`).\nIn this scenario, we need to add at least two edges.\nTo form an odd cycle with two added edges `(u, v)` and `(v, x)`:\nWe need to pick three distinct vertices `u, v, x`.\nThe edges `(u,v)` and `(v,x)` are added.\nIf `u` and `x` are in the same component `C_i` and have the same color, there is an even-length path between them. Then `u - (added)v - (added)x - (existing path)u` forms an odd cycle.\nThe number of ways to pick three distinct vertices `u,v,x` is `n * (n-1) * (n-2) / 6`.\nThis is equivalent to picking two distinct vertices `u, x` that are in the same component and have the same color, and then picking any other vertex `v` that is not `u` or `x`. This is the same condition as `t=1`, which we've already ruled out.\n\nThe only way `t=2` is possible is if we add two edges `(u, v)` and `(v, x)` such that `u, v, x` are distinct, and `u` and `x` are in different connected components.\nLet `u` be from component `C_A` and `x` from component `C_B` (`C_A != C_B`). Let `v` be from `C_V`.\nIf `u, v, x` are from distinct components: `C_A, C_V, C_B`.\nAdding `(u,v)` and `(v,x)` connects these three components. The resulting graph is still bipartite.\nFor example, if `u` is color 0, `v` is color 0, `x` is color 0.\n`u` from `C_A`, `v` from `C_V`, `x` from `C_B`.\nAdd `(u,v)`. Now `u` and `v` are in the same component.\nAdd `(v,x)`. Now `v` and `x` are in the same component.\nThe path `u-v-x` is length 2.\nThe cycle `u-v-x-u` is length 3. This is an odd cycle.\nThis requires `u, v, x` to be distinct vertices.\nThe number of ways to pick 3 distinct vertices `u, v, x` is `n * (n-1) * (n-2) / 6`.\nThe number of ways to pick 2 edges from these 3 vertices to form a triangle is 3 (`(u,v),(v,x)` or `(u,v),(u,x)` or `(v,x),(u,x)`).\nBut we only need to add 2 edges. If `(u,x)` already exists, then we only add `(u,v)` and `(v,x)`.\nThis is exactly the condition that `u, v, x` are distinct vertices, and `u` and `x` are not connected, `u` and `v` are not connected, `v` and `x` are not connected.\nThe number of ways to choose 3 distinct vertices `u, v, x` such that no two are connected by an existing edge is what we need.\nThis is simply `n * (n-1) * (n-2) / 6`, if `m=0`.\nIf `m>0`, it's more complicated.\n\nA simpler approach for `t=2`:\nIf we add two edges `(u, v)` and `(x, y)`:\n1. If `u, v, x, y` are distinct and form a path `u-x-y-v`, and `u,v` are in the same component and same color, then `u-(added)v-x-y-(added)u` forms an odd cycle. This is too complicated.\n\nLet's reconsider the condition `W_1 = 0`. It means every component is either an isolated vertex or a single edge.\nThis implies `n >= 3` for `t=2` to be possible at all (to pick 3 distinct vertices).\nIf `n < 3`, `t=2` is impossible.\nIf `n >= 3`, we can pick three vertices `u, v, x`.\nWe add edges `(u, v)` and `(v, x)`.\nThis forms a path `u-v-x`. This path has length 2.\nThe problem is to ensure this forms an odd cycle.\nIf `u` and `x` are now \"connected\" by an odd path length (after considering existing paths), then we have an odd cycle.\nIf `u` and `x` are in the same component, and have the same color, this is `t=1` case.\nIf `u` and `x` are in the same component, and have different colors, adding `(u,v)` and `(v,x)` makes `u-v-x` a path of length 2. This creates an odd cycle `u-v-x-(path)-u` if the path `u-(path)-x` has odd length.\nThis would mean `u` and `x` have different colors. So `u-v-x` is `color_u - color_v - color_x`.\nIf `color_u != color_x`, then `u-v-x` is an odd path.\nNo, this is wrong. `u-v-x` is a path of length 2.\n`color_u` and `color_x` are different.\nPath `u - ... - x` has odd length.\nSo `u - (added)v - (added)x - (existing path)u` is `2 + odd = odd` length.\nThis forms an odd cycle.\nSo, `t=2` is possible if we can pick `u, v, x` such that:\n1. `u, v, x` are distinct vertices.\n2. `(u,v)` is not an existing edge.\n3. `(v,x)` is not an existing edge.\n4. `u` and `x` are in the same connected component, and have different colors.\n\nThis case is complicated. Let's simplify and consider the total number of vertices `n`.\nIf `W_1 = 0`, it means all components are `(v)` or `(v-w)`.\nLet `N_comp` be the number of connected components.\nLet `N_iso` be the number of isolated vertices.\nLet `N_edge` be the number of components that are single edges.\n`N_iso + N_edge = N_comp`.\n`n = N_iso * 1 + N_edge * 2`.\n\nTo form an odd cycle of length 3 (triangle) using `u, v, x`:\nWe need to add edges `(u,v), (v,x), (x,u)`.\nIf `m=0` and `n=3`, then `t=3, w=1`. (Example `3 0` output `3 1`).\nThis means if `W_1=0`, we cannot create an odd cycle with `t=1`.\n\nConsider `t=2` more generally:\nThe graph is bipartite. We have `N0` vertices of color 0 and `N1` vertices of color 1.\n`W_1 = 0` implies `cnt0_i <= 1` and `cnt1_i <= 1` for all components `i`.\nThus, `N0 <= N_comp` and `N1 <= N_comp`.\nAnd `N0` is the total count of vertices that are color 0 in their respective components.\nAnd `N1` is the total count of vertices that are color 1 in their respective components.\nSince each component has at most one vertex of color 0 and at most one vertex of color 1, `N0` is simply the number of components that have a color 0 vertex, and `N1` is the number of components that have a color 1 vertex.\nIf a component is an isolated vertex `v`, it contributes 1 to `N0` (if `v` is color 0) or 1 to `N1` (if `v` is color 1).\nIf a component is an edge `u-v`, it contributes 1 to `N0` (for `u`) and 1 to `N1` (for `v`).\nSo `N0` is the number of components that are not just isolated vertices of color 1.\nAnd `N1` is the number of components that are not just isolated vertices of color 0.\n\nIf `W_1 = 0`, we need to add 2 edges.\nWe can pick two vertices `u, v` from different components `C_A, C_B`. Add `(u,v)`.\nNow `C_A` and `C_B` merge. The new component is still bipartite.\nWe need to add a second edge `(x,y)` to make it non-bipartite.\nThis means `x,y` must be in the same component and have the same color.\nThis means `t=2` is possible if we can pick `u,v` and `x,y` such that `x,y` are in the same component *after* adding `(u,v)`, and `x,y` have the same color.\nThis means we need to pick `u, v` from different components such that `color[u]` and `color[v]` are different.\nThen we pick `x, y` from the merged component such that `color[x]` and `color[y]` are the same.\nThis is complex.\n\nLet's consider the number of components.\nIf `N_comp >= 2`:\nWe can pick two components, `C_i` and `C_j`.\nPick a vertex `u` from `C_i` and `v` from `C_j`.\nAdd edge `(u,v)`. This merges `C_i` and `C_j`. The graph remains bipartite.\nNow we need to add a second edge.\nLet's consider the total count of vertices `N0` (color 0) and `N1` (color 1) across all components.\nIf `N0 >= 2` and `N1 >= 2`:\nPick `u_0, v_0` both color 0. Add `(u_0, v_0)`. This would be `t=1`.\nPick `u_1, v_1` both color 1. Add `(u_1, v_1)`. This would be `t=1`.\nThis means `W_1 = 0` implies `N0 < 2` or `N1 < 2`.\nThis means `N0` is 0 or 1, or `N1` is 0 or 1.\nSince `n >= 1`, we must have `N0+N1 = n >= 1`.\nSo, if `W_1 = 0`:\n  - Either `N0=0` (all vertices are color 1), or `N0=1`.\n  - Or `N1=0` (all vertices are color 0), or `N1=1`.\n\nIf `N0=0`: All `n` vertices are color 1.\n  This means all components are isolated vertices, and all are color 1.\n  We have `n` isolated vertices `v_1, ..., v_n`, all color 1.\n  Number of ways to add 2 edges:\n  Pick two distinct vertices `u, v`. Add `(u,v)`.\n  Pick another distinct vertex `x`. Add `(v,x)`.\n  This creates path `u-v-x`. This path has length 2.\n  Cycle `u-v-x-u` is length 3. This is an odd cycle.\n  We need to choose 3 distinct vertices `u, v, x`.\n  Number of ways to choose 3 vertices: `n * (n-1) * (n-2) / 6`.\n  For each set of 3 vertices, say `{1,2,3}`, we can form a triangle in 1 way (add `(1,2), (2,3), (3,1)`). This is `t=3`.\n  We can form a path `1-2-3` by adding `(1,2), (2,3)`. This is `t=2`.\n  If we choose `u,v,x` and add `(u,v)` and `(v,x)`, this forms an odd cycle of length 3.\n  This is `n * (n-1) * (n-2)` ways to choose ordered `(u,v,x)`.\n  Since `(u,v,x)` and `(x,v,u)` are the same cycle, divide by 2.\n  So `n * (n-1) * (n-2) / 2` ways.\n  This is if `n >= 3`. If `n < 3`, this is 0.\n\nIf `N0=1` and `N1 >= 2`:\n  Example: `n=3`. `v1(0), v2(1), v3(1)`. All isolated.\n  We can add `(v2,v3)`. This makes `t=1`.\n  This contradicts `W_1=0`. So this case is not possible.\n\nSo, if `W_1 = 0`, then we must have:\n  - All `n` vertices are isolated, and all have the same color (say, 0). So `N0=n, N1=0`. This implies `n < 2` (because if `n >= 2`, `W_1 > 0`).\n  - All `n` vertices are isolated, and all have the same color (say, 1). So `N0=0, N1=n`. This implies `n < 2`.\n  - All `n` vertices form single edges, or isolated vertices such that `N0 < 2` and `N1 < 2`.\n    This means `n <= 2`.\n    If `n=1`: `N0=1, N1=0` (or `N0=0, N1=1`). `W_1=0`.\n    If `n=2, m=0`: `v1(0), v2(1)`. `N0=1, N1=1`. `W_1=0`.\n    If `n=2, m=1` (edge `1-2`): `v1(0), v2(1)`. `N0=1, N1=1`. `W_1=0`.\n\nIt seems the special handling for `n < 3` is required.\nIf `n < 3`, it's impossible to form a cycle of length 3 using only existing vertices.\nThe examples suggest that for `3 0`, output is `3 1`.\n`3 0`: `n=3, m=0`. Vertices `1,2,3`. All isolated.\nColoring: `1(0), 2(0), 3(0)`.\n`cnt0_1=1, cnt1_1=0`. `cnt0_2=1, cnt1_2=0`. `cnt0_3=1, cnt1_3=0`.\n`W_1 = 0`. So `t=1` is not possible.\nTo get `t=3, w=1`: We add `(1,2), (2,3), (3,1)`. This is a triangle. This is one way.\nThis matches the example.\n\nThis implies that if `W_1 = 0`, then `t` must be 2 or 3.\nIf `n >= 3` and `W_1 = 0`:\n  This means `N0 < 2` or `N1 < 2`.\n  And each component is either `(v)` or `(u-v)`.\n  If we have at least two isolated vertices, say `u` and `v`.\n  And another vertex `x` (isolated or part of an edge).\n  We can add `(u,x)` and `(x,v)`. This forms `u-x-v`. This is a path of length 2.\n  If `u` and `v` are isolated vertices, they both have the same color.\n  Path `u-x-v` has length 2. `u` and `v` have the same color. This forms an odd cycle `u-(added)x-(added)v-u`.\n  This is a triangle.\n  This requires `u, x, v` to be distinct.\n  We need to pick 3 distinct vertices.\n  Number of ways to pick 3 distinct vertices: `n * (n-1) * (n-2) / 6`.\n  For each triplet `{a,b,c}`, we can form a triangle `a-b-c-a` by adding 3 edges. This makes `t=3`.\n  But we are looking for `t=2`.\n  If we pick `u,v,x` and add `(u,v)` and `(v,x)`. This forms a cycle `u-v-x-u` if `(u,x)` already exists.\n  But `W_1=0` implies no two vertices in the same component have the same color.\n  So `u,v,x` must be from different components (or `v` is from a component with `u` or `x`, but not both).\n  If `u,v,x` are all isolated vertices, all of the same color (e.g., `n` isolated vertices, all color 0).\n  Then `N0=n, N1=0`.\n  If `n=1`, `W_1=0`. `t=3, w=1` for `3 0` suggests `n` is the number of vertices *available* to form the cycle.\n  If `n=1, m=0`: `N0=1, N1=0`. `W_1=0`. `t=3, w=1` (as per `3 0` example, implying `n` can be extended to 3).\n  If `n=2, m=0`: `N0=1, N1=1`. `W_1=0`. `t=3, w=1`. (We need a 3rd vertex).\n  The problem statement \"consisting of more than one vertex\" for an odd cycle typically means length >= 3.\n  If `n < 3`, we cannot form a cycle of length 3 using only existing vertices.\n  The example `3 0` gives `3 1`. This means we need to add 3 edges to form a triangle using vertices `1,2,3`.\n  So, if `W_1 = 0` and `n < 3`, it's impossible to form a cycle of length 3.\n  The only way to interpret `3 0 -> 3 1` is that `t=3` is the minimum edges to form a triangle using *all* `n` vertices (if `n=3`).\n  What if `n=1` or `n=2`? The problem implies we can only use existing `n` vertices.\n  If `n=1` or `n=2`, it's impossible to form a cycle of length 3.\n  This implies `t` should be infinity. But this is not usually an output for competitive programming.\n  Perhaps the example `3 0` is a special case for `n=3`.\n  If `n=3, m=0`: `t=3, w=1`.\n  If `n=1` or `n=2`, it's impossible. What should be the output?\n  The problem states \"consisting of more than one vertex\". Smallest is 3.\n\nLet's assume the problem means we always use the given `n` vertices.\nIf `n < 3`: No cycle of length >= 3 is possible.\n  This means `t` would be infinity. This is not a possible output.\n  Perhaps `t` is always at least 3 for `n=3, m=0`?\n  The only way to reconcile this is that for `n < 3`, the problem is ill-defined or has `t=infinity`.\n  Let's assume `n >= 3` for `t < 3`.\n\nIf `W_1 = 0`:\n  All components are `(v)` or `(u-v)`.\n  And `N0 < 2` or `N1 < 2`.\n  This means we cannot connect two vertices of the same color within the same component.\n  This also means we cannot connect two vertices of the same color across different components to form a `t=1` cycle.\n  This means there is no pair `(u,v)` such that `color[u] == color[v]`.\n  This means `N0 <= 1` and `N1 <= 1`.\n  So `n = N0 + N1 <= 2`.\n  This implies that if `n >= 3`, then `W_1` must be `> 0`.\n  This contradicts `3 0 -> 3 1`. For `3 0`, `n=3`. `N0=3, N1=0`. `W_1 = 3 * (3-1)/2 = 3`.\n  So for `3 0`, `t=1, w=3` should be the answer by my logic.\n  But example output is `3 1`.\n\nThe only way `3 0 -> 3 1` makes sense is if the definition of `t=1` is restricted.\n\"form a simple cycle of an odd length\".\nIf `n=3, m=0`. Vertices `1,2,3`.\nIf we add `(1,2)`. Graph is `1-2, 3`. This is bipartite. No odd cycle.\nIf we add `(1,3)`. Graph is `1-3, 2`. This is bipartite. No odd cycle.\nIf we add `(2,3)`. Graph is `2-3, 1`. This is bipartite. No odd cycle.\nSo `t=1` is indeed not possible for `3 0`.\nThis means my interpretation of `t=1` was wrong.\n\nCorrected understanding for `t=1`:\nTo form an odd cycle by adding *one* edge `(u,v)`, `u` and `v` must be in the same connected component, and they must have the same color. Adding `(u,v)` completes an odd cycle.\nIf `u` and `v` are in different components, adding `(u,v)` merges the components, but the resulting graph is still bipartite.\nExample `1-2, 3-4`. Add `(1,3)`. Graph `1-2-3-4`. Bipartite.\nSo `t=1` requires *at least one* existing connected component `C_i` to have `cnt0_i >= 2` OR `cnt1_i >= 2`.\nIf this condition holds, `w = sum_i (cnt0_i * (cnt0_i - 1) / 2 + cnt1_i * (cnt1_i - 1) / 2)`.\n\nIf `W_1 = 0` (using this corrected definition):\nThis implies that for every component `C_i`, `cnt0_i <= 1` AND `cnt1_i <= 1`.\nThis means every connected component is either an isolated vertex or a single edge.\nThis is exactly the case for `3 0`. Components are `{1}, {2}, {3}`. `cnt0_i=1, cnt1_i=0` for each. So `W_1 = 0`.\nSo `t=1` is not possible.\n\nNow, consider `t=2` if `W_1 = 0`.\nThis means every component is an isolated vertex or a single edge.\nWe need to add two edges, say `e1=(u,v)` and `e2=(x,y)`.\nTo form an odd cycle, the new graph must be non-bipartite.\nConsider the case where we add two edges `(u,x)` and `(v,x)`.\nThis forms a path `u-x-v`. This path has length 2.\nWe need to add these two edges such that `u,x,v` are distinct.\nIf `u` and `v` are in the same component and have different colors, there is an odd-length path between them.\nThen `u-(added)x-(added)v-(existing path)u` forms an odd cycle of length `2 + odd = odd`.\nThis is exactly the condition that `u` and `v` are in the same component and have different colors.\nNumber of ways to pick `u, v` from the same component, different colors:\nFor each component `C_i`, `cnt0_i * cnt1_i` ways.\nSum over all components: `W_2_pair = sum_i (cnt0_i * cnt1_i)`.\nIf `W_2_pair > 0`:\n  We pick such a pair `(u,v)`.\n  Then we pick any other vertex `x` that is not `u` or `v`. There are `n-2` choices for `x`.\n  The added edges are `(u,x)` and `(v,x)`.\n  These edges must not be parallel edges.\n  Since `u,v` are from same component and different colors, `(u,v)` is an existing edge.\n  No, `(u,v)` is an existing edge if `cnt0_i=1, cnt1_i=1`.\n  If `cnt0_i=1, cnt1_i=0` (isolated vertex), then `cnt0_i * cnt1_i = 0`.\n  So `W_2_pair > 0` implies there is at least one component which is a single edge (e.g., `u-v`).\n  For such a component `u-v`, `u` is color 0, `v` is color 1.\n  We pick this `u,v`.\n  Then we pick `x` from `n-2` remaining vertices.\n  We add `(u,x)` and `(v,x)`.\n  This creates a triangle `u-v-x-u`. The cycle length is 3, which is odd.\n  The edges must not be parallel.\n  `u-v` is an existing edge. We add `(u,x)` and `(v,x)`.\n  These are new edges if `x` is not `u` or `v`.\n  So `t=2` is possible if there is at least one component which is a single edge AND `n >= 3`.\n  The number of ways:\n  Pick an existing edge `(u,v)`. There are `m` ways.\n  Pick a third vertex `x` not `u` or `v`. There are `n-2` ways.\n  Total ways: `m * (n-2)`.\n  This is for `t=2`.\n  This is valid if `m > 0` and `n >= 3`.\n\nIf `m=0` (no existing edges), then `t=2` is not possible by this logic.\nFor `3 0`, `m=0`. So `t=2` is not possible.\nThis matches `3 0 -> 3 1`.\n\nSo, the logic so far:\n1. Check for `t=0`. If graph is non-bipartite, `t=0, w=1`.\n2. If bipartite, perform 2-coloring. Calculate `W_1 = sum_i (cnt0_i * (cnt0_i - 1) / 2 + cnt1_i * (cnt1_i - 1) / 2)`.\n   If `W_1 > 0`, then `t=1, w=W_1`.\n3. If `W_1 = 0`:\n   This means all components are isolated vertices or single edges.\n   Also, `cnt0_i <= 1` and `cnt1_i <= 1` for all `i`.\n   This means `t=1` is not possible.\n   Now check for `t=2`:\n   If `m > 0` (there is at least one existing edge):\n     Then we can pick an existing edge `(u,v)`. There are `m` ways.\n     We need to pick a third vertex `x` (not `u` or `v`) to form a triangle `u-v-x-u`.\n     There are `n-2` choices for `x`.\n     The added edges are `(u,x)` and `(v,x)`.\n     These edges must not be parallel. Since `x` is not `u` or `v`, and `(u,x)` and `(v,x)` are not existing edges (because `W_1=0` implies no `cnt0_i >= 2` or `cnt1_i >= 2`, so no `u,x` or `v,x` with same color, and if they have different colors, they must be in different components or form a path of odd length).\n     This forms a cycle `u-v-x-u` of length 3.\n     So, if `m > 0` and `n >= 3`, then `t=2, w = m * (n-2)`.\n     (Note: `n-2` can be 0 if `n=2`. If `n=2, m=1`, then `W_1=0`. `m*(n-2)=0`. So `t=2` is not possible.)\n     So `t=2` is only possible if `m > 0` and `n-2 > 0` (i.e., `n >= 3`).\n\n4. If `t=0, t=1, t=2` are all not possible:\n   This implies `W_1 = 0` AND (`m=0` OR `n < 3`).\n   If `W_1 = 0` and `m=0`:\n     All vertices are isolated.\n     `3 0` example: `n=3, m=0`. `W_1=0`. `m=0`.\n     Output `3 1`. This requires adding 3 edges to form a triangle.\n     So, `t=3, w=1`. This is only possible if `n >= 3`.\n     If `n < 3` and `m=0`, then `t=3` is also impossible (need 3 vertices).\n     This implies `n=1` or `n=2` with `m=0` means `t=infinity`.\n     But for competitive programming, this usually means `t=0, w=0` or some specific small value.\n     Let's assume the problem statement implies `n >= 3` for this case.\n     So if `W_1=0` and `m=0` and `n >= 3`: `t=3, w=1`.\n\nSummary of refined logic:\n1. **Check for existing odd cycle (`t=0`):**\n   Perform 2-coloring (BFS/DFS). If any conflict (`colors[v] == colors[u]` for edge `(u,v)`) is found, then `t=0, w=1`. Print and exit.\n\n2. **If graph is bipartite (no odd cycle initially):**\n   Calculate `cnt0_i` and `cnt1_i` for each component `C_i`.\n   `W_1 = sum_i (cnt0_i * (cnt0_i - 1) / 2 + cnt1_i * (cnt1_i - 1) / 2)`.\n   If `W_1 > 0`: `t=1, w=W_1`. Print and exit.\n\n3. **If `t=1` is not possible (`W_1 = 0`):**\n   This means every component is either an isolated vertex or a single edge.\n   Check for `t=2`:\n   If `m > 0` (there is at least one existing edge) AND `n >= 3`:\n     Then `t=2, w = m * (n-2)`. Print and exit.\n     (This is because we pick an existing edge `(u,v)` in `m` ways, and pick a third vertex `x` in `n-2` ways. Add `(u,x)` and `(v,x)` to form a triangle `u-v-x-u`. The added edges are guaranteed not to be parallel because `W_1=0` implies no `x` shares a color with `u` or `v` in a way that would make `(u,x)` or `(v,x)` an existing edge).\n\n4. **If `t=0, t=1, t=2` are all not possible:**\n   This means `W_1 = 0` AND (`m = 0` OR `n < 3`).\n   Since `n` is at least 1:\n   - If `n=1`: `m=0`. `W_1=0`. `t=2` not possible. Output? The problem implies a cycle of length > 1. Minimum is 3. With 1 vertex, impossible.\n   - If `n=2`: `m=0` or `m=1`. `W_1=0`. `t=2` not possible. With 2 vertices, impossible to form length 3 cycle.\n   - If `n=3, m=0`: `W_1=0`. `t=2` not possible. Example `3 0` output `3 1`.\n     So, if `n >= 3` and `m=0` and `W_1=0`, then `t=3, w=1`. Print and exit.\n\nThe edge cases for `n < 3`:\nIf `n=1` or `n=2`, it's impossible to form a cycle of length 3.\nThe problem statement usually implies that a solution always exists.\nIf `n=1` or `n=2`, my logic leads to \"not possible\".\nThis could mean `t=0, w=0` (no ways to form a cycle).\nLet's check example cases carefully:\n1. `4 4`, `1 2`, `1 3`, `4 2`, `4 3`.\n   `adj = {1:[2,3], 2:[1,4], 3:[1,4], 4:[2,3]}`.\n   Coloring: `1(0)`. `2(1)`, `3(1)`. `4` is neighbor of `2,3`. `4` gets `0`.\n   `1(0)-2(1)`, `1(0)-3(1)`. `4(0)-2(1)`, `4(0)-3(1)`.\n   This is a bipartite graph.\n   Component is `{1,2,3,4}`. `cnt0=2` (`1,4`), `cnt1=2` (`2,3`).\n   `W_1 = (2*(2-1)/2) + (2*(2-1)/2) = 1 + 1 = 2`.\n   So `t=1, w=2`. Matches example output.\n\n2. `3 3`, `1 2`, `2 3`, `3 1`.\n   `adj = {1:[2,3], 2:[1,3], 3:[1,2]}`.\n   Coloring: `1(0)`. `2(1)`. `3` is neighbor of `1,2`. `3` gets `1-0=1` from `1`. `3` gets `1-1=0` from `2`. Conflict! `colors[3]` is `1` from `1`, but `0` from `2`.\n   This means `1-2-3-1` is an odd cycle.\n   So `t=0, w=1`. Matches example output.\n\n3. `3 0`.\n   `adj = {1:[], 2:[], 3:[]}`.\n   Coloring: `1(0)`. `2(0)`. `3(0)`.\n   All components are isolated vertices. `cnt0_1=1, cnt1_1=0`. `cnt0_2=1, cnt1_2=0`. `cnt0_3=1, cnt1_3=0`.\n   `W_1 = 0`.\n   `m=0`. `n=3`.\n   According to my refined logic step 4: `n >= 3` and `m=0` and `W_1=0` implies `t=3, w=1`. Matches example output.\n\nThis refined logic seems to cover all examples.\nThe only remaining ambiguity is for `n=1` or `n=2` where `t=0` and `t=1` and `t=2` are not possible.\nIf `n=1, m=0`: `W_1=0`. `m=0`. `n < 3`. No rule applies.\nIf `n=2, m=0`: `W_1=0`. `m=0`. `n < 3`. No rule applies.\nIf `n=2, m=1`: `W_1=0`. `m=1`. `n < 3`. No rule applies.\nIn competitive programming, for such \"impossible\" cases, output `0 0` or `t=infinity` (which is not usually an int).\nHowever, problem constraints are `n, m >= 0`. `n` is number of vertices. If `n=0`, then `t=0, w=0`.\nGiven `n >= 1`.\nIf `n=1` or `n=2`, it's impossible to form a cycle of length 3.\nThe problem states \"consisting of more than one vertex\". Smallest odd length cycle is 3.\nSo for `n=1` or `n=2`, `t` must be infinity.\nLet's assume the problem setter guarantees `n >= 3` when `t` is finite.\nOr, the problem implies that for `n < 3`, we can't form such a cycle, so `t=0, w=0` (no ways).\nLet's stick to the logic for `n >= 3` and hope problem constraints implicitly handle `n < 3` appropriately, or that `n >= 3` is implicitly guaranteed for cases where `t` is finite.\nIf `n=1` or `n=2` and `t=0` is not found, `t=1` is not found, `t=2` is not found, then output `0 0` seems reasonable for \"impossible\".\n\nFinal refined logic:\n```python\nimport sys\nfrom collections import deque\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n + 1)]\n    edges_set = set() # To quickly check for existing edges\n\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        edges_set.add(tuple(sorted((u, v))))\n\n    colors = [None] * (n + 1)\n    visited = [False] * (n + 1)\n    \n    # --- Step 1: Check for existing odd cycle (t=0) ---\n    has_odd_cycle = False\n    for i in range(1, n + 1):\n        if not visited[i]:\n            q = deque()\n            q.append((i, 0)) # (vertex, color)\n            colors[i] = 0\n            visited[i] = True\n            \n            while q:\n                u, c = q.popleft()\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        colors[v] = 1 - c\n                        q.append((v, 1 - c))\n                    elif colors[v] == c:\n                        has_odd_cycle = True\n                        break\n                if has_odd_cycle:\n                    break\n            if has_odd_cycle:\n                break\n\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # --- Step 2: Calculate ways for t=1 (if graph is bipartite) ---\n    # Graph is bipartite at this point.\n    # W_1 counts ways to add an edge (u,v) where u,v are in the same component and have the same color.\n    # This creates an odd cycle.\n    \n    # Re-run BFS to get component-wise counts of colors\n    # (colors array from previous step holds a valid 2-coloring)\n    \n    W_1 = 0\n    # visited reset for component iteration\n    visited = [False] * (n + 1) \n    \n    for i in range(1, n + 1):\n        if not visited[i]:\n            current_component_nodes = []\n            q = deque()\n            q.append(i)\n            visited[i] = True\n            current_component_nodes.append(i)\n\n            head = 0\n            while head < len(current_component_nodes):\n                u = current_component_nodes[head]\n                head += 1\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        current_component_nodes.append(v)\n            \n            cnt0_comp = 0\n            cnt1_comp = 0\n            for node in current_component_nodes:\n                if colors[node] == 0:\n                    cnt0_comp += 1\n                else:\n                    cnt1_comp += 1\n            \n            W_1 += cnt0_comp * (cnt0_comp - 1) // 2\n            W_1 += cnt1_comp * (cnt1_comp - 1) // 2\n            \n    if W_1 > 0:\n        print(f\"1 {W_1}\")\n        return\n\n    # --- Step 3: If t=1 is not possible (W_1 = 0) ---\n    # This means every component is an isolated vertex or a single edge.\n    # Also, for every component C_i, cnt0_i <= 1 AND cnt1_i <= 1.\n    \n    # Check for t=2:\n    # We need to add two edges (u,x) and (v,x) to form a triangle u-v-x-u.\n    # This requires an existing edge (u,v) and a third vertex x.\n    # The length of cycle u-v-x-u is 3, which is odd.\n    # Edges (u,x) and (v,x) must not be parallel to existing edges.\n    # Since W_1=0, there are no two vertices of the same color in any component.\n    # If (u,x) or (v,x) were existing edges, it would imply u,x (or v,x) have different colors.\n    # If u and x are in different components, (u,x) is not an existing edge.\n    # If u and x are in the same component, they must have different colors (because W_1=0).\n    # If (u,x) is an existing edge, then we cannot add it.\n    # The logic here is that we pick an existing edge (u,v).\n    # Then we pick a third vertex x.\n    # We add (u,x) and (v,x).\n    # We need to ensure (u,x) and (v,x) are not existing edges.\n    # If x is in the same component as u and v (which is u-v edge), then x must be u or v, which is forbidden.\n    # If x is in a different component, then (u,x) and (v,x) are not existing edges.\n    # So this works.\n\n    if m > 0 and n >= 3: # Need at least one existing edge and 3 vertices for a triangle\n        # Number of ways: pick an existing edge (m ways), pick a third vertex (n-2 ways).\n        # This forms a triangle (u,v,x).\n        print(f\"2 {m * (n - 2)}\")\n        return\n\n    # --- Step 4: If t=0, t=1, t=2 are all not possible ---\n    # This means W_1=0 AND (m=0 OR n < 3).\n    # Specifically, if n=1 or n=2, it's impossible to form a cycle of length 3 or more.\n    # The example `3 0` implies `t=3, w=1` for `n=3, m=0`.\n    \n    if n >= 3 and m == 0:\n        # All vertices are isolated. We need to add 3 edges to form a triangle.\n        # There's only 1 way to form a triangle using 3 vertices from n available.\n        # But if n > 3, we can choose 3 vertices in nC3 ways.\n        # The problem asks for *a* cycle.\n        # For n=3, m=0, vertices 1,2,3. Add (1,2), (2,3), (3,1). 1 way.\n        # For n=4, m=0, vertices 1,2,3,4.\n        #   Choose {1,2,3}, add (1,2),(2,3),(3,1).\n        #   Choose {1,2,4}, add (1,2),(2,4),(4,1).\n        #   Choose {1,3,4}, add (1,3),(3,4),(4,1).\n        #   Choose {2,3,4}, add (2,3),(3,4),(4,2).\n        # Number of ways is nC3.\n        print(f\"3 {n * (n - 1) * (n - 2) // 6}\")\n        return\n\n    # This handles cases where n < 3 and no cycle can be formed.\n    # For n=1 or n=2, no cycle of length 3 can be formed.\n    # The problem implies a solution always exists.\n    # So this part should ideally not be reached if problem constraints make sense.\n    # Based on competitive programming norms, if no cycle is possible, it's often 0 0.\n    print(\"0 0\") # Should not be reached with typical problem constraints for finite t.\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n + 1)]\n    edges_set = set() # To quickly check for existing edges\n\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        edges_set.add(tuple(sorted((u, v))))\n\n    colors = [None] * (n + 1)\n    visited = [False] * (n + 1)\n    \n    # --- Step 1: Check for existing odd cycle (t=0) ---\n    has_odd_cycle = False\n    for i in range(1, n + 1):\n        if not visited[i]:\n            q = deque()\n            q.append((i, 0)) # (vertex, color)\n            colors[i] = 0\n            visited[i] = True\n            \n            while q:\n                u, c = q.popleft()\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        colors[v] = 1 - c\n                        q.append((v, 1 - c))\n                    elif colors[v] == c:\n                        has_odd_cycle = True\n                        break\n                if has_odd_cycle:\n                    break\n            if has_odd_cycle:\n                break\n\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # --- Step 2: Calculate ways for t=1 (if graph is bipartite) ---\n    # Graph is bipartite at this point.\n    # W_1 counts ways to add an edge (u,v) where u,v are in the same component and have the same color.\n    # This creates an odd cycle.\n    \n    # Re-run BFS to get component-wise counts of colors\n    # (colors array from previous step holds a valid 2-coloring)\n    \n    W_1 = 0\n    # visited reset for component iteration\n    visited = [False] * (n + 1) \n    \n    for i in range(1, n + 1):\n        if not visited[i]:\n            current_component_nodes = []\n            q = deque()\n            q.append(i)\n            visited[i] = True\n            current_component_nodes.append(i)\n\n            head = 0\n            while head < len(current_component_nodes):\n                u = current_component_nodes[head]\n                head += 1\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        current_component_nodes.append(v)\n            \n            cnt0_comp = 0\n            cnt1_comp = 0\n            for node in current_component_nodes:\n                if colors[node] == 0:\n                    cnt0_comp += 1\n                else:\n                    cnt1_comp += 1\n            \n            W_1 += cnt0_comp * (cnt0_comp - 1) // 2\n            W_1 += cnt1_comp * (cnt1_comp - 1) // 2\n            \n    if W_1 > 0:\n        print(f\"1 {W_1}\")\n        return\n\n    # --- Step 3: If t=1 is not possible (W_1 = 0) ---\n    # This means every component is an isolated vertex or a single edge.\n    # Also, for every component C_i, cnt0_i <= 1 AND cnt1_i <= 1.\n    \n    # Check for t=2:\n    # We need to add two edges (u,x) and (v,x) to form a triangle u-v-x-u.\n    # This requires an existing edge (u,v) and a third vertex x.\n    # The length of cycle u-v-x-u is 3, which is odd.\n    # Edges (u,x) and (v,x) must not be parallel to existing edges.\n    # Since W_1=0, there are no two vertices of the same color in any component.\n    # If (u,x) or (v,x) were existing edges, it would imply u,x (or v,x) have different colors.\n    # If u and x are in different components, (u,x) is not an existing edge.\n    # If u and x are in the same component, they must have different colors (because W_1=0).\n    # If (u,x) is an existing edge, then we cannot add it.\n    # The logic here is that we pick an existing edge (u,v).\n    # Then we pick a third vertex x.\n    # We add (u,x) and (v,x).\n    # We need to ensure (u,x) and (v,x) are not existing edges.\n    # If x is in the same component as u and v (which is u-v edge), then x must be u or v, which is forbidden.\n    # If x is in a different component, then (u,x) and (v,x) are not existing edges.\n    # So this works.\n\n    if m > 0 and n >= 3: # Need at least one existing edge and 3 vertices for a triangle\n        # Number of ways: pick an existing edge (m ways), pick a third vertex (n-2 ways).\n        # This forms a triangle (u,v,x).\n        print(f\"2 {m * (n - 2)}\")\n        return\n\n    # --- Step 4: If t=0, t=1, t=2 are all not possible ---\n    # This means W_1=0 AND (m=0 OR n < 3).\n    # Specifically, if n=1 or n=2, it's impossible to form a cycle of length 3 or more.\n    # The example `3 0` implies `t=3, w=1` for `n=3, m=0`.\n    \n    if n >= 3 and m == 0:\n        # All vertices are isolated. We need to add 3 edges to form a triangle.\n        # There's only 1 way to form a triangle using 3 vertices from n available.\n        # But if n > 3, we can choose 3 vertices in nC3 ways.\n        # The problem asks for *a* cycle.\n        # For n=3, m=0, vertices 1,2,3. Add (1,2), (2,3), (3,1). 1 way.\n        # For n=4, m=0, vertices 1,2,3,4.\n        #   Choose {1,2,3}, add (1,2),(2,3),(3,1).\n        #   Choose {1,2,4}, add (1,2),(2,4),(4,1).\n        #   Choose {1,3,4}, add (1,3),(3,4),(4,1).\n        #   Choose {2,3,4}, add (2,3),(3,4),(4,2).\n        # Number of ways is nC3.\n        print(f\"3 {n * (n - 1) * (n - 2) // 6}\")\n        return\n\n    # This handles cases where n < 3 and no cycle can be formed.\n    # For n=1 or n=2, no cycle of length 3 can be formed.\n    # The problem implies a solution always exists.\n    # So this part should ideally not be reached if problem constraints make sense.\n    # Based on competitive programming norms, if no cycle is possible, it's often 0 0.\n    print(\"0 0\") # Should not be reached with typical problem constraints for finite t.\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 603,
        "completion_token_count": 11806,
        "thoughts_token_count": 6214
    }
}