{
    "start": 1758011284.2558084,
    "end": 1758011301.2167544,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    vouchers = []\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers.append((l, r, cost))\n\n    vouchers.sort()\n\n    max_coord = 2 * 10**5 + 1\n    min_cost_for_duration = {}\n\n    min_total_cost = float('inf')\n\n    for l, r, cost in vouchers:\n        duration = r - l + 1\n        \n        # Try to combine with a previously seen voucher\n        # Case 1: Current voucher (l, r) is after a previous voucher (l_prev, r_prev)\n        # i.e., r_prev < l\n        for prev_duration, prev_cost in min_cost_for_duration.items():\n            if duration + prev_duration == x:\n                min_total_cost = min(min_total_cost, cost + prev_cost)\n\n        # Add current voucher to the pool of available vouchers\n        # We need to store vouchers in a way that allows efficient querying\n        # for `min_cost_for_duration` based on the end time `r`.\n        # This approach of iterating through all prev_duration is too slow.\n        # We need a more structured way to query.\n\n        # Let's re-think the data structure for storing previous vouchers.\n        # We need to efficiently find a voucher `j` such that `duration_i + duration_j = x`\n        # and `r_j < l_i` or `r_i < l_j`.\n        # Sorting by `l_i` handles `r_j < l_i` naturally.\n        # We need to store `min_cost` for each `duration` ending at `r_j`.\n\n    # A better approach:\n    # Iterate through vouchers, and for each voucher `i`, try to find a suitable voucher `j`.\n    # To satisfy `r_j < l_i`, we can process vouchers sorted by `r_i`.\n    # Or, we can process vouchers sorted by `l_i` and maintain minimum costs for previous vouchers.\n\n    # Let's use an array `min_cost_ending_at_r[duration]` that stores the minimum cost\n    # for a voucher with that `duration` that ends at or before `r`.\n    # This is still not quite right. We need `min_cost_ending_at_r[duration]` to be\n    # the minimum cost of a voucher with that duration that ends at `r_prev`.\n\n    # Let's use a `dp` array where `dp[r]` stores a dictionary\n    # `dp[r] = {duration: min_cost}` for all vouchers ending at `r`.\n    # This is also too much memory/too sparse.\n\n    # A common technique for this type of problem is to use a sweep-line or process events.\n    # We can group vouchers by their start times `l` or end times `r`.\n\n    # Let's group vouchers by their start day `l`.\n    vouchers_by_start = [[] for _ in range(max_coord)]\n    for l, r, cost in vouchers:\n        vouchers_by_start[l].append((r, cost, r - l + 1))\n\n    # `min_cost_duration[duration]` will store the minimum cost of a voucher\n    # with that `duration` encountered so far.\n    # This array will be updated as we sweep through `r` values.\n    # `min_cost_duration[d]` stores the minimum cost of a voucher with duration `d`\n    # that has already \"finished\" (i.e., its `r_prev` is less than the current `l_i`).\n    \n    # `min_cost_for_len[d]` stores the minimum cost of a voucher of duration `d`.\n    # This is updated as we iterate `l` from 1 to `max_coord - 1`.\n    # When we are at `l_i`, `min_cost_for_len[d]` should represent the minimum cost\n    # of a voucher `j` such that `r_j < l_i` and `duration_j = d`.\n    \n    # Initialize `min_cost_for_len` with infinity.\n    min_cost_for_len = [float('inf')] * (x + 1)\n    \n    ans = float('inf')\n\n    # We need to process vouchers in increasing order of `r` to ensure `r_j < l_i`.\n    # This is complicated by the fact that we also need to consider `r_i < l_j`.\n\n    # Let's use a data structure that allows us to query for minimum cost\n    # for a specific duration `d` among vouchers ending at `r_prev < current_l`.\n\n    # Group vouchers by their start day `l`.\n    vouchers_grouped_by_l = [[] for _ in range(max_coord)]\n    for l, r, cost in vouchers:\n        vouchers_grouped_by_l[l].append((r, cost, r - l + 1))\n\n    # `min_cost_at_end_time[r_val]` will store the minimum cost for a voucher\n    # that ends at `r_val` for a specific duration.\n    # This is not good enough. We need `min_cost_for_duration` for vouchers ending *before* `l_i`.\n\n    # Let's use a segment tree or similar structure.\n    # The indices of the segment tree could be durations.\n    # The values stored would be minimum costs.\n    # This is still not quite right. We need to query for `min_cost_for_duration`\n    # for vouchers that have already finished by `l_i - 1`.\n\n    # Correct approach: Sweep line\n    # Iterate `day` from 1 to `max_coord - 1`.\n    # At each `day`:\n    # 1. Consider all vouchers that *end* on `day - 1`. For these vouchers, update\n    #    `min_cost_for_duration_ending_before_current_day[duration]`.\n    # 2. Consider all vouchers that *start* on `day`. For each such voucher `i = (l_i, r_i, cost_i)`:\n    #    Calculate its duration `d_i = r_i - l_i + 1`.\n    #    If `d_i < x`:\n    #        Query `min_cost_for_duration_ending_before_current_day[x - d_i]`.\n    #        If a valid `prev_cost` is found, update `ans = min(ans, cost_i + prev_cost)`.\n\n    # `min_cost_for_duration_ending_before_current_day[d]` stores the minimum cost\n    # of a voucher with duration `d` that ends at `day - 1` or earlier.\n    # We need to make sure this is updated correctly.\n\n    # Let's create two lists of events:\n    # `start_events[day]`: list of `(r, cost, duration)` for vouchers starting on `day`.\n    # `end_events[day]`: list of `(cost, duration)` for vouchers ending on `day`.\n\n    start_events = [[] for _ in range(max_coord + 1)]\n    end_events = [[] for _ in range(max_coord + 1)]\n\n    for l, r, cost in vouchers:\n        duration = r - l + 1\n        start_events[l].append((r, cost, duration))\n        end_events[r].append((cost, duration))\n\n    # `min_cost_for_duration_so_far[d]` stores the minimum cost of a voucher\n    # with duration `d` that has finished by `current_day - 1`.\n    min_cost_for_duration_so_far = [float('inf')] * (x + 1)\n    \n    ans = float('inf')\n\n    for day in range(1, max_coord):\n        # Process vouchers that start on `day`\n        for r_i, cost_i, duration_i in start_events[day]:\n            if duration_i < x:\n                required_duration = x - duration_i\n                if required_duration > 0 and required_duration <= x:\n                    if min_cost_for_duration_so_far[required_duration] != float('inf'):\n                        ans = min(ans, cost_i + min_cost_for_duration_so_far[required_duration])\n\n        # Process vouchers that end on `day`.\n        # These vouchers become available for future combinations.\n        for cost_j, duration_j in end_events[day]:\n            if duration_j <= x: # Only care about durations up to x\n                min_cost_for_duration_so_far[duration_j] = min(\n                    min_cost_for_duration_so_far[duration_j], cost_j\n                )\n\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    vouchers = []\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers.append((l, r, cost))\n\n    vouchers.sort()\n\n    max_coord = 2 * 10**5 + 1\n    min_cost_for_duration = {}\n\n    min_total_cost = float('inf')\n\n    for l, r, cost in vouchers:\n        duration = r - l + 1\n        \n        # Try to combine with a previously seen voucher\n        # Case 1: Current voucher (l, r) is after a previous voucher (l_prev, r_prev)\n        # i.e., r_prev < l\n        for prev_duration, prev_cost in min_cost_for_duration.items():\n            if duration + prev_duration == x:\n                min_total_cost = min(min_total_cost, cost + prev_cost)\n\n        # Add current voucher to the pool of available vouchers\n        # We need to store vouchers in a way that allows efficient querying\n        # for `min_cost_for_duration` based on the end time `r`.\n        # This approach of iterating through all prev_duration is too slow.\n        # We need a more structured way to query.\n\n        # Let's re-think the data structure for storing previous vouchers.\n        # We need to efficiently find a voucher `j` such that `duration_i + duration_j = x`\n        # and `r_j < l_i` or `r_i < l_j`.\n        # Sorting by `l_i` handles `r_j < l_i` naturally.\n        # We need to store `min_cost` for each `duration` ending at `r_j`.\n\n    # A better approach:\n    # Iterate through vouchers, and for each voucher `i`, try to find a suitable voucher `j`.\n    # To satisfy `r_j < l_i`, we can process vouchers sorted by `r_i`.\n    # Or, we can process vouchers sorted by `l_i` and maintain minimum costs for previous vouchers.\n\n    # Let's use an array `min_cost_ending_at_r[duration]` that stores the minimum cost\n    # for a voucher with that `duration` that ends at or before `r`.\n    # This is still not quite right. We need `min_cost_ending_at_r[duration]` to be\n    # the minimum cost of a voucher with that duration that ends at `r_prev`.\n\n    # Let's use a `dp` array where `dp[r]` stores a dictionary\n    # `dp[r] = {duration: min_cost}` for all vouchers ending at `r`.\n    # This is also too much memory/too sparse.\n\n    # A common technique for this type of problem is to use a sweep-line or process events.\n    # We can group vouchers by their start times `l` or end times `r`.\n\n    # Let's group vouchers by their start day `l`.\n    vouchers_by_start = [[] for _ in range(max_coord)]\n    for l, r, cost in vouchers:\n        vouchers_by_start[l].append((r, cost, r - l + 1))\n\n    # `min_cost_duration[duration]` will store the minimum cost of a voucher\n    # with that `duration` encountered so far.\n    # This array will be updated as we sweep through `r` values.\n    # `min_cost_duration[d]` stores the minimum cost of a voucher with duration `d`\n    # that has already \"finished\" (i.e., its `r_prev` is less than the current `l_i`).\n    \n    # `min_cost_for_len[d]` stores the minimum cost of a voucher of duration `d`.\n    # This is updated as we iterate `l` from 1 to `max_coord - 1`.\n    # When we are at `l_i`, `min_cost_for_len[d]` should represent the minimum cost\n    # of a voucher `j` such that `r_j < l_i` and `duration_j = d`.\n    \n    # Initialize `min_cost_for_len` with infinity.\n    min_cost_for_len = [float('inf')] * (x + 1)\n    \n    ans = float('inf')\n\n    # We need to process vouchers in increasing order of `r` to ensure `r_j < l_i`.\n    # This is complicated by the fact that we also need to consider `r_i < l_j`.\n\n    # Let's use a data structure that allows us to query for minimum cost\n    # for a specific duration `d` among vouchers ending at `r_prev < current_l`.\n\n    # Group vouchers by their start day `l`.\n    vouchers_grouped_by_l = [[] for _ in range(max_coord)]\n    for l, r, cost in vouchers:\n        vouchers_grouped_by_l[l].append((r, cost, r - l + 1))\n\n    # `min_cost_at_end_time[r_val]` will store the minimum cost for a voucher\n    # that ends at `r_val` for a specific duration.\n    # This is not good enough. We need `min_cost_for_duration` for vouchers ending *before* `l_i`.\n\n    # Let's use a segment tree or similar structure.\n    # The indices of the segment tree could be durations.\n    # The values stored would be minimum costs.\n    # This is still not quite right. We need to query for `min_cost_for_duration`\n    # for vouchers that have already finished by `l_i - 1`.\n\n    # Correct approach: Sweep line\n    # Iterate `day` from 1 to `max_coord - 1`.\n    # At each `day`:\n    # 1. Consider all vouchers that *end* on `day - 1`. For these vouchers, update\n    #    `min_cost_for_duration_ending_before_current_day[duration]`.\n    # 2. Consider all vouchers that *start* on `day`. For each such voucher `i = (l_i, r_i, cost_i)`:\n    #    Calculate its duration `d_i = r_i - l_i + 1`.\n    #    If `d_i < x`:\n    #        Query `min_cost_for_duration_ending_before_current_day[x - d_i]`.\n    #        If a valid `prev_cost` is found, update `ans = min(ans, cost_i + prev_cost)`.\n\n    # `min_cost_for_duration_ending_before_current_day[d]` stores the minimum cost\n    # of a voucher with duration `d` that ends at `day - 1` or earlier.\n    # We need to make sure this is updated correctly.\n\n    # Let's create two lists of events:\n    # `start_events[day]`: list of `(r, cost, duration)` for vouchers starting on `day`.\n    # `end_events[day]`: list of `(cost, duration)` for vouchers ending on `day`.\n\n    start_events = [[] for _ in range(max_coord + 1)]\n    end_events = [[] for _ in range(max_coord + 1)]\n\n    for l, r, cost in vouchers:\n        duration = r - l + 1\n        start_events[l].append((r, cost, duration))\n        end_events[r].append((cost, duration))\n\n    # `min_cost_for_duration_so_far[d]` stores the minimum cost of a voucher\n    # with duration `d` that has finished by `current_day - 1`.\n    min_cost_for_duration_so_far = [float('inf')] * (x + 1)\n    \n    ans = float('inf')\n\n    for day in range(1, max_coord):\n        # Process vouchers that start on `day`\n        for r_i, cost_i, duration_i in start_events[day]:\n            if duration_i < x:\n                required_duration = x - duration_i\n                if required_duration > 0 and required_duration <= x:\n                    if min_cost_for_duration_so_far[required_duration] != float('inf'):\n                        ans = min(ans, cost_i + min_cost_for_duration_so_far[required_duration])\n\n        # Process vouchers that end on `day`.\n        # These vouchers become available for future combinations.\n        for cost_j, duration_j in end_events[day]:\n            if duration_j <= x: # Only care about durations up to x\n                min_cost_for_duration_so_far[duration_j] = min(\n                    min_cost_for_duration_so_far[duration_j], cost_j\n                )\n\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 798,
        "completion_token_count": 2138,
        "thoughts_token_count": 0
    }
}