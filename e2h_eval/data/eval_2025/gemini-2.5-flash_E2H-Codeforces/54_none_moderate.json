{
    "start": 1758293706.8598015,
    "end": 1758293718.5375533,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n_str, a_str = input().split()\n    n = int(n_str)\n    a = int(a_str)\n\n    min_diff = float('inf')\n    best_v1 = -1\n    best_v2 = -1\n    best_v3 = -1\n\n    # Fix v2 as vertex 2 (arbitrary choice, any vertex works due to symmetry)\n    v2 = 2\n\n    # Iterate through possible positions for v1 and v3\n    # v1 and v3 must be distinct from v2 and from each other\n    # We can fix v2 = 2, and v1 = 1\n    # Then v3 can range from 3 to n\n\n    v1 = 1\n\n    # The angle formed by v1, v2, v3 where v2 is the vertex\n    # is an inscribed angle subtending an arc.\n    # The arc length is determined by the number of vertices between v1 and v3 (excluding v1 and v3)\n    # or more simply, the difference in their indices.\n\n    # Let v1, v2, v3 be indices.\n    # The angle at v2 is (k * 180 / n), where k is the number of edges between v1 and v3\n    # along the perimeter that does not contain v2.\n    # This is equivalent to (number of vertices between v1 and v3 + 1)\n    # If v1 is 1, v2 is 2, then v3 can be 3, 4, ..., n.\n    # The number of vertices on the arc (1, 3) not containing 2 is 0. So k = 1. Angle = 180/n.\n    # The number of vertices on the arc (1, 4) not containing 2 is 1. So k = 2. Angle = 2*180/n.\n    # In general, if v1=1, v2=2, v3=j, the arc between 1 and j (not containing 2) has length j-1.\n    # The number of edges on this arc is j-1. So k = j-1.\n    # The angle is (j-1) * 180 / n.\n    # The valid range for k is from 1 to n-2.\n    # k = 1 corresponds to v3 = 3 (angle (1,2,3))\n    # k = n-2 corresponds to v3 = n (angle (1,2,n))\n\n    for k in range(1, n - 1): # k is the number of edges between v1 and v3 on the arc not containing v2\n        current_angle = k * 180.0 / n\n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_v1 = v1\n            best_v2 = v2\n            best_v3 = v1 + k + 1 # v1 is 1. If k=1, v3=3. If k=2, v3=4. So v3 = v1 + k + 1 - 1 = v1 + k. No, v3 = v1 + k + 1.\n                                 # For v1=1, v2=2:\n                                 # k=1: arc (1,3). v3=3.\n                                 # k=2: arc (1,4). v3=4.\n                                 # So v3 = v1 + k + 1.\n                                 # No, this is incorrect.\n                                 # The vertices are 1, 2, ..., n.\n                                 # Let v2 be vertex 2.\n                                 # Let v1 be vertex 1.\n                                 # Then v3 can be vertex 3, 4, ..., n.\n                                 # If v3 = j, the number of vertices on the arc (1, j) not containing 2 is j-1-1 = j-2.\n                                 # The number of edges on this arc is j-2.\n                                 # So k = j-2.\n                                 # Angle = (j-2) * 180 / n.\n                                 # j must be at least 3.\n                                 # k must be at least 1 (for j=3).\n                                 # k can be at most n-2 (for j=n).\n                                 # So the loop `for k in range(1, n-1)` is correct for `k = j-2`.\n                                 # Then `j = k+2`.\n                                 # So `v3 = k+2`.\n\n            best_v3 = k + 2\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n_str, a_str = input().split()\n    n = int(n_str)\n    a = int(a_str)\n\n    min_diff = float('inf')\n    best_v1 = -1\n    best_v2 = -1\n    best_v3 = -1\n\n    # Fix v2 as vertex 2 (arbitrary choice, any vertex works due to symmetry)\n    v2 = 2\n\n    # Iterate through possible positions for v1 and v3\n    # v1 and v3 must be distinct from v2 and from each other\n    # We can fix v2 = 2, and v1 = 1\n    # Then v3 can range from 3 to n\n\n    v1 = 1\n\n    # The angle formed by v1, v2, v3 where v2 is the vertex\n    # is an inscribed angle subtending an arc.\n    # The arc length is determined by the number of vertices between v1 and v3 (excluding v1 and v3)\n    # or more simply, the difference in their indices.\n\n    # Let v1, v2, v3 be indices.\n    # The angle at v2 is (k * 180 / n), where k is the number of edges between v1 and v3\n    # along the perimeter that does not contain v2.\n    # This is equivalent to (number of vertices between v1 and v3 + 1)\n    # If v1 is 1, v2 is 2, then v3 can be 3, 4, ..., n.\n    # The number of vertices on the arc (1, 3) not containing 2 is 0. So k = 1. Angle = 180/n.\n    # The number of vertices on the arc (1, 4) not containing 2 is 1. So k = 2. Angle = 2*180/n.\n    # In general, if v1=1, v2=2, v3=j, the arc between 1 and j (not containing 2) has length j-1.\n    # The number of edges on this arc is j-1. So k = j-1.\n    # The angle is (j-1) * 180 / n.\n    # The valid range for k is from 1 to n-2.\n    # k = 1 corresponds to v3 = 3 (angle (1,2,3))\n    # k = n-2 corresponds to v3 = n (angle (1,2,n))\n\n    for k in range(1, n - 1): # k is the number of edges between v1 and v3 on the arc not containing v2\n        current_angle = k * 180.0 / n\n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_v1 = v1\n            best_v2 = v2\n            best_v3 = v1 + k + 1 # v1 is 1. If k=1, v3=3. If k=2, v3=4. So v3 = v1 + k + 1 - 1 = v1 + k. No, v3 = v1 + k + 1.\n                                 # For v1=1, v2=2:\n                                 # k=1: arc (1,3). v3=3.\n                                 # k=2: arc (1,4). v3=4.\n                                 # So v3 = v1 + k + 1.\n                                 # No, this is incorrect.\n                                 # The vertices are 1, 2, ..., n.\n                                 # Let v2 be vertex 2.\n                                 # Let v1 be vertex 1.\n                                 # Then v3 can be vertex 3, 4, ..., n.\n                                 # If v3 = j, the number of vertices on the arc (1, j) not containing 2 is j-1-1 = j-2.\n                                 # The number of edges on this arc is j-2.\n                                 # So k = j-2.\n                                 # Angle = (j-2) * 180 / n.\n                                 # j must be at least 3.\n                                 # k must be at least 1 (for j=3).\n                                 # k can be at most n-2 (for j=n).\n                                 # So the loop `for k in range(1, n-1)` is correct for `k = j-2`.\n                                 # Then `j = k+2`.\n                                 # So `v3 = k+2`.\n\n            best_v3 = k + 2\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 1111,
        "thoughts_token_count": 0
    }
}