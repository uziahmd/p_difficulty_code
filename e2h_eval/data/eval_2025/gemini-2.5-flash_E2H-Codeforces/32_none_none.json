{
    "start": 1758293702.632017,
    "end": 1758293704.516577,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 32,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Array Stabilization\n\nYou are given an array $$$a$$$ consisting of $$$n$$$ integer numbers.Let instability of the array be the following value: $$$\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$$$.You have to remove exactly one element from this array to minimize instability of the resulting $$$(n-1)$$$-elements array. Your task is to calculate the minimum possible instability.\n\n## Input\nThe first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of elements in the array $$$a$$$.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — elements of the array $$$a$$$.\n\n## Output\nPrint one integer — the minimum possible instability of the array if you have to remove exactly one element from the array $$$a$$$.\n\n## Example\n### Input\n['4\\n1 3 3 7', '2\\n1 100000']\n\n### Output\n['2', '0']\n\n## Note\nIn the first example you can remove $$$7$$$ then instability of the remaining array will be $$$3 - 1 = 2$$$.In the second example you can remove either $$$1$$$ or $$$100000$$$ then instability of the remaining array will be $$$100000 - 100000 = 0$$$ and $$$1 - 1 = 0$$$ correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 2:\n        print(0)\n        return\n\n    a.sort()\n\n    # Case 1: Remove the smallest element\n    # The remaining array will have min a[1] and max a[n-1]\n    instability1 = a[n-1] - a[1]\n\n    # Case 2: Remove the largest element\n    # The remaining array will have min a[0] and max a[n-2]\n    instability2 = a[n-2] - a[0]\n\n    # The minimum instability will be the minimum of these two cases\n    print(min(instability1, instability2))\n\nif __name__ == '__main__':\n    solve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 2:\n        print(0)\n        return\n\n    a.sort()\n\n    # Case 1: Remove the smallest element\n    # The remaining array will have min a[1] and max a[n-1]\n    instability1 = a[n-1] - a[1]\n\n    # Case 2: Remove the largest element\n    # The remaining array will have min a[0] and max a[n-2]\n    instability2 = a[n-2] - a[0]\n\n    # The minimum instability will be the minimum of these two cases\n    print(min(instability1, instability2))\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 453,
        "completion_token_count": 191,
        "thoughts_token_count": 0
    }
}