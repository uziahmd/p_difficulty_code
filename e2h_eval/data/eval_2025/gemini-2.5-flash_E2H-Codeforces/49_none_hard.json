{
    "start": 1758293741.774309,
    "end": 1758293768.841362,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:56 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 1:\n        if m == 0:\n            print(\"YES\")\n            print(\"1\")\n        else:\n            print(\"NO\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges_data = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        if l % g != 0:\n            print(\"NO\")\n            return\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges_data.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    visited = [False] * (n + 1)\n\n    for start_node in range(1, n + 1):\n        if not visited[start_node]:\n            if not adj[start_node]:\n                ans[start_node] = 1\n                visited[start_node] = True\n                continue\n\n            q = [(start_node, -1)]\n            visited[start_node] = True\n            \n            initial_val_found = False\n            for neighbor, g, l in adj[start_node]:\n                if g == l:\n                    ans[start_node] = g\n                    initial_val_found = True\n                    break\n            \n            if not initial_val_found:\n                ans[start_node] = 1 # A placeholder value, will be adjusted later if needed\n\n            head = 0\n            while head < len(q):\n                u, prev_val = q[head]\n                head += 1\n\n                if ans[u] == 0: # This should not happen if initial_val_found is true for start_node\n                    print(\"NO\")\n                    return\n\n                for v, g, l in adj[u]:\n                    if ans[v] == 0:\n                        if l % ans[u] != 0:\n                            print(\"NO\")\n                            return\n                        \n                        temp_val = l // ans[u]\n                        if g % temp_val != 0:\n                            print(\"NO\")\n                            return\n                        \n                        ans[v] = g // temp_val\n                        if (ans[u] * ans[v]) // (gcd(ans[u], ans[v])) != l or gcd(ans[u], ans[v]) != g:\n                            print(\"NO\")\n                            return\n\n                        visited[v] = True\n                        q.append((v, ans[u]))\n                    else:\n                        if (ans[u] * ans[v]) // (gcd(ans[u], ans[v])) != l or gcd(ans[u], ans[v]) != g:\n                            print(\"NO\")\n                            return\n            \n            if not initial_val_found:\n                # If we started with ans[start_node] = 1, we need to find the correct multiplier\n                # Find the actual GCD of all values in the component\n                component_nodes = [node for node, _ in q]\n                \n                if not component_nodes: # Should not happen if start_node has neighbors\n                    continue\n                \n                current_gcd = 0\n                for node in component_nodes:\n                    if ans[node] == 0: # Should not happen\n                        print(\"NO\")\n                        return\n                    if current_gcd == 0:\n                        current_gcd = ans[node]\n                    else:\n                        current_gcd = gcd(current_gcd, ans[node])\n                \n                # Check consistency for the first edge\n                first_u, first_v, first_g, first_l = 0,0,0,0\n                if q:\n                    first_u = q[0][0]\n                    for neighbor_v, neighbor_g, neighbor_l in adj[first_u]:\n                        first_v, first_g, first_l = neighbor_v, neighbor_g, neighbor_l\n                        break\n                \n                if first_g == 0: # This means the start_node had no neighbors, handled above.\n                    continue\n\n                # The values in ans are relative. We need to find a multiplier 'k'\n                # such that k * ans[first_u] and k * ans[first_v] satisfy the GCD/LCM conditions.\n                # Specifically, gcd(k * ans[first_u], k * ans[first_v]) = k * gcd(ans[first_u], ans[first_v]) = first_g\n                # So, k = first_g // gcd(ans[first_u], ans[first_v])\n                \n                relative_gcd = gcd(ans[first_u], ans[first_v])\n                if first_g % relative_gcd != 0:\n                    print(\"NO\")\n                    return\n                \n                k = first_g // relative_gcd\n\n                # Verify k for all nodes in the component\n                for node in component_nodes:\n                    ans[node] *= k\n                    if ans[node] > 10**6 or ans[node] < 1:\n                        print(\"NO\")\n                        return\n                \n                # Re-verify all edges in the component\n                for u_comp in component_nodes:\n                    for v_comp, g_comp, l_comp in adj[u_comp]:\n                        if v_comp in component_nodes: # Only check edges within the current component\n                            if (ans[u_comp] * ans[v_comp]) // (gcd(ans[u_comp], ans[v_comp])) != l_comp or \\\n                               gcd(ans[u_comp], ans[v_comp]) != g_comp:\n                                print(\"NO\")\n                                return\n\n    # Check for unvisited nodes (isolated nodes)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            ans[i] = 1 # Assign 1 to isolated nodes\n            visited[i] = True\n\n    # Final verification for all edges\n    for u, v, g, l in edges_data:\n        if (ans[u] * ans[v]) // (gcd(ans[u], ans[v])) != l or gcd(ans[u], ans[v]) != g:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*(ans[1:]))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if n == 1:\n        if m == 0:\n            print(\"YES\")\n            print(\"1\")\n        else:\n            print(\"NO\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges_data = []\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        if l % g != 0:\n            print(\"NO\")\n            return\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges_data.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    visited = [False] * (n + 1)\n\n    for start_node in range(1, n + 1):\n        if not visited[start_node]:\n            if not adj[start_node]:\n                ans[start_node] = 1\n                visited[start_node] = True\n                continue\n\n            q = [(start_node, -1)]\n            visited[start_node] = True\n            \n            initial_val_found = False\n            for neighbor, g, l in adj[start_node]:\n                if g == l:\n                    ans[start_node] = g\n                    initial_val_found = True\n                    break\n            \n            if not initial_val_found:\n                ans[start_node] = 1 # A placeholder value, will be adjusted later if needed\n\n            head = 0\n            while head < len(q):\n                u, prev_val = q[head]\n                head += 1\n\n                if ans[u] == 0: # This should not happen if initial_val_found is true for start_node\n                    print(\"NO\")\n                    return\n\n                for v, g, l in adj[u]:\n                    if ans[v] == 0:\n                        if l % ans[u] != 0:\n                            print(\"NO\")\n                            return\n                        \n                        temp_val = l // ans[u]\n                        if g % temp_val != 0:\n                            print(\"NO\")\n                            return\n                        \n                        ans[v] = g // temp_val\n                        if (ans[u] * ans[v]) // (gcd(ans[u], ans[v])) != l or gcd(ans[u], ans[v]) != g:\n                            print(\"NO\")\n                            return\n\n                        visited[v] = True\n                        q.append((v, ans[u]))\n                    else:\n                        if (ans[u] * ans[v]) // (gcd(ans[u], ans[v])) != l or gcd(ans[u], ans[v]) != g:\n                            print(\"NO\")\n                            return\n            \n            if not initial_val_found:\n                # If we started with ans[start_node] = 1, we need to find the correct multiplier\n                # Find the actual GCD of all values in the component\n                component_nodes = [node for node, _ in q]\n                \n                if not component_nodes: # Should not happen if start_node has neighbors\n                    continue\n                \n                current_gcd = 0\n                for node in component_nodes:\n                    if ans[node] == 0: # Should not happen\n                        print(\"NO\")\n                        return\n                    if current_gcd == 0:\n                        current_gcd = ans[node]\n                    else:\n                        current_gcd = gcd(current_gcd, ans[node])\n                \n                # Check consistency for the first edge\n                first_u, first_v, first_g, first_l = 0,0,0,0\n                if q:\n                    first_u = q[0][0]\n                    for neighbor_v, neighbor_g, neighbor_l in adj[first_u]:\n                        first_v, first_g, first_l = neighbor_v, neighbor_g, neighbor_l\n                        break\n                \n                if first_g == 0: # This means the start_node had no neighbors, handled above.\n                    continue\n\n                # The values in ans are relative. We need to find a multiplier 'k'\n                # such that k * ans[first_u] and k * ans[first_v] satisfy the GCD/LCM conditions.\n                # Specifically, gcd(k * ans[first_u], k * ans[first_v]) = k * gcd(ans[first_u], ans[first_v]) = first_g\n                # So, k = first_g // gcd(ans[first_u], ans[first_v])\n                \n                relative_gcd = gcd(ans[first_u], ans[first_v])\n                if first_g % relative_gcd != 0:\n                    print(\"NO\")\n                    return\n                \n                k = first_g // relative_gcd\n\n                # Verify k for all nodes in the component\n                for node in component_nodes:\n                    ans[node] *= k\n                    if ans[node] > 10**6 or ans[node] < 1:\n                        print(\"NO\")\n                        return\n                \n                # Re-verify all edges in the component\n                for u_comp in component_nodes:\n                    for v_comp, g_comp, l_comp in adj[u_comp]:\n                        if v_comp in component_nodes: # Only check edges within the current component\n                            if (ans[u_comp] * ans[v_comp]) // (gcd(ans[u_comp], ans[v_comp])) != l_comp or \\\n                               gcd(ans[u_comp], ans[v_comp]) != g_comp:\n                                print(\"NO\")\n                                return\n\n    # Check for unvisited nodes (isolated nodes)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            ans[i] = 1 # Assign 1 to isolated nodes\n            visited[i] = True\n\n    # Final verification for all edges\n    for u, v, g, l in edges_data:\n        if (ans[u] * ans[v]) // (gcd(ans[u], ans[v])) != l or gcd(ans[u], ans[v]) != g:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*(ans[1:]))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 551,
        "completion_token_count": 1521,
        "thoughts_token_count": 0
    }
}