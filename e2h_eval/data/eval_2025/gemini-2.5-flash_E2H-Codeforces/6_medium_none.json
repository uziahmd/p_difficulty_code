{
    "start": 1758011747.2586653,
    "end": 1758011805.7598102,
    "start-formatted": "2025-09-16 17:35 KST",
    "end-formatted": "2025-09-16 17:36 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**My Thinking on the Optimal Voucher Selection**\n\nAlright, I've got this competitive programming problem where Leha wants to maximize his vacation time with minimal cost, selecting two non-overlapping vouchers whose durations sum to a target 'x'.  A brute-force approach would be N squared, which is too slow for the problem constraints. I need something faster, like N log N or N.\n\nHere's my thought process: I need to efficiently find two vouchers that satisfy the duration and non-intersection criteria while minimizing total cost.  The non-intersection is the key condition.  It suggests that sorting the vouchers by start or end times is crucial.\n\nI'm thinking of fixing one voucher 'i' and then finding a suitable 'j'.  The tricky part is efficiently searching for 'j' that meets the duration and non-overlap. I realized that keeping track of minimum costs for various durations, while considering the non-intersection rule, will be efficient. I started by sorting vouchers by start time and end time, hoping to use a sweep-line algorithm with a suitable data structure for the duration-based search, while meeting the non-intersection.\n\nI've come up with an approach. I'll maintain an array called `min_cost_for_duration`, indexed by the voucher duration. During a sweep from start day to end, for each day, I'll update this array with minimum costs of vouchers that end strictly before that day. Now, when I see a voucher starting today (potential 'j'), I'll check if there's a matching voucher (potential 'i') with required duration, with a suitable cost and already ended. This is critical for the non-intersection.\n\nThe algorithm iterates through each day and updates `min_cost_for_duration` from vouchers that ended on the day. Then, it uses this information when considering any voucher starting from that day, effectively combining the duration and non-overlapping constraint. The total complexity is proportional to N (vouchers) and MAX_COORD (max coordinate), and the array is appropriately small, which gives the desired run time.\n",
    "response": "The problem asks us to find two distinct non-overlapping vouchers `i` and `j` such that the sum of their durations is exactly `x`, and their total cost (`cost_i + cost_j`) is minimized. If no such pair exists, we should output -1.\n\nLet's define the duration of a voucher `k` as `duration_k = r_k - l_k + 1`.\nTwo vouchers `i` and `j` are non-overlapping if `r_i < l_j` or `r_j < l_i`. This means one voucher must end before the other begins.\n\nWe can solve this problem efficiently using a sweep-line algorithm. The maximum coordinate for `l` and `r` is `2 * 10^5`. Let's denote this `MAX_COORD`.\n\n**Algorithm:**\n\n1.  **Initialization:**\n    *   Initialize `min_total_cost` to infinity. This will store our minimum combined cost.\n    *   Create an array `min_cost_for_duration` of size `x + 1`, initialized to infinity. `min_cost_for_duration[d]` will store the minimum cost of a single voucher with duration `d` that has *already ended* by the current day in our sweep.\n\n2.  **Group Vouchers:**\n    To process vouchers efficiently by their start and end dates, we'll group them:\n    *   `vouchers_by_start[day]`: A list of `(r, cost)` for all vouchers that start on `day`.\n    *   `vouchers_by_end[day]`: A list of `(l, cost)` for all vouchers that end on `day`.\n    These can be implemented as lists of lists, where the index represents the day. The size of these lists should be `MAX_COORD + 1`.\n\n3.  **Sweep Line:**\n    Iterate `current_day` from `1` to `MAX_COORD`. In each iteration:\n\n    *   **Step 1: Update `min_cost_for_duration` (processing vouchers that *ended* on `current_day - 1`)**\n        For each voucher `(l_i, cost_i)` in `vouchers_by_end[current_day - 1]`:\n        (These vouchers ended strictly before `current_day`.)\n        Calculate its duration: `duration_i = (current_day - 1) - l_i + 1`.\n        If `duration_i` is a valid duration (i.e., `1 <= duration_i <= x`):\n        Update `min_cost_for_duration[duration_i] = min(min_cost_for_duration[duration_i], cost_i)`.\n        This ensures `min_cost_for_duration[d]` holds the minimum cost for a voucher of duration `d` that has ended *before* `current_day`.\n\n    *   **Step 2: Process vouchers starting on `current_day` (potential `j` vouchers)**\n        For each voucher `(r_j, cost_j)` in `vouchers_by_start[current_day]`:\n        Calculate its duration: `duration_j = r_j - current_day + 1`.\n        If `duration_j < x` (a voucher of duration `x` cannot be paired with another positive duration voucher to sum to `x`):\n            Calculate the `target_duration_i = x - duration_j`.\n            If `target_duration_i > 0` and `target_duration_i <= x` and `min_cost_for_duration[target_duration_i]` is not infinity:\n                We have found a valid pair: voucher `j` (starting on `current_day`) and a voucher `i` (which ended before `current_day` and has `target_duration_i` and `min_cost_for_duration[target_duration_i]`).\n                Update `min_total_cost = min(min_total_cost, cost_j + min_cost_for_duration[target_duration_i])`.\n\n4.  **Result:**\n    After the sweep, if `min_total_cost` is still infinity, it means no valid pair was found, so print -1. Otherwise, print `min_total_cost`.\n\n**Time Complexity:**\n*   Grouping vouchers: `O(N)` for iterating through all `N` vouchers.\n*   Sweep line: The loop runs `MAX_COORD` times. Inside the loop, we iterate through vouchers associated with `current_day - 1` (for `vouchers_by_end`) and `current_day` (for `vouchers_by_start`). Each voucher is processed exactly twice across the entire sweep (once when its end day is `current_day - 1`, and once when its start day is `current_day`). Array lookups/updates are `O(1)`.\n*   Total time complexity: `O(MAX_COORD + N)`. Given `MAX_COORD = 2 * 10^5` and `N = 2 * 10^5`, this is efficient enough.\n\n**Space Complexity:**\n*   `vouchers_by_start` and `vouchers_by_end`: `O(MAX_COORD + N)` (lists store up to `N` vouchers in total, and `MAX_COORD` list objects).\n*   `min_cost_for_duration`: `O(x)`, which is at most `O(MAX_COORD)`.\n*   Total space complexity: `O(MAX_COORD + N)`.\n\n**Example Walkthrough (First Sample):**\n`n=4, x=5`\nVouchers:\n1: (1, 3, 4) -> duration 3\n2: (1, 2, 5) -> duration 2\n3: (5, 6, 1) -> duration 2\n4: (1, 2, 4) -> duration 2\n\n`MAX_COORD = 6` (max `r` is 6)\n`min_total_cost = inf`\n`min_cost_for_duration = [inf, inf, inf, inf, inf, inf]` (size `x+1 = 6`)\n\n`vouchers_by_start`:\n`1: [(3, 4), (2, 5), (2, 4)]`\n`5: [(6, 1)]`\n\n`vouchers_by_end`:\n`2: [(1, 5), (1, 4)]` (voucher (1,2,5) and (1,2,4))\n`3: [(1, 4)]` (voucher (1,3,4))\n`6: [(5, 1)]` (voucher (5,6,1))\n\n`current_day = 1`:\n  1. `vouchers_by_end[0]` is empty. `min_cost_for_duration` unchanged.\n  2. `vouchers_by_start[1]`:\n     - (1,3,4): `dur=3`, `target_dur=2`. `min_cost_for_duration[2]` is inf. No update.\n     - (1,2,5): `dur=2`, `target_dur=3`. `min_cost_for_duration[3]` is inf. No update.\n     - (1,2,4): `dur=2`, `target_dur=3`. `min_cost_for_duration[3]` is inf. No update.\n\n`current_day = 2`:\n  1. `vouchers_by_end[1]` is empty. `min_cost_for_duration` unchanged.\n  2. `vouchers_by_start[2]` is empty.\n\n`current_day = 3`:\n  1. `vouchers_by_end[2]`:\n     - (1,5) (from (1,2,5)): `dur=2`. `min_cost_for_duration[2] = min(inf, 5) = 5`.\n     - (1,4) (from (1,2,4)): `dur=2`. `min_cost_for_duration[2] = min(5, 4) = 4`.\n     `min_cost_for_duration = [inf, inf, 4, inf, inf, inf]`\n  2. `vouchers_by_start[3]` is empty.\n\n`current_day = 4`:\n  1. `vouchers_by_end[3]`:\n     - (1,4) (from (1,3,4)): `dur=3`. `min_cost_for_duration[3] = min(inf, 4) = 4`.\n     `min_cost_for_duration = [inf, inf, 4, 4, inf, inf]`\n  2. `vouchers_by_start[4]` is empty.\n\n`current_day = 5`:\n  1. `vouchers_by_end[4]` is empty. `min_cost_for_duration` unchanged.\n  2. `vouchers_by_start[5]`:\n     - (5,6,1): `dur=2`, `target_dur=3`. `min_cost_for_duration[3]` is `4`.\n       `min_total_cost = min(inf, 1 + 4) = 5`.\n\n`current_day = 6`:\n  1. `vouchers_by_end[5]` is empty. `min_cost_for_duration` unchanged.\n  2. `vouchers_by_start[6]` is empty.\n\nFinal `min_total_cost = 5`.\n\n```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    # Max coordinate can be 2 * 10^5\n    MAX_COORD = 2 * 10**5\n\n    # vouchers_by_start[day] stores a list of (r, cost) for vouchers starting on 'day'\n    vouchers_by_start = [[] for _ in range(MAX_COORD + 1)]\n    # vouchers_by_end[day] stores a list of (l, cost) for vouchers ending on 'day'\n    vouchers_by_end = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers_by_start[l].append((r, cost))\n        vouchers_by_end[r].append((l, cost))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher with duration 'd'\n    # that has ended strictly before the current_day in the sweep.\n    # Initialize with a large value (infinity)\n    min_cost_for_duration = [float('inf')] * (x + 1)\n    \n    min_total_cost = float('inf')\n\n    # Sweep line from day 1 to MAX_COORD\n    for current_day in range(1, MAX_COORD + 1):\n        # Step 1: Update min_cost_for_duration with vouchers that ended on (current_day - 1)\n        # These vouchers are now available to be paired with vouchers starting on current_day or later.\n        if current_day - 1 >= 1: # Ensure day is valid\n            for l_i, cost_i in vouchers_by_end[current_day - 1]:\n                duration_i = (current_day - 1) - l_i + 1\n                if 1 <= duration_i <= x:\n                    min_cost_for_duration[duration_i] = min(min_cost_for_duration[duration_i], cost_i)\n\n        # Step 2: Process vouchers that start on current_day\n        # These are potential 'j' vouchers. We look for a suitable 'i' voucher\n        # that has already ended (i.e., its info is in min_cost_for_duration).\n        for r_j, cost_j in vouchers_by_start[current_day]:\n            duration_j = r_j - current_day + 1\n            \n            # If duration_j is exactly x, it cannot be paired with another voucher\n            # to sum to x (as other voucher must have positive duration).\n            # If duration_j > x, it's also not useful.\n            if 1 <= duration_j < x:\n                target_duration_i = x - duration_j\n                \n                if 1 <= target_duration_i <= x: # Ensure target_duration_i is a valid duration\n                    if min_cost_for_duration[target_duration_i] != float('inf'):\n                        min_total_cost = min(min_total_cost, cost_j + min_cost_for_duration[target_duration_i])\n\n    if min_total_cost == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(min_total_cost) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    # Max coordinate can be 2 * 10^5\n    MAX_COORD = 2 * 10**5\n\n    # vouchers_by_start[day] stores a list of (r, cost) for vouchers starting on 'day'\n    vouchers_by_start = [[] for _ in range(MAX_COORD + 1)]\n    # vouchers_by_end[day] stores a list of (l, cost) for vouchers ending on 'day'\n    vouchers_by_end = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers_by_start[l].append((r, cost))\n        vouchers_by_end[r].append((l, cost))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher with duration 'd'\n    # that has ended strictly before the current_day in the sweep.\n    # Initialize with a large value (infinity)\n    min_cost_for_duration = [float('inf')] * (x + 1)\n    \n    min_total_cost = float('inf')\n\n    # Sweep line from day 1 to MAX_COORD\n    for current_day in range(1, MAX_COORD + 1):\n        # Step 1: Update min_cost_for_duration with vouchers that ended on (current_day - 1)\n        # These vouchers are now available to be paired with vouchers starting on current_day or later.\n        if current_day - 1 >= 1: # Ensure day is valid\n            for l_i, cost_i in vouchers_by_end[current_day - 1]:\n                duration_i = (current_day - 1) - l_i + 1\n                if 1 <= duration_i <= x:\n                    min_cost_for_duration[duration_i] = min(min_cost_for_duration[duration_i], cost_i)\n\n        # Step 2: Process vouchers that start on current_day\n        # These are potential 'j' vouchers. We look for a suitable 'i' voucher\n        # that has already ended (i.e., its info is in min_cost_for_duration).\n        for r_j, cost_j in vouchers_by_start[current_day]:\n            duration_j = r_j - current_day + 1\n            \n            # If duration_j is exactly x, it cannot be paired with another voucher\n            # to sum to x (as other voucher must have positive duration).\n            # If duration_j > x, it's also not useful.\n            if 1 <= duration_j < x:\n                target_duration_i = x - duration_j\n                \n                if 1 <= target_duration_i <= x: # Ensure target_duration_i is a valid duration\n                    if min_cost_for_duration[target_duration_i] != float('inf'):\n                        min_total_cost = min(min_total_cost, cost_j + min_cost_for_duration[target_duration_i])\n\n    if min_total_cost == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(min_total_cost) + \"\\n\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 789,
        "completion_token_count": 3000,
        "thoughts_token_count": 4396
    }
}