{
    "start": 1758011282.7232285,
    "end": 1758011314.7676792,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    vouchers = []\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers.append((l, r, cost))\n\n    vouchers.sort()\n\n    min_cost = float('inf')\n\n    # Max possible coordinate for l or r is 2 * 10^5\n    MAX_COORD = 2 * 10**5\n\n    # min_cost_for_duration[duration][end_day] stores the minimum cost\n    # of a voucher with given duration that ends on end_day.\n    # This structure is not efficient for querying.\n    # Instead, we can use an array that stores the minimum cost for each duration,\n    # considering vouchers ending up to a certain day.\n\n    # min_cost_ending_at[r][duration] = minimum cost of a voucher ending at r with specified duration\n    # This would be too large: MAX_COORD * MAX_COORD\n    \n    # Let's iterate through all possible start days.\n    # We can process vouchers sorted by their start day.\n    # Or, we can process by end day.\n\n    # Let's use a sweep-line approach.\n    # Iterate through possible end days `r_i` of the first voucher.\n    # For each `r_i`, we want to find a second voucher `j` such that `l_j > r_i`\n    # and `(r_i - l_i + 1) + (r_j - l_j + 1) = x`.\n    # This means `(r_j - l_j + 1) = x - (r_i - l_i + 1)`.\n\n    # We can group vouchers by their start day.\n    # events = []\n    # for l, r, cost in vouchers:\n    #     events.append((l, 'start', r, cost))\n    #     events.append((r + 1, 'end', r, cost)) # For sweep line, consider events at r+1\n\n    # This problem can be solved efficiently by iterating through each voucher `i`\n    # and trying to find a second voucher `j`.\n    # The condition `r_i < l_j` or `r_j < l_i` means they are disjoint.\n    # We want to minimize `cost_i + cost_j`.\n\n    # Let's group vouchers by their duration.\n    # `vouchers_by_duration[d]` will store a list of (l, r, cost) for vouchers with duration `d`.\n    \n    # A more common approach for this type of problem is to iterate through all possible\n    # values of `r_i` (end day of the first voucher).\n    # For each `r_i`, we need to find a voucher `j` such that `l_j > r_i` and `duration_j = x - duration_i`.\n    # To do this efficiently, we can maintain for each duration `d`, the minimum cost\n    # of a voucher with duration `d` that starts after `r_i`.\n    # This requires processing vouchers in a specific order.\n\n    # Let's use an array `min_cost_for_duration_after_day[duration]`\n    # This array will store the minimum cost of a voucher with that duration\n    # that has `l_j > current_day`.\n    # We can iterate `current_day` from `MAX_COORD` down to `1`.\n    # This is complicated because we need to consider `r_i < l_j` or `r_j < l_i`.\n\n    # Let's re-evaluate the disjoint condition.\n    # Two vouchers (l1, r1, c1) and (l2, r2, c2) are disjoint if r1 < l2 or r2 < l1.\n    # We want to find such a pair with (r1 - l1 + 1) + (r2 - l2 + 1) = x and minimal c1 + c2.\n\n    # Create a list of all vouchers.\n    # Group vouchers by their start day.\n    # `vouchers_starting_on_day[l]` will be a list of `(r, cost)` for vouchers starting on day `l`.\n    vouchers_starting_on_day = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_starting_on_day[l].append((r, cost))\n\n    # `min_cost_for_duration[duration]` stores the minimum cost of a voucher\n    # with that `duration` encountered so far.\n    # Initialize with infinity.\n    min_cost_for_duration = [float('inf')] * (MAX_COORD + 1) # duration can be up to MAX_COORD\n\n    ans = float('inf')\n\n    # Iterate `l1` from 1 to `MAX_COORD`.\n    # `l1` is the start day of the first voucher.\n    for l1 in range(1, MAX_COORD + 1):\n        # When we are at `l1`, we have already processed all vouchers that start before `l1`.\n        # For any voucher `(l_prev, r_prev, cost_prev)` with `l_prev < l1`,\n        # it is a candidate for the first voucher.\n        # If we choose `(l_prev, r_prev, cost_prev)` as the first voucher,\n        # we need to find a second voucher `(l2, r2, cost2)` such that `l2 > r_prev`\n        # and `(r_prev - l_prev + 1) + (r2 - l2 + 1) = x`.\n        # This approach is not efficient enough because `r_prev` can be large.\n\n    # Let's iterate through all possible `r` values (end day of a voucher).\n    # We need to maintain minimum costs for durations.\n    # `dp[duration]` stores the minimum cost of a voucher with that `duration`\n    # that has ended by the current `r_i`.\n    # This doesn't seem right.\n\n    # Let's try iterating through each voucher as the first one.\n    # For each voucher `(l1, r1, c1)`:\n    #   We need to find a voucher `(l2, r2, c2)` such that:\n    #     1. `r1 < l2` OR `r2 < l1` (disjoint)\n    #     2. `(r1 - l1 + 1) + (r2 - l2 + 1) = x` (total duration)\n    #     3. `c1 + c2` is minimized.\n\n    # The condition `r2 < l1` is symmetric to `r1 < l2`.\n    # Let's assume `r1 < l2`.\n    # For a fixed voucher `(l1, r1, c1)`:\n    #   `duration1 = r1 - l1 + 1`\n    #   `duration2 = x - duration1`\n    #   If `duration2 <= 0`, this `(l1, r1, c1)` cannot be part of a valid pair.\n    #   We need to find a voucher `(l2, r2, c2)` such that:\n    #     `l2 > r1`\n    #     `r2 - l2 + 1 = duration2`\n    #     `c2` is minimized.\n\n    # We can iterate `r_i` from 1 to `MAX_COORD`.\n    # At each `r_i`, we process all vouchers that *end* on day `r_i`.\n    # For each such voucher `(l, r_i, cost)`:\n    #   Its duration is `d = r_i - l + 1`.\n    #   We need a second voucher with duration `x - d`.\n    #   This second voucher must start *after* `r_i`.\n    #   So, we need `min_cost_starting_after[r_i][x - d]`.\n\n    # Let's define `min_cost_for_duration_starting_after_day[day][duration]`.\n    # This is too large.\n    # We can use a segment tree or similar data structure to query minimum costs for durations.\n\n    # A common approach for this is to use a sweep-line algorithm.\n    # Events:\n    # 1. Start of a voucher: `l_i`\n    # 2. End of a voucher: `r_i`\n\n    # Let's sort all vouchers by their `l_i`.\n    # `vouchers_sorted_by_l = sorted(vouchers)`\n    # Iterate through `vouchers_sorted_by_l`.\n    # For each voucher `v1 = (l1, r1, c1)`:\n    #   `d1 = r1 - l1 + 1`\n    #   `d2 = x - d1`\n    #   If `d2 <= 0`, continue.\n    #   We need to find `v2 = (l2, r2, c2)` such that `l2 > r1` and `r2 - l2 + 1 = d2`.\n    #   We want to minimize `c2`.\n\n    # To efficiently find such `v2`, we need a data structure that, given `r1` and `d2`,\n    # can query the minimum `c2` among vouchers `(l2, r2, c2)` where `l2 > r1` and `r2 - l2 + 1 = d2`.\n\n    # Let's define `min_cost_ending_at_day[r][duration]`\n    # This is too large. `MAX_COORD * MAX_COORD`\n\n    # Let `min_cost_duration[duration]` be an array storing the minimum cost\n    # of a voucher with that `duration` that we have seen so far and\n    # that satisfies the disjoint condition with a potential *future* voucher.\n\n    # Let's use a sweep line over the days from 1 to MAX_COORD.\n    # `min_cost_for_dur[duration]` stores the minimum cost of a voucher with `duration`\n    # that *has ended by the current day `k`*.\n    # `min_cost_for_dur[duration]` needs to be updated.\n\n    # `min_cost_for_duration_ending_at_or_before[day][duration]`\n    # This is still too large.\n\n    # A better approach:\n    # `min_cost_ending_on_day[day]` stores an array/dictionary mapping `duration` to `min_cost`.\n    # `min_cost_ending_on_day[day]` stores `(duration, cost)` pairs for vouchers ending on `day`.\n    \n    # We need to maintain `min_cost_for_duration[duration]` for all durations.\n    # This array will store the minimum cost of a voucher with a specific duration\n    # that has *already been processed* and could be the *first* voucher in a pair.\n\n    # Let's sort all vouchers by their `r` value.\n    # `vouchers_sorted_by_r = sorted(vouchers, key=lambda x: x[1])`\n    # This is useful for `r_i < l_j` type of conditions.\n\n    # Consider iterating through `day` from 1 to `MAX_COORD`.\n    # `min_cost_so_far[duration]` will store the minimum cost of a voucher\n    # with `duration` that has `r < current_day`.\n    # `min_cost_ending_on_day[day]` stores a list of `(duration, cost)` for vouchers ending on `day`.\n\n    # Initialize `min_cost_for_prev_vouchers[duration]` to infinity.\n    # This array will store the minimum cost of a voucher with `duration`\n    # that has already finished.\n    min_cost_for_prev_vouchers = [float('inf')] * (MAX_COORD + 1)\n    \n    # Group vouchers by their start day `l`.\n    # `vouchers_by_l[l]` will be a list of `(r, cost)` for vouchers starting on day `l`.\n    vouchers_by_l = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_by_l[l].append((r, cost))\n\n    ans = float('inf')\n\n    # Iterate `day` from 1 to `MAX_COORD`.\n    # `day` represents `l_j` in `r_i < l_j`.\n    # So, `day` is the start day of the second voucher `j`.\n    # When we are at `day = l_j`:\n    #   1. For all vouchers `(l_j, r_j, c_j)` that *start* on `day`:\n    #      `duration_j = r_j - l_j + 1`.\n    #      We need to find a voucher `i` such that `r_i < l_j` (i.e., `r_i < day`)\n    #      and `duration_i = x - duration_j`.\n    #      The minimum cost for such `duration_i` is stored in `min_cost_for_prev_vouchers[x - duration_j]`.\n    #      If `min_cost_for_prev_vouchers[x - duration_j]` is not infinity,\n    #      then `c_j + min_cost_for_prev_vouchers[x - duration_j]` is a candidate for `ans`.\n    #   2. After processing all vouchers starting on `day`, we need to update\n    #      `min_cost_for_prev_vouchers` with any vouchers that *ended* on `day - 1`.\n    #      This means vouchers `(l, r, cost)` where `r = day - 1`.\n    #      Their duration is `r - l + 1`. We update `min_cost_for_prev_vouchers[r - l + 1] = min(..., cost)`.\n\n    # Let's adjust the sweep line to iterate `day` from 1 to `MAX_COORD`.\n    # `min_cost_for_duration_ending_before_current_day[d]` will store the minimum cost\n    # of a voucher with duration `d` that ends *before* the current `day`.\n    min_cost_for_duration_ending_before_current_day = [float('inf')] * (MAX_COORD + 1)\n\n    # Group vouchers by their end day `r`.\n    # `vouchers_by_r[r]` will be a list of `(l, cost)` for vouchers ending on day `r`.\n    vouchers_by_r = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_by_r[r].append((l, cost))\n\n    for current_day in range(1, MAX_COORD + 1):\n        # Step 1: Consider `current_day` as `l_j`.\n        # For all vouchers `(current_day, r_j, c_j)` that start on `current_day`:\n        #   `duration_j = r_j - current_day + 1`.\n        #   `duration_i = x - duration_j`.\n        #   If `duration_i > 0` and `duration_i <= MAX_COORD`:\n        #     If `min_cost_for_duration_ending_before_current_day[duration_i]` is not infinity,\n        #     then we found a valid pair.\n        #     `ans = min(ans, c_j + min_cost_for_duration_ending_before_current_day[duration_i])`.\n        for r_j, c_j in vouchers_by_l[current_day]:\n            duration_j = r_j - current_day + 1\n            duration_i_needed = x - duration_j\n            if 1 <= duration_i_needed <= MAX_COORD:\n                if min_cost_for_duration_ending_before_current_day[duration_i_needed] != float('inf'):\n                    ans = min(ans, c_j + min_cost_for_duration_ending_before_current_day[duration_i_needed])\n\n        # Step 2: Update `min_cost_for_duration_ending_before_current_day`.\n        # All vouchers that end on `current_day` are now available to be the first voucher `i`\n        # for future vouchers `j` (i.e., `l_j > current_day`).\n        # So, for each voucher `(l_i, current_day, c_i)` ending on `current_day`:\n        #   `duration_i = current_day - l_i + 1`.\n        #   Update `min_cost_for_duration_ending_before_current_day[duration_i] = min(..., c_i)`.\n        for l_i, c_i in vouchers_by_r[current_day]:\n            duration_i = current_day - l_i + 1\n            min_cost_for_duration_ending_before_current_day[duration_i] = \\\n                min(min_cost_for_duration_ending_before_current_day[duration_i], c_i)\n\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    vouchers = []\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers.append((l, r, cost))\n\n    vouchers.sort()\n\n    min_cost = float('inf')\n\n    # Max possible coordinate for l or r is 2 * 10^5\n    MAX_COORD = 2 * 10**5\n\n    # min_cost_for_duration[duration][end_day] stores the minimum cost\n    # of a voucher with given duration that ends on end_day.\n    # This structure is not efficient for querying.\n    # Instead, we can use an array that stores the minimum cost for each duration,\n    # considering vouchers ending up to a certain day.\n\n    # min_cost_ending_at[r][duration] = minimum cost of a voucher ending at r with specified duration\n    # This would be too large: MAX_COORD * MAX_COORD\n    \n    # Let's iterate through all possible start days.\n    # We can process vouchers sorted by their start day.\n    # Or, we can process by end day.\n\n    # Let's use a sweep-line approach.\n    # Iterate through possible end days `r_i` of the first voucher.\n    # For each `r_i`, we want to find a second voucher `j` such that `l_j > r_i`\n    # and `(r_i - l_i + 1) + (r_j - l_j + 1) = x`.\n    # This means `(r_j - l_j + 1) = x - (r_i - l_i + 1)`.\n\n    # We can group vouchers by their start day.\n    # events = []\n    # for l, r, cost in vouchers:\n    #     events.append((l, 'start', r, cost))\n    #     events.append((r + 1, 'end', r, cost)) # For sweep line, consider events at r+1\n\n    # This problem can be solved efficiently by iterating through each voucher `i`\n    # and trying to find a second voucher `j`.\n    # The condition `r_i < l_j` or `r_j < l_i` means they are disjoint.\n    # We want to minimize `cost_i + cost_j`.\n\n    # Let's group vouchers by their duration.\n    # `vouchers_by_duration[d]` will store a list of (l, r, cost) for vouchers with duration `d`.\n    \n    # A more common approach for this type of problem is to iterate through all possible\n    # values of `r_i` (end day of the first voucher).\n    # For each `r_i`, we need to find a voucher `j` such that `l_j > r_i` and `duration_j = x - duration_i`.\n    # To do this efficiently, we can maintain for each duration `d`, the minimum cost\n    # of a voucher with duration `d` that starts after `r_i`.\n    # This requires processing vouchers in a specific order.\n\n    # Let's use an array `min_cost_for_duration_after_day[duration]`\n    # This array will store the minimum cost of a voucher with that duration\n    # that has `l_j > current_day`.\n    # We can iterate `current_day` from `MAX_COORD` down to `1`.\n    # This is complicated because we need to consider `r_i < l_j` or `r_j < l_i`.\n\n    # Let's re-evaluate the disjoint condition.\n    # Two vouchers (l1, r1, c1) and (l2, r2, c2) are disjoint if r1 < l2 or r2 < l1.\n    # We want to find such a pair with (r1 - l1 + 1) + (r2 - l2 + 1) = x and minimal c1 + c2.\n\n    # Create a list of all vouchers.\n    # Group vouchers by their start day.\n    # `vouchers_starting_on_day[l]` will be a list of `(r, cost)` for vouchers starting on day `l`.\n    vouchers_starting_on_day = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_starting_on_day[l].append((r, cost))\n\n    # `min_cost_for_duration[duration]` stores the minimum cost of a voucher\n    # with that `duration` encountered so far.\n    # Initialize with infinity.\n    min_cost_for_duration = [float('inf')] * (MAX_COORD + 1) # duration can be up to MAX_COORD\n\n    ans = float('inf')\n\n    # Iterate `l1` from 1 to `MAX_COORD`.\n    # `l1` is the start day of the first voucher.\n    for l1 in range(1, MAX_COORD + 1):\n        # When we are at `l1`, we have already processed all vouchers that start before `l1`.\n        # For any voucher `(l_prev, r_prev, cost_prev)` with `l_prev < l1`,\n        # it is a candidate for the first voucher.\n        # If we choose `(l_prev, r_prev, cost_prev)` as the first voucher,\n        # we need to find a second voucher `(l2, r2, cost2)` such that `l2 > r_prev`\n        # and `(r_prev - l_prev + 1) + (r2 - l2 + 1) = x`.\n        # This approach is not efficient enough because `r_prev` can be large.\n\n    # Let's iterate through all possible `r` values (end day of a voucher).\n    # We need to maintain minimum costs for durations.\n    # `dp[duration]` stores the minimum cost of a voucher with that `duration`\n    # that has ended by the current `r_i`.\n    # This doesn't seem right.\n\n    # Let's try iterating through each voucher as the first one.\n    # For each voucher `(l1, r1, c1)`:\n    #   We need to find a voucher `(l2, r2, c2)` such that:\n    #     1. `r1 < l2` OR `r2 < l1` (disjoint)\n    #     2. `(r1 - l1 + 1) + (r2 - l2 + 1) = x` (total duration)\n    #     3. `c1 + c2` is minimized.\n\n    # The condition `r2 < l1` is symmetric to `r1 < l2`.\n    # Let's assume `r1 < l2`.\n    # For a fixed voucher `(l1, r1, c1)`:\n    #   `duration1 = r1 - l1 + 1`\n    #   `duration2 = x - duration1`\n    #   If `duration2 <= 0`, this `(l1, r1, c1)` cannot be part of a valid pair.\n    #   We need to find a voucher `(l2, r2, c2)` such that:\n    #     `l2 > r1`\n    #     `r2 - l2 + 1 = duration2`\n    #     `c2` is minimized.\n\n    # We can iterate `r_i` from 1 to `MAX_COORD`.\n    # At each `r_i`, we process all vouchers that *end* on day `r_i`.\n    # For each such voucher `(l, r_i, cost)`:\n    #   Its duration is `d = r_i - l + 1`.\n    #   We need a second voucher with duration `x - d`.\n    #   This second voucher must start *after* `r_i`.\n    #   So, we need `min_cost_starting_after[r_i][x - d]`.\n\n    # Let's define `min_cost_for_duration_starting_after_day[day][duration]`.\n    # This is too large.\n    # We can use a segment tree or similar data structure to query minimum costs for durations.\n\n    # A common approach for this is to use a sweep-line algorithm.\n    # Events:\n    # 1. Start of a voucher: `l_i`\n    # 2. End of a voucher: `r_i`\n\n    # Let's sort all vouchers by their `l_i`.\n    # `vouchers_sorted_by_l = sorted(vouchers)`\n    # Iterate through `vouchers_sorted_by_l`.\n    # For each voucher `v1 = (l1, r1, c1)`:\n    #   `d1 = r1 - l1 + 1`\n    #   `d2 = x - d1`\n    #   If `d2 <= 0`, continue.\n    #   We need to find `v2 = (l2, r2, c2)` such that `l2 > r1` and `r2 - l2 + 1 = d2`.\n    #   We want to minimize `c2`.\n\n    # To efficiently find such `v2`, we need a data structure that, given `r1` and `d2`,\n    # can query the minimum `c2` among vouchers `(l2, r2, c2)` where `l2 > r1` and `r2 - l2 + 1 = d2`.\n\n    # Let's define `min_cost_ending_at_day[r][duration]`\n    # This is too large. `MAX_COORD * MAX_COORD`\n\n    # Let `min_cost_duration[duration]` be an array storing the minimum cost\n    # of a voucher with that `duration` that we have seen so far and\n    # that satisfies the disjoint condition with a potential *future* voucher.\n\n    # Let's use a sweep line over the days from 1 to MAX_COORD.\n    # `min_cost_for_dur[duration]` stores the minimum cost of a voucher with `duration`\n    # that *has ended by the current day `k`*.\n    # `min_cost_for_dur[duration]` needs to be updated.\n\n    # `min_cost_for_duration_ending_at_or_before[day][duration]`\n    # This is still too large.\n\n    # A better approach:\n    # `min_cost_ending_on_day[day]` stores an array/dictionary mapping `duration` to `min_cost`.\n    # `min_cost_ending_on_day[day]` stores `(duration, cost)` pairs for vouchers ending on `day`.\n    \n    # We need to maintain `min_cost_for_duration[duration]` for all durations.\n    # This array will store the minimum cost of a voucher with a specific duration\n    # that has *already been processed* and could be the *first* voucher in a pair.\n\n    # Let's sort all vouchers by their `r` value.\n    # `vouchers_sorted_by_r = sorted(vouchers, key=lambda x: x[1])`\n    # This is useful for `r_i < l_j` type of conditions.\n\n    # Consider iterating through `day` from 1 to `MAX_COORD`.\n    # `min_cost_so_far[duration]` will store the minimum cost of a voucher\n    # with `duration` that has `r < current_day`.\n    # `min_cost_ending_on_day[day]` stores a list of `(duration, cost)` for vouchers ending on `day`.\n\n    # Initialize `min_cost_for_prev_vouchers[duration]` to infinity.\n    # This array will store the minimum cost of a voucher with `duration`\n    # that has already finished.\n    min_cost_for_prev_vouchers = [float('inf')] * (MAX_COORD + 1)\n    \n    # Group vouchers by their start day `l`.\n    # `vouchers_by_l[l]` will be a list of `(r, cost)` for vouchers starting on day `l`.\n    vouchers_by_l = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_by_l[l].append((r, cost))\n\n    ans = float('inf')\n\n    # Iterate `day` from 1 to `MAX_COORD`.\n    # `day` represents `l_j` in `r_i < l_j`.\n    # So, `day` is the start day of the second voucher `j`.\n    # When we are at `day = l_j`:\n    #   1. For all vouchers `(l_j, r_j, c_j)` that *start* on `day`:\n    #      `duration_j = r_j - l_j + 1`.\n    #      We need to find a voucher `i` such that `r_i < l_j` (i.e., `r_i < day`)\n    #      and `duration_i = x - duration_j`.\n    #      The minimum cost for such `duration_i` is stored in `min_cost_for_prev_vouchers[x - duration_j]`.\n    #      If `min_cost_for_prev_vouchers[x - duration_j]` is not infinity,\n    #      then `c_j + min_cost_for_prev_vouchers[x - duration_j]` is a candidate for `ans`.\n    #   2. After processing all vouchers starting on `day`, we need to update\n    #      `min_cost_for_prev_vouchers` with any vouchers that *ended* on `day - 1`.\n    #      This means vouchers `(l, r, cost)` where `r = day - 1`.\n    #      Their duration is `r - l + 1`. We update `min_cost_for_prev_vouchers[r - l + 1] = min(..., cost)`.\n\n    # Let's adjust the sweep line to iterate `day` from 1 to `MAX_COORD`.\n    # `min_cost_for_duration_ending_before_current_day[d]` will store the minimum cost\n    # of a voucher with duration `d` that ends *before* the current `day`.\n    min_cost_for_duration_ending_before_current_day = [float('inf')] * (MAX_COORD + 1)\n\n    # Group vouchers by their end day `r`.\n    # `vouchers_by_r[r]` will be a list of `(l, cost)` for vouchers ending on day `r`.\n    vouchers_by_r = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_by_r[r].append((l, cost))\n\n    for current_day in range(1, MAX_COORD + 1):\n        # Step 1: Consider `current_day` as `l_j`.\n        # For all vouchers `(current_day, r_j, c_j)` that start on `current_day`:\n        #   `duration_j = r_j - current_day + 1`.\n        #   `duration_i = x - duration_j`.\n        #   If `duration_i > 0` and `duration_i <= MAX_COORD`:\n        #     If `min_cost_for_duration_ending_before_current_day[duration_i]` is not infinity,\n        #     then we found a valid pair.\n        #     `ans = min(ans, c_j + min_cost_for_duration_ending_before_current_day[duration_i])`.\n        for r_j, c_j in vouchers_by_l[current_day]:\n            duration_j = r_j - current_day + 1\n            duration_i_needed = x - duration_j\n            if 1 <= duration_i_needed <= MAX_COORD:\n                if min_cost_for_duration_ending_before_current_day[duration_i_needed] != float('inf'):\n                    ans = min(ans, c_j + min_cost_for_duration_ending_before_current_day[duration_i_needed])\n\n        # Step 2: Update `min_cost_for_duration_ending_before_current_day`.\n        # All vouchers that end on `current_day` are now available to be the first voucher `i`\n        # for future vouchers `j` (i.e., `l_j > current_day`).\n        # So, for each voucher `(l_i, current_day, c_i)` ending on `current_day`:\n        #   `duration_i = current_day - l_i + 1`.\n        #   Update `min_cost_for_duration_ending_before_current_day[duration_i] = min(..., c_i)`.\n        for l_i, c_i in vouchers_by_r[current_day]:\n            duration_i = current_day - l_i + 1\n            min_cost_for_duration_ending_before_current_day[duration_i] = \\\n                min(min_cost_for_duration_ending_before_current_day[duration_i], c_i)\n\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 799,
        "completion_token_count": 4103,
        "thoughts_token_count": 0
    }
}