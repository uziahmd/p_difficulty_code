{
    "start": 1758284896.6905031,
    "end": 1758284911.998383,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Tackling Polycarp's Practice: A Pythonic Approach**\n\nOkay, so I'm looking at this \"Polycarp's Practice\" problem.  My goal is to craft a Python solution, naturally.  Let's break it down. We've got `n` problems to solve across `k` days. The difficulty of each problem, `a_1` through `a_n`, is provided, and we solve them in the given order.  Each day's session involves a contiguous block of problems. The \"profit\" for a day is simply the maximum difficulty of the problems tackled that day. The overall target is to maximize the sum of these daily profits.\n\nThe crucial bit, the insight I have here, is that to get the *maximum* total profit, I need to somehow incorporate the *largest* problem difficulties into the equation as much as possible.  My intuition tells me I should aim to have the *k* largest problem difficulties be the maximum for each of the *k* days. This sounds like the optimal strategy.\n\nLet's test this. If I sort the problem difficulties in descending order, those top *k* values are the ones I'm trying to include as daily maximums.  So, I see that I can pick from the largest values, and the total profit is their sum. But can I *always* partition the problem list so this strategy works? I need to think this through.\n\nI'm thinking I'll start by taking the `k` largest difficulties and their indices in the original list.  Can I construct segments around these maximums so that each segment only has one maximum difficulty? It sounds like it *should* work if I'm careful with how I distribute the rest. For instance, in the example, the values are `9, 6, 5`, which can be arranged in various combinations, such as the example above.\nSo, I should be able to create the `t_j` integers as the number of problems solved in that day. It's a clever challenge! I need to determine an algorithm that accounts for edge cases. Let's start coding!\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Create a list of (difficulty, original_index) pairs\n    indexed_problems = []\n    for i in range(n):\n        indexed_problems.append((a[i], i))\n\n    # Sort problems by difficulty in descending order.\n    # If difficulties are equal, the original index doesn't matter for the value,\n    # but for selecting the k largest, we'll just pick the first k unique values\n    # or k values if there are ties.\n    indexed_problems.sort(key=lambda x: x[0], reverse=True)\n\n    # Select the k largest difficulties and store their original indices\n    # These will be the \"peak\" problems for each day.\n    selected_difficulties = []\n    selected_indices = []\n    for i in range(k):\n        selected_difficulties.append(indexed_problems[i][0])\n        selected_indices.append(indexed_problems[i][1])\n\n    # Calculate the total profit\n    total_profit = sum(selected_difficulties)\n    sys.stdout.write(str(total_profit) + '\\n')\n\n    # Sort the selected indices to determine the cut points in ascending order\n    selected_indices.sort()\n\n    # Determine the number of problems for each day\n    # t_j represents the number of problems on day j\n    # t_1 is problems from index 0 to selected_indices[0]\n    # t_j is problems from selected_indices[j-2]+1 to selected_indices[j-1] for j > 1\n    # t_k is problems from selected_indices[k-2]+1 to n-1\n    \n    day_lengths = []\n    current_start_index = 0\n    for i in range(k - 1):\n        # The i-th selected index (0-indexed) marks the end of a day's problems.\n        # The number of problems for this day is (selected_indices[i] - current_start_index + 1)\n        day_lengths.append(selected_indices[i] - current_start_index + 1)\n        current_start_index = selected_indices[i] + 1\n    \n    # The last day takes all remaining problems\n    day_lengths.append(n - current_start_index)\n\n    sys.stdout.write(' '.join(map(str, day_lengths)) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Create a list of (difficulty, original_index) pairs\n    indexed_problems = []\n    for i in range(n):\n        indexed_problems.append((a[i], i))\n\n    # Sort problems by difficulty in descending order.\n    # If difficulties are equal, the original index doesn't matter for the value,\n    # but for selecting the k largest, we'll just pick the first k unique values\n    # or k values if there are ties.\n    indexed_problems.sort(key=lambda x: x[0], reverse=True)\n\n    # Select the k largest difficulties and store their original indices\n    # These will be the \"peak\" problems for each day.\n    selected_difficulties = []\n    selected_indices = []\n    for i in range(k):\n        selected_difficulties.append(indexed_problems[i][0])\n        selected_indices.append(indexed_problems[i][1])\n\n    # Calculate the total profit\n    total_profit = sum(selected_difficulties)\n    sys.stdout.write(str(total_profit) + '\\n')\n\n    # Sort the selected indices to determine the cut points in ascending order\n    selected_indices.sort()\n\n    # Determine the number of problems for each day\n    # t_j represents the number of problems on day j\n    # t_1 is problems from index 0 to selected_indices[0]\n    # t_j is problems from selected_indices[j-2]+1 to selected_indices[j-1] for j > 1\n    # t_k is problems from selected_indices[k-2]+1 to n-1\n    \n    day_lengths = []\n    current_start_index = 0\n    for i in range(k - 1):\n        # The i-th selected index (0-indexed) marks the end of a day's problems.\n        # The number of problems for this day is (selected_indices[i] - current_start_index + 1)\n        day_lengths.append(selected_indices[i] - current_start_index + 1)\n        current_start_index = selected_indices[i] + 1\n    \n    # The last day takes all remaining problems\n    day_lengths.append(n - current_start_index)\n\n    sys.stdout.write(' '.join(map(str, day_lengths)) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 973,
        "completion_token_count": 596,
        "thoughts_token_count": 798
    }
}