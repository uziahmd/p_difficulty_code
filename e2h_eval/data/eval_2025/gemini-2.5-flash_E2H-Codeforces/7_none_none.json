{
    "start": 1758018537.0900242,
    "end": 1758018548.778221,
    "start-formatted": "2025-09-16 19:28 KST",
    "end-formatted": "2025-09-16 19:29 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children)\n    # Total vertices = 1 (root) + k (children) = k + 1\n    # n = k + 1 => k = n - 1\n    # Since k > 1, n - 1 > 1 => n > 2.\n    # This is a valid snowflake if n > 2.\n    # However, the problem statement says \"This step should be done at least once.\"\n    # which implies there's at least one layer of \"grandchildren\".\n    # So, the smallest snowflake has 3 levels.\n    # 1 (root) + k (children) + k*k (grandchildren) = 1 + k + k^2\n    # So, we are looking for solutions where n = 1 + k + k^2 + ... + k^(d-1)\n    # for some d >= 3 (number of levels) and k > 1.\n\n    # Check for d = 3 (3 levels: root, k children, k*k grandchildren)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4*(1 - n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    # For k to be an integer > 1:\n    # 1. 4n - 3 must be a perfect square.\n    # 2. sqrt(4n - 3) must be odd (so -1 + sqrt is even).\n    # 3. (-1 + sqrt(4n - 3)) / 2 must be > 1.\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(math.isqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Check if sqrt_discriminant is odd\n            if sqrt_discriminant % 2 == 1:\n                k_candidate = (-1 + sqrt_discriminant) // 2\n                if k_candidate > 1:\n                    print(\"YES\")\n                    return\n\n    # Check for d >= 4\n    # n = 1 + k + k^2 + ... + k^(d-1)\n    # This is a geometric series sum: n = (k^d - 1) / (k - 1)\n    # We need to find if there exists k > 1 and d >= 4 such that this holds.\n    # For a fixed d, we need to find an integer k > 1.\n    # k^d - 1 = n * (k - 1)\n    # k^d - n*k + n - 1 = 0\n\n    # The maximum possible d for n = 10^18:\n    # For k=2, n = 2^d - 1. 2^d approx 10^18 => d approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 approx 59.79. So d <= 60.\n    # For larger k, d will be smaller.\n    # For k=3, 3^d approx 10^18 => d approx 18 * log3(10) approx 18 * 2.09 approx 37.7.\n    # For k=10^3, d approx 6.\n    # For k=10^6, d approx 3. (already handled by quadratic)\n    # So d ranges from 4 to about 60.\n\n    # Iterate through possible values of d\n    for d in range(4, 61):\n        # We need to find k such that k^d - 1 = n * (k - 1)\n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k: k^(d-1) < n => k < n^(1/(d-1)).\n        # A slightly tighter upper bound: (k^d - 1)/(k-1) = k^(d-1) + k^(d-2) + ... + 1 approx k^(d-1).\n        # So k^(d-1) < n.\n        # k < n^(1/(d-1)).\n        \n        low = 2\n        # Calculate high more carefully to avoid overflow for n^(1/(d-1))\n        # high = int(n**(1/(d-1))) + 2  # Add a small buffer\n        # A safer upper bound for k: if k^d > n, then it's too large.\n        # For d=4, k^3 < n => k < n^(1/3). Max k is around 10^6.\n        # For d=60, k < n^(1/59). Max k is around 2.\n        \n        # Upper bound for k: k^d - 1 = n(k-1). If k-1 is small, k^d approx n(k-1).\n        # k^(d-1) approx n. So k approx n^(1/(d-1)).\n        # Since k > 1, k^d > n.\n        # max_k_val = int(math.pow(n, 1.0 / (d - 1))) + 2\n        # A simple upper bound is 2 * 10^9 because (2*10^9)^2 > 10^18.\n        # For d=4, k^3 < n, so k < n^(1/3). n^(1/3) for 10^18 is 10^6.\n        # A safe upper bound for k is 10^6 + 7.\n        # For larger d, k will be smaller.\n        # So 10^6 + 7 is a good upper bound for all d >= 4.\n        high = 10**6 + 7 \n\n        # Binary search for k\n        while low <= high:\n            mid = (low + high) // 2\n            if mid == 1: # k must be > 1\n                low = 2\n                continue\n\n            # Calculate sum = 1 + mid + mid^2 + ... + mid^(d-1)\n            # This can overflow if mid is large and d is large.\n            # Instead, check mid^d - 1 == n * (mid - 1)\n            # Or, more robustly, check (mid^d - 1) / (mid - 1) == n\n            \n            # Use a helper function for power to check for overflow\n            current_term = 1\n            current_sum = 1\n            overflow = False\n            for _ in range(1, d):\n                if n // mid < current_term: # current_term * mid would exceed n, so current_sum will exceed n\n                    overflow = True\n                    break\n                current_term *= mid\n                if n - current_term < current_sum: # current_sum + current_term would exceed n\n                    overflow = True\n                    break\n                current_sum += current_term\n            \n            if overflow:\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children)\n    # Total vertices = 1 (root) + k (children) = k + 1\n    # n = k + 1 => k = n - 1\n    # Since k > 1, n - 1 > 1 => n > 2.\n    # This is a valid snowflake if n > 2.\n    # However, the problem statement says \"This step should be done at least once.\"\n    # which implies there's at least one layer of \"grandchildren\".\n    # So, the smallest snowflake has 3 levels.\n    # 1 (root) + k (children) + k*k (grandchildren) = 1 + k + k^2\n    # So, we are looking for solutions where n = 1 + k + k^2 + ... + k^(d-1)\n    # for some d >= 3 (number of levels) and k > 1.\n\n    # Check for d = 3 (3 levels: root, k children, k*k grandchildren)\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4*(1 - n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    # For k to be an integer > 1:\n    # 1. 4n - 3 must be a perfect square.\n    # 2. sqrt(4n - 3) must be odd (so -1 + sqrt is even).\n    # 3. (-1 + sqrt(4n - 3)) / 2 must be > 1.\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(math.isqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Check if sqrt_discriminant is odd\n            if sqrt_discriminant % 2 == 1:\n                k_candidate = (-1 + sqrt_discriminant) // 2\n                if k_candidate > 1:\n                    print(\"YES\")\n                    return\n\n    # Check for d >= 4\n    # n = 1 + k + k^2 + ... + k^(d-1)\n    # This is a geometric series sum: n = (k^d - 1) / (k - 1)\n    # We need to find if there exists k > 1 and d >= 4 such that this holds.\n    # For a fixed d, we need to find an integer k > 1.\n    # k^d - 1 = n * (k - 1)\n    # k^d - n*k + n - 1 = 0\n\n    # The maximum possible d for n = 10^18:\n    # For k=2, n = 2^d - 1. 2^d approx 10^18 => d approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 approx 59.79. So d <= 60.\n    # For larger k, d will be smaller.\n    # For k=3, 3^d approx 10^18 => d approx 18 * log3(10) approx 18 * 2.09 approx 37.7.\n    # For k=10^3, d approx 6.\n    # For k=10^6, d approx 3. (already handled by quadratic)\n    # So d ranges from 4 to about 60.\n\n    # Iterate through possible values of d\n    for d in range(4, 61):\n        # We need to find k such that k^d - 1 = n * (k - 1)\n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k: k^(d-1) < n => k < n^(1/(d-1)).\n        # A slightly tighter upper bound: (k^d - 1)/(k-1) = k^(d-1) + k^(d-2) + ... + 1 approx k^(d-1).\n        # So k^(d-1) < n.\n        # k < n^(1/(d-1)).\n        \n        low = 2\n        # Calculate high more carefully to avoid overflow for n^(1/(d-1))\n        # high = int(n**(1/(d-1))) + 2  # Add a small buffer\n        # A safer upper bound for k: if k^d > n, then it's too large.\n        # For d=4, k^3 < n => k < n^(1/3). Max k is around 10^6.\n        # For d=60, k < n^(1/59). Max k is around 2.\n        \n        # Upper bound for k: k^d - 1 = n(k-1). If k-1 is small, k^d approx n(k-1).\n        # k^(d-1) approx n. So k approx n^(1/(d-1)).\n        # Since k > 1, k^d > n.\n        # max_k_val = int(math.pow(n, 1.0 / (d - 1))) + 2\n        # A simple upper bound is 2 * 10^9 because (2*10^9)^2 > 10^18.\n        # For d=4, k^3 < n, so k < n^(1/3). n^(1/3) for 10^18 is 10^6.\n        # A safe upper bound for k is 10^6 + 7.\n        # For larger d, k will be smaller.\n        # So 10^6 + 7 is a good upper bound for all d >= 4.\n        high = 10**6 + 7 \n\n        # Binary search for k\n        while low <= high:\n            mid = (low + high) // 2\n            if mid == 1: # k must be > 1\n                low = 2\n                continue\n\n            # Calculate sum = 1 + mid + mid^2 + ... + mid^(d-1)\n            # This can overflow if mid is large and d is large.\n            # Instead, check mid^d - 1 == n * (mid - 1)\n            # Or, more robustly, check (mid^d - 1) / (mid - 1) == n\n            \n            # Use a helper function for power to check for overflow\n            current_term = 1\n            current_sum = 1\n            overflow = False\n            for _ in range(1, d):\n                if n // mid < current_term: # current_term * mid would exceed n, so current_sum will exceed n\n                    overflow = True\n                    break\n                current_term *= mid\n                if n - current_term < current_sum: # current_sum + current_term would exceed n\n                    overflow = True\n                    break\n                current_sum += current_term\n            \n            if overflow:\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 1855,
        "thoughts_token_count": 0
    }
}