{
    "start": 1758293713.6505835,
    "end": 1758293724.516026,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n, m = map(int, input().split())\n\n    if n == 1:\n        if m == 0:\n            print(\"YES\")\n            print(\"1\")\n        else:\n            print(\"NO\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, input().split())\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    \n    # Precompute prime factorizations for numbers up to 10^6\n    max_val = 10**6\n    min_prime_factor = [0] * (max_val + 1)\n    primes = []\n    for i in range(2, max_val + 1):\n        if min_prime_factor[i] == 0:\n            min_prime_factor[i] = i\n            primes.append(i)\n        for p in primes:\n            if p > min_prime_factor[i] or i * p > max_val:\n                break\n            min_prime_factor[i * p] = p\n\n    def get_prime_factors(num):\n        factors = {}\n        while num > 1:\n            p = min_prime_factor[num]\n            factors[p] = factors.get(p, 0) + 1\n            num //= p\n        return factors\n\n    def get_num_from_factors(factors):\n        num = 1\n        for p, count in factors.items():\n            num *= (p ** count)\n        return num\n\n    def check_valid(u, v, g, l, val_u, val_v):\n        if math.gcd(val_u, val_v) != g:\n            return False\n        if (val_u * val_v) // math.gcd(val_u, val_v) != l:\n            return False\n        return True\n\n    for start_node in range(1, n + 1):\n        if ans[start_node] != 0:\n            continue\n\n        # Try to find a starting value for start_node\n        found_start_val = False\n        if not adj[start_node]:\n            ans[start_node] = 1 # Default value if no edges\n            found_start_val = True\n        else:\n            first_neighbor, g, l = adj[start_node][0]\n            \n            # Iterate through all divisors of L\n            divisors = []\n            for i in range(1, int(math.sqrt(l)) + 1):\n                if l % i == 0:\n                    divisors.append(i)\n                    if i * i != l:\n                        divisors.append(l // i)\n            divisors.sort()\n\n            for potential_val_u in divisors:\n                if l % potential_val_u == 0 and g % potential_val_u == 0: # Check if potential_val_u is a valid candidate for GCD\n                    potential_val_v = (g * l) // potential_val_u\n                    if potential_val_v > 0 and check_valid(start_node, first_neighbor, g, l, potential_val_u, potential_val_v):\n                        ans[start_node] = potential_val_u\n                        found_start_val = True\n                        break\n            \n            if not found_start_val:\n                # If no direct divisor works, it might be that the initial value isn't directly from an edge.\n                # This problem structure implies that if a solution exists, we can propagate.\n                # Let's just pick 1 for now if no specific constraint is found, and if it fails, it fails.\n                # However, the problem guarantees 1 <= value <= 10^6.\n                # If a node has an edge, its value must be a divisor of L and a multiple of G for that edge.\n                # The above loop covers all possible values for ans[start_node] that satisfy the first edge.\n                # If no such value is found, then this component has no solution.\n                # This branch implies failure for this component.\n                pass # Will be handled by the overall check later.\n\n\n        if not found_start_val and adj[start_node]: # If start_node has edges but no initial value was set\n            print(\"NO\")\n            return\n\n        # If start_node has no edges, it's already set to 1.\n        # If start_node has edges and a value was found, proceed with BFS/DFS.\n        \n        if ans[start_node] != 0: # If a value was set for start_node (either 1 or from an edge)\n            q = [start_node]\n            visited = [False] * (n + 1)\n            visited[start_node] = True\n            \n            head = 0\n            while head < len(q):\n                u = q[head]\n                head += 1\n\n                for v, g_uv, l_uv in adj[u]:\n                    if not visited[v]:\n                        if ans[u] == 0: # This should not happen if we process connected components correctly\n                            print(\"NO\")\n                            return\n\n                        # Calculate potential ans[v]\n                        # ans[u] * ans[v] = g_uv * l_uv\n                        # So ans[v] = (g_uv * l_uv) / ans[u]\n                        \n                        if (g_uv * l_uv) % ans[u] != 0:\n                            print(\"NO\")\n                            return\n                        \n                        potential_ans_v = (g_uv * l_uv) // ans[u]\n\n                        if not (1 <= potential_ans_v <= max_val and \\\n                                math.gcd(ans[u], potential_ans_v) == g_uv and \\\n                                (ans[u] * potential_ans_v) // math.gcd(ans[u], potential_ans_v) == l_uv):\n                            print(\"NO\")\n                            return\n\n                        ans[v] = potential_ans_v\n                        visited[v] = True\n                        q.append(v)\n                    else: # v is already visited\n                        # Check consistency\n                        if not (1 <= ans[u] <= max_val and 1 <= ans[v] <= max_val and \\\n                                math.gcd(ans[u], ans[v]) == g_uv and \\\n                                (ans[u] * ans[v]) // math.gcd(ans[u], ans[v]) == l_uv):\n                            print(\"NO\")\n                            return\n\n    # Final check for all nodes and edges\n    for i in range(1, n + 1):\n        if ans[i] == 0: # Unconnected node, set to 1\n            ans[i] = 1\n        if not (1 <= ans[i] <= max_val):\n            print(\"NO\")\n            return\n\n    for u, v, g, l in edges:\n        if not check_valid(u, v, g, l, ans[u], ans[v]):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*(ans[1:]))\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n, m = map(int, input().split())\n\n    if n == 1:\n        if m == 0:\n            print(\"YES\")\n            print(\"1\")\n        else:\n            print(\"NO\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        u, v, g, l = map(int, input().split())\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n        edges.append((u, v, g, l))\n\n    ans = [0] * (n + 1)\n    \n    # Precompute prime factorizations for numbers up to 10^6\n    max_val = 10**6\n    min_prime_factor = [0] * (max_val + 1)\n    primes = []\n    for i in range(2, max_val + 1):\n        if min_prime_factor[i] == 0:\n            min_prime_factor[i] = i\n            primes.append(i)\n        for p in primes:\n            if p > min_prime_factor[i] or i * p > max_val:\n                break\n            min_prime_factor[i * p] = p\n\n    def get_prime_factors(num):\n        factors = {}\n        while num > 1:\n            p = min_prime_factor[num]\n            factors[p] = factors.get(p, 0) + 1\n            num //= p\n        return factors\n\n    def get_num_from_factors(factors):\n        num = 1\n        for p, count in factors.items():\n            num *= (p ** count)\n        return num\n\n    def check_valid(u, v, g, l, val_u, val_v):\n        if math.gcd(val_u, val_v) != g:\n            return False\n        if (val_u * val_v) // math.gcd(val_u, val_v) != l:\n            return False\n        return True\n\n    for start_node in range(1, n + 1):\n        if ans[start_node] != 0:\n            continue\n\n        # Try to find a starting value for start_node\n        found_start_val = False\n        if not adj[start_node]:\n            ans[start_node] = 1 # Default value if no edges\n            found_start_val = True\n        else:\n            first_neighbor, g, l = adj[start_node][0]\n            \n            # Iterate through all divisors of L\n            divisors = []\n            for i in range(1, int(math.sqrt(l)) + 1):\n                if l % i == 0:\n                    divisors.append(i)\n                    if i * i != l:\n                        divisors.append(l // i)\n            divisors.sort()\n\n            for potential_val_u in divisors:\n                if l % potential_val_u == 0 and g % potential_val_u == 0: # Check if potential_val_u is a valid candidate for GCD\n                    potential_val_v = (g * l) // potential_val_u\n                    if potential_val_v > 0 and check_valid(start_node, first_neighbor, g, l, potential_val_u, potential_val_v):\n                        ans[start_node] = potential_val_u\n                        found_start_val = True\n                        break\n            \n            if not found_start_val:\n                # If no direct divisor works, it might be that the initial value isn't directly from an edge.\n                # This problem structure implies that if a solution exists, we can propagate.\n                # Let's just pick 1 for now if no specific constraint is found, and if it fails, it fails.\n                # However, the problem guarantees 1 <= value <= 10^6.\n                # If a node has an edge, its value must be a divisor of L and a multiple of G for that edge.\n                # The above loop covers all possible values for ans[start_node] that satisfy the first edge.\n                # If no such value is found, then this component has no solution.\n                # This branch implies failure for this component.\n                pass # Will be handled by the overall check later.\n\n\n        if not found_start_val and adj[start_node]: # If start_node has edges but no initial value was set\n            print(\"NO\")\n            return\n\n        # If start_node has no edges, it's already set to 1.\n        # If start_node has edges and a value was found, proceed with BFS/DFS.\n        \n        if ans[start_node] != 0: # If a value was set for start_node (either 1 or from an edge)\n            q = [start_node]\n            visited = [False] * (n + 1)\n            visited[start_node] = True\n            \n            head = 0\n            while head < len(q):\n                u = q[head]\n                head += 1\n\n                for v, g_uv, l_uv in adj[u]:\n                    if not visited[v]:\n                        if ans[u] == 0: # This should not happen if we process connected components correctly\n                            print(\"NO\")\n                            return\n\n                        # Calculate potential ans[v]\n                        # ans[u] * ans[v] = g_uv * l_uv\n                        # So ans[v] = (g_uv * l_uv) / ans[u]\n                        \n                        if (g_uv * l_uv) % ans[u] != 0:\n                            print(\"NO\")\n                            return\n                        \n                        potential_ans_v = (g_uv * l_uv) // ans[u]\n\n                        if not (1 <= potential_ans_v <= max_val and \\\n                                math.gcd(ans[u], potential_ans_v) == g_uv and \\\n                                (ans[u] * potential_ans_v) // math.gcd(ans[u], potential_ans_v) == l_uv):\n                            print(\"NO\")\n                            return\n\n                        ans[v] = potential_ans_v\n                        visited[v] = True\n                        q.append(v)\n                    else: # v is already visited\n                        # Check consistency\n                        if not (1 <= ans[u] <= max_val and 1 <= ans[v] <= max_val and \\\n                                math.gcd(ans[u], ans[v]) == g_uv and \\\n                                (ans[u] * ans[v]) // math.gcd(ans[u], ans[v]) == l_uv):\n                            print(\"NO\")\n                            return\n\n    # Final check for all nodes and edges\n    for i in range(1, n + 1):\n        if ans[i] == 0: # Unconnected node, set to 1\n            ans[i] = 1\n        if not (1 <= ans[i] <= max_val):\n            print(\"NO\")\n            return\n\n    for u, v, g, l in edges:\n        if not check_valid(u, v, g, l, ans[u], ans[v]):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*(ans[1:]))\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 552,
        "completion_token_count": 1728,
        "thoughts_token_count": 0
    }
}