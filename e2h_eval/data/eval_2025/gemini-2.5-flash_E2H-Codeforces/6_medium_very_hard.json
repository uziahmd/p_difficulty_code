{
    "start": 1758011749.762221,
    "end": 1758011819.4789689,
    "start-formatted": "2025-09-16 17:35 KST",
    "end-formatted": "2025-09-16 17:36 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**My plan for this competitive programming problem is as follows:**\n\nI'm given a set of travel vouchers, each with a start date, end date, and cost. My task is to find two non-overlapping vouchers whose combined duration equals a target duration 'x', minimizing their total cost. If no such pair exists, I should output -1.\n\nFirst, I'll need to efficiently represent the vouchers and their properties. My idea is to sort the vouchers based on start and end times or duration. This could potentially help in identifying intersecting vouchers and quickly checking the duration sums.\n\nThe most challenging part of this problem is to efficiently handle the non-intersection condition. Naive approach of checking every pair would be too slow given the constraint on input size. So I have to use a sweep-line approach. \n\nI'll process the vouchers based on their start days and end days. I will precompute a data structure that, for each possible duration, will store the minimum cost of a voucher with that duration ending before a specific day. I can do this with an array called `min_cost_for_duration`, indexed by voucher duration. I will update this `min_cost_for_duration` for all vouchers that end on the current day or before.\n\nThen, as I iterate through the start days, I'll use the pre-computed `min_cost_for_duration` to efficiently check if any voucher ending before my current start day can combine with the current voucher to reach the target duration 'x'. I can get the cost of the `target_duration` voucher from `min_cost_for_duration`, which must have ended before my start day. \n\nIf such a pair is found, I'll update the `min_total_cost` to the minimum of its current value and the combined cost of this voucher pair. If I've iterated through all the days and not found a suitable pair, I'll return -1.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    # Maximum possible coordinate for l_i or r_i\n    # The problem states 1 <= li <= ri <= 2*10^5\n    MAX_COORD = 2 * 10**5\n\n    # Group vouchers by their start day\n    # starts_on_day[day] stores a list of (r, cost) for vouchers starting on 'day'\n    starts_on_day = [[] for _ in range(MAX_COORD + 1)]\n\n    # Group vouchers by their end day\n    # ends_on_day[day] stores a list of (l, cost) for vouchers ending on 'day'\n    ends_on_day = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        starts_on_day[l].append((r, cost))\n        ends_on_day[r].append((l, cost))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher\n    # with duration 'd' that has already ended (i.e., its end day 'r' is less than current_day).\n    # The maximum possible duration is MAX_COORD (e.g., from day 1 to day MAX_COORD).\n    min_cost_for_duration = [float('inf')] * (MAX_COORD + 1)\n\n    min_total_cost = float('inf')\n\n    # Sweep through the days from 1 to MAX_COORD\n    for current_day in range(1, MAX_COORD + 1):\n        # Step 1: Update `min_cost_for_duration` with vouchers that ended at `current_day - 1`.\n        # These vouchers are now available to be paired with any voucher starting at `current_day` or later.\n        for l_prev, cost_prev in ends_on_day[current_day - 1]:\n            duration_prev = (current_day - 1) - l_prev + 1\n            # Only update if the duration is within the valid range.\n            # (duration_prev will always be >= 1 since l_prev >= 1 and current_day-1 >= l_prev)\n            if duration_prev <= MAX_COORD:\n                min_cost_for_duration[duration_prev] = min(min_cost_for_duration[duration_prev], cost_prev)\n\n        # Step 2: Process vouchers starting at `current_day`.\n        # For each such voucher, try to find a suitable preceding voucher.\n        for r_curr, cost_curr in starts_on_day[current_day]:\n            duration_curr = r_curr - current_day + 1\n            \n            # We need a second voucher with duration `target_duration`\n            target_duration = x - duration_curr\n            \n            # Check if target_duration is valid (positive and within MAX_COORD)\n            if 1 <= target_duration <= MAX_COORD:\n                # If there's an available voucher with `target_duration` that ended before `current_day`,\n                # then we found a valid pair.\n                if min_cost_for_duration[target_duration] != float('inf'):\n                    min_total_cost = min(min_total_cost, cost_curr + min_cost_for_duration[target_duration])\n\n    if min_total_cost == float('inf'):\n        print(-1)\n    else:\n        print(min_total_cost)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n\n    # Maximum possible coordinate for l_i or r_i\n    # The problem states 1 <= li <= ri <= 2*10^5\n    MAX_COORD = 2 * 10**5\n\n    # Group vouchers by their start day\n    # starts_on_day[day] stores a list of (r, cost) for vouchers starting on 'day'\n    starts_on_day = [[] for _ in range(MAX_COORD + 1)]\n\n    # Group vouchers by their end day\n    # ends_on_day[day] stores a list of (l, cost) for vouchers ending on 'day'\n    ends_on_day = [[] for _ in range(MAX_COORD + 1)]\n\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        starts_on_day[l].append((r, cost))\n        ends_on_day[r].append((l, cost))\n\n    # min_cost_for_duration[d] stores the minimum cost of a voucher\n    # with duration 'd' that has already ended (i.e., its end day 'r' is less than current_day).\n    # The maximum possible duration is MAX_COORD (e.g., from day 1 to day MAX_COORD).\n    min_cost_for_duration = [float('inf')] * (MAX_COORD + 1)\n\n    min_total_cost = float('inf')\n\n    # Sweep through the days from 1 to MAX_COORD\n    for current_day in range(1, MAX_COORD + 1):\n        # Step 1: Update `min_cost_for_duration` with vouchers that ended at `current_day - 1`.\n        # These vouchers are now available to be paired with any voucher starting at `current_day` or later.\n        for l_prev, cost_prev in ends_on_day[current_day - 1]:\n            duration_prev = (current_day - 1) - l_prev + 1\n            # Only update if the duration is within the valid range.\n            # (duration_prev will always be >= 1 since l_prev >= 1 and current_day-1 >= l_prev)\n            if duration_prev <= MAX_COORD:\n                min_cost_for_duration[duration_prev] = min(min_cost_for_duration[duration_prev], cost_prev)\n\n        # Step 2: Process vouchers starting at `current_day`.\n        # For each such voucher, try to find a suitable preceding voucher.\n        for r_curr, cost_curr in starts_on_day[current_day]:\n            duration_curr = r_curr - current_day + 1\n            \n            # We need a second voucher with duration `target_duration`\n            target_duration = x - duration_curr\n            \n            # Check if target_duration is valid (positive and within MAX_COORD)\n            if 1 <= target_duration <= MAX_COORD:\n                # If there's an available voucher with `target_duration` that ended before `current_day`,\n                # then we found a valid pair.\n                if min_cost_for_duration[target_duration] != float('inf'):\n                    min_total_cost = min(min_total_cost, cost_curr + min_cost_for_duration[target_duration])\n\n    if min_total_cost == float('inf'):\n        print(-1)\n    else:\n        print(min_total_cost)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 799,
        "completion_token_count": 839,
        "thoughts_token_count": 8190
    }
}