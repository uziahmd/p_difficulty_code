{
    "start": 1758009439.798799,
    "end": 1758009468.8082292,
    "start-formatted": "2025-09-16 16:57 KST",
    "end-formatted": "2025-09-16 16:57 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**My Approach to the Souvenir Problem**\n\nOkay, so I'm looking at this \"Selling Souvenirs\" problem, which looks like a variation of the knapsack problem. We have `n` souvenirs, a maximum weight `m`, and for each souvenir, a weight and a cost. The goal is to maximize the total cost without exceeding the weight limit.\n\nThe standard knapsack approach, with O(n*m) complexity, is immediately out because both `n` and `m` are quite large. However, the *weights* of the souvenirs are really small: 1, 2, or 3. That's the key!\n\nSo, my thought is to categorize the souvenirs based on their weight. We'll have `items_w1`, `items_w2`, and `items_w3`, each containing the costs of souvenirs of weight 1, 2, and 3 respectively, sorted in descending order (highest cost first). This is because we *always* want to pick the most expensive items within each weight category.\n\nNow, we need to choose how many items of each weight we'll take. Let's call them `k1`, `k2`, and `k3`.  We need to satisfy the constraint: `k1 * 1 + k2 * 2 + k3 * 3 <= m`. We also want to maximize the total cost, which is the sum of the top `k1` costs from `items_w1`, the top `k2` from `items_w2`, and the top `k3` from `items_w3`.\n\nThis looks like it could still be a knapsack problem, but with just three \"types\" of items. The large capacity (`m`) is still a bit of a concern. I think the most reasonable thing to do here is to iterate.  Since we have such a small number of weights, let's try iterating over one of them. The maximum number of weight 3 items we can include is  `m / 3`, so iterate through that.\n\nFor each number of weight-3 items we pick, we can calculate the remaining capacity, and determine the optimal combination of weight-1 and weight-2 items. We will calculate the total cost for each choice of `k3` to keep track of the overall best.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_w1 = []\n    items_w2 = []\n    items_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items_w1.append(c)\n        elif w == 2:\n            items_w2.append(c)\n        else: # w == 3\n            items_w3.append(c)\n\n    # Sort costs in descending order for each weight category\n    items_w1.sort(reverse=True)\n    items_w2.sort(reverse=True)\n    items_w3.sort(reverse=True)\n\n    # Calculate prefix sums for each category\n    # P1[i] = sum of costs of the first i items_w1\n    # P2[i] = sum of costs of the first i items_w2\n    # P3[i] = sum of costs of the first i items_w3\n    P1 = [0] * (len(items_w1) + 1)\n    for i in range(len(items_w1)):\n        P1[i+1] = P1[i] + items_w1[i]\n\n    P2 = [0] * (len(items_w2) + 1)\n    for i in range(len(items_w2)):\n        P2[i+1] = P2[i] + items_w2[i]\n\n    P3 = [0] * (len(items_w3) + 1)\n    for i in range(len(items_w3)):\n        P3[i+1] = P3[i] + items_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate over the number of items of weight 3 (k3)\n    for k3 in range(len(P3)):\n        current_weight_k3 = k3 * 3\n        if current_weight_k3 > m:\n            break\n        \n        current_cost_k3 = P3[k3]\n        remaining_capacity = m - current_weight_k3\n\n        # For the remaining capacity, we need to pick items of weight 1 and 2.\n        # This subproblem is: maximize k1*1 + k2*2 <= remaining_capacity\n        # We can iterate over the number of items of weight 2 (k2).\n        \n        # When k2 items of weight 2 are chosen, the remaining capacity for weight 1 items is remaining_capacity - k2*2.\n        # We can pick at most (remaining_capacity - k2*2) items of weight 1.\n        # We also cannot pick more than len(items_w1) items of weight 1.\n        # So, k1_max = min(len(items_w1), remaining_capacity - k2*2).\n        # The cost would be P1[k1_max] + P2[k2].\n        \n        # This subproblem (picking items of weight 1 and 2) can be solved efficiently.\n        # We can maintain a pointer for items_w1 (or P1) and iterate through k2.\n        \n        # Initialize k1_ptr to the maximum possible number of weight 1 items\n        # that can fit in `remaining_capacity` if no weight 2 items are chosen.\n        k1_ptr = min(len(items_w1), remaining_capacity)\n        current_max_cost_w1w2 = 0\n\n        # Iterate over the number of items of weight 2 (k2)\n        for k2 in range(len(P2)):\n            current_weight_k2 = k2 * 2\n            if current_weight_k2 > remaining_capacity:\n                break\n            \n            # Adjust k1_ptr: If we add a weight 2 item, we might need to remove weight 1 items.\n            # k1_ptr should not exceed the new remaining capacity for weight 1 items.\n            # It also should not exceed the total available weight 1 items.\n            # The loop for k2 iterates from 0 upwards.\n            # As k2 increases, remaining_capacity_for_w1 decreases.\n            # So, k1_ptr either stays the same or decreases.\n            while k1_ptr > 0 and (k1_ptr * 1 + current_weight_k2) > remaining_capacity:\n                k1_ptr -= 1\n            \n            # If after adjusting k1_ptr, it's still too large (e.g., k1_ptr * 1 + current_weight_k2 > remaining_capacity),\n            # it means even with k1_ptr=0, k2 items already exceed capacity. This should be handled by the outer `if current_weight_k2 > remaining_capacity` check.\n            # But if k1_ptr became 0 and current_weight_k2 still exceeds remaining_capacity, then this k2 value is invalid.\n            # The `while` loop ensures k1_ptr * 1 + current_weight_k2 <= remaining_capacity.\n            # k1_ptr also implicitly respects k1_ptr <= len(items_w1).\n            \n            current_cost_w1w2 = P1[k1_ptr] + P2[k2]\n            current_max_cost_w1w2 = max(current_max_cost_w1w2, current_cost_w1w2)\n        \n        max_total_cost = max(max_total_cost, current_cost_k3 + current_max_cost_w1w2)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    items_w1 = []\n    items_w2 = []\n    items_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items_w1.append(c)\n        elif w == 2:\n            items_w2.append(c)\n        else: # w == 3\n            items_w3.append(c)\n\n    # Sort costs in descending order for each weight category\n    items_w1.sort(reverse=True)\n    items_w2.sort(reverse=True)\n    items_w3.sort(reverse=True)\n\n    # Calculate prefix sums for each category\n    # P1[i] = sum of costs of the first i items_w1\n    # P2[i] = sum of costs of the first i items_w2\n    # P3[i] = sum of costs of the first i items_w3\n    P1 = [0] * (len(items_w1) + 1)\n    for i in range(len(items_w1)):\n        P1[i+1] = P1[i] + items_w1[i]\n\n    P2 = [0] * (len(items_w2) + 1)\n    for i in range(len(items_w2)):\n        P2[i+1] = P2[i] + items_w2[i]\n\n    P3 = [0] * (len(items_w3) + 1)\n    for i in range(len(items_w3)):\n        P3[i+1] = P3[i] + items_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate over the number of items of weight 3 (k3)\n    for k3 in range(len(P3)):\n        current_weight_k3 = k3 * 3\n        if current_weight_k3 > m:\n            break\n        \n        current_cost_k3 = P3[k3]\n        remaining_capacity = m - current_weight_k3\n\n        # For the remaining capacity, we need to pick items of weight 1 and 2.\n        # This subproblem is: maximize k1*1 + k2*2 <= remaining_capacity\n        # We can iterate over the number of items of weight 2 (k2).\n        \n        # When k2 items of weight 2 are chosen, the remaining capacity for weight 1 items is remaining_capacity - k2*2.\n        # We can pick at most (remaining_capacity - k2*2) items of weight 1.\n        # We also cannot pick more than len(items_w1) items of weight 1.\n        # So, k1_max = min(len(items_w1), remaining_capacity - k2*2).\n        # The cost would be P1[k1_max] + P2[k2].\n        \n        # This subproblem (picking items of weight 1 and 2) can be solved efficiently.\n        # We can maintain a pointer for items_w1 (or P1) and iterate through k2.\n        \n        # Initialize k1_ptr to the maximum possible number of weight 1 items\n        # that can fit in `remaining_capacity` if no weight 2 items are chosen.\n        k1_ptr = min(len(items_w1), remaining_capacity)\n        current_max_cost_w1w2 = 0\n\n        # Iterate over the number of items of weight 2 (k2)\n        for k2 in range(len(P2)):\n            current_weight_k2 = k2 * 2\n            if current_weight_k2 > remaining_capacity:\n                break\n            \n            # Adjust k1_ptr: If we add a weight 2 item, we might need to remove weight 1 items.\n            # k1_ptr should not exceed the new remaining capacity for weight 1 items.\n            # It also should not exceed the total available weight 1 items.\n            # The loop for k2 iterates from 0 upwards.\n            # As k2 increases, remaining_capacity_for_w1 decreases.\n            # So, k1_ptr either stays the same or decreases.\n            while k1_ptr > 0 and (k1_ptr * 1 + current_weight_k2) > remaining_capacity:\n                k1_ptr -= 1\n            \n            # If after adjusting k1_ptr, it's still too large (e.g., k1_ptr * 1 + current_weight_k2 > remaining_capacity),\n            # it means even with k1_ptr=0, k2 items already exceed capacity. This should be handled by the outer `if current_weight_k2 > remaining_capacity` check.\n            # But if k1_ptr became 0 and current_weight_k2 still exceeds remaining_capacity, then this k2 value is invalid.\n            # The `while` loop ensures k1_ptr * 1 + current_weight_k2 <= remaining_capacity.\n            # k1_ptr also implicitly respects k1_ptr <= len(items_w1).\n            \n            current_cost_w1w2 = P1[k1_ptr] + P2[k2]\n            current_max_cost_w1w2 = max(current_max_cost_w1w2, current_cost_w1w2)\n        \n        max_total_cost = max(max_total_cost, current_cost_k3 + current_max_cost_w1w2)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 496,
        "completion_token_count": 1355,
        "thoughts_token_count": 713
    }
}