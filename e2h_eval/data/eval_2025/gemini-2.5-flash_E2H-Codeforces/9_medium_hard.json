{
    "start": 1758015879.912984,
    "end": 1758015975.600788,
    "start-formatted": "2025-09-16 18:44 KST",
    "end-formatted": "2025-09-16 18:46 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Solving the Selling Souvenirs Problem with Python**\n\nAlright, let's break this down. The problem's a variation of the knapsack problem, where we've got to maximize the total cost of souvenirs without exceeding a weight limit. The key is the small weights - 1, 2, or 3. That's our leverage.\n\nFirst, I'm thinking to categorize souvenirs by weight: three groups - weight 1, weight 2, weight 3. Within each group, sort by cost, most expensive first. Now, the goal is to choose items from each group to maximize cost.\n\nThe initial thought is a standard dynamic programming approach, iterating through each item, but that quickly becomes too slow. The constraint of the weights being small has to be used.\n\nThe strategy that emerges is to fix the number of weight 3 items (`k3`) and solve a subproblem. With `k3` items chosen, we've got a remaining weight and need to maximize the cost from weight 1 and 2 items. This looks like a smaller knapsack problem.\n\nTo solve this, let's build `dp_sub` for the weight 1 and 2 subproblem. But building that `dp_sub` array in `O(m_rem^2)` becomes too costly.\n\nSo, the optimal `dp_sub` relation is : `dp[w] = max_{k2} (P1[w - 2k2] + P2[k2])`, where `P1` and `P2` are prefix sums of the costs for weight 1 and 2 items, and `k2` is the number of weight 2 items chosen. \n\nIn this structure, we're iterating on the number of weight 2 items chosen. We select the best combination of items of weight 1 and 2, which is essentially the prefix-sums of sorted lists. \n\nThis approach should be way faster and is our solution.\n",
    "response": "The problem asks us to select a subset of `N` souvenirs, each with a weight `w_i` and cost `c_i`, such that their total weight does not exceed `M` and their total cost is maximized. The key constraint is that `w_i` can only be 1, 2, or 3. `N` is up to 100,000 and `M` is up to 300,000.\n\nA standard 0/1 knapsack solution would be `O(N*M)`, which is too slow for these constraints. The small range of weights `w_i` is a strong hint for a more specialized dynamic programming approach.\n\nLet's categorize the souvenirs by their weights:\n1. Souvenirs with `w_i = 1`. Let their costs be `C1`.\n2. Souvenirs with `w_i = 2`. Let their costs be `C2`.\n3. Souvenirs with `w_i = 3`. Let their costs be `C3`.\n\nTo maximize the total cost, we should always pick the most expensive items first for each weight category. So, we sort `C1`, `C2`, and `C3` in descending order.\nThen, we compute prefix sums of costs for each category.\nLet `P1[k]` be the sum of costs of the `k` most expensive items of weight 1.\nLet `P2[k]` be the sum of costs of the `k` most expensive items of weight 2.\nLet `P3[k]` be the sum of costs of the `k` most expensive items of weight 3.\n(These arrays should be 1-indexed for convenience, with `P[0]=0`).\n\nThe problem then becomes: find `k1, k2, k3` such that `k1*1 + k2*2 + k3*3 <= M`, `0 <= k1 <= len(C1)`, `0 <= k2 <= len(C2)`, `0 <= k3 <= len(C3)`, and `P1[k1] + P2[k2] + P3[k3]` is maximized.\n\nWe can iterate over the number of items of weight 3 we take, `k3`.\n`k3` can range from `0` to `min(len(C3), M // 3)`.\nFor each fixed `k3`:\n1. The cost from weight 3 items is `P3[k3]`.\n2. The weight used is `3*k3`.\n3. The remaining capacity is `M_rem = M - 3*k3`.\n4. We need to find the maximum cost `f(M_rem)` using items of weight 1 and 2, with total weight not exceeding `M_rem`.\n\nThe subproblem `f(W)`: Maximize `P1[k1] + P2[k2]` such that `k1*1 + k2*2 <= W`, `0 <= k1 <= len(C1)`, `0 <= k2 <= len(C2)`.\nThis subproblem can be solved efficiently. Let `dp_12[w]` be the maximum cost for weight `w` using only items of weight 1 and 2.\nWe can compute `dp_12[w]` for all `w` from `0` to `M` in `O(M)` time.\nThe values `P1[k]` and `P2[k]` are concave functions (sum of largest elements).\n`dp_12[w]` can be computed using a \"merge-like\" approach or a specialized DP:\nInitialize `dp_12[0] = 0`, and `dp_12[w] = -infinity` for `w > 0`.\nWe also need to keep track of how many items of weight 1 and 2 have been \"used\" to reach a certain `dp_12[w]`.\nLet `num_w1[w]` and `num_w2[w]` be the number of weight 1 and weight 2 items used to achieve `dp_12[w]`.\n\nFor `w` from `1` to `M`:\n  `val1 = -infinity`, `val2 = -infinity`\n  If `w >= 1` and `num_w1[w-1] < len(C1)` (can take another weight 1 item):\n    `val1 = dp_12[w-1] + C1[num_w1[w-1]]`\n  If `w >= 2` and `num_w2[w-2] < len(C2)` (can take another weight 2 item):\n    `val2 = dp_12[w-2] + C2[num_w2[w-2]]`\n\n  If `val1 > val2`:\n    `dp_12[w] = val1`\n    `num_w1[w] = num_w1[w-1] + 1`\n    `num_w2[w] = num_w2[w-1]`\n  Else if `val2 >= val1` (and `val2` is not `-infinity`):\n    `dp_12[w] = val2`\n    `num_w1[w] = num_w1[w-2]`\n    `num_w2[w] = num_w2[w-2] + 1`\n  Else (`val1` and `val2` are both `-infinity`, meaning `dp_12[w]` is unreachable):\n    `dp_12[w] = -infinity`\n\nThis DP calculates `dp_12[w]` for all `w` from `0` to `M` in `O(M)` time.\nAfter computing `dp_12` array:\nThe overall maximum cost is `ans = 0`.\nIterate `k3` from `0` to `min(len(C3), M // 3)`:\n  `current_cost = P3[k3]`\n  `remaining_capacity = M - 3*k3`\n  If `remaining_capacity >= 0`:\n    If `dp_12[remaining_capacity]` is not `-infinity`:\n      `ans = max(ans, current_cost + dp_12[remaining_capacity])`\n\nThe total time complexity will be `O(N + M)`:\n- Sorting costs: `O(N log N)` in general, but since `w_i` are only 3 distinct values, it's `O(N)` if we use counting sort or similar, or `O(N log N)` if using general sort. Given `N=10^5`, `N log N` is fine.\n- Computing prefix sums: `O(N)`\n- Computing `dp_12` array: `O(M)`\n- Iterating `k3` and summing up: `O(M/3) = O(M)`\n\nOverall complexity: `O(N log N + M)`. This fits within typical time limits.\n\nExample walkthrough: `N=4, M=3`. Items: `(3,10), (2,7), (2,8), (1,1)`.\n1. Categorize and sort:\n   `C1 = [1]` (num1=1) -> `P1 = [0, 1]`\n   `C2 = [8, 7]` (num2=2) -> `P2 = [0, 8, 15]`\n   `C3 = [10]` (num3=1) -> `P3 = [0, 10]`\n\n2. Compute `dp_12` array (for weights 1 and 2):\n   `dp_12 = [0, -inf, -inf, -inf]`\n   `num_w1 = [0, 0, 0, 0]`\n   `num_w2 = [0, 0, 0, 0]`\n   (Initialize with `dp_12[0]=0`, others `-inf`. `num_w1[0]=0, num_w2[0]=0`, others don't matter unless `dp_12` is reachable.)\n\n   `w=1`:\n     `val1 = dp_12[0] + C1[0] = 0 + 1 = 1`\n     `val2 = -inf`\n     `dp_12[1] = 1`, `num_w1[1]=1`, `num_w2[1]=0`\n   `dp_12 = [0, 1, -inf, -inf]`\n\n   `w=2`:\n     `val1 = dp_12[1] + C1[num_w1[1]] = 1 + C1[1]` (error: `num_w1[1]=1`, `len(C1)=1`, so `C1[1]` out of bounds. `num_w1[1] < len(C1)` is false) -> `val1 = -inf`\n     `val2 = dp_12[0] + C2[0] = 0 + 8 = 8`\n     `dp_12[2] = 8`, `num_w1[2]=0`, `num_w2[2]=1`\n   `dp_12 = [0, 1, 8, -inf]`\n\n   `w=3`:\n     `val1 = dp_12[2] + C1[num_w1[2]] = 8 + C1[0] = 8 + 1 = 9`\n     `val2 = dp_12[1] + C2[num_w2[1]] = 1 + C2[0] = 1 + 8 = 9`\n     `dp_12[3] = 9` (arbitrarily pick `val1` or `val2` if equal, say `val1`'s path)\n     `num_w1[3]=num_w1[2]+1 = 1`, `num_w2[3]=num_w2[2]=0`\n     (If we picked `val2`'s path: `num_w1[3]=num_w1[1]=1`, `num_w2[3]=num_w2[1]+1=1`. The actual counts don't matter, only the `dp_12` values.)\n   `dp_12 = [0, 1, 8, 9]`\n\n3. Calculate total max cost:\n   `ans = 0`\n   `k3` from `0` to `min(len(C3), M//3)` which is `min(1, 3//3) = min(1,1) = 1`.\n   \n   `k3 = 0`:\n     `current_cost = P3[0] = 0`\n     `remaining_capacity = M - 3*0 = 3`\n     `ans = max(0, 0 + dp_12[3]) = max(0, 0 + 9) = 9`\n   \n   `k3 = 1`:\n     `current_cost = P3[1] = 10`\n     `remaining_capacity = M - 3*1 = 0`\n     `ans = max(9, 10 + dp_12[0]) = max(9, 10 + 0) = 10`\n\nFinal `ans = 10`. This matches the example output.\n\n```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    costs_w1 = []\n    costs_w2 = []\n    costs_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            costs_w1.append(c)\n        elif w == 2:\n            costs_w2.append(c)\n        else: # w == 3\n            costs_w3.append(c)\n\n    # Sort costs in descending order to pick most expensive items first\n    costs_w1.sort(reverse=True)\n    costs_w2.sort(reverse=True)\n    costs_w3.sort(reverse=True)\n\n    # Precompute prefix sums for each weight category\n    # P1[k] = sum of costs of k most expensive items of weight 1\n    P1 = [0] * (len(costs_w1) + 1)\n    for i in range(len(costs_w1)):\n        P1[i+1] = P1[i] + costs_w1[i]\n\n    P2 = [0] * (len(costs_w2) + 1)\n    for i in range(len(costs_w2)):\n        P2[i+1] = P2[i] + costs_w2[i]\n    \n    P3 = [0] * (len(costs_w3) + 1)\n    for i in range(len(costs_w3)):\n        P3[i+1] = P3[i] + costs_w3[i]\n\n    # dp_12[w] stores the maximum cost for capacity 'w' using only items of weight 1 and 2\n    # Initialize with -1 to represent unreachable states (or a very small negative number)\n    dp_12 = [-1] * (m + 1) \n    dp_12[0] = 0\n\n    # num_w1[w] and num_w2[w] store the count of weight 1 and weight 2 items used to achieve dp_12[w]\n    num_w1 = [0] * (m + 1)\n    num_w2 = [0] * (m + 1)\n\n    for w_curr in range(1, m + 1):\n        val1 = -1 # Max cost if we add a weight 1 item\n        val2 = -1 # Max cost if we add a weight 2 item\n\n        # Option 1: Add a weight 1 item\n        if w_curr >= 1 and dp_12[w_curr - 1] != -1: # Check if previous state is reachable\n            if num_w1[w_curr - 1] < len(costs_w1): # Check if there are still weight 1 items available\n                val1 = dp_12[w_curr - 1] + costs_w1[num_w1[w_curr - 1]]\n        \n        # Option 2: Add a weight 2 item\n        if w_curr >= 2 and dp_12[w_curr - 2] != -1: # Check if previous state is reachable\n            if num_w2[w_curr - 2] < len(costs_w2): # Check if there are still weight 2 items available\n                val2 = dp_12[w_curr - 2] + costs_w2[num_w2[w_curr - 2]]\n\n        # Choose the option that yields higher cost\n        if val1 >= val2 and val1 != -1: # Prioritize val1 if equal, or if val2 is unreachable\n            dp_12[w_curr] = val1\n            num_w1[w_curr] = num_w1[w_curr - 1] + 1\n            num_w2[w_curr] = num_w2[w_curr - 1]\n        elif val2 != -1: # val2 is greater than val1 (or val1 is unreachable)\n            dp_12[w_curr] = val2\n            num_w1[w_curr] = num_w1[w_curr - 2]\n            num_w2[w_curr] = num_w2[w_curr - 2] + 1\n        # If both val1 and val2 are -1, dp_12[w_curr] remains -1 (unreachable)\n\n    max_total_cost = 0\n\n    # Iterate over the number of weight 3 items (k3)\n    # k3 can range from 0 to min(max_items_w3_available, max_items_w3_by_capacity)\n    for k3 in range(len(P3)): # P3 has len(costs_w3) + 1 elements\n        weight_used_by_w3 = k3 * 3\n        if weight_used_by_w3 > m:\n            break # Cannot take more weight 3 items than capacity M\n\n        cost_from_w3 = P3[k3]\n        remaining_capacity = m - weight_used_by_w3\n\n        # Add the maximum cost from weight 1 and 2 items for the remaining capacity\n        if dp_12[remaining_capacity] != -1: # Check if this remaining capacity is reachable\n            max_total_cost = max(max_total_cost, cost_from_w3 + dp_12[remaining_capacity])\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    costs_w1 = []\n    costs_w2 = []\n    costs_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            costs_w1.append(c)\n        elif w == 2:\n            costs_w2.append(c)\n        else: # w == 3\n            costs_w3.append(c)\n\n    # Sort costs in descending order to pick most expensive items first\n    costs_w1.sort(reverse=True)\n    costs_w2.sort(reverse=True)\n    costs_w3.sort(reverse=True)\n\n    # Precompute prefix sums for each weight category\n    # P1[k] = sum of costs of k most expensive items of weight 1\n    P1 = [0] * (len(costs_w1) + 1)\n    for i in range(len(costs_w1)):\n        P1[i+1] = P1[i] + costs_w1[i]\n\n    P2 = [0] * (len(costs_w2) + 1)\n    for i in range(len(costs_w2)):\n        P2[i+1] = P2[i] + costs_w2[i]\n    \n    P3 = [0] * (len(costs_w3) + 1)\n    for i in range(len(costs_w3)):\n        P3[i+1] = P3[i] + costs_w3[i]\n\n    # dp_12[w] stores the maximum cost for capacity 'w' using only items of weight 1 and 2\n    # Initialize with -1 to represent unreachable states (or a very small negative number)\n    dp_12 = [-1] * (m + 1) \n    dp_12[0] = 0\n\n    # num_w1[w] and num_w2[w] store the count of weight 1 and weight 2 items used to achieve dp_12[w]\n    num_w1 = [0] * (m + 1)\n    num_w2 = [0] * (m + 1)\n\n    for w_curr in range(1, m + 1):\n        val1 = -1 # Max cost if we add a weight 1 item\n        val2 = -1 # Max cost if we add a weight 2 item\n\n        # Option 1: Add a weight 1 item\n        if w_curr >= 1 and dp_12[w_curr - 1] != -1: # Check if previous state is reachable\n            if num_w1[w_curr - 1] < len(costs_w1): # Check if there are still weight 1 items available\n                val1 = dp_12[w_curr - 1] + costs_w1[num_w1[w_curr - 1]]\n        \n        # Option 2: Add a weight 2 item\n        if w_curr >= 2 and dp_12[w_curr - 2] != -1: # Check if previous state is reachable\n            if num_w2[w_curr - 2] < len(costs_w2): # Check if there are still weight 2 items available\n                val2 = dp_12[w_curr - 2] + costs_w2[num_w2[w_curr - 2]]\n\n        # Choose the option that yields higher cost\n        if val1 >= val2 and val1 != -1: # Prioritize val1 if equal, or if val2 is unreachable\n            dp_12[w_curr] = val1\n            num_w1[w_curr] = num_w1[w_curr - 1] + 1\n            num_w2[w_curr] = num_w2[w_curr - 1]\n        elif val2 != -1: # val2 is greater than val1 (or val1 is unreachable)\n            dp_12[w_curr] = val2\n            num_w1[w_curr] = num_w1[w_curr - 2]\n            num_w2[w_curr] = num_w2[w_curr - 2] + 1\n        # If both val1 and val2 are -1, dp_12[w_curr] remains -1 (unreachable)\n\n    max_total_cost = 0\n\n    # Iterate over the number of weight 3 items (k3)\n    # k3 can range from 0 to min(max_items_w3_available, max_items_w3_by_capacity)\n    for k3 in range(len(P3)): # P3 has len(costs_w3) + 1 elements\n        weight_used_by_w3 = k3 * 3\n        if weight_used_by_w3 > m:\n            break # Cannot take more weight 3 items than capacity M\n\n        cost_from_w3 = P3[k3]\n        remaining_capacity = m - weight_used_by_w3\n\n        # Add the maximum cost from weight 1 and 2 items for the remaining capacity\n        if dp_12[remaining_capacity] != -1: # Check if this remaining capacity is reachable\n            max_total_cost = max(max_total_cost, cost_from_w3 + dp_12[remaining_capacity])\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 496,
        "completion_token_count": 3954,
        "thoughts_token_count": 6374
    }
}