{
    "start": 1758293710.1403244,
    "end": 1758293717.5763288,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n\n    if a == b:\n        print(0)\n        return\n\n    diff = abs(a - b)\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Iterate through divisors of diff\n    # A divisor d means that a+k and b+k are both multiples of d.\n    # This implies (b+k) - (a+k) = b - a must also be a multiple of d.\n    # So d must be a divisor of |a-b|.\n    # If a+k = x*d and b+k = y*d, then lcm(a+k, b+k) = lcm(x*d, y*d) = d * lcm(x, y).\n    # To minimize lcm, we want d to be as large as possible,\n    # and lcm(x, y) to be as small as possible.\n    # The smallest possible lcm(x,y) is 1 if x=y, but that's not possible here.\n    # The next smallest is 2 if x=1, y=2 or vice versa.\n    # The smallest possible lcm for two distinct numbers is when one is a multiple of the other.\n    # Specifically, if a+k and b+k are multiples of d, then a+k = m*d and b+k = n*d.\n    # We have b-a = (n-m)*d.\n    # For a fixed d, we want to find k such that a+k is a multiple of d.\n    # The smallest non-negative k for this is k = (d - (a % d)) % d.\n    # Let k_d = (d - (a % d)) % d.\n    # Then a + k_d is a multiple of d. Let a + k_d = A'.\n    # And b + k_d is also a multiple of d. Let b + k_d = B'.\n    # Since (b+k_d) - (a+k_d) = b-a, and b-a is a multiple of d,\n    # if a+k_d is a multiple of d, then b+k_d must also be a multiple of d.\n    # So for each divisor d of |a-b|, we can find a k_d such that a+k_d and b+k_d are both multiples of d.\n    # We calculate lcm(a+k_d, b+k_d) for each such k_d and find the minimum.\n\n    # Also, consider the case where a+k and b+k are not necessarily multiples of the same d.\n    # lcm(X, Y) = (X * Y) / gcd(X, Y).\n    # Let g = gcd(a+k, b+k). Then g must divide (b+k) - (a+k) = b-a.\n    # So g must be a divisor of |a-b|.\n    # For each divisor g of |a-b|, we want to find k such that gcd(a+k, b+k) = g.\n    # The smallest k such that a+k is a multiple of g is k = (g - (a % g)) % g.\n    # For this k, a+k is a multiple of g, and b+k is also a multiple of g (since b-a is a multiple of g).\n    # So gcd(a+k, b+k) will be at least g.\n    # We calculate lcm(a+k, b+k) for this k.\n\n    divs = []\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divs.append(i)\n            if i * i != diff:\n                divs.append(diff // i)\n\n    for g in divs:\n        k = (g - (a % g)) % g\n        current_lcm = (a + k) * (b + k) // g\n\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            best_k = k\n        elif current_lcm == min_lcm:\n            best_k = min(best_k, k)\n\n    print(best_k)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    a, b = map(int, input().split())\n\n    if a == b:\n        print(0)\n        return\n\n    diff = abs(a - b)\n    min_lcm = float('inf')\n    best_k = 0\n\n    # Iterate through divisors of diff\n    # A divisor d means that a+k and b+k are both multiples of d.\n    # This implies (b+k) - (a+k) = b - a must also be a multiple of d.\n    # So d must be a divisor of |a-b|.\n    # If a+k = x*d and b+k = y*d, then lcm(a+k, b+k) = lcm(x*d, y*d) = d * lcm(x, y).\n    # To minimize lcm, we want d to be as large as possible,\n    # and lcm(x, y) to be as small as possible.\n    # The smallest possible lcm(x,y) is 1 if x=y, but that's not possible here.\n    # The next smallest is 2 if x=1, y=2 or vice versa.\n    # The smallest possible lcm for two distinct numbers is when one is a multiple of the other.\n    # Specifically, if a+k and b+k are multiples of d, then a+k = m*d and b+k = n*d.\n    # We have b-a = (n-m)*d.\n    # For a fixed d, we want to find k such that a+k is a multiple of d.\n    # The smallest non-negative k for this is k = (d - (a % d)) % d.\n    # Let k_d = (d - (a % d)) % d.\n    # Then a + k_d is a multiple of d. Let a + k_d = A'.\n    # And b + k_d is also a multiple of d. Let b + k_d = B'.\n    # Since (b+k_d) - (a+k_d) = b-a, and b-a is a multiple of d,\n    # if a+k_d is a multiple of d, then b+k_d must also be a multiple of d.\n    # So for each divisor d of |a-b|, we can find a k_d such that a+k_d and b+k_d are both multiples of d.\n    # We calculate lcm(a+k_d, b+k_d) for each such k_d and find the minimum.\n\n    # Also, consider the case where a+k and b+k are not necessarily multiples of the same d.\n    # lcm(X, Y) = (X * Y) / gcd(X, Y).\n    # Let g = gcd(a+k, b+k). Then g must divide (b+k) - (a+k) = b-a.\n    # So g must be a divisor of |a-b|.\n    # For each divisor g of |a-b|, we want to find k such that gcd(a+k, b+k) = g.\n    # The smallest k such that a+k is a multiple of g is k = (g - (a % g)) % g.\n    # For this k, a+k is a multiple of g, and b+k is also a multiple of g (since b-a is a multiple of g).\n    # So gcd(a+k, b+k) will be at least g.\n    # We calculate lcm(a+k, b+k) for this k.\n\n    divs = []\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divs.append(i)\n            if i * i != diff:\n                divs.append(diff // i)\n\n    for g in divs:\n        k = (g - (a % g)) % g\n        current_lcm = (a + k) * (b + k) // g\n\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            best_k = k\n        elif current_lcm == min_lcm:\n            best_k = min(best_k, k)\n\n    print(best_k)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 412,
        "completion_token_count": 1011,
        "thoughts_token_count": 0
    }
}