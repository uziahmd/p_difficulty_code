{
    "start": 1758011294.7716875,
    "end": 1758011321.2880547,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children)\n    # Total vertices = 1 (root) + k (children) = k + 1\n    # n = k + 1  => k = n - 1\n    # Since k > 1, n - 1 > 1 => n > 2.\n    # This is valid for any n > 2.\n    # However, the problem statement says \"This step should be done at least once.\"\n    # which implies there must be at least one expansion from a leaf.\n    # So, the smallest snowflake is root + k children + k*k grandchildren.\n    # Total vertices = 1 + k + k*k.\n    # So, n must be of the form 1 + k + k^2 + ... + k^d for d >= 2.\n\n    # Check for d = 2 (1 + k + k^2)\n    # n = k^2 + k + 1\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4(1 - n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(math.isqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            k_val = (-1 + sqrt_discriminant) // 2\n            if k_val > 1 and (-1 + sqrt_discriminant) % 2 == 0:\n                print(\"YES\")\n                return\n\n    # Check for d >= 3\n    # n = 1 + k + k^2 + ... + k^d = (k^(d+1) - 1) / (k - 1)\n    # We need to find if such a k > 1 and d >= 2 exist.\n    # The smallest d is 2, which we handled above. So we check d >= 3.\n    # For k >= 2, the sum grows very quickly.\n    # For d = 3: n = 1 + k + k^2 + k^3\n    # For k = 2, n = 1 + 2 + 4 + 8 = 15\n    # For k = 3, n = 1 + 3 + 9 + 27 = 40\n    # For k = 4, n = 1 + 4 + 16 + 64 = 85\n    #\n    # Maximum k for d=3:\n    # k^3 < n => k < n^(1/3)\n    # k_max_for_d3 = int(n**(1/3)) + 2 (add some buffer for floating point inaccuracies)\n    # Iterate k from 2 up to a reasonable limit.\n    # The smallest possible n is 1+2+4 = 7 (for k=2, d=2)\n    # The smallest possible n for d=3 is 1+2+4+8 = 15 (for k=2, d=3)\n    # The smallest possible n for d=4 is 1+2+4+8+16 = 31 (for k=2, d=4)\n\n    # Upper bound for k:\n    # If d >= 3, then n = 1 + k + k^2 + ... + k^d > k^d.\n    # So k < n^(1/d).\n    # Since d >= 3, k < n^(1/3).\n    # For n = 10^18, k < (10^18)^(1/3) = 10^6.\n    # This range for k is too large to iterate for each test case.\n    #\n    # Upper bound for d:\n    # For k = 2, n = 2^(d+1) - 1.\n    # 2^(d+1) = n + 1\n    # d+1 = log2(n+1)\n    # d = log2(n+1) - 1\n    # For n = 10^18, d approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So d can go up to around 60.\n\n    # The approach is to iterate over possible values of d (depth) and then\n    # try to find k using binary search or nth root.\n    # d must be at least 3 for this loop, as d=2 is handled by quadratic formula.\n    #\n    # n = (k^(d+1) - 1) / (k - 1)\n    # (k - 1) * n = k^(d+1) - 1\n    # n*k - n = k^(d+1) - 1\n    # k^(d+1) - n*k + (n - 1) = 0\n    # Let f(k) = k^(d+1) - n*k + (n - 1)\n    # We are looking for integer k > 1 such that f(k) = 0.\n    #\n    # The function f(k) is monotonically increasing for k > 1 if d >= 2.\n    # f'(k) = (d+1)k^d - n.\n    # f'(k) > 0 if (d+1)k^d > n.\n    # Smallest k is 2. (d+1)2^d. If this is > n, then f(k) is increasing.\n    # For d=3, (3+1)2^3 = 4*8 = 32. If n > 32, f'(2) < 0.\n    #\n    # The function k^(d+1) - n*k + (n-1) = 0\n    # For k > 1, k^(d+1) < n*k. So k^d < n. This means k < n^(1/d).\n    # This gives an upper bound for k.\n    #\n    # Let's iterate d from 3 up to approx 60.\n    # For each d, we need to find k.\n    # k_min = 2\n    # k_max = int(n**(1/d)) + 2 (add buffer)\n    # If k_max becomes too large, we can cap it.\n    # For d=3, k_max approx 10^6. Binary search for k in [2, 10^6].\n    # For d=60, k_max approx (10^18)^(1/60) = (10^3)^(1/10) approx 2.\n    #\n    # The upper bound for d is log2(n+1) - 1.\n    # Max d is around 60.\n    #\n    # For each d, we can binary search for k.\n    # The search range for k is [2, 10^6] (approx).\n    #\n    # For a fixed d, we want to find k such that sum_geometric(k, d) = n.\n    # sum_geometric(k, d) = 1 + k + ... + k^d.\n    #\n    # Lower bound for k is 2.\n    # Upper bound for k is approx n^(1/d).\n    # For d = 3, k_upper_bound = 10^6.\n    # For d = 60, k_upper_bound = 2.\n    #\n    # Binary search for k:\n    # low = 2\n    # high = int(n**(1/d)) + 2\n    # Cap high to prevent overflow during sum calculation, e.g., 2 * 10^9 or some safe value.\n    # A safer high value: if k^d > n, then k > n^(1/d).\n    # So we can set high to min(10^9, int(n**(1/d)) + 2)\n    # For d=3, n=10^18, high = 10^6.\n    # For d=2, n=10^18, high = 10^9.\n    # The d=2 case is handled by quadratic formula, so we don't need to worry about k up to 10^9 in this loop.\n    # So for d >= 3, k_max is at most 10^6.\n\n    max_d = int(math.log2(n + 1)) + 2 # Upper bound for d\n\n    for d in range(3, max_d):\n        low = 2\n        # Calculate a safe upper bound for k.\n        # k^d < n => k < n^(1/d).\n        # We need to be careful with floating point precision for n**(1/d).\n        # A simple way to get an upper bound: if k=2, 2^d is approx n.\n        # If k=3, 3^d is approx n.\n        # Max k for d=3, n=10^18 is approx 10^6.\n        # Max k for d=60, n=10^18 is approx 2.\n        # A safe upper bound for k for any d >= 3 is 10^6 + 2.\n        # Let's use 2 * 10^6 as a generous upper bound, or n^(1/d) if it's smaller.\n        \n        # Calculate a tighter upper bound for k\n        # k^d < n => k < n^(1/d)\n        # Using math.pow for n**(1/d) can be imprecise.\n        # A safer upper bound for k:\n        # If k=2, sum = 2^(d+1) - 1. If this is > n, then no k >= 2 works.\n        # We are looking for k such that 1 + k + ... + k^d = n.\n        # If k >= 2, then k^d < n. So k < n^(1/d).\n        # Max value of k is around 10^6 (for d=3, n=10^18).\n        # Let's set high to a fixed large value like 2*10^6, or calculate it more precisely.\n        \n        # A more robust high bound for binary search for k:\n        # Since 1 + k + ... + k^d > k^d, we must have k^d < n.\n        # So k < n^(1/d).\n        # For n = 10^18, d = 3, k < (10^18)^(1/3) = 10^6.\n        # For n = 10^18, d = 60, k < (10^18)^(1/60) = 10^(18/60) = 10^(3/10) approx 1.99.\n        # So high can be set to 2*10^6 for safety.\n        high = 2 * 10**6 # A sufficiently large upper bound for k when d >= 3\n        # If n is small, high could be smaller.\n        # Example: n=15, d=3. k^3 < 15 => k < 2.46. So k=2.\n        # high = min(high, int(n**(1/d)) + 2) is too slow due to pow.\n        # Instead, we can check if mid^d overflows or exceeds n.\n\n        found_k_for_d = False\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            power_k = 1\n            overflow = False\n            for _ in range(d + 1):\n                current_sum += power_k\n                if _ < d: # Prevent overflow on last iteration for power_k\n                    if n // mid < power_k: # Check for power_k * mid overflow\n                        overflow = True\n                        break\n                    power_k *= mid\n                if current_sum > n: # Check for current_sum overflow\n                    overflow = True\n                    break\n\n            if overflow:\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n    \n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children)\n    # Total vertices = 1 (root) + k (children) = k + 1\n    # n = k + 1  => k = n - 1\n    # Since k > 1, n - 1 > 1 => n > 2.\n    # This is valid for any n > 2.\n    # However, the problem statement says \"This step should be done at least once.\"\n    # which implies there must be at least one expansion from a leaf.\n    # So, the smallest snowflake is root + k children + k*k grandchildren.\n    # Total vertices = 1 + k + k*k.\n    # So, n must be of the form 1 + k + k^2 + ... + k^d for d >= 2.\n\n    # Check for d = 2 (1 + k + k^2)\n    # n = k^2 + k + 1\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4(1 - n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    discriminant = 4 * n - 3\n    if discriminant >= 0:\n        sqrt_discriminant = int(math.isqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            k_val = (-1 + sqrt_discriminant) // 2\n            if k_val > 1 and (-1 + sqrt_discriminant) % 2 == 0:\n                print(\"YES\")\n                return\n\n    # Check for d >= 3\n    # n = 1 + k + k^2 + ... + k^d = (k^(d+1) - 1) / (k - 1)\n    # We need to find if such a k > 1 and d >= 2 exist.\n    # The smallest d is 2, which we handled above. So we check d >= 3.\n    # For k >= 2, the sum grows very quickly.\n    # For d = 3: n = 1 + k + k^2 + k^3\n    # For k = 2, n = 1 + 2 + 4 + 8 = 15\n    # For k = 3, n = 1 + 3 + 9 + 27 = 40\n    # For k = 4, n = 1 + 4 + 16 + 64 = 85\n    #\n    # Maximum k for d=3:\n    # k^3 < n => k < n^(1/3)\n    # k_max_for_d3 = int(n**(1/3)) + 2 (add some buffer for floating point inaccuracies)\n    # Iterate k from 2 up to a reasonable limit.\n    # The smallest possible n is 1+2+4 = 7 (for k=2, d=2)\n    # The smallest possible n for d=3 is 1+2+4+8 = 15 (for k=2, d=3)\n    # The smallest possible n for d=4 is 1+2+4+8+16 = 31 (for k=2, d=4)\n\n    # Upper bound for k:\n    # If d >= 3, then n = 1 + k + k^2 + ... + k^d > k^d.\n    # So k < n^(1/d).\n    # Since d >= 3, k < n^(1/3).\n    # For n = 10^18, k < (10^18)^(1/3) = 10^6.\n    # This range for k is too large to iterate for each test case.\n    #\n    # Upper bound for d:\n    # For k = 2, n = 2^(d+1) - 1.\n    # 2^(d+1) = n + 1\n    # d+1 = log2(n+1)\n    # d = log2(n+1) - 1\n    # For n = 10^18, d approx log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So d can go up to around 60.\n\n    # The approach is to iterate over possible values of d (depth) and then\n    # try to find k using binary search or nth root.\n    # d must be at least 3 for this loop, as d=2 is handled by quadratic formula.\n    #\n    # n = (k^(d+1) - 1) / (k - 1)\n    # (k - 1) * n = k^(d+1) - 1\n    # n*k - n = k^(d+1) - 1\n    # k^(d+1) - n*k + (n - 1) = 0\n    # Let f(k) = k^(d+1) - n*k + (n - 1)\n    # We are looking for integer k > 1 such that f(k) = 0.\n    #\n    # The function f(k) is monotonically increasing for k > 1 if d >= 2.\n    # f'(k) = (d+1)k^d - n.\n    # f'(k) > 0 if (d+1)k^d > n.\n    # Smallest k is 2. (d+1)2^d. If this is > n, then f(k) is increasing.\n    # For d=3, (3+1)2^3 = 4*8 = 32. If n > 32, f'(2) < 0.\n    #\n    # The function k^(d+1) - n*k + (n-1) = 0\n    # For k > 1, k^(d+1) < n*k. So k^d < n. This means k < n^(1/d).\n    # This gives an upper bound for k.\n    #\n    # Let's iterate d from 3 up to approx 60.\n    # For each d, we need to find k.\n    # k_min = 2\n    # k_max = int(n**(1/d)) + 2 (add buffer)\n    # If k_max becomes too large, we can cap it.\n    # For d=3, k_max approx 10^6. Binary search for k in [2, 10^6].\n    # For d=60, k_max approx (10^18)^(1/60) = (10^3)^(1/10) approx 2.\n    #\n    # The upper bound for d is log2(n+1) - 1.\n    # Max d is around 60.\n    #\n    # For each d, we can binary search for k.\n    # The search range for k is [2, 10^6] (approx).\n    #\n    # For a fixed d, we want to find k such that sum_geometric(k, d) = n.\n    # sum_geometric(k, d) = 1 + k + ... + k^d.\n    #\n    # Lower bound for k is 2.\n    # Upper bound for k is approx n^(1/d).\n    # For d = 3, k_upper_bound = 10^6.\n    # For d = 60, k_upper_bound = 2.\n    #\n    # Binary search for k:\n    # low = 2\n    # high = int(n**(1/d)) + 2\n    # Cap high to prevent overflow during sum calculation, e.g., 2 * 10^9 or some safe value.\n    # A safer high value: if k^d > n, then k > n^(1/d).\n    # So we can set high to min(10^9, int(n**(1/d)) + 2)\n    # For d=3, n=10^18, high = 10^6.\n    # For d=2, n=10^18, high = 10^9.\n    # The d=2 case is handled by quadratic formula, so we don't need to worry about k up to 10^9 in this loop.\n    # So for d >= 3, k_max is at most 10^6.\n\n    max_d = int(math.log2(n + 1)) + 2 # Upper bound for d\n\n    for d in range(3, max_d):\n        low = 2\n        # Calculate a safe upper bound for k.\n        # k^d < n => k < n^(1/d).\n        # We need to be careful with floating point precision for n**(1/d).\n        # A simple way to get an upper bound: if k=2, 2^d is approx n.\n        # If k=3, 3^d is approx n.\n        # Max k for d=3, n=10^18 is approx 10^6.\n        # Max k for d=60, n=10^18 is approx 2.\n        # A safe upper bound for k for any d >= 3 is 10^6 + 2.\n        # Let's use 2 * 10^6 as a generous upper bound, or n^(1/d) if it's smaller.\n        \n        # Calculate a tighter upper bound for k\n        # k^d < n => k < n^(1/d)\n        # Using math.pow for n**(1/d) can be imprecise.\n        # A safer upper bound for k:\n        # If k=2, sum = 2^(d+1) - 1. If this is > n, then no k >= 2 works.\n        # We are looking for k such that 1 + k + ... + k^d = n.\n        # If k >= 2, then k^d < n. So k < n^(1/d).\n        # Max value of k is around 10^6 (for d=3, n=10^18).\n        # Let's set high to a fixed large value like 2*10^6, or calculate it more precisely.\n        \n        # A more robust high bound for binary search for k:\n        # Since 1 + k + ... + k^d > k^d, we must have k^d < n.\n        # So k < n^(1/d).\n        # For n = 10^18, d = 3, k < (10^18)^(1/3) = 10^6.\n        # For n = 10^18, d = 60, k < (10^18)^(1/60) = 10^(18/60) = 10^(3/10) approx 1.99.\n        # So high can be set to 2*10^6 for safety.\n        high = 2 * 10**6 # A sufficiently large upper bound for k when d >= 3\n        # If n is small, high could be smaller.\n        # Example: n=15, d=3. k^3 < 15 => k < 2.46. So k=2.\n        # high = min(high, int(n**(1/d)) + 2) is too slow due to pow.\n        # Instead, we can check if mid^d overflows or exceeds n.\n\n        found_k_for_d = False\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            power_k = 1\n            overflow = False\n            for _ in range(d + 1):\n                current_sum += power_k\n                if _ < d: # Prevent overflow on last iteration for power_k\n                    if n // mid < power_k: # Check for power_k * mid overflow\n                        overflow = True\n                        break\n                    power_k *= mid\n                if current_sum > n: # Check for current_sum overflow\n                    overflow = True\n                    break\n\n            if overflow:\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n    \n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 568,
        "completion_token_count": 3069,
        "thoughts_token_count": 0
    }
}