{
    "start": 1758294362.2579548,
    "end": 1758295982.263963,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:33 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Since n, m, and h are at most 50, we can use a dynamic programming approach that considers the restrictions and the fact that the profit is the sum of squares.\n\n However, note that the restrictions are given as intervals [l_i, r_i] with maximum height x_i. We need to assign a height for each spot (from 0 to h) such that for every restriction (l_i, r_i, x_i), the maximum height in [l_i, r_i] is <= x_i.\n\n Observation: The profit function is separable (each house's square is independent). But the restrictions couple the houses.\n\n We can use DP over the positions and keep track of the active restrictions? But there are up to 50 restrictions and 50 positions. Alternatively, we can precompute the set of restrictions that apply to each position.\n\n Alternatively, we can consider that the problem is small (n<=50, m<=50, h<=50) so we might try to do state space search with memoization, but the state might be too big.\n\n Another idea: since the profit is the sum of squares, and the constraints are that in each interval the maximum is <= x_i, we can think of constraints as forcing some houses to be at most a certain value.\n\n However, note that the restrictions may overlap arbitrarily.\n\n Approach:\n\n 1. Preprocess the restrictions: For each position i (from 1 to n), we can find the minimal x such that there exists a restriction (l, r, x) that covers i. Actually, we want the tightest constraint on each position: the minimum x from all restrictions that cover i. But wait: if two restrictions cover the same house, then the house must satisfy the more restrictive one (the smallest x). So for each house i, let max_constraint[i] = min{ x_i : restriction (l_i, r_i, x_i) such that l_i <= i <= r_i }\n\n However, note: a restriction might not directly set the house to be at most x_i, but it sets the entire range to have maximum <= x_i. But if multiple restrictions set different limits, the house must be <= the minimum x_i among the restrictions that cover it.\n\n But caution: is that always sufficient? Consider two restrictions: \n   Restriction 1: [1,3] with x=2\n   Restriction 2: [2,4] with x=3\n Then house 2 must be <= min(2,3)=2. Similarly, house 3 must be <= min(2,3)=2.\n\n However, note: the entire range [1,3] must have maximum <=2, so house 3 is forced to be <=2. Similarly, [2,4] requires house 3 and 4 to be <=3, but house 3 is already forced by the first restriction to be <=2. So the minimal constraint per house is indeed the minimum x_i of all restrictions covering that house.\n\n But wait: what if a restriction does not cover a particular house? Then that house isn't constrained by that restriction. So the above holds.\n\n However, note that there's no restriction that forces the house to be at most h, but the problem states \"In each spot, you can build a house with an integer height between 0 and h\". So the base constraint is h.\n\n So for each house i, the maximum allowed height is min(h, min_{all restrictions j that cover i} x_j). Let this value be c[i].\n\n Then, we can assign to each house i a height a_i in [0, c[i]] and the profit is sum(i=1..n) a_i^2.\n\n Now, is this equivalent to the original problem? \n\n Example: In the first example, the constraints are:\n   Restriction 1: [1,1] with x=1 -> house1: min(h=3, 1)=1\n   Restriction 2: [2,2] with x=3 -> house2: min(3,3)=3\n   Restriction 3: [3,3] with x=2 -> house3: min(3,2)=2\n\n Then the maximum profit is 1^2 + 3^2 + 2^2 = 1+9+4=14.\n\n But wait, what if there was a restriction that doesn't cover a house? Then that house is only constrained by h.\n\n However, consider a more complex example: \n   Restrictions: \n        [1,2] with x=1\n        [2,3] with x=2\n\n   Then for house1: only [1,2] -> x=1\n        house2: both -> min(1,2)=1\n        house3: [2,3] -> x=2\n\n   Then the assignment would be: [1,1,2]",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to certain zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. Each house's height must comply with all restrictions that apply to its position.\n\n### Approach\n1. **Problem Analysis**: The problem involves assigning heights to houses such that each house's height does not exceed the minimum value derived from all applicable restrictions. The key observation here is that for each house at position `i`, the maximum allowable height is the minimum value among all restrictions covering that position and the global maximum height `h`.\n\n2. **Intuition**: For each house, the tightest restriction (smallest maximum height) from all overlapping restrictions dictates the maximum height it can have. This simplifies the problem to determining the minimal constraint for each house individually.\n\n3. **Algorithm Selection**: \n   - **Preprocessing**: For each house position, compute the minimal maximum height allowed by all restrictions covering it. This involves checking each restriction and keeping track of the smallest `x_i` value for any restriction that includes the current house.\n   - **Maximization**: Once the constraints for each house are determined, the optimal height for each house is simply its constraint value (since the profit function \\(a^2\\) is maximized when `a` is as large as possible within its allowed range).\n\n4. **Complexity Analysis**: The algorithm processes each house and each restriction once. With `n` houses and `m` restrictions, both up to 50, the complexity is \\(O(n \\times m)\\), which is efficient for the given constraints.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    constraints = [0] * (n + 1)\n    \n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index + 1])\n        x_val = int(data[index + 2])\n        index += 3\n        for i in range(l, r + 1):\n            if x_val < constraints[i]:\n                constraints[i] = x_val\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        max_height = min(h, constraints[i])\n        total_profit += max_height ** 2\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read in one go for efficiency, especially given the small constraints. The first three values are `n` (number of spots), `h` (maximum height per house), and `m` (number of restrictions).\n\n2. **Processing Restrictions**: For each restriction, the code checks all positions from `l` to `r` and updates the minimal constraint for each position if the current restriction's `x_i` is smaller than the previously recorded constraint.\n\n3. **Calculating Profit**: For each house, the maximum allowable height is the minimum between the global maximum `h` and the computed constraint. The profit for each house is the square of this maximum height, summed up across all houses.\n\nThis approach efficiently leverages preprocessing to simplify the constraints for each house, ensuring optimal profit while adhering to all zoning restrictions.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    constraints = [0] * (n + 1)\n    \n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index + 1])\n        x_val = int(data[index + 2])\n        index += 3\n        for i in range(l, r + 1):\n            if x_val < constraints[i]:\n                constraints[i] = x_val\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        max_height = min(h, constraints[i])\n        total_profit += max_height ** 2\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 822,
        "completion_token_count": 716,
        "thoughts_token_count": 1023
    }
}