{
    "start": 1758293145.4660094,
    "end": 1758293199.2546573,
    "start-formatted": "2025-09-19 23:45 KST",
    "end-formatted": "2025-09-19 23:46 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\nfrom functools import lru_cache\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n\n    # Total length of the original string\n    total_length = n + m\n\n    # The number of operations needed to reduce the string to length 1\n    # Each operation reduces the length by 1\n    # So we need (total_length - 1) operations\n    k = total_length - 1\n\n    # We need to determine how many ways to choose positions to merge\n    # such that the final character is 'g'\n\n    @lru_cache(maxsize=None)\n    def count_ways(total, target):\n        if total == 1:\n            return 1 if target == g else 0\n        res = 0\n        for i in range(1, total):\n            # Choose i positions to merge\n            # After merging, we have total - i positions left\n            # The merged value depends on the number of 0s in those i positions\n            # If i is even, then the merged value is 0\n            # If i is odd, then the merged value is 1\n            # So we need to count the number of ways to choose i positions\n            # and ensure the final result is 'g'\n            # Let's consider the parity of i\n            if i % 2 == 0:\n                # Merged value is 0\n                if target == 0:\n                    res += comb(total, i)\n            else:\n                # Merged value is 1\n                if target == 1:\n                    res += comb(total, i)\n            res %= MOD\n        return res\n\n    # The number of beautiful strings is the number of ways to arrange n 0s and m 1s\n    # such that after (total_length - 1) merges, the final character is 'g'\n    # We need to find the number of such arrangements\n\n    # The number of such arrangements is equal to the number of ways to choose positions\n    # to merge so that the final character is 'g', multiplied by the number of valid initial strings\n    # However, since we are counting all possible initial strings with exactly n 0s and m 1s,\n    # and considering the effect of merging, the total number of beautiful strings is the number of such valid sequences\n\n    # The number of initial beautiful strings is C(n + m, n)\n    total_beautiful_strings = comb(n + m, n)\n\n    # Now we need to determine how many of these can be reduced to 'g' via the described process\n    # We can do this by considering the parity of the number of merges and the resulting value\n\n    # The key insight: the final character is determined by the parity of the number of 0s in the original string\n    # Because each merge operation reduces the number of 0s by 1 or keeps it the same\n    # The final character is 0 if the number of 0s is even, and 1 otherwise\n    # Wait, no, the merging rule is more complex. Let's think again.\n\n    # The final character is determined by the number of 0s in the original string modulo 2\n    # Because each merge operation reduces the number of 0s by 1 if we merge two 0s, or keeps it the same otherwise\n    # But the parity of the number of 0s remains the same throughout the process\n    # Therefore, the final character is 0 if the number of 0s is even, and 1 otherwise\n\n    # So, if the number of 0s is even, then the final character is 0\n    # If the number of 0s is odd, then the final character is 1\n\n    if n % 2 == g:\n        # The final character is 'g', so this is a valid configuration\n        print(total_beautiful_strings % MOD)\n    else:\n        # The final character is not 'g', so no valid configurations\n        print(0)\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\nfrom functools import lru_cache\n\nMOD = 10**9 + 7\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n\n    # Total length of the original string\n    total_length = n + m\n\n    # The number of operations needed to reduce the string to length 1\n    # Each operation reduces the length by 1\n    # So we need (total_length - 1) operations\n    k = total_length - 1\n\n    # We need to determine how many ways to choose positions to merge\n    # such that the final character is 'g'\n\n    @lru_cache(maxsize=None)\n    def count_ways(total, target):\n        if total == 1:\n            return 1 if target == g else 0\n        res = 0\n        for i in range(1, total):\n            # Choose i positions to merge\n            # After merging, we have total - i positions left\n            # The merged value depends on the number of 0s in those i positions\n            # If i is even, then the merged value is 0\n            # If i is odd, then the merged value is 1\n            # So we need to count the number of ways to choose i positions\n            # and ensure the final result is 'g'\n            # Let's consider the parity of i\n            if i % 2 == 0:\n                # Merged value is 0\n                if target == 0:\n                    res += comb(total, i)\n            else:\n                # Merged value is 1\n                if target == 1:\n                    res += comb(total, i)\n            res %= MOD\n        return res\n\n    # The number of beautiful strings is the number of ways to arrange n 0s and m 1s\n    # such that after (total_length - 1) merges, the final character is 'g'\n    # We need to find the number of such arrangements\n\n    # The number of such arrangements is equal to the number of ways to choose positions\n    # to merge so that the final character is 'g', multiplied by the number of valid initial strings\n    # However, since we are counting all possible initial strings with exactly n 0s and m 1s,\n    # and considering the effect of merging, the total number of beautiful strings is the number of such valid sequences\n\n    # The number of initial beautiful strings is C(n + m, n)\n    total_beautiful_strings = comb(n + m, n)\n\n    # Now we need to determine how many of these can be reduced to 'g' via the described process\n    # We can do this by considering the parity of the number of merges and the resulting value\n\n    # The key insight: the final character is determined by the parity of the number of 0s in the original string\n    # Because each merge operation reduces the number of 0s by 1 or keeps it the same\n    # The final character is 0 if the number of 0s is even, and 1 otherwise\n    # Wait, no, the merging rule is more complex. Let's think again.\n\n    # The final character is determined by the number of 0s in the original string modulo 2\n    # Because each merge operation reduces the number of 0s by 1 if we merge two 0s, or keeps it the same otherwise\n    # But the parity of the number of 0s remains the same throughout the process\n    # Therefore, the final character is 0 if the number of 0s is even, and 1 otherwise\n\n    # So, if the number of 0s is even, then the final character is 0\n    # If the number of 0s is odd, then the final character is 1\n\n    if n % 2 == g:\n        # The final character is 'g', so this is a valid configuration\n        print(total_beautiful_strings % MOD)\n    else:\n        # The final character is not 'g', so no valid configurations\n        print(0)\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 922,
        "thoughts_token_count": 0
    }
}