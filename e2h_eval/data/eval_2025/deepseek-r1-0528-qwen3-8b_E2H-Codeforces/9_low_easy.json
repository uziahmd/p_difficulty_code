{
    "start": 1758093352.110983,
    "end": 1758094967.6641924,
    "start-formatted": "2025-09-17 16:15 KST",
    "end-formatted": "2025-09-17 16:42 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, we are given up to 100000 souvenirs, each with weight 1, 2, or 3 and a cost (which can be up to 10^9).\n The total weight capacity m can be up to 300000.\n\n Since the weights are only 1, 2, or 3, we can group the souvenirs by weight.\n Let:\n   type1 = list of costs for souvenirs with weight 1\n   type2 = list of costs for souvenirs with weight 2\n   type3 = list of costs for souvenirs with weight 3\n\n Then, the problem becomes: choose a number a (from type1), b (from type2), c (from type3) such that:\n   1*a + 2*b + 3*c <= m\n   and the total cost = a_i + b_j + c_k is maximized.\n\n However, note that we have multiple items per type. We want to take as many as possible from each type, but we can't exceed the weight.\n\n But note: we are allowed to choose any subset. So for each type, we would want to take the most expensive items first (like fractional knapsack? but integer weights).\n\n However, because the weights are small (only 1,2,3) and the capacity is large (up to 300000) but the number of items per type can be large (up to 100000), we can do:\n\n Step 1: Precompute for each type the sorted list of costs in descending order, and then precompute the maximum total cost for taking k items from that type.\n\n But note: the total weight from one type is k * weight, and we want to maximize the sum of costs for k items. Since we can choose which ones, we should sort each type by cost descending and then compute prefix sums.\n\n However, we don't know how many of each type to take. We have three variables: a, b, c (nonnegative integers) such that a+2b+3c <= m.\n\n How to iterate? The total weight m is up to 300000, so we cannot iterate over a, b, c.\n\n Alternative approach:\n\n We can consider using dynamic programming, but the state space (m up to 300000) might be too heavy for three types.\n\n Instead, note that the weights are very small (only 1,2,3). We can use a two-dimensional DP? But m is 300000, which is too high for a standard DP array.\n\n Another idea: since the weights are 1,2,3, we can break down the problem by considering the number of items from each type and then use the fact that the total weight is linear.\n\n We can also think: what is the maximum total cost if we use only type1 and type3? Then we can add type2.\n\n But note: we have three types. Alternatively, we can use unbounded knapsack style for each type, but the items are distinct and we can use each item at most once.\n\n However, the problem is bounded by the counts: we have a fixed set of items for each type.\n\n Steps:\n\n 1. Group the items by weight.\n 2. For each group (type1, type2, type3), sort the items by cost descending and compute the prefix sums (so that we know the maximum total cost for taking the top k items in that type).\n\n 3. Now, we need to consider all combinations (a, b, c) such that a + 2b + 3c <= m.\n\n But note: a, b, c are the counts from each type. However, the counts are limited by the size of the respective lists.\n\n The total number of items in each type can be up to 100000, so we cannot iterate over a, b, c.\n\n We can try to iterate over one variable and use the others? But the equation a + 2b + 3c <= m has three variables.\n\n Alternatively, we can use the following:\n\n Since the weights are 1,2,3, we can let the total weight be represented as:\n   total_weight = 3*c + 2*b + a <= m\n\n And we can fix c (the number of type3 items) from 0 to floor(m/3). Then, for each c, we have remaining weight R = m - 3*c.\n\n Then, we need to choose a and b (with a>=0, b>=0) such that a + 2b <= R.\n\n Now, we can also fix b (from 0 to floor(R/2)) and then a = R - 2*b, but then we have to check if a is within the available type1",
    "response": "\nTo solve this problem, we need to maximize the total cost of souvenirs that Petya can carry without exceeding a given weight capacity. The souvenirs have weights of either 1, 2, or 3, and each has a distinct cost. The challenge is to select a subset of these souvenirs such that their combined weight is within the limit, and their total cost is maximized.\n\n### Approach\n1. **Grouping by Weight**: First, we group all souvenirs by their weights (1, 2, or 3). This allows us to handle each type separately.\n2. **Sorting and Prefix Sums**: For each group, we sort the souvenirs in descending order of their costs. Then, we compute prefix sums for each group. These prefix sums help in quickly determining the maximum cost achievable by selecting the top `k` items from any group.\n3. **Iterate Over Possible Combinations**: We iterate over possible numbers of type-3 souvenirs (since they are the heaviest). For each number of type-3 items, we calculate the remaining weight capacity. Using this remaining capacity, we determine the optimal combination of type-1 and type-2 items by leveraging the prefix sums and ensuring the total weight does not exceed the limit.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    type1 = []\n    type2 = []\n    type3 = []\n    \n    for i in range(n):\n        w = int(data[index])\n        c = int(data[index+1])\n        index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    prefix1 = [0]\n    for i in range(len(type1)):\n        prefix1.append(prefix1[-1] + type1[i])\n        \n    prefix2 = [0]\n    for i in range(len(type2)):\n        prefix2.append(prefix2[-1] + type2[i])\n        \n    prefix3 = [0]\n    for i in range(len(type3)):\n        prefix3.append(prefix3[-1] + type3[i])\n        \n    best = 0\n    len3 = len(prefix3) - 1\n    for c_count in range(len3 + 1):\n        if 3 * c_count > m:\n            break\n        rem = m - 3 * c_count\n        if rem < 0:\n            break\n            \n        max_b = rem // 2\n        b_val = min(max_b, len(prefix2) - 1)\n        total_cost = prefix3[c_count]\n        for b_count in range(b_val, -1, -1):\n            rem_after_b = rem - 2 * b_count\n            a_count = rem_after_b\n            if a_count < 0:\n                continue\n            a_val = min(a_count, len(prefix1) - 1)\n            current_total = total_cost + prefix2[b_count] + prefix1[a_val]\n            if current_total > best:\n                best = current_total\n                \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The input is read and parsed into the number of souvenirs `n` and the maximum weight capacity `m`.\n2. **Grouping Souvenirs**: Souvenirs are grouped into three lists based on their weights (1, 2, or 3).\n3. **Sorting and Prefix Sums**: Each group is sorted in descending order of cost, and prefix sums are computed to facilitate quick calculation of the maximum cost for selecting the top `k` items from any group.\n4. **Iterating Over Type-3 Items**: For each possible count of type-3 items (from 0 to the maximum possible without exceeding `m`), the remaining weight capacity is calculated.\n5. **Optimal Combination Calculation**: For each remaining weight, the algorithm checks all possible combinations of type-2 items (from the maximum possible down to 0) and calculates the corresponding number of type-1 items. The total cost is updated whenever a higher value is found.\n6. **Output**: The maximum total cost encountered during the iteration is printed.\n\nThis approach efficiently narrows down the problem by leveraging the constraints on item weights and using prefix sums to optimize the selection process, ensuring optimal performance even for large input sizes.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(0)\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    index = 2\n    type1 = []\n    type2 = []\n    type3 = []\n    \n    for i in range(n):\n        w = int(data[index])\n        c = int(data[index+1])\n        index += 2\n        if w == 1:\n            type1.append(c)\n        elif w == 2:\n            type2.append(c)\n        elif w == 3:\n            type3.append(c)\n            \n    type1.sort(reverse=True)\n    type2.sort(reverse=True)\n    type3.sort(reverse=True)\n    \n    prefix1 = [0]\n    for i in range(len(type1)):\n        prefix1.append(prefix1[-1] + type1[i])\n        \n    prefix2 = [0]\n    for i in range(len(type2)):\n        prefix2.append(prefix2[-1] + type2[i])\n        \n    prefix3 = [0]\n    for i in range(len(type3)):\n        prefix3.append(prefix3[-1] + type3[i])\n        \n    best = 0\n    len3 = len(prefix3) - 1\n    for c_count in range(len3 + 1):\n        if 3 * c_count > m:\n            break\n        rem = m - 3 * c_count\n        if rem < 0:\n            break\n            \n        max_b = rem // 2\n        b_val = min(max_b, len(prefix2) - 1)\n        total_cost = prefix3[c_count]\n        for b_count in range(b_val, -1, -1):\n            rem_after_b = rem - 2 * b_count\n            a_count = rem_after_b\n            if a_count < 0:\n                continue\n            a_val = min(a_count, len(prefix1) - 1)\n            current_total = total_cost + prefix2[b_count] + prefix1[a_val]\n            if current_total > best:\n                best = current_total\n                \n    print(best)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 476,
        "completion_token_count": 990,
        "thoughts_token_count": 1023
    }
}