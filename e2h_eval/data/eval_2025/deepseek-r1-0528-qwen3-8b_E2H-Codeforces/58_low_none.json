{
    "start": 1758297428.2235982,
    "end": 1758300816.663556,
    "start-formatted": "2025-09-20 00:57 KST",
    "end-formatted": "2025-09-20 01:53 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, we are to find:\n   t = the minimum number of edges to add to form a simple cycle of odd length (with more than one vertex)\n   w = the number of ways to add t edges to achieve that\n\n Conditions: \n   The graph is undirected, without parallel edges or loops, and not necessarily connected.\n\n Important: We cannot add parallel edges or loops.\n\n Observations:\n\n 1. Odd cycle: In an undirected graph, an odd cycle must have an odd number of edges (so the cycle length is odd).\n 2. We are allowed to add edges arbitrarily (without creating multiple edges or loops). But note: we want the minimum number of edges to add.\n\n Let's consider possibilities:\n\n Case 0: If the graph already contains an odd-length cycle, then t=0 and w=1? But wait, note: we are forming a cycle by adding edges. However, if the graph already has an odd cycle, then no edge needs to be added. But note: the problem says \"form a simple cycle of an odd length\". So if there is one, then we don't need to add any edge. However, the problem states: \"minimum number of edges that must be added\", so if there is an odd cycle already, then t=0. And how many ways? There is exactly one way: do nothing.\n\n But note: the graph might have multiple odd cycles? However, the problem is about existence. So if there is at least one odd cycle, then we don't need to add any edge.\n\n However, what if the graph doesn't have an odd cycle? Then we must add edges until an odd cycle exists.\n\n Steps:\n\n 1. Check for existing odd cycles in the graph.\n\n How to check for odd cycles?\n   We can use BFS/DFS to check for bipartiteness. A graph is bipartite if and only if it does not contain an odd cycle.\n\n   However, note: the graph may not be connected. So we check each connected component for bipartiteness.\n\n   If any connected component is not bipartite, then there is an odd cycle. Then t=0 and w=1.\n\n 2. If the graph is bipartite (i.e., no odd cycle), then we need to consider adding edges.\n\n What are the minimal ways to form an odd cycle?\n\n Possibilities for minimal additions:\n\n  a) Adding one edge: \n        Consider: if we can form an odd cycle by adding one edge, then we look for a pair of vertices (u, v) such that adding the edge (u, v) creates an odd cycle.\n\n        Note: In a bipartite graph, all cycles are even. When we add an edge (u, v), we break the bipartition? Actually, if u and v are in the same bipartition set, then the new edge would connect two nodes of the same color. Then, if there is a path from u to v of even length (which there is, because they are same color) then the cycle formed by the path and the edge would be even+1 (odd). However, note: the path from u to v in the same set in a bipartite graph is of even length (because the distance between two nodes in the same set is even). Then the cycle length = (even length path) + 1 -> odd. \n\n        But wait: if we have two nodes u and v in the same bipartition set, then the edge (u,v) creates an odd cycle? Not necessarily. The cycle must exist. We require that there is a path from u to v (so they must be in the same connected component) and then the cycle will be the path from u to v (which is even) plus the edge (odd cycle). However, note: the entire cycle must be simple and of odd length. But the condition is that the graph is connected? Actually, the graph might have multiple components.\n\n        However, if we add an edge (u, v) and u and v are in the same connected component and the same bipartition set, then we get an odd cycle.\n\n        Therefore, one-edge addition: we can choose any two vertices in the same connected component that are in the same bipartition set and are not already connected (but since the graph is simple, we avoid existing edges). However, note: the problem says we cannot add parallel edges. So we cannot add an edge that is already present.\n\n        But wait: in a bipartite graph, edges are only between different sets. So an edge between two nodes of the same set is absent (otherwise the graph wouldn't be bipartite). Therefore, any edge (u, v) with u and v in the same set and in the same connected component would create an odd cycle.\n\n        However, what if the two vertices are in different connected components? Then adding (u, v) won't form a cycle",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges. The solution involves checking for existing odd cycles and then determining the minimal edge additions required if no such cycle exists.\n\n### Approach\n1. **Check for Existing Odd Cycles**: \n   - A graph is bipartite if it contains no odd-length cycles. We use BFS to check bipartiteness for each connected component. If any component is not bipartite, the graph already contains an odd cycle, so the answer is `0 1`.\n\n2. **One Edge Addition**:\n   - If the graph is bipartite, adding an edge between two vertices in the same set of a bipartite component creates an odd cycle. The number of such edges is the count of non-edges between vertices in the same set within the same component.\n\n3. **Two Edge Additions**:\n   - If no one-edge solution exists (i.e., all vertices in the same set are already connected), we consider adding two edges. This involves connecting two different components via two edges, forming an odd cycle. The calculation involves combinations of vertices from different components.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    bipartite_components = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    comp_vertices = []\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_count += 1\n            visited[i] = True\n            color[i] = 0\n            comp_vertices.append(i)\n            comp_id[i] = comp_count\n            queue = deque([i])\n            current_comp = []\n            while queue:\n                node = queue.popleft()\n                current_comp.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            bipartite_components = False\n            components.append(current_comp)\n            \n    if not bipartite_components:\n        print(\"0 1\")\n        return\n        \n    total_edges_added_one = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] == color[j] and not (i in graph[j] or j in graph[i]):\n                total_edges_added_one += 1\n                \n    if total_edges_added_one > 0:\n        print(\"1\", total_edges_added_one)\n        return\n        \n    comp_edges = {}\n    for i in range(len(components)):\n        comp = components[i]\n        comp_edges[i] = len(comp)\n        \n    total_ways_two = 0\n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            size_i = comp_edges[i]\n            size_j = comp_edges[j]\n            total_ways_two += size_i * size_j\n            \n    print(\"2\", total_ways_two)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of vertices `n` and edges `m`, followed by the edges themselves.\n2. **Graph Construction**: The graph is represented using adjacency lists.\n3. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component fails this check, an odd cycle exists, and the answer is `0 1`.\n4. **One Edge Addition**: If the graph is bipartite, count the number of non-edges between vertices of the same color in each component. If any such edges exist, the answer is `1` followed by the count.\n5. **Two Edge Additions**: If no one-edge solution exists, the answer involves connecting two different components with two edges. The number of ways is calculated by multiplying the sizes of the two components and summing over all pairs of components.\n\nThis approach efficiently checks for existing odd cycles and calculates the minimal edge additions required, ensuring optimal performance even for large graphs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    bipartite_components = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    comp_vertices = []\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_count += 1\n            visited[i] = True\n            color[i] = 0\n            comp_vertices.append(i)\n            comp_id[i] = comp_count\n            queue = deque([i])\n            current_comp = []\n            while queue:\n                node = queue.popleft()\n                current_comp.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            bipartite_components = False\n            components.append(current_comp)\n            \n    if not bipartite_components:\n        print(\"0 1\")\n        return\n        \n    total_edges_added_one = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] == color[j] and not (i in graph[j] or j in graph[i]):\n                total_edges_added_one += 1\n                \n    if total_edges_added_one > 0:\n        print(\"1\", total_edges_added_one)\n        return\n        \n    comp_edges = {}\n    for i in range(len(components)):\n        comp = components[i]\n        comp_edges[i] = len(comp)\n        \n    total_ways_two = 0\n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            size_i = comp_edges[i]\n            size_j = comp_edges[j]\n            total_ways_two += size_i * size_j\n            \n    print(\"2\", total_ways_two)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1034,
        "thoughts_token_count": 1023
    }
}