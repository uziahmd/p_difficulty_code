{
    "start": 1758294352.3112023,
    "end": 1758294603.8434248,
    "start-formatted": "2025-09-20 00:05 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of l, r, x.\n Since n, m <= 50, we can use dynamic programming or iterate over possibilities, but note that the restrictions might be overlapping and we need to satisfy all.\n\n However, note that the constraints are small (n, m up to 50) but the height is up to 50 and the number of restrictions is 50. We cannot try all 50^50 possibilities.\n\n Approach:\n\n We can think of the following:\n\n Each house has a height between 0 and h. The profit is the sum of squares. The restrictions are on contiguous intervals: in [l_i, r_i] the maximum must be <= x_i.\n\n We have up to 50 restrictions. But note: the restrictions might not be independent. We must satisfy all.\n\n Idea: use state space that considers the restrictions and the heights? But the state space would be too high.\n\n Alternatively, we can use linear programming relaxation with integer constraints? But n=50 is too high for that.\n\n Another idea: since the number of restrictions is at most 50, we can use constraint propagation and break the problem into segments.\n\n However, note that the problem is small (n<=50) but we have to consider that each house can have up to 51 values (0..h). That is 51^50 states which is too many.\n\n Alternate approach: use dynamic programming that goes from left to right and keeps track of the current restriction violations?\n\n But how to enforce the restrictions? Each restriction is a condition on a contiguous segment.\n\n We can precompute the effect of restrictions: if a restriction applies to a segment, then the entire segment must have height <= x_i.\n\n We can also note that the restrictions might force some houses to be low. Moreover, the objective function is separable (each house's profit is independent) but the constraints are coupled.\n\n Since n and m are small (<=50) but the state space is large, we need a smarter way.\n\n Observation: The restrictions are given by intervals and require the maximum in that interval to be at most x_i. This is similar to the classic \"consecutive ones\" problem but with quadratic objective.\n\n Another idea: use iterative constraint satisfaction. Since the restrictions are independent in terms of their intervals, we can try to assign the maximum allowed by all restrictions that cover a house.\n\n However, note that we can choose the heights arbitrarily (from 0 to h) as long as the restriction conditions hold.\n\n Let's define for each house i, the maximum height we can assign is:\n   min( h, min_{for each restriction j that covers i} x_j )\n\n But wait: is that sufficient? Actually, yes because if a house is covered by several restrictions, then it must be <= the minimum x_j of those restrictions. However, note that the restriction conditions are about the entire segment: the tallest house in the segment must be <= x_j. This means that even if one house in the segment is set to x_j, the entire segment must have no house exceeding x_j. But note: the condition is that the maximum in the segment is <= x_j. So if a house is in multiple segments, then its height must be <= the minimum x_j of the restrictions that cover it.\n\n However, is that the only constraint? Yes, because the restrictions are independent and the condition for a segment is solely that the maximum in that segment is <= x_j. And the condition for a house i is that it must be <= x_j for every restriction j that includes i.\n\n Therefore, we can compute for each house i:\n   base[i] = min( h, min_{j: l_j <= i <= r_j} x_j )\n\n Then, we are free to assign any integer value from 0 to base[i] for house i, and the profit is the sum of squares.\n\n Then, the problem reduces to: for each house i, we can choose a value v_i in [0, base[i]] to maximize the total profit, but wait: is that correct?\n\n Let me check with the example: \n Example 1: n=3, h=3, m=3, restrictions: [1,1,1], [2,2,3], [3,3,2]\n\n For house 1: base[0] = min(3, 1) = 1.\n For house 2: base[1] = min(3, 3) = 3.\n For house 3: base[2] = min(3, 2) = 2.\n\n Then the profit is 1^2 + 3^2 + 2^2 = 1+9+4 = 14 -> matches.\n\n Example 2: \n Input: \"4 10 2\\n2 3 8\\n3 4 7\"\n\n For house 1: no restriction",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to certain zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. The constraints specify that within certain intervals, the tallest house must not exceed a given height.\n\n### Approach\n1. **Problem Analysis**: The key observation here is that each house's maximum allowable height is constrained by all the restrictions that include it. Specifically, for each house at position `i`, the maximum height it can have is the minimum value among all the restriction heights (`x_i`) that cover this house, but not exceeding the global maximum height `h`.\n\n2. **Insight**: For each house, compute the base maximum height it can have by considering all restrictions that apply to it. This base is the minimum of `h` and the smallest `x_i` from any restriction covering the house.\n\n3. **Algorithm Selection**: Once we determine the base height for each house, the problem reduces to selecting a height for each house between 0 and its base height such that the sum of the squares of these heights is maximized. Since the profit function is separable (each house's contribution is independent), the optimal solution for each house is simply its base height, because the square function is monotonically increasing for non-negative values.\n\n4. **Complexity Analysis**: The algorithm involves processing each restriction once to update the base heights for relevant houses. With `n` houses and `m` restrictions, each of length up to `n`, the complexity is O(m*n), which is efficient given the constraints (n, m ≤ 50).\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    base = [h] * n\n    \n    for l, r, x_val in restrictions:\n        for i in range(l-1, r):\n            if base[i] > x_val:\n                base[i] = x_val\n    \n    total_profit = 0\n    for height in base:\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, which includes the number of spots `n`, the maximum height `h`, the number of restrictions `m`, followed by `m` lines each specifying a restriction's left and right bounds and the maximum allowed height in that interval.\n\n2. **Base Height Calculation**: For each restriction, the code updates the base height for all houses within the specified interval to the minimum of their current base height and the restriction's maximum height. This ensures that each house's height adheres to all applicable restrictions.\n\n3. **Profit Calculation**: After determining the base height for each house, the maximum profit is computed by summing the squares of these base heights. This is because the square function is maximized when each house is built at its maximum allowable height, given the constraints.\n\n4. **Output**: The total profit is printed, which represents the optimal solution under the given constraints.\n\nThis approach efficiently leverages the constraints to determine the optimal heights for each house, ensuring compliance with all zoning restrictions while maximizing the profit.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    base = [h] * n\n    \n    for l, r, x_val in restrictions:\n        for i in range(l-1, r):\n            if base[i] > x_val:\n                base[i] = x_val\n    \n    total_profit = 0\n    for height in base:\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 814,
        "completion_token_count": 758,
        "thoughts_token_count": 1023
    }
}