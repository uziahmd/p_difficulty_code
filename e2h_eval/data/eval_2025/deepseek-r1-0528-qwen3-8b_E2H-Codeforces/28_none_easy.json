{
    "start": 1758293074.4148853,
    "end": 1758293130.3709173,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:45 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    # We need to reduce the string to length 1 through successive operations\n    # Each operation reduces length by 1\n    # So after (total_length - 1) operations, we get a single character\n    # The final character must be g\n    \n    # Let's compute the number of ways to reach g at the end\n    # We need to count the number of beautiful strings that can be reduced to g\n    \n    # The number of ways is equal to the number of ways to choose positions for 0s and 1s\n    # such that the final character is g\n    # This depends on the parity of the number of 0s and 1s and their combination\n    \n    # The final character is determined by the parity of the number of 0s and 1s\n    # For example:\n    # If you have an even number of 0s, then the final character is 0\n    # If you have an odd number of 0s, then the final character is 1\n    # Because each operation replaces two characters with one, and the result depends on the parity\n    \n    # So the final character is determined by the parity of the number of 0s\n    # Because 0 + 0 -> 0, 0 + 1 -> 1, 1 + 1 -> 0, etc.\n    # So the final character is 0 if the number of 0s is even, else 1\n    \n    # So we want the number of beautiful strings where the number of 0s is even if g == 0, else odd\n    # But since we are given exactly n 0s and m 1s, the number of 0s is fixed as n\n    # So we just check if the parity of n matches g\n    \n    if (n % 2 == g):\n        # Number of beautiful strings is C(n + m, n)\n        print(comb(n + m, n) % MOD)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    # We need to reduce the string to length 1 through successive operations\n    # Each operation reduces length by 1\n    # So after (total_length - 1) operations, we get a single character\n    # The final character must be g\n    \n    # Let's compute the number of ways to reach g at the end\n    # We need to count the number of beautiful strings that can be reduced to g\n    \n    # The number of ways is equal to the number of ways to choose positions for 0s and 1s\n    # such that the final character is g\n    # This depends on the parity of the number of 0s and 1s and their combination\n    \n    # The final character is determined by the parity of the number of 0s and 1s\n    # For example:\n    # If you have an even number of 0s, then the final character is 0\n    # If you have an odd number of 0s, then the final character is 1\n    # Because each operation replaces two characters with one, and the result depends on the parity\n    \n    # So the final character is determined by the parity of the number of 0s\n    # Because 0 + 0 -> 0, 0 + 1 -> 1, 1 + 1 -> 0, etc.\n    # So the final character is 0 if the number of 0s is even, else 1\n    \n    # So we want the number of beautiful strings where the number of 0s is even if g == 0, else odd\n    # But since we are given exactly n 0s and m 1s, the number of 0s is fixed as n\n    # So we just check if the parity of n matches g\n    \n    if (n % 2 == g):\n        # Number of beautiful strings is C(n + m, n)\n        print(comb(n + m, n) % MOD)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 549,
        "completion_token_count": 523,
        "thoughts_token_count": 0
    }
}