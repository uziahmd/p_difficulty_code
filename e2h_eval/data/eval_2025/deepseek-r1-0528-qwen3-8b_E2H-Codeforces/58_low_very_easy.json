{
    "start": 1758300065.9728894,
    "end": 1758303300.8235836,
    "start-formatted": "2025-09-20 01:41 KST",
    "end-formatted": "2025-09-20 02:35 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, we are to find:\n   t = the minimum number of edges to add to form a simple cycle of odd length (with more than one vertex)\n   w = the number of ways to add t edges to achieve that\n\n Conditions: \n   The graph is undirected, without parallel edges or loops, and not necessarily connected.\n\n Important: We cannot add parallel edges or loops.\n\n Observations:\n\n 1. Odd cycle: In an undirected graph, an odd cycle must have an odd number of edges (so the cycle length is odd).\n 2. We are allowed to add edges arbitrarily (without creating multiple edges or loops). But note: we want the minimum number of edges to add.\n\n Let's consider possibilities:\n\n Case 0: If the graph already contains an odd-length cycle, then t=0 and w=1? But wait, note: we are forming a cycle by adding edges. However, if the graph already has an odd cycle, then no edge needs to be added. But note: the problem says \"form a simple cycle of an odd length\". So if there is one, then we don't need to add any edge. However, the problem states: \"minimum number of edges that must be added\", so if there is an odd cycle already, then t=0. And how many ways? There is exactly one way: add nothing.\n\n But note: the graph might have multiple odd cycles? However, the problem is about existence. So if there is at least one odd cycle, then we don't need to add any edge.\n\n However, the problem does not require the cycle to be formed only by the added edges. It can use existing edges and some added edges.\n\n But note: the problem says \"form a simple cycle of an odd length\" — meaning after adding edges, the graph must contain such a cycle.\n\n Therefore, if the graph already has an odd cycle, then t=0 and w=1.\n\n Case 1: If the graph does not have an odd cycle, then we must add edges until we form one.\n\n What is the minimum number of edges to add?\n\n Let's think:\n\n Option A: Add one edge? \n   - If we add one edge, then we are looking for an odd cycle that uses that one edge and some existing edges. \n   - Consider: an edge (u, v) we add. Then, we would need an existing path from u to v of even length (so that the total cycle length is odd: even+1 = odd). But note: in an undirected graph, the parity of the cycle (the length) is determined by the number of edges. The cycle length is the number of edges (which is the same as the number of vertices). \n\n Actually, the cycle formed by the new edge (u,v) and the existing path from u to v would have length = (length of the path) + 1. For the cycle to be odd, (length of the path) must be even.\n\n However, note: the entire cycle must be simple. So we cannot use repeated vertices.\n\n But what if the graph is bipartite? Because if the graph is bipartite, then it has no odd cycles. And in a bipartite graph, the parity of the path between two nodes is fixed (if they are in the same part, the path length is even; if in different parts, odd). \n\n Actually, the condition for having an odd cycle after adding one edge is: the two endpoints of the new edge must be in the same connected component and in opposite colors (if we color the bipartite graph) so that the path from u to v is of odd length, then the cycle (path from u to v and the edge) would have length = (odd path) + 1 -> even, which is not odd. Alternatively, if they are in the same color, then the path from u to v is even, then cycle length = even+1 = odd.\n\n So: if we can find two nodes u and v in the same connected component (and the graph is bipartite) that are in the same part (same color), then adding the edge (u,v) will create an odd cycle.\n\n But note: the graph might not be connected. Then, we cannot use the same connected component.\n\n However, what if we add one edge between two different connected components? Then the cycle must use edges from both components? Actually, no: a cycle must be contained within a connected component. Therefore, if we add an edge between two different connected components, we cannot form a cycle with just that edge because the two parts are disconnected (unless there is a path connecting them, but initially they are separate). So we need to consider:\n\n Option B: Add one edge within a connected component that is bipartite and the two endpoints are in the same part. Then we create an odd cycle.\n\n Option C: If we cannot do it with one edge (i.e., no two nodes in",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges. The solution involves checking the graph's bipartiteness and leveraging graph coloring to identify potential cycles.\n\n### Approach\n1. **Check for Existing Odd Cycles**: If the graph already contains an odd-length cycle, no edges need to be added (t=0, w=1).\n2. **Bipartite Graph Check**: If the graph is bipartite, it means all cycles are of even length. To form an odd cycle, we can either:\n   - **Add one edge** between two nodes in the same partition of a connected component. This creates an odd cycle if such an edge doesn't exist.\n   - **If no such edge exists**, we might need to add more edges. However, the minimal number of edges required in this case is 3 (connecting three non-adjacent nodes in a bipartite graph to form a triangle).\n3. **Disconnected Graph Handling**: If the graph is disconnected, we consider adding edges within the same connected component or between different components. Adding edges between different components does not immediately form a cycle, so we focus on edges within the same component.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = 1 - color[node]\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                        q.append(neighbor)\n                    elif visited[neighbor] == 1:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            comp_count += 1\n            \n    if is_bipartite:\n        t = float('inf')\n        total_ways = 0\n        \n        for comp_nodes in components:\n            comp_graph = {}\n            for node in comp_nodes:\n                comp_graph[node] = set(graph[node])\n                \n            total_nodes = len(comp_nodes)\n            part0 = [node for node in comp_nodes if color[node] == 0]\n            part1 = [node for node in comp_nodes if color[node] == 1]\n            \n            ways_in_component = 0\n            total_possible_edges_same_color = (len(part0)*(len(part0)-1))//2 + (len(part1)*(len(part1)-1))//2\n            existing_edges_same_color = 0\n            \n            for node in part0:\n                for neighbor in graph[node]:\n                    if neighbor in part0:\n                        existing_edges_same_color += 1\n            for node in part1:\n                for neighbor in graph[node]:\n                    if neighbor in part1:\n                        existing_edges_same_color += 1\n                    \n            missing_edges_same_color = total_possible_edges_same_color - existing_edges_same_color\n            ways_in_component = missing_edges_same_color\n            \n            total_ways += ways_in_component\n            \n            if ways_in_component > 0 and ways_in_component < t:\n                t = 1\n                \n        if t == float('inf'):\n            t = 3\n            total_ways = 0\n            for i in range(1, n+1):\n                for j in range(i+1, n+1):\n                    if i != j and (graph[i] and j not in graph[i]):\n                        total_ways += 1\n            if total_ways == 0:\n                t = 0\n                total_ways = 1\n        else:\n            t = 1\n            if total_ways == 0:\n                t = 0\n                total_ways = 1\n                \n        print(f\"{t} {total_ways}\")\n    else:\n        print(\"0 1\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Graph Input Handling**: The input is read and parsed into a graph structure represented as an adjacency list.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. Nodes are colored alternately (0 and 1). If any adjacent nodes have the same color, the graph is not bipartite, meaning it already contains an odd cycle.\n3. **Edge Addition Calculation**: For bipartite graphs, the solution checks for missing edges between nodes in the same partition. If such edges exist, adding one will create an odd cycle. If no such edges exist, the solution considers adding three edges to form a triangle (odd cycle).\n4. **Output**: The result is printed based on whether the graph is bipartite or not, indicating the minimal edges to add and the number of ways to achieve this. \n\nThis approach efficiently checks for the existence of odd cycles and calculates the minimal edge additions required, leveraging graph theory principles and BFS for bipartite detection.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            comp_id[i] = comp_count\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = 1 - color[node]\n                        comp_nodes.append(neighbor)\n                        comp_id[neighbor] = comp_count\n                        q.append(neighbor)\n                    elif visited[neighbor] == 1:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n            comp_count += 1\n            \n    if is_bipartite:\n        t = float('inf')\n        total_ways = 0\n        \n        for comp_nodes in components:\n            comp_graph = {}\n            for node in comp_nodes:\n                comp_graph[node] = set(graph[node])\n                \n            total_nodes = len(comp_nodes)\n            part0 = [node for node in comp_nodes if color[node] == 0]\n            part1 = [node for node in comp_nodes if color[node] == 1]\n            \n            ways_in_component = 0\n            total_possible_edges_same_color = (len(part0)*(len(part0)-1))//2 + (len(part1)*(len(part1)-1))//2\n            existing_edges_same_color = 0\n            \n            for node in part0:\n                for neighbor in graph[node]:\n                    if neighbor in part0:\n                        existing_edges_same_color += 1\n            for node in part1:\n                for neighbor in graph[node]:\n                    if neighbor in part1:\n                        existing_edges_same_color += 1\n                    \n            missing_edges_same_color = total_possible_edges_same_color - existing_edges_same_color\n            ways_in_component = missing_edges_same_color\n            \n            total_ways += ways_in_component\n            \n            if ways_in_component > 0 and ways_in_component < t:\n                t = 1\n                \n        if t == float('inf'):\n            t = 3\n            total_ways = 0\n            for i in range(1, n+1):\n                for j in range(i+1, n+1):\n                    if i != j and (graph[i] and j not in graph[i]):\n                        total_ways += 1\n            if total_ways == 0:\n                t = 0\n                total_ways = 1\n        else:\n            t = 1\n            if total_ways == 0:\n                t = 0\n                total_ways = 1\n                \n        print(f\"{t} {total_ways}\")\n    else:\n        print(\"0 1\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1272,
        "thoughts_token_count": 1023
    }
}