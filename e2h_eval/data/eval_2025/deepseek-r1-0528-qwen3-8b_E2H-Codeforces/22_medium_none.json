{
    "start": 1758296603.5970087,
    "end": 1758299733.5373452,
    "start-formatted": "2025-09-20 00:43 KST",
    "end-formatted": "2025-09-20 01:35 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n We are given two integers n and m on the first line, then n lines each with a string of m digits (each digit from '1' to '9')\n Steps:\n 1. Read the input.\n 2. We have a grid of n rows and m columns (each row is a student, each column is a subject).\n 3. For each subject (column), we can find the maximum mark (as a character, but we'll convert to int for comparison? Actually, we can compare characters since '9' > '1', etc., but better to use integers for clarity).\n\n However, note: We are to count a student as successful if there exists at least one subject in which he is the best (i.e., his mark is the maximum for that subject and note: if multiple students have the same maximum mark, then they are all considered best for that subject).\n\n But note: the problem says \"Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject.\" So if two or more students have the same highest mark, then they are all best.\n\n Approach:\n For each subject j (column j), let max_j be the maximum mark (converted to integer) in that column.\n\n Then, for each student i, we check if for any subject j, the mark (grid[i][j]) equals max_j (in that column). If yes, then student i is successful.\n\n However, note: we must be cautious because the grid has characters. So we can do:\n\n Let's create a list `max_marks` for each subject (each column) so that we know the maximum for that subject.\n\n Steps:\n 1. Parse the first line to get n, m.\n 2. Read the next n lines and store them as a list of strings (each string is a row for a student).\n\n Alternatively, we can read the entire input and split accordingly.\n\n Example input format: \n   First line: \"3 3\"\n   Next three lines: \"223\", \"232\", \"112\"\n\n But note: the example input is given as a string in the example: \n   Input: ['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n However, in standard input, we just read from stdin.\n\n Implementation:\n\n Let's assume the input comes from sys.stdin.\n\n Example:\n\n   import sys\n   data = sys.stdin.read().splitlines()\n\n   Then first line: data[0] -> \"3 3\"\n   Then next n lines: data[1:1+n]\n\n But note: the problem says first line contains two integers, then n lines.\n\n Steps:\n\n   n, m = map(int, data[0].split())\n   grid = []\n   for i in range(1, 1+n):\n        grid.append(data[i].strip())\n\n Now, we have grid: list of n strings, each string of length m.\n\n Now, we can create a list `subject_max` of length m (for each subject) such that:\n      subject_max[j] = max( int(grid[i][j]) for i in range(n) )\n\n Then, for each student i (each row in grid), we check for any j (column) such that:\n      int(grid[i][j]) == subject_max[j]\n\n If we find at least one j, then student i is successful.\n\n However, note: the grid is given as characters. We can either convert the entire grid to integers for each cell or do conversion on the fly.\n\n Since n and m are at most 100, we can do:\n\n   successful = 0\n   for i in range(n):\n        for j in range(m):\n            if int(grid[i][j]) == subject_max[j]:\n                # But note: even if one subject is best, the student is successful. We can break inner loop and mark the student as successful.\n                break\n        else:\n            continue\n        break # This break is for the outer loop? Actually, we want to mark if at least one subject is best.\n\n   Alternatively, we can set a flag for each student:\n\n   successful_students = 0\n   for i in range(n):\n        found = False\n        for j in range(m):\n            if int(grid[i][j]) == subject_max[j]:\n                found = True\n                break\n        if found:\n            successful_students += 1\n\n But wait: what if two different subjects have the same maximum? Then we break at the first occurrence. That's fine.\n\n However, note: the problem does not require the student to be the unique best. So if two students have the same maximum, then both are considered best for that subject.\n\n But note: when we compute subject_max, we take the maximum of the marks in that subject. Then for a student, if his mark in subject j is subject_max[j], then he is best (along with others) in subject j.\n\n But note: the same student might be best in multiple subjects, but we only need one to be successful.\n\n However, there is an alternative: we can also think from the student's perspective. But the above method is straightforward.\n\n Let me test with the first example:\n\n   Input: \n        3 3\n        223\n        232\n        112\n\n   Grid:\n        [['2','2','3'],\n         ['2','3','2'],\n         ['1','1','2']]\n\n   subject_max for each column:\n        col0: max('2','2','1') -> '2' -> 2\n        col1: max('2','3','1') -> '3' -> 3\n        col2: max('3','2','2') -> '3' -> 3\n\n   Now, for student0 (first row: '223'):\n        col0: '2' == 2 -> yes -> successful\n\n   Student1 (second row: '232'):\n        col0: '2' == 2 -> yes -> successful\n\n   Student2 (third row: '112'):\n        col0: '1' != 2 -> skip\n        col1: '1' != 3 -> skip\n        col2: '2' != 3 -> skip -> not successful.\n\n   So output is 2, which matches.\n\n   Second example:\n        Input: \n            3 5\n            91728\n            11828\n            11111\n\n        subject_max for each column (each character):\n\n        col0: max('9','1','1') -> '9' -> 9\n        col1: max('1','1','1') -> '1' -> 1\n        col2: max('7','8','1') -> '8' -> 8\n        col3: max('2','2','1') -> '2' -> 2\n        col4: max('8','8','1') -> '8' -> 8\n\n        Now, student0: \"91728\"\n            col0: 9==9 -> successful (so we break and count)\n\n        student1: \"11828\"\n            col0: 1 !=9 -> skip\n            col1: 1==1 -> successful -> break and count.\n\n        student2: \"11111\"\n            col0: 1 !=9 -> skip\n            col1: 1==1 -> successful -> break and count.\n\n        So output is 3, which matches.\n\n But wait, in the second example, note the third subject (index2) has maximum 8, and the third student has 1 which is less than 8. But the fourth subject (index3) has maximum 2, and the third student has 1 which is less than 2. The fifth subject (index4) has maximum 8, and the third student has 1 which is less than 8. However, the second subject (index1) has maximum 1, and the third student has 1, so he is best in subject1.\n\n However, note: the second subject (index1) has three 1's. So the maximum is 1, and the third student has 1, so he is best in subject1.\n\n So the code is correct.\n\n But note: the problem says \"successful\" if there exists at least one subject he is best at.\n\n Implementation:\n\n   Step 1: Read the first line and split to get n, m.\n   Step 2: Read the next n lines and store as grid (list of strings).\n\n   Step 3: Precompute the maximum for each subject (column). We can do:\n\n        subject_max = [0] * m\n        for j in range(m):\n            col_vals = [int(grid[i][j]) for i in range(n)]\n            subject_max[j] = max(col_vals)\n\n   Step 4: For each student i, check if there's any j such that int(grid[i][j]) == subject_max[j].\n\n   However, note: we are storing the grid as strings. We can avoid converting the entire grid to integers by doing:\n\n        We can convert the mark to integer only when comparing, but then we are doing it in the inner loop. Since n and m are small, it's acceptable.\n\n   But we can also preconvert the entire grid to a grid of integers? \n\n   Alternatively, we can do:\n\n        grid_int = []\n        for i in range(n):\n            row = [int(x) for x in grid[i]]\n            grid_int.append(row)\n\n        Then subject_max for column j is max(grid_int[i][j] for i in range(n))\n\n        Then for each student i, check if any(grid_int[i][j] == subject_max[j] for j in range(m))\n\n   However, the original grid is given as strings. We can do without converting the entire grid to integers, but converting the entire grid might be simpler.\n\n   But note: the grid is small (max 100x100). \n\n   Let me choose the method without converting the entire grid to integers to save memory if needed, but actually 100x100 is very small.\n\n   However, let me stick to the first method (converting each cell to integer only when necessary) to avoid unnecessary conversions, but note: the inner loop will convert each cell anyway.\n\n   Another way: Precompute the subject_max and then for each student, we can compare without converting the entire grid to integers by using the fact that the grid is stored as characters. But then we have to convert the character to integer for the condition.\n\n   We can do:\n\n        for i in range(n):\n            for j in range(m):\n                if int(grid[i][j]) == subject_max[j]:\n                    count_success++ and break inner loop.\n\n   But note: we are already converting the entire subject_max to integers. \n\n   Alternatively, we can keep the subject_max as characters? \n\n        subject_max_chars = [max(grid[i][j] for i in range(n)) for j in range(m)]\n\n        Then for a student i and subject j, compare grid[i][j] with subject_max_chars[j]. \n\n        Example: subject_max_chars for the first example:\n            col0: max('2','2','1') -> '2'\n            col1: max('2','3','1') -> '3'\n            col2: max('3','2','2') -> '3'\n\n        Then for student0: \n            j=0: '2' == '2' -> True.\n\n        This avoids converting the entire grid to integers, but note: the grid is given as characters, so we don't need to convert the grid to integers at all until the subject_max computation.\n\n        But wait, we are reading the grid as strings, and each element is a character. So we can do:\n\n            subject_max_chars = [0]*m\n            for j in range(m):\n                col_vals = [grid[i][j] for i in range(n)]\n                subject_max_chars[j] = max(col_vals)\n\n        Then for student i and subject j, we can simply compare grid[i][j] with subject_max_chars[j].\n\n        But note: the max function for characters works because '9' > '1'. So we don't need to convert to integers for the max computation either.\n\n        However, the problem states the marks are from 1 to 9, and the characters are digits, so lexicographical order is the same as numerical order.\n\n        Example: '1' < '2' < ... < '9'\n\n        So we can do:\n\n            n, m = map(int, input().split())\n            grid = [input().strip() for _ in range(n)]\n\n            # Precompute subject_max_chars for each column\n            subject_max = [0] * m   # We'll store the maximum character for each subject\n            for j in range(m):\n                col_vals = [grid[i][j] for i in range(n)]\n                subject_max[j] = max(col_vals)\n\n            successful = 0\n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j] == subject_max[j]:\n                        successful += 1\n                        break\n\n        But wait, we break the inner loop and then move to the next student. We are counting each student only once.\n\n        However, the above counts a student as soon as one subject where he is best is found. That's correct.\n\n        But note: what if a student is best in multiple subjects? We break at the first one and that's enough.\n\n        However, the above code will break the inner loop and then the student is counted. Then we move to the next student.\n\n        But wait, the above code does:\n\n            successful = 0\n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j] == subject_max[j]:\n                        successful += 1\n                        break\n\n        This counts each student only once (if at least one subject is best). But note: we are breaking the inner loop, so we don't check the rest of the subjects for that student.\n\n        But the problem requires only one subject to be best. So we break.\n\n        However, we must note: the condition is that the student is best in at least one subject. So we break as soon as we find one.\n\n        This is efficient.\n\n        Let me test with the second example again:\n\n            subject_max for the second example (using characters):\n\n            col0: max('9','1','1') -> '9'\n            col1: max('1','1','1') -> '1'\n            col2: max('7','8','1') -> '8'\n            col3: max('2','2','1') -> '2'\n            col4: max('8','8','1') -> '8'\n\n            Student0: \"91728\"\n                j0: '9' == '9' -> True, so count 1 and break inner loop.\n\n            Student1: \"11828\"\n                j0: '1' != '9' -> skip\n                j1: '1' == '1' -> True, count 2 and break.\n\n            Student2: \"11111\"\n                j0: '1' != '9' -> skip\n                j1: '1' == '1' -> True, count 3 and break.\n\n            Output: 3.\n\n        This is correct.\n\n        However, note: the problem says the input is given in the format as described.\n\n        We are reading from stdin. We must use:\n\n            import sys\n            data = sys.stdin.read().splitlines()\n\n        Or simply:\n\n            n, m = map(int, input().split())\n            grid = []\n            for i in range(n):\n                grid.append(input().strip())\n\n        But the problem says the input is from stdin. We can use the above.\n\n        However, the example input is given as a string, but in real competition, we read from stdin.\n\n        Let's write the code accordingly.\n\n        But note: the problem says the input is two integers and then n lines. There are no extra spaces or empty lines.\n\n        Code:\n\n            n, m = map(int, input().split())\n            grid = [input().strip() for _ in range(n)]\n\n            # Edge case: n=0 or m=0? The constraints say at least 1.\n\n            # Precompute the maximum for each subject (column)\n            subject_max = [0] * m   # We'll store the maximum character for each subject\n            for j in range(m):\n                col_vals = [grid[i][j] for i in range(n)]\n                subject_max[j] = max(col_vals)\n\n            count = 0\n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j] == subject_max[j]:\n                        count += 1\n                        break\n\n            print(count)\n\n        But wait, what if the grid is empty? The constraints say n,m>=1.\n\n        Let me run the provided examples.\n\n        Example 1:\n\n            Input: \"3 3\", then \"223\", \"232\", \"112\"\n\n            subject_max = [max(['2','2','1']), max(['2','3','1']), max(['3','2','2'])]\n            -> ['2','3','3']\n\n            Then for the first student: \"223\": \n                j0: '2'=='2' -> True, count becomes 1, break inner.\n            Second student: \"232\":\n                j0: '2'=='2' -> True, count becomes 2, break inner.\n            Third student: \"112\":\n                j0: '1' != '2'\n                j1: '1' != '3'\n                j2: '2' != '3' -> no, so not counted.\n\n            Output: 2 -> correct.\n\n        Example 2:\n\n            Input: \"3 5\", then \"91728\", \"11828\", \"11111\"\n\n            subject_max = [max('9','1','1') -> '9', \n                          max('1','1','1') -> '1',\n                          max('7','8','1') -> '8',\n                          max('2','2','1') -> '2',\n                          max('8','8','1') -> '8']\n\n            Then:\n                Student0: \"91728\": j0: '9'=='9' -> count=1, break.\n                Student1: \"11828\": j0: '1'!='9'; j1: '1'=='1' -> count=2, break.\n                Student2: \"11111\": j0: '1'!='9'; j1: '1'=='1' -> count=3, break.\n\n            Output: 3 -> correct.\n\n        However, wait: the second example input was given as:\n\n            Input: ['3 5\\n91728\\n11828\\n11111']\n\n            But note: the input format is:\n\n                First line: \"3 5\"\n                Then three lines: \"91728\", \"11828\", \"11111\"\n\n            Our code reads the first line as \"3 5\", then the next three lines.\n\n        But note: the example input string includes the newline. Our input().strip() will remove any trailing newline, but the problem says the marks are given without spaces.\n\n        This should be fine.\n\n        Let me test with a small example: n=1, m=1, grid with one student and one subject.\n\n            Input: \n                1 1\n                5\n\n            Then subject_max[0] = max(['5']) -> '5'\n            Then for student0: grid[0][0]=='5' -> True, count=1.\n\n        Another edge: two students, one subject, both have 5.\n\n            Input:\n                2 1\n                5\n                5\n\n            subject_max[0] = max(['5','5']) -> '5'\n\n            Student0: '5'=='5' -> count=1, break inner.\n            Student1: '5'=='5' -> count=2, break inner.\n\n            Output: 2.\n\n        This is correct because both students are best in the subject (since there is no one with a higher mark).\n\n        One more: two students, two subjects, and both have the same maximum in both subjects.\n\n            Input:\n                2 2\n                99\n                99\n\n            subject_max = [max('9','9') -> '9', max('9','9') -> '9']\n            Student0: first subject '9'=='9' -> count=1, break.\n            Student1: first subject '9'=='9' -> count=2, break.\n\n            Output: 2.\n\n        And if one student has a lower mark in one subject?\n\n            Input:\n                2 2\n                98\n                97\n\n            subject_max = ['9','8'] (because the first subject: max('9','9') -> '9', second subject: max('8','7') -> '8')\n            Student0: first subject '9'=='9' -> count=1, break.\n            Student1: first subject '9'=='9' -> count=2, break.\n\n            But wait, the second subject: for student0: '8' vs subject_max[1]='8' -> so actually student0 is also best in the second subject? \n            However, we break at the first subject for student0. But the problem doesn't require uniqueness. We only need one.\n\n            But note: the problem says \"successful\" if there exists at least one subject he is best at.\n\n            In this example, student0 is best in both subjects, and student1 is best in none (because in subject0: mark is 9 which is not greater than 9? Actually, wait: \n            Student1's subject0: 9 is the same as the maximum, so he is best in subject0 too. \n\n            However, wait: the problem says \"the best\" if there is no student with a higher mark. \n            In subject0, both have 9, so no student has a higher mark. Therefore, both are best in subject0.\n\n            Similarly, in subject1: student0 has 8 and student1 has 7. So student0 is best in subject1.\n\n            So student0 is best in subject0 and subject1 -> successful.\n            student1 is best in subject0 (because no one has a higher mark in subject0) -> successful.\n\n            Therefore, the output should be 2.\n\n            Our code: \n                subject_max = ['9','8']\n                Student0: \n                    subject0: '9'=='9' -> True -> count=1, break.\n                Student1:\n                    subject0: '9'=='9' -> True -> count=2, break.\n\n            So correct.\n\n        But wait, what if:\n\n            Input:\n                2 2\n                98\n                79\n\n            subject0: max('9','7') -> '9'\n            subject1: max('8','9') -> '9'\n\n            Student0: \n                subject0: '9'=='9' -> True -> count=1, break.\n            Student1:\n                subject0: '7' != '9' -> skip\n                subject1: '9'=='9' -> True -> count=2, break.\n\n            Both are successful.\n\n        However, consider:\n\n            Input:\n                2 2\n                55\n                44\n\n            subject0: max('5','4') -> '5'\n            subject1: max('5','4') -> '5'\n\n            Student0: \n                subject0: '5'=='5' -> True -> count=1, break.\n            Student1:\n                subject0: '4' != '5' -> skip\n                subject1: '4' != '5' -> skip -> not successful.\n\n            Output: 1.\n\n        This is correct.\n\n        Therefore, the code is:\n\n            n, m = map(int, input().split())\n            grid = [input().strip() for _ in range(n)]\n\n            # If there are no students, n=0, then grid will be empty. But n>=1 per constraints.\n\n            # Precompute the maximum for each column (each subject)\n            subject_max = [0] * m   # We'll store the maximum character for each subject\n            for j in range(m):\n                col_vals = [grid[i][j] for i in range(n)]\n                subject_max[j] = max(col_vals)\n\n            count = 0\n            for i in range(n):\n                found = False\n                for j in range(m):\n                    if grid[i][j] == subject_max[j]:\n                        count += 1\n                        break   # break inner loop, no need to check other subjects for this student\n\n            print(count)\n\n However, note: the problem says the input is from stdin. We are using input(), which reads from stdin.\n\n But the problem may be run in an environment that uses multiple lines of input. The above code reads the first line and then the next n lines.\n\n Since the problem states the input format, this is acceptable.\n\n But note: the example input is given as a string with a newline, but input() will handle that.\n\n Let me run the code with the provided examples.\n\n Example 1: \n     Input: \n        3 3\n        223\n        232\n        112\n\n     Expected output: 2\n\n Example 2:\n     Input:\n        3 5\n        91728\n        11828\n        11111\n\n     Expected output: 3\n\n We'll submit this code.\n\n However, note: the problem statement says the input is provided as a string in the example, but in the actual competition, we read from stdin.\n\n We are good.\n\n But wait: the problem says the input is given as:\n\n     The first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook.\n\n So our code is aligned.\n\n However, note: the example input is given as a single string including the newlines. But in Python, when reading from stdin, the input() function reads one line at a time.\n\n But the example input is:\n\n        ['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n This is a list of two strings, each representing an entire test case? \n\n But the problem says \"The following is a competitive programming problem\", meaning we are to read one test case.\n\n Actually, the problem says: \"The first input line contains two integers n and m ...\".\n\n So we are reading one test case.\n\n But note: the example input is given as two separate strings in a list. However, in standard input, we would have:\n\n        For the first sample: \n            Input from stdin would be:\n                3 3\n                223\n                232\n                112\n\n        For the second sample:\n            Input from stdin would be:\n                3 5\n                91728\n                11828\n                11111\n\n We are reading the first line and then the next n lines.\n\n So the code is correct.\n\n Final code:\n\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n\n    # Precompute the maximum for each column (each subject)\n    subject_max = [0] * m\n    for j in range(m):\n        col_vals = [grid[i][j] for i in range(n)]\n        subject_max[j] = max(col_vals)\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == subject_max[j]:\n                count += 1\n                break\n\n    print(count)\n\n However, note: the above code breaks the inner loop as soon as one best subject is found for the student. This is correct.\n\n Let me submit.\n\n But wait, the problem says: \"Note that the marks in a rows are not sepatated by spaces.\" — so we are reading the entire row as a string, which is correct.\n\n I think we are done.\n",
    "response": "\nTo solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark in that subject. \n\n### Approach\n1. **Input Reading**: Read the number of students (n) and subjects (m) from the first line of input. Then read the next n lines, each representing a student's marks across all subjects.\n2. **Determine Maximum Marks per Subject**: For each subject (column), find the highest mark achieved by any student. This helps in identifying the benchmark for being the best in that subject.\n3. **Check Successful Students**: For each student, check if they have achieved the highest mark in any subject. If they have, count them as successful and move to the next student without checking further subjects for them.\n4. **Output the Result**: Print the total count of successful students.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    if not data:\n        print(0)\n        return\n        \n    n, m = map(int, data[0].split())\n    grid = []\n    index = 1\n    for i in range(n):\n        grid.append(data[index].strip())\n        index += 1\n\n    subject_max = [0] * m\n    for j in range(m):\n        col_vals = [grid[i][j] for i in range(n)]\n        subject_max[j] = max(col_vals)\n\n    count = 0\n    for i in range(n):\n        found = False\n        for j in range(m):\n            if grid[i][j] == subject_max[j]:\n                count += 1\n                break\n                \n    print(count)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Input Handling**: The code reads all input lines at once and splits them into a list. The first line contains the dimensions (n, m), and subsequent lines contain each student's marks.\n2. **Finding Maximum Marks**: For each subject (column), the code collects all marks from each student and determines the highest mark (subject_max) using the `max` function.\n3. **Checking Successful Students**: For each student, the code checks if their mark in any subject matches the highest mark for that subject. If it does, the student is counted as successful, and the inner loop breaks early to skip further checks for that student.\n4. **Output**: The total count of successful students is printed.\n\nThis approach efficiently checks each student's performance across all subjects, leveraging early termination to optimize the solution, especially given the constraints (n and m up to 100). The solution ensures correctness by accurately identifying the highest marks per subject and verifying each student's success condition.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    if not data:\n        print(0)\n        return\n        \n    n, m = map(int, data[0].split())\n    grid = []\n    index = 1\n    for i in range(n):\n        grid.append(data[index].strip())\n        index += 1\n\n    subject_max = [0] * m\n    for j in range(m):\n        col_vals = [grid[i][j] for i in range(n)]\n        subject_max[j] = max(col_vals)\n\n    count = 0\n    for i in range(n):\n        found = False\n        for j in range(m):\n            if grid[i][j] == subject_max[j]:\n                count += 1\n                break\n                \n    print(count)\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 442,
        "completion_token_count": 593,
        "thoughts_token_count": 6127
    }
}