{
    "start": 1758300262.008557,
    "end": 1758304124.9969444,
    "start-formatted": "2025-09-20 01:44 KST",
    "end-formatted": "2025-09-20 02:48 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, we are to find:\n   t = the minimum number of edges to add to form a simple cycle of odd length (with more than one vertex)\n   w = the number of ways (as sets) to add t edges.\n\n Conditions: \n   The graph is undirected, without parallel edges and loops.\n   We cannot add parallel edges or loops.\n\n Note: The cycle must be of odd length and simple (each vertex at most once).\n\n Important observations:\n\n 1. If the graph already has an odd-length cycle, then t=0 and w=1 (if we consider that no edge needs to be added, but note: the problem says \"minimum number of edges to be added\", so if there's already an odd cycle, then we don't need to add any). However, note the example: \n      Input: '3 3\\n1 2\\n2 3\\n3 1' -> Output: '0 1'\n\n 2. But note: the graph might not have an odd cycle initially. So we need to consider the possibility of adding edges to form one.\n\n Steps:\n\n Let's break down:\n\n Case 1: If the graph already contains an odd cycle, then we output (0, 1). However, note: the problem says \"to form a simple cycle of an odd length\", so if there is one, then t=0.\n\n How to check for an odd cycle?\n   We can use BFS/DFS with coloring (bipartite check). If the graph is not bipartite, then it has an odd cycle.\n\n But note: the graph isn't necessarily connected, so we have to check each connected component.\n\n However, wait: what if the graph is disconnected? Then we have to check each component. But note: an odd cycle exists if at least one component is non-bipartite.\n\n Case 2: If the graph is bipartite, then we don't have an odd cycle. Then we must add edges to form one.\n\n What is the minimum number of edges to add?\n\n Let's think:\n\n  - The smallest odd cycle is a triangle (length 3). So if we can form a triangle by adding one edge, then t=1.\n\n  - But sometimes we cannot form a triangle by adding one edge because the three vertices might not be connected in the way that two edges are present. Actually, we can only add edges between non-adjacent vertices.\n\n  However, note: we are allowed to add any set of edges (without creating parallel edges or loops) and we are counting the minimal number of edges to add.\n\n  Consider:\n\n  Option 1: Form a triangle (cycle of length 3) by adding one edge. For that, we need three distinct vertices u, v, w such that currently (u,v), (v,w) are present and we add (w,u). But note: the graph might not have two edges of the triangle.\n\n  Alternatively, we might form an odd cycle of length greater than 3. However, the minimal number of edges to add is either 0, 1, or maybe more.\n\n  But note: we can also form an odd cycle by connecting two even cycles? Or maybe by connecting two components?\n\n  Actually, let's consider:\n\n  - In a bipartite graph, all cycles are of even length. To form an odd cycle, we must break the bipartition.\n\n  The minimal way to form an odd cycle:\n\n    Option A: Add one edge within a bipartition set (in the same color) in one connected component. However, if we have a connected bipartite graph (say with two parts A and B) and we add an edge inside A, then we create an odd cycle. But note: the entire graph might be disconnected.\n\n    However, consider: if the graph is disconnected, then we have multiple bipartitions. We can also connect two different bipartite components and then form an odd cycle.\n\n  Example: \n\n      Graph with two connected components, each being a bipartite graph (so two even cycles or trees). \n\n      Component 1: bipartite with parts (A1, B1)\n      Component 2: bipartite with parts (A2, B2)\n\n      Now, if we add an edge between a vertex in A1 and a vertex in A2, then we can form a cycle that goes from A1 to B1 to ... and then via the new edge to A2 and then ... and then back to A1? \n\n      Actually, the cycle would be: \n        Start at a vertex in A1, traverse to B1 (even steps in the first component) and then go to A2 (via the added edge) and then traverse the second component (which is bipartite) and then we have to come back. The total cycle length is even + 1 (the added edge) + (some even steps) -> odd. \n\n      However, note: we don't necessarily have a cycle that uses the entire path. We only need to form one cycle.\n\n      Actually, the minimal odd cycle we can form by connecting two components might require two edges? Because we can also form a cycle by connecting two components and then using two edges to complete a triangle? \n\n  Let me clarify:\n\n      We are allowed to add edges arbitrarily (any set of edges as long as no duplicate and no loop). We are looking for the minimum number of edges to add to form an odd cycle.\n\n  Possibilities:\n\n      t = 0: if there's already an odd cycle.\n\n      t = 1: \n          - If there exists a pair of vertices (u, v) that are not adjacent and adding the edge (u, v) creates an odd cycle. How can that happen?\n            Consider: if we have two paths from u to v of different parities (one even and one odd) then adding the edge (u, v) will form a cycle of odd length (even+odd+1). However, note that in a bipartite graph, all paths between two nodes are of the same parity. So in a connected bipartite graph, we cannot get an odd cycle by adding one edge within the same bipartition set? Actually, wait: \n\n            In a connected bipartite graph, if we add an edge within the same set (say part A), then consider a path from u to v (both in A) that goes through some vertices. The path length is even (because both are in A). Then the cycle: u->...->v and then the direct edge from v to u. The cycle length is (even) + 1 -> odd.\n\n            Therefore, in a connected bipartite graph, if we add an edge between two vertices in the same part, we get an odd cycle.\n\n          Also, consider: if the graph is disconnected, we can also form a cycle by connecting two vertices in the same bipartition set of the same component? That would be one edge.\n\n          However, what if the graph is disconnected? Then we can also form an odd cycle by connecting two components. But note: if we connect two components, we might form a cycle that uses the two components. However, the minimal odd cycle might be of length 3? Actually, if we connect two components, the smallest cycle we can form is by taking two edges from the two components and the new edge? Not exactly.\n\n          Actually, to form a cycle that involves two components, we must have a path in the first component and a path in the second component. But then the cycle would be: start at a vertex in comp1, go to comp2 via the new edge, then traverse comp2, and then come back to comp1 via another edge? But we only added one edge. So unless there's a vertex in comp1 that is connected to two vertices in comp2 (which we haven't done) we cannot form a cycle with one edge.\n\n          Therefore, the one-edge addition must be within the same connected component (same bipartite part) or across components? \n\n          Actually, consider: if we have two separate edges (two isolated edges) and we add one edge, we might form a cycle? \n\n          Example: two triangles (but wait, two triangles are odd cycles, but we are in the case where the graph is bipartite so no odd cycles). \n\n          Let me take two bipartite graphs (each is a tree or even cycle). \n\n          Example: two edges (a path of two edges) in each component.\n\n          Component 1: vertices {1,2,3} with edges (1,2) and (2,3). This is a path of two edges (so bipartite). Parts: {1,3} and {2}.\n          Component 2: similarly {4,5,6} with edges (4,5) and (5,6). Parts: {4,6} and {5}.\n\n          Now, if we add an edge between 1 and 4 (both in their respective \"A\" sets) then do we form an odd cycle?\n            Cycle: 1-2-3-1? (already exists? No, because we didn't have 3-1). Actually, we don't have the edge 3-1. \n            We have: 1-2, 2-3, 4-5, 5-6, and the added edge 1-4.\n\n            Now, is there an odd cycle? \n                Consider: 1-4-5-2-1: \n                    edges: 1-4 (added), 4-5 (exists), 5-2? There's no edge 5-2. \n                Another: 1-4-5-6-4? no, that doesn't help.\n\n          Actually, the cycle must be entirely contained in the union of the two components? Or can it use both? \n\n          The cycle must be simple. The cycle we form must use the new edge and then paths in the two components. \n\n          But note: the two components are disconnected. After adding one edge, the graph becomes connected. Then the cycle must use the new edge and then two paths (from the two endpoints of the new edge) that meet at two other vertices? \n\n          However, in a bipartite graph, the parity of the path from 1 to 2 is fixed (in comp1: 1-2 is one edge, so odd; 1-2-3 is even). Similarly, from 4 to 5 is one edge (odd). \n\n          Now, if we go from 1 to 2 and then from 2 to 3, and then from 3 to 4? But there's no edge from 3 to 4. \n\n          Actually, the cycle would be: 1-4 (new edge) and then from 4 to 5 and from 5 to 6 and then from 6 to 4? No, we don't have 6-4. \n\n          Alternatively, we can form a cycle: 1-4-5-2-1. But that requires an edge from 5 to 2, which we don't have.\n\n          So how do we form an odd cycle by adding one edge in a disconnected graph? \n\n          Actually, we cannot form an odd cycle by adding one edge between two components if the two components are bipartite? \n\n          Let me think: \n\n          We require an odd cycle. The cycle must have odd length. The cycle must use the new edge. The rest of the cycle must be a path in the graph. \n\n          The entire cycle: \n            Start at u (in comp1), go through comp1 to a vertex x, then use the new edge to go to y (in comp2), then go through comp2 to z, then we need to get back to u? But wait, we only have one new edge. The cycle must use the new edge twice? \n\n          Actually, no: the cycle is simple and the new edge is used once. Then the cycle is broken into two paths: one from u to y in comp1 and comp2 respectively? Actually, no: the cycle must be entirely in the graph after adding the edge. \n\n          The cycle must be: \n            Start at u (comp1), go to v (via comp1) and then use the new edge to jump to w (comp2), then go from w to some vertex in comp2 and then back to u? But we don't have a connection from comp2 to comp1 except the one edge. \n\n          Therefore, the only way to form an odd cycle with one edge is if the edge is added within the same connected component and in the same bipartition set (so that the two endpoints are in the same part of the bipartition). \n\n          But wait: what if the graph is disconnected and we add an edge that connects two vertices that are in the same bipartition set of the same component? Then we get an odd cycle. \n\n          However, if we add an edge that connects two different components, then we don't get an odd cycle immediately. \n\n          Therefore, the minimal number of edges to add is 1 if and only if there exists at least one pair of vertices (u, v) (non-adjacent) in the same connected component and in the same bipartition set (so that adding (u, v) creates an odd cycle). \n\n          But note: what if the graph is connected and bipartite, then we can add an edge within the same set (any pair) and that will create an odd cycle. \n\n          However, if the graph is connected and bipartite, then we can also form an odd cycle by adding two edges? Actually, no, because one edge is sufficient.\n\n          So:\n\n          Case 1: The graph is not bipartite -> t=0, w=1.\n\n          Case 2: The graph is bipartite.\n\n            Subcase 2a: The graph is connected. Then we can add any edge between two vertices of the same bipartition set. But note: the graph may already have some edges. We cannot add an edge that already exists.\n\n            So for a connected bipartite graph, the number of ways to add one edge to form an odd cycle is: \n                total pairs in the same set - the existing edges within that set? But wait, in a bipartite graph, edges only go between the two sets. So there are no edges within the same set. Therefore, the number of ways is the number of unordered pairs in the same set.\n\n            However, wait: the graph is bipartite and we are only considering the connected component. The graph might have multiple components? \n\n            Actually, we are considering the entire graph (which is bipartite) and the graph is broken into connected components. Each connected component is bipartite and has two parts (say A_i and B_i). \n\n            Now, we can also form an odd cycle by connecting two different components? \n\n            Example: two connected components, each bipartite. \n              Component1: parts A1, B1; Component2: parts A2, B2.\n\n            Suppose we add an edge from a vertex in A1 to a vertex in A2. Then, is there an odd cycle? \n\n            Consider: \n              Cycle: take a path from the vertex in A1 to another vertex in A1 (within comp1) and then use the new edge to go to A2, and then a path from that A2 vertex to the original A1 vertex? But wait, we don't have an edge between A2 and A1 except the one we just added. \n\n            Actually, we need two edges to form a cycle that uses two components. Because to form a cycle, we must leave comp1 and then return to comp1, but the only edge we added is one. \n\n            However, consider: \n              We can form a cycle if we have two edges: one from comp1 to comp2 and then one from comp2 to comp1. But we are only allowed to add one edge.\n\n            Alternatively, we can form a cycle by having two edges from the same component? \n\n            Actually, no: the minimal odd cycle must be of length at least 3.\n\n            But note: if we add one edge between two components, we might form a cycle that uses the new edge and two edges from the two components? \n\n            Example: \n              Component1: A1 = {a}, B1 = {b} (edge a-b)\n              Component2: A2 = {c}, B2 = {d} (edge c-d)\n\n            Now, if we add an edge between a and c (both in A*), then we have a cycle: a-c-d-c? No, that's not simple.\n\n            Actually, the cycle must be: a-b-? ... and then back to a. But we don't have connections from b to c or d.\n\n            So it seems that one edge between two components does not form a cycle. Therefore, the minimal way to form an odd cycle in a disconnected bipartite graph is either:\n\n              Option 1: Within the same component (if the component has at least two vertices in the same bipartition set) by adding one edge.\n\n              Option 2: Or, if no component has two vertices in the same bipartition set (i.e., each component is a single edge? or a star? actually, each bipartite component must have at least two vertices in one set? Actually, no: a single edge: two vertices, each set has one vertex. Then we cannot add an edge in the same set because there is only one vertex in that set. \n\n            Then we must consider two edges.\n\n            How can we form an odd cycle with two edges?\n\n            We can:\n\n              - Connect two components by two edges? Then we might form a cycle. \n\n            Example: two components, each being a single edge (so two edges total). \n\n            Component1: {a,b} with edge a-b.\n            Component2: {c,d} with edge c-d.\n\n            Now, if we add two edges: say a-c and b-d. Then we have a cycle: a-b-d-c-a. The cycle has length 4 (even) -> not odd.\n\n            Alternatively, if we add two edges: a-c and a-d. Then cycle: a-c-d-a. The cycle has length 3 (odd). \n\n            So by adding two edges, we can form a triangle.\n\n            But note: we can also form a cycle by connecting two components and then using an existing edge in one component and two new edges? \n\n            Actually, the minimal number of edges to add to a disconnected bipartite graph to form an odd cycle might be 1 if there exists a component that has at least two vertices in one bipartition set. Otherwise, we need 2.\n\n            Therefore:\n\n              t = 1 if there exists at least one connected component that has at least two vertices in one bipartition set (so that we can add one edge within that set).\n\n              Otherwise, t = 2.\n\n            But wait, can we form an odd cycle by adding two edges in a connected bipartite graph? Actually, if the connected bipartite graph already has at least two vertices in one set, then we can form an odd cycle by adding one edge. So the connected bipartite graph with at least two vertices in one set falls under t=1.\n\n            Therefore, we only consider disconnected bipartite graphs for t=2.\n\n            However, note: what if the graph has multiple connected components, but each component is a single edge (so two vertices per component, and each bipartition set has one vertex). Then we cannot add one edge within a component (because each component has only one vertex per set). Then we must add two edges.\n\n            But also note: we can form an odd cycle by connecting three vertices from two different components? \n\n            Example: two components, each being an edge (so two edges). \n                Component1: {a,b} (edge a-b)\n                Component2: {c,d} (edge c-d)\n\n            Now, if we add two edges: a-c and b-d, then we have a cycle of length 4 (even). But if we add a-c and a-d, then we have a cycle a-c-d-a (triangle). \n\n            So the two edges must be incident to the same vertex? \n\n            Actually, we can also form a cycle by connecting two edges from one vertex to two vertices in a different component. \n\n            So the condition for t=2 is: when there is no component that has two or more vertices in the same bipartition set, then we must add two edges.\n\n            How many ways to add two edges to form an odd cycle?\n\n            We have two possibilities:\n\n            Possibility 1: Form a triangle that uses two edges from two different components. \n\n            Example: \n                Component1: {a} (isolated vertex) and Component2: {b, c} (edge b-c). \n                Then we can add edges a-b and a-c to form a triangle.\n\n            But note: our graph might not have isolated vertices? Actually, we are given a graph that is bipartite and disconnected. The components can be:\n\n                Type1: A single vertex. (Then its bipartition set has one vertex, so we cannot form a triangle by itself, but we can use it with others.)\n\n                Type2: Two vertices (an edge) -> then each bipartition set has one vertex.\n\n                Type3: More than two vertices, but the two sets have the same size or different, but we are in the case where each component doesn't have two vertices in the same set (so for a component, |A| = |B| or |A| = |B|+1, but we require that |A|>=2 is false? Actually, no: we require that the component does not have two vertices in the same set. So for a component, the maximum frequency of any set is 1.\n\n            Therefore, each connected component is either:\n                - A single vertex: then the bipartition sets are {v} and {} (or vice versa) -> so one set has one vertex, the other empty.\n                - Two vertices: then two sets, each of size 1.\n                - Three or more vertices: but if the component is bipartite and every set has at most one vertex? Then the component must be a collection of isolated edges? Actually, no: a bipartite graph with maximum degree 1? Then it's a matching (set of disjoint edges). \n\n            Actually, if a bipartite graph has no two vertices in the same set (for a connected component), then the component must be a set of edges (like a matching) and no vertex has two edges? Actually, no: we can have a path of three edges? \n\n            Let me check: \n                Path of three edges: four vertices, alternating. Then the two endpoints are in the same set. So that component would have two vertices in the same set (the two endpoints). \n\n            Therefore, a connected bipartite graph that does not have two vertices in the same set must be a collection of isolated edges (i.e., a matching of edges and possibly isolated vertices). \n\n            So the graph is composed of isolated edges and isolated vertices.\n\n            Then, to form an odd cycle, we must use at least two edges (since a triangle requires three edges, but we can form a triangle by connecting an isolated vertex to two vertices of an edge).\n\n            How many ways?\n\n            We can choose:\n\n              Option 1: Use two edges to form a triangle. \n\n              We need three distinct vertices: two from one component (which is an edge) and one from another component (isolated vertex). \n\n              Alternatively, we can use three vertices from two different edges? \n\n            Actually, we can form a triangle by:\n\n              - Taking two edges (from two different components) and then connecting them with one more edge? \n\n            But wait: we are adding two edges. We can choose:\n\n              Case A: Use one isolated vertex (say from a component that is a single vertex) and one edge (from a component that is an edge). Then we add two edges: from the isolated vertex to the two endpoints of the existing edge.\n\n              Case B: Use two edges from two different components (each an edge). Then we can connect the two edges by adding two edges? Actually, we can form a cycle of length 4 (even) or 3? \n\n            Example: two edges (components): [a-b] and [c-d]. Then if we add edges a-c and b-d, we get a cycle of length 4 (even). If we add edges a-c and a-d, then we have a triangle a-c-d-a.\n\n            So the two edges must share a common vertex? \n\n            Actually, we can also form a triangle by connecting two edges that are in the same component? But wait, the graph is disconnected and we are only allowed to add edges. And the two edges are in separate components. \n\n            How many ways to form a triangle?\n\n              We need to pick three vertices that are not all in the same component. Since the graph is composed of edges and isolated vertices, we can have:\n\n                Type 1: One component is an edge (two vertices) and another component is an isolated vertex. Then we can form a triangle by connecting the isolated vertex to the two vertices of the edge.\n\n                Type 2: Three components, each an isolated vertex. Then we can form a triangle by connecting the three isolated vertices (three edges) but we are only adding two edges? Then we don't form a triangle.\n\n                Actually, to form a triangle we need three edges. But we are only adding two edges. \n\n            Wait, we are adding two edges. So we cannot form a triangle by connecting three isolated vertices (that would require three edges). \n\n            Actually, we are allowed to add two edges. Then the cycle must be of odd length and minimal? \n\n            The minimal odd cycle is 3 (triangle). But to form a triangle, we need three edges. But the graph might not have those three edges. \n\n            Alternatively, we can use an existing edge and two new edges to form a triangle? \n\n            Example: Component1: edge (a,b) exists. Then we add two edges: (a,c) and (b,c). Then the cycle is a-b-c-a (three edges: one existing and two new). \n\n            But wait, the problem says: we are to count the ways to add t edges (which is the minimum number). The cycle must be formed by the edges in the graph after adding t edges. \n\n            In this case, we are adding two edges and the graph already has one edge. Then the cycle is formed by the existing edge and the two new ones.\n\n            However, note: the problem says \"form a cycle of an odd length\". The cycle is defined by the edges that exist (including the ones we added). \n\n            Therefore, we are allowed to use the existing edges. \n\n            So to form a triangle, we can use an existing edge and then two new edges to complete the triangle.\n\n            How many ways to form a triangle?\n\n            We can choose:\n\n              - An existing edge (u, v) and then an external vertex w (not adjacent to u or v, and not connected by an edge in the graph). Then we add edges (u, w) and (v, w). \n\n            But note: we cannot add an edge that already exists. So if (u,w) or (v,w) already exists, we cannot use that.\n\n            However, in our graph, the existing edges are only the ones provided. The graph is bipartite and the components are edges and isolated vertices.\n\n            Conditions for the triangle:\n\n              The three edges (u,v), (v,w), (w,u) must not be already present. But note: (u,v) is present, and (v,w) and (w,u) are absent (otherwise, the graph would have had a triangle, which is an odd cycle, so we are in the case that the graph is bipartite, so no triangle exists). \n\n            But wait: in a bipartite graph, we cannot have a triangle. So (u,v) is present, and (v,w) and (w,u) are absent.\n\n            However, note: the graph is bipartite and we are breaking the bipartition by adding two edges? \n\n            Actually, the entire graph is bipartite. After adding two edges (u,w) and (v,w), the graph becomes non-bipartite. \n\n            But the problem is: we are to count the minimal number of edges to add to form an odd cycle.\n\n            Therefore, the minimal t is 2 if there is no component with two vertices in the same bipartition set (so no one-edge addition) and we are forced to use two edges.\n\n            Now, how many ways?\n\n            We can form an odd cycle by:\n\n              Option 1: Adding two edges that together form a triangle with an existing edge.\n\n              Option 2: Or, adding two edges that form an odd cycle of length > 3? \n\n            However, note: the minimal cycle is 3. So if we can form a cycle of length 3, then we don't need to consider longer ones.\n\n            But is it always possible to form a cycle of length 3 with two edges? \n\n            Condition: we need an existing edge (u,v) and an external vertex w such that we can add (u,w) and (v,w). \n\n            But note: we cannot add an edge that already exists. So we require that (u,w) and (v,w) are not in the graph.\n\n            Also, we cannot add an edge within the same component? Actually, we can, but in our case, the graph is bipartite and the component containing u and v (the existing edge) is a connected component (unless there are more connections, but we assume the graph is bipartite and we are in the case that we don't have two edges in the same set). \n\n            Actually, the graph is bipartite and the edge (u,v) is present. The vertex w must be in a different connected component (because if w is in the same component, then the component would have more than two vertices and we might have broken the bipartition condition? Actually, no: the component might be larger but still bipartite. But wait, we are in the case that we are considering the entire graph is bipartite and we are in the subcase that no component has two vertices in the same set. \n\n            However, if the component containing u and v is larger, then we must have two vertices in the same set? \n\n            Let me recall: a connected bipartite graph has two sets. The condition for having two vertices in the same set is independent of the component's size. \n\n            Actually, the condition for t=2 is: the graph is bipartite and for every connected component, the maximum frequency of a set is 1. \n\n            Example: a connected bipartite graph with three vertices: {a,b,c} with edges (a,b) and (b,c). Then the bipartition: a and c are in the same set. So this component has two vertices in the same set. Therefore, we would have been able to form an odd cycle by adding one edge (between a and c). \n\n            Therefore, the condition for t=2 is that in every connected component, each bipartition set has at most one vertex. \n\n            What does that imply? \n\n            In a connected bipartite graph, if each set has at most one vertex, then the graph must have at most two vertices (because there are two sets). \n\n            So the entire graph is composed of:\n\n              - Components that are either an edge (two vertices) or an isolated vertex.\n\n            Therefore, the graph is a disjoint union of edges and isolated vertices.\n\n            Then, to form an odd cycle, we must use an existing edge and then connect its two endpoints to a third vertex (which is an isolated vertex) by two edges.\n\n            How many ways?\n\n            We need to choose an existing edge (u,v) and an isolated vertex w (from a different component). Then we add edges (u,w) and (v,w). \n\n            But note: we can also form a cycle by connecting two edges? \n\n            Example: two edges: (a,b) and (c,d). Then we can form a cycle by adding edges (a,c) and (b,d) -> cycle of length 4 (even). Or (a,c) and (a,d) -> then cycle a-c-d-a (triangle). \n\n            So we have two ways to use two edges and an existing edge (from a different component) to form a triangle.\n\n            Actually, we can form a triangle by:\n\n              - Using one existing edge (from one component) and one isolated vertex (from another component): then we have one way per existing edge and per isolated vertex.\n\n            But wait, we can also use two existing edges from two different components? \n\n            Example: two edges: (a,b) and (c,d). Then we can form a triangle by:\n\n              - Adding edges (a,c) and (b,d): that forms a cycle of length 4 (even).\n              - Adding edges (a,c) and (a,d): that forms a triangle a-c-d-a.\n\n            However, note: the two edges we add must be such that the three edges (a,b), (a,c), (a,d) form a triangle? Actually, the triangle is a-c-d-a, which uses the existing edge (c,d) and the two new edges (a,c) and (a,d). \n\n            So we are using one existing edge (c,d) and two new edges (a,c) and (a,d). \n\n            But note: the existing edge (c,d) must be present, and the two new edges connect a (which is from the other edge) to c and d.\n\n            Therefore, we can form a triangle by:\n\n              - Choosing two edges (say edge1 and edge2) and then one vertex from edge1 and connecting it to both vertices of edge2.\n\n            But wait, we are allowed to choose any two edges (from two different components). Then we can choose:\n\n              Let the two edges be (u1, u2) and (v1, v2). Then we can form a triangle by:\n\n                  Option 1: Connect u1 to v1 and u1 to v2. Then the triangle is u1-v1-v2-u1? But we need the edge v1-v2 to be present. It is, because we chose an existing edge (v1,v2). Then the cycle is u1-v1-v2-u1. But note: the edge u1-v1 and u1-v2 are added, and the edge v1-v2 is existing. So the cycle is of length 3.\n\n                  Option 2: Similarly, connect u2 to v1 and u2 to v2.\n\n            So for two distinct edges, there are 2 ways.\n\n            But note: we are adding two edges. We cannot add three edges at once? Actually, we are adding two edges. \n\n            However, the two edges we add must be the two edges from one vertex (either u1 or u2) to the two vertices of the other edge.\n\n            Therefore, the total ways for t=2 are:\n\n              Case A: Use one existing edge (say from a component) and one isolated vertex (from a different component). Then there is one way for that edge and that vertex: add the two edges from the isolated vertex to the two endpoints of the existing edge.\n\n              Case B: Use two existing edges (from two different components). Then there are two ways: for each of the two edges in the first edge, connect it to the two endpoints of the second edge.\n\n            But note: the graph is composed of edges and isolated vertices. We cannot use two edges and one isolated vertex because we are only adding two edges. \n\n            Actually, we can only use:\n\n              - Two edges from two different edges (each edge is a component) and then we don't need an isolated vertex.\n\n            Or:\n\n              - One edge and one isolated vertex.\n\n            However, we can also use three edges? But wait, we are adding two edges. \n\n            Therefore, the two cases are:\n\n              Case 1: We choose one edge (from the graph) and one isolated vertex (from the graph). Then we add two edges from the isolated vertex to the two endpoints of the chosen edge.\n\n              Case 2: We choose two edges (from the graph) and then we choose one endpoint from the first edge and connect it to both endpoints of the second edge.\n\n            But note: the graph might have multiple edges and isolated vertices.\n\n            How to count:\n\n              Let:\n                E = number of edges (each is a component of two vertices)\n                V0 = number of isolated vertices\n\n              Then:\n\n                Case 1: \n                  For each edge i (there are E edges), and for each isolated vertex j (V0 vertices), we can form a triangle by adding two edges from j to the two endpoints of edge i.\n\n                  Number of ways for Case 1: E * V0.\n\n                Case 2:\n                  For each pair of edges (i, j) (with i != j), we have two ways: \n                    - Connect one endpoint of edge i to both endpoints of edge j.\n                    - Connect the other endpoint of edge i to both endpoints of edge j.\n\n                  But note: the two edges are distinct. The number of ways for Case 2: C(E, 2) * 2.\n\n            However, wait: in Case 2, we are not using an isolated vertex, so we don't need to worry about the bipartition? \n\n            But note: the graph is bipartite and the two edges are from two different components. The two edges are independent. \n\n            However, we must ensure that the two edges we add do not already exist. \n\n            But in a bipartite graph, the two edges we add are between two different components. Since the graph is bipartite, the bipartition sets are independent for each component. \n\n            Example: \n              Edge i: {a, b} (a in set A, b in set B)\n              Edge j: {c, d} (c in set A, d in set B)\n\n            Then the edges we add: \n              Option 1: a-c, a-d -> these are between A and A? But wait, the original graph is bipartite and we are free to assign the bipartition for each component arbitrarily. \n\n            Actually, the bipartition sets for each component are fixed.",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to a given undirected graph to form a simple cycle of odd length, and the number of ways to add those edges. The solution involves checking if the graph already contains an odd cycle, and if not, calculating the minimal edges required to create one.\n\n### Approach\n1. **Check for Existing Odd Cycle**: The graph is checked for bipartiteness. If it is not bipartite, it contains an odd cycle, so no edges need to be added (t=0, w=1).\n2. **Connected Bipartite Graph**: If the graph is bipartite and connected, adding any edge within the same bipartition set will create an odd cycle. The number of ways to do this is the number of non-edges within each bipartition set.\n3. **Disconnected Bipartite Graph**: If the graph is bipartite but disconnected, we first check if any connected component has at least two vertices in the same bipartition set. If found, adding one edge within such a set creates an odd cycle. Otherwise, we need to add two edges to form a triangle with an existing edge from another component.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    components = []\n    comp_index = 0\n    is_bipartite = True\n    total_ways = 0\n    comp_graphs = []\n\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_nodes = []\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes.append(i)\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif visited[neighbor] == 1:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            comp_graphs.append((comp_nodes, color))\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    comps = []\n    for i in range(1, n+1):\n        c = color[i]\n        comps.append((i, c))\n        \n    comp_dict = {}\n    for nodes_list, color_arr in comp_graphs:\n        comp_id = len(comps)\n        comp_info = {\n            'nodes': nodes_list,\n            'set0': 0,\n            'set1': 0\n        }\n        for node in nodes_list:\n            comp_info['set0'] += 1 if color_arr[node] == 0 else 0\n            comp_info['set1'] += 1 if color_arr[node] == 1 else 0\n        comps.extend([(node, color_arr[node]) for node in nodes_list])\n        comp_dict[comp_id] = comp_info\n        \n    total_set0 = 0\n    total_set1 = 0\n    for node, c in comps:\n        if c == 0:\n            total_set0 += 1\n        else:\n            total_set1 += 1\n            \n    if total_set0 >= 2 or total_set1 >= 2:\n        t = 1\n        ways = 0\n        for comp_id in range(1, len(comp_graphs)+1):\n            comp_info = comp_dict[comp_id]\n            set0_count = comp_info['set0']\n            set1_count = comp_info['set1']\n            if set0_count >= 2:\n                ways += set0_count*(set0_count-1)//2\n            if set1_count >= 2:\n                ways += set1_count*(set1_count-1)//2\n        print(f\"1 {ways}\")\n    else:\n        t = 2\n        ways = 0\n        edges_count = (n - (len(comps))) // 2\n        isolated_vertices = n - 2 * edges_count\n        existing_edges = edges_count\n        \n        if existing_edges > 0 and isolated_vertices > 0:\n            ways += existing_edges * isolated_vertices\n            \n        if existing_edges >= 2:\n            ways += existing_edges * (existing_edges - 1)\n            \n        print(f\"2 {ways}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The graph is checked for bipartiteness using BFS. If it's not bipartite, an odd cycle exists, so no edges need to be added.\n2. **Connected Components Analysis**: For each connected component, the number of vertices in each bipartition set is counted. If any set has at least two vertices, adding an edge between them forms an odd cycle.\n3. **Edge Addition Scenarios**:\n   - **Single Edge Addition**: If any component has vertices in the same set, the number of ways to add one edge is the combination of pairs within each set.\n   - **Two Edges Addition**: If no such pairs exist, the solution involves forming a triangle by connecting an existing edge and an isolated vertex, or by connecting two edges from different components. The number of ways is calculated based on the counts of edges and isolated vertices.\n\nThis approach efficiently checks for the minimal edge additions required to form an odd cycle and counts the valid configurations, ensuring optimal performance even for large graphs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    components = []\n    comp_index = 0\n    is_bipartite = True\n    total_ways = 0\n    comp_graphs = []\n\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_nodes = []\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes.append(i)\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        q.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif visited[neighbor] == 1:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            comp_graphs.append((comp_nodes, color))\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    comps = []\n    for i in range(1, n+1):\n        c = color[i]\n        comps.append((i, c))\n        \n    comp_dict = {}\n    for nodes_list, color_arr in comp_graphs:\n        comp_id = len(comps)\n        comp_info = {\n            'nodes': nodes_list,\n            'set0': 0,\n            'set1': 0\n        }\n        for node in nodes_list:\n            comp_info['set0'] += 1 if color_arr[node] == 0 else 0\n            comp_info['set1'] += 1 if color_arr[node] == 1 else 0\n        comps.extend([(node, color_arr[node]) for node in nodes_list])\n        comp_dict[comp_id] = comp_info\n        \n    total_set0 = 0\n    total_set1 = 0\n    for node, c in comps:\n        if c == 0:\n            total_set0 += 1\n        else:\n            total_set1 += 1\n            \n    if total_set0 >= 2 or total_set1 >= 2:\n        t = 1\n        ways = 0\n        for comp_id in range(1, len(comp_graphs)+1):\n            comp_info = comp_dict[comp_id]\n            set0_count = comp_info['set0']\n            set1_count = comp_info['set1']\n            if set0_count >= 2:\n                ways += set0_count*(set0_count-1)//2\n            if set1_count >= 2:\n                ways += set1_count*(set1_count-1)//2\n        print(f\"1 {ways}\")\n    else:\n        t = 2\n        ways = 0\n        edges_count = (n - (len(comps))) // 2\n        isolated_vertices = n - 2 * edges_count\n        existing_edges = edges_count\n        \n        if existing_edges > 0 and isolated_vertices > 0:\n            ways += existing_edges * isolated_vertices\n            \n        if existing_edges >= 2:\n            ways += existing_edges * (existing_edges - 1)\n            \n        print(f\"2 {ways}\")\n\nif __name__ == '__main__':\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1296,
        "thoughts_token_count": 8191
    }
}