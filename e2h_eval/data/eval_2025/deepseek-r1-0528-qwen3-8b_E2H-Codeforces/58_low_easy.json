{
    "start": 1758299363.628781,
    "end": 1758302785.3538985,
    "start-formatted": "2025-09-20 01:29 KST",
    "end-formatted": "2025-09-20 02:26 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, we are to find:\n   t = the minimum number of edges to add to form a simple cycle of odd length (with more than one vertex)\n   w = the number of ways to add t edges to achieve that\n\n Conditions: \n   The graph is undirected, without parallel edges or loops, and not necessarily connected.\n\n Important: We cannot add parallel edges or loops.\n\n Observations:\n\n 1. Odd cycle: In an undirected graph, an odd cycle must have an odd number of edges (so the cycle length is odd).\n 2. We are allowed to add edges arbitrarily (without creating multiple edges or loops). But note: we want the minimum number of edges to add.\n\n Let's consider possibilities:\n\n Case 0: If the graph already contains an odd-length cycle, then t=0 and w=1? But wait, note: we are forming a cycle by adding edges. However, if the graph already has an odd cycle, then no edge needs to be added. So t=0 and w=1.\n\n But wait, the problem says: \"form a simple cycle of an odd length\", meaning we can use existing edges and possibly add some. However, if the graph already has such a cycle, then we don't need to add any edge.\n\n However, note: the problem does not require that the entire graph becomes having an odd cycle, but that by adding t edges we form a cycle. But if there is already an odd cycle, then we don't need to add any edge.\n\n But wait: what if the graph has an odd cycle? Then we can just use that cycle. So:\n\n   Step 1: Check if the graph has an odd cycle.\n\n How to check for odd cycle in an undirected graph?\n   We can use BFS/DFS with colors (bipartite check). If the graph is bipartite, then it doesn't contain an odd cycle. Otherwise, it does.\n\n However, note: the graph might not be connected. So we need to check each connected component.\n\n But note: the problem does not specify that the cycle must be entirely in one connected component? Actually, when we add edges, we are allowed to connect different components, but the cycle must be formed by the edges (both original and added). However, the minimal number of edges to add should be considered.\n\n However, let's break down the cases:\n\n Case 1: There is already an odd cycle -> t=0, w=1.\n\n But wait, what if the graph has multiple odd cycles? We don't care, because we only need one.\n\n Case 2: If there is no odd cycle, then the graph is bipartite (each connected component is bipartite). Then we have to consider adding edges to create an odd cycle.\n\n What is the minimal number of edges to add?\n\n Possibilities:\n\n  a) Adding one edge: \n      - If we add one edge, can we form an odd cycle?\n        Consider: In a bipartite graph, all cycles are even. Adding an edge within a bipartite component might create an odd cycle if the two vertices are in the same part (then the cycle goes from u to v through the original graph and then the edge back: the original path and the direct edge form a cycle. The parity: the original path between u and v is even (because they are in the same part) and the edge makes the cycle length (even + 1) -> odd. So if we can find two vertices in the same bipartite color (in the same connected component) that are not adjacent, then adding the edge between them creates an odd cycle.\n\n        However, note: we cannot add an edge that already exists. But the graph doesn't have parallel edges, so if there is no edge between two vertices in the same color, we can add one.\n\n        But wait: the condition for being bipartite: the graph is bipartite and we know the coloring. In one connected component, we have two sets (say black and white). Then any edge between two black or two white would create an odd cycle.\n\n        However, if the graph is not complete in the sense that there are missing edges in the same color set, then we can add one edge (any missing edge in the same color set) to form an odd cycle.\n\n        Therefore, if there exists at least one pair of non-adjacent vertices in the same bipartite set (in the same connected component), then we can form an odd cycle by adding one edge.\n\n        But note: what if the entire connected component is already complete? Then we cannot add an edge within the same set? Actually, if the graph is bipartite and we are considering a connected component, then the maximum edges in the component is |E|, and if we try to add an edge within the same set, we require that the two vertices are not adjacent. So if the graph is complete bipartite (i.e., every edge",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges. The solution involves checking for existing odd cycles and then determining the minimal edges required if no such cycle exists.\n\n### Approach\n1. **Check for Existing Odd Cycle**: \n   - Use a bipartite check (BFS/DFS coloring) on each connected component of the graph. If any component is not bipartite, it contains an odd cycle, so no edges need to be added (t=0, w=1).\n\n2. **If No Odd Cycle Exists**:\n   - **Case 1: Single Component with Same-Color Vertices**: If there are at least two vertices in the same bipartite set (color) that are not connected by an edge, adding one edge between them forms an odd cycle. The number of ways (w) is the count of such non-edges.\n   - **Case 2: All Components Bipartite but No Same-Color Non-Edge**: If all same-color vertices in each component are already connected, we need to connect two different components. The minimal edges required depend on the sizes of the components and the edges needed to merge them into a single odd cycle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    visited = [False] * (n+1)\n    components = []\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            queue = deque([i])\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = 1 - color[node]\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            global_has_odd_cycle = True\n            components.append(comp_nodes)\n            \n    has_odd_cycle = False\n    for nodes in components:\n        for node in nodes:\n            for neighbor in graph[node]:\n                if color[node] == color[neighbor] and color[node] != -1:\n                    has_odd_cycle = True\n                    break\n            if has_odd_cycle:\n                break\n        if has_odd_cycle:\n            break\n            \n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    same_color_edges = 0\n    \n    for nodes in components:\n        black_count = sum(1 for node in nodes if color[node] == 0)\n        white_count = len(nodes) - black_count\n        \n        same_color_edges += black_count * (black_count - 1) // 2 + white_count * (white_count - 1) // 2\n        for node in nodes:\n            for neighbor in graph[node]:\n                if color[node] == color[neighbor]:\n                    same_color_edges -= 1\n                    \n    total_possible_edges = (n*(n-1)//2) - m\n    t = 1\n    w = same_color_edges\n    if w > 0:\n        print(f\"1 {w}\")\n        return\n        \n    t = 2\n    w = 0\n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            comp1 = components[i]\n            comp2 = components[j]\n            black1 = sum(1 for node in comp1 if color[node] == 0)\n            white1 = len(comp1) - black1\n            black2 = sum(1 for node in comp2 if color[node] == 0)\n            white2 = len(comp2) - black2\n            \n            ways = black1 * white2 + white1 * black2\n            w += ways\n            \n    total_components = len(components)\n    if total_components >= 3:\n        t = 3\n        for i in range(len(components)):\n            comp = components[i]\n            size = len(comp)\n            total_ways_in_component = size * (size-1) // 2\n            edges_in_comp = 0\n            for node in comp:\n                edges_in_comp += len(graph[node])\n            edges_in_comp //= 2\n            missing_edges = total_ways_in_component - edges_in_comp\n            w += missing_edges * (n - size)\n            \n    print(f\"{t} {w}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The graph is checked for bipartiteness using BFS. Each node is colored alternately (0 or 1). If any adjacent nodes have the same color, an odd cycle exists.\n2. **Same-Color Non-Edges**: If the graph is bipartite, we count non-edges between nodes of the same color. Adding one such edge forms an odd cycle.\n3. **Component Merging**: If no same-color non-edges exist, we consider merging two components. The number of ways to merge is based on connecting nodes of opposite colors between components.\n4. **Three Components**: If three or more components exist, three edges might be needed to form an odd cycle by connecting all components appropriately.\n\nThis approach efficiently checks for existing odd cycles and calculates the minimal edges required to form one if none exist, along with the number of ways to achieve this.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    visited = [False] * (n+1)\n    components = []\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            comp_nodes = []\n            queue = deque([i])\n            visited[i] = True\n            color[i] = 0\n            comp_nodes.append(i)\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        color[neighbor] = 1 - color[node]\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            global_has_odd_cycle = True\n            components.append(comp_nodes)\n            \n    has_odd_cycle = False\n    for nodes in components:\n        for node in nodes:\n            for neighbor in graph[node]:\n                if color[node] == color[neighbor] and color[node] != -1:\n                    has_odd_cycle = True\n                    break\n            if has_odd_cycle:\n                break\n        if has_odd_cycle:\n            break\n            \n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n        \n    total_ways = 0\n    same_color_edges = 0\n    \n    for nodes in components:\n        black_count = sum(1 for node in nodes if color[node] == 0)\n        white_count = len(nodes) - black_count\n        \n        same_color_edges += black_count * (black_count - 1) // 2 + white_count * (white_count - 1) // 2\n        for node in nodes:\n            for neighbor in graph[node]:\n                if color[node] == color[neighbor]:\n                    same_color_edges -= 1\n                    \n    total_possible_edges = (n*(n-1)//2) - m\n    t = 1\n    w = same_color_edges\n    if w > 0:\n        print(f\"1 {w}\")\n        return\n        \n    t = 2\n    w = 0\n    for i in range(len(components)):\n        for j in range(i+1, len(components)):\n            comp1 = components[i]\n            comp2 = components[j]\n            black1 = sum(1 for node in comp1 if color[node] == 0)\n            white1 = len(comp1) - black1\n            black2 = sum(1 for node in comp2 if color[node] == 0)\n            white2 = len(comp2) - black2\n            \n            ways = black1 * white2 + white1 * black2\n            w += ways\n            \n    total_components = len(components)\n    if total_components >= 3:\n        t = 3\n        for i in range(len(components)):\n            comp = components[i]\n            size = len(comp)\n            total_ways_in_component = size * (size-1) // 2\n            edges_in_comp = 0\n            for node in comp:\n                edges_in_comp += len(graph[node])\n            edges_in_comp //= 2\n            missing_edges = total_ways_in_component - edges_in_comp\n            w += missing_edges * (n - size)\n            \n    print(f\"{t} {w}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1276,
        "thoughts_token_count": 1023
    }
}