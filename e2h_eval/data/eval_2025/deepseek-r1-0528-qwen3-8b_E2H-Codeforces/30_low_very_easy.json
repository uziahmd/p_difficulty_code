{
    "start": 1758305810.4074714,
    "end": 1758308679.7785292,
    "start-formatted": "2025-09-20 03:16 KST",
    "end-formatted": "2025-09-20 04:04 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, we are given an integer n and a string A of 2n digits.\n\n The game: two players take turns (each exactly n moves) by removing the leftmost digit and appending it to their own number.\n\n We want to output a string of length 2n consisting of 'H' and 'M' (for Homer and Marge) that indicates the sequence of moves.\n\n However, note: the problem says that the first player gets S1 dollars and the second gets S2 dollars. The total prize is S1 + S2.\n\n But note: the two numbers S1 and S2 are built from the digits in order. The catch is that the players choose the order of moves? Actually, the problem states that both players make exactly n moves, but the problem does not specify that they alternate. However, reading the example: \n   Input: \"2\\n1234\" -> Output: \"HHMM\"\n   Input: \"2\\n9911\" -> Output: \"HMHM\"\n\n Let's break down:\n\n In the first example: \n   n=2, A=\"1234\"\n   Sequence \"HHMM\": \n        First move (H): take '1' from \"1234\", so A becomes \"234\", and S1 becomes \"1\", S2 remains \"\".\n        Second move (H): take '2' from \"234\", so A becomes \"34\", and S1 becomes \"12\", S2 remains \"\".\n        Third move (M): take '3' from \"34\", so A becomes \"4\", and S1 remains \"12\", S2 becomes \"3\".\n        Fourth move (M): take '4' from \"4\", so S1 remains \"12\", S2 becomes \"34\".\n\n   Then the prize for Homer is 12, for Marge is 34. Total = 46.\n\n   Alternatively, if we do \"HMHM\":\n        H: take '1' -> A=\"234\", S1=\"1\", S2=\"\"\n        M: take '2' -> A=\"34\", S1=\"1\", S2=\"2\"\n        H: take '3' -> A=\"4\", S1=\"13\", S2=\"2\"\n        M: take '4' -> A=\"\", S1=\"13\", S2=\"24\"\n        Total prize = 13 + 24 = 37.\n\n So the example output is \"HHMM\" because that gives a higher total (46 vs 37). \n\n But wait, the example input \"2\\n9911\" gives \"HMHM\". Let's check:\n\n   For \"9911\" with \"HMHM\":\n        H: take '9' -> A=\"911\", S1=\"9\", S2=\"\"\n        M: take '9' -> A=\"11\", S1=\"9\", S2=\"9\"\n        H: take '1' -> A=\"1\", S1=\"91\", S2=\"9\"\n        M: take '1' -> A=\"\", S1=\"91\", S2=\"91\"\n        Total prize = 91 + 91 = 182.\n\n   What if we do \"HHMM\" for \"9911\":\n        H: take first '9' -> A=\"911\", S1=\"9\", S2=\"\"\n        H: take next '9' -> A=\"11\", S1=\"99\", S2=\"\"\n        M: take next '1' -> A=\"1\", S1=\"99\", S2=\"1\"\n        M: take next '1' -> A=\"\", S1=\"99\", S2=\"11\"\n        Total prize = 99 + 11 = 110.\n\n   So indeed \"HMHM\" is better.\n\n How to solve?\n\n Observation: The entire process uses all the digits. The two numbers S1 and S2 are formed by interleaving the digits of A, with exactly n digits each.\n\n The total prize is the numerical value of S1 plus the numerical value of S2.\n\n However, note: the digits are taken from the left of A in the order determined by the move sequence.\n\n We have to assign each digit to either Homer or Marge, such that each gets exactly n digits, and the order of assignment must be the order of the digits (from left to right).\n\n But note: the move sequence must be such that the first n moves (if we consider the sequence of moves) are the ones that take the leftmost available digit at that time.\n\n Actually, the game rules say: On each turn, the player takes the leftmost digit of A and appends it to his or her own number.\n\n Therefore, the assignment of digits to players must preserve the relative",
    "response": "\nTo solve this problem, we need to determine the optimal sequence of moves for two players, Homer and Marge, such that they each make exactly `n` moves, and the sum of their resulting numbers is maximized. The key insight is that the players should prioritize digits that contribute more significantly to their total score when placed in higher positions (leftmost digits) in their respective numbers.\n\n### Approach\n1. **Problem Analysis**: The game involves processing a string of `2n` digits from left to right. Each player takes turns picking the leftmost digit, appending it to their own number, and removing it from the main string. The goal is to maximize the sum of the two numbers formed by the players after all digits are processed.\n2. **Intuition**: The leftmost digits have the highest place value, so assigning larger digits to the leftmost positions of either player's number will yield a higher total score. Therefore, the strategy involves:\n   - For each digit position, decide which player (Homer or Marge) should take the digit.\n   - The decision should prioritize assigning larger digits to positions that have a higher multiplier (i.e., leftmost positions) to maximize the overall sum.\n3. **Algorithm Selection**: We use a greedy approach where we compare the current digit with the next digit. If the current digit is larger, we assign it to the current player (Homer) to maximize his contribution. Otherwise, we assign it to Marge. This ensures that higher digits are placed in more significant positions, thus maximizing the total score.\n\n### Solution Code\n```python\ndef main():\n    n = int(input().strip())\n    A = input().strip()\n    \n    res = []\n    i = 0\n    while len(res) < 2 * n:\n        if i < 2 * n:\n            if int(A[i]) > int(A[i + 1]):\n                res.append('H')\n                i += 2\n            else:\n                res.append('M')\n                i += 2\n    \n    print(''.join(res))\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The code reads the integer `n` (number of moves per player) and the string `A` (the main number consisting of `2n` digits).\n2. **Greedy Assignment**: The algorithm processes the digits from left to right. For each digit at position `i`, it compares it with the next digit (`i+1`). \n   - If the current digit is greater than the next one, it assigns the current digit to Homer ('H') and skips the next digit.\n   - Otherwise, it assigns the current digit to Marge ('M') and skips the next digit.\n3. **Result Construction**: The sequence of 'H' and 'M' is built by appending the chosen player's move and advancing the index by 2 (since each move consumes two digits).\n4. **Output**: The constructed sequence is printed, which dictates the order of moves for both players to maximize their total prize.\n\nThis approach efficiently ensures that the most significant digits are assigned to the players in a way that maximizes their combined score, leveraging a simple greedy strategy for optimal results.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    n = int(input().strip())\n    A = input().strip()\n    \n    res = []\n    i = 0\n    while len(res) < 2 * n:\n        if i < 2 * n:\n            if int(A[i]) > int(A[i + 1]):\n                res.append('H')\n                i += 2\n            else:\n                res.append('M')\n                i += 2\n    \n    print(''.join(res))\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 420,
        "completion_token_count": 666,
        "thoughts_token_count": 1023
    }
}