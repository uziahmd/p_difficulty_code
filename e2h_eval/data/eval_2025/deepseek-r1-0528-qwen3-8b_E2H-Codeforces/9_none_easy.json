{
    "start": 1758099697.8685548,
    "end": 1758099720.200223,
    "start-formatted": "2025-09-17 18:01 KST",
    "end-formatted": "2025-09-17 18:02 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport bisect\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    items = []\n    idx = 2\n    for _ in range(n):\n        w = int(data[idx])\n        c = int(data[idx + 1])\n        items.append((w, c))\n        idx += 2\n    \n    # Sort items by weight\n    items.sort()\n    \n    # Group items by weight\n    from collections import defaultdict\n    weight_groups = defaultdict(list)\n    for w, c in items:\n        weight_groups[w].append(c)\n    \n    # Sort each group's cost in descending order\n    for w in weight_groups:\n        weight_groups[w].sort(reverse=True)\n    \n    # Calculate prefix sums for each weight group\n    prefix_sums = {}\n    for w in weight_groups:\n        prefix_sums[w] = [0]\n        for c in weight_groups[w]:\n            prefix_sums[w].append(prefix_sums[w][-1] + c)\n    \n    # Use a dynamic programming approach with a list to track max cost for each weight\n    dp = [0] * (m + 1)\n    \n    # For each weight, update the dp array\n    for w in sorted(weight_groups.keys()):\n        # Get all possible counts of this weight (from 0 to max possible)\n        max_count = min(len(weight_groups[w]), m // w)\n        prefix = prefix_sums[w]\n        \n        # Use a sliding window to optimize the update\n        # We use a list to keep track of the best value for each possible remainder\n        # This is a variant of the knapsack problem with limited weight types\n        # We use a sliding window to maintain the maximum value for each possible remainder\n        # This is inspired by the \"bounded knapsack\" optimization\n        \n        # Create a list to store the best value for each remainder mod w\n        best_remainder = [-1] * w\n        for i in range(m + 1):\n            r = i % w\n            if best_remainder[r] == -1:\n                best_remainder[r] = dp[i]\n            else:\n                best_remainder[r] = max(best_remainder[r], dp[i])\n        \n        # Update dp using the best_remainder\n        for i in range(m + 1):\n            r = i % w\n            if best_remainder[r] != -1:\n                for k in range(1, max_count + 1):\n                    if i + k * w <= m:\n                        dp[i + k * w] = max(dp[i + k * w], best_remainder[r] + prefix[k])\n    \n    print(dp[m])\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport bisect\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    items = []\n    idx = 2\n    for _ in range(n):\n        w = int(data[idx])\n        c = int(data[idx + 1])\n        items.append((w, c))\n        idx += 2\n    \n    # Sort items by weight\n    items.sort()\n    \n    # Group items by weight\n    from collections import defaultdict\n    weight_groups = defaultdict(list)\n    for w, c in items:\n        weight_groups[w].append(c)\n    \n    # Sort each group's cost in descending order\n    for w in weight_groups:\n        weight_groups[w].sort(reverse=True)\n    \n    # Calculate prefix sums for each weight group\n    prefix_sums = {}\n    for w in weight_groups:\n        prefix_sums[w] = [0]\n        for c in weight_groups[w]:\n            prefix_sums[w].append(prefix_sums[w][-1] + c)\n    \n    # Use a dynamic programming approach with a list to track max cost for each weight\n    dp = [0] * (m + 1)\n    \n    # For each weight, update the dp array\n    for w in sorted(weight_groups.keys()):\n        # Get all possible counts of this weight (from 0 to max possible)\n        max_count = min(len(weight_groups[w]), m // w)\n        prefix = prefix_sums[w]\n        \n        # Use a sliding window to optimize the update\n        # We use a list to keep track of the best value for each possible remainder\n        # This is a variant of the knapsack problem with limited weight types\n        # We use a sliding window to maintain the maximum value for each possible remainder\n        # This is inspired by the \"bounded knapsack\" optimization\n        \n        # Create a list to store the best value for each remainder mod w\n        best_remainder = [-1] * w\n        for i in range(m + 1):\n            r = i % w\n            if best_remainder[r] == -1:\n                best_remainder[r] = dp[i]\n            else:\n                best_remainder[r] = max(best_remainder[r], dp[i])\n        \n        # Update dp using the best_remainder\n        for i in range(m + 1):\n            r = i % w\n            if best_remainder[r] != -1:\n                for k in range(1, max_count + 1):\n                    if i + k * w <= m:\n                        dp[i + k * w] = max(dp[i + k * w], best_remainder[r] + prefix[k])\n    \n    print(dp[m])\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 485,
        "completion_token_count": 595,
        "thoughts_token_count": 0
    }
}