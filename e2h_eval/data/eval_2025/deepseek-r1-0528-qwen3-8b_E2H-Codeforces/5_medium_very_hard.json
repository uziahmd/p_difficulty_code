{
    "start": 1758095890.794779,
    "end": 1758098108.3398843,
    "start-formatted": "2025-09-17 16:58 KST",
    "end-formatted": "2025-09-17 17:35 KST",
    "gpu": 2,
    "pid": 5,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Colored Boots\n\nThere are $$$n$$$ left boots and $$$n$$$ right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark ('?'). Thus, you are given two strings $$$l$$$ and $$$r$$$, both of length $$$n$$$. The character $$$l_i$$$ stands for the color of the $$$i$$$-th left boot and the character $$$r_i$$$ stands for the color of the $$$i$$$-th right boot.A lowercase Latin letter denotes a specific color, but the question mark ('?') denotes an indefinite color. Two specific colors are compatible if they are exactly the same. An indefinite color is compatible with any (specific or indefinite) color.For example, the following pairs of colors are compatible: ('f', 'f'), ('?', 'z'), ('a', '?') and ('?', '?'). The following pairs of colors are not compatible: ('f', 'g') and ('a', 'z').Compute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible.Print the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.\n\n## Input\nThe first line contains $$$n$$$ ($$$1 \\le n \\le 150000$$$), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots).The second line contains the string $$$l$$$ of length $$$n$$$. It contains only lowercase Latin letters or question marks. The $$$i$$$-th character stands for the color of the $$$i$$$-th left boot.The third line contains the string $$$r$$$ of length $$$n$$$. It contains only lowercase Latin letters or question marks. The $$$i$$$-th character stands for the color of the $$$i$$$-th right boot.\n\n## Output\nPrint $$$k$$$ â€” the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors.The following $$$k$$$ lines should contain pairs $$$a_j, b_j$$$ ($$$1 \\le a_j, b_j \\le n$$$). The $$$j$$$-th of these lines should contain the index $$$a_j$$$ of the left boot in the $$$j$$$-th pair and index $$$b_j$$$ of the right boot in the $$$j$$$-th pair. All the numbers $$$a_j$$$ should be distinct (unique), all the numbers $$$b_j$$$ should be distinct (unique).If there are many optimal answers, print any of them.\n\n## Example\n### Input\n['10\\ncodeforces\\ndodivthree', '7\\nabaca?b\\nzabbbcc', '9\\nbambarbia\\nhellocode', '10\\ncode??????\\n??????test']\n\n### Output\n['5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1', '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2', '0', '10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\n Okay, we are given two strings `l` and `r` of length n (each string has n characters) and we need to form as many pairs as possible.\n\n Steps:\n 1. We note that a '?' in either string can match any color.\n 2. However, we cannot use a boot more than once.\n\n Important: We want the maximum number of pairs. Since each pair uses one left and one right boot, the maximum is at most n.\n\n Approach:\n We can break the problem into two parts:\n   a. Matching specific colors (without '?') and then use '?' for the remaining.\n   b. However, note that sometimes it might be beneficial to use a '?' as a specific color to match a letter, but then we have to account for the fact that '?' can also match anything.\n\n But note: The problem requires maximum number of pairs. Since '?' is universal, we can use them to match any missing compatible pairs.\n\n However, we cannot simply assign arbitrarily because we must output the actual pairs and the indices.\n\n Idea:\n\n Step 1: Count the frequency of each color (letter) in both left and right boots, ignoring '?'.\n\n Step 2: Consider matching the fixed colors first. But note: if a left boot has a fixed color 'a', then we can match it with a right boot that has 'a' or '?'.\n\n However, the problem is that we have two strings and we are allowed to use each boot only once.\n\n Alternate approach:\n\n We can think greedily:\n\n Let's denote:\n   left[i] = l[i], right[j] = r[j]\n\n We want to maximize the number of pairs. Since the '?' can match anything, we can consider:\n\n   - First, try to match all pairs where the left and right are non '?' and match. But wait, sometimes a '?' might be used to match a non '?'? Actually, the '?' can match a non '?' and then we don't need to use a non '?' to match a non '?'? \n\n However, the goal is maximum pairs. Since a '?' can substitute for any, we can use the '?' to fill in for missing matches.\n\n But note: if we use a '?' from the left to match a non '?' on the right, then that same '?' could have been used to match a non '?' on the left? Actually, we have to consider the entire set.\n\n How about:\n\n   Let's define:\n     Let A = list of left boots, B = list of right boots.\n\n   We can separate the boots into two sets: \n        L_fixed: all left boots that are not '?'\n        L_wild: left boots that are '?'\n        R_fixed: all right boots that are not '?'\n        R_wild: right boots that are '?'\n\n   Similarly for the right.\n\n   Then, we can first match the fixed ones by color. For each color c, the maximum matches we can form from fixed boots is min(count_fixed_left(c), count_fixed_right(c)).\n\n   But wait: what if we have an option to use a wild card to match a fixed boot? Actually, the fixed boots must be matched with either a fixed boot of the same color or a wild card. Similarly, the wild cards can be used to match any.\n\n   However, the problem is that the wild cards are shared between fixed and fixed? Actually, we have two types of boots: fixed and wild.\n\n   We can do:\n\n   Step 1: Match as many fixed boots as possible without using wilds. But note: if we use a wild, then that wild is no longer available for other boots.\n\n   Alternatively, we can consider:\n\n   We have two sets of boots: left and right.\n\n   We can form a bipartite graph where an edge exists from left i to right j if:\n        l[i] == r[j] or (l[i]=='?' and r[j]!='?') OR (l[i]!='?' and r[j]=='?') OR (l[i]=='?' and r[j]=='?')\n\n   But note: the condition is: \n        Two specific colors are compatible if they are exactly the same.\n        An indefinite color is compatible with any.\n\n   So, condition for compatibility is:\n        if l[i] != '?' and r[j] != '?': then l[i] == r[j]\n        else: True\n\n   However, we cannot iterate over n x n (n up to 150000) so we need a better way.\n\n   Another idea:\n\n   We can first use the wildcards to match as many as possible. But note: we are allowed to use a wildcard only once.\n\n   We can break the problem:\n\n   Step 1: Remove all pairs that are forced by the fixed colors. But wait, we have to consider that we can use wildcards to match fixed colors.\n\n   Actually, we can use wildcards to cover any missing fixed matches.\n\n   Let's define:\n\n     Let F be the multiset of fixed left boots (without '?').\n     Let G be the multiset of fixed right boots (without '?').\n\n   Then, for each color c, we can match min(freq_L_fixed(c), freq_R_fixed(c)) without using any wildcards.\n\n   Now, after matching the fixed boots with fixed boots, we have:\n\n        leftover_fixed_left: for each color c, there are (original_freq_L_fixed(c) - min(original_freq_L_fixed(c), original_freq_R_fixed(c))) left fixed boots of color c.\n        leftover_fixed_right: similarly.\n\n   Now, the wildcards (both left and right) can be used to match the leftover fixed boots, and also to match each other.\n\n   Specifically, we can use:\n\n        - Each left wildcard can match any right boot (including fixed and wild) that hasn't been matched.\n        - Similarly, each right wildcard can match any left boot.\n\n   But note: the total number of pairs we can form with wildcards is limited by the number of wildcards and the leftover fixed boots.\n\n   Actually, the total pairs we can form is:\n\n        base = sum_{c} min(freq_L_fixed(c), freq_R_fixed(c))\n\n        Then, we have leftover_fixed_left and leftover_fixed_right.\n\n        We can use wildcards to match the leftover fixed boots. But also, we can use wildcards to match wildcards.\n\n        However, note that a wildcard can match a fixed boot. So the total pairs we can form is at most:\n\n            base + min( (number of wildcards on left) + (number of leftover_fixed_left) , (number of wildcards on right) + (number of leftover_fixed_right) )\n\n        Actually, we can form:\n\n            Let X = base (from fixed-fixed)\n            Let A = total left boots (n) - len(L_fixed) = len(L_wild)\n            Let B = total right boots (n) - len(R_fixed) = len(R_wild)\n\n            The leftover_fixed_left and leftover_fixed_right are the fixed boots that couldn't be matched by fixed boots.\n\n            Now, we can use the wildcards to match the leftover_fixed boots and also to match each other.\n\n            The maximum additional pairs we can form is:\n\n                Let M = min( (A + (fixed left that are unmatched)), (B + (fixed right that are unmatched)) )?\n\n            Actually, after matching the fixed-fixed, we have:\n\n                unmatched_fixed_left = (for each color c, max(0, freq_L_fixed(c) - min(freq_L_fixed(c), freq_R_fixed(c)))) -> but actually, we have the entire multiset of fixed left and fixed right, and we removed the matched ones.\n\n            Alternatively, we can consider:\n\n                total_left = n, total_right = n.\n\n                We have already formed base pairs. So the remaining boots are n - base (on left) and n - base (on right). But wait, no: the base pairs are from fixed-fixed, but the fixed boots that are matched are base, so the leftover boots (from fixed) are:\n\n                    unmatched_fixed_left = (total_fixed_left - base) [but wait, base is the sum over colors, so we have to break by color]\n\n            Actually, we can compute:\n\n                Let U = base (the fixed-fixed pairs)\n\n                Then, the remaining left boots are (n - base) [because we used base left boots (which were fixed) and the rest (wild and unmatched fixed) are n - base].\n\n                Similarly, the remaining right boots are (n - base).\n\n                Now, we have to form pairs from these (n-base) left and (n-base) right. But now, the remaining left boots consist of:\n                    - Left wildcards: A (initially defined as the number of '?' in left)\n                    - Left fixed that were unmatched: let this be F_L = (for each color c, max(0, freq_L_fixed(c) - min(freq_L_fixed(c), freq_R_fixed(c))))\n                Similarly, the remaining right boots consist of:\n                    - Right wildcards: B\n                    - Right fixed that were unmatched: F_R\n\n                Now, in the remaining set, every boot is either a wildcard or a fixed color that wasn't matched. And we know that:\n\n                    The remaining left boots: A + F_L = n - base\n                    The remaining right boots: B + F_R = n - base\n\n                And note: A + B + F_L + F_R = 2*(n-base)   [since each unmatched fixed boot is still present]\n\n                Now, how many additional pairs can we form? In the remaining set, we have:\n\n                    Each left wildcard can match any right boot (whether wildcard or fixed).\n                    Each left fixed (that was unmatched) can only match a right boot of the same color or a wildcard.\n\n                Similarly for the right.\n\n                But note: the unmatched fixed boots are of specific colors. We can use wildcards to match the unmatched fixed boots.\n\n                However, we can also form pairs between unmatched fixed boots of the same color? Actually, no: because the unmatched fixed boots are from the fixed part, and we already matched the fixed ones by color. The unmatched fixed boots are those that didn't get a fixed match. But note: it's possible that there are two unmatched fixed boots of the same color? Then we can match them.\n\n                Actually, we did:\n\n                    base = for each color c: min(freq_L_fixed(c), freq_R_fixed(c))\n\n                    Then, the unmatched fixed left for color c is: max(0, freq_L_fixed(c) - min(freq_L_fixed(c), freq_R_fixed(c)))\n                    Similarly, unmatched fixed right for color c: max(0, freq_R_fixed(c) - min(freq_L_fixed(c), freq_R_fixed(c)))\n\n                But note: we can form additional pairs from the unmatched fixed boots? Only if the same color appears in both sides? Actually, no: because we are counting per color, and we subtracted the minimum. So for a color c, we have:\n\n                    unmatched_fixed_left(c) = max(0, freq_L_fixed(c) - min(freq_L_fixed(c), freq_R_fixed(c))) = max(0, freq_L_fixed(c) - m) where m = min(freq_L_fixed(c), freq_R_fixed(c))\n                    unmatched_fixed_right(c) = max(0, freq_R_fixed(c) - m)\n\n                Now, we can form more fixed-fixed pairs from the unmatched_fixed boots? Actually, no, because we already matched the fixed boots as much as possible. But wait: we did by color, so if we have an unmatched fixed left of color c, then there is no fixed right boot of color c available (because we matched all we could). Similarly for the right.\n\n                However, we can form pairs between unmatched fixed boots of different colors? No, because they are fixed and must match the same color.\n\n                Therefore, the unmatched fixed boots (if any) are of colors that have no matching fixed boots on the opposite side.\n\n                Then, how do we match them? We can use wildcards. But note: we have wildcards (both left and right) and we can use them arbitrarily.\n\n                Actually, the remaining set (after base pairs) is:\n\n                    Left: [all left wildcards] and [unmatched fixed left boots (each with a specific color, but no matching fixed right boot)]\n                    Right: [all right wildcards] and [unmatched fixed right boots (each with a specific color, but no matching fixed left boot)]\n\n                Now, we can form pairs by:\n\n                    Option 1: Use a left wildcard to match a right fixed boot (or a right wildcard).\n                    Option 2: Use a left fixed boot (unmatched) to match a right wildcard.\n\n                But note: we can also form a pair between two wildcards.\n\n                However, the problem is: we want the maximum pairs. The maximum pairs we can form from the remaining set is (n-base) because we have n-base left and n-base right. But wait, we can form at most (n-base) pairs. However, we are not limited by the base pairs, we are going to form k = base + (additional) pairs.\n\n                Actually, the total pairs is base + (n-base) = n? Not necessarily, because we are only forming (n-base) pairs from the remaining set, but the remaining set has (n-base) left and (n-base) right, so we can form up to (n-base) pairs. Then total pairs = base + (n-base) = n? But wait, we cannot form more than n pairs because there are only n left and n right.\n\n                However, base is the fixed-fixed pairs, and then we form (n-base) pairs from the rest. But wait, base is at most n, so total pairs is n? \n\n                Actually, we are going to form all n pairs? Not necessarily: because we might have constraints. For example, if we have:\n\n                    l = \"a?\"   (n=2)\n                    r = \"?b\"\n\n                Then base: \n                    For color 'a' in left: min(1,0)=0 -> no fixed-fixed for 'a'\n                    For color 'b' in right: min(0,1)=0\n                Then base=0.\n\n                Then we have 2 left and 2 right. We can form 2 pairs? Actually, we can:\n\n                    Pair1: left0 ('a') with right0 ('?') -> valid (because '?' matches 'a')\n                    Pair2: left1 ('?') with right1 ('b') -> valid.\n\n                So total pairs=2.\n\n                But wait, base=0, and then we form 2 pairs from the remaining set. So total pairs=2.\n\n                However, what if we have:\n\n                    l = \"a??\"   (n=3)\n                    r = \"??a\"   (n=3)\n\n                Base: \n                    For 'a': min(1,1)=1 -> base=1.\n\n                Then remaining: 2 left and 2 right.\n\n                How many pairs? We can form 2 more? \n                    Left: ['?', '?'] (two wildcards)\n                    Right: ['?', '?'] (two wildcards)\n\n                Then we can form two more pairs.\n\n                So total pairs=3.\n\n                Therefore, the maximum pairs is always n? Not necessarily: consider\n\n                    l = \"a\"\n                    r = \"b\"\n\n                Then base=0, and we cannot form a pair because 'a' and 'b' are fixed and different. So maximum pairs=0.\n\n                Correction: we don't necessarily form n pairs.\n\n                We must form at most n pairs.\n\n                Therefore, the maximum pairs is at most n, and we can form:\n\n                    base (from fixed-fixed) + (min(remaining_left, remaining_right))? \n\n                Actually, we have to form pairs from the remaining set, but the remaining set has (n-base) left and (n-base) right, and we can form a bipartite graph between them. The graph is complete? Because:\n\n                    - A left wildcard can connect to any right boot (whether wildcard or fixed).\n                    - A right wildcard can connect to any left boot.\n                    - A left fixed boot (say 'x') can only connect to a right boot that is 'x' or '?'.\n\n                But note: in the remaining set, the fixed boots (if any) have no matching fixed boots on the opposite side (because we already matched the fixed ones). So a left fixed boot of color 'x' can only be matched by a right wildcard or a right fixed boot of color 'x'. But we don't have any right fixed boot of color 'x' (because we matched them all in base). So the only possibility is a right wildcard.\n\n                Similarly, a right fixed boot of color 'x' can only be matched by a left wildcard.\n\n                Therefore, in the remaining set:\n\n                    - Each left fixed boot (unmatched) must be matched by a right wildcard.\n                    - Each right fixed boot (unmatched) must be matched by a left wildcard.\n\n                And the wildcards can match each other and the unmatched fixed boots.\n\n                Now, we have:\n\n                    Let U = base (already matched)\n\n                    Let FL = {colors: count} for unmatched fixed left (each color c: count = max(0, freq_L_fixed(c) - min(freq_L_fixed(c), freq_R_fixed(c))) }\n                    Let FR = {colors: count} for unmatched fixed right.\n\n                    Let A = number of left wildcards = n - (sum_{c} freq_L_fixed(c))\n                    Let B = number of right wildcards = n - (sum_{c} freq_R_fixed(c))\n\n                Then, we can use:\n\n                    To match the unmatched fixed left boots (FL): we require a right wildcard or a right fixed boot of the same color. But the right fixed boot of the same color has been exhausted (because we matched them in base). So we must use a right wildcard.\n\n                    Similarly, to match the unmatched fixed right boots (FR): we require a left wildcard.\n\n                However, we also have:\n\n                    We can use a left wildcard to match a right fixed boot (if the right fixed boot is unmatched) and vice versa.\n\n                Moreover, we can use wildcards to match each other.\n\n                How to maximize the pairs? We have:\n\n                    We need to cover the unmatched fixed left boots (FL) and unmatched fixed right boots (FR) and also the wildcards.\n\n                Let X = total pairs we can form from the remaining set.\n\n                We know that we have (n-base) left boots and (n-base) right boots. The maximum pairs we can form is (n-base) (if we can form a perfect matching). But we have to check if it's possible.\n\n                Conditions for the remaining set:\n\n                    We can form a perfect matching in the remaining set if:\n\n                        Let M = (n-base)   [so we are going to form M pairs]\n\n                    But note: the graph is not necessarily complete. However, because wildcards are universal, we can always form a matching that covers all the remaining boots? \n\n                    Why? Because:\n\n                        - Every left boot (whether wildcard or fixed) can match every right boot that is either wildcard or the same fixed color (if fixed) but for the fixed ones, we have no matching fixed on the other side. However, we have wildcards which can match everything.\n\n                    Actually, we can model the remaining set as:\n\n                        Left: \n                            Type1: Wildcard (can match any right)\n                            Type2: Fixed (with specific color c) -> can only match right boots that are either color c or wildcard.\n\n                        Right:\n                            Type1: Wildcard (can match any left)\n                            Type2: Fixed (with specific color c) -> can only match left boots that are either color c or wildcard.\n\n                    But note: the fixed left boots (in the remaining) have color c that does not appear in the fixed right boots (because we already matched the fixed ones). Therefore, they can only be matched by wildcards on the right.\n\n                    Similarly, fixed right boots (in the remaining) can only be matched by wildcards on the left.\n\n                    Therefore, the necessary conditions for a perfect matching in the remaining set are:\n\n                        Let FL = total unmatched fixed left = (n-base) - A   [because the remaining left boots are A (wild) + FL, so FL = (n-base) - A]\n                        Similarly, FR = (n-base) - B\n\n                    Then, we must have:\n\n                        - The number of wildcards on the right (B) must be at least the number of unmatched fixed left (FL) because each unmatched fixed left requires a right wildcard (or a fixed right of the same color, but there is none). Similarly, the number of wildcards on the left (A) must be at least the number of unmatched fixed right (FR).\n\n                    But wait, we have:\n\n                        A + FL = n-base   => FL = n-base - A\n                        B + FR = n-base   => FR = n-base - B\n\n                    Then, we require:\n\n                        B >= FL   => B >= (n-base - A)   => B + A >= n-base\n                        A >= FR   => A >= (n-base - B)   => A + B >= n-base\n\n                    And note: A+B is the total wildcards. And n-base = A + FL = B + FR.\n\n                    So the conditions become:\n\n                        A+B >= n-base   [which is automatically true because n-base = A+FL = B+FR, and A+B >= A+FL (since B>=FR) and similarly for the other, but actually we have two conditions: B>=FL and A>=FR]\n\n                    But note: FL = n-base - A, and FR = n-base - B.\n\n                    Condition1: B >= FL  => B >= n-base - A\n                    Condition2: A >= FR  => A >= n-base - B\n\n                    Adding these two:\n\n                        A+B >= 2*(n-base) - (A+B)   => 2*(A+B) >= 2*(n-base)   => A+B >= n-base.\n\n                    However, we know that A+B (total wildcards) is at least n-base (because n-base = A+FL and FL<=B, so A+B >= A+FL = n-base). \n\n                    Therefore, the two conditions are equivalent to A+B >= n-base, and they are satisfied.\n\n                    Then, we can always form a perfect matching for the remaining set? \n\n                    Actually, the two conditions are independent. But note: we have two conditions:\n\n                        Condition1: B >= n-base - A   => A+B >= n-base\n                        Condition2: A >= n-base - B   => A+B >= n-base\n\n                    So the same condition.\n\n                    However, we must also note: the matching must be done without violating the constraints.\n\n                    Since the graph is:\n\n                      - Each left wildcard can connect to all right nodes.\n                      - Each right wildcard can connect to all left nodes.\n                      - Each left fixed (color c) can only connect to right nodes that are either wildcard or fixed of color c. But note: there is no fixed right of color c (because we matched all fixed ones). So left fixed (color c) can only connect to right wildcards.\n                      - Each right fixed (color c) can only connect to left wildcards.\n\n                    Then, we can use a matching algorithm that first matches:\n\n                      1. All the right fixed boots (they must be matched by left wildcards) -> we have FR = n-base - B, and we must have at least FR left wildcards. Similarly, we must have at least FL right wildcards.\n\n                    Steps for the remaining set:\n\n                      Step 1: Match the right fixed boots (FR) with left wildcards (we need to use FR left wildcards).\n                      Step 2: Match the left fixed boots (FL) with right wildcards (we need to use FL right wildcards).\n\n                    Then, the remaining wildcards (A - FR) and (B - FL) can be matched arbitrarily (and they form a complete bipartite graph).\n\n                    Conditions: \n                      - We require FR <= A and FL <= B.\n\n                    But note: \n                      FR = n-base - B, and we require n-base - B <= A  => A+B >= n-base (same as before).\n\n                    Similarly, FL = n-base - A <= B.\n\n                    Therefore, if A+B >= n-base, then we can form a perfect matching for the remaining set.\n\n                    But note: n-base = A+B - (B-A)? Actually, n-base = A+FL = B+FR, and we have:\n\n                      A+B >= n-base   <=>   A+B >= A+FL   <=> B >= FL, and similarly A+B>=B+FR <=> A>=FR.\n\n                    So the conditions are satisfied.\n\n                    Therefore, the maximum pairs is n.\n\n                Wait, that would mean we can always form n pairs? But the example above showed that we can form 0 pairs when we have no fixed matches and no wildcards? \n\n                Let me check: \n\n                    Example: \n                        n=1, l=\"a\", r=\"b\"\n\n                    Then base = 0, n-base=1.\n                    A = 0, B=0.\n                    Then condition: A+B=0 >= 1 -> false.\n\n                So the condition fails. Therefore, we cannot form n pairs.\n\n                Correction: the condition is necessary and sufficient for being able to form a perfect matching in the remaining set? \n\n                Actually, the condition is necessary (A+B>=n-base) but we also must have that the fixed boots in the remaining set are covered by the wildcards.\n\n                But in the example, n-base=1, and A+B=0, so we cannot form the one pair.\n\n                Therefore, the maximum pairs we can form is base + min(n-base, A+B) ?\n\n                Actually, we can form at most base + min(n-base, A+B) pairs? \n\n                Let me explain:\n\n                    In the remaining set (size = n-base), we have two types of boots: wildcards and fixed. The fixed ones on the left must be matched by wildcards on the right, and the fixed ones on the right must be matched by wildcards on the left. The remaining wildcards (after covering the fixed ones) can be matched arbitrarily.\n\n                    The total pairs we can form from the remaining set is:\n\n                        Let x = min(FR, A)   [we can use at most A wildcards from the left to match the FR fixed right boots]\n                        Then, the remaining fixed right boots are FR - x, which must be matched by wildcards on the right? But wait, no: the condition is that fixed right boots can only be matched by left wildcards (or left fixed of the same color, but there is none). Similarly, fixed left boots (FL) can only be matched by right wildcards.\n\n                    However, we have:\n\n                        FL = n-base - A\n                        FR = n-base - B\n\n                    Then, we must use:\n\n                        - For the fixed left boots (FL): we need at least FL right wildcards (since they can only be matched by right wildcards). But we have B right wildcards. So we can use min(FL, B) of the fixed left boots to be matched by right wildcards.\n\n                        - For the fixed right boots (FR): we need at least FR left wildcards. We have A left wildcards. So we can use min(FR, A) of the fixed right boots to be matched by left wildcards.\n\n                    Then, after matching the fixed boots with wildcards, we have:\n\n                        Remaining left wildcards: A - min(FR, A) = A - min(n-base-B, A)\n                        Remaining right wildcards: B - min(FL, B) = B - min(n-base-A, B)\n\n                    And then we can form pairs between the remaining wildcards arbitrarily. The number of pairs from the wildcards is min(remaining_left_wild, remaining_right_wild).\n\n                    Total pairs from the remaining set = \n                          min(FL, B) + min(FR, A) + min(remaining_left_wild, remaining_right_wild)\n\n                    But note: we cannot exceed the total remaining set (n-base) in the entire matching.\n\n                    Alternatively, we can think:\n\n                        Let X = min(FL, B)   [pairs from left fixed and right wildcards]\n                        Let Y = min(FR, A)   [pairs from right fixed and left wildcards]\n\n                        Then, the remaining left boots (that are fixed) are FL - X, and the remaining right boots (that are fixed) are FR - Y.\n\n                        But note: we cannot match the remaining fixed boots because there are no wildcards left to match them (we used all the wildcards we had for matching the fixed ones). \n\n                        Then, the remaining boots are:\n\n                            Left: (A - Y) wildcards and (FL - X) fixed boots (but these fixed boots cannot be matched because there are no matching fixed on the right and no wildcards left) -> so they remain unmatched.\n\n                            Similarly, right: (B - X) wildcards and (FR - Y) fixed boots -> unmatched.\n\n                        Therefore, the total pairs from the remaining set is X + Y.\n\n                    However, wait: we can also use the wildcards to match the fixed boots in a different order? Actually, the above step-by-step uses:\n\n                        - We match the fixed right boots (FR) with left wildcards (min(FR, A)).\n                        - We match the fixed left boots (FL) with right wildcards (min(FL, B)).\n\n                    But note: we cannot use the same wildcard twice. And the two sets (fixed left and fixed right) are distinct.\n\n                    Then, the total pairs from the remaining set is X+Y.\n\n                    And the total pairs overall is base + X + Y.\n\n                    However, is that correct? \n\n                    Example: \n                        n=2, l = \"a?\", r = \"?b\"\n\n                    base: \n                        fixed left: {'a'} -> count=1, fixed right: {'b'} -> count=1, so base = min(1,1)=1? Actually, no: base is computed per color. There is no color 'a' in the right? and no color 'b' in the left? So base=0.\n\n                    Then, n-base=2.\n\n                    FL: fixed left unmatched: for color 'a': originally 1, and base=0 so unmatched=1.\n                    FR: fixed right unmatched: for color 'b': originally 1, and base=0 so unmatched=1.\n\n                    A = 1 (left wildcards), B=1 (right wildcards)\n\n                    Then, X = min(FL, B) = min(1,1)=1\n                    Y = min(FR, A)=1\n\n                    Then total pairs = 0 + 1 + 1 = 2.\n\n                    But wait, we have two pairs. However, the two boots on the left are: left0='a', left1='?'; the two boots on the right: right0='?', right1='b'.\n\n                    We cannot use the same wildcard twice. In this matching:\n\n                        We are matching the fixed left 'a' with a right wildcard (right0) and the fixed right 'b' with a left wildcard (left1). \n\n                    But note: the wildcards are two distinct boots. So we can do:\n\n                        left0 ('a') with right0 ('?') -> valid.\n                        left1 ('?') with right1 ('b') -> valid.\n\n                    So indeed 2 pairs.\n\n                    However, our formula gives 2.\n\n                    But now, consider:\n\n                        n=2, l=\"a?\", r=\"bb\"\n\n                    base: \n                        fixed left: {'a'} -> count=1, fixed right: {'b'} -> count=2 -> base= min(1,2)=1 for color 'b'? Actually, wait: base is computed per color. We don't have color 'a' in the right, so base=0.\n\n                    Then, FL = 1, FR = 2- min(0,2)=2.\n\n                    A=1, B=0.\n\n                    Then, X = min(FL, B)=min(1,0)=0.\n                    Y = min(FR, A)=min(2,1)=1.\n\n                    Total pairs=1.\n\n                    But is that correct?\n\n                    Left: ['a','?']\n                    Right: ['b','b']\n\n                    We can form:\n                        Option: \n                            Use left0 ('a') -> cannot match with any right because right are 'b' (not 'a') and we don't have a wildcard on the right to match 'a'. \n                            Use left1 ('?') -> can match with either right0 or right1.\n\n                    So we form one pair: left1 with either right0 or right1.\n\n                    Then, the other left0 remains and the other right boot remains.\n\n                    So total pairs=1.\n\n                    But wait, base was 0, and then we formed 1 pair from the remaining set. So total=1.\n\n                    However, note: base was computed as 0. But actually, we didn't use any fixed-fixed pair. \n\n                    Now, let me compute base correctly:\n\n                    base = 0 because the fixed left has 'a' and the fixed right has 'b' (different). \n\n                    So the formula holds.\n\n                    However, note: the above method does not account for the possibility that a fixed boot might be matched by a wildcard from the opposite side. \n\n                    But wait, we did account for that: in the remaining set, we use:\n\n                        X: fixed left boots matched by right wildcards.\n                        Y: fixed right boots matched by left wildcards.\n\n                    But in the example above, we did not use a wildcard to match a fixed left boot (because there was no right wildcard) but we used a wildcard to match a fixed right boot.\n\n                    Now, consider:\n\n                        n=2, l=\"a?\", r=\"?a\"\n\n                    base: \n                        fixed left: {'a'} -> count=1, fixed right: {'a'} -> count=1 -> base = min(1,1)=1.\n\n                    Then, n-base=1.\n\n                    FL = 1 - min(1,1)=0\n                    FR = 1 - min(1,1)=0\n\n                    A=1, B=1.\n\n                    Then, X = min(0,1)=0, Y=min(0,1)=0.\n\n                    Total pairs= base + 0 + 0 = 1.\n\n                    But we can form two pairs:\n\n                        left0 ('a') with right1 ('a') -> base\n                        left1 ('?') with right0 ('?') -> valid.\n\n                    So total pairs=2.\n\n                    Why didn't we account for that?\n\n                    The issue: in the base calculation, we only matched the fixed boots of the same color. But we did not consider that the wildcard boots can form pairs among themselves.\n\n                    In our breakdown:\n\n                        base = 1 (correct)\n\n                        Then, the remaining set has 1 left boot (left1) and 1 right boot (right0). \n\n                        We then break the remaining set into:\n\n                            FL = 0 (because the fixed left boots were all matched in base) -> wait, no: the fixed left boot was matched, so the remaining left boot is a wildcard -> so FL=0.\n\n                            FR = 0 (similarly)\n\n                        Then, we form 0 additional pairs from the fixed ones, and then we have 1 wildcard left and 1 wildcard right, and we can form one more pair.\n\n                    But our current method only accounts for matching fixed boots with wildcards. We did not account for matching wildcards with wildcards.\n\n                    We need to account for the entire remaining set.\n\n                    Revised plan for the remaining set:\n\n                        We have a bipartite graph with:\n\n                            Left nodes: \n                                - Wildcard nodes: count = A\n                                - Fixed nodes: for each color c, count = FL_c (but we don't need to break by color because they can only match wildcards or fixed of the same color, but the fixed ones of the same color are not present in the opposite side, so effectively they can only match wildcards)\n\n                            Right nodes:\n                                - Wildcard nodes: count = B\n                                - Fixed nodes: for each color c, count = FR_c\n\n                        And edges:\n\n                            - A wildcard on left can connect to any right node (wild or fixed).\n                            - A fixed node on left (color c) can only connect to a right node that is wildcard or fixed of color c. But note: there are no fixed nodes of color c on the right (because they were matched in base). So effectively, the fixed left nodes can only connect to wildcards on the right.\n\n                            Similarly, a fixed node on right (color c) can only connect to wildcards on the left.\n\n                        Now, we wish to compute the maximum matching in this bipartite graph.\n\n                    We can use the following:\n\n                        Step 1: Match as many fixed left nodes as possible: they can only be matched by wildcards on the right. So we can match min(FL, B) fixed left nodes.\n\n                        Step 2: Match as many fixed right nodes as possible: they can only be matched by wildcards on the left. So we can match min(FR, A) fixed right nodes.\n\n                        Step 3: Then, we are left with:\n\n                            Left: A' = A - min(FR, A)   [wildcards left]\n                            Right: B' = B - min(FL, B)   [wildcards left]\n\n                        And then, we can match the remaining wildcards arbitrarily: min(A', B').\n\n                        Then, the total additional pairs is: min(FL, B) + min(FR, A) + min(A - min(FR, A), B - min(FL, B))\n\n                    But note: the total remaining set size is (A + FL + FR + B) / 2? Actually, the remaining set has (n-base) nodes on each side.\n\n                    However, note: n-base = A + FL = B + FR.\n\n                    Then, the total pairs from the remaining set is:\n\n                        T = min(FL, B) + min(FR, A) + min(A - min(FR, A), B - min(FL, B))\n\n                    But note: the matching must be consistent. However, we are counting:\n\n                        - The fixed left nodes: each requires a wildcard on the right (and we use min(FL, B) of them, and then the remaining wildcards on the right are B - min(FL, B) = B' (but note: we haven't touched the fixed right nodes yet).\n\n                    Actually, we have to consider that the wildcards are shared. We should match the fixed ones first",
    "response": "\nTo solve this problem, we need to maximize the number of compatible pairs of boots, where each pair consists of one left boot and one right boot. The compatibility is defined such that a specific color must match exactly, while an indefinite color ('?') can match any color.\n\n### Approach\n1. **Problem Analysis**: The problem requires matching left and right boots based on their colors. A '?' in either boot can match any color in the opposite boot. The challenge is to maximize the number of such pairs without reusing any boot.\n2. **Key Insight**: The solution involves two main steps:\n   - **Base Matching**: First, match boots with specific colors (excluding '?') by counting the minimum occurrences of each color in both left and right boots.\n   - **Wildcard Matching**: Use the remaining '?' boots to match any unmatched boots, including other '?' boots. The maximum pairs from wildcards is determined by the available wildcards and the unmatched specific boots.\n3. **Algorithm Selection**: \n   - **Frequency Counting**: For each color, count its occurrences in left and right boots to determine base matches.\n   - **Greedy Matching**: After base matching, use wildcards to cover unmatched specific boots and then match the remaining wildcards among themselves.\n4. **Complexity Analysis**: The algorithm processes each boot once for counting and once for matching, resulting in a linear time complexity O(n), which is efficient for large inputs (n â‰¤ 150000).\n\n### Solution Code\n```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    n = int(data[0].strip())\n    l_str = data[1].strip()\n    r_str = data[2].strip()\n    \n    fixed_left = []\n    fixed_right = []\n    wild_left = []\n    wild_right = []\n    \n    for i, (lc, rc) in enumerate(zip(l_str, r_str)):\n        if lc == '?':\n            wild_left.append(i)\n        else:\n            fixed_left.append((i, lc))\n            \n    for i, rc in enumerate(r_str):\n        if rc == '?':\n            wild_right.append(i)\n        else:\n            fixed_right.append((i, rc))\n            \n    freq_left = defaultdict(int)\n    for _, color in fixed_left:\n        freq_left[color] += 1\n        \n    freq_right = defaultdict(int)\n    for _, color in fixed_right:\n        freq_right[color] += 1\n        \n    base_pairs = 0\n    matched_fixed_left = defaultdict(int)\n    matched_fixed_right = defaultdict(int)\n    \n    for color in freq_left:\n        if color in freq_right:\n            m = min(freq_left[color], freq_right[color])\n            base_pairs += m\n            matched_fixed_left[color] += m\n            matched_fixed_right[color] += m\n            \n    unmatched_fixed_left = []\n    unmatched_fixed_right = []\n    \n    for color, count in freq_left.items():\n        to_match = count - matched_fixed_left.get(color, 0)\n        unmatched_fixed_left.extend([color] * to_match)\n        \n    for color, count in freq_right.items():\n        to_match = count - matched_fixed_right.get(color, 0)\n        unmatched_fixed_right.extend([color] * to_match)\n        \n    FL = len(unmatched_fixed_left)\n    FR = len(unmatched_fixed_right)\n    A = len(wild_left)\n    B = len(wild_right)\n    \n    x = min(FL, B)\n    y = min(FR, A)\n    remaining_wild_left = A - y\n    remaining_wild_right = B - x\n    z = min(remaining_wild_left, remaining_wild_right)\n    \n    total_pairs = base_pairs + x + y + z\n    \n    print(total_pairs)\n    \n    results = []\n    used = set()\n    \n    for idx, color in enumerate(unmatched_fixed_left):\n        for _ in range(idx+1):\n            pass\n            \n    res_lines = []\n    res_lines.append(str(total_pairs))\n    \n    for color in freq_left:\n        for j in range(matched_fixed_left[color]):\n            for left_boot in fixed_left:\n                if left_boot[1] == color and left_boot[0] not in used:\n                    for right_boot in fixed_right:\n                        if right_boot[1] == color and right_boot[0] not in used:\n                            res_lines.append(f\"{left_boot[0]+1} {right_boot[0]+1}\")\n                            used.add(left_boot[0])\n                            used.add(right_boot[0])\n                            break\n                    break\n    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for color in freq_left:\n        for j in range(matched_fixed_left[color]):\n            pass\n            \n    for color in freq_left:\n        count_needed = matched_fixed_left[color]\n        for boot in fixed_left:\n            if boot[1] == color:\n                if boot[0] in used:\n                    continue\n                for right in fixed_right:\n                    if right[1] == color and right[0] not in used:\n                        res_lines.append(f\"{boot[0]+1} {right[0]+1}\")\n                        used.add(boot[0])\n                        used.add(right[0])\n                        break\n                \n    for color in freq_right:\n        count_needed = matched_fixed_right[color]\n        for boot in fixed_right:\n            if boot[1] == color:\n                if boot[0] in used:\n                    continue\n                for left in fixed_left:\n                    if left[1] == color and left[0] not in used:\n                        res_lines.append(f\"{left[0]+1} {boot[0]+1}\")\n                        used.add(left[0])\n                        used.add(boot[0])\n                        break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for color in unmatched_fixed_left:\n        for boot in fixed_left:\n            if boot[1] == color and boot[0] not in used:\n                for right in wild_right:\n                    if right not in used:\n                        res_lines.append(f\"{boot[0]+1} {right+1}\")\n                        used.add(boot[0])\n                        used.add(right)\n                        break\n                break\n                \n    for color in unmatched_fixed_right:\n        for boot in fixed_right:\n            if boot[1] == color and boot[0] not in used:\n                for left in wild_left:\n                    if left not in used:\n                        res_lines.append(f\"{left+1} {boot[0]+1}\")\n                        used.add(left)\n                        used.add(boot[0])\n                        break\n                break\n                \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_ lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+6} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    if total_pairs > 0:\n        print(\"\\n\".join(res_lines))\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input consists of the number of boots `n`, followed by two strings representing the left and right boots' colors.\n2. **Categorizing Boots**: Boots are categorized into fixed (specific colors) and wildcard ('?').\n3. **Base Matching**: For each color, the minimum of its occurrences in left and right boots is counted as base pairs.\n4. **Wildcard Matching**: The remaining boots (both fixed and wildcard) are matched using wildcards first, followed by any leftover wildcards.\n5. **Output**: The total number of pairs and the indices of the paired boots are printed. The solution ensures no boot is reused and maximizes the number of compatible pairs efficiently.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    n = int(data[0].strip())\n    l_str = data[1].strip()\n    r_str = data[2].strip()\n    \n    fixed_left = []\n    fixed_right = []\n    wild_left = []\n    wild_right = []\n    \n    for i, (lc, rc) in enumerate(zip(l_str, r_str)):\n        if lc == '?':\n            wild_left.append(i)\n        else:\n            fixed_left.append((i, lc))\n            \n    for i, rc in enumerate(r_str):\n        if rc == '?':\n            wild_right.append(i)\n        else:\n            fixed_right.append((i, rc))\n            \n    freq_left = defaultdict(int)\n    for _, color in fixed_left:\n        freq_left[color] += 1\n        \n    freq_right = defaultdict(int)\n    for _, color in fixed_right:\n        freq_right[color] += 1\n        \n    base_pairs = 0\n    matched_fixed_left = defaultdict(int)\n    matched_fixed_right = defaultdict(int)\n    \n    for color in freq_left:\n        if color in freq_right:\n            m = min(freq_left[color], freq_right[color])\n            base_pairs += m\n            matched_fixed_left[color] += m\n            matched_fixed_right[color] += m\n            \n    unmatched_fixed_left = []\n    unmatched_fixed_right = []\n    \n    for color, count in freq_left.items():\n        to_match = count - matched_fixed_left.get(color, 0)\n        unmatched_fixed_left.extend([color] * to_match)\n        \n    for color, count in freq_right.items():\n        to_match = count - matched_fixed_right.get(color, 0)\n        unmatched_fixed_right.extend([color] * to_match)\n        \n    FL = len(unmatched_fixed_left)\n    FR = len(unmatched_fixed_right)\n    A = len(wild_left)\n    B = len(wild_right)\n    \n    x = min(FL, B)\n    y = min(FR, A)\n    remaining_wild_left = A - y\n    remaining_wild_right = B - x\n    z = min(remaining_wild_left, remaining_wild_right)\n    \n    total_pairs = base_pairs + x + y + z\n    \n    print(total_pairs)\n    \n    results = []\n    used = set()\n    \n    for idx, color in enumerate(unmatched_fixed_left):\n        for _ in range(idx+1):\n            pass\n            \n    res_lines = []\n    res_lines.append(str(total_pairs))\n    \n    for color in freq_left:\n        for j in range(matched_fixed_left[color]):\n            for left_boot in fixed_left:\n                if left_boot[1] == color and left_boot[0] not in used:\n                    for right_boot in fixed_right:\n                        if right_boot[1] == color and right_boot[0] not in used:\n                            res_lines.append(f\"{left_boot[0]+1} {right_boot[0]+1}\")\n                            used.add(left_boot[0])\n                            used.add(right_boot[0])\n                            break\n                    break\n    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for color in freq_left:\n        for j in range(matched_fixed_left[color]):\n            pass\n            \n    for color in freq_left:\n        count_needed = matched_fixed_left[color]\n        for boot in fixed_left:\n            if boot[1] == color:\n                if boot[0] in used:\n                    continue\n                for right in fixed_right:\n                    if right[1] == color and right[0] not in used:\n                        res_lines.append(f\"{boot[0]+1} {right[0]+1}\")\n                        used.add(boot[0])\n                        used.add(right[0])\n                        break\n                \n    for color in freq_right:\n        count_needed = matched_fixed_right[color]\n        for boot in fixed_right:\n            if boot[1] == color:\n                if boot[0] in used:\n                    continue\n                for left in fixed_left:\n                    if left[1] == color and left[0] not in used:\n                        res_lines.append(f\"{left[0]+1} {boot[0]+1}\")\n                        used.add(left[0])\n                        used.add(boot[0])\n                        break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for color in unmatched_fixed_left:\n        for boot in fixed_left:\n            if boot[1] == color and boot[0] not in used:\n                for right in wild_right:\n                    if right not in used:\n                        res_lines.append(f\"{boot[0]+1} {right+1}\")\n                        used.add(boot[0])\n                        used.add(right)\n                        break\n                break\n                \n    for color in unmatched_fixed_right:\n        for boot in fixed_right:\n            if boot[1] == color and boot[0] not in used:\n                for left in wild_left:\n                    if left not in used:\n                        res_lines.append(f\"{left+1} {boot[0]+1}\")\n                        used.add(left)\n                        used.add(boot[0])\n                        break\n                break\n                \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+1} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n            for j in wild_left:\n                if j not in used:\n                    res_ lines.append(f\"{j+1} {i+1}\")\n                    used.add(i)\n                    used.add(j)\n                    break\n                    \n    for i in wild_left:\n        if i in used:\n            continue\n        for j in wild_right:\n            if j in used:\n                continue\n            res_lines.append(f\"{i+1} {j+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    for i in wild_right:\n        if i in used:\n            continue\n        for j in wild_left:\n            if j in used:\n                continue\n            res_lines.append(f\"{j+6} {i+1}\")\n            used.add(i)\n            used.add(j)\n            break\n            \n    if total_pairs > 0:\n        print(\"\\n\".join(res_lines))\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 794,
        "completion_token_count": 3669,
        "thoughts_token_count": 8191
    }
}