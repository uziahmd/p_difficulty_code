{
    "start": 1758294377.381158,
    "end": 1758296478.2567027,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:41 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n We are given n, h, m and then m lines of l, r, x.\n Since n, m <= 50, we can use a direct approach.\n\n However, note that we have multiple restrictions. Each restriction is a constraint on a contiguous segment [l_i, r_i] that the maximum height in that segment must be <= x_i.\n\n The goal is to assign to each spot i (from 1 to n) a height a_i in [0, h] such that for each restriction j: max{ a_i for i in [l_j, r_j] } <= x_j.\n\n And we wish to maximize the total profit = sum_{i=1}^{n} (a_i^2).\n\n Observation: The profit function is separable and convex (quadratic and increasing). Therefore, we might consider using dynamic programming or constraint propagation. But note that the constraints are on ranges and they are up to 50.\n\n Alternative idea: Since n and m are at most 50, we can try to use a DP that considers the constraints. However, the constraints are overlapping and the state space might be too large.\n\n Another idea: The problem is small (n=50, but also h=50, so we cannot iterate over 50^50 states). But note: the constraints are only 50, and we can think of the following:\n\n We can precompute the constraints for each position? Actually, we have to satisfy all restrictions. For a given spot i, the height a_i must be at most the minimum x_j such that i is in [l_j, r_j]. But note: if a restriction j does not cover i, then it doesn't impose a direct limit on i, but indirectly through other spots.\n\n However, the restrictions interact: the entire set of restrictions must be satisfied. The maximum height in a segment [l, r] must be <= x_j for each restriction j that covers [l, r]. This is a typical problem that can be solved by considering the most restrictive constraint for each segment.\n\n But note: we are allowed to set any height from 0 to h. The profit is the square of the height, so we want as high as possible, but we cannot exceed the constraints.\n\n Let's define:\n   Let A[i] be the height at position i.\n\n Constraints: For each restriction j (l_j, r_j, x_j), we require that the maximum A[i] for i from l_j to r_j is <= x_j.\n\n How to enforce all constraints? We can think of the following:\n\n Step 1: For each spot i, what is the maximum height we can assign to i? It must be at most h, and also it must not break any restriction that covers i. However, note that one spot might be covered by multiple restrictions and the constraint might come from a segment that includes other spots.\n\n Alternatively, we can use an iterative method: Initially, we set for each spot i, the maximum allowed height as h. Then, for each restriction (l, r, x): the maximum height in [l, r] must be <= x. So we can set for every spot i in [l, r]: the maximum allowed height is min(current_max[i], x). But wait: this is not entirely correct because if we set the entire segment [l, r] to at most x, then the maximum in the segment is at most x. However, the catch is that the same house might be constrained by multiple restrictions and we need to ensure that the entire assignment satisfies all.\n\n But note: if we set each spot independently to the minimum x from any restriction covering it, then we might get an assignment that satisfies all the restrictions. However, is that sufficient? Consider: if we set each house to the minimum x from the restrictions that cover it, then for any restriction j (l_j, r_j, x_j), the maximum house in [l_j, r_j] would be at most x_j (because we set each house in that segment to at most x_j). So yes, we can set for each spot i:\n   Let M[i] = min{ x_j | i is in [l_j, r_j] }   (if there are no restrictions covering i, then M[i] = h)\n\n Then, we can set A[i] to any value between 0 and M[i]. However, is that always optimal? \n\n But note: the profit function is the square. Therefore, for each house we want to set it as high as possible (to get the highest square). So for each spot i, we would set A[i] = M[i] (unless M[i] is negative, but x_j>=0). \n\n However, wait: is that correct? Consider two overlapping restrictions. Example: \n   Restriction 1: [1,2] with x1=10\n   Restriction 2: [1,3] with",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. The constraints specify that the tallest house in certain segments must not exceed a specified height.\n\n### Approach\n1. **Problem Analysis**: The problem involves assigning heights to each of the `n` spots such that all zoning restrictions are satisfied. Each restriction requires that the maximum height in a specified segment does not exceed a given value. The goal is to maximize the sum of the squares of these heights.\n2. **Key Insight**: For each spot, the maximum allowable height is constrained by the most restrictive restriction that includes it. Specifically, for each spot `i`, the maximum height it can have is the minimum value among all `x_i` (from the restrictions) that cover spot `i`. If no restrictions cover a spot, its maximum height is simply `h`.\n3. **Algorithm Selection**: The solution involves:\n   - Preprocessing to determine the most restrictive constraint for each spot. This is done by initializing each spot's maximum height to `h` and then iterating over all restrictions to update the maximum height for spots within each restriction's range to the minimum of the current value and the restriction's `x_i`.\n   - Once the maximum allowable height for each spot is determined, the optimal height for each spot is set to its maximum allowable value (since the square function is maximized at the highest possible value).\n4. **Complexity Analysis**: The algorithm processes each restriction once, updating the constraints for up to `n` spots per restriction. With `m` restrictions and `n` spots, the complexity is O(m*n), which is efficient given the constraints (n, m ≤ 50).\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    max_heights = [h] * (n + 1)\n    \n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index + 1])\n        x = int(data[index + 2])\n        index += 3\n        for i in range(l, r + 1):\n            if max_heights[i] > x:\n                max_heights[i] = x\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        total_profit += max_heights[i] ** 2\n    \n    print(total_profit)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Initialization**: The code starts by reading the input values: the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Constraint Processing**: For each restriction, the code updates the maximum allowable height for each spot within the restriction's range to the minimum of its current value and the restriction's `x_i`. This ensures all restrictions are accounted for in determining the permissible heights.\n3. **Profit Calculation**: After processing all restrictions, the code calculates the total profit by summing the squares of the maximum allowable heights for all spots. This is because the square function increases with higher values, and thus the optimal height for each spot is its maximum allowable value.\n4. **Output**: The total profit is printed as the result.\n\nThis approach efficiently handles the constraints and leverages the properties of the square function to maximize profit while ensuring compliance with all zoning restrictions.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    max_heights = [h] * (n + 1)\n    \n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index + 1])\n        x = int(data[index + 2])\n        index += 3\n        for i in range(l, r + 1):\n            if max_heights[i] > x:\n                max_heights[i] = x\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        total_profit += max_heights[i] ** 2\n    \n    print(total_profit)\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 823,
        "completion_token_count": 753,
        "thoughts_token_count": 1023
    }
}