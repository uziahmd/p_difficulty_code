{
    "start": 1758284276.2133746,
    "end": 1758286690.720796,
    "start-formatted": "2025-09-19 21:17 KST",
    "end-formatted": "2025-09-19 21:58 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, I have to solve this problem where I need to find the minimum number of nodes required to create a p-reachable directed graph and then determine the maximum number of unidirectional pairs among all such graphs with that minimum node count.\n\nLet me first understand what a p-reachable directed graph is. So, a p-reachable graph has exactly p ordered pairs (u, v) such that u < v, u and v are reachable from each other. So, these pairs form an undirected edge between u and v in the underlying undirected graph. But since it's a directed graph, for each such pair, there's a path in both directions, but not necessarily a direct edge.\n\nWait, no. Wait, the definition says that u and v are reachable from each other. So for each such pair, u can reach v and v can reach u. So in the undirected sense, they are connected. The p refers to the number of such edges in the undirected graph.\n\nSo, the problem reduces to: find a graph where the number of edges (in the undirected sense) is p, and we want to minimize the number of nodes. Then, for the minimal node count, arrange the edges in such a way that the number of unidirectional pairs (which are directed edges that are not part of any mutual reachability) is maximized.\n\nHmm, so first, let's think about the minimal number of nodes. For a given p, what's the smallest n such that the maximum number of edges in an undirected graph with n nodes is at least p? Because each undirected edge contributes one to p.\n\nWait, no. Because each edge in the undirected graph corresponds to two directed edges in the directed graph. But the p is the count of unordered pairs {u, v} where u and v are mutually reachable. So, each such unordered pair contributes 1 to p, regardless of how many directed edges exist between them.\n\nSo, the problem is equivalent to finding the smallest n such that the number of possible undirected edges in a graph with n nodes is >= p. Because each undirected edge is counted once in p.\n\nThe number of possible undirected edges in a graph with n nodes is C(n,2) = n*(n-1)/2. So, we need to find the smallest n where C(n,2) >= p.\n\nWait, but wait. What if p is zero? Then the graph must have no edges, which requires n=1 (since zero edges). Or n=0? Wait, no, because in a graph, you have nodes. But according to the sample input, when p=0, the output is 0 0. Hmm, looking back at the sample:\n\nIn the third test case, the input is 0, and the output is '0 0'. So for p=0, the minimal number of nodes is 0. That makes sense because a graph with zero nodes has zero edges, so p=0. But wait, wait. If the graph has zero nodes, then there are no nodes, so there are zero pairs. So yes, that's correct.\n\nSo, for p>0, the minimal n is the smallest integer such that C(n,2) >= p.\n\nWait, no. Wait, for example, when p=3. C(3,2)=3, which equals p, so n=3.\n\nIn the first sample, the output is 3, which aligns with this.\n\nSimilarly, when p=4, C(4,2)=6 >=4, but perhaps n can be 5? Wait, no. Because C(3,2)=3 <4, so the next is 4. Wait, wait, wait. Let me compute C(n,2) for n=3: 3, n=4: 6, n=5:10.\n\nWait, for p=4, n=4 is sufficient because 6 >=4. So why does the sample output for p=4 say the minimal nodes are 5? Wait, no, sample input was 3,4,0, and the outputs were 3,5,0.\n\nWait, no, the sample input is [3,4,0], and the outputs are 3 0, 5 6, 0 0.\n\nWait, that can't be right. Oh, perhaps I'm misunderstanding the problem.\n\nWait, the problem says that p is the number of ordered pairs (u, v) such that u < v and u and v are reachable from each other. So, each such pair is an edge in the undirected graph. So, the total number of such edges is p.\n\nSo, to construct a graph with p such edges, the minimal number of nodes is the smallest n where the complete graph on n nodes has at least p edges. Because in the complete graph, every pair is connected, so C(n,2) is the maximum possible p for that n.\n\nSo, for p=3, n=3 because C(3,2)=3.\n\nFor p=4, the minimal n is 4, because C(4,2)=6 >=4. So why does the sample say for p=4, the minimal nodes are 5?\n\nWait, wait, perhaps I'm misunderstanding the problem. Maybe the p is the number of directed edges, but that's not the case because the problem says \"ordered pairs of nodes (u, v)\" but under certain conditions. No, the problem says that p is the number of ordered pairs (u, v) where u !=v, and u can reach v, and v cannot reach u. No, wait no: the problem says \"there exists a path from u to v, and there are no paths from v to u.\" So these are directed edges that are unidirectional. So, each such pair is a single directed edge, contributing to the count of unidirectional pairs.\n\nWait, wait, no. Let me read the problem statement again.\n\nA directed graph is called p-reachable if it contains exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\n\nAh! So, for each such pair (u, v), u < v, and u can reach v, and v can reach u. So, in the undirected sense, u and v are connected by an edge. But for each such pair, in the directed graph, there can be 0, 1, or 2 directed edges between u and v. However, for the pair to contribute to p, u and v must be mutually reachable. So, for each such pair, there must be a path from u to v and from v to u. So, the directed edges may include both directions, but as long as each direction is reachable.\n\nBut the key is that for each such pair, u and v are in a mutual reachability relationship, but the actual directed edges could vary.\n\nSo, the p is the count of such unordered pairs {u, v}, where u < v, and u and v are mutually reachable. So, each such pair contributes 1 to p, regardless of how many directed edges exist between them.\n\nThus, the problem is to find a directed graph where the number of such unordered pairs is exactly p. We need to find the minimal number of nodes n such that it's possible to have p such pairs.\n\nAdditionally, among all such minimal n graphs, find the one that maximizes the number of unidirectional pairs (i.e., directed edges (u, v) where u != v, there's a path from u to v, but no path from v to u).\n\nSo, the steps I need to take are:\n\n1. Determine the minimal number of nodes n such that the maximum possible number of such unordered pairs is at least p.\n\nWait, no. Because for a given n, the maximum possible p is C(n,2). Because in a complete graph, every pair is connected, so p would be C(n,2). So, for a given p, n is the minimal integer such that C(n,2) >= p.\n\nWait, but wait. Suppose p is 4. Then, C(3,2)=3 <4, so n must be 4. Because C(4,2)=6 >=4. So the minimal n is 4.\n\nBut in the sample input, when p=4, the output is 5 6. That suggests that the minimal n is 5, which contradicts my earlier reasoning.\n\nHmm, this indicates that I'm misunderstanding the problem. Let me re-examine the sample input.\n\nSample Input:\n3\n4\n0\n\nSample Output:\n3 0\n5 6\n0 0\n\nWait, for p=4, the minimal number of nodes is 5, according to the sample. So, why is that?\n\nWait, perhaps I'm misinterpreting what p represents. Let me read the problem statement again.\n\np is the number of ordered pairs (u, v) such that u !=v, u can reach v, and v cannot reach u. So, each such pair contributes 1 to p. So, p is the count of unidirectional edges in the directed graph.\n\nWait, that's different! So, I misunderstood the problem entirely.\n\nSo, the problem is not about the number of unordered pairs {u, v} where u and v are mutually reachable, but rather the number of ordered pairs (u, v) where u can reach v, and v cannot reach u. These are the unidirectional edges.\n\nSo, the p is the number of such unidirectional edges. So, the problem is to find a directed graph with exactly p unidirectional edges, and the minimal number of nodes needed to create such a graph.\n\nThen, among all such minimal-node graphs, find the one that has the maximum number of unidirectional edges.\n\nSo, now the problem makes more sense.\n\nSo, for example, in the first sample input where p=3:\n\nWe need a graph with exactly 3 unidirectional edges.\n\nThe minimal number of nodes is 3. How?\n\nBecause in a directed graph with 3 nodes, we can have a cycle. For example, A→B, B→C, C→A. This forms a cycle, but each edge is part of a cycle, so no unidirectional edges. So, this gives zero.\n\nAlternatively, perhaps another arrangement. Wait, but how can we get 3 unidirectional edges with 3 nodes.\n\nWait, maybe the graph is such that each node points to another, but not in a cycle. For example, A→B, B→C, A→C. Then, the unidirectional edges are:\n\nA→B, B→C, and A→C. So, that's three unidirectional edges.\n\nBut wait, in this case, B can reach C, but C cannot reach B. So, B→C is unidirectional. Similarly, A can reach B and C, but what about those? Are they unidirectional?\n\nYes, because B can't reach A (since A→B), so A→B is unidirectional. Similarly, C can't reach A, so A→C is unidirectional.\n\nSo, in this case, the graph has 3 unidirectional edges. So, that's why the minimal nodes are 3.\n\nSo, for p=3, the minimal n is 3.\n\nNow, the second part: among all such graphs with minimal nodes, find the maximum number of unidirectional pairs.\n\nIn the first sample, the output is 0. So, in the graph that uses 3 nodes and has 3 unidirectional edges, the maximum number of unidirectional edges is 3, but perhaps the maximum is achieved when all possible unidirectional edges are present, but perhaps not. Wait, no, in the first sample, the output is 0, which suggests that in that case, all unidirectional edges are 3.\n\nWait, perhaps I'm getting confused.\n\nWait, the problem says that for the minimal node count, we need to maximize the number of unidirectional pairs. So, in the first sample, the minimal node count is 3, and the maximum number of unidirectional edges is 0. That seems contradictory. So, perhaps I'm missing something.\n\nWait, no. Wait, perhaps in the minimal node graph for p=3, it's impossible to have more than 3 unidirectional edges. So, the maximum is 3, but perhaps the sample shows 0 because the way the graph is arranged. Wait, but the sample says that the maximum is 0.\n\nHmm, perhaps I'm misunderstanding the question. Let me re-read it.\n\nThe problem says that a directed graph is called p-reachable if it contains exactly p unidirectional ordered pairs (u, v), i.e., p edges where u can reach v and v cannot reach u.\n\nSo, the p is the count of such edges.\n\nSo, the problem is to construct a directed graph that has exactly p such edges.\n\nWe need to find the minimal number of nodes required to create such a graph.\n\nThen, among all such graphs with minimal nodes, find the maximum possible number of unidirectional edges.\n\nWait, no. Wait, the problem says: Also, among all such p-reachable directed graphs with the minimal number of nodes, find the maximum number of unidirectional pairs.\n\nWait, no. Wait, the problem says: Find the minimum number of nodes required to create a p-reachable directed graph. Also, among all such graphs with the minimal number of nodes, find the maximum number of unidirectional pairs.\n\nSo, after finding the minimal n, we need to find the maximum possible number of unidirectional pairs in any such graph.\n\nSo, for the first sample, p=3.\n\nThe minimal n is 3.\n\nWhat's the maximum number of unidirectional edges possible in a graph with 3 nodes and exactly 3 unidirectional edges?\n\nWait, perhaps in that case, the graph can't have more than 3 unidirectional edges, because that's exactly p=3.\n\nWait, no. Because the problem is to find a graph that has exactly p unidirectional edges. So, the maximum is 3, but perhaps in some cases, you can't have all 3.\n\nWait, perhaps in the sample, the maximum is 0 because the graph is designed in a way that doesn't allow for more unidirectional edges beyond p.\n\nWait, perhaps I'm getting this wrong. Let's think differently.\n\nMaybe the minimal n is determined based on the structure that allows exactly p unidirectional edges.\n\nEach unidirectional edge contributes to p. So, to maximize the number of unidirectional edges in a graph, we need to arrange the graph such that as many edges as possible are unidirectional, while still having exactly p such edges.\n\nWait, but the problem requires that the graph has exactly p unidirectional edges. So, the maximum number of unidirectional edges in such a graph would be p.\n\nBut the sample for p=3 says the maximum is 0. So, that's conflicting.\n\nWait, perhaps the confusion arises from the fact that the minimal n is not always the same as the structure that allows for maximum unidirectional edges.\n\nWait, perhaps the initial approach is incorrect. Let me try to think differently.\n\nThe problem is to find a directed graph with exactly p unidirectional edges. We need to find the minimal number of nodes required to create such a graph. Then, among all such minimal-node graphs, find the maximum number of unidirectional edges (which is p, but perhaps not—because the way the graph is structured might limit it).\n\nBut in the sample for p=3, the output is 3 0, meaning that the maximum is 0. So, that's confusing.\n\nWait, perhaps I'm miscalculating. Let's consider p=3.\n\nWhat's the minimal number of nodes?\n\nWe can have a graph with 3 nodes and 3 unidirectional edges. For example:\n\nA→B, B→C, C→A. But in this case, none of these are unidirectional because each can reach the next, forming a cycle.\n\nSo, that's zero unidirectional edges.\n\nAlternatively, if we have a graph where A→B, B→C, A→C. Then, A can reach B and C, but B can't reach A, and C can't reach A. So, the unidirectional edges are A→B, B→C, and A→C. So, that's three unidirectional edges, which meets p=3.\n\nIn this case, the maximum is 3, but the sample says it's 0.\n\nWait, perhaps the sample explanation is different. Let me read the note.\n\nIn the first test case, the output is 3 0. So, the graph G that maximizes the number of unidirectional pairs is the one that has 0. But that contradicts.\n\nWait, perhaps I'm misunderstanding what the maximum is. Maybe the maximum number of unidirectional pairs is the maximum possible across all graphs with exactly p unidirectional edges, not considering the minimal node count. No, no, the problem says that among all such graphs with the minimal number of nodes, find the maximum.\n\nSo, in the first sample, the minimal node count is 3, and among all such graphs with 3 nodes and exactly 3 unidirectional edges, the maximum is 0. That suggests that in all such graphs, the maximum is 0.\n\nWait, that can't be right. Because the graph I described earlier has 3 unidirectional edges, which is p=3. So why is the maximum 0?\n\nAh, perhaps I made a mistake. Because in that graph, each of the three edges is unidirectional, but perhaps each node can't have multiple outgoing edges without creating cycles.\n\nWait, no. Let me think again.\n\nIf I have a graph with 3 nodes: A→B, B→C, A→C.\n\nSo, A can reach B, C directly. B can reach C directly. Now, can B reach A? No, because there's no edge from B to A. Similarly, C can't reach A. So, each of these edges is unidirectional.\n\nThus, the unidirectional edges are A→B, B→C, A→C. So, that's 3 unidirectional edges, meeting p=3.\n\nSo, the maximum unidirectional edges in this case is 3.\n\nBut the sample output is 0, which suggests that the maximum is 0. So, this is confusing.\n\nAlternatively, perhaps the problem is that in a directed graph with 3 nodes, the maximum number of unidirectional edges is 3, but perhaps that's not possible because some edges would create cycles that prevent others from being unidirectional.\n\nWait, no. The graph I described earlier has 3 unidirectional edges and no cycles. Because A→B, B→C, A→C forms a DAG with A pointing to both B and C, and B pointing to C. There's no cycle here.\n\nSo, in this case, the maximum is 3, but the sample says it's 0.\n\nHmm, perhaps I'm missing something else. Let me read the sample explanation.\n\nIn the note, it says that in the first test case, the graph G is one of the graphs with the maximum number of unidirectional pairs, which is 0. So, that suggests that in that case, the maximum is 0.\n\nWait, that can't be right because the graph I described has 3 unidirectional edges.\n\nWait, perhaps the sample is wrong, but that's unlikely. Alternatively, perhaps I'm misunderstanding the problem.\n\nWait, perhaps the problem is that in the p-reachable graph, the graph must be strongly connected in some way, but that's not stated.\n\nNo, the problem only states that the graph is p-reachable, which is defined as having exactly p unidirectional edges.\n\nWait, perhaps the problem is that the graph must be a DAG. Because if it's a DAG, then the number of unidirectional edges can be calculated in a certain way.\n\nBut the problem statement doesn't specify that the graph must be a DAG. So, I'm not sure.\n\nAlternatively, perhaps the problem is that the graph must be such that each unidirectional edge is part of a chain leading to a sink.\n\nBut I'm not sure.\n\nAlternatively, perhaps the problem requires that the graph is a DAG, which would mean that the maximum number of unidirectional edges is limited.\n\nBut the sample indicates that for p=3, the maximum is 0.\n\nWait, perhaps the minimal number of nodes is 3, and in that case, the maximum number of unidirectional edges is 3, but the sample says 0. So, perhaps I'm making a mistake.\n\nWait, perhaps the sample is incorrect, but that's unlikely.\n\nAlternatively, perhaps I'm misunderstanding the concept of unidirectional edges.\n\nWait, the problem defines a unidirectional pair as an ordered pair (u, v) where u can reach v, and v cannot reach u.\n\nSo, in the graph I described, A→B, B→C, A→C:\n\n- A can reach B and C.\n- B can reach C.\n- C cannot reach anyone else except perhaps via other paths, but in this case, it can't reach A or B.\n\nSo, the unidirectional edges are:\n\nA→B (since B can't reach A)\nB→C (since C can't reach B)\nA→C (since C can't reach A)\nTotal of 3.\n\nSo, the maximum unidirectional edges is 3.\n\nBut the sample says that for p=3, the maximum is 0.\n\nThat's a contradiction.\n\nWait, perhaps the sample is not matching the problem statement. Alternatively, perhaps I'm misunderstanding the problem.\n\nWait, looking back at the sample input and output:\n\nInput: 3\n\nOutput: 3 0.\n\nNote says that in the first test case, the graph G is one of the graphs with maximum unidirectional pairs, which is 0.\n\nSo, that suggests that the maximum number of unidirectional pairs is 0.\n\nBut how?\n\nPerhaps I've made a mistake in thinking that the graph can have 3 unidirectional edges.\n\nWait, perhaps in a directed graph with 3 nodes, it's impossible to have 3 unidirectional edges.\n\nBecause, for example, if A→B, B→C, and C→A, then each edge is part of a cycle, so none are unidirectional.\n\nAlternatively, if A→B, B→C, and C→A, then each edge is part of a cycle, so no unidirectional edges.\n\nBut in the graph where A→B, B→C, and A→C, then each of these edges is unidirectional.\n\nSo, that's possible.\n\nThus, perhaps the sample is wrong, but that's unlikely.\n\nAlternatively, perhaps the problem is that the graph must be strongly connected, but the problem doesn't state that.\n\nWait, no, the problem doesn't state that the graph is strongly connected. It just needs to have exactly p unidirectional edges.\n\nSo, perhaps the sample is correct, and I'm misunderstanding the problem.\n\nWait, perhaps the problem is that the graph is considered p-reachable if it is possible to reach from u to v and v to u, but that's not the case.\n\nNo, the problem says that a unidirectional edge is one where u can reach v and v cannot reach u.\n\nSo, the p is the count of such edges.\n\nWait, perhaps the problem is that the graph must be such that all edges are unidirectional, but that's not the case.\n\nAlternatively, perhaps the problem is that the graph must form a DAG, which would limit the number of unidirectional edges.\n\nBut the problem doesn't state that.\n\nI'm stuck. Maybe I should try to find the minimal number of nodes for a given p.\n\nSo, the minimal number of nodes n is the minimal n where the maximal number of unidirectional edges in a DAG is >=p.\n\nBecause in a DAG, the number of unidirectional edges is equal to the number of edges, since there are no cycles, so no edges can be part of a mutual reachability.\n\nWait, no. In a DAG, any edge u→v implies that u can reach v, but v cannot reach u, unless there's a path from v to u, but that's impossible in a DAG.\n\nSo, in a DAG, every edge is unidirectional. So, the number of unidirectional edges is equal to the number of edges in the DAG.\n\nSo, to find the minimal n such that the maximal number of edges in a DAG on n nodes is >=p.\n\nThe maximal number of edges in a DAG is when it's a complete DAG, which is a topological order where all edges go from earlier to later nodes. So, for n nodes, the maximal edges are n*(n-1)/2.\n\nWait, no. Wait, in a DAG, the maximum number of edges is indeed C(n,2). Because you can have a complete DAG where every possible edge is present, but arranged in a topological order.\n\nSo, the minimal n is the smallest integer such that C(n,2) >=p.\n\nBecause the maximal number of edges in a DAG is C(n,2), so to have p unidirectional edges, we need to have a DAG with at least p edges.\n\nWait, but for example, when p=3, C(3,2)=3, so n=3.\n\nWhen p=4, C(3,2)=3<4, so n=4, C(4,2)=6>=4.\n\nBut in the sample, for p=4, the minimal nodes is 5, which suggests that the approach is wrong.\n\nSo, this suggests that the minimal n is not simply the minimal n where C(n,2)>=p.\n\nThus, perhaps the problem is not about arranging the graph as a DAG, but allowing for mutual reachability, but that's not possible for unidirectional edges.\n\nWait, I'm getting more confused.\n\nPerhaps I should look for patterns in the sample.\n\nSample Input: 3 → Output: 3 0.\n\nSample Input:4 → Output:5 6.\n\nWait, for p=4, the minimal n is 5.\n\nHmm, let's see. 5 nodes.\n\nWhat's the maximum number of unidirectional edges possible in a directed graph with 5 nodes and exactly 4 unidirectional edges?\n\nWait, but that's not the point. The problem is, for a given p, find the minimal n such that the graph can have exactly p unidirectional edges. Then, find the maximum number of unidirectional edges possible in such graphs.\n\nBut in the sample for p=4, the output is 5 6. So, the maximum is 6, which is higher than p.\n\nThat suggests that in some cases, the maximum is higher than p.\n\nWait, that's impossible because p is the exact number of unidirectional edges. So, the maximum can't be higher than p.\n\nWait, no. Wait, the problem says that among all such graphs with exactly p unidirectional edges, find the maximum number of unidirectional edges.\n\nWait, that can't be. Because each graph has exactly p unidirectional edges, so the maximum is p.\n\nBut the sample shows that for p=4, the output is 5 6, which suggests that the maximum is 6, which is greater than 4.\n\nThis indicates that my understanding of the problem is incorrect.\n\nAlternatively, perhaps the problem is that the graph is allowed to have more unidirectional edges, but the problem is to find the maximum possible across all such graphs, regardless of whether they have exactly p unidirectional edges.\n\nWait, no. The problem says: find the maximum number of unidirectional pairs among all such p-reachable graphs with minimal nodes.\n\nSo, perhaps the graph can have more than p unidirectional edges, but exactly p of them contribute to p-reachability.\n\nWait, no. The problem says that the graph is p-reachable, which is defined as having exactly p unidirectional edges.\n\nSo, the maximum number of unidirectional edges in such a graph can't exceed p.\n\nBut the sample shows that for p=4, the maximum is 6, which is more than 4.\n\nSo, clearly, my understanding is incorrect.\n\nI think I'm stuck and need to approach this problem differently.\n\nAlternative Approach:\n\nLet me consider that for a graph to have exactly p unidirectional edges, the minimal number of nodes is n.\n\nEach unidirectional edge contributes 1 to p. So, the sum of all unidirectional edges is p.\n\nWe need to find the minimal n such that it's possible to have p unidirectional edges in a directed graph.\n\nBut how?\n\nIn a directed graph, each unidirectional edge is a directed edge u→v where u cannot reach v via other paths. So, it's possible for a node to have multiple outgoing edges, each being unidirectional.\n\nBut to maximize the number of unidirectional edges, perhaps the graph should be a DAG, where every edge is unidirectional.\n\nBecause in a DAG, every edge is unidirectional.\n\nSo, the maximum number of unidirectional edges in a DAG is C(n,2), which is the maximum possible for n nodes.\n\nThus, for a given p, the minimal n is the smallest integer such that C(n,2) >= p.\n\nBut in the sample input, for p=4, C(4,2)=6 >=4, so n=4. But the sample says n=5.\n\nSo, this suggests that the minimal n is not achieved by a DAG.\n\nHmm.\n\nWait, perhaps the graph cannot have a DAG structure because adding edges creates mutual reachability.\n\nBut I'm not sure.\n\nAlternatively, perhaps the graph must be strongly connected, which would require that for any two nodes u and v, there is a path from u to v and vice versa.\n\nIn that case, any edge u→v would not be unidirectional because v can reach u.\n\nThus, in a strongly connected graph, there are zero unidirectional edges.\n\nBut the sample for p=3 has a minimal node count of 3, but the maximum number of unidirectional edges is 0.\n\nWhich aligns with this idea.\n\nSo, perhaps the problem is that the graph must be strongly connected, and thus, any edge in a strongly connected graph is not unidirectional.\n\nBut the problem doesn't state that the graph must be strongly connected.\n\nThus, this approach may not be correct.\n\nWait, perhaps the problem is that in order to have exactly p unidirectional edges, the graph cannot be strongly connected.\n\nBecause if the graph is strongly connected, then there are no unidirectional edges.\n\nThus, for a graph to have exactly p unidirectional edges, it must not be strongly connected.\n\nSo, perhaps the minimal n is determined based on the number of components in the graph.\n\nEach component can be a DAG, allowing for unidirectional edges.\n\nBut I'm not sure.\n\nAnother Idea:\n\nEach unidirectional edge contributes to p. So, the problem is similar to having a directed graph with p edges, each of which is unidirectional.\n\nTo maximize the number of unidirectional edges, the graph should have as many edges as possible that are unidirectional.\n\nBut how?\n\nIn a DAG, all edges are unidirectional.\n\nThus, the maximal number of unidirectional edges is C(n,2).\n\nSo, to achieve p unidirectional edges, the minimal n is the smallest integer such that C(n,2) >= p.\n\nBut the sample indicates that this is not the case.\n\nSo, perhaps the problem is that the graph must be strongly connected, but then it's impossible to have any unidirectional edges.\n\nBut the sample shows that for p=3, the graph has 3 unidirectional edges.\n\nSo, this suggests that the graph is not strongly connected.\n\nThus, perhaps the minimal n is indeed the minimal n such that C(n,2) >= p.\n\nBut the sample for p=4 seems to contradict this.\n\nWait, for p=4, C(3,2)=3 <4. So, n=4.\n\nC(4,2)=6 >=4.\n\nSo, minimal n is 4.\n\nBut sample says 5.\n\nThus, perhaps the approach is incorrect.\n\nAlternative Plan:\n\nPerhaps the problem is that each unidirectional edge can only come from a certain structure, like a tree or something else.\n\nWait, perhaps the minimal n is determined by the formula n = p +1.\n\nBecause for p=3, 3+1=4, but the sample says n=3.\n\nHmm, not matching.\n\nAlternatively, perhaps the minimal n is such that n choose 2 is less than p.\n\nWait, perhaps the minimal n is the smallest integer where the sum of the first (n-1) integers is >= p.\n\nWait, because for a DAG, the maximum number of edges is C(n,2).\n\nWait, but that brings us back to the initial approach.\n\nSo, perhaps I'm missing something.\n\nLet me think about the sample for p=4.\n\nSample Output:5 6.\n\nSo, minimal n=5, maximum unidirectional pairs=6.\n\nSo, p=4, but the maximum is 6.\n\nSo, how can a graph have 4 unidirectional edges and 6 unidirectional pairs?\n\nWait, that's impossible because the number of unidirectional edges is exactly p=4.\n\nUnless the maximum refers to the number of unidirectional edges plus something else.\n\nWait, perhaps the maximum is the number of unidirectional edges plus the number of mutual edges.\n\nNo, the problem says that the graph is p-reachable if it contains exactly p unidirectional edges.\n\nThus, the maximum number of unidirectional edges can't be more than p.\n\nBut the sample shows 6, which is more than 4.\n\nSo, perhaps the problem is that the maximum refers to the number of unidirectional edges plus the number of mutual edges, which is not possible.\n\nAlternatively, perhaps the problem is to maximize the number of unidirectional edges in the entire graph, not just in the p-reachable condition.\n\nNo, the problem says: among all such p-reachable graphs with minimal nodes, find the maximum number of unidirectional pairs.\n\nSo, in such graphs, the number of unidirectional edges is exactly p.\n\nThus, the maximum is p.\n\nBut the sample shows that for p=4, the maximum is 6.\n\nThis suggests that perhaps I'm misunderstanding the problem.\n\nWait, perhaps the problem is to find the minimal number of nodes such that the graph can have at least p unidirectional edges, not exactly p.\n\nBut the problem statement says p-reachable is exactly p.\n\nThus, I'm stuck.\n\nPerhaps I should try to find a mathematical approach.\n\nAssuming that the minimal n is the smallest integer where C(n,2) >= p.\n\nThen, for each p, compute n as the minimal such integer.\n\nThen, for the maximum unidirectional edges, it's p.\n\nBut the sample shows that for p=3, the maximum is 0, which contradicts.\n\nAlternatively, perhaps the maximum is the number of unidirectional edges in the minimal n DAG, which is C(n,2).\n\nBut that can't be because the problem requires exactly p unidirectional edges.\n\nSo, perhaps the problem is to find the minimal n such that there exists a graph with exactly p unidirectional edges, and within that, find the graph that has the maximum number of unidirectional edges.\n\nWait, but that's not possible because the graph has exactly p.\n\nThus, perhaps the problem is that the maximum is the number of unidirectional edges in the minimal n DAG, which is C(n,2).\n\nBut that's only possible if p <= C(n,2).\n\nThus, the maximum is C(n,2).\n\nSo, for p=3, n=3, C(3,2)=3. So, the maximum is 3.\n\nBut the sample says 0.\n\nThis is getting too confusing.\n\nAlternative Idea:\n\nPerhaps the problem is to model the graph as a DAG, and each unidirectional edge contributes to p.\n\nThus, the minimal n is the smallest integer where C(n,2) >=p.\n\nThen, the maximum number of unidirectional edges is C(n,2).\n\nThus, for p=3, n=3, maximum is 3.\n\nBut the sample says 0.\n\nThus, this approach is not matching the sample.\n\nAlternatively, perhaps the problem requires that the graph is strongly connected, meaning that no unidirectional edges can exist.\n\nBut then, for p=3, the maximum is 0.\n\nWhich matches the sample.\n\nSo, perhaps the problem requires that the graph is strongly connected, meaning that all edges are bidirectional, but that's not the case.\n\nWait, no. A strongly connected graph means that for any two nodes u and v, there's a path from u to v and from v to u.\n\nThus, in a strongly connected graph, any edge u→v implies that v can reach u, so u→v is not unidirectional.\n\nThus, in a strongly connected graph, there are zero unidirectional edges.\n\nSo, for any p>0, the graph cannot be strongly connected.\n\nThus, the minimal n is the minimal number of nodes such that the graph can have p unidirectional edges and is not strongly connected.\n\nBut how to model this.\n\nAlternatively, perhaps the minimal n is such that the graph can be split into two strongly connected components, and all edges go from one component to the other.\n\nThus, the unidirectional edges are between the components.\n\nIn this case, the number of unidirectional edges can be up to k*m, where k and m are the sizes of the two components.\n\nThus, to maximize the number of unidirectional edges, the graph is split into two components, and as many edges as possible go from one to the other.\n\nSo, for example, if the graph is split into two parts, A and B, with |A|=a, |B|=b, then the maximum number of unidirectional edges is a*b.\n\nThus, to maximize the number of unidirectional edges, we need a and b to be as close as possible.\n\nSo, the maximum product is achieved when a and b are as equal as possible.\n\nThus, for a given n, the maximum number of unidirectional edges is floor(n^2/4).\n\nBut how does this relate to p.\n\nWait, perhaps the minimal n is such that the maximum possible unidirectional edges is >=p.\n\nThus, for a given p, find the minimal n where the maximum possible unidirectional edges (which is floor(n^2/4)) is >=p.\n\nWait, that makes more sense.\n\nLet me test this with the samples.\n\nSample",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a directed graph that has exactly `p` unidirectional edges. Additionally, among all such graphs with the minimum number of nodes, we need to find the maximum number of unidirectional edges.\n\n### Approach\n1. **Understanding Unidirectional Edges**: An unidirectional edge is a directed edge from node `u` to node `v` such that there is no path from `v` back to `u`. The problem requires us to find a graph with exactly `p` such edges.\n\n2. **Graph Structure**: To maximize the number of unidirectional edges while minimizing the number of nodes, we can consider splitting the graph into two strongly connected components. This allows us to have the maximum possible number of unidirectional edges between these two components.\n\n3. **Mathematical Insight**: The maximum number of unidirectional edges in a graph with `n` nodes can be achieved by splitting the nodes into two nearly equal parts. The maximum product of sizes of two sets (which gives the maximum number of edges) is given by the floor of `n^2 / 4`.\n\n4. **Finding Minimum Nodes**: We need to find the smallest `n` such that the maximum number of unidirectional edges (given by `floor(n^2 / 4)`) is at least `p`.\n\n5. **Maximizing Unidirectional Edges**: Once the minimum `n` is determined, the maximum number of unidirectional edges in such a graph is `floor(n^2 / 4)`.\n\n### Solution Code\n```python\nimport math\n\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    # Find minimal n where n^2/4 >= p\n    # Solve for n: n^2 >= 4p\n    # n = ceil(2*sqrt(p))\n    # But let's compute it properly.\n    left = 0\n    right = 2 * int(math.sqrt(p)) + 2\n    while left < right:\n        mid = (left + right) // 2\n        if mid * mid >= 4 * p:\n            right = mid\n        else:\n            left = mid + 1\n    n = left\n    max_unidirectional = (n * n) // 4\n    print(f\"{n} {max_unidirectional}\")\n```\n\n### Explanation\n- **Finding Minimum Nodes**: We use a binary search approach to find the smallest `n` such that `n^2 / 4` is at least `p`. This ensures that we can have enough unidirectional edges to meet the requirement.\n- **Maximizing Unidirectional Edges**: Once `n` is determined, the maximum number of unidirectional edges is calculated as `n^2 // 4`, which is derived from splitting the nodes into two nearly equal parts and maximizing the edges between them.\n\nThis approach efficiently determines the minimum number of nodes and the maximum number of unidirectional edges, ensuring optimal performance even for large values of `p`.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    # Find minimal n where n^2/4 >= p\n    # Solve for n: n^2 >= 4p\n    # n = ceil(2*sqrt(p))\n    # But let's compute it properly.\n    left = 0\n    right = 2 * int(math.sqrt(p)) + 2\n    while left < right:\n        mid = (left + right) // 2\n        if mid * mid >= 4 * p:\n            right = mid\n        else:\n            left = mid + 1\n    n = left\n    max_unidirectional = (n * n) // 4\n    print(f\"{n} {max_unidirectional}\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 476,
        "completion_token_count": 648,
        "thoughts_token_count": 8193
    }
}