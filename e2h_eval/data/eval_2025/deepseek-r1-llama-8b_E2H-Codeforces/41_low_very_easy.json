{
    "start": 1758278111.8538692,
    "end": 1758278298.5965776,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:38 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house contributes a squared value of its height to the total profit. But there are m restrictions that limit the maximum height in specific ranges.\n\nHmm, so the goal is to assign heights to each spot such that all restrictions are satisfied, and the sum of squares is maximized.\n\nLet me think about how to model this. It seems like a dynamic programming problem because for each spot, the choice of height depends on the previous choices, especially considering overlapping restrictions.\n\nWait, but n and m are up to 50, which isn't too bad. So maybe a DP approach where we track the possible maximums for each interval could work. Alternatively, since the constraints are on intervals, perhaps we can model it by considering the earliest and latest positions where a restriction applies.\n\nAnother idea: For each position i, determine the maximum allowed height based on all applicable restrictions. Then, the problem reduces to choosing heights for each spot without exceeding any of these maximums and maximizing the sum of squares.\n\nBut wait, some spots might be covered by multiple restrictions. For example, if a spot is in two overlapping restrictions, the maximum allowed height is the minimum of all applicable x_i's for that spot.\n\nSo first, for each spot i, I need to find the minimum x among all restrictions that cover i. Because if a spot is in multiple restrictions, each restricts the maximum height, so the overall maximum height for that spot is the smallest of those x's.\n\nBut wait, what if a spot is not covered by any restriction? Then the maximum height is h.\n\nSo step one: For each spot i, compute the minimum x across all restrictions that include i. If no restrictions apply, then the max is h.\n\nOnce I have the maximum allowed height for each spot, the problem becomes choosing for each spot a height between 0 and its allowed maximum (inclusive), such that the sum of squares is maximized.\n\nBut wait, that's not entirely correct. Because when you choose a height for a spot, it affects other spots as well, but only through the restrictions. Oh, no—no, because each restriction is an upper bound on a range. So for each spot, the maximum possible height is determined by the minimum x in all applicable restrictions.\n\nSo if I precompute for each spot i the maximum allowed height as min(h, min(x_j for j where i is in [l_j, r_j])) ), then I can treat each spot independently, right?\n\nWait, no! Because if I set a height for a spot, say i, it affects all the restrictions that include i. So if a restriction is on a range that includes i, the maximum allowed for that spot is min of all x's for the restrictions covering it. So setting the height higher than that would violate the restriction.\n\nWait, but I think my initial approach was correct. Because each spot's maximum allowed height is determined by the minimum x in all applicable restrictions. So for each spot, the maximum possible height is the minimum of h and the x's from all restrictions that include it. So I can precompute for each spot i, the maximum allowed height as:\n\nmax_height[i] = min( h, min( x_i1, x_i2, ..., x_ik ) )\n\nwhere x_i1, etc., are the x values from all restrictions that cover spot i.\n\nSo, after computing max_height for each spot, the problem reduces to selecting for each spot i a height a_i where 0 ≤ a_i ≤ max_height[i], and the sum of a_i squared is maximized.\n\nBecause the sum is the sum of squares, to maximize it, each a_i should be as large as possible. So for each spot, the optimal is to set a_i to max_height[i], right?\n\nWait, that can't be right. Because sometimes, a spot's max_height is determined by multiple overlapping restrictions. Suppose two restrictions overlap at a spot: one says max 3, another says max 5. The spot's max_height is 3. So setting it to 3 is optimal.\n\nYes, so the optimal solution is to set each a_i to the maximum allowed by their respective max_height[i]. Because the square function is increasing with a_i, so the larger a_i is, the better the sum.\n\nWait, but is that always true? Let's think: for a given a_i, the square is a_i^2. So yes, making a_i as large as possible will contribute more to the sum.\n\nSo the solution is:\n\n1. For each spot i, compute the minimal x among all applicable restrictions. Let's call this min_x[i]. The maximum allowed a_i is min(min_x[i], h). Because even if no restrictions, the maximum is h.\n\nWait, but the initial h is the maximum possible, so min(min_x[i], h) is redundant",
    "response": "To solve this problem, we need to determine the maximum profit possible by building houses on a street with given height restrictions. The goal is to maximize the sum of the squares of the heights of the houses while respecting all zoning constraints.\n\n### Approach\n1. **Understand the Problem Constraints**: Each spot on the street can have a house with a height between 0 and a given maximum height `h`. There are several restrictions that limit the maximum height of houses in specific ranges of spots.\n2. **Determine Maximum Allowed Height for Each Spot**: For each spot, compute the minimum height allowed by all applicable restrictions. This will be the maximum height the house can have at that spot without violating any restrictions.\n3. **Maximize Profit**: Since the profit from each house is the square of its height, to maximize the total profit, each house should be as tall as possible within its allowed height range. Thus, each spot's height should be set to its computed maximum allowed height.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\n\n# Initialize max_height array with h for all spots\nmax_height = [h] * (n + 1)  # Using 1-based indexing\n\n# Read all restrictions\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\n# For each spot, find the minimal x among all applicable restrictions\nfor i in range(1, n + 1):\n    min_x = h  # Start with maximum possible\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_height[i] = min(min_x, h)\n\n# Calculate the maximum profit\nprofit = 0\nfor i in range(1, n + 1):\n    profit += max_height[i] ** 2\n\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The input consists of the number of spots `n`, the maximum height `h`, and the number of restrictions `m`. Each restriction specifies a range `[l, r]` and a maximum height `x` for that range.\n2. **Initialization**: We initialize an array `max_height` where each element is set to `h` initially. This array will store the maximum allowed height for each spot.\n3. **Processing Restrictions**: For each spot, we determine the minimum height allowed by any applicable restriction. This is done by iterating over each restriction and checking if the spot falls within the restriction's range.\n4. **Calculating Profit**: For each spot, the height is set to its computed maximum allowed height. The profit is the sum of the squares of these heights.\n\nThis approach ensures that we respect all restrictions while maximizing the profit by setting each house's height to the highest possible value allowed by the constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\n\n# Initialize max_height array with h for all spots\nmax_height = [h] * (n + 1)  # Using 1-based indexing\n\n# Read all restrictions\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\n# For each spot, find the minimal x among all applicable restrictions\nfor i in range(1, n + 1):\n    min_x = h  # Start with maximum possible\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < min_x:\n                min_x = x\n    max_height[i] = min(min_x, h)\n\n# Calculate the maximum profit\nprofit = 0\nfor i in range(1, n + 1):\n    profit += max_height[i] ** 2\n\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 812,
        "completion_token_count": 607,
        "thoughts_token_count": 1025
    }
}