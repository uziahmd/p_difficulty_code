{
    "start": 1758103649.7724352,
    "end": 1758103757.8334162,
    "start-formatted": "2025-09-17 19:07 KST",
    "end-formatted": "2025-09-17 19:09 KST",
    "gpu": 2,
    "pid": 7,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about determining whether a snowflake graph with n vertices exists. The snowflake graph is defined in a specific way. Let me try to understand the structure.\n\nThe snowflake graph starts with one vertex. Then, the initial vertex is connected to k new vertices, where k>1. So after this step, there are 1 + k = k+1 vertices. Then, each vertex that has only one edge (so those k new ones) must each connect to k more new vertices. This last step must be done at least once. So the minimal case is when each of those k nodes adds another k leaves, making a total of 1 +k +k^2.\n\nWait, let's think: initial node has degree k. Each of the k nodes then adds k children. So each of those k nodes now has degree k+1. So after the second step, the graph has 1 + k + k*k = 1 +k +k² vertices.\n\nBut wait, what if we do more steps? Like, after adding the second layer, can we add a third layer? Oh right, because any node that has degree 1 (like the leaves of the second layer) must also add k new children. So for each layer beyond the first, each existing node (from the previous layer) would add k children.\n\nWait, no. Because the rule says that each vertex connected by only one edge (so degree 1) must be connected to k new vertices. So this process can continue indefinitely, but in our case, the snowflake graph is constructed by doing this process at least once. So the minimal case is two steps beyond the initial: initial node connects to k, each of those k connects to k, so total 1 +k +k².\n\nBut the problem allows for more layers. For example, each of those k² nodes could then each connect to k new nodes, leading to a third layer, and so on. So the total number of nodes depends on how many times we perform this step beyond the initial.\n\nWait, no. Let me clarify: the initial step is adding the first layer (the k nodes). Then, each of those must add their own k nodes (second layer). Then, each of those must add their own k nodes (third layer), and so on. But the problem says that the step of adding these k nodes must be done at least once. So the minimal case is after two steps beyond the initial, which gives 1 +k +k².\n\nBut what if we have more steps? Like, after the second layer, we can do a third step where each of the k² nodes adds k children. That would give a fourth layer, and so on.\n\nSo the total number of nodes can be represented as 1 +k*(1 +k +k² + ... +k^{m-1}) ), where m is the number of layers added beyond the initial. Wait, maybe not exactly. Let me think again.\n\nAlternatively, perhaps the total number of nodes is 1 + k * (s), where s is the sum of a geometric series based on the number of steps taken.\n\nLet me model this.\n\nSuppose we perform the expansion step t times. What does that mean?\n\nWait, the initial step is adding the first layer: the root has k children.\n\nThen, each time we expand, every current leaf (those with degree 1) gets replaced by k new nodes. So each expansion step adds a new layer.\n\nFor example:\n\nAfter 0 expansions: 1 node.\n\nAfter 1 expansion (step 1): 1 +k nodes.\n\nAfter 2 expansions (step 2): 1 +k +k².\n\nAfter 3 expansions: 1 +k +k² +k³.\n\nAnd so on.\n\nWait, no. Because each expansion step adds a new layer. So for each expansion, the number of nodes increases by a factor of k.\n\nWait, no, each expansion step adds a new layer, which is multiplying the current number of leaves by k.\n\nWait, let me think step by step.\n\nInitial state: 1 node.\n\nStep 1: add k children to the root. Now total nodes = 1 +k.\n\nEach of these k nodes has degree 1.\n\nStep 2: each of the k nodes adds k children. So adding k*k nodes. Total nodes: 1 +k +k².\n\nNow, each of these k² nodes has degree 1.\n\nStep 3: each of the k² nodes adds k children. So adding k^3 nodes. Total nodes: 1 +k +k² +k³.\n\nThis continues. So each expansion step adds k^m nodes, where m is the expansion step number.\n\nWait, but the problem says that the step of adding edges should be done at least once. So the minimal case is when we have",
    "response": "To solve this problem, we need to determine if a snowflake graph with `n` vertices can exist. The snowflake graph is defined in a specific way, starting with one vertex and expanding by adding layers of vertices according to certain rules.\n\n### Approach\n1. **Understanding the Structure**: The snowflake graph starts with one vertex. Each vertex that has only one edge (degree 1) must connect to `k` new vertices, where `k > 1`. This process must be done at least once.\n2. **Formulating the Problem**: The total number of vertices in a snowflake graph after `m` expansion steps can be represented as a geometric series. Specifically, it is `1 + k * (k^m - 1) / (k - 1)`, where `m` is the number of expansion steps beyond the initial step.\n3. **Checking Validity**: For a given `n`, we need to check if there exists an integer `m` such that `n` can be expressed in the form of the geometric series mentioned above for some `k > 1`.\n\n### Solution Code\n```python\nimport sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Try all possible k values where k = 2,3,4,... up to cube root of n\n    max_k = int((n)**(1/3)) + 2\n    for k in range(2, max_k + 1):\n        m = 1\n        total = 1 + k\n        while True:\n            next_total = total + k ** (m + 1)\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            total = next_total\n            m += 1\n            # Check for further steps without adding new layers\n            if m >= 2 and (total * k) == n:\n                return True\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```\n\n### Explanation\n- **Function `is_snowflake(n)`**: This function checks if `n` can be represented as a valid snowflake graph. It iterates over possible values of `k` and checks if `n` fits the geometric series pattern for any valid `k`.\n- **Iterating Over Possible `k` Values**: We limit the range of `k` based on the cube root of `n` to ensure efficiency.\n- **Geometric Series Check**: For each `k`, we compute the total number of vertices at each expansion step and check if it matches `n`.\n\nThis approach efficiently determines if a snowflake graph with `n` vertices can exist by leveraging mathematical properties of geometric series and iterating within feasible bounds.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Try all possible k values where k = 2,3,4,... up to cube root of n\n    max_k = int((n)**(1/3)) + 2\n    for k in range(2, max_k + 1):\n        m = 1\n        total = 1 + k\n        while True:\n            next_total = total + k ** (m + 1)\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            total = next_total\n            m += 1\n            # Check for further steps without adding new layers\n            if m >= 2 and (total * k) == n:\n                return True\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 534,
        "completion_token_count": 605,
        "thoughts_token_count": 1025
    }
}