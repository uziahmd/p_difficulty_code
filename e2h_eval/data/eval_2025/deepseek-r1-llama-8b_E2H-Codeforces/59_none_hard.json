{
    "start": 1758292177.8170733,
    "end": 1758292205.9767714,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 59,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Happy Sets\n\nDefine a set $$$A$$$ as a child of set $$$B$$$ if and only if for each element of value $$$x$$$ that is in $$$A$$$, there exists an element of value $$$x+1$$$ that is in $$$B$$$.Given integers $$$N$$$ and $$$K$$$. In order to make Chaneka happy, you must find the number of different arrays containing $$$N$$$ sets $$$[S_1, S_2, S_3, \\ldots, S_N]$$$ such that: - Each set can only contain zero or more different integers from $$$1$$$ to $$$K$$$. - There exists a way to rearrange the order of the array of sets into $$$[S'_1, S'_2, S'_3, \\ldots, S'_N]$$$ such that $$$S'_i$$$ is a child of $$$S'_{i+1}$$$ for each $$$1\\leq i\\leq N-1$$$.Print the answer modulo $$$998\\,244\\,353$$$.Two sets are considered different if and only if there is at least one value that only occurs in one of the two sets.Two arrays of sets are considered different if and only if there is at least one index $$$i$$$ such that the sets at index $$$i$$$ in the two arrays are different.\n\n## Input\nThe only line contains two integers $$$N$$$ and $$$K$$$ ($$$1 \\leq N,K \\leq 2\\cdot10^5$$$) â€” the number of sets in the array and the maximum limit for the values in the sets.\n\n## Output\nAn integer representing the number of different arrays of sets that satisfy the problem condition, modulo $$$998\\,244\\,353$$$.\n\n## Example\n### Input\n['2 2', '1 3', '3 1']\n\n### Output\n['11', '8', '4']\n\n## Note\nIn the first example, there are $$$11$$$ different arrays of sets possible, which are:   $$$[\\{\\}, \\{\\}]$$$  $$$[\\{\\}, \\{1\\}]$$$  $$$[\\{\\}, \\{1, 2\\}]$$$  $$$[\\{\\}, \\{2\\}]$$$  $$$[\\{1\\}, \\{\\}]$$$  $$$[\\{1\\}, \\{1, 2\\}]$$$  $$$[\\{1\\}, \\{2\\}]$$$  $$$[\\{1, 2\\}, \\{\\}]$$$  $$$[\\{1, 2\\}, \\{1\\}]$$$  $$$[\\{2\\}, \\{\\}]$$$  $$$[\\{2\\}, \\{1\\}]$$$ \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef main():\n    MOD = 998244353\n    N, K = map(int, input().split())\n\n    # Precompute factorials and inverse factorials\n    factorial = [1] * (N + 1)\n    for i in range(1, N + 1):\n        factorial[i] = (factorial[i - 1] * i) % MOD\n\n    inverse_factorial = [pow(factorial[i], MOD - 2, MOD) for i in range(N + 1)]\n\n    # Function to calculate binomial coefficient\n    def binomial_coefficient(n, k):\n        return (factorial[n] * inverse_factorial[k] * inverse_factorial[n - k]) % MOD\n\n    # Function to calculate the sum of binomial coefficients\n    def sum_binomial_coefficients(k):\n        total = 0\n        for i in range(k + 1):\n            total = (total + binomial_coefficient(k, i)) % MOD\n        return total\n\n    # Calculate the final answer\n    answer = 0\n    for i in range(N + 1):\n        if i > K:\n            break\n        answer = (answer + (sum_binomial_coefficients(i) * pow(2, K - i + 1, MOD))) % MOD\n\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script first calculates the factorials and inverse factorials modulo 998244353. It then uses these values to calculate the binomial coefficients and their sum. The final answer is calculated by summing up the products of the sums of binomial coefficients and 2 raised to the power of K minus i plus one, for all possible values of i.\n\nNote that this script assumes that the input is provided in the format specified in the problem statement, with two integers N and K on each line. The script will output the final answer modulo 998244353.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    MOD = 998244353\n    N, K = map(int, input().split())\n\n    # Precompute factorials and inverse factorials\n    factorial = [1] * (N + 1)\n    for i in range(1, N + 1):\n        factorial[i] = (factorial[i - 1] * i) % MOD\n\n    inverse_factorial = [pow(factorial[i], MOD - 2, MOD) for i in range(N + 1)]\n\n    # Function to calculate binomial coefficient\n    def binomial_coefficient(n, k):\n        return (factorial[n] * inverse_factorial[k] * inverse_factorial[n - k]) % MOD\n\n    # Function to calculate the sum of binomial coefficients\n    def sum_binomial_coefficients(k):\n        total = 0\n        for i in range(k + 1):\n            total = (total + binomial_coefficient(k, i)) % MOD\n        return total\n\n    # Calculate the final answer\n    answer = 0\n    for i in range(N + 1):\n        if i > K:\n            break\n        answer = (answer + (sum_binomial_coefficients(i) * pow(2, K - i + 1, MOD))) % MOD\n\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 685,
        "completion_token_count": 407,
        "thoughts_token_count": 0
    }
}