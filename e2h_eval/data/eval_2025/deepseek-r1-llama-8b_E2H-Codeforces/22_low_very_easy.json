{
    "start": 1758278316.8339522,
    "end": 1758278525.5341344,
    "start-formatted": "2025-09-19 19:38 KST",
    "end-formatted": "2025-09-19 19:42 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about determining the number of successful students in a group based on their marks in various subjects. A student is considered successful if there's at least one subject where they are the best in that particular subject. Being the best means no other student has a higher mark for that subject.\n\nHmm, the input is n students and m subjects. Each student's marks are given as a string of m characters. For each subject, we need to find which student has the highest mark. Then, for each student, check if they are the top in any subject. If yes, count them as successful.\n\nLet me think about how to approach this.\n\nFirst, I'll need to process each subject across all students. For each subject j (from 0 to m-1), find the maximum mark. Then, for each student, check if in any subject j, their mark equals the maximum of that subject.\n\nSo the steps could be:\n\n1. Read the input: n and m, followed by n strings each of length m.\n2. For each of the m subjects, determine the maximum mark among all students.\n3. For each student, check if they have at least one mark equal to the corresponding maximum of any subject.\n4. Count the number of such students.\n\nLet me break it down more.\n\nProcessing each subject:\n\nFor each subject j:\n   collect all the marks from each student in that subject.\n   find the maximum mark.\n   store this maximum mark for subject j.\n\nThen, for each student, look at each of their marks. If any of their marks is equal to the maximum for that subject, then the student is successful.\n\nWait, but how to handle the data?\n\nMaybe create a list of max_marks, where max_marks[j] is the maximum for subject j.\n\nSo first, for each j in 0..m-1:\n\nmax_mark = 0\nfor each student's j-th character:\n   current_mark = int(student_str[j])\n   if current_mark > max_mark:\n       max_mark = current_mark\nso max_marks[j] = max_mark\n\nOnce we have max_marks, then for each student, we can check each subject:\n\nstudent_successful = False\nfor j in 0..m-1:\n   if student's j-th mark == max_marks[j]:\n       student_successful = True\n       break\nif student_successful, increment the count.\n\nYes, that makes sense.\n\nNow, let's think about the data structures.\n\nWe can represent each student's marks as a list of integers. So, for each student, we split their string into individual characters, convert each to integer, and store as a list.\n\nSo for example, for the first sample input:\n\nSample Input:\n3 3\n223\n232\n112\n\nEach student's marks are:\n\nStudent 0: [2,2,3]\nStudent 1: [2,3,2]\nStudent 2: [1,1,2]\n\nFor each subject:\n\nSubject 0: max is 2 (since students 0 and 1 have 2, others have lower)\nWait, wait, no. Wait, looking at the sample note:\n\nIn the first sample, student 1 is the best at subjects 1 and 3, student 2 is best at subjects 1 and 2. Wait, maybe I'm getting the indices wrong.\n\nWait, perhaps the subjects are 0-based or 1-based? The problem says \"subjects\" but the code should treat each position as a separate subject.\n\nWait, no, the problem says for each subject, the student is the best if no one has a higher mark. So for each subject, we just compare all the marks and take the maximum.\n\nIn the first sample:\n\nStudent 0: 2,2,3 → subjects 0,1,2?\nWait, no, the input is a string like '223' which is 3 digits, each digit is a subject. So for the first sample, m=3.\n\nSo for subject 0, the marks are 2,2,1. Max is 2.\nSubject 1: 2,3,1. Max is 3.\nSubject 2: 3,2,2. Max is 3.\n\nSo for each subject, find the maximum.\n\nThen, for each student, check if any of their marks equals any of the max_marks.\n\nSo for student 0: his marks are 2,2,3.\n\nCheck subject 0: his mark is 2, which is not the max (subject 0's max is 2). Wait, but he has 2, which is equal to the max. So for subject 0, he is tied with student 1.\n\nWait, in the note, the first sample says student 1 is the best at subjects 1 and 3. Hmm, maybe I'm miscounting.\n\nWait, in the note, the",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark for that subject.\n\n### Approach\n1. **Read Input:** Read the number of students `n` and the number of subjects `m`, followed by the gradebook data for each student.\n2. **Determine Maximum Marks:** For each subject, find the maximum mark among all students.\n3. **Check Successful Students:** For each student, check if they have at least one mark equal to the maximum mark for any subject. Count such students as successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    s = input().strip()\n    marks = [int(c) for c in s]\n    students.append(marks)\n\nmax_marks = []\nfor j in range(m):\n    current_max = 0\n    for i in range(n):\n        if students[i][j] > current_max:\n            current_max = students[i][j]\n    max_marks.append(current_max)\n\ncount = 0\nfor i in range(n):\n    is_successful = False\n    for j in range(m):\n        if students[i][j] == max_marks[j]:\n            is_successful = True\n            break\n    if is_successful:\n        count += 1\n\nprint(count)\n```\n\n### Explanation\n1. **Reading Input:** The input is read and parsed into the number of students and subjects. Each student's marks are stored as a list of integers for easy access.\n2. **Finding Maximum Marks:** For each subject, iterate through all students' marks to determine the highest mark. This is stored in a list where each index corresponds to a subject.\n3. **Checking Success:** For each student, check each subject to see if their mark matches the maximum mark for that subject. If a match is found, the student is marked as successful.\n4. **Counting Successful Students:** The total number of successful students is counted and printed as the result.\n\nThis approach efficiently processes each subject and student, ensuring that we correctly identify all successful students based on the given criteria.",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    s = input().strip()\n    marks = [int(c) for c in s]\n    students.append(marks)\n\nmax_marks = []\nfor j in range(m):\n    current_max = 0\n    for i in range(n):\n        if students[i][j] > current_max:\n            current_max = students[i][j]\n    max_marks.append(current_max)\n\ncount = 0\nfor i in range(n):\n    is_successful = False\n    for j in range(m):\n        if students[i][j] == max_marks[j]:\n            is_successful = True\n            break\n    if is_successful:\n        count += 1\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 431,
        "completion_token_count": 465,
        "thoughts_token_count": 1025
    }
}