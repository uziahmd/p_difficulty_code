{
    "start": 1758278110.0216072,
    "end": 1758278278.1126847,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about building houses on a street with certain restrictions and maximizing the profit. Each house contributes a squared value of its height to the total profit. But there are m restrictions that limit the maximum height in specific ranges.\n\nHmm, so the goal is to assign heights to each spot such that all restrictions are satisfied, and the sum of squares is maximized.\n\nLet me think about how to model this. It seems like a dynamic programming problem because for each spot, the choice of height depends on the previous choices, especially considering overlapping restrictions.\n\nWait, but n and m are up to 50, which isn't too bad. So maybe a DP approach where we track the possible heights at each position, considering all the constraints up to that point.\n\nAlternatively, perhaps we can model this as a graph where each state represents the current position and the height chosen, and edges represent transitions to the next position with the height chosen there. The constraints must be checked as we build the solution.\n\nBut I'm not sure. Maybe another approach: For each position i, decide what's the maximum possible height it can take without violating any restriction that applies to it. Then, the problem reduces to choosing a height for each spot such that all applicable restrictions are met, and the sum of squares is maximized.\n\nWait, but each restriction is about a range [l_i, r_i], and the maximum height in that range must be <= x_i. So, for each spot, the maximum height allowed is the minimum x_j among all restrictions that include this spot. Oh right! Because if any restriction includes the spot, the height can't exceed x_j for that restriction. So for each spot k, the maximum allowed height is the minimum x_i across all restrictions that cover k.\n\nWait, no, that's not correct. Because a single spot can be covered by multiple restrictions. For example, spot 3 could be in restriction A (covers 2-4) and restriction B (covers 3-5). So the maximum height allowed for spot 3 is the minimum of A's x and B's x. Because the tallest in A's range (which includes 3) can't exceed A.x, and similarly for B's. So the maximum height for spot 3 is min(A.x, B.x).\n\nWait, but that's only true if all those restrictions apply. Or wait, no: For each restriction that covers spot k, the maximum height of the entire range (including k) can't exceed x_i. So for k, the maximum possible height is the minimum of all x_i for restrictions that include k. Because if any of them says the max in their range is x_i, then k's height must be <=x_i. So the maximum possible is the smallest x_i across all applicable restrictions for k.\n\nSo first, for each spot k, compute the maximum allowed height as the minimum x from all restrictions that include k in their l_i to r_i range. If a spot is not covered by any restriction, then its maximum is h.\n\nOnce we have for each spot the maximum possible height, the problem becomes assigning a height a_k to each spot, where a_k <= max_h[k], and then the sum of a_k^2 is maximized. But wait, no, because some spots may have their max_h set by multiple restrictions, but perhaps some higher restrictions don't actually constrain their neighbors. Hmm, maybe not. Because the max_h[k] is the tightest constraint, so for each spot, a_k can't exceed that.\n\nWait, no. Because suppose spot k is in restriction A (x=5) and B (x=3). So the max allowed is min(5,3)=3. So any assignment to a_k must be <=3. So the initial step is to compute for each spot k, the maximum allowed height is the minimum of all x_i for restrictions that include k. That way, all the restrictions are accounted for.\n\nSo now the problem is transformed into choosing a_k for each spot, where a_k <= max_h[k], and the sum of squares is maximized. Since each a_k can be up to h, but with their individual max_h.\n\nBut wait, what if two restrictions overlap but aren't both the limiting factor for a particular spot? Like, for a spot covered by two restrictions, one allows higher and another lower. The lower one is the limiting factor.\n\nSo, for each spot, the maximum allowed is the minimum x across all applicable restrictions. So the first thing to do is to precompute for each spot its max allowed height.\n\nThen, the problem becomes selecting a_k for each spot, a_k <= max_allowed[k], to maximize the sum of squares.\n\nThis is a classic optimization problem. Since the square function is convex, the optimal solution is to set each a_k as high as possible within their constraints. Because the square increases with the value.\n\nWait, yes",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to given zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction limits the maximum height within a specific range.\n\n### Approach\n1. **Understand Restrictions**: Each restriction specifies a range and a maximum height. For each spot, the maximum allowed height is the minimum value derived from all applicable restrictions.\n2. **Determine Maximum Heights**: For each spot, compute the maximum allowed height by considering the smallest value from all restrictions that include that spot.\n3. **Maximize Profit**: Once we know the maximum allowed height for each spot, the optimal strategy is to build the tallest possible house at each spot within its constraints. This is because the square function is convex, meaning higher values yield higher profits.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\n# Compute max height for each position\nmax_h = [h] * (n + 1)  # positions are 1-based\nfor l, r, x in restrictions:\n    for k in range(l, r + 1):\n        if max_h[k] > x:\n            max_h[k] = x\n\n# Now, each position can be up to max_h[k], and we want to choose a_k as large as possible to maximize sum of squares\nprofit = 0\nfor i in range(1, n + 1):\n    profit += max_h[i] ** 2\n\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The input consists of the number of spots, the maximum height, and the number of restrictions. Each restriction specifies a range and a maximum height.\n2. **Compute Maximum Allowed Heights**: For each spot, determine the tightest restriction (smallest maximum height) that applies to it. This ensures all restrictions are respected.\n3. **Calculate Profit**: The profit is maximized by choosing the highest possible height for each spot within its computed maximum allowed height, as this contributes the most to the profit due to the square function's properties.\n\nThis approach efficiently computes the optimal heights and ensures all constraints are met, providing the maximum possible profit.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\n# Compute max height for each position\nmax_h = [h] * (n + 1)  # positions are 1-based\nfor l, r, x in restrictions:\n    for k in range(l, r + 1):\n        if max_h[k] > x:\n            max_h[k] = x\n\n# Now, each position can be up to max_h[k], and we want to choose a_k as large as possible to maximize sum of squares\nprofit = 0\nfor i in range(1, n + 1):\n    profit += max_h[i] ** 2\n\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 811,
        "completion_token_count": 492,
        "thoughts_token_count": 1025
    }
}