{
    "start": 1758284050.236186,
    "end": 1758286268.2305257,
    "start-formatted": "2025-09-19 21:14 KST",
    "end-formatted": "2025-09-19 21:51 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, I have to solve this problem where I need to find the minimum number of nodes required to create a p-reachable directed graph and then determine the maximum number of unidirectional pairs among such graphs with that minimum number of nodes.\n\nLet me first understand what a p-reachable directed graph is. So, a p-reachable graph has exactly p ordered pairs (u, v) such that u < v, u and v are reachable from each other. So, these pairs form an undirected edge between u and v in the underlying undirected graph. But since it's a directed graph, for each such pair, there's a path in both directions, but not necessarily a direct edge.\n\nWait, no. Wait, the definition says that u and v are reachable from each other. So for each such pair, u can reach v and v can reach u. So in the undirected sense, they are connected. The p refers to the number of such edges in the undirected graph.\n\nSo, the problem reduces to: find a graph where the number of edges in the underlying undirected graph is exactly p, and we want to minimize the number of nodes. Then, for the minimal node count, arrange the edges in such a way that the number of unidirectional pairs (which are directed edges that are not part of any mutual reachability) is maximized.\n\nHmm, so first, let's think about the minimal number of nodes. For a given p, what's the smallest n such that the maximum number of edges in an undirected graph with n nodes is at least p? Because the undirected graph must have exactly p edges, right? Because each edge contributes to one pair (u, v) where u < v, and they are reachable.\n\nWait, no. Because in the directed graph, each pair (u, v) where u can reach v and v can reach u implies that u < v or v < u. But when considering all such pairs, each undirected edge corresponds to exactly one such ordered pair. So the total number of such ordered pairs is equal to the number of edges in the underlying undirected graph. So p is equal to the number of edges in the undirected version of the directed graph.\n\nSo, the problem is equivalent to finding an undirected graph with exactly p edges, and we need the minimal n such that the maximal number of edges in an undirected graph with n nodes is >= p. Because the directed graph's undirected counterpart must have exactly p edges.\n\nWait, no. Because the directed graph must be such that for every edge in the undirected graph, both directions are present as paths, but perhaps not as direct edges. So the undirected graph's edge count is p, which is fixed.\n\nSo, to find the minimal n where the maximum possible edges in an undirected graph with n nodes is >= p. But wait, the maximum possible edges is n*(n-1)/2. So we need the smallest n where n(n-1)/2 >= p.\n\nFor example, if p=3, then 3*2/2 =3 >=3, so n=3 is possible. If p=4, 3*2/2=3<4, so n=4, since 4*3/2=6>=4.\n\nSo, the minimal n is the smallest integer satisfying n(n-1)/2 >=p.\n\nSo, how do we compute that?\n\nWe can solve for n in n(n-1)/2 >= p.\n\nThis is a quadratic equation. Let's approximate n^2/2 ~ p => n ~ sqrt(2p). So, we can compute n by checking consecutive integers until we find the minimal n where n(n-1)/2 >=p.\n\nOnce n is determined, we have to construct a directed graph where the undirected version has exactly p edges, and we need to maximize the number of unidirectional pairs.\n\nWait, but in the directed graph, each edge can be either present or not. The unidirectional pairs are those (u, v) where u can reach v but v cannot reach u. Since the undirected graph requires that for each edge in the undirected graph, u and v can reach each other, but in the directed graph, maybe the edges are arranged in a certain way.\n\nWait, the directed graph must have exactly p ordered pairs (u, v) where u < v, u can reach v, and v can reach u. So, each edge in the undirected graph contributes exactly one such ordered pair. So, the directed graph's underlying undirected graph has p edges.\n\nSo, the problem reduces to: find a directed graph whose underlying undirected graph has exactly p edges. We need to find the minimal n where n(n-1)/2 >= p, and then arrange the edges such that the number of unidirectional pairs is maximized.\n\nNow, the next part is to find the maximum number of unidirectional pairs in such a graph.\n\nUnidirectional pairs are those (u, v) where u can reach v but v cannot reach u. But since the undirected graph has edges that allow mutual reachability, for each edge in the undirected graph, the directed graph may have some edges that allow u to reach v but not necessarily the reverse.\n\nWait, but wait: the directed graph's undirected version must have exactly p edges, meaning that for each edge in the undirected graph, there exists a path from u to v and vice versa. So, for each undirected edge, the directed graph must have at least one path from u to v and one from v to u. But in the directed graph, the actual edges may vary.\n\nBut the problem is to maximize the number of unidirectional pairs, which are directed edges (u, v) where u can reach v, but v cannot reach u. However, these directed edges are not part of the p edges (since each undirected edge contributes exactly one ordered pair (u, v) where u < v, and they are mutually reachable).\n\nWait, no. Wait, the p is the count of ordered pairs (u, v) where u < v, and u can reach v and v can reach u. So, each such pair is an unordered edge in the undirected graph.\n\nEach such unordered edge contributes exactly one to p. So the directed graph can have more edges beyond the ones necessary for the undirected edges. Those additional edges could create unidirectional pairs.\n\nAh, right! So, in the directed graph, the underlying undirected graph has exactly p edges. But the directed graph can have more edges, which might create unidirectional pairs. Our goal is to maximize the number of such unidirectional pairs.\n\nSo, the question becomes: given that the undirected graph has exactly p edges, what's the maximum number of unidirectional pairs possible in the directed graph.\n\nAn unidirectional pair is a directed edge (u, v) where u can reach v, but v cannot reach u. But for the underlying undirected graph, u and v are connected, so there's a path from v to u. But perhaps, in the directed graph, there's no direct or indirect path from v to u through the added edges.\n\nWait, no. Because in the underlying undirected graph, there's a path from u to v and from v to u. So, if in the directed graph, the added edges allow u to reach v but not the other way around, then (u, v) would be a unidirectional pair.\n\nWait, no. Wait, because in the undirected graph, even if you add edges, u can reach v, and v can reach u via the existing undirected edges. So, unless the directed graph somehow removes the possibility of reaching from v to u via the undirected edges, but that's not possible because the undirected edges are still present as paths.\n\nWait, no. Because the directed graph is built on top of the undirected graph's structure. So, the undirected edges are still present as paths, regardless of the direction of the edges.\n\nWait, no. Because the undirected graph is the base, so for any edge (u, v), the directed graph can have either u→v or v→u, or both. But for the undirected graph to have exactly p edges, each such edge corresponds to one ordered pair (u, v) where u < v, and they are reachable in both directions.\n\nSo, the directed graph's underlying undirected graph is a simple graph with exactly p edges. Now, the directed graph can have additional edges beyond this.\n\nThese additional edges can create unidirectional pairs. For example, suppose we have an edge u→v in the directed graph. If there's no path from v to u, then (u, v) is an unidirectional pair. But since the underlying undirected graph has u connected to v, there must be a path from v to u. So, adding u→v doesn't make it unidirectional, because v can reach u via the undirected edges.\n\nWait, this is confusing. Let me think again.\n\nIn the directed graph:\n\n- The underlying undirected graph has exactly p edges.\n- For any two nodes u and v connected by an undirected edge, there's a path from u to v and from v to u in the directed graph.\n\nBut wait, no. Because the directed graph may not have the edges to allow that. Wait, no, because the undirected graph's structure is that u and v are connected, so regardless of the directed edges, the path exists via other nodes.\n\nWait, no. Because the directed graph's undirected version is considered, but the directed edges can affect reachability. Hmm, perhaps I'm getting mixed up.\n\nWait, no. The reachability is determined by the directed edges. The underlying undirected graph is just the graph where each undirected edge represents a mutual reachability in the directed graph.\n\nSo, for the directed graph, the reachability is based on the directed edges. So, even if u and v are connected via an undirected edge (i.e., there's a path from u to v and v to u), in the directed graph, if the only edges are u→v and v→u, then both (u, v) and (v, u) are mutual. So, if we add another edge u→w, which is part of the same connected component, then u can reach w and w can reach u via the other nodes.\n\nWait, I think I'm overcomplicating.\n\nThe key point is that in the directed graph:\n\n- Each undirected edge (u, v) implies that u can reach v and v can reach u. So, the underlying undirected graph is the set of edges that represent such mutual reachability.\n\nThe directed graph can have more edges, which can create additional reachability possibilities. These additional edges can create unidirectional pairs.\n\nWait, no. Because adding an edge u→v doesn't change the fact that v can reach u via the undirected edges. So, the unidirectional pair (u, v) would require that u can reach v but v cannot reach u, but since u and v are connected in the undirected graph, v can reach u through some path, possibly through other nodes.\n\nTherefore, any additional edge u→v cannot create a unidirectional pair, because v can still reach u via the undirected edges. So, the only way to have a unidirectional pair is to have an edge u→v, but also have v unable to reach u through the directed graph. But since the undirected graph already ensures that v can reach u via some path, perhaps the directed graph's additional edges don't interfere with that.\n\nWait, perhaps I'm wrong here. Let me think with an example.\n\nSuppose the undirected graph has three nodes A, B, C, forming a triangle. So, each pair is connected. Now, in the directed graph, suppose we have edges A→B, B→C, and C→A. This forms a cycle, so all pairs can reach each other. Now, if I add an edge A→C, does that create any unidirectional pairs?\n\nNo, because A can reach C directly, and C can reach A via B. So, (A, C) is a mutual pair. Similarly, adding any edge won't create a unidirectional pair.\n\nBut what if I have a directed acyclic graph (DAG) as the underlying structure? For example, A→B and B→C, but no edges back. Then, in the undirected graph, A, B, C are connected. Now, can I have any unidirectional pairs in the directed graph?\n\nWell, (A, B) is mutual because A can reach B and B can reach A via C? No, wait. If the directed graph is A→B and B→C, but C can't reach A. Then, the undirected graph is A-B-C connected. But in the directed graph, can B reach A? No. So, the undirected graph would have edges A-B, B-C, and C-A? Or is the undirected graph determined solely by the mutual reachability?\n\nHmm, this is getting complicated.\n\nWait, perhaps I should model the reachability correctly. The underlying undirected graph is the condensation of the directed graph into its strongly connected components (SCCs). Each SCC is a single node in the undirected graph. The edges between these nodes represent the reachability between different SCCs.\n\nWait, no. The condensation is a DAG where each node represents an SCC of the original graph. An edge exists between two nodes if there's a directed edge from any node in one SCC to any node in the other in the original graph.\n\nSo, in the directed graph, the underlying undirected graph would have an edge between two components if their corresponding SCCs are connected via a path in the condensation DAG.\n\nBut I'm not sure if this helps directly.\n\nAlternatively, perhaps the problem is easier if I consider that the directed graph must have exactly p mutual edges, and the rest can be as non-mutual as possible.\n\nWait, no. Because the p is the number of mutual edges, each contributing one ordered pair (u, v) where u < v and both can reach each other.\n\nSo, in the directed graph, we can have other edges that are not part of these mutual pairs. These edges can potentially create new reachabilities.\n\nBut for the unidirectional pairs, we need edges (u, v) where u can reach v but v cannot reach u. But since the underlying undirected graph allows v to reach u, perhaps the only way to have a unidirectional pair is if the directed edge u→v is present, but the reverse is not, and also, the condensation of the graph doesn't allow v to reach u through other paths.\n\nWait, that seems unlikely because the underlying undirected graph ensures that u and v are connected, meaning there's a path from v to u. So, unless the directed graph somehow breaks this, but I don't see how that's possible.\n\nWait, maybe not. Because in the directed graph, even if you have u→v, if v can reach u via another path, then (u, v) is not unidirectional. So, the only way to have a unidirectional pair is if u can reach v via some path, but v cannot reach u via any path, including through other nodes.\n\nBut that's impossible because the undirected graph implies that u and v are connected, so v can reach u through some path in the directed graph.\n\nWait, no. Because the directed graph's undirected version is the one that determines reachability. So, if u and v are connected in the undirected graph, then in the directed graph, there must exist a path from u to v and from v to u, regardless of the direction of the edges.\n\nWait, that makes sense. So, for any two nodes u and v, if they are in the same connected component in the directed graph, then there's a path from u to v and from v to u. So, if u can reach v, v can also reach u.\n\nSo, this suggests that in the directed graph, for any directed edge u→v, v can reach u via some path, implying that (u, v) is a mutual pair. Therefore, the number of unidirectional pairs is zero.\n\nWait, that's conflicting with the example given in the problem statement.\n\nIn the sample input, when p=3, the output is 3 0. So, the maximum number of unidirectional pairs is zero.\n\nHmm, that suggests that my earlier reasoning was correct.\n\nSo, if the underlying undirected graph has p edges, then in the directed graph, for any directed edge u→v, v can reach u via some path, making (u, v) a mutual pair. Thus, the number of unidirectional pairs is zero.\n\nBut that contradicts the sample, where for p=3, the output is 3 0.\n\nWait, in the sample explanation, the maximum number of unidirectional pairs is zero. That aligns with this reasoning.\n\nWait, but how? Because in the sample, the graph is a directed cycle: A→B, B→C, C→A. In this case, all directed edges form a cycle, so for each (u, v), there's a path in both directions. Thus, no unidirectional pairs.\n\nSo, the maximum number of unidirectional pairs is zero.\n\nBut wait, what if the directed graph is not a single cycle but has multiple edges?\n\nSuppose the undirected graph is a chain: A-B-C. So, p=2 (edges AB and BC). Then, in the directed graph, perhaps A→B and B→C, but C cannot reach A or B. Wait, but that's not possible because in the undirected graph, A and C are connected, so C can reach A via B. So, in the directed graph, C can reach A via B's directed edges.\n\nWait, no. If B→C, but C cannot reach B. Then, how does C reach A? It can't, because in the undirected graph, C is connected to B, but if the directed graph only has B→C, then C can't reach B, so C can't reach A either.\n\nWait, but then in the undirected graph, A and C are connected, so there must be a path from C to A in the directed graph. How? Because the undirected graph's structure implies that.\n\nWait, perhaps the directed graph's reachability is based on the directed edges, not the undirected structure. So, the underlying undirected graph is constructed from the directed graph's reachability. So, in the directed graph, if u can reach v, then in the undirected version, u and v are connected.\n\nBut then, the undirected graph's edges are determined by the reachability in the directed graph. So, for the directed graph, the underlying undirected graph is a graph where each edge represents a mutual reachability.\n\nWait, that's a different approach. So, the underlying undirected graph's edges are determined by the mutual reachability in the directed graph.\n\nThus, for any two nodes u and v, if u can reach v and v can reach u, then there is an edge between them in the undirected graph. So, the undirected graph is the symmetric closure of the directed graph's reachability.\n\nIn that case, the problem is to construct a directed graph such that the symmetric closure has exactly p edges. Then, the directed graph can have more edges, which may create additional reachabilities.\n\nWait, but for the unidirectional pairs, we're considering directed edges (u, v) where u can reach v but v cannot reach u. But in the symmetric closure, if u can reach v, then v can reach u, so such a directed edge would not be present in the directed graph.\n\nWait, no. Because the symmetric closure is about reachability, not about the directed edges themselves. So, for the directed edge (u, v), if u can reach v, then v can reach u, but that doesn't mean that the directed edge (v, u) exists.\n\nHmm, I'm getting stuck here. Maybe I should try to re-express the problem.\n\nGiven that the directed graph's symmetric closure (undirected graph) has exactly p edges, what is the maximum number of directed edges (u, v) such that in the directed graph, u can reach v but v cannot reach u.\n\nBut in the symmetric closure, if u can reach v, then v can reach u, so in the directed graph, u can reach v, but whether v can reach u depends on the directed edges.\n\nWait, no. The symmetric closure is the undirected graph formed by mutual reachability. So, if u can reach v in the directed graph, then in the undirected graph, there's an edge between u and v. That implies that v can reach u via some path in the directed graph.\n\nBut that's not necessarily true. Because the directed graph's reachability is determined by the directed edges, and the undirected graph is the closure of mutual reachability.\n\nWait, maybe I'm mixing up the concepts. Let me clarify.\n\nThe undirected graph is defined as follows: for any two nodes u and v, there is an edge between them if and only if u can reach v and v can reach u in the directed graph.\n\nSo, the undirected graph is the symmetric closure of the directed graph's reachability.\n\nSo, in the directed graph, if u can reach v, then v can reach u if and only if there is an edge between them in the undirected graph.\n\nThus, for any directed edge (u, v) in the directed graph, if u can reach v, then v can reach u via some path in the directed graph. Because the undirected graph has an edge between u and v, which means v can reach u.\n\nWait, no. Because the undirected graph is determined by mutual reachability, not by the presence of directed edges. So, if the directed graph has a path from u to v, but not from v to u, then in the undirected graph, there is no edge between u and v. But that's not possible because the undirected graph is the symmetric closure.\n\nWait, this is getting too tangled. Perhaps I should look for another approach.\n\nLet me think about the problem in terms of the directed graph and the unidirectional pairs.\n\nAn unidirectional pair is a directed edge (u, v) such that u can reach v, but v cannot reach u. But in the undirected graph, since u and v are connected, v can reach u via some path. So, how can (u, v) be unidirectional?\n\nIt can't. Because if u can reach v, then in the undirected graph, there's a path from v to u. Thus, in the directed graph, v can reach u, making (u, v) a mutual pair.\n\nWait, that's a crucial point. So, in the directed graph, for any directed edge (u, v), if u can reach v, then v can reach u via the undirected graph's structure, which in turn implies that in the directed graph, v can reach u.\n\nWait, no. Because the directed graph's reachability is determined by the directed edges. The undirected graph is the symmetric closure of reachability, meaning that for any u and v, if there's a path from u to v in the directed graph, then v can reach u via some path, possibly through other nodes.\n\nWait, no. Because the undirected graph is the symmetric closure, so if u can reach v, then v can reach u, hence the undirected graph has an edge between them. Thus, the directed graph must have a path from v to u, which implies that (v, u) is a directed edge or a path of directed edges.\n\nBut that doesn't necessarily mean that the directed graph has a direct edge from v to u. It just means that there's a path.\n\nSo, if the directed graph has a directed edge u→v, then in the undirected graph, there's an edge between u and v. Hence, the directed graph must have a path from v to u, which could be through other nodes.\n\nSo, for any directed edge u→v, the directed graph allows v to reach u via some path, making (u, v) a mutual pair. Therefore, the number of unidirectional pairs is zero.\n\nBut this contradicts the sample input where the output is 0 unidirectional pairs.\n\nWait, the sample input for p=3 gives an output where the maximum number of unidirectional pairs is 0. So, that aligns with this conclusion.\n\nSo, perhaps the maximum number of unidirectional pairs is always zero.\n\nBut why? Because in the directed graph, for any directed edge u→v, since the undirected graph has an edge between u and v, implying that v can reach u, thus (u, v) is a mutual pair, not unidirectional.\n\nThus, the number of unidirectional pairs is zero.\n\nWait, but then why does the problem ask for the maximum number of unidirectional pairs? Because according to this reasoning, it's always zero.\n\nBut that's not the case. Let me think again.\n\nWait, perhaps the unidirectional pairs are not counted as part of the p. The p counts the mutual pairs, and the unidirectional pairs are the directed edges that are not part of the mutual pairs.\n\nBut according to the problem statement, the p is the number of ordered pairs (u, v) where u < v, u can reach v, and v can reach u. So, each such pair contributes to p.\n\nThe unidirectional pairs are the directed edges (u, v) where u can reach v but v cannot reach u. But since the undirected graph has an edge between u and v, v can reach u via some path, possibly through other nodes.\n\nSo, in the directed graph, if there's a directed edge u→v, then v can reach u via the undirected graph's structure, but not necessarily directly. So, in the directed graph, (u, v) is a mutual pair, but perhaps through other nodes.\n\nBut for the unidirectional pair to exist, the directed edge (u, v) must exist, and there must be no path from v to u. But since the undirected graph has an edge between u and v, v can reach u via some path in the directed graph, making (u, v) a mutual pair.\n\nThus, the number of unidirectional pairs is zero.\n\nBut then, why does the problem ask for the maximum number of unidirectional pairs?\n\nAh, perhaps I'm misunderstanding the definition of unidirectional pairs. Let me read the problem statement again.\n\nAn ordered pair (u, v) is unidirectional if u != v, there's a path from u to v, and no path from v to u.\n\nSo, the unidirectional pairs are directed edges (u, v) where u can reach v, but v cannot reach u.\n\nBut in the undirected graph, u and v are connected, so v can reach u via some path in the directed graph. So, how can v not reach u?\n\nThat's impossible. Because the undirected graph is the symmetric closure of the directed graph's reachability. So, if u can reach v, then v can reach u, implying that in the directed graph, there's a path from v to u.\n\nThus, the directed graph must have a path from v to u, meaning that (v, u) is a mutual pair.\n\nWait, no. Because the directed graph's reachability is determined by the directed edges, not by the undirected graph.\n\nWait, perhaps the undirected graph is the symmetric closure, which is separate from the directed graph's structure.\n\nSo, for any two nodes u and v, if there's a path from u to v in the directed graph, then in the undirected graph, there's an edge between u and v. Which implies that v can reach u via some path in the directed graph.\n\nThus, in the directed graph, for any directed edge u→v, v can reach u via some path, making (u, v) a mutual pair, not unidirectional.\n\nTherefore, the maximum number of unidirectional pairs is zero.\n\nBut that can't be right because the sample shows that for p=3, the output is 3 nodes and 0 unidirectional pairs.\n\nSo, perhaps the maximum number of unidirectional pairs is indeed zero.\n\nBut then, the second part of the problem is to find zero, which is straightforward.\n\nSo, perhaps the unidirectional pairs are zero in all cases. Then, the problem's second part is to output zero.\n\nBut that seems too easy, and perhaps I'm misunderstanding something.\n\nWait, perhaps the unidirectional pairs are not considering the directed edges in the directed graph, but only the directed edges that are not part of any mutual pair.\n\nWait, that's not how the problem defines it. The problem states that a unidirectional pair is an ordered pair (u, v) where u can reach v and v cannot reach u.\n\nBut since the undirected graph has an edge between u and v, v can reach u via some path in the directed graph.\n\nThus, the number of unidirectional pairs is zero.\n\nSo, perhaps the answer is that the maximum number of unidirectional pairs is always zero.\n\nBut then, why does the problem ask for it? Maybe I'm missing something.\n\nAlternatively, perhaps the unidirectional pairs are the edges that are not part of the p mutual pairs.\n\nWait, but the p is the count of mutual pairs, each contributing exactly one ordered pair (u, v) where u < v.\n\nSo, in the directed graph, besides these p mutual pairs, there can be other directed edges that create unidirectional pairs.\n\nBut according to the earlier reasoning, these edges would imply that u can reach v, but since the undirected graph connects u and v, v can reach u via some path, making (u, v) a mutual pair, not unidirectional.\n\nHmm, perhaps I'm getting stuck and need to look for a mathematical approach.\n\nLet me denote n as the minimal number of nodes required to form a p-reachable directed graph. As established earlier, n is the smallest integer such that n(n-1)/2 >= p.\n\nSo, for each n, compute the maximal number of unidirectional pairs.\n\nBut according to the earlier reasoning, the number of unidirectional pairs is zero.\n\nBut perhaps I'm wrong, and the unidirectional pairs can exist.\n\nWait, perhaps the directed graph can have edges that create a situation where u can reach v but v cannot reach u, even though u and v are connected in the undirected graph.\n\nBut how is that possible?\n\nBecause in the undirected graph, u and v are connected, which implies that there's a path from u to v and from v to u in the directed graph.\n\nSo, if u can reach v, then v can reach u, making (u, v) a mutual pair, not unidirectional.\n\nThus, the number of unidirectional pairs is zero.\n\nSo, the maximum number of unidirectional pairs is zero.\n\nBut then, why in the sample input for p=3, the output is 0 unidirectional pairs.\n\nYes, that aligns with this conclusion.\n\nThus, the problem's second part is to output zero.\n\nSo, the overall solution is:\n\n- Compute the minimal n such that n(n-1)/2 >= p.\n- Output n and 0.\n\nWait, but what about when p=0? Then, the graph has no edges. So, the minimal n is 0 or 1? Because if p=0, the graph has no mutual pairs. So, the minimal n is 0, since a graph with zero nodes can't have any edges.\n\nWait, no. Because a graph with zero nodes can't have any edges. But for p=0, the graph can have zero edges. So, the minimal n is zero.\n\nBut according to the sample input, when p=0, the output is '0 0'.\n\nSo, yes.\n\nSo, the steps for the code:\n\n1. Read p from input.\n2. Compute the minimal n where n(n-1)/2 >= p.\n   - If p is zero, n is zero.\n   - Else, compute n using binary search or by solving the quadratic equation.\n3. Output n and 0.\n\nWait, but what about p=1? Let's compute n.\n\nn=2: 2*1/2=1 >=1 → yes. So, minimal n is 2.\n\nOutput is 2 0.\n\nAnother test case: p=4.\n\nn=4: 4*3/2=6 >=4. So, minimal n is 4.\n\nBut wait, 3*2/2=3 <4, so n=4.\n\nThus, the code needs to compute n correctly.\n\nSo, the plan is:\n\nCompute n as the minimal integer where n(n-1)/2 >= p.\n\nIf p=0, n=0.\n\nElse, find the minimal n such that n(n-1)/2 >= p.\n\nOnce n is found, output n and 0.\n\nThus, the code can be written as follows.\n\nBut now, let's think about implementing this.\n\nImplementing the minimal n:\n\nWe can compute n by solving the inequality n^2 -n - 2p >=0.\n\nThe roots are [1 ± sqrt(1 + 8p)] / 2.\n\nWe take the positive root, so n is the ceiling of [1 + sqrt(1+8p)] / 2.\n\nBut we have to handle the cases where n(n-1)/2 >=p.\n\nWait, let's test for p=3:\n\nsqrt(25)=5 → (1+5)/2=3 → 3*2/2=3 >=3 → correct.\n\np=4: sqrt(33)=~5.744 → (1+5.744)/2≈3.37 → ceil is 4. 4*3/2=6 >=4.\n\np=0: returns 0.\n\nBut for p=1: sqrt(9)=3 → (1+3)/2=2 → 2*1/2=1 >=1.\n\nYes.\n\nSo, the code can compute n as:\n\nif p ==0:\n    n=0\nelse:\n    compute the minimal n where n(n-1)/2 >=p.\n\nThus, the code can be written.\n\nNow, handling the computation of n.\n\nIn Python, for p=0, return 0.\n\nElse, compute n as the smallest integer where n*(n-1)//2 >=p.\n\nWe can compute it via binary search.\n\nAlternatively, compute the real root and take the ceiling.\n\nLet me implement it via binary search.\n\nInitialize low=0, high=some value until we find the minimal n.\n\nBut for p up to 2e5, binary search is feasible.\n\nSo, the code can proceed as:\n\nRead p.\n\nif p ==0:\n    print(0 0)\nelse:\n    compute n.\n\nNow, in code:\n\ndef find_min_n(p):\n    if p ==0:\n        return 0\n    # Find the minimal n where n(n-1)/2 >=p\n    left = 0\n    right = 2 * int((2*p)**0.5) +2  # upper bound\n    while left < right:\n        mid = (left + right) //2\n        val = mid*(mid-1)//2\n        if val >=p:\n            right = mid\n        else:\n            left = mid +1\n    return left\n\nThen, output min_n and 0.\n\nTesting:\n\nFor p=3:\n\nfind_min_n(3) should return 3.\n\nFor p=4:\n\nfind_min_n(4) returns 4.\n\nFor p=1:\n\nreturns 2.\n\nFor p=0:\n\nreturns 0.\n\nYes.\n\nThus, the code will output the correct n and 0.\n\nSo, the final code is:\n\nRead p from input.\n\nCompute n as above.\n\nPrint n and 0.\n\nThus, the code can be written as:\n\np = int(input())\nif p ==0:\n    print(\"0 0\")\nelse:\n    # Binary search for n\n    left = 0\n    right = 2 * 10**5 * 2  # Some large enough number\n    while left < right:\n        mid = (left + right) //2\n        val = mid * (mid -1) //2\n        if val >= p:\n            right = mid\n        else:\n            left = mid +1\n    print(f\"{left} 0\")\n\nWait, but wait: for p=1, the binary search will find mid=2, which satisfies 2*1/2=1 >=1.\n\nYes.\n\nBut perhaps the initial right is not needed to be that large. Alternatively, use the formula-based approach.\n\nBut binary search is safe.\n\nThus, the code should work correctly.\n",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs in such a graph. \n\n### Approach\n\n1. **Understanding p-reachable Graphs**: A p-reachable directed graph has exactly `p` ordered pairs `(u, v)` such that `u < v`, `u` can reach `v`, and `v` can reach `u`. This implies that the underlying undirected graph must have exactly `p` edges.\n\n2. **Minimizing the Number of Nodes**: The goal is to find the smallest number of nodes `n` such that the number of edges in the complete undirected graph (n*(n-1)/2) is at least `p`. This can be efficiently found using binary search.\n\n3. **Maximizing Unidirectional Pairs**: Upon analyzing the problem, it turns out that the number of unidirectional pairs in a p-reachable graph is always zero. This is because any directed edge from `u` to `v` implies mutual reachability due to the properties of the undirected graph derived from the directed graph's reachability.\n\n### Solution Code\n\n```python\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    left = 0\n    right = 2 * int((2 * p) ** 0.5) + 2  # Initial estimate for upper bound\n    while left < right:\n        mid = (left + right) // 2\n        val = mid * (mid - 1) // 2\n        if val >= p:\n            right = mid\n        else:\n            left = mid + 1\n    print(f\"{left} 0\")\n```\n\n### Explanation\n\n1. **Reading Input**: The input is read as an integer `p`.\n\n2. **Handling Special Case for p=0**: If `p` is zero, the graph has no edges, so the minimum number of nodes is zero, and there are no unidirectional pairs.\n\n3. **Binary Search for Minimum Nodes**: For non-zero `p`, we use binary search to find the smallest integer `n` such that `n*(n-1)/2 >= p`. This ensures we find the minimum number of nodes required to form a p-reachable graph.\n\n4. **Output Result**: The result is printed as two integers: the minimum number of nodes and the maximum number of unidirectional pairs, which is always zero.\n\nThis approach efficiently determines the solution by leveraging binary search for finding the minimum number of nodes and understanding the properties of reachability in directed graphs to conclude that unidirectional pairs are impossible in a p-reachable graph.",
    "ground_truth": "N/A",
    "extracted_answer": "p = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    left = 0\n    right = 2 * int((2 * p) ** 0.5) + 2  # Initial estimate for upper bound\n    while left < right:\n        mid = (left + right) // 2\n        val = mid * (mid - 1) // 2\n        if val >= p:\n            right = mid\n        else:\n            left = mid + 1\n    print(f\"{left} 0\")",
    "score": 0,
    "metadata": {
        "prompt_token_count": 476,
        "completion_token_count": 570,
        "thoughts_token_count": 7793
    }
}