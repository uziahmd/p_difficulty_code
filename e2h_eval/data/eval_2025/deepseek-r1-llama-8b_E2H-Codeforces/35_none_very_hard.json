{
    "start": 1758292162.5879507,
    "end": 1758292187.4493678,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:29 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef find_maximum():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input(), 2)\n\n    max_val = sum(a)\n    mask = (1 << n) - 1\n\n    for i in range(n):\n        if (m & (1 << i)) == 0:\n            new_max = max_val - a[i]\n            if new_max <= m:\n                max_val = new_max\n\n    print(max_val)\n\n\nif __name__ == \"__main__\":\n    find_maximum()\n```\n\nThis script first reads the number of elements `n` and the array `a` from standard input. It then reads the binary representation of `m` as a string and converts it to an integer using base 2.\n\nThe script initializes `max_val` to the sum of all elements in `a`. It then iterates over each position `i` in the binary representation of `m`. If the bit at position `i` is 0, it calculates a new maximum value by subtracting the element at index `i` from `max_val`. If this new maximum value is less than or equal to `m`, it updates `max_val`.\n\nFinally, the script prints the maximum value found.\n\nThis solution has a time complexity of O(n), where n is the number of elements in the array `a`.",
    "ground_truth": "N/A",
    "extracted_answer": "def find_maximum():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input(), 2)\n\n    max_val = sum(a)\n    mask = (1 << n) - 1\n\n    for i in range(n):\n        if (m & (1 << i)) == 0:\n            new_max = max_val - a[i]\n            if new_max <= m:\n                max_val = new_max\n\n    print(max_val)\n\n\nif __name__ == \"__main__\":\n    find_maximum()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 553,
        "completion_token_count": 283,
        "thoughts_token_count": 0
    }
}