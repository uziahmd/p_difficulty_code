{
    "start": 1758292038.5499234,
    "end": 1758292086.13079,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef read_input():\n    lines = sys.stdin.readlines()\n    n, h, m = map(int, lines[0].split())\n    restrictions = []\n    for i in range(1, m + 1):\n        l, r, x = map(int, lines[i].split())\n        restrictions.append((l - 1, r - 1, x))\n    return n, h, restrictions\n\ndef solve(n, h, restrictions):\n    max_heights = [[h] * n for _ in range(n)]\n    for l, r, x in restrictions:\n        for i in range(l, r + 1):\n            max_heights[i][l] = min(max_heights[i][l], x)\n            if i < r:\n                max_heights[i][i + 1] = min(max_heights[i][i + 1], x)\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for length in range(1, n + 1):\n        for left in range(n - length + 1):\n            right = left + length - 1\n            for mid in range(left, right):\n                dp[left][right] = max(dp[left][right], dp[left][mid] + dp[mid + 1][right] +\n                                     max_heights[mid][right] ** 2)\n\n    return dp[0][n - 1]\n\nif __name__ == \"__main__\":\n    n, h, restrictions = read_input()\n    result = solve(n, h, restrictions)\n    print(result)\n```\n\nThis script first reads the input from standard input, then it solves the problem by filling up a `max_heights` table and a `dp` table. The `max_heights` table stores the maximum height of a house that can be built at each spot given the restrictions. The `dp` table stores the maximum profit that can be obtained by building houses on a subset of spots. The script finally prints the maximum profit that can be obtained by building houses on all spots.\n\nThe time complexity of this script is O(n^3), where n is the number of spots. This is because we need to fill up the `max_heights` table and the `dp` table, both of which take O(n^3) time. The space complexity is also O(n^2), as we need to store the `max_heights` table and the `dp` table.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef read_input():\n    lines = sys.stdin.readlines()\n    n, h, m = map(int, lines[0].split())\n    restrictions = []\n    for i in range(1, m + 1):\n        l, r, x = map(int, lines[i].split())\n        restrictions.append((l - 1, r - 1, x))\n    return n, h, restrictions\n\ndef solve(n, h, restrictions):\n    max_heights = [[h] * n for _ in range(n)]\n    for l, r, x in restrictions:\n        for i in range(l, r + 1):\n            max_heights[i][l] = min(max_heights[i][l], x)\n            if i < r:\n                max_heights[i][i + 1] = min(max_heights[i][i + 1], x)\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for length in range(1, n + 1):\n        for left in range(n - length + 1):\n            right = left + length - 1\n            for mid in range(left, right):\n                dp[left][right] = max(dp[left][right], dp[left][mid] + dp[mid + 1][right] +\n                                     max_heights[mid][right] ** 2)\n\n    return dp[0][n - 1]\n\nif __name__ == \"__main__\":\n    n, h, restrictions = read_input()\n    result = solve(n, h, restrictions)\n    print(result)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 841,
        "completion_token_count": 516,
        "thoughts_token_count": 0
    }
}