{
    "start": 1758292039.2807152,
    "end": 1758292095.1263819,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef orientation(p, q, r):\n    \"\"\"Calculate the orientation of three points in the plane.\"\"\"\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0  # Collinear\n    return 1 if val > 0 else 2  # Clockwise or counterclockwise\n\ndef convex_hull(points):\n    \"\"\"Compute the convex hull of a set of 2D points.\"\"\"\n    n = len(points)\n    if n < 3:\n        return points\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n\n    p = l\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) == 2:\n                q = i\n\n        p = q\n        if p == l:\n            break\n\n    return hull\n\ndef can_assign_rebels(rebel_spaceships, bases):\n    \"\"\"Check if it's possible to assign rebels to bases without intersection.\"\"\"\n    all_points = rebel_spaceships + bases\n    convex_hull_points = convex_hull(all_points)\n\n    # Check if each base and each rebel is on the convex hull\n    for point in all_points:\n        if point not in convex_hull_points:\n            return False\n\n    # Check if the number of bases and rebels are equal\n    return len(rebel_spaceships) == len(bases)\n\ndef main():\n    input_lines = sys.stdin.readlines()\n    input_index = 0\n\n    def readline():\n        nonlocal input_index\n        line = input_lines[input_index]\n        input_index += 1\n        return line.strip()\n\n    num_rebel_spaceships, num_bases = map(int, readline().split())\n\n    rebel_spaceships = []\n    for _ in range(num_rebel_spaceships):\n        x, y = map(int, readline().split())\n        rebel_spaceships.append((x, y))\n\n    bases = []\n    for _ in range(num_bases):\n        x, y = map(int, readline().split())\n        bases.append((x, y))\n\n    if can_assign_rebels(rebel_spaceships, bases):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script first reads the input from standard input, then it calculates the convex hull of all points (bases and rebel spaceships). If the number of bases and rebel spaceships are equal and all points are on the convex hull, it prints \"Yes\", otherwise it prints \"No\".",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef orientation(p, q, r):\n    \"\"\"Calculate the orientation of three points in the plane.\"\"\"\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0  # Collinear\n    return 1 if val > 0 else 2  # Clockwise or counterclockwise\n\ndef convex_hull(points):\n    \"\"\"Compute the convex hull of a set of 2D points.\"\"\"\n    n = len(points)\n    if n < 3:\n        return points\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n\n    p = l\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) == 2:\n                q = i\n\n        p = q\n        if p == l:\n            break\n\n    return hull\n\ndef can_assign_rebels(rebel_spaceships, bases):\n    \"\"\"Check if it's possible to assign rebels to bases without intersection.\"\"\"\n    all_points = rebel_spaceships + bases\n    convex_hull_points = convex_hull(all_points)\n\n    # Check if each base and each rebel is on the convex hull\n    for point in all_points:\n        if point not in convex_hull_points:\n            return False\n\n    # Check if the number of bases and rebels are equal\n    return len(rebel_spaceships) == len(bases)\n\ndef main():\n    input_lines = sys.stdin.readlines()\n    input_index = 0\n\n    def readline():\n        nonlocal input_index\n        line = input_lines[input_index]\n        input_index += 1\n        return line.strip()\n\n    num_rebel_spaceships, num_bases = map(int, readline().split())\n\n    rebel_spaceships = []\n    for _ in range(num_rebel_spaceships):\n        x, y = map(int, readline().split())\n        rebel_spaceships.append((x, y))\n\n    bases = []\n    for _ in range(num_bases):\n        x, y = map(int, readline().split())\n        bases.append((x, y))\n\n    if can_assign_rebels(rebel_spaceships, bases):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 492,
        "completion_token_count": 605,
        "thoughts_token_count": 0
    }
}