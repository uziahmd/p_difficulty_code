{
    "start": 1758292168.0572186,
    "end": 1758292218.5752246,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef read_input():\n    \"\"\"Reads input from standard input.\"\"\"\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].strip().split())\n    roads = []\n    for i in range(1, m + 1):\n        a, b, gcd, lcm = map(int, lines[i].strip().split())\n        roads.append((a, b, gcd, lcm))\n    return n, m, roads\n\ndef solve(n, m, roads):\n    \"\"\"Solves the problem and returns the result.\"\"\"\n    # Create a dictionary to store the GCD and LCM for each vertex\n    vertex_data = {}\n    for a, b, gcd, lcm in roads:\n        if a not in vertex_data:\n            vertex_data[a] = {'gcd': gcd, 'lcm': lcm}\n        else:\n            vertex_data[a]['gcd'] = gcd\n            vertex_data[a]['lcm'] = lcm\n        if b not in vertex_data:\n            vertex_data[b] = {'gcd': gcd, 'lcm': lcm}\n        else:\n            vertex_data[b]['gcd'] = gcd\n            vertex_data[b]['lcm'] = lcm\n\n    # Initialize the graph as an adjacency list\n    graph = {i: [] for i in range(1, n + 1)}\n    for a, b, _, _ in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # Perform DFS to find strongly connected components\n    visited = set()\n    sccs = []\n    def dfs(node, parent):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, node)\n        sccs.append(node)\n\n    for node in range(1, n + 1):\n        if node not in visited:\n            dfs(node, None)\n\n    # Reconstruct the graph as an adjacency list for each SCC\n    scc_graph = {}\n    for node in sccs:\n        scc_graph[node] = graph[node]\n\n    # Perform DFS to find the number of mushrooms on each vertex\n    result = {}\n    for node in sccs:\n        visited = set()\n        stack = [node]\n        while stack:\n            current_node = stack.pop()\n            if current_node not in visited:\n                visited.add(current_node)\n                if len(scc_graph[current_node]) == 1:\n                    # If the node has only one edge, its value is determined by the other node\n                    neighbor = scc_graph[current_node][0]\n                    if neighbor in result:\n                        result[current_node] = result[neighbor]\n                    else:\n                        gcd = vertex_data[neighbor]['gcd']\n                        lcm = vertex_data[neighbor]['lcm']\n                        result[current_node] = lcm // gcd\n                else:\n                    # If the node has multiple edges, we can choose any value for it\n                    result[current_node] = 1\n                stack.extend([n for n in scc_graph[current_node] if n not in visited])\n\n    # Check if the values are consistent across all SCCs\n    for node in sccs:\n        for neighbor in scc_graph[node]:\n            if node != neighbor and result[node] % vertex_data[neighbor]['gcd'] != 0:\n                return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, result.values()))\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    n, m, roads = read_input()\n    result = solve(n, m, roads)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script uses a depth-first search (DFS) to find strongly connected components (SCCs) in the graph. Then, it performs another DFS to find the number of mushrooms on each vertex within each SCC. The script checks if the values are consistent across all SCCs and returns \"YES\" with the values or \"NO\" if they are not consistent.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef read_input():\n    \"\"\"Reads input from standard input.\"\"\"\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].strip().split())\n    roads = []\n    for i in range(1, m + 1):\n        a, b, gcd, lcm = map(int, lines[i].strip().split())\n        roads.append((a, b, gcd, lcm))\n    return n, m, roads\n\ndef solve(n, m, roads):\n    \"\"\"Solves the problem and returns the result.\"\"\"\n    # Create a dictionary to store the GCD and LCM for each vertex\n    vertex_data = {}\n    for a, b, gcd, lcm in roads:\n        if a not in vertex_data:\n            vertex_data[a] = {'gcd': gcd, 'lcm': lcm}\n        else:\n            vertex_data[a]['gcd'] = gcd\n            vertex_data[a]['lcm'] = lcm\n        if b not in vertex_data:\n            vertex_data[b] = {'gcd': gcd, 'lcm': lcm}\n        else:\n            vertex_data[b]['gcd'] = gcd\n            vertex_data[b]['lcm'] = lcm\n\n    # Initialize the graph as an adjacency list\n    graph = {i: [] for i in range(1, n + 1)}\n    for a, b, _, _ in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # Perform DFS to find strongly connected components\n    visited = set()\n    sccs = []\n    def dfs(node, parent):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, node)\n        sccs.append(node)\n\n    for node in range(1, n + 1):\n        if node not in visited:\n            dfs(node, None)\n\n    # Reconstruct the graph as an adjacency list for each SCC\n    scc_graph = {}\n    for node in sccs:\n        scc_graph[node] = graph[node]\n\n    # Perform DFS to find the number of mushrooms on each vertex\n    result = {}\n    for node in sccs:\n        visited = set()\n        stack = [node]\n        while stack:\n            current_node = stack.pop()\n            if current_node not in visited:\n                visited.add(current_node)\n                if len(scc_graph[current_node]) == 1:\n                    # If the node has only one edge, its value is determined by the other node\n                    neighbor = scc_graph[current_node][0]\n                    if neighbor in result:\n                        result[current_node] = result[neighbor]\n                    else:\n                        gcd = vertex_data[neighbor]['gcd']\n                        lcm = vertex_data[neighbor]['lcm']\n                        result[current_node] = lcm // gcd\n                else:\n                    # If the node has multiple edges, we can choose any value for it\n                    result[current_node] = 1\n                stack.extend([n for n in scc_graph[current_node] if n not in visited])\n\n    # Check if the values are consistent across all SCCs\n    for node in sccs:\n        for neighbor in scc_graph[node]:\n            if node != neighbor and result[node] % vertex_data[neighbor]['gcd'] != 0:\n                return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, result.values()))\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    n, m, roads = read_input()\n    result = solve(n, m, roads)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 575,
        "completion_token_count": 822,
        "thoughts_token_count": 0
    }
}