{
    "start": 1758280861.0493798,
    "end": 1758282139.0894434,
    "start-formatted": "2025-09-19 20:21 KST",
    "end-formatted": "2025-09-19 20:42 KST",
    "gpu": 2,
    "pid": 36,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Radio Towers\n\nThere are $$$n + 2$$$ towns located on a coordinate line, numbered from $$$0$$$ to $$$n + 1$$$. The $$$i$$$-th town is located at the point $$$i$$$.You build a radio tower in each of the towns $$$1, 2, \\dots, n$$$ with probability $$$\\frac{1}{2}$$$ (these events are independent). After that, you want to set the signal power on each tower to some integer from $$$1$$$ to $$$n$$$ (signal powers are not necessarily the same, but also not necessarily different). The signal from a tower located in a town $$$i$$$ with signal power $$$p$$$ reaches every city $$$c$$$ such that $$$|c - i| < p$$$.After building the towers, you want to choose signal powers in such a way that:  towns $$$0$$$ and $$$n + 1$$$ don't get any signal from the radio towers;  towns $$$1, 2, \\dots, n$$$ get signal from exactly one radio tower each. For example, if $$$n = 5$$$, and you have built the towers in towns $$$2$$$, $$$4$$$ and $$$5$$$, you may set the signal power of the tower in town $$$2$$$ to $$$2$$$, and the signal power of the towers in towns $$$4$$$ and $$$5$$$ to $$$1$$$. That way, towns $$$0$$$ and $$$n + 1$$$ don't get the signal from any tower, towns $$$1$$$, $$$2$$$ and $$$3$$$ get the signal from the tower in town $$$2$$$, town $$$4$$$ gets the signal from the tower in town $$$4$$$, and town $$$5$$$ gets the signal from the tower in town $$$5$$$.Calculate the probability that, after building the towers, you will have a way to set signal powers to meet all constraints.\n\n## Input\nThe first (and only) line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$).\n\n## Output\nPrint one integer — the probability that there will be a way to set signal powers so that all constraints are met, taken modulo $$$998244353$$$.Formally, the probability can be expressed as an irreducible fraction $$$\\frac{x}{y}$$$. You have to print the value of $$$x \\cdot y^{-1} \\bmod 998244353$$$, where $$$y^{-1}$$$ is an integer such that $$$y \\cdot y^{-1} \\bmod 998244353 = 1$$$.\n\n## Example\n### Input\n['2', '3', '5', '200000']\n\n### Output\n['748683265', '748683265', '842268673', '202370013']\n\n## Note\nThe real answer for the first example is $$$\\frac{1}{4}$$$:  with probability $$$\\frac{1}{4}$$$, the towers are built in both towns $$$1$$$ and $$$2$$$, so we can set their signal powers to $$$1$$$. The real answer for the second example is $$$\\frac{1}{4}$$$:   with probability $$$\\frac{1}{8}$$$, the towers are built in towns $$$1$$$, $$$2$$$ and $$$3$$$, so we can set their signal powers to $$$1$$$;  with probability $$$\\frac{1}{8}$$$, only one tower in town $$$2$$$ is built, and we can set its signal power to $$$2$$$. The real answer for the third example is $$$\\frac{5}{32}$$$. Note that even though the previous explanations used equal signal powers for all towers, it is not necessarily so. For example, if $$$n = 5$$$ and the towers are built in towns $$$2$$$, $$$4$$$ and $$$5$$$, you may set the signal power of the tower in town $$$2$$$ to $$$2$$$, and the signal power of the towers in towns $$$4$$$ and $$$5$$$ to $$$1$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about radio towers in towns. There are n+2 towns, numbered from 0 to n+1. We build a tower in each of towns 1 to n with a probability of 1/2 each, and these are independent events.\n\nAfter building the towers, we need to assign signal powers such that:\n- Towns 0 and n+1 receive no signal.\n- Each town from 1 to n receives exactly one signal.\n\nThe goal is to compute the probability that this is possible, modulo 998244353.\n\nHmm. So for each subset of built towers, we need to check if there's an assignment of powers that satisfies the conditions.\n\nBut considering all subsets is impossible because n can be up to 2e5, which is way too big.\n\nSo I need to find a mathematical pattern or formula that can represent the valid configurations and compute the number of valid subsets efficiently.\n\nLet me think about what the valid configurations look like.\n\nEach tower's power p_i determines the range of towns it covers. The condition is that every town is covered by exactly one tower's range, and 0 and n+1 are not covered by any.\n\nSo the ranges must form a partition of the towns 1..n, with no overlaps except at the boundaries.\n\nWait, perhaps the configuration of towers must form a certain structure. Maybe something like a tiling where each tower's coverage doesn't overlap with others except adjacent ones, but that might not directly apply.\n\nWait, another approach: the problem resembles that of placing non-overlapping intervals covering exactly the points 1..n, without covering 0 or n+1.\n\nWait, but each interval is [i - (p-1), i + (p-1)]? Because |c - i| < p means c is from i-p+1 to i+p-1, inclusive?\n\nNo, wait: |c - i| < p → c is in (i-p, i+p). But since c must be integer, that's i-p+1 to i+p-1, but only if those are within the towns.\n\nWait, for example, if i=2 and p=2, then c must satisfy |c-2| < 2 → c can be 1, 2, or 3. So the range is from max(1, i-p+1) to min(n, i + p-1). Wait, no: for i=2 and p=2, the range is 1,2,3. But if i is 1 and p is 2, the range is 0,1,2. But town 0 cannot be covered, so in that case, the tower's p must be such that it doesn't cover 0 or n+1.\n\nSo when assigning p_i, for a tower at i, the left boundary is i - (p_i - 1) and the right boundary is i + (p_i -1). But both must be within [1, n], otherwise, the ranges will spill into 0 or n+1, which is forbidden.\n\nWait, no. The problem says that the signal from a tower in i with power p reaches every city c such that |c - i| < p. So for c=0, it depends on whether it's included. So we need to make sure that for each tower, their ranges do not include 0 or n+1.\n\nWait, but the problem requires that after choosing p_i's, 0 and n+1 don't get any signal. So any tower's p_i must be chosen such that their coverage does not include 0 or n+1.\n\nThat is, for a tower at i, p_i must be ≤ i (so that i - (p_i-1) ≥ 1), and also ≤ (n+1 - i) (so that i + (p_i -1) ≤ n).\n\nWait, no. Let's see:\n\nFor town 0, it's at position 0. To prevent it from being covered, for any tower i, its p_i must be such that |0 - i| ≥ p_i. So p_i ≤ i.\n\nSimilarly, for town n+1, |(n+1) - i| ≥ p_i → p_i ≤ (n+1 - i).\n\nSo for each tower i, p_i must be ≤ min(i, n+1 - i).\n\nBut also, the ranges must partition the towns 1..n. So each town must be covered exactly once.\n\nThis seems similar to a tiling problem where each tile is determined by a tower's coverage.\n\nWait, perhaps the valid configurations are the same as the Dyck paths or some Catalan-like structures. Because each tower's p_i must be such that the coverage doesn't extend beyond certain limits, and the entire line must be covered without overlaps.\n\nAlternatively, maybe the problem can be modeled using a recurrence relation. Let's denote dp[i] as the number of valid configurations for the first i towns.\n\nWait, but how would that work? Because each tower's placement affects the next steps.\n\nAlternatively, think of it as matching parentheses. For each tower, the p_i determines how far it covers, which could represent a certain depth in a tree structure.\n\nWait, perhaps the valid configurations are the set of subsets S of {1, 2, ..., n} such that S is the union of non-overlapping intervals, each centered at some i in S, with p_i chosen so that the intervals cover 1..n exactly once.\n\nBut how can this be translated into a count?\n\nWait, perhaps the problem can be thought of in terms of a binary string. Each tower is a 1, and the p_i's determine how far to the left and right the coverage extends.\n\nWait, perhaps the valid configurations are those subsets S where the arrangement of towers forms a valid \"matching\" structure, ensuring that every point is covered exactly once.\n\nAnother approach: for a given subset of towers S, is there a way to assign p_i's such that:\n\n1. For each i in S, p_i ≤ min(i, n+1 -i).\n2. The union of the ranges [i - (p_i -1), i + (p_i -1)] equals {1, 2, ..., n}.\n3. The ranges are pairwise disjoint except possibly at the endpoints.\n\nWait, but in our problem, the ranges must cover exactly 1..n, without overlapping, except perhaps at the edges, but each town must be covered exactly once.\n\nWait, perhaps the ranges must form a perfect partitioning, which implies that each tower's coverage starts where another ends.\n\nWait, let's model the problem as a graph. Each town j must be covered by exactly one tower. So for each j, there exists exactly one i in S such that j is in the coverage of i.\n\nBut this is a constraint that's hard to model directly.\n\nAlternative idea: think of the problem in terms of the maximum reach of each tower. If a tower at position i has a certain reach r, then it covers positions from i - (r-1) to i + (r-1). But each position must be covered by exactly one such interval.\n\nHmm. So perhaps the problem is similar to the problem of tiling a line with certain blocks, each block starting and ending at specific points.\n\nWait, perhaps the valid subsets S are those that form a certain kind of structure, like a chain where each step is determined by the reach of the current tower.\n\nWait, maybe the key is to model this as a Fibonacci-like sequence. Because in many tiling problems, the count follows a Fibonacci recurrence.\n\nWait, let's consider small values of n to see if a pattern emerges.\n\nCase n=1: We have towns 0,1,2.\n\nWe must build a tower in town 1.\n\nThen, the signal power p_1 must be 1, because if p_1=2, then it would cover 0 and 2, which are forbidden.\n\nWith p=1, town 1 is covered, and 0 and 2 are not. So it's valid.\n\nSo the probability is (1/2) for the tower being present multiplied by 1 (since only p=1 works). So total valid is 1 possibility out of 2.\n\nWait, wait no: the tower is built with probability 1/2, and if built, it can be assigned p=1, which is valid. So for n=1, the probability is 1/2.\n\nBut according to the sample input, when n=2, the output is 1/4. Let me check.\n\nWait, n=2: towns 0,1,2,3.\n\nWe need to build towers in 1 and 2.\n\nIf both are built, assign p=1 to each. Then, town 1 is covered by tower 1, town 2 by tower 2. So 0 and 3 are not covered. So it's valid.\n\nIf only tower 1 is built, p=1. Then, it covers 1 and 2. But town 2 is covered, but town 3 is not. Wait, no, wait: the coverage of tower 1 with p=2 would cover 0,1,2, but that's invalid because 0 is covered. So if tower 1 is built, what p can it have?\n\nWait, for tower 1: p must be ≤ min(1, 3-1) = 1. So p can only be 1. So it covers 1- (1-1) = 1, and 1 + (1-1) =1. So only town 1 is covered. Then town 2 is uncovered, so it's invalid.\n\nSimilarly, if only tower 2 is built: p must be ≤ min(2, 3-2)=1. So p=1, covering town 2. Town 1 is uncovered, invalid.\n\nSo the only valid case is when both towers are built, and each has p=1. So the probability is (1/2)^2 = 1/4. Which matches the sample.\n\nHmm, okay. So for n=2, the valid count is 1.\n\nWait, so for n=1, the valid count is 1, for n=2 it's 1. What about n=3?\n\nWait, let's see. For n=3, the valid subsets are:\n\n1. Towers at 2 only, with p=2. Then, the coverage is 1,2,3. But wait, town 0 is not covered, town 3 is covered, but n+1 is 4, which is not part of the coverage. So it's allowed.\n\nWait, no, for p=2 in town 2: coverage is from 2-1=1 to 2+1=3. So yes, all towns 1,2,3 are covered. So that's a valid configuration.\n\nAnother possibility: towers at 1 and 3, each with p=1. Then, town 1 is covered by 1, town 2 is covered by 1's range? No, wait, p=1 for tower 1 covers only 1. Tower 3 with p=1 covers 3. Town 2 is not covered. So that's invalid.\n\nAnother possibility: towers at 1 and 3, each with p=2. Tower 1's p=2: covers 0,1,2. But 0 is not allowed. So invalid.\n\nHmm. So perhaps the only valid configuration for n=3 is when there is a single tower at 2 with p=2.\n\nWait, but wait another possibility: towers at 1 and 3. Assign p=1 to both. Then, town 1 is covered by 1, town 3 by 3, but town 2 is uncovered. So that's invalid.\n\nAnother option: tower at 1, p=1; tower at 2, p=2; tower at 3, p=1. Then, tower 2 covers 1,2,3, but the other towers' coverage would cause overlapping.\n\nWait, no, because tower 1's coverage is 1, and tower 2's coverage is 1-3. So town 1 is covered twice, which is invalid.\n\nHmm, perhaps the only valid configuration is when there is a single tower at 2 with p=2.\n\nSo for n=3, the number of valid subsets is 1.\n\nWait, but according to the sample input for n=3, the output is 748683265 which is 1/4 mod 998244353. Wait, but 1/4 is 0.25, but according to the sample note, for n=3, the probability is 1/4. How?\n\nWait, the sample note says:\n\nFor n=3, the real answer is 1/4. It comes from two cases:\n\n- Towers built in 1,2,3: each p=1. This is valid.\n\n- Only tower 2 is built, p=2. Also valid.\n\nEach has probability 1/8, so together 2/8 = 1/4.\n\nAh, so for n=3, there are two valid configurations.\n\nWait, that changes my earlier assumption. So for n=3, the count is 2.\n\nSo for n=1, count is 1.\n\nn=2: count is 1.\n\nn=3: count is 2.\n\nHmm. So perhaps the counts follow a Fibonacci-like sequence.\n\nWait, let's see:\n\nFor n=1: 1\n\nn=2: 1\n\nn=3: 2\n\nn=4: ?\n\nWait, perhaps the count for n is equal to the (n-1)th Fibonacci number. Let's see:\n\nFibonacci numbers are 1,1,2,3,5,...\n\nSo n=1: count 1 (F2)\n\nn=2: count 1 (F2)\n\nn=3: count 2 (F3)\n\nn=4: count 3 (F4)\n\nn=5: count 5 (F5)\n\nIs that correct?\n\nLet me try to see for n=4.\n\nWhat valid configurations are there?\n\nPossible configurations:\n\n1. Single tower at 2 or 3, but with sufficient p.\n\nWait, no. Let's think.\n\nWait, for n=4, the valid configurations are:\n\na) Towers at 2 and 3, each with p=2. So 2 covers 1-3, 3 covers 2-4. But overlapping occurs at 2 and 3. So that's invalid.\n\nb) Tower at 2 with p=3: covers 0-4. But 0 is forbidden. So invalid.\n\nHmm. Alternatively, perhaps the valid configurations are the ways to form a perfect matching where the coverage doesn't spill over.\n\nWait, perhaps the valid configurations correspond to the number of tilings of the line, which is known to be the (n)th Catalan number, but that's for balanced parentheses. Or perhaps it's the Fibonacci sequence.\n\nWait, perhaps the count is the (n-1)th Fibonacci number.\n\nWait, let's see:\n\nFor n=1, count=1 → F(1)=1.\n\nn=2, count=1 → F(2)=1.\n\nn=3, count=2 → F(3)=2.\n\nn=4, count=3 → F(4)=3.\n\nn=5, count=5 → F(5)=5.\n\nSo the count for n is F(n-1), where F(1)=1, F(2)=1, etc.\n\nIf this is true, then the probability is the sum over all subsets S where the configuration is valid. The number of such subsets is F(n-1), since each subset corresponds to a certain arrangement.\n\nWait, but wait, each subset is a selection of towers, and for each subset, there may be zero or more ways to assign p_i's.\n\nBut in the problem statement, for each subset S, we can choose p_i's in a way that meets the constraints, if possible.\n\nWait, but the count of valid subsets is the number of S where such an assignment exists.\n\nSo the total number of valid subsets is equal to F(n-1).\n\nBecause for each n, the number of valid S is the (n-1)th Fibonacci number.\n\nThen, the probability is (F(n-1)) / (2^n), since each tower is present with probability 1/2, and their presence is independent.\n\nSo the answer is F(n-1) * inv(2^n) mod 998244353, where inv is the modular inverse.\n\nSo the plan is:\n\n- Precompute Fibonacci numbers up to 2e5.\n\n- Compute 2^n mod MOD, then find its inverse.\n\n- Multiply F(n-1) by the inverse of 2^n mod MOD, then take mod MOD.\n\nWait, but let's test this against the samples.\n\nSample 1: n=2.\n\nF(n-1) = F(1) =1.\n\n2^2=4.\n\nProbability is 1/4 → which matches the sample.\n\nSample 2: n=3.\n\nF(2)=1.\n\nWait, but according to the sample note, the count is 2.\n\nWait, this contradicts my earlier assumption.\n\nWait, wait, in the sample note, for n=3, the valid subsets are:\n\n- {1,2,3}: each p=1.\n\n- {2}: p=2.\n\nSo total 2 subsets.\n\nBut according to my initial reasoning, F(n-1) for n=3 is F(2)=1, but the actual count is 2.\n\nSo the initial assumption is wrong.\n\nHmm. So perhaps the count is not F(n-1), but something else.\n\nWait, maybe the count is F(n), but that's not matching either.\n\nWait, for n=3: count is 2.\n\nWhich is F(3) = 2.\n\nYes, that fits.\n\nWait, n=1: count is 1 → F(2) =1.\n\nn=2: count is 1 → F(3)=2? No, that doesn't fit.\n\nWait, maybe the count is F(n-1) × something.\n\nWait, perhaps I'm misunderstanding the relation between the count and the Fibonacci numbers.\n\nAlternatively, perhaps the count is the (n)th Catalan number, but that's unlikely as Catalan numbers grow faster than Fibonacci.\n\nWait, perhaps I should model the problem differently.\n\nAnother approach: the valid configurations are those subsets S where the towers can form a non-crossing partition of the line, meaning that the coverage intervals are non-overlapping and perfectly cover the line.\n\nIn this case, the number of such subsets is the (n-1)th Catalan number.\n\nBut Catalan numbers for n=1 is 1, n=2 is 2, which doesn't fit our earlier examples.\n\nWait, for n=2, the count is 1, but Catalan is 2.\n\nSo that's not matching.\n\nHmm. Maybe I should think recursively.\n\nSuppose we have a valid configuration for n. How can we add a tower to the right to form a valid configuration for n+1.\n\nAlternatively, think of the problem as tiling the line with certain types of tiles, each tile representing a tower's coverage.\n\nWait, another idea: each tower's coverage can be represented as a certain type of interval. The constraints require that the intervals are non-overlapping and cover exactly the 1..n.\n\nMoreover, the intervals must start at i - (p_i -1) and end at i + (p_i -1), and these must align such that the entire 1..n is covered.\n\nHmm. Perhaps each valid configuration corresponds to a way of placing non-overlapping intervals that cover the entire line, and each interval is centered at a tower.\n\nBut I'm not sure.\n\nWait, perhaps the problem is similar to the standard tiling problem where each tile can be of length 1 or 2, leading to a Fibonacci recurrence.\n\nWait, suppose that for each position i, the last tower placed is at i, and its coverage is of length l. Then, the remaining problem is to cover the rest.\n\nBut I'm not sure.\n\nWait, maybe the count of valid subsets is the same as the (n)th Fibonacci number. Let's see:\n\nn=1: count=1 → F(2)=1.\n\nn=2: count=1 → F(3)=2 → no.\n\nHmm, not matching.\n\nWait, perhaps the count is F(n), but for n=3, it's 2, which is F(3)=2.\n\nn=2: count is 1, which is F(2)=1.\n\nn=1: F(1)=1.\n\nSo perhaps the count is F(n), where F(1)=1, F(2)=1, F(3)=2, etc.\n\nSo for n=1, F(1)=1.\n\nn=2, F(2)=1.\n\nn=3, F(3)=2.\n\nn=4, F(4)=3.\n\nn=5, F(5)=5.\n\nSo yes, that seems to fit.\n\nSo the count is F(n), where F(1)=1, F(2)=1, etc.\n\nSo the probability is F(n) / 2^n.\n\nSo for n=3, F(3)=2, 2^3=8 → 2/8=1/4, which matches the sample.\n\nYes! So the count is F(n), and the probability is F(n) / 2^n.\n\nSo now the problem reduces to computing the nth Fibonacci number, then calculating (F(n) / 2^n) mod 998244353.\n\nSo now, the plan is:\n\n- Precompute Fibonacci numbers up to 2e5.\n\n- Compute the modular inverse of 2^n mod MOD.\n\n- Multiply F(n) by this inverse, mod MOD.\n\nSo the steps are:\n\n1. Read n.\n\n2. Compute F(n), where F(1)=1, F(2)=1, F(3)=2, etc.\n\n3. Compute 2^n mod MOD.\n\n4. Compute the modular inverse of 2^n mod MOD.\n\n5. Multiply F(n) by the inverse, mod MOD.\n\n6. Output the result.\n\nNow, how to compute F(n) for up to 2e5? That's easy, just iterate from 1 to n.\n\nHow to compute 2^n mod MOD? Use fast exponentiation.\n\nModular inverse can be computed using Fermat's little theorem since MOD is prime.\n\nSo code outline:\n\nMOD = 998244353\n\nn = int(input())\n\nif n == 0:\n    # handle edge case\n    pass\n\nCompute fib up to n:\n\nfib = [0]*(n+1)\nfib[1] = 1\nif n >=2:\n    fib[2] =1\nfor i in range(3, n+1):\n    fib[i] = fib[i-1] + fib[i-2]\n    fib[i] %= MOD\n\nCompute pow(2, n, MOD):\n\npow2 = pow(2, n, MOD)\n\nCompute inv_pow2 = pow(pow2, MOD-2, MOD)\n\nresult = (fib[n] * inv_pow2) % MOD\n\nprint(result)\n\nWait, but wait: for n=1, the sample input expects 748683265 which is 1/2 mod MOD.\n\nWhich is 1 * inv(2) mod MOD.\n\nYes.\n\nSimilarly, for n=2, 1 * inv(4) mod MOD is 748683265.\n\nWhich matches the sample.\n\nSo the code should work.\n\nTesting for n=3:\n\nF(3) = 2.\n\npow(2,3)=8.\n\ninv(8) mod MOD is 124780544.\n\n2 * 124780544 mod MOD is 249561088 mod MOD.\n\nBut 249561088 is 249561088 / 998244353 is 0.25, which is 1/4.\n\nWhich matches the sample.\n\nYes.\n\nSo the code is correct.\n\nNow, let's implement this.\n\nBut wait, for n=1, fib[1] is 1.\n\nFor n=2, fib[2]=1.\n\nYes.\n\nThus, the code should handle all cases correctly.\n\nNow, write the Python code accordingly.\n",
    "response": "To solve this problem, we need to determine the probability that after building radio towers in towns 1 to n, we can set their signal powers such that towns 0 and n+1 receive no signal, and each town from 1 to n receives exactly one signal. The result should be computed modulo 998244353.\n\n### Approach\nThe problem can be approached by recognizing a pattern in the valid configurations of the towers. The valid configurations can be modeled using Fibonacci numbers. Specifically, the number of valid configurations for n towns is given by the nth Fibonacci number. \n\nThe probability is then calculated as the ratio of the nth Fibonacci number to \\(2^n\\), taken modulo 998244353. This involves computing modular arithmetic operations efficiently using properties of modular inverses.\n\n1. **Fibonacci Calculation**: Compute the nth Fibonacci number iteratively.\n2. **Modular Exponentiation**: Compute \\(2^n \\mod 998244353\\) using fast exponentiation.\n3. **Modular Inverse**: Use Fermat's Little Theorem to compute the modular inverse of \\(2^n \\mod 998244353\\).\n4. **Final Probability**: Multiply the nth Fibonacci number by the modular inverse of \\(2^n\\) and take the result modulo 998244353.\n\n### Solution Code\n```python\nMOD = 998244353\n\nn = int(input())\n\nif n == 0:\n    print(0)\nelse:\n    # Compute Fibonacci numbers up to n\n    fib = [0] * (n + 1)\n    fib[1] = 1\n    if n >= 2:\n        fib[2] = 1\n    for i in range(3, n + 1):\n        fib[i] = (fib[i-1] + fib[i-2]) % MOD\n\n    # Compute 2^n mod MOD\n    pow2 = pow(2, n, MOD)\n\n    # Compute modular inverse of pow2\n    inv_pow2 = pow(pow2, MOD - 2, MOD)\n\n    # Result is fib[n] * inv_pow2 mod MOD\n    result = (fib[n] * inv_pow2) % MOD\n    print(result)\n```\n\n### Explanation\n1. **Fibonacci Calculation**: We use an iterative approach to compute the Fibonacci sequence up to the nth term, which helps in determining the number of valid configurations.\n2. **Modular Exponentiation**: Using Python's built-in `pow` function with three arguments allows efficient computation of \\(2^n \\mod 998244353\\).\n3. **Modular Inverse**: Fermat's Little Theorem states that for a prime modulus \\(p\\), the modular inverse of a number \\(a\\) is \\(a^{p-2} \\mod p\\). This allows us to compute the inverse efficiently.\n4. **Combining Results**: The final probability is obtained by multiplying the nth Fibonacci number with the modular inverse of \\(2^n\\) and taking the result modulo 998244353.\n\nThis approach ensures that we handle large values of n efficiently and correctly compute the required probability within the constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "MOD = 998244353\n\nn = int(input())\n\nif n == 0:\n    print(0)\nelse:\n    # Compute Fibonacci numbers up to n\n    fib = [0] * (n + 1)\n    fib[1] = 1\n    if n >= 2:\n        fib[2] = 1\n    for i in range(3, n + 1):\n        fib[i] = (fib[i-1] + fib[i-2]) % MOD\n\n    # Compute 2^n mod MOD\n    pow2 = pow(2, n, MOD)\n\n    # Compute modular inverse of pow2\n    inv_pow2 = pow(pow2, MOD - 2, MOD)\n\n    # Result is fib[n] * inv_pow2 mod MOD\n    result = (fib[n] * inv_pow2) % MOD\n    print(result)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 940,
        "completion_token_count": 638,
        "thoughts_token_count": 5151
    }
}