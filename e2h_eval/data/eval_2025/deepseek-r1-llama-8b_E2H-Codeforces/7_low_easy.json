{
    "start": 1758103657.6813278,
    "end": 1758103768.1401615,
    "start-formatted": "2025-09-17 19:07 KST",
    "end-formatted": "2025-09-17 19:09 KST",
    "gpu": 2,
    "pid": 7,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about determining whether a snowflake graph with n vertices exists. The snowflake graph is defined in a specific way. Let me try to understand the structure.\n\nThe snowflake graph starts with one vertex. Then, the initial vertex connects to k new vertices, where k is more than 1. Each vertex that has only one edge (so degree 1) must then connect to k new vertices. And this step must be done at least once. So, each such node adds k children.\n\nWait, so the initial step is level 0: one node. Level 1: k nodes connected to it. Then, each of those k nodes, since they have degree 1, must add another k children each. So level 2 has k^2 nodes. But wait, does this process continue indefinitely? Or is there a stopping condition?\n\nNo, the problem says that the step of adding k children to each leaf must be done at least once. So, the minimal snowflake for k=4, as in the example, probably has two levels beyond the initial. Or maybe just the first expansion and then one more step.\n\nLet me think about the minimal case. For k=4, the smallest snowflake has how many nodes? Well, the initial node (level 0) connects to 4 (level 1). Then each of these 4 must connect to 4 more, but wait, the problem says that each step (each addition) is done at least once. So, the initial node connects to 4. Then, each of those 4 connects to 4 more, making level 2 with 16 nodes. So total nodes would be 1 +4 +16 =21. Wait, but in the sample input, for n=9, the answer is NO. Hmm, perhaps I'm misunderstanding.\n\nWait, the sample input includes n=6, which is output YES. How can a snowflake with 6 nodes exist?\n\nLet me think again. Maybe the structure isn't built infinitely. Because otherwise, for any n, you could have a larger structure. But the problem asks if a snowflake with exactly n nodes can exist.\n\nSo, perhaps the snowflake is constructed by some number of steps. Each step involves expanding all leaves by adding k children. But the process must do this at least once beyond the initial step.\n\nWait, the initial step is adding the first k children. Then, the next step is adding children to each of those, which must happen at least once. So the process could have m steps beyond the initial.\n\nHmm, maybe the snowflake is built by expanding the leaves in each step until some condition. So, the number of nodes depends on how many times we perform the expansion.\n\nLet me model the number of nodes. Suppose after s expansions, the total number of nodes is computed.\n\nWait, let's model it step by step.\n\nInitially, we have 1 node.\n\nStep 1: Add k children to the root. Now, total is 1 +k.\n\nBut the next step is to expand each of those k nodes. So each of them adds k children. So, in the second step, we add k *k nodes. Total becomes 1 +k +k².\n\nIf we stop here, that's a snowflake with two expansions (the initial and one expansion step).\n\nBut the problem says the expansion step should be done at least once. So the minimal structure is when the initial node has k children, and each of those has k children. So total is 1 +k +k².\n\nAlternatively, perhaps the expansion can be done multiple times. Like, each leaf after each expansion step adds k children. So after s expansions, the total nodes are 1 +k*(1 +k +k² + ... +k^{s}).\n\nWait, no. Let me think differently. The snowflake is built in layers. The root is layer 0 (size 1). Layer 1 has k nodes. Then each of those nodes in layer 1 leads to k nodes in layer 2. Then each node in layer 2 leads to k nodes in layer 3, and so on. But the problem requires that the expansion step (adding children to leaves) is done at least once. So the minimal case is that the root has layer 1, and layer 2 is added (so at least one expansion step beyond the initial).\n\nWait, no. Let me re-read the problem statement.\n\nThe initial vertex is connected to k new vertices. Then, each vertex that is connected by only one edge (i.e., the ones just added) must be connected by edges to k new vertices. This step should be done at least once.\n\nAh! So the initial step is adding the k children. Then, in a separate step, each of those k must add their own k children. So this step is done at least once. So",
    "response": "To solve this problem, we need to determine if a snowflake graph with exactly `n` vertices can exist. The snowflake graph is defined such that it starts with one vertex and expands by adding `k` children to each leaf node, with `k > 1`, and this expansion must be done at least once.\n\n### Approach\nThe key insight is to recognize that the snowflake graph's structure can be represented as a sum of a geometric series. Specifically, after `s` expansion steps (each step adding `k` children to every leaf), the total number of vertices in the snowflake graph is given by:\n\n\\[ n = 1 + k \\times (1 + k + k^2 + \\ldots + k^s) \\]\n\nThis formula accounts for the initial vertex and each subsequent level of expansion. The task reduces to checking if `n` can be expressed in this form for some `k > 1` and `s >= 1`.\n\nTo efficiently check this, we can iterate over possible values of `k` and for each `k`, determine if there exists an integer `s` such that the equation holds. We limit our search for `k` to a reasonable range (up to 60) because higher values of `k` would result in numbers larger than `10^18` quickly.\n\n### Solution Code\n```python\nimport sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    max_k = min(60, int((n-1)**0.5))\n    for k in range(2, max_k + 1):\n        s = 0\n        total = 1 + k\n        while True:\n            next_total = total + k * (k ** s)\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            s += 1\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```\n\n### Explanation\n1. **Reading Input:** The code reads multiple test cases, each specifying a value of `n`.\n2. **Check for Small Values:** If `n` is less than 3, it immediately returns \"NO\" since the smallest valid snowflake has 1 (root) + 2 (first expansion) = 3 nodes.\n3. **Iterate Over Possible k Values:** For each `k` from 2 up to 60, the code checks if `n` can be represented as the sum of the series described.\n4. **Check Expansion Steps:** For each `k`, the code iterates through possible expansion steps `s` to see if the total number of nodes matches `n`.\n5. **Output Result:** Based on whether any valid `k` and `s` are found, the function returns \"YES\" or \"NO\".\n\nThis approach ensures that we efficiently check all possible configurations within the constraints, providing the correct result for each test case.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    max_k = min(60, int((n-1)**0.5))\n    for k in range(2, max_k + 1):\n        s = 0\n        total = 1 + k\n        while True:\n            next_total = total + k * (k ** s)\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            s += 1\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 534,
        "completion_token_count": 643,
        "thoughts_token_count": 1025
    }
}