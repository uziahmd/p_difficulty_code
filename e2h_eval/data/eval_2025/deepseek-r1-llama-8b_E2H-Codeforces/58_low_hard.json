{
    "start": 1758278626.0704432,
    "end": 1758278914.9120193,
    "start-formatted": "2025-09-19 19:43 KST",
    "end-formatted": "2025-09-19 19:48 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Okay, so I have this programming problem to solve. Let's read it carefully.\n\nThe problem is about Vitaly and a graph theory problem. The task is to find the minimum number of edges to add to form a simple cycle of odd length, more than one vertex, and each vertex occurs at most once in the cycle. Also, we need to find the number of ways to do this.\n\nHmm. So the first thing I need to figure out is what's required for a graph to have such a cycle. And how to compute t and w.\n\nLet me think about the structure of the problem. We need to find cycles that are odd-length. For example, triangles (length 3), pentagons (5), etc. Since the cycle has to be simple, no repeated vertices.\n\nSo, given a graph, what's the minimal number of edges to add to create such a cycle?\n\nI remember that a cycle requires at least three nodes connected in a loop. So the first step is to check if the graph already has any such cycles. If not, then adding edges is necessary.\n\nWait, but the problem says \"each vertex occurs at most once\" in the cycle, which is just saying it's a simple cycle. So the main point is whether the graph has any odd-length cycles.\n\nBut wait, maybe the graph is bipartite. Because bipartite graphs don't have any odd-length cycles. So if the graph is bipartite, adding edges might not help. Or wait, no: because adding edges could connect two parts in a way that creates an odd cycle.\n\nWait, that's getting complicated. Maybe I should approach it differently.\n\nLet me think about the possible cases:\n\nCase 1: The graph already contains an odd cycle. Then t is 0, and w is the number of such existing cycles. But wait, no: because the question says 'the' cycle, but it's about forming any such cycle. Wait, no: the output is t=0 and w=1 in that case because you don't need to add any edges.\n\nWait, no: the problem says to find the minimal t, and the number of ways to add t edges to form a cycle. So if the graph already has an odd cycle, then t is 0, and w is 1 (since you can choose any of those cycles). But wait, the problem says 'a' simple cycle of odd length, so as long as there's at least one, t is 0 and w is the number of such cycles.\n\nWait, no. Wait, in the sample input, for the second test case:\n\n3 3\nEdges 1-2, 2-3, 3-1. So it's a triangle, which is an odd cycle. So the output is 0 1.\n\nSo yes, when the graph already has an odd cycle, t is 0 and w is 1.\n\nBut wait, suppose the graph has multiple such cycles. Like two triangles. Then w would be 2? Because there are two ways to choose.\n\nWait, but in the problem statement, the ways are considered equal if they have the same set of added edges. So if the original graph has a cycle, then adding zero edges is one way, regardless of how many cycles exist. Because all you do is not add any edges—so it's one way.\n\nAh, right. Because the way is determined by the set of edges you add. So if the graph already has a cycle, then the minimal t is 0, and w is 1.\n\nSo the first thing I need to check is whether the graph already has an odd cycle. If yes, then t=0, w=1.\n\nIf not, then I need to find the minimal t and number of ways.\n\nSo the next step is to find the minimal t when the graph doesn't have any odd cycles.\n\nHow can I approach that?\n\nHmm. One idea is that for a graph without any odd cycles, it must be bipartite. Because a bipartite graph cannot have any odd-length cycles. So if the graph is bipartite, then it's impossible to have an odd cycle, and thus we need to add edges to create one.\n\nWait, is that correct? Because a bipartite graph may not necessarily have an odd cycle even after adding edges. But perhaps adding edges can create an odd cycle.\n\nWait, no. Because if the graph is bipartite, it can't have any odd cycles. So to create an odd cycle, you need to connect the two partitions in a way that allows an odd-length path between some pair of nodes.\n\nAlternatively, perhaps the problem can be rephrased as: if the graph is bipartite, then the minimal t is the number of edges needed to create a cycle that connects the two partitions in an odd way.\n\nWait, perhaps another approach is needed.\n\nAnother idea is that to create an odd cycle, the graph must have at least two vertices",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to a given graph to form a simple cycle of odd length and the number of ways to achieve this. The solution involves analyzing the graph's structure to identify if it already contains an odd cycle or if it can be modified to form one.\n\n### Approach\n\n1. **Check for Existing Odd Cycle**: First, we check if the graph already contains an odd-length cycle. If it does, the minimum number of edges to add (t) is 0, and the number of ways (w) is 1 since no additional edges are needed.\n\n2. **Graph Bipartiteness Check**: If the graph does not have an odd cycle, it might be bipartite. A bipartite graph cannot have any odd-length cycles. In this case, we need to determine the minimum number of edges to add to create an odd cycle.\n\n3. **Determine Minimum Edges to Add**: For a bipartite graph, the minimum number of edges required to form an odd cycle is determined by the sizes of the two partitions. Specifically, if the partitions have sizes `a` and `b`, the minimum edges needed is `min(a, b)`. This is because connecting all nodes in one partition to the other will form a cycle of length `max(a, b)`, which is odd if one partition is larger than the other.\n\n4. **Count Ways to Add Edges**: The number of ways to add the edges is calculated based on the product of the sizes of the two partitions. This is because each node in the smaller partition can be connected to each node in the larger partition, leading to multiple valid configurations.\n\n### Solution Code\n\n```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, adj):\n    color = [-1] * (n + 1)\n    for i in range(1, n+1):\n        if color[i] == -1:\n            queue = deque()\n            queue.append(i)\n            color[i] = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    elif color[v] == color[u]:\n                        return False\n    return True\n\ndef find_min_t_w(n, adj):\n    # Check if there's any odd cycle\n    if not is_bipartite(n, adj):\n        # Then it's not bipartite, so there exists an odd cycle, t=0, w=1\n        return (0, 1)\n    \n    # Else, the graph is bipartite; need to calculate min edges to add\n    # Find the bipartition\n    left = []\n    right = []\n    color = [0] * (n + 1)\n    for i in range(1, n+1):\n        if color[i] == 0:\n            queue = deque([i])\n            color[i] = 0\n            while queue:\n                u = queue.popleft()\n                if u in left:\n                    continue\n                for v in adj[u]:\n                    if color[v] == 1:\n                        left.append(u)\n                        right.append(v)\n                    elif color[v] == 0:\n                        if v not in left:\n                            color[v] = 1\n                            queue.append(v)\n    # Now, left and right are the two partitions\n    # The minimal t is the minimum size between left and right\n    t = min(len(left), len(right))\n    # The number of ways is (left_size) * (right_size)\n    w = len(left) * len(right)\n    return (t, w)\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    n = int(input[ptr])\n    ptr += 1\n    m = int(input[ptr])\n    ptr += 1\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a = int(input[ptr])\n        ptr +=1\n        b = int(input[ptr])\n        ptr +=1\n        adj[a].append(b)\n        adj[b].append(a)\n    # Build adjacency list\n    # Ensure it's 1-based\n    t, w = find_min_t_w(n, adj)\n    print(f\"{t} {w}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n- **Reading Input**: The input is read and parsed into the number of vertices, edges, and the edges themselves.\n- **Bipartiteness Check**: The function `is_bipartite` checks if the graph is bipartite using BFS and coloring.\n- **Finding Minimum Edges and Ways**: If the graph is not bipartite, it has an odd cycle, so `t` is 0 and `w` is 1. If it is bipartite, the minimum edges and ways are calculated based on the sizes of the two partitions.\n- **Output**: The results are printed as specified.\n\nThis approach efficiently handles the problem by leveraging graph theory concepts like bipartiteness and cycle detection to determine the solution.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef is_bipartite(n, adj):\n    color = [-1] * (n + 1)\n    for i in range(1, n+1):\n        if color[i] == -1:\n            queue = deque()\n            queue.append(i)\n            color[i] = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    elif color[v] == color[u]:\n                        return False\n    return True\n\ndef find_min_t_w(n, adj):\n    # Check if there's any odd cycle\n    if not is_bipartite(n, adj):\n        # Then it's not bipartite, so there exists an odd cycle, t=0, w=1\n        return (0, 1)\n    \n    # Else, the graph is bipartite; need to calculate min edges to add\n    # Find the bipartition\n    left = []\n    right = []\n    color = [0] * (n + 1)\n    for i in range(1, n+1):\n        if color[i] == 0:\n            queue = deque([i])\n            color[i] = 0\n            while queue:\n                u = queue.popleft()\n                if u in left:\n                    continue\n                for v in adj[u]:\n                    if color[v] == 1:\n                        left.append(u)\n                        right.append(v)\n                    elif color[v] == 0:\n                        if v not in left:\n                            color[v] = 1\n                            queue.append(v)\n    # Now, left and right are the two partitions\n    # The minimal t is the minimum size between left and right\n    t = min(len(left), len(right))\n    # The number of ways is (left_size) * (right_size)\n    w = len(left) * len(right)\n    return (t, w)\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    n = int(input[ptr])\n    ptr += 1\n    m = int(input[ptr])\n    ptr += 1\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a = int(input[ptr])\n        ptr +=1\n        b = int(input[ptr])\n        ptr +=1\n        adj[a].append(b)\n        adj[b].append(a)\n    # Build adjacency list\n    # Ensure it's 1-based\n    t, w = find_min_t_w(n, adj)\n    print(f\"{t} {w}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 1087,
        "thoughts_token_count": 1025
    }
}