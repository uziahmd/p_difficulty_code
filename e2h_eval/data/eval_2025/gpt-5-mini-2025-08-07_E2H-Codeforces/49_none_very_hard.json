{
    "start": 1758294620.0633798,
    "end": 1758294640.1110585,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    # For each edge, must have l % g == 0 and l == a*b/g where gcd(a,b)=g\n    for u, v, g, l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n\n    MAXV = 10**6\n\n    val = [0]*n\n    visited = [False]*n\n\n    for i in range(n):\n        if visited[i]:\n            continue\n        # if isolated, assign 1\n        if not adj[i]:\n            val[i] = 1\n            visited[i] = True\n            continue\n        # BFS/DFS with assignment using prime-power factoring could be heavy.\n        # We'll try to propagate with rational multipliers: represent val[node] = base * num[node] / den[node]\n        # Instead, do this: choose initial candidate value for start as divisors of constraints with neighbors. Try small set.\n        # Collect constraints involving component\n        comp_nodes = []\n        q = [i]\n        visited_comp = set([i])\n        while q:\n            u = q.pop()\n            comp_nodes.append(u)\n            for v, g, l in adj[u]:\n                if v not in visited_comp:\n                    visited_comp.add(v)\n                    q.append(v)\n        # build adjacency for component\n        comp_index = {u: idx for idx,u in enumerate(comp_nodes)}\n        k = len(comp_nodes)\n        comp_adj = [[] for _ in range(k)]\n        comp_edges = []\n        for u in comp_nodes:\n            for v, g, l in adj[u]:\n                if u < v:  # ensure each edge once\n                    comp_edges.append((u, v, g, l))\n        for u,v,g,l in comp_edges:\n            ui = comp_index[u]; vi = comp_index[v]\n            comp_adj[ui].append((vi,g,l))\n            comp_adj[vi].append((ui,g,l))\n\n        # Find candidate starting values: from edges adjacent to start node i pick divisors of l\n        start = comp_index[i]\n        # gather candidates from neighbors of i\n        candidates = set()\n        for v,g,l in comp_adj[start]:\n            # possible a_i must be multiple of g and divisor of l\n            # enumerate divisors of l that are multiples of g\n            L = l\n            d = 1\n            while d*d <= L:\n                if L % d == 0:\n                    if d % g == 0:\n                        candidates.add(d)\n                    dd = L//d\n                    if dd % g == 0:\n                        candidates.add(dd)\n                d += 1\n        if not candidates:\n            print(\"NO\")\n            return\n        success = False\n        for cand in sorted(candidates):\n            assign = [0]*k\n            ok = True\n            assign[start] = cand\n            dq = deque([start])\n            while dq and ok:\n                u = dq.popleft()\n                au = assign[u]\n                for v,g,l in comp_adj[u]:\n                    if assign[v] != 0:\n                        # check consistency\n                        av = assign[v]\n                        if gcd(au,av) != g or (au*av)//g != l:\n                            ok = False\n                            break\n                    else:\n                        # assign v\n                        if au % g != 0:\n                            ok = False\n                            break\n                        # av must be = l * g / au? From relation l = au*av/g -> av = l*g/au\n                        num = l * g\n                        if num % au != 0:\n                            ok = False\n                            break\n                        av = num // au\n                        if av < 1 or av > MAXV:\n                            ok = False\n                            break\n                        if gcd(au,av) != g or (au*av)//g != l:\n                            ok = False\n                            break\n                        assign[v] = av\n                        dq.append(v)\n            if not ok:\n                continue\n            # verify all edges in component\n            for u,v,g,l in comp_edges:\n                au = assign[comp_index[u]]\n                av = assign[comp_index[v]]\n                if gcd(au,av) != g or (au*av)//g != l:\n                    ok = False\n                    break\n            if ok:\n                # set values\n                for idx,u in enumerate(comp_nodes):\n                    val[u] = assign[idx]\n                    visited[u] = True\n                success = True\n                break\n        if not success:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in val))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom math import gcd\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u, v, g, l))\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    # For each edge, must have l % g == 0 and l == a*b/g where gcd(a,b)=g\n    for u, v, g, l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n\n    MAXV = 10**6\n\n    val = [0]*n\n    visited = [False]*n\n\n    for i in range(n):\n        if visited[i]:\n            continue\n        # if isolated, assign 1\n        if not adj[i]:\n            val[i] = 1\n            visited[i] = True\n            continue\n        # BFS/DFS with assignment using prime-power factoring could be heavy.\n        # We'll try to propagate with rational multipliers: represent val[node] = base * num[node] / den[node]\n        # Instead, do this: choose initial candidate value for start as divisors of constraints with neighbors. Try small set.\n        # Collect constraints involving component\n        comp_nodes = []\n        q = [i]\n        visited_comp = set([i])\n        while q:\n            u = q.pop()\n            comp_nodes.append(u)\n            for v, g, l in adj[u]:\n                if v not in visited_comp:\n                    visited_comp.add(v)\n                    q.append(v)\n        # build adjacency for component\n        comp_index = {u: idx for idx,u in enumerate(comp_nodes)}\n        k = len(comp_nodes)\n        comp_adj = [[] for _ in range(k)]\n        comp_edges = []\n        for u in comp_nodes:\n            for v, g, l in adj[u]:\n                if u < v:  # ensure each edge once\n                    comp_edges.append((u, v, g, l))\n        for u,v,g,l in comp_edges:\n            ui = comp_index[u]; vi = comp_index[v]\n            comp_adj[ui].append((vi,g,l))\n            comp_adj[vi].append((ui,g,l))\n\n        # Find candidate starting values: from edges adjacent to start node i pick divisors of l\n        start = comp_index[i]\n        # gather candidates from neighbors of i\n        candidates = set()\n        for v,g,l in comp_adj[start]:\n            # possible a_i must be multiple of g and divisor of l\n            # enumerate divisors of l that are multiples of g\n            L = l\n            d = 1\n            while d*d <= L:\n                if L % d == 0:\n                    if d % g == 0:\n                        candidates.add(d)\n                    dd = L//d\n                    if dd % g == 0:\n                        candidates.add(dd)\n                d += 1\n        if not candidates:\n            print(\"NO\")\n            return\n        success = False\n        for cand in sorted(candidates):\n            assign = [0]*k\n            ok = True\n            assign[start] = cand\n            dq = deque([start])\n            while dq and ok:\n                u = dq.popleft()\n                au = assign[u]\n                for v,g,l in comp_adj[u]:\n                    if assign[v] != 0:\n                        # check consistency\n                        av = assign[v]\n                        if gcd(au,av) != g or (au*av)//g != l:\n                            ok = False\n                            break\n                    else:\n                        # assign v\n                        if au % g != 0:\n                            ok = False\n                            break\n                        # av must be = l * g / au? From relation l = au*av/g -> av = l*g/au\n                        num = l * g\n                        if num % au != 0:\n                            ok = False\n                            break\n                        av = num // au\n                        if av < 1 or av > MAXV:\n                            ok = False\n                            break\n                        if gcd(au,av) != g or (au*av)//g != l:\n                            ok = False\n                            break\n                        assign[v] = av\n                        dq.append(v)\n            if not ok:\n                continue\n            # verify all edges in component\n            for u,v,g,l in comp_edges:\n                au = assign[comp_index[u]]\n                av = assign[comp_index[v]]\n                if gcd(au,av) != g or (au*av)//g != l:\n                    ok = False\n                    break\n            if ok:\n                # set values\n                for idx,u in enumerate(comp_nodes):\n                    val[u] = assign[idx]\n                    visited[u] = True\n                success = True\n                break\n        if not success:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in val))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 1141,
        "thoughts_token_count": 0
    }
}