{
    "start": 1758094627.4549205,
    "end": 1758094666.5638552,
    "start-formatted": "2025-09-17 16:37 KST",
    "end-formatted": "2025-09-17 16:37 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Evaluating souvenir optimization**\n\nI'm working on the CF problem \"Selling Souvenirs,\" focusing on selecting items that maximize cost while staying within a weight limit. The solution involves grouping items by weight and sorting them by cost. For weights 1 and 2, I plan to use dynamic programming to calculate the best values. Then, for weight-3 items, I’ll iterate through them and compute the maximal possible value by combining results from the previous calculations. It feels intricate but manageable!",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n# build pair_sums from ones (pair highest together)\npair_sums = []\ni = 0\nwhile i + 1 < len(ones):\n    pair_sums.append(ones[i] + ones[i+1])\n    i += 2\npair_sums.sort(reverse=True)\n# merge pair_sums and twos into merged list of weight-2 slot values\nmerged = []\ni = j = 0\nwhile i < len(pair_sums) and j < len(twos):\n    if pair_sums[i] >= twos[j]:\n        merged.append(pair_sums[i]); i += 1\n    else:\n        merged.append(twos[j]); j += 1\nwhile i < len(pair_sums):\n    merged.append(pair_sums[i]); i += 1\nwhile j < len(twos):\n    merged.append(twos[j]); j += 1\n# prefix sums for merged (dp for even weights)\ndp_even = [0]\nfor v in merged:\n    dp_even.append(dp_even[-1] + v)\n# function to get best value using only ones and twos for capacity r\ndef best12(r):\n    k = r // 2\n    use_k = min(k, len(merged))\n    val = dp_even[use_k]\n    if r % 2 == 1:\n        idx_one = 2 * use_k\n        if idx_one < len(ones):\n            val += ones[idx_one]\n    # if k > len(merged), we may still have leftover ones to fill extra capacity beyond 2*len(merged)\n    # additional ones available start at index 2*use_k (if pairs used) or 2*use_k as above; we can fill up to r - 2*use_k ones\n    # compute additional ones sum\n    rem_cap = r - 2 * use_k\n    if rem_cap > 0:\n        start_idx = 2 * use_k\n        # if we already added one for odd case, account accordingly by starting index\n        if r % 2 == 1 and idx_one < len(ones):\n            start_idx += 1\n            rem_cap -= 1\n        if rem_cap > 0 and start_idx < len(ones):\n            end = min(len(ones), start_idx + rem_cap)\n            val += sum(ones[start_idx:end])\n    return val\n\nans = 0\nmax_threes = min(len(threes), m // 3)\nfor t in range(0, max_threes + 1):\n    weight3 = 3 * t\n    val3 = pref3[t]\n    rem = m - weight3\n    val12 = best12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n# prefix sums for threes\npref3 = [0]\nfor v in threes:\n    pref3.append(pref3[-1] + v)\n# build pair_sums from ones (pair highest together)\npair_sums = []\ni = 0\nwhile i + 1 < len(ones):\n    pair_sums.append(ones[i] + ones[i+1])\n    i += 2\npair_sums.sort(reverse=True)\n# merge pair_sums and twos into merged list of weight-2 slot values\nmerged = []\ni = j = 0\nwhile i < len(pair_sums) and j < len(twos):\n    if pair_sums[i] >= twos[j]:\n        merged.append(pair_sums[i]); i += 1\n    else:\n        merged.append(twos[j]); j += 1\nwhile i < len(pair_sums):\n    merged.append(pair_sums[i]); i += 1\nwhile j < len(twos):\n    merged.append(twos[j]); j += 1\n# prefix sums for merged (dp for even weights)\ndp_even = [0]\nfor v in merged:\n    dp_even.append(dp_even[-1] + v)\n# function to get best value using only ones and twos for capacity r\ndef best12(r):\n    k = r // 2\n    use_k = min(k, len(merged))\n    val = dp_even[use_k]\n    if r % 2 == 1:\n        idx_one = 2 * use_k\n        if idx_one < len(ones):\n            val += ones[idx_one]\n    # if k > len(merged), we may still have leftover ones to fill extra capacity beyond 2*len(merged)\n    # additional ones available start at index 2*use_k (if pairs used) or 2*use_k as above; we can fill up to r - 2*use_k ones\n    # compute additional ones sum\n    rem_cap = r - 2 * use_k\n    if rem_cap > 0:\n        start_idx = 2 * use_k\n        # if we already added one for odd case, account accordingly by starting index\n        if r % 2 == 1 and idx_one < len(ones):\n            start_idx += 1\n            rem_cap -= 1\n        if rem_cap > 0 and start_idx < len(ones):\n            end = min(len(ones), start_idx + rem_cap)\n            val += sum(ones[start_idx:end])\n    return val\n\nans = 0\nmax_threes = min(len(threes), m // 3)\nfor t in range(0, max_threes + 1):\n    weight3 = 3 * t\n    val3 = pref3[t]\n    rem = m - weight3\n    val12 = best12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 421,
        "completion_token_count": 2669,
        "thoughts_token_count": 1920
    }
}