{
    "start": 1758094628.7616737,
    "end": 1758094668.4143322,
    "start-formatted": "2025-09-17 16:37 KST",
    "end-formatted": "2025-09-17 16:37 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Examining weight computation**\n\nI'm thinking through how to compute maximum values based on weights and specific sums. For weights greater than or equal to 2 times a variable t, I'd calculate a value using precomputed sum arrays. I'll loop through weights and possible t values, but the combinations could get overwhelming since the boundaries are pretty large. An alternative might be a greedy approach that treats weights as pairs of ones or as singles, which could simplify things. Also, maintaining a pointer to track used weights could streamline the process!",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums\ndef pref(arr):\n    ps = [0]\n    for x in arr:\n        ps.append(ps[-1] + x)\n    return ps\n\npref1 = pref(ones)\npref2 = pref(twos)\npref3 = pref(threes)\n\n# build ones_pairs (values and implicit index)\nones_pairs = []\nfor i in range(0, len(ones) - 1, 2):\n    ones_pairs.append(ones[i] + ones[i+1])\n\n# build combined twos list with flags indicating if from ones_pairs\ncombined = []\nfor v in twos:\n    combined.append((v, False))\nfor idx, v in enumerate(ones_pairs):\n    combined.append((v, True))\ncombined.sort(key=lambda x: x[0], reverse=True)\n\ntwos_vals = [v for v, _ in combined]\nis_pair = [flag for _, flag in combined]\ntwos_pref = pref(twos_vals)\n\n# prefix count of pairs used among first t twos\npairs_count_pref = [0]\nfor flag in is_pair:\n    pairs_count_pref.append(pairs_count_pref[-1] + (1 if flag else 0))\n\n# prepare best12 for capacities up to m\nbest12 = [0] * (m + 1)\nmax_t = len(twos_vals)\nfor t in range(0, max_t + 1):\n    weight_even = 2 * t\n    if weight_even > m:\n        break\n    val_even = twos_pref[t]\n    if best12[weight_even] < val_even:\n        best12[weight_even] = val_even\n    # odd weight: can add one single if available\n    # number of ones pairs used among first t twos = pairs_count_pref[t]\n    p = pairs_count_pref[t]\n    next_single_idx = p * 2\n    single_val = ones[next_single_idx] if next_single_idx < len(ones) else 0\n    weight_odd = weight_even + 1\n    if weight_odd <= m:\n        val_odd = val_even + single_val\n        if best12[weight_odd] < val_odd:\n            best12[weight_odd] = val_odd\n\n# Make non-decreasing over capacity\nfor w in range(1, m + 1):\n    if best12[w] < best12[w - 1]:\n        best12[w] = best12[w - 1]\n\n# iterate number of threes\nans = 0\nmax_k3 = min(len(threes), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    w3 = 3 * k3\n    val3 = pref3[k3]\n    rem = m - w3\n    val12 = best12[rem]\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it); c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums\ndef pref(arr):\n    ps = [0]\n    for x in arr:\n        ps.append(ps[-1] + x)\n    return ps\n\npref1 = pref(ones)\npref2 = pref(twos)\npref3 = pref(threes)\n\n# build ones_pairs (values and implicit index)\nones_pairs = []\nfor i in range(0, len(ones) - 1, 2):\n    ones_pairs.append(ones[i] + ones[i+1])\n\n# build combined twos list with flags indicating if from ones_pairs\ncombined = []\nfor v in twos:\n    combined.append((v, False))\nfor idx, v in enumerate(ones_pairs):\n    combined.append((v, True))\ncombined.sort(key=lambda x: x[0], reverse=True)\n\ntwos_vals = [v for v, _ in combined]\nis_pair = [flag for _, flag in combined]\ntwos_pref = pref(twos_vals)\n\n# prefix count of pairs used among first t twos\npairs_count_pref = [0]\nfor flag in is_pair:\n    pairs_count_pref.append(pairs_count_pref[-1] + (1 if flag else 0))\n\n# prepare best12 for capacities up to m\nbest12 = [0] * (m + 1)\nmax_t = len(twos_vals)\nfor t in range(0, max_t + 1):\n    weight_even = 2 * t\n    if weight_even > m:\n        break\n    val_even = twos_pref[t]\n    if best12[weight_even] < val_even:\n        best12[weight_even] = val_even\n    # odd weight: can add one single if available\n    # number of ones pairs used among first t twos = pairs_count_pref[t]\n    p = pairs_count_pref[t]\n    next_single_idx = p * 2\n    single_val = ones[next_single_idx] if next_single_idx < len(ones) else 0\n    weight_odd = weight_even + 1\n    if weight_odd <= m:\n        val_odd = val_even + single_val\n        if best12[weight_odd] < val_odd:\n            best12[weight_odd] = val_odd\n\n# Make non-decreasing over capacity\nfor w in range(1, m + 1):\n    if best12[w] < best12[w - 1]:\n        best12[w] = best12[w - 1]\n\n# iterate number of threes\nans = 0\nmax_k3 = min(len(threes), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    w3 = 3 * k3\n    val3 = pref3[k3]\n    rem = m - w3\n    val12 = best12[rem]\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 3173,
        "thoughts_token_count": 2432
    }
}