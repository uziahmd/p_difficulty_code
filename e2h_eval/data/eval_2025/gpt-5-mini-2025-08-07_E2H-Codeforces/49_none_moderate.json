{
    "start": 1758294614.5037258,
    "end": 1758294647.5329897,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = [[] for _ in range(n)]\n    edge_list = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edge_list.append((u,v,g,l))\n        edges[u].append((v,g,l))\n        edges[v].append((u,g,l))\n    # Check validity: l must be multiple of g\n    for (_,_,g,l) in edge_list:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # We'll work with values a[i]. Represented as g * x where x divides (l/g)\n    # For each edge u-v: let gu = g, lu = l. Need gcd(a[u],a[v])=g and lcm(a[u],a[v])=l\n    # Equivalent: a[u]*a[v] = g*l and gcd = g.\n    # Let b[i] = a[i] / g_edge? Use standard approach: assign prime exponents via factorization of l/g.\n    MAXV = 10**6\n    # Precompute primes up to 1e6 for factorization\n    limit = MAXV\n    spf = list(range(limit+1))\n    for i in range(2,int(limit**0.5)+1):\n        if spf[i]==i:\n            step = i\n            for j in range(i*i, limit+1, step):\n                if spf[j]==j:\n                    spf[j]=i\n    # We'll attempt to assign values by DFS: treat each edge gives constraints a[u]*a[v]=g*l and gcd(a[u],a[v])=g\n    # So let t = l // g. Then let x = a[u]//g, y = a[v]//g -> gcd(x,y)=1 and x*y = t\n    # Thus x and y are complementary coprime factors of t.\n    # We'll propagate by choosing for each connected component a root value and deducing others; need to ensure consistency.\n    # For each edge u-v with g,l: a[v] = l * a[u] / (g * a[u])? Simpler: since a[u]*a[v]=g*l, if a[u] known then a[v]=(g*l)//a[u], must divide integer and satisfy gcd.\n    used = [False]*n\n    a = [0]*n\n    from collections import deque\n    for i in range(n):\n        if used[i]:\n            continue\n        # start component; try to find a starting value by BFS with fractional constraints represented as ratios: a[v] = (g*l)/a[u]\n        # We'll attempt to assign a root value r and propagate. To find r, we can deduce constraints that root must satisfy: after cycles we may get equation r = k/r => r^2 = k\n        # Approach: do BFS building expression a[node] = p_node / q_node * r where r is root value, p/q integers.\n        ord_nodes = []\n        parent = [-1]*n\n        pval = [1]*n  # numerator relative to root\n        qval = [1]*n  # denominator relative to root\n        q_ok = [True]*n\n        queue = deque([i])\n        used[i]=True\n        ord_nodes.append(i)\n        parent[i]=-1\n        while queue:\n            u = queue.popleft()\n            for v,g,l in edges[u]:\n                if not used[v]:\n                    # a[v] = (g*l)//a[u] so relative to root: (p_v/q_v)*r = (g*l)/((p_u/q_u)*r) => p_v/q_v = (g*l * q_u)/(p_u * r^2) * r^2? Wait r cancels: p_v/q_v = (g*l * q_u)/(p_u) * 1/r^2? Hmm derive properly below.\n                    # Better derive multiplicative relation between a[v] and a[u]: a[v] = (g*l)//a[u] and also must be integer. For representation in terms of root r: a[u] = p_u/q_u * r\n                    # Then a[v] = (g*l) / (p_u/q_u * r) = (g*l * q_u / p_u) * (1/r)\n                    # So a[v] is proportional to 1/r, while a[u] proportional to r. So we should represent as a[node] = C_node * r^{s_node} where s is +-1.\n                    pass\n        # The above algebra suggests values flip exponent sign each edge. Represent a[node] = k_node * r^{sign_node} where sign is +1 for root, alternates.\n        # Let's rebuild BFS with sign and integer multiplier k.\n        for j in range(n):\n            used[j] = used[j]  # no-op\n        # redo properly:\n        comp_nodes = []\n        sign = {}\n        k = {}\n        queue = deque([i])\n        sign[i]=1\n        k[i]=1\n        used[i]=True\n        comp_nodes.append(i)\n        ok = True\n        while queue and ok:\n            u = queue.popleft()\n            for v,g,l in edges[u]:\n                t = g*l\n                if v not in sign:\n                    sign[v] = -sign[u]\n                    # Relation: a[v] = t // a[u]\n                    # If a[u] = k[u]*r^{sign[u]}, a[v] = t / (k[u]*r^{sign[u]}) = (t//k[u]) * r^{-sign[u]} if division exact but t may not divisible by k[u] yet.\n                    # We store k[v] = t // k[u], but only if t % k[u]==0\n                    if t % k[u] != 0:\n                        ok = False\n                        break\n                    k[v] = t // k[u]\n                    queue.append(v)\n                    used[v]=True\n                    comp_nodes.append(v)\n                else:\n                    # must satisfy k[v] * r^{sign[v]} == t / (k[u]*r^{sign[u]})\n                    # Multiply both sides: k[v]*k[u] * r^{sign[v]+sign[u]} == t\n                    if sign[v]+sign[u]==0:\n                        # r^0 -> require k[v]*k[u] == t\n                        if k[v]*k[u] != t:\n                            ok = False\n                            break\n                    elif sign[v]+sign[u]==2:\n                        # r^2 -> k[v]*k[u]*r^2 == t  => r^2 = t/(k[v]*k[u]) must be positive perfect square\n                        num = t\n                        den = k[v]*k[u]\n                        if num % den != 0:\n                            ok = False\n                            break\n                        val = num//den\n                        # store constraint for r^2\n                        # attach to special list\n                        if 'r2' in locals():\n                            pass\n                    elif sign[v]+sign[u]==-2:\n                        # r^-2 -> k[v]*k[u] / r^2 == t => r^2 = k[v]*k[u] / t must be integer perfect square\n                        num = k[v]*k[u]\n                        den = t\n                        if num % den != 0:\n                            ok = False\n                            break\n                        val = num//den\n                    # We'll collect all constraints outside loop\n        if not ok:\n            print(\"NO\")\n            return\n        # Now collect constraints for r^2 from all edges within component\n        r2_constraints = []\n        for u in comp_nodes:\n            for v,g,l in edges[u]:\n                if u < v:\n                    t = g*l\n                    su = sign[u]\n                    sv = sign[v]\n                    if su+sv==0:\n                        if k[u]*k[v] != t:\n                            print(\"NO\")\n                            return\n                    elif su+sv==2:\n                        num = t\n                        den = k[u]*k[v]\n                        if num % den != 0:\n                            print(\"NO\")\n                            return\n                        r2_constraints.append(num//den)\n                    elif su+sv==-2:\n                        num = k[u]*k[v]\n                        den = t\n                        if num % den != 0:\n                            print(\"NO\")\n                            return\n                        r2_constraints.append(num//den)\n        # All r2_constraints must be equal and be perfect square\n        r2_val = 1\n        if r2_constraints:\n            r2_val = r2_constraints[0]\n            for vcon in r2_constraints:\n                if vcon != r2_val:\n                    print(\"NO\")\n                    return\n        # r2_val must be perfect square\n        sr = int(math.isqrt(r2_val))\n        if sr*sr != r2_val:\n            print(\"NO\")\n            return\n        r = sr\n        # assign a for nodes\n        for u in comp_nodes:\n            if sign[u]==1:\n                a[u] = k[u]*r\n            else:\n                a[u] = k[u]//r if r!=0 else 0\n            if a[u]<=0 or a[u]>MAXV:\n                print(\"NO\")\n                return\n        # verify edges in component\n        for u in comp_nodes:\n            for v,g,l in edges[u]:\n                if a[u]==0 or a[v]==0:\n                    print(\"NO\")\n                    return\n                if math.gcd(a[u],a[v]) != g or (a[u]*a[v])//math.gcd(a[u],a[v]) != l:\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = [[] for _ in range(n)]\n    edge_list = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edge_list.append((u,v,g,l))\n        edges[u].append((v,g,l))\n        edges[v].append((u,g,l))\n    # Check validity: l must be multiple of g\n    for (_,_,g,l) in edge_list:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # We'll work with values a[i]. Represented as g * x where x divides (l/g)\n    # For each edge u-v: let gu = g, lu = l. Need gcd(a[u],a[v])=g and lcm(a[u],a[v])=l\n    # Equivalent: a[u]*a[v] = g*l and gcd = g.\n    # Let b[i] = a[i] / g_edge? Use standard approach: assign prime exponents via factorization of l/g.\n    MAXV = 10**6\n    # Precompute primes up to 1e6 for factorization\n    limit = MAXV\n    spf = list(range(limit+1))\n    for i in range(2,int(limit**0.5)+1):\n        if spf[i]==i:\n            step = i\n            for j in range(i*i, limit+1, step):\n                if spf[j]==j:\n                    spf[j]=i\n    # We'll attempt to assign values by DFS: treat each edge gives constraints a[u]*a[v]=g*l and gcd(a[u],a[v])=g\n    # So let t = l // g. Then let x = a[u]//g, y = a[v]//g -> gcd(x,y)=1 and x*y = t\n    # Thus x and y are complementary coprime factors of t.\n    # We'll propagate by choosing for each connected component a root value and deducing others; need to ensure consistency.\n    # For each edge u-v with g,l: a[v] = l * a[u] / (g * a[u])? Simpler: since a[u]*a[v]=g*l, if a[u] known then a[v]=(g*l)//a[u], must divide integer and satisfy gcd.\n    used = [False]*n\n    a = [0]*n\n    from collections import deque\n    for i in range(n):\n        if used[i]:\n            continue\n        # start component; try to find a starting value by BFS with fractional constraints represented as ratios: a[v] = (g*l)/a[u]\n        # We'll attempt to assign a root value r and propagate. To find r, we can deduce constraints that root must satisfy: after cycles we may get equation r = k/r => r^2 = k\n        # Approach: do BFS building expression a[node] = p_node / q_node * r where r is root value, p/q integers.\n        ord_nodes = []\n        parent = [-1]*n\n        pval = [1]*n  # numerator relative to root\n        qval = [1]*n  # denominator relative to root\n        q_ok = [True]*n\n        queue = deque([i])\n        used[i]=True\n        ord_nodes.append(i)\n        parent[i]=-1\n        while queue:\n            u = queue.popleft()\n            for v,g,l in edges[u]:\n                if not used[v]:\n                    # a[v] = (g*l)//a[u] so relative to root: (p_v/q_v)*r = (g*l)/((p_u/q_u)*r) => p_v/q_v = (g*l * q_u)/(p_u * r^2) * r^2? Wait r cancels: p_v/q_v = (g*l * q_u)/(p_u) * 1/r^2? Hmm derive properly below.\n                    # Better derive multiplicative relation between a[v] and a[u]: a[v] = (g*l)//a[u] and also must be integer. For representation in terms of root r: a[u] = p_u/q_u * r\n                    # Then a[v] = (g*l) / (p_u/q_u * r) = (g*l * q_u / p_u) * (1/r)\n                    # So a[v] is proportional to 1/r, while a[u] proportional to r. So we should represent as a[node] = C_node * r^{s_node} where s is +-1.\n                    pass\n        # The above algebra suggests values flip exponent sign each edge. Represent a[node] = k_node * r^{sign_node} where sign is +1 for root, alternates.\n        # Let's rebuild BFS with sign and integer multiplier k.\n        for j in range(n):\n            used[j] = used[j]  # no-op\n        # redo properly:\n        comp_nodes = []\n        sign = {}\n        k = {}\n        queue = deque([i])\n        sign[i]=1\n        k[i]=1\n        used[i]=True\n        comp_nodes.append(i)\n        ok = True\n        while queue and ok:\n            u = queue.popleft()\n            for v,g,l in edges[u]:\n                t = g*l\n                if v not in sign:\n                    sign[v] = -sign[u]\n                    # Relation: a[v] = t // a[u]\n                    # If a[u] = k[u]*r^{sign[u]}, a[v] = t / (k[u]*r^{sign[u]}) = (t//k[u]) * r^{-sign[u]} if division exact but t may not divisible by k[u] yet.\n                    # We store k[v] = t // k[u], but only if t % k[u]==0\n                    if t % k[u] != 0:\n                        ok = False\n                        break\n                    k[v] = t // k[u]\n                    queue.append(v)\n                    used[v]=True\n                    comp_nodes.append(v)\n                else:\n                    # must satisfy k[v] * r^{sign[v]} == t / (k[u]*r^{sign[u]})\n                    # Multiply both sides: k[v]*k[u] * r^{sign[v]+sign[u]} == t\n                    if sign[v]+sign[u]==0:\n                        # r^0 -> require k[v]*k[u] == t\n                        if k[v]*k[u] != t:\n                            ok = False\n                            break\n                    elif sign[v]+sign[u]==2:\n                        # r^2 -> k[v]*k[u]*r^2 == t  => r^2 = t/(k[v]*k[u]) must be positive perfect square\n                        num = t\n                        den = k[v]*k[u]\n                        if num % den != 0:\n                            ok = False\n                            break\n                        val = num//den\n                        # store constraint for r^2\n                        # attach to special list\n                        if 'r2' in locals():\n                            pass\n                    elif sign[v]+sign[u]==-2:\n                        # r^-2 -> k[v]*k[u] / r^2 == t => r^2 = k[v]*k[u] / t must be integer perfect square\n                        num = k[v]*k[u]\n                        den = t\n                        if num % den != 0:\n                            ok = False\n                            break\n                        val = num//den\n                    # We'll collect all constraints outside loop\n        if not ok:\n            print(\"NO\")\n            return\n        # Now collect constraints for r^2 from all edges within component\n        r2_constraints = []\n        for u in comp_nodes:\n            for v,g,l in edges[u]:\n                if u < v:\n                    t = g*l\n                    su = sign[u]\n                    sv = sign[v]\n                    if su+sv==0:\n                        if k[u]*k[v] != t:\n                            print(\"NO\")\n                            return\n                    elif su+sv==2:\n                        num = t\n                        den = k[u]*k[v]\n                        if num % den != 0:\n                            print(\"NO\")\n                            return\n                        r2_constraints.append(num//den)\n                    elif su+sv==-2:\n                        num = k[u]*k[v]\n                        den = t\n                        if num % den != 0:\n                            print(\"NO\")\n                            return\n                        r2_constraints.append(num//den)\n        # All r2_constraints must be equal and be perfect square\n        r2_val = 1\n        if r2_constraints:\n            r2_val = r2_constraints[0]\n            for vcon in r2_constraints:\n                if vcon != r2_val:\n                    print(\"NO\")\n                    return\n        # r2_val must be perfect square\n        sr = int(math.isqrt(r2_val))\n        if sr*sr != r2_val:\n            print(\"NO\")\n            return\n        r = sr\n        # assign a for nodes\n        for u in comp_nodes:\n            if sign[u]==1:\n                a[u] = k[u]*r\n            else:\n                a[u] = k[u]//r if r!=0 else 0\n            if a[u]<=0 or a[u]>MAXV:\n                print(\"NO\")\n                return\n        # verify edges in component\n        for u in comp_nodes:\n            for v,g,l in edges[u]:\n                if a[u]==0 or a[v]==0:\n                    print(\"NO\")\n                    return\n                if math.gcd(a[u],a[v]) != g or (a[u]*a[v])//math.gcd(a[u],a[v]) != l:\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 2151,
        "thoughts_token_count": 0
    }
}