{
    "start": 1758294672.1689787,
    "end": 1758294687.448023,
    "start-formatted": "2025-09-20 00:11 KST",
    "end-formatted": "2025-09-20 00:11 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    n = int(data[0])\n    A = data[1].strip()\n    total_len = 2 * n\n    # DP: dp[i][h] = best total (as int) achievable from prefix length i (0..2n) with h moves by Homer so far,\n    # where we construct numbers by appending digits (effectively S1 and S2 as decimal integers).\n    # We process from left to right; at step i we decide H or M if remaining moves allow.\n    # But numbers can be large (up to 10^18-1), so use Python int.\n    # We'll store dp values and parent choices.\n    # Initialize with -inf\n    NEG = -10**100\n    dp = [[NEG] * (n + 1) for _ in range(total_len + 1)]\n    par = [[None] * (n + 1) for _ in range(total_len + 1)]\n    dp[0][0] = 0  # no digits yet\n    # Also need current S1 and S2 contributions -> we store dp as S1 + S2 numeric sum.\n    # When appending digit d to S1, new sum = old_sum + d * 10^{remaining digits to be appended to that player's number after this?}\n    # But because numbers are formed by appending digits in order, value increments by d * 10^{(remaining moves of that player after this move)}.\n    # However in left-to-right processing we don't know future count for each player. Alternative approach:\n    # Process from right to left instead. If we process digits from rightmost to leftmost, when we append digit to a player's number,\n    # it becomes added multiplied by 10^{k} where k equals number of digits already assigned to that player (i.e., position from right).\n    # So process i from total_len-1 downto 0.\n    dp = [[NEG] * (n + 1) for _ in range(total_len + 1)]\n    par = [[None] * (n + 1) for _ in range(total_len + 1)]\n    # dp[pos][h] where pos is number of processed digits from right (0..2n), h is how many of those assigned to Homer.\n    dp[0][0] = 0\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = pow10[i-1] * 10\n    # We'll iterate pos from 0..2n-1, at each step take digit at index total_len-1-pos (right to left)\n    for pos in range(0, total_len):\n        d = ord(A[total_len - 1 - pos]) - 48\n        for h in range(0, min(pos, n) + 1):\n            if dp[pos][h] == NEG:\n                continue\n            m = pos - h\n            # assign to Homer if h < n\n            if h < n:\n                add = d * pow10[h]  # h digits already assigned to Homer on right -> new digit goes to position h\n                val = dp[pos][h] + add\n                if val > dp[pos+1][h+1]:\n                    dp[pos+1][h+1] = val\n                    par[pos+1][h+1] = ('H', h)\n            # assign to Marge if m < n\n            if m < n:\n                add = d * pow10[m]\n                val = dp[pos][h] + add\n                if val > dp[pos+1][h]:\n                    dp[pos+1][h] = val\n                    par[pos+1][h] = ('M', h)\n    # reconstruct from dp[2n][n] (pos=2n, h=n)\n    res = []\n    pos = total_len\n    h = n\n    if dp[pos][h] == NEG:\n        # should not happen\n        print('H'*n + 'M'*n)\n        return\n    while pos > 0:\n        choice, prevh = par[pos][h]\n        res.append(choice)\n        # move to previous state\n        pos -= 1\n        h = prevh\n    # res is moves from right to left; need to reverse to get left-to-right moves\n    res = res[::-1]\n    # output as string\n    sys.stdout.write(''.join(res))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    n = int(data[0])\n    A = data[1].strip()\n    total_len = 2 * n\n    # DP: dp[i][h] = best total (as int) achievable from prefix length i (0..2n) with h moves by Homer so far,\n    # where we construct numbers by appending digits (effectively S1 and S2 as decimal integers).\n    # We process from left to right; at step i we decide H or M if remaining moves allow.\n    # But numbers can be large (up to 10^18-1), so use Python int.\n    # We'll store dp values and parent choices.\n    # Initialize with -inf\n    NEG = -10**100\n    dp = [[NEG] * (n + 1) for _ in range(total_len + 1)]\n    par = [[None] * (n + 1) for _ in range(total_len + 1)]\n    dp[0][0] = 0  # no digits yet\n    # Also need current S1 and S2 contributions -> we store dp as S1 + S2 numeric sum.\n    # When appending digit d to S1, new sum = old_sum + d * 10^{remaining digits to be appended to that player's number after this?}\n    # But because numbers are formed by appending digits in order, value increments by d * 10^{(remaining moves of that player after this move)}.\n    # However in left-to-right processing we don't know future count for each player. Alternative approach:\n    # Process from right to left instead. If we process digits from rightmost to leftmost, when we append digit to a player's number,\n    # it becomes added multiplied by 10^{k} where k equals number of digits already assigned to that player (i.e., position from right).\n    # So process i from total_len-1 downto 0.\n    dp = [[NEG] * (n + 1) for _ in range(total_len + 1)]\n    par = [[None] * (n + 1) for _ in range(total_len + 1)]\n    # dp[pos][h] where pos is number of processed digits from right (0..2n), h is how many of those assigned to Homer.\n    dp[0][0] = 0\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = pow10[i-1] * 10\n    # We'll iterate pos from 0..2n-1, at each step take digit at index total_len-1-pos (right to left)\n    for pos in range(0, total_len):\n        d = ord(A[total_len - 1 - pos]) - 48\n        for h in range(0, min(pos, n) + 1):\n            if dp[pos][h] == NEG:\n                continue\n            m = pos - h\n            # assign to Homer if h < n\n            if h < n:\n                add = d * pow10[h]  # h digits already assigned to Homer on right -> new digit goes to position h\n                val = dp[pos][h] + add\n                if val > dp[pos+1][h+1]:\n                    dp[pos+1][h+1] = val\n                    par[pos+1][h+1] = ('H', h)\n            # assign to Marge if m < n\n            if m < n:\n                add = d * pow10[m]\n                val = dp[pos][h] + add\n                if val > dp[pos+1][h]:\n                    dp[pos+1][h] = val\n                    par[pos+1][h] = ('M', h)\n    # reconstruct from dp[2n][n] (pos=2n, h=n)\n    res = []\n    pos = total_len\n    h = n\n    if dp[pos][h] == NEG:\n        # should not happen\n        print('H'*n + 'M'*n)\n        return\n    while pos > 0:\n        choice, prevh = par[pos][h]\n        res.append(choice)\n        # move to previous state\n        pos -= 1\n        h = prevh\n    # res is moves from right to left; need to reverse to get left-to-right moves\n    res = res[::-1]\n    # output as string\n    sys.stdout.write(''.join(res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 412,
        "completion_token_count": 997,
        "thoughts_token_count": 0
    }
}