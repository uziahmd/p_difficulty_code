{
    "start": 1758294620.5347188,
    "end": 1758294639.5714767,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    out_lines = []\n    while True:\n        try:\n            n = int(next(it))\n        except StopIteration:\n            break\n        m = int(next(it))\n        g = [[] for _ in range(n)]\n        for _ in range(m):\n            a = int(next(it)) - 1\n            b = int(next(it)) - 1\n            g[a].append(b)\n            g[b].append(a)\n\n        color = [-1]*n\n        comp = [-1]*n\n        comp_id = 0\n        is_bip = []\n        parts = []\n        for i in range(n):\n            if comp[i] != -1:\n                continue\n            q = deque([i])\n            comp[i] = comp_id\n            color[i] = 0\n            bip = True\n            cnt = [0,0]\n            cnt[0] = 1\n            cnt[1] = 0\n            nodes = [i]\n            while q:\n                v = q.popleft()\n                for to in g[v]:\n                    if comp[to] == -1:\n                        comp[to] = comp_id\n                        color[to] = color[v]^1\n                        cnt[color[to]] += 1\n                        q.append(to)\n                        nodes.append(to)\n                    else:\n                        if color[to] == color[v]:\n                            bip = False\n            is_bip.append(bip)\n            parts.append(nodes)\n            comp_id += 1\n\n        # If any component already has an odd cycle -> t=0, w=1\n        ok_zero = False\n        for b in is_bip:\n            if not b:\n                ok_zero = True\n                break\n        if ok_zero:\n            out_lines.append(\"0 1\")\n            continue\n\n        # Check for possible t=1: adding one edge to create odd cycle\n        ways1 = 0\n        for cid in range(comp_id):\n            nodes = parts[cid]\n            # component is bipartite\n            # count pairs within same color that are not connected\n            # existing edges between same color are zero (since bipartite)\n            # number of possible edges between same color = C(cnt0,2)+C(cnt1,2)\n            cnt0 = sum(1 for v in nodes if color[v]==0)\n            cnt1 = len(nodes)-cnt0\n            total_pairs = cnt0*(cnt0-1)//2 + cnt1*(cnt1-1)//2\n            # subtract existing edges between same color (should be 0)\n            # but there may be edges to other components none\n            ways1 += total_pairs\n        # However adding edge inside same component between same color is allowed only if edge doesn't already exist.\n        # The graph has no such edges, so OK.\n        if ways1 > 0:\n            out_lines.append(f\"1 {ways1}\")\n            continue\n\n        # t>1. If there is any component with size>=2, we can form triangle by adding 2 edges?\n        # For isolated vertices and no edges:\n        # Known solution: If there exists component with size>=2 then t=2 and count is sum over components cnt0*cnt1 - existing edges?\n        # But standard CF solution: If no odd cycle and no possible t=1 then:\n        # If there exists any component with size>=2 then t=2 and number of ways = number of pairs of vertices in same component that are not connected? Actually correct result:\n        # For creating odd cycle by adding 2 edges minimal is 2 unless graph has no edges at all -> then need 3 to make triangle.\n        if m == 0:\n            # need 3 edges to make a cycle (>1 vertex) odd length => triangle. Count = C(n,3)\n            from math import comb\n            if n < 3:\n                out_lines.append(\"3 0\")\n            else:\n                out_lines.append(f\"3 {n*(n-1)*(n-2)//6}\")\n            continue\n\n        # Otherwise t=2. Count ways: number of unordered pairs of vertices (u,v) that are in different parts of same bipartite component? Standard CF: sum over components cnt0*cnt1 - m\n        ways2 = 0\n        for cid in range(comp_id):\n            nodes = parts[cid]\n            cnt0 = sum(1 for v in nodes if color[v]==0)\n            cnt1 = len(nodes)-cnt0\n            ways2 += cnt0*cnt1\n        # subtract existing edges (each existing edge connects different colors within its component)\n        ways2 -= m\n        out_lines.append(f\"2 {ways2}\")\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    out_lines = []\n    while True:\n        try:\n            n = int(next(it))\n        except StopIteration:\n            break\n        m = int(next(it))\n        g = [[] for _ in range(n)]\n        for _ in range(m):\n            a = int(next(it)) - 1\n            b = int(next(it)) - 1\n            g[a].append(b)\n            g[b].append(a)\n\n        color = [-1]*n\n        comp = [-1]*n\n        comp_id = 0\n        is_bip = []\n        parts = []\n        for i in range(n):\n            if comp[i] != -1:\n                continue\n            q = deque([i])\n            comp[i] = comp_id\n            color[i] = 0\n            bip = True\n            cnt = [0,0]\n            cnt[0] = 1\n            cnt[1] = 0\n            nodes = [i]\n            while q:\n                v = q.popleft()\n                for to in g[v]:\n                    if comp[to] == -1:\n                        comp[to] = comp_id\n                        color[to] = color[v]^1\n                        cnt[color[to]] += 1\n                        q.append(to)\n                        nodes.append(to)\n                    else:\n                        if color[to] == color[v]:\n                            bip = False\n            is_bip.append(bip)\n            parts.append(nodes)\n            comp_id += 1\n\n        # If any component already has an odd cycle -> t=0, w=1\n        ok_zero = False\n        for b in is_bip:\n            if not b:\n                ok_zero = True\n                break\n        if ok_zero:\n            out_lines.append(\"0 1\")\n            continue\n\n        # Check for possible t=1: adding one edge to create odd cycle\n        ways1 = 0\n        for cid in range(comp_id):\n            nodes = parts[cid]\n            # component is bipartite\n            # count pairs within same color that are not connected\n            # existing edges between same color are zero (since bipartite)\n            # number of possible edges between same color = C(cnt0,2)+C(cnt1,2)\n            cnt0 = sum(1 for v in nodes if color[v]==0)\n            cnt1 = len(nodes)-cnt0\n            total_pairs = cnt0*(cnt0-1)//2 + cnt1*(cnt1-1)//2\n            # subtract existing edges between same color (should be 0)\n            # but there may be edges to other components none\n            ways1 += total_pairs\n        # However adding edge inside same component between same color is allowed only if edge doesn't already exist.\n        # The graph has no such edges, so OK.\n        if ways1 > 0:\n            out_lines.append(f\"1 {ways1}\")\n            continue\n\n        # t>1. If there is any component with size>=2, we can form triangle by adding 2 edges?\n        # For isolated vertices and no edges:\n        # Known solution: If there exists component with size>=2 then t=2 and count is sum over components cnt0*cnt1 - existing edges?\n        # But standard CF solution: If no odd cycle and no possible t=1 then:\n        # If there exists any component with size>=2 then t=2 and number of ways = number of pairs of vertices in same component that are not connected? Actually correct result:\n        # For creating odd cycle by adding 2 edges minimal is 2 unless graph has no edges at all -> then need 3 to make triangle.\n        if m == 0:\n            # need 3 edges to make a cycle (>1 vertex) odd length => triangle. Count = C(n,3)\n            from math import comb\n            if n < 3:\n                out_lines.append(\"3 0\")\n            else:\n                out_lines.append(f\"3 {n*(n-1)*(n-2)//6}\")\n            continue\n\n        # Otherwise t=2. Count ways: number of unordered pairs of vertices (u,v) that are in different parts of same bipartite component? Standard CF: sum over components cnt0*cnt1 - m\n        ways2 = 0\n        for cid in range(comp_id):\n            nodes = parts[cid]\n            cnt0 = sum(1 for v in nodes if color[v]==0)\n            cnt1 = len(nodes)-cnt0\n            ways2 += cnt0*cnt1\n        # subtract existing edges (each existing edge connects different colors within its component)\n        ways2 -= m\n        out_lines.append(f\"2 {ways2}\")\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 568,
        "completion_token_count": 1041,
        "thoughts_token_count": 0
    }
}