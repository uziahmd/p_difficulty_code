{
    "start": 1758284960.7233028,
    "end": 1758285029.5202763,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Analyzing graph edges and node behavior**\n\nI’m considering a graph in which edges dictate equal values or require one node to match either of two values. When eg is less than el, it resembles an XOR operation, but I need to ensure consistent choices across all incident edges for each node. The node's exponent can derive from possible values indicated by edges, while isolated nodes may default to zero. I’ll build an algorithm for prime p, gathering candidate exponents for each node based on touching edges.",
    "response": "import sys\nimport threading\n\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Basic check l % g == 0\n    for _,_,g,l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    MAXV = 10**6\n    # sieve primes up to sqrt(MAXV)\n    import math\n    primes = []\n    lim = int(MAXV**0.5)+1\n    is_composite = [False]*(lim+1)\n    for i in range(2, lim+1):\n        if not is_composite[i]:\n            primes.append(i)\n            for j in range(i*i, lim+1, i):\n                is_composite[j] = True\n    # factor function\n    def factor(x):\n        res = {}\n        tmp = x\n        for p in primes:\n            if p*p > tmp:\n                break\n            if tmp%p==0:\n                c=0\n                while tmp%p==0:\n                    tmp//=p; c+=1\n                res[p]=c\n        if tmp>1:\n            res[tmp]=res.get(tmp,0)+1\n        return res\n    # Build per-prime constraints\n    prime_edges = {}  # p -> list of (u,v,eg,el)\n    nodes_with_prime = {}\n    for u,v,g,l in edges:\n        fg = factor(g)\n        fl = factor(l)\n        # ensure for primes in fl but not in fg, eg=0\n        for p,el in fl.items():\n            eg = fg.get(p,0)\n            if eg > el:\n                print(\"NO\"); return\n            prime_edges.setdefault(p,[]).append((u,v,eg,el))\n            nodes_with_prime.setdefault(p,set()).add(u); nodes_with_prime.setdefault(p,set()).add(v)\n        # primes in g but not in l shouldn't happen because l divisible by g\n        for p,eg in fg.items():\n            if p not in fl:\n                # then el=0 which is < eg -> impossible\n                print(\"NO\"); return\n    # For each prime, determine exponent per node\n    exponents = [dict() for _ in range(n)]  # per node dict p->exp\n    from collections import deque\n    for p, eds in prime_edges.items():\n        # build adjacency per prime\n        adj = {}\n        candidates = {}\n        for u in nodes_with_prime.get(p,[]):\n            adj[u]=[]\n            candidates[u]=set()\n        for u,v,eg,el in eds:\n            adj.setdefault(u,[]).append((v,eg,el))\n            adj.setdefault(v,[]).append((u,eg,el))\n            candidates[u].add(eg); candidates[u].add(el)\n            candidates[v].add(eg); candidates[v].add(el)\n        # edges with eg==el force both nodes to that exponent\n        forced = {}\n        q = deque()\n        for u,v,eg,el in eds:\n            if eg==el:\n                # force u and v\n                for node in (u,v):\n                    if node in forced:\n                        if forced[node]!=eg:\n                            print(\"NO\"); return\n                    else:\n                        forced[node]=eg\n                        q.append((node,eg))\n        # Start with forced propagation\n        assigned = {}\n        while q:\n            node, val = q.popleft()\n            assigned[node]=val\n            # check candidate contains val\n            if val not in candidates.get(node,{val}):\n                print(\"NO\"); return\n            # propagate to neighbors\n            for nei,eg,el in adj.get(node,[]):\n                # given node has val, neighbor must be the other value (or same if eg==el)\n                if val==eg and el==eg:\n                    need = eg\n                elif val==eg:\n                    need = el\n                elif val==el:\n                    need = eg\n                else:\n                    print(\"NO\"); return\n                if nei in assigned:\n                    if assigned[nei]!=need:\n                        print(\"NO\"); return\n                else:\n                    # reduce candidates of nei to {need}\n                    candidates[nei] = {need}\n                    assigned[nei]=need\n                    q.append((nei,need))\n        # For remaining unassigned nodes in this prime, we need to assign values consistent with edges.\n        visited = set(assigned.keys())\n        # helper to try assign component starting at a node with chosen start value\n        def try_assign_component(start):\n            # BFS with local assignment dict\n            local_assign = {}\n            dq = deque()\n            # pick arbitrary start value from candidates[start]\n            start_val = start_chosen[start]\n            local_assign[start]=start_val\n            dq.append(start)\n            while dq:\n                u = dq.popleft()\n                uv = local_assign[u]\n                for v,eg,el in adj.get(u,[]):\n                    # need neighbor value\n                    if uv==eg and el==eg:\n                        need = eg\n                    elif uv==eg:\n                        need = el\n                    elif uv==el:\n                        need = eg\n                    else:\n                        return None\n                    if v in local_assign:\n                        if local_assign[v]!=need:\n                            return None\n                    else:\n                        # but ensure need is allowed by candidates\n                        if need not in candidates[v]:\n                            return None\n                        local_assign[v]=need\n                        dq.append(v)\n            return local_assign\n        # process unvisited nodes per connected component\n        for node in list(adj.keys()):\n            if node in visited:\n                continue\n            # collect component nodes\n            comp = []\n            stack = [node]; visited.add(node)\n            while stack:\n                x = stack.pop()\n                comp.append(x)\n                for y,_,_ in adj.get(x,[]):\n                    if y not in visited:\n                        visited.add(y); stack.append(y)\n            # Try to assign by trying possible value for start node from its candidates\n            success_assign = None\n            for val in candidates[comp[0]]:\n                # build start_chosen mapping for try_assign_component\n                start_chosen = {comp[0]: val}\n                res = try_assign_component(comp[0])\n                if res is not None:\n                    success_assign = res\n                    break\n            if success_assign is None:\n                # maybe need to try different starting nodes in comp with their candidates\n                # Try brute force: pick a node with smallest candidate set\n                comp_sorted = sorted(comp, key=lambda x: len(candidates[x]))\n                found = False\n                def backtrack(idx, cur_assign):\n                    nonlocal found, success_assign\n                    if found:\n                        return\n                    if idx==len(comp_sorted):\n                        # verify consistency across edges\n                        for u,v,eg,el in eds:\n                            if u in cur_assign and v in cur_assign and (min(cur_assign[u],cur_assign[v])!=eg or max(cur_assign[u],cur_assign[v])!=el):\n                                return\n                        success_assign = dict(cur_assign)\n                        found = True\n                        return\n                    x = comp_sorted[idx]\n                    if x in cur_assign:\n                        backtrack(idx+1, cur_assign); return\n                    for val in candidates[x]:\n                        cur_assign[x]=val\n                        # early check local consistency with already assigned neighbors\n                        ok = True\n                        for y,eg,el in adj.get(x,[]):\n                            if y in cur_assign:\n                                if min(cur_assign[x],cur_assign[y])!=eg or max(cur_assign[x],cur_assign[y])!=el:\n                                    ok = False; break\n                        if ok:\n                            backtrack(idx+1, cur_assign)\n                            if found: return\n                        del cur_assign[x]\n                backtrack(0, {})\n                if not found:\n                    print(\"NO\"); return\n            # commit success_assign into assigned\n            for k,vv in success_assign.items():\n                assigned[k]=vv\n        # Now assign exponents for this prime\n        for node,exp in assigned.items():\n            exponents[node][p]=exp\n    # Build final values\n    vals = [1]*n\n    for i in range(n):\n        prod = 1\n        for p, e in exponents[i].items():\n            prod *= pow(p,e)\n        vals[i]=prod\n    # Nodes that had no primes are 1. Now verify all edges satisfy gcd and lcm\n    import math\n    for u,v,g,l in edges:\n        gu = math.gcd(vals[u], vals[v])\n        lu = vals[u]//gu*vals[v]\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in vals))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\n\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Basic check l % g == 0\n    for _,_,g,l in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    MAXV = 10**6\n    # sieve primes up to sqrt(MAXV)\n    import math\n    primes = []\n    lim = int(MAXV**0.5)+1\n    is_composite = [False]*(lim+1)\n    for i in range(2, lim+1):\n        if not is_composite[i]:\n            primes.append(i)\n            for j in range(i*i, lim+1, i):\n                is_composite[j] = True\n    # factor function\n    def factor(x):\n        res = {}\n        tmp = x\n        for p in primes:\n            if p*p > tmp:\n                break\n            if tmp%p==0:\n                c=0\n                while tmp%p==0:\n                    tmp//=p; c+=1\n                res[p]=c\n        if tmp>1:\n            res[tmp]=res.get(tmp,0)+1\n        return res\n    # Build per-prime constraints\n    prime_edges = {}  # p -> list of (u,v,eg,el)\n    nodes_with_prime = {}\n    for u,v,g,l in edges:\n        fg = factor(g)\n        fl = factor(l)\n        # ensure for primes in fl but not in fg, eg=0\n        for p,el in fl.items():\n            eg = fg.get(p,0)\n            if eg > el:\n                print(\"NO\"); return\n            prime_edges.setdefault(p,[]).append((u,v,eg,el))\n            nodes_with_prime.setdefault(p,set()).add(u); nodes_with_prime.setdefault(p,set()).add(v)\n        # primes in g but not in l shouldn't happen because l divisible by g\n        for p,eg in fg.items():\n            if p not in fl:\n                # then el=0 which is < eg -> impossible\n                print(\"NO\"); return\n    # For each prime, determine exponent per node\n    exponents = [dict() for _ in range(n)]  # per node dict p->exp\n    from collections import deque\n    for p, eds in prime_edges.items():\n        # build adjacency per prime\n        adj = {}\n        candidates = {}\n        for u in nodes_with_prime.get(p,[]):\n            adj[u]=[]\n            candidates[u]=set()\n        for u,v,eg,el in eds:\n            adj.setdefault(u,[]).append((v,eg,el))\n            adj.setdefault(v,[]).append((u,eg,el))\n            candidates[u].add(eg); candidates[u].add(el)\n            candidates[v].add(eg); candidates[v].add(el)\n        # edges with eg==el force both nodes to that exponent\n        forced = {}\n        q = deque()\n        for u,v,eg,el in eds:\n            if eg==el:\n                # force u and v\n                for node in (u,v):\n                    if node in forced:\n                        if forced[node]!=eg:\n                            print(\"NO\"); return\n                    else:\n                        forced[node]=eg\n                        q.append((node,eg))\n        # Start with forced propagation\n        assigned = {}\n        while q:\n            node, val = q.popleft()\n            assigned[node]=val\n            # check candidate contains val\n            if val not in candidates.get(node,{val}):\n                print(\"NO\"); return\n            # propagate to neighbors\n            for nei,eg,el in adj.get(node,[]):\n                # given node has val, neighbor must be the other value (or same if eg==el)\n                if val==eg and el==eg:\n                    need = eg\n                elif val==eg:\n                    need = el\n                elif val==el:\n                    need = eg\n                else:\n                    print(\"NO\"); return\n                if nei in assigned:\n                    if assigned[nei]!=need:\n                        print(\"NO\"); return\n                else:\n                    # reduce candidates of nei to {need}\n                    candidates[nei] = {need}\n                    assigned[nei]=need\n                    q.append((nei,need))\n        # For remaining unassigned nodes in this prime, we need to assign values consistent with edges.\n        visited = set(assigned.keys())\n        # helper to try assign component starting at a node with chosen start value\n        def try_assign_component(start):\n            # BFS with local assignment dict\n            local_assign = {}\n            dq = deque()\n            # pick arbitrary start value from candidates[start]\n            start_val = start_chosen[start]\n            local_assign[start]=start_val\n            dq.append(start)\n            while dq:\n                u = dq.popleft()\n                uv = local_assign[u]\n                for v,eg,el in adj.get(u,[]):\n                    # need neighbor value\n                    if uv==eg and el==eg:\n                        need = eg\n                    elif uv==eg:\n                        need = el\n                    elif uv==el:\n                        need = eg\n                    else:\n                        return None\n                    if v in local_assign:\n                        if local_assign[v]!=need:\n                            return None\n                    else:\n                        # but ensure need is allowed by candidates\n                        if need not in candidates[v]:\n                            return None\n                        local_assign[v]=need\n                        dq.append(v)\n            return local_assign\n        # process unvisited nodes per connected component\n        for node in list(adj.keys()):\n            if node in visited:\n                continue\n            # collect component nodes\n            comp = []\n            stack = [node]; visited.add(node)\n            while stack:\n                x = stack.pop()\n                comp.append(x)\n                for y,_,_ in adj.get(x,[]):\n                    if y not in visited:\n                        visited.add(y); stack.append(y)\n            # Try to assign by trying possible value for start node from its candidates\n            success_assign = None\n            for val in candidates[comp[0]]:\n                # build start_chosen mapping for try_assign_component\n                start_chosen = {comp[0]: val}\n                res = try_assign_component(comp[0])\n                if res is not None:\n                    success_assign = res\n                    break\n            if success_assign is None:\n                # maybe need to try different starting nodes in comp with their candidates\n                # Try brute force: pick a node with smallest candidate set\n                comp_sorted = sorted(comp, key=lambda x: len(candidates[x]))\n                found = False\n                def backtrack(idx, cur_assign):\n                    nonlocal found, success_assign\n                    if found:\n                        return\n                    if idx==len(comp_sorted):\n                        # verify consistency across edges\n                        for u,v,eg,el in eds:\n                            if u in cur_assign and v in cur_assign and (min(cur_assign[u],cur_assign[v])!=eg or max(cur_assign[u],cur_assign[v])!=el):\n                                return\n                        success_assign = dict(cur_assign)\n                        found = True\n                        return\n                    x = comp_sorted[idx]\n                    if x in cur_assign:\n                        backtrack(idx+1, cur_assign); return\n                    for val in candidates[x]:\n                        cur_assign[x]=val\n                        # early check local consistency with already assigned neighbors\n                        ok = True\n                        for y,eg,el in adj.get(x,[]):\n                            if y in cur_assign:\n                                if min(cur_assign[x],cur_assign[y])!=eg or max(cur_assign[x],cur_assign[y])!=el:\n                                    ok = False; break\n                        if ok:\n                            backtrack(idx+1, cur_assign)\n                            if found: return\n                        del cur_assign[x]\n                backtrack(0, {})\n                if not found:\n                    print(\"NO\"); return\n            # commit success_assign into assigned\n            for k,vv in success_assign.items():\n                assigned[k]=vv\n        # Now assign exponents for this prime\n        for node,exp in assigned.items():\n            exponents[node][p]=exp\n    # Build final values\n    vals = [1]*n\n    for i in range(n):\n        prod = 1\n        for p, e in exponents[i].items():\n            prod *= pow(p,e)\n        vals[i]=prod\n    # Nodes that had no primes are 1. Now verify all edges satisfy gcd and lcm\n    import math\n    for u,v,g,l in edges:\n        gu = math.gcd(vals[u], vals[v])\n        lu = vals[u]//gu*vals[v]\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in vals))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 4183,
        "thoughts_token_count": 2240
    }
}