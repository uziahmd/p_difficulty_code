{
    "start": 1758284947.486904,
    "end": 1758284996.5051146,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Analyzing constraint satisfaction**\n\nI'm working through a constraint satisfaction problem where, for each node, the allowed exponents depend on the intersection of requirements from incident edges. If an edge has exponents {a, b}, a node must match either a or b, leading to an allowed set that could have one or two values. It gets complex when different edges have varying pairs. I think I can simplify my approach using a graph where edges indicate relationships and apply a BFS to assign exponent values.",
    "response": "import sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef build_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = defaultdict(int)\n    while x>1:\n        p = spf[x]\n        res[p]+=1\n        x//=p\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    spf = build_spf(MAXV)\n    # Basic checks and build per-prime adjacency\n    perprime_edges = defaultdict(list)  # p -> list of (u,v,eg,el)\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        # For primes in either, exponents exist (0 if missing)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p, 0)\n            el = fl.get(p, 0)\n            if eg > el:\n                print(\"NO\"); return\n            perprime_edges[p].append((u,v,eg,el))\n    # final exponents per node per prime\n    node_prime_exp = defaultdict(dict)  # p -> dict node->exp\n    # Process each prime separately\n    for p, pel in perprime_edges.items():\n        # collect nodes involved\n        nodes = set()\n        for u,v,eg,el in pel:\n            nodes.add(u); nodes.add(v)\n        adj = defaultdict(list)\n        allowed = {}\n        for u in nodes:\n            allowed[u] = None  # None means any so far\n        # initialize allowed sets by intersecting constraints per incident edge\n        for u,v,eg,el in pel:\n            pair = (eg, el) if eg!=el else (eg,)\n            # for u\n            s = set(pair)\n            if allowed[u] is None:\n                allowed[u] = s.copy()\n            else:\n                allowed[u] &= s\n            if not allowed[u]:\n                print(\"NO\"); return\n            # for v\n            if allowed[v] is None:\n                allowed[v] = set(s)\n            else:\n                allowed[v] &= s\n            if not allowed[v]:\n                print(\"NO\"); return\n            # adjacency for propagation\n            adj[u].append((v,eg,el))\n            adj[v].append((u,eg,el))\n        assigned = {}\n        visited = set()\n        # For each connected component, attempt assignments\n        for start in nodes:\n            if start in visited:\n                continue\n            comp = []\n            dq = deque([start])\n            visited.add(start)\n            while dq:\n                x = dq.popleft()\n                comp.append(x)\n                for y,eg,el in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        dq.append(y)\n            # try to assign component; if any node has allowed size 1, that determines starting choices\n            # collect possible starting values for start node from its allowed set\n            def try_assign(initial_node, initial_val):\n                q = deque()\n                assigned_local = {}\n                assigned_local[initial_node] = initial_val\n                q.append(initial_node)\n                while q:\n                    u = q.popleft()\n                    eu = assigned_local[u]\n                    if eu not in allowed[u]:\n                        return None\n                    for v,eg,el in adj[u]:\n                        pair = (eg, el)\n                        # u's value must be either eg or el\n                        if eu!=eg and eu!=el:\n                            return None\n                        # required v value is the other one if eg!=el, else same\n                        if eg==el:\n                            req = eg\n                        else:\n                            req = el if eu==eg else eg\n                        if v in assigned_local:\n                            if assigned_local[v]!=req:\n                                return None\n                        else:\n                            assigned_local[v]=req\n                            q.append(v)\n                return assigned_local\n            # determine candidate initial nodes and values\n            # pick any node in comp with smallest allowed size to try fewer options\n            comp_sorted = sorted(comp, key=lambda x: len(allowed[x]))\n            success_assign = None\n            tried = False\n            for node in comp_sorted:\n                # try each possible value in allowed[node]\n                for val in allowed[node]:\n                    res = try_assign(node, val)\n                    tried = True\n                    if res is not None:\n                        success_assign = res\n                        break\n                if success_assign is not None:\n                    break\n                # if first node had size 1 and failed, impossible quickly\n                if len(allowed[node])==1:\n                    print(\"NO\"); return\n            if not tried:\n                # shouldn't happen\n                print(\"NO\"); return\n            if success_assign is None:\n                print(\"NO\"); return\n            # commit assignments\n            for u,vv in success_assign.items():\n                node_prime_exp[p][u]=vv\n        # For nodes in nodes but maybe not assigned? already handled\n    # Build final A values\n    A = [1]*n\n    for p, mp in node_prime_exp.items():\n        for u,exp in mp.items():\n            if exp>0:\n                A[u] *= pow(p, exp)\n    # Need also factor in gcd parts g that may include primes not in perprime_edges? Actually we included primes from g and l.\n    # Verify all edges satisfy gcd and lcm\n    import math\n    for u,v,g,l in edges:\n        gu = math.gcd(A[u], A[v])\n        from_lcm = (A[u]//gu)*A[v]\n        # compute lcm safely\n        lcmuv = (A[u]//gu)*A[v]\n        if gu!=g or lcmuv!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef build_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = defaultdict(int)\n    while x>1:\n        p = spf[x]\n        res[p]+=1\n        x//=p\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    spf = build_spf(MAXV)\n    # Basic checks and build per-prime adjacency\n    perprime_edges = defaultdict(list)  # p -> list of (u,v,eg,el)\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        # For primes in either, exponents exist (0 if missing)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p, 0)\n            el = fl.get(p, 0)\n            if eg > el:\n                print(\"NO\"); return\n            perprime_edges[p].append((u,v,eg,el))\n    # final exponents per node per prime\n    node_prime_exp = defaultdict(dict)  # p -> dict node->exp\n    # Process each prime separately\n    for p, pel in perprime_edges.items():\n        # collect nodes involved\n        nodes = set()\n        for u,v,eg,el in pel:\n            nodes.add(u); nodes.add(v)\n        adj = defaultdict(list)\n        allowed = {}\n        for u in nodes:\n            allowed[u] = None  # None means any so far\n        # initialize allowed sets by intersecting constraints per incident edge\n        for u,v,eg,el in pel:\n            pair = (eg, el) if eg!=el else (eg,)\n            # for u\n            s = set(pair)\n            if allowed[u] is None:\n                allowed[u] = s.copy()\n            else:\n                allowed[u] &= s\n            if not allowed[u]:\n                print(\"NO\"); return\n            # for v\n            if allowed[v] is None:\n                allowed[v] = set(s)\n            else:\n                allowed[v] &= s\n            if not allowed[v]:\n                print(\"NO\"); return\n            # adjacency for propagation\n            adj[u].append((v,eg,el))\n            adj[v].append((u,eg,el))\n        assigned = {}\n        visited = set()\n        # For each connected component, attempt assignments\n        for start in nodes:\n            if start in visited:\n                continue\n            comp = []\n            dq = deque([start])\n            visited.add(start)\n            while dq:\n                x = dq.popleft()\n                comp.append(x)\n                for y,eg,el in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        dq.append(y)\n            # try to assign component; if any node has allowed size 1, that determines starting choices\n            # collect possible starting values for start node from its allowed set\n            def try_assign(initial_node, initial_val):\n                q = deque()\n                assigned_local = {}\n                assigned_local[initial_node] = initial_val\n                q.append(initial_node)\n                while q:\n                    u = q.popleft()\n                    eu = assigned_local[u]\n                    if eu not in allowed[u]:\n                        return None\n                    for v,eg,el in adj[u]:\n                        pair = (eg, el)\n                        # u's value must be either eg or el\n                        if eu!=eg and eu!=el:\n                            return None\n                        # required v value is the other one if eg!=el, else same\n                        if eg==el:\n                            req = eg\n                        else:\n                            req = el if eu==eg else eg\n                        if v in assigned_local:\n                            if assigned_local[v]!=req:\n                                return None\n                        else:\n                            assigned_local[v]=req\n                            q.append(v)\n                return assigned_local\n            # determine candidate initial nodes and values\n            # pick any node in comp with smallest allowed size to try fewer options\n            comp_sorted = sorted(comp, key=lambda x: len(allowed[x]))\n            success_assign = None\n            tried = False\n            for node in comp_sorted:\n                # try each possible value in allowed[node]\n                for val in allowed[node]:\n                    res = try_assign(node, val)\n                    tried = True\n                    if res is not None:\n                        success_assign = res\n                        break\n                if success_assign is not None:\n                    break\n                # if first node had size 1 and failed, impossible quickly\n                if len(allowed[node])==1:\n                    print(\"NO\"); return\n            if not tried:\n                # shouldn't happen\n                print(\"NO\"); return\n            if success_assign is None:\n                print(\"NO\"); return\n            # commit assignments\n            for u,vv in success_assign.items():\n                node_prime_exp[p][u]=vv\n        # For nodes in nodes but maybe not assigned? already handled\n    # Build final A values\n    A = [1]*n\n    for p, mp in node_prime_exp.items():\n        for u,exp in mp.items():\n            if exp>0:\n                A[u] *= pow(p, exp)\n    # Need also factor in gcd parts g that may include primes not in perprime_edges? Actually we included primes from g and l.\n    # Verify all edges satisfy gcd and lcm\n    import math\n    for u,v,g,l in edges:\n        gu = math.gcd(A[u], A[v])\n        from_lcm = (A[u]//gu)*A[v]\n        # compute lcm safely\n        lcmuv = (A[u]//gu)*A[v]\n        if gu!=g or lcmuv!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in A))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 3401,
        "thoughts_token_count": 1984
    }
}