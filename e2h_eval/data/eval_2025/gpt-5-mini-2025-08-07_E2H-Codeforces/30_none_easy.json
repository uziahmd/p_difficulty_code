{
    "start": 1758294647.945805,
    "end": 1758294661.2780116,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:11 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    # We need to assign each of 2n digits to H or M, each exactly n, taking digits in order,\n    # forming numbers by appending digits. Goal maximize S1+S2 which equals sum over positions of digit * 10^{remaining digits of that player's number after it}\n    # Equivalent: each time a player takes a digit, it will be placed at position equal to number of moves that player will make after this pick.\n    # So contribution of picking digit at global index i when the player has already made k picks is digit * 10^{(n-1 - k)}.\n    # To maximize total, we should greedily assign higher weighted multipliers to larger digits.\n    # For each digit position i (0..2n-1), for Homer pick number of picks so far h, weight if assigned to H is 10^{n-1-h}; for Marge with m picks so far weight 10^{n-1-m}.\n    # We can dynamic program: states dp[i][h] = max total value for first i digits with Homer having taken h picks (Marge i-h). Keep choices.\n    pow10 = [1]*(n+1)\n    for i in range(1,n+1):\n        pow10[i] = pow10[i-1]*10\n    L = 2*n\n    digits = [int(c) for c in A]\n    # dp as dictionary or 2D list of big integers\n    dp = [ [-1]*(n+1) for _ in range(L+1) ]\n    par = [ [None]*(n+1) for _ in range(L+1) ]\n    dp[0][0] = 0\n    for i in range(L):\n        d = digits[i]\n        for h in range(0, min(i, n)+1):\n            if dp[i][h] < 0:\n                continue\n            m = i - h\n            # choose Homer if he has remaining picks\n            if h < n:\n                wt = pow10[n-1 - h]\n                val = dp[i][h] + d * wt\n                if val > dp[i+1][h+1]:\n                    dp[i+1][h+1] = val\n                    par[i+1][h+1] = ('H', h)\n            # choose Marge if she has remaining picks\n            if m < n:\n                wt = pow10[n-1 - m]\n                val = dp[i][h] + d * wt\n                if val > dp[i+1][h]:\n                    dp[i+1][h] = val\n                    par[i+1][h] = ('M', h)\n    # reconstruct\n    res = []\n    i = L\n    h = n\n    while i>0:\n        move, prev_h = par[i][h]\n        res.append(move)\n        i -= 1\n        h = prev_h\n    res.reverse()\n    print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    # We need to assign each of 2n digits to H or M, each exactly n, taking digits in order,\n    # forming numbers by appending digits. Goal maximize S1+S2 which equals sum over positions of digit * 10^{remaining digits of that player's number after it}\n    # Equivalent: each time a player takes a digit, it will be placed at position equal to number of moves that player will make after this pick.\n    # So contribution of picking digit at global index i when the player has already made k picks is digit * 10^{(n-1 - k)}.\n    # To maximize total, we should greedily assign higher weighted multipliers to larger digits.\n    # For each digit position i (0..2n-1), for Homer pick number of picks so far h, weight if assigned to H is 10^{n-1-h}; for Marge with m picks so far weight 10^{n-1-m}.\n    # We can dynamic program: states dp[i][h] = max total value for first i digits with Homer having taken h picks (Marge i-h). Keep choices.\n    pow10 = [1]*(n+1)\n    for i in range(1,n+1):\n        pow10[i] = pow10[i-1]*10\n    L = 2*n\n    digits = [int(c) for c in A]\n    # dp as dictionary or 2D list of big integers\n    dp = [ [-1]*(n+1) for _ in range(L+1) ]\n    par = [ [None]*(n+1) for _ in range(L+1) ]\n    dp[0][0] = 0\n    for i in range(L):\n        d = digits[i]\n        for h in range(0, min(i, n)+1):\n            if dp[i][h] < 0:\n                continue\n            m = i - h\n            # choose Homer if he has remaining picks\n            if h < n:\n                wt = pow10[n-1 - h]\n                val = dp[i][h] + d * wt\n                if val > dp[i+1][h+1]:\n                    dp[i+1][h+1] = val\n                    par[i+1][h+1] = ('H', h)\n            # choose Marge if she has remaining picks\n            if m < n:\n                wt = pow10[n-1 - m]\n                val = dp[i][h] + d * wt\n                if val > dp[i+1][h]:\n                    dp[i+1][h] = val\n                    par[i+1][h] = ('M', h)\n    # reconstruct\n    res = []\n    i = L\n    h = n\n    while i>0:\n        move, prev_h = par[i][h]\n        res.append(move)\n        i -= 1\n        h = prev_h\n    res.reverse()\n    print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 411,
        "completion_token_count": 691,
        "thoughts_token_count": 0
    }
}