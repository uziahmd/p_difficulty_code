{
    "start": 1758294601.1467843,
    "end": 1758294609.8272994,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\n\nMOD = 1000000007\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    out_lines = []\n    for a,b,c in zip(it, it, it):\n        n = int(a); m = int(b); g = int(c)\n        total = n + m\n        if total == 1:\n            # single char: no modifications possible, final char is that char\n            if (n == 1 and g == 0) or (m == 1 and g == 1):\n                out_lines.append(\"1\")\n            else:\n                out_lines.append(\"0\")\n            continue\n        # For length >=2, operation reduces length by1 until 1 remains.\n        # Final g depends only on parity of number of zeros in original string:\n        # Each operation: if last two are 0 0 -> produce 1, reducing zero count by2 and increasing ones by1.\n        # Otherwise produce 0, which changes zero count as per last two cases.\n        # Known result: final character equals parity of count of ones? Actually from CF: final g = (m % 2)\n        # Let's reason: For base examples, but use known solution: final character is 1 iff m%2==1.\n        final = m % 2\n        if final == g:\n            # count of strings with n zeros and m ones is C(n+m, n)\n            N = total\n            K = n\n            # compute comb N choose K mod MOD\n            # precompute factorials up to N\n            fact = 1\n            for i in range(1, N+1):\n                fact = fact * i % MOD\n            invfact = [1]*(1)\n            # compute inverse factorial via pow\n            inv_fact_N = pow(fact, MOD-2, MOD)\n            # compute numerator fact and then divide by k! and (N-K)! by multiplying inverses\n            # compute k! and (N-K)!\n            fk = 1\n            for i in range(1, K+1):\n                fk = fk * i % MOD\n            fnk = 1\n            for i in range(1, N-K+1):\n                fnk = fnk * i % MOD\n            denom = fk * fnk % MOD\n            ans = fact * pow(denom, MOD-2, MOD) % MOD\n            out_lines.append(str(ans))\n        else:\n            out_lines.append(\"0\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\nMOD = 1000000007\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    out_lines = []\n    for a,b,c in zip(it, it, it):\n        n = int(a); m = int(b); g = int(c)\n        total = n + m\n        if total == 1:\n            # single char: no modifications possible, final char is that char\n            if (n == 1 and g == 0) or (m == 1 and g == 1):\n                out_lines.append(\"1\")\n            else:\n                out_lines.append(\"0\")\n            continue\n        # For length >=2, operation reduces length by1 until 1 remains.\n        # Final g depends only on parity of number of zeros in original string:\n        # Each operation: if last two are 0 0 -> produce 1, reducing zero count by2 and increasing ones by1.\n        # Otherwise produce 0, which changes zero count as per last two cases.\n        # Known result: final character equals parity of count of ones? Actually from CF: final g = (m % 2)\n        # Let's reason: For base examples, but use known solution: final character is 1 iff m%2==1.\n        final = m % 2\n        if final == g:\n            # count of strings with n zeros and m ones is C(n+m, n)\n            N = total\n            K = n\n            # compute comb N choose K mod MOD\n            # precompute factorials up to N\n            fact = 1\n            for i in range(1, N+1):\n                fact = fact * i % MOD\n            invfact = [1]*(1)\n            # compute inverse factorial via pow\n            inv_fact_N = pow(fact, MOD-2, MOD)\n            # compute numerator fact and then divide by k! and (N-K)! by multiplying inverses\n            # compute k! and (N-K)!\n            fk = 1\n            for i in range(1, K+1):\n                fk = fk * i % MOD\n            fnk = 1\n            for i in range(1, N-K+1):\n                fnk = fnk * i % MOD\n            denom = fk * fnk % MOD\n            ans = fact * pow(denom, MOD-2, MOD) % MOD\n            out_lines.append(str(ans))\n        else:\n            out_lines.append(\"0\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 479,
        "completion_token_count": 567,
        "thoughts_token_count": 0
    }
}