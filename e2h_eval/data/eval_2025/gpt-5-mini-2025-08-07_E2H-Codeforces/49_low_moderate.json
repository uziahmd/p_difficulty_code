{
    "start": 1758284941.7269933,
    "end": 1758284999.0184917,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Considering bipartite assignment with BFS**\n\nI'm thinking about the possibility of using bipartite assignment via BFS. The constraints imply that any path needs to maintain consistency. I can model each node variable as an exponent for p, where constraints require either a low or high value. If an edge has different low and high values, the nodes will need opposite assignments. A stronger approach might involve selecting an arbitrary node in each connected component and assigning unknown values based on prime products of exponents. Let's check the gcd and lcm conditions to see if they hold.",
    "response": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndef lcm(a,b):\n    return a//__import__('math').gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxval = 10**6\n    spf = sieve_spf(maxval)\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Basic checks and build per-prime adjacency\n    adj = defaultdict(lambda: defaultdict(list))  # adj[p][node] = list of (neighbor, exp_node, exp_neighbor)\n    nodes_with_prime = defaultdict(set)\n    for idx,(u,v,g,l) in enumerate(edges):\n        if l % g != 0:\n            print(\"NO\")\n            return\n        prod = g * l\n        # Also check that g*l equals a_u*a_v parity is ok? we'll rely on prime exponents\n        fg = factorize(g, spf) if g>1 else {}\n        fl = factorize(l, spf) if l>1 else {}\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p,0)\n            el = fl.get(p,0)\n            if eg > el:\n                print(\"NO\"); return\n            # From u perspective exponent pair (eg for u maybe smaller or larger). For edge, allowed is {eg,el}\n            # We'll store for u neighbor v tuple (must be eg at u and el at v) or swapped when storing at v.\n            adj[p][u].append((v, eg, el))\n            adj[p][v].append((u, el, eg))\n            nodes_with_prime[p].add(u); nodes_with_prime[p].add(v)\n    # exponent assignments per prime per node\n    exp = [defaultdict(int) for _ in range(n)]  # exp[i][p] = exponent\n    # For each prime, process connected components\n    for p, nodesdict in adj.items():\n        visited = {}\n        nodes = list(nodes_with_prime[p])\n        for node in nodes:\n            if node in visited:\n                continue\n            # collect component via BFS\n            comp = []\n            q = deque([node]); visited[node]=None\n            while q:\n                x = q.popleft(); comp.append(x)\n                for (y, a, b) in adj[p][x]:\n                    if y not in visited:\n                        visited[y]=None\n                        q.append(y)\n            # Now attempt to assign exponents for this component\n            # gather possible starting exponents for start node\n            start = comp[0]\n            possible = set()\n            for (nbr, a, b) in adj[p][start]:\n                possible.add(a); possible.add(b)\n            # if no incident edges (shouldn't happen), include 0\n            if not possible:\n                possible.add(0)\n            success_assign = None\n            for start_exp in possible:\n                assign = {}\n                ok = True\n                dq = deque([start])\n                assign[start]=start_exp\n                while dq and ok:\n                    x = dq.popleft()\n                    ex = assign[x]\n                    for (y, a, b) in adj[p][x]:\n                        # For edge stored at x, if x has exponent ex must be equal to a or b\n                        if ex==a:\n                            need = b\n                        elif ex==b:\n                            need = a\n                        else:\n                            ok=False; break\n                        if y in assign:\n                            if assign[y]!=need:\n                                ok=False; break\n                        else:\n                            assign[y]=need\n                            dq.append(y)\n                if ok:\n                    success_assign = assign\n                    break\n            if success_assign is None:\n                print(\"NO\"); return\n            # commit\n            for u_node, evalue in success_assign.items():\n                exp[u_node][p]=evalue\n    # Now build final numbers\n    res = [1]*n\n    for i in range(n):\n        val = 1\n        for p,e in exp[i].items():\n            if e>0:\n                val *= pow(p,e)\n        res[i]=val\n    # Validate all edges\n    import math\n    for (u,v,g,l) in edges:\n        gu = math.gcd(res[u], res[v])\n        lu = res[u]//gu*res[v]\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndef lcm(a,b):\n    return a//__import__('math').gcd(a,b)*b\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxval = 10**6\n    spf = sieve_spf(maxval)\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Basic checks and build per-prime adjacency\n    adj = defaultdict(lambda: defaultdict(list))  # adj[p][node] = list of (neighbor, exp_node, exp_neighbor)\n    nodes_with_prime = defaultdict(set)\n    for idx,(u,v,g,l) in enumerate(edges):\n        if l % g != 0:\n            print(\"NO\")\n            return\n        prod = g * l\n        # Also check that g*l equals a_u*a_v parity is ok? we'll rely on prime exponents\n        fg = factorize(g, spf) if g>1 else {}\n        fl = factorize(l, spf) if l>1 else {}\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p,0)\n            el = fl.get(p,0)\n            if eg > el:\n                print(\"NO\"); return\n            # From u perspective exponent pair (eg for u maybe smaller or larger). For edge, allowed is {eg,el}\n            # We'll store for u neighbor v tuple (must be eg at u and el at v) or swapped when storing at v.\n            adj[p][u].append((v, eg, el))\n            adj[p][v].append((u, el, eg))\n            nodes_with_prime[p].add(u); nodes_with_prime[p].add(v)\n    # exponent assignments per prime per node\n    exp = [defaultdict(int) for _ in range(n)]  # exp[i][p] = exponent\n    # For each prime, process connected components\n    for p, nodesdict in adj.items():\n        visited = {}\n        nodes = list(nodes_with_prime[p])\n        for node in nodes:\n            if node in visited:\n                continue\n            # collect component via BFS\n            comp = []\n            q = deque([node]); visited[node]=None\n            while q:\n                x = q.popleft(); comp.append(x)\n                for (y, a, b) in adj[p][x]:\n                    if y not in visited:\n                        visited[y]=None\n                        q.append(y)\n            # Now attempt to assign exponents for this component\n            # gather possible starting exponents for start node\n            start = comp[0]\n            possible = set()\n            for (nbr, a, b) in adj[p][start]:\n                possible.add(a); possible.add(b)\n            # if no incident edges (shouldn't happen), include 0\n            if not possible:\n                possible.add(0)\n            success_assign = None\n            for start_exp in possible:\n                assign = {}\n                ok = True\n                dq = deque([start])\n                assign[start]=start_exp\n                while dq and ok:\n                    x = dq.popleft()\n                    ex = assign[x]\n                    for (y, a, b) in adj[p][x]:\n                        # For edge stored at x, if x has exponent ex must be equal to a or b\n                        if ex==a:\n                            need = b\n                        elif ex==b:\n                            need = a\n                        else:\n                            ok=False; break\n                        if y in assign:\n                            if assign[y]!=need:\n                                ok=False; break\n                        else:\n                            assign[y]=need\n                            dq.append(y)\n                if ok:\n                    success_assign = assign\n                    break\n            if success_assign is None:\n                print(\"NO\"); return\n            # commit\n            for u_node, evalue in success_assign.items():\n                exp[u_node][p]=evalue\n    # Now build final numbers\n    res = [1]*n\n    for i in range(n):\n        val = 1\n        for p,e in exp[i].items():\n            if e>0:\n                val *= pow(p,e)\n        res[i]=val\n    # Validate all edges\n    import math\n    for (u,v,g,l) in edges:\n        gu = math.gcd(res[u], res[v])\n        lu = res[u]//gu*res[v]\n        if gu!=g or lu!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 3276,
        "thoughts_token_count": 2112
    }
}