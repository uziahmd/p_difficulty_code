{
    "start": 1758285022.1222196,
    "end": 1758285051.0785625,
    "start-formatted": "2025-09-19 21:30 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Planning reconstruction algorithm**\n\nI need to store parent pointers to help with reconstruction and calculate the maximum with dp[2n][n]. I might have to handle multiple test cases, but the example seems to indicate only a single test case. I'll read the entire input and split it but be mindful of potential blank lines. For each pair, I plan to produce output accordingly. I also need to precompute powers of 10 and manage choices using a parent array for reconstruction. Let's refine the code for that!",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\n\nout_lines = []\nidx = 0\nwhile idx < len(data):\n    n = int(data[idx]); idx += 1\n    A = data[idx].strip(); idx += 1\n    digits = list(map(int, A))\n    total = 2 * n\n    pow10 = [1] * (n)\n    for i in range(1, n):\n        pow10[i] = pow10[i-1] * 10\n\n    # dp[i][h] = best total after processing i digits with h assigned to H\n    # store as list of dicts or 2D list filled with None\n    dp = [[None] * (n+1) for _ in range(total+1)]\n    parent = [[None] * (n+1) for _ in range(total+1)]\n    dp[0][0] = 0\n\n    for i in range(total):\n        for h in range(0, n+1):\n            if dp[i][h] is None:\n                continue\n            m = i - h\n            if m < 0 or m > n:\n                continue\n            d = digits[i]\n            # assign to H\n            if h < n:\n                exp = n - h - 1\n                add = d * pow10[exp] if exp >= 0 else 0\n                val = dp[i][h] + add\n                if dp[i+1][h+1] is None or val > dp[i+1][h+1]:\n                    dp[i+1][h+1] = val\n                    parent[i+1][h+1] = ('H', h)\n            # assign to M\n            if m < n:\n                exp = n - m - 1\n                add = d * pow10[exp] if exp >= 0 else 0\n                val = dp[i][h] + add\n                if dp[i+1][h] is None or val > dp[i+1][h]:\n                    dp[i+1][h] = val\n                    parent[i+1][h] = ('M', h)\n\n    # reconstruct\n    res = []\n    i = total\n    h = n\n    while i > 0:\n        ch, prev_h = parent[i][h]\n        res.append(ch)\n        if ch == 'H':\n            h = prev_h\n        else:\n            h = prev_h\n        i -= 1\n    res.reverse()\n    out_lines.append(''.join(res))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\n\nout_lines = []\nidx = 0\nwhile idx < len(data):\n    n = int(data[idx]); idx += 1\n    A = data[idx].strip(); idx += 1\n    digits = list(map(int, A))\n    total = 2 * n\n    pow10 = [1] * (n)\n    for i in range(1, n):\n        pow10[i] = pow10[i-1] * 10\n\n    # dp[i][h] = best total after processing i digits with h assigned to H\n    # store as list of dicts or 2D list filled with None\n    dp = [[None] * (n+1) for _ in range(total+1)]\n    parent = [[None] * (n+1) for _ in range(total+1)]\n    dp[0][0] = 0\n\n    for i in range(total):\n        for h in range(0, n+1):\n            if dp[i][h] is None:\n                continue\n            m = i - h\n            if m < 0 or m > n:\n                continue\n            d = digits[i]\n            # assign to H\n            if h < n:\n                exp = n - h - 1\n                add = d * pow10[exp] if exp >= 0 else 0\n                val = dp[i][h] + add\n                if dp[i+1][h+1] is None or val > dp[i+1][h+1]:\n                    dp[i+1][h+1] = val\n                    parent[i+1][h+1] = ('H', h)\n            # assign to M\n            if m < n:\n                exp = n - m - 1\n                add = d * pow10[exp] if exp >= 0 else 0\n                val = dp[i][h] + add\n                if dp[i+1][h] is None or val > dp[i+1][h]:\n                    dp[i+1][h] = val\n                    parent[i+1][h] = ('M', h)\n\n    # reconstruct\n    res = []\n    i = total\n    h = n\n    while i > 0:\n        ch, prev_h = parent[i][h]\n        res.append(ch)\n        if ch == 'H':\n            h = prev_h\n        else:\n            h = prev_h\n        i -= 1\n    res.reverse()\n    out_lines.append(''.join(res))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 412,
        "completion_token_count": 1398,
        "thoughts_token_count": 832
    }
}