{
    "start": 1758290697.2353272,
    "end": 1758290833.88679,
    "start-formatted": "2025-09-19 23:04 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Analyzing node exponents**\n\nLet's consider what happens if we choose node i to have p in its incident edges. The assigned exponent for these edges must be equal, creating constraints linked to each edge. If node i holds prime p across several edges with different exponents, it leads to an impossible situation.\n\nA simpler approach could be transforming this into a graph of equations with multiplicative components for each prime. Essentially, I'll create graph edges using weights for exponents and determine their orientation to check for bipartiteness. I think I remember a similar problem from Codeforces.",
    "response": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i] == i:\n            for j in range(i*i, n+1, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\ndef factor(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nmaxval = 10**6\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u, v, g, l))\n\n# quick check: l must be divisible by g\nfor (_, _, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# prepare spf\nspf = sieve_spf(maxval)\n\n# Build per-prime adjacency\nprime_adj = defaultdict(lambda: defaultdict(list))  # prime -> node -> list of (neighbor, low, high)\nnodes_in_prime = defaultdict(set)\n\nfor idx, (u, v, g, l) in enumerate(edges):\n    fg = factor(g, spf) if g > 1 else {}\n    fl = factor(l, spf) if l > 1 else {}\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p, 0)\n        el = fl.get(p, 0)\n        low = eg\n        high = eg + el\n        # record edge for prime p\n        prime_adj[p][u].append((v, low, high))\n        prime_adj[p][v].append((u, low, high))\n        nodes_in_prime[p].add(u)\n        nodes_in_prime[p].add(v)\n\n# global exponent assignment: list of dicts per node mapping prime->exp\nexp_per_node = [defaultdict(int) for _ in range(n)]\n\n# Process each prime\nfor p, adj in prime_adj.items():\n    visited = {}\n    for start in list(adj.keys()):\n        if start in visited:\n            continue\n        # gather component nodes by BFS\n        comp_nodes = []\n        q = [start]\n        visited_comp = set([start])\n        for u in q:\n            comp_nodes.append(u)\n            for v, lval, hval in adj[u]:\n                if v not in visited_comp:\n                    visited_comp.add(v)\n                    q.append(v)\n        # now try to assign this component\n        assigned = {}\n        success_comp = False\n        # build S_v candidates\n        S = {}\n        for v in comp_nodes:\n            sset = set()\n            for (nei, low, high) in adj[v]:\n                sset.add(low)\n                sset.add(high)\n            S[v] = sset\n        # try each candidate for one node (start)\n        start_node = comp_nodes[0]\n        tried = set()\n        for cand in S[start_node]:\n            if cand in tried:\n                continue\n            tried.add(cand)\n            ok = True\n            assign = {}\n            dq = deque()\n            assign[start_node] = cand\n            dq.append(start_node)\n            while dq and ok:\n                u = dq.popleft()\n                eu = assign[u]\n                # check all incident edges\n                for (v, low, high) in adj[u]:\n                    # depending on eu, required ev\n                    if eu == low:\n                        ev_required = high\n                    elif eu == high:\n                        ev_required = low\n                    else:\n                        ok = False\n                        break\n                    if ev_required not in S[v]:\n                        ok = False\n                        break\n                    if v in assign:\n                        if assign[v] != ev_required:\n                            ok = False\n                            break\n                    else:\n                        assign[v] = ev_required\n                        dq.append(v)\n            if ok:\n                # success for this component\n                success_comp = True\n                # mark visited nodes and copy assignments into visited dict\n                for v in comp_nodes:\n                    visited[v] = True\n                    # some nodes might not be in assign if isolated? but comp_nodes built by BFS so all should be assigned\n                # apply to exp_per_node\n                for v, val in assign.items():\n                    exp_per_node[v][p] = val\n                break\n        if not success_comp:\n            print(\"NO\")\n            sys.exit(0)\n\n# Now combine exponents and produce a_i\nres = [1] * n\nfor i in range(n):\n    val = 1\n    for p, e in exp_per_node[i].items():\n        if e:\n            val *= pow(p, e)\n    res[i] = val\n\n# Validate all edges: gcd and lcm\nimport math\nfor (u, v, g, l) in edges:\n    a = res[u]\n    b = res[v]\n    gg = math.gcd(a, b)\n    if gg != g:\n        print(\"NO\")\n        sys.exit(0)\n    # compute lcm = a*b // gg\n    if a // gg * b != l:\n        # compute lcm and compare\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i] == i:\n            for j in range(i*i, n+1, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\ndef factor(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nmaxval = 10**6\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u, v, g, l))\n\n# quick check: l must be divisible by g\nfor (_, _, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# prepare spf\nspf = sieve_spf(maxval)\n\n# Build per-prime adjacency\nprime_adj = defaultdict(lambda: defaultdict(list))  # prime -> node -> list of (neighbor, low, high)\nnodes_in_prime = defaultdict(set)\n\nfor idx, (u, v, g, l) in enumerate(edges):\n    fg = factor(g, spf) if g > 1 else {}\n    fl = factor(l, spf) if l > 1 else {}\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p, 0)\n        el = fl.get(p, 0)\n        low = eg\n        high = eg + el\n        # record edge for prime p\n        prime_adj[p][u].append((v, low, high))\n        prime_adj[p][v].append((u, low, high))\n        nodes_in_prime[p].add(u)\n        nodes_in_prime[p].add(v)\n\n# global exponent assignment: list of dicts per node mapping prime->exp\nexp_per_node = [defaultdict(int) for _ in range(n)]\n\n# Process each prime\nfor p, adj in prime_adj.items():\n    visited = {}\n    for start in list(adj.keys()):\n        if start in visited:\n            continue\n        # gather component nodes by BFS\n        comp_nodes = []\n        q = [start]\n        visited_comp = set([start])\n        for u in q:\n            comp_nodes.append(u)\n            for v, lval, hval in adj[u]:\n                if v not in visited_comp:\n                    visited_comp.add(v)\n                    q.append(v)\n        # now try to assign this component\n        assigned = {}\n        success_comp = False\n        # build S_v candidates\n        S = {}\n        for v in comp_nodes:\n            sset = set()\n            for (nei, low, high) in adj[v]:\n                sset.add(low)\n                sset.add(high)\n            S[v] = sset\n        # try each candidate for one node (start)\n        start_node = comp_nodes[0]\n        tried = set()\n        for cand in S[start_node]:\n            if cand in tried:\n                continue\n            tried.add(cand)\n            ok = True\n            assign = {}\n            dq = deque()\n            assign[start_node] = cand\n            dq.append(start_node)\n            while dq and ok:\n                u = dq.popleft()\n                eu = assign[u]\n                # check all incident edges\n                for (v, low, high) in adj[u]:\n                    # depending on eu, required ev\n                    if eu == low:\n                        ev_required = high\n                    elif eu == high:\n                        ev_required = low\n                    else:\n                        ok = False\n                        break\n                    if ev_required not in S[v]:\n                        ok = False\n                        break\n                    if v in assign:\n                        if assign[v] != ev_required:\n                            ok = False\n                            break\n                    else:\n                        assign[v] = ev_required\n                        dq.append(v)\n            if ok:\n                # success for this component\n                success_comp = True\n                # mark visited nodes and copy assignments into visited dict\n                for v in comp_nodes:\n                    visited[v] = True\n                    # some nodes might not be in assign if isolated? but comp_nodes built by BFS so all should be assigned\n                # apply to exp_per_node\n                for v, val in assign.items():\n                    exp_per_node[v][p] = val\n                break\n        if not success_comp:\n            print(\"NO\")\n            sys.exit(0)\n\n# Now combine exponents and produce a_i\nres = [1] * n\nfor i in range(n):\n    val = 1\n    for p, e in exp_per_node[i].items():\n        if e:\n            val *= pow(p, e)\n    res[i] = val\n\n# Validate all edges: gcd and lcm\nimport math\nfor (u, v, g, l) in edges:\n    a = res[u]\n    b = res[v]\n    gg = math.gcd(a, b)\n    if gg != g:\n        print(\"NO\")\n        sys.exit(0)\n    # compute lcm = a*b // gg\n    if a // gg * b != l:\n        # compute lcm and compare\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 7316,
        "thoughts_token_count": 6080
    }
}