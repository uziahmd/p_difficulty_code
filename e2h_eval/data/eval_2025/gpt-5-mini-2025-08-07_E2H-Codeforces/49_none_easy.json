{
    "start": 1758294619.223096,
    "end": 1758294635.5591586,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```unknown\nimport sys\nimport threading\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    vals = [0]*n\n    vis = [False]*n\n\n    for s in range(n):\n        if vis[s]:\n            continue\n        # if isolated, set to 1\n        if not adj[s]:\n            vals[s]=1\n            vis[s]=True\n            continue\n        # attempt to assign starting value via BFS using prime factor approach:\n        # We'll try to deduce value for s by using neighbors constraints: for each edge u-v with g,l, numbers must be g * k_u, g * k_v where l = g * lcm(k_u,k_v) and gcd(k_u,k_v)=1.\n        # Simpler approach: derive candidate for s from each incident edge as either g or l (if divisible). We'll try multiples of g that divide l.\n        # Collect possible candidates from edges: divisors of l that are multiples of g.\n        candidates = None\n        for (v,g,l) in adj[s]:\n            # possible values for s on this edge: any d such that d % g ==0, other = l*d//(l)?? Actually values pair (a,b) have gcd=g and lcm=l so a*b = g*l.\n            # So possible a are divisors of g*l that are multiples of g and <=1e6.\n            prod = g * l\n            cand = set()\n            # enumerate divisors of prod\n            i=1\n            while i*i<=prod:\n                if prod % i == 0:\n                    for d in (i, prod//i):\n                        if d % g == 0 and d <= 10**6:\n                            # and lcm(d, other)=l -> other = prod//d, ensure gcd(d, other)==g\n                            other = prod//d\n                            if math.gcd(d,other)==g and (math.lcm(d,other)==l):\n                                cand.add(d)\n                i+=1\n            if candidates is None:\n                candidates = cand\n            else:\n                candidates &= cand\n            if not candidates:\n                break\n        if not candidates:\n            print(\"NO\")\n            return\n        # try each candidate until success\n        success = False\n        for start in sorted(candidates):\n            assign = {}\n            from collections import deque\n            q = deque()\n            assign[s]=start\n            q.append(s)\n            ok = True\n            while q and ok:\n                u = q.popleft()\n                for v,g,l in adj[u]:\n                    if u not in assign:\n                        continue\n                    a = assign[u]\n                    prod = g*l\n                    # b must be prod//a and integer, <=1e6, gcd(a,b)=g, lcm(a,b)=l\n                    if prod % a != 0:\n                        ok = False; break\n                    b = prod//a\n                    if b>10**6 or math.gcd(a,b)!=g or math.lcm(a,b)!=l:\n                        ok = False; break\n                    if v in assign:\n                        if assign[v]!=b:\n                            ok = False; break\n                    else:\n                        assign[v]=b\n                        q.append(v)\n            if ok:\n                # mark vis and set vals\n                for node,val in assign.items():\n                    vis[node]=True\n                    vals[node]=val\n                # For any remaining nodes in component unassigned (disconnected within component), set by BFS from them later; but adjacency ensures connected? Component may be connected; this covers.\n                success = True\n                break\n        if not success:\n            print(\"NO\")\n            return\n        # ensure all nodes in component visited: run BFS to mark others if any left (should be marked)\n        # continue loop\n\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in vals))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\nimport sys\nimport threading\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    vals = [0]*n\n    vis = [False]*n\n\n    for s in range(n):\n        if vis[s]:\n            continue\n        # if isolated, set to 1\n        if not adj[s]:\n            vals[s]=1\n            vis[s]=True\n            continue\n        # attempt to assign starting value via BFS using prime factor approach:\n        # We'll try to deduce value for s by using neighbors constraints: for each edge u-v with g,l, numbers must be g * k_u, g * k_v where l = g * lcm(k_u,k_v) and gcd(k_u,k_v)=1.\n        # Simpler approach: derive candidate for s from each incident edge as either g or l (if divisible). We'll try multiples of g that divide l.\n        # Collect possible candidates from edges: divisors of l that are multiples of g.\n        candidates = None\n        for (v,g,l) in adj[s]:\n            # possible values for s on this edge: any d such that d % g ==0, other = l*d//(l)?? Actually values pair (a,b) have gcd=g and lcm=l so a*b = g*l.\n            # So possible a are divisors of g*l that are multiples of g and <=1e6.\n            prod = g * l\n            cand = set()\n            # enumerate divisors of prod\n            i=1\n            while i*i<=prod:\n                if prod % i == 0:\n                    for d in (i, prod//i):\n                        if d % g == 0 and d <= 10**6:\n                            # and lcm(d, other)=l -> other = prod//d, ensure gcd(d, other)==g\n                            other = prod//d\n                            if math.gcd(d,other)==g and (math.lcm(d,other)==l):\n                                cand.add(d)\n                i+=1\n            if candidates is None:\n                candidates = cand\n            else:\n                candidates &= cand\n            if not candidates:\n                break\n        if not candidates:\n            print(\"NO\")\n            return\n        # try each candidate until success\n        success = False\n        for start in sorted(candidates):\n            assign = {}\n            from collections import deque\n            q = deque()\n            assign[s]=start\n            q.append(s)\n            ok = True\n            while q and ok:\n                u = q.popleft()\n                for v,g,l in adj[u]:\n                    if u not in assign:\n                        continue\n                    a = assign[u]\n                    prod = g*l\n                    # b must be prod//a and integer, <=1e6, gcd(a,b)=g, lcm(a,b)=l\n                    if prod % a != 0:\n                        ok = False; break\n                    b = prod//a\n                    if b>10**6 or math.gcd(a,b)!=g or math.lcm(a,b)!=l:\n                        ok = False; break\n                    if v in assign:\n                        if assign[v]!=b:\n                            ok = False; break\n                    else:\n                        assign[v]=b\n                        q.append(v)\n            if ok:\n                # mark vis and set vals\n                for node,val in assign.items():\n                    vis[node]=True\n                    vals[node]=val\n                # For any remaining nodes in component unassigned (disconnected within component), set by BFS from them later; but adjacency ensures connected? Component may be connected; this covers.\n                success = True\n                break\n        if not success:\n            print(\"NO\")\n            return\n        # ensure all nodes in component visited: run BFS to mark others if any left (should be marked)\n        # continue loop\n\n    print(\"YES\")\n    print(\" \".join(str(x if x!=0 else 1) for x in vals))\n\nif __name__ == \"__main__\":\n    threading.Thread(target=main).start()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 959,
        "thoughts_token_count": 0
    }
}