{
    "start": 1758290709.6636896,
    "end": 1758290858.5119667,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Exploring multiplicative constraints**\n\nI’m working through the relationships for each edge, where the product of a_u and a_v should equal g multiplied by l. Wait, I remember earlier we had a relationship where a_u * a_v equals g times l when the gcd equals l. It seems that the relationship holds true based on gcd and lcm, which leads to constraints about the products. I'll implement a prime-based approach to factorize l and g, checking conditions carefully for feasibility.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef build_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i] == i:\n            step = i\n            start = i*i\n            for j in range(start, n+1, step):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\nspf = build_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        return\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Validate l%g\n    for (_,_,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # Build per-prime constraints\n    prime_edges = defaultdict(list)  # p -> list of (u,v,a,b)\n    for (u,v,g,l) in edges:\n        fg = factorize(g)\n        fl = factorize(l)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            a = fg.get(p,0)\n            b = fl.get(p,0)\n            if a > b:\n                print(\"NO\")\n                return\n            prime_edges[p].append((u,v,a,b))\n    # final values\n    a_vals = [1]*n\n    # For each prime, solve exponents\n    for p, plist in prime_edges.items():\n        # collect nodes involved\n        nodes_set = set()\n        for u,v,a,b in plist:\n            nodes_set.add(u); nodes_set.add(v)\n        nodes_list = list(nodes_set)\n        idx_map = {node:i for i,node in enumerate(nodes_list)}\n        k = len(nodes_list)\n        # allowed sets and adjacency\n        allowed = [None]*k\n        val = [-1]*k\n        adj = [[] for _ in range(k)]\n        # process edges to set allowed intersections and build adj\n        for u,v,a,b in plist:\n            iu = idx_map[u]; iv = idx_map[v]\n            if a == b:\n                # unary: both must be a\n                if allowed[iu] is None:\n                    allowed[iu] = {a}\n                else:\n                    allowed[iu] = allowed[iu].intersection({a})\n                if allowed[iu] and len(allowed[iu])==0:\n                    print(\"NO\"); return\n                if allowed[iv] is None:\n                    allowed[iv] = {a}\n                else:\n                    allowed[iv] = allowed[iv].intersection({a})\n                if allowed[iv] and len(allowed[iv])==0:\n                    print(\"NO\"); return\n                # adjacency also record to propagate same value\n                adj[iu].append((iv,a,b))\n                adj[iv].append((iu,a,b))\n            else:\n                # binary edge: values must be a or b\n                if allowed[iu] is None:\n                    allowed[iu] = {a,b}\n                else:\n                    allowed[iu] = allowed[iu].intersection({a,b})\n                if allowed[iu] and len(allowed[iu])==0:\n                    print(\"NO\"); return\n                if allowed[iv] is None:\n                    allowed[iv] = {a,b}\n                else:\n                    allowed[iv] = allowed[iv].intersection({a,b})\n                if allowed[iv] and len(allowed[iv])==0:\n                    print(\"NO\"); return\n                adj[iu].append((iv,a,b))\n                adj[iv].append((iu,a,b))\n        # For any allowed still None (isolated node?), set to {0} maybe default 0 exponent\n        for i in range(k):\n            if allowed[i] is None:\n                allowed[i] = {0}\n        # helper to propagate assignments; modifies val, returns True/False and records changed list for rollback if needed\n        def propagate(start_iter):\n            # start_iter: iterable of (node_index, value) seeds to set and propagate\n            q = deque()\n            changed = []\n            for node, vval in start_iter:\n                if val[node] == -1:\n                    if vval not in allowed[node]:\n                        # conflict\n                        # rollback none (no changes yet)\n                        return False, []\n                    val[node] = vval\n                    changed.append(node)\n                    q.append(node)\n                else:\n                    if val[node] != vval:\n                        return False, []\n            while q:\n                u = q.popleft()\n                cu = val[u]\n                for (v,a,b) in adj[u]:\n                    # edge requires u and v values be either equal (if a==b) or opposite between a and b\n                    if a == b:\n                        req = a\n                        if val[v] == -1:\n                            if req not in allowed[v]:\n                                # conflict\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n                            val[v] = req\n                            changed.append(v)\n                            q.append(v)\n                        else:\n                            if val[v] != req:\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n                    else:\n                        if cu not in (a,b):\n                            for nd in changed:\n                                val[nd] = -1\n                            return False, []\n                        req = a if cu == b else b\n                        if val[v] == -1:\n                            if req not in allowed[v]:\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n                            val[v] = req\n                            changed.append(v)\n                            q.append(v)\n                        else:\n                            if val[v] != req:\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n            return True, changed\n        # First process any nodes with allowed size 1 as seeds\n        queue_seeds = [(i, next(iter(allowed[i]))) for i in range(k) if len(allowed[i])==1]\n        ok = True\n        if queue_seeds:\n            ok2, _ = propagate(queue_seeds)\n            if not ok2:\n                print(\"NO\"); return\n        # Now handle components with remaining unassigned nodes\n        for i in range(k):\n            if val[i] == -1:\n                # find component nodes via BFS on adj\n                comp_nodes = []\n                dq = deque([i])\n                vis = {i}\n                while dq:\n                    x = dq.popleft()\n                    comp_nodes.append(x)\n                    for (y,_,_) in adj[x]:\n                        if y not in vis:\n                            vis.add(y); dq.append(y)\n                # attempt to assign by trying each candidate in allowed of start node\n                success_comp = False\n                for candidate in list(allowed[i]):\n                    # try assign candidate and propagate within this component only\n                    # But propagate uses global adj; it's okay because other components unaffected\n                    # record which nodes were changed to rollback if fails\n                    ok3, changed = propagate([(i,candidate)])\n                    if ok3:\n                        success_comp = True\n                        break\n                    # else rollback already done by propagate\n                if not success_comp:\n                    print(\"NO\"); return\n        # After all assignments for this prime, multiply into a_vals\n        # val index corresponds to nodes_list index\n        for idx, node in enumerate(nodes_list):\n            exp = val[idx]\n            if exp > 0:\n                a_vals[node] *= pow(p, exp)\n    # After done for all primes, verify all edges\n    from math import gcd\n    for (u,v,g,l) in edges:\n        au = a_vals[u]; av = a_vals[v]\n        gg = gcd(au,av)\n        if gg != g:\n            print(\"NO\"); return\n        # compute lcm\n        # check au*av // gg == l\n        if au // gg * av != l:\n            print(\"NO\"); return\n    # All good\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a_vals))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\nMAXV = 10**6\n\ndef build_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i] == i:\n            step = i\n            start = i*i\n            for j in range(start, n+1, step):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\nspf = build_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        return\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Validate l%g\n    for (_,_,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # Build per-prime constraints\n    prime_edges = defaultdict(list)  # p -> list of (u,v,a,b)\n    for (u,v,g,l) in edges:\n        fg = factorize(g)\n        fl = factorize(l)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            a = fg.get(p,0)\n            b = fl.get(p,0)\n            if a > b:\n                print(\"NO\")\n                return\n            prime_edges[p].append((u,v,a,b))\n    # final values\n    a_vals = [1]*n\n    # For each prime, solve exponents\n    for p, plist in prime_edges.items():\n        # collect nodes involved\n        nodes_set = set()\n        for u,v,a,b in plist:\n            nodes_set.add(u); nodes_set.add(v)\n        nodes_list = list(nodes_set)\n        idx_map = {node:i for i,node in enumerate(nodes_list)}\n        k = len(nodes_list)\n        # allowed sets and adjacency\n        allowed = [None]*k\n        val = [-1]*k\n        adj = [[] for _ in range(k)]\n        # process edges to set allowed intersections and build adj\n        for u,v,a,b in plist:\n            iu = idx_map[u]; iv = idx_map[v]\n            if a == b:\n                # unary: both must be a\n                if allowed[iu] is None:\n                    allowed[iu] = {a}\n                else:\n                    allowed[iu] = allowed[iu].intersection({a})\n                if allowed[iu] and len(allowed[iu])==0:\n                    print(\"NO\"); return\n                if allowed[iv] is None:\n                    allowed[iv] = {a}\n                else:\n                    allowed[iv] = allowed[iv].intersection({a})\n                if allowed[iv] and len(allowed[iv])==0:\n                    print(\"NO\"); return\n                # adjacency also record to propagate same value\n                adj[iu].append((iv,a,b))\n                adj[iv].append((iu,a,b))\n            else:\n                # binary edge: values must be a or b\n                if allowed[iu] is None:\n                    allowed[iu] = {a,b}\n                else:\n                    allowed[iu] = allowed[iu].intersection({a,b})\n                if allowed[iu] and len(allowed[iu])==0:\n                    print(\"NO\"); return\n                if allowed[iv] is None:\n                    allowed[iv] = {a,b}\n                else:\n                    allowed[iv] = allowed[iv].intersection({a,b})\n                if allowed[iv] and len(allowed[iv])==0:\n                    print(\"NO\"); return\n                adj[iu].append((iv,a,b))\n                adj[iv].append((iu,a,b))\n        # For any allowed still None (isolated node?), set to {0} maybe default 0 exponent\n        for i in range(k):\n            if allowed[i] is None:\n                allowed[i] = {0}\n        # helper to propagate assignments; modifies val, returns True/False and records changed list for rollback if needed\n        def propagate(start_iter):\n            # start_iter: iterable of (node_index, value) seeds to set and propagate\n            q = deque()\n            changed = []\n            for node, vval in start_iter:\n                if val[node] == -1:\n                    if vval not in allowed[node]:\n                        # conflict\n                        # rollback none (no changes yet)\n                        return False, []\n                    val[node] = vval\n                    changed.append(node)\n                    q.append(node)\n                else:\n                    if val[node] != vval:\n                        return False, []\n            while q:\n                u = q.popleft()\n                cu = val[u]\n                for (v,a,b) in adj[u]:\n                    # edge requires u and v values be either equal (if a==b) or opposite between a and b\n                    if a == b:\n                        req = a\n                        if val[v] == -1:\n                            if req not in allowed[v]:\n                                # conflict\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n                            val[v] = req\n                            changed.append(v)\n                            q.append(v)\n                        else:\n                            if val[v] != req:\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n                    else:\n                        if cu not in (a,b):\n                            for nd in changed:\n                                val[nd] = -1\n                            return False, []\n                        req = a if cu == b else b\n                        if val[v] == -1:\n                            if req not in allowed[v]:\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n                            val[v] = req\n                            changed.append(v)\n                            q.append(v)\n                        else:\n                            if val[v] != req:\n                                for nd in changed:\n                                    val[nd] = -1\n                                return False, []\n            return True, changed\n        # First process any nodes with allowed size 1 as seeds\n        queue_seeds = [(i, next(iter(allowed[i]))) for i in range(k) if len(allowed[i])==1]\n        ok = True\n        if queue_seeds:\n            ok2, _ = propagate(queue_seeds)\n            if not ok2:\n                print(\"NO\"); return\n        # Now handle components with remaining unassigned nodes\n        for i in range(k):\n            if val[i] == -1:\n                # find component nodes via BFS on adj\n                comp_nodes = []\n                dq = deque([i])\n                vis = {i}\n                while dq:\n                    x = dq.popleft()\n                    comp_nodes.append(x)\n                    for (y,_,_) in adj[x]:\n                        if y not in vis:\n                            vis.add(y); dq.append(y)\n                # attempt to assign by trying each candidate in allowed of start node\n                success_comp = False\n                for candidate in list(allowed[i]):\n                    # try assign candidate and propagate within this component only\n                    # But propagate uses global adj; it's okay because other components unaffected\n                    # record which nodes were changed to rollback if fails\n                    ok3, changed = propagate([(i,candidate)])\n                    if ok3:\n                        success_comp = True\n                        break\n                    # else rollback already done by propagate\n                if not success_comp:\n                    print(\"NO\"); return\n        # After all assignments for this prime, multiply into a_vals\n        # val index corresponds to nodes_list index\n        for idx, node in enumerate(nodes_list):\n            exp = val[idx]\n            if exp > 0:\n                a_vals[node] *= pow(p, exp)\n    # After done for all primes, verify all edges\n    from math import gcd\n    for (u,v,g,l) in edges:\n        au = a_vals[u]; av = a_vals[v]\n        gg = gcd(au,av)\n        if gg != g:\n            print(\"NO\"); return\n        # compute lcm\n        # check au*av // gg == l\n        if au // gg * av != l:\n            print(\"NO\"); return\n    # All good\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a_vals))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 7584,
        "thoughts_token_count": 5696
    }
}