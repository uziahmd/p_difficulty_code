{
    "start": 1758094549.9853604,
    "end": 1758094561.7923574,
    "start-formatted": "2025-09-17 16:35 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nfrom collections import defaultdict, deque\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); x = int(next(it))\nvouchers = []\nMAXT = 2 * 10**5 + 5\nby_len = defaultdict(list)\nfor _ in range(n):\n    l = int(next(it)); r = int(next(it)); c = int(next(it))\n    d = r - l + 1\n    vouchers.append((l, r, c, d))\n    by_len[d].append((l, r, c))\n\nINF = 10**30\nbest = INF\n\n# Precompute for each length d an array best_left[t]: minimal cost of interval of length d that ends at or before t\n# and best_right[t]: minimal cost of interval of length d that starts at or after t\n# We'll build for needed lengths only.\nfor d, arr in by_len.items():\n    # build arrays of size MAXT (1..2e5)\n    best_end = [INF] * (MAXT + 2)  # best_end[t] = min cost of interval length d ending exactly at t\n    best_start = [INF] * (MAXT + 2)  # best_start[t] = min cost of interval length d starting exactly at t\n    for l, r, c in arr:\n        # end at r\n        if c < best_end[r]:\n            best_end[r] = c\n        if c < best_start[l]:\n            best_start[l] = c\n    # prefix min for ends: best of ending at or before t\n    for t in range(1, MAXT + 1):\n        if best_end[t-1] < best_end[t]:\n            best_end[t] = best_end[t-1]\n    # suffix min for starts: best of starting at or after t\n    for t in range(MAXT, 0, -1):\n        if best_start[t+1] < best_start[t]:\n            best_start[t] = best_start[t+1]\n    # for each voucher of length d, try to pair with length x-d\n    need = x - d\n    if need <= 0:\n        continue\n    if need not in by_len:\n        continue\n    # iterate original vouchers of this length\n    for l, r, c in arr:\n        # pair with interval of length need that ends before l (i.e., end <= l-1)\n        if l-1 >= 1:\n            other = best_end[l-1]\n            if other < INF:\n                total = c + other\n                if total < best:\n                    best = total\n        # pair with interval of length need that starts after r (i.e., start >= r+1)\n        if r+1 <= MAXT:\n            other = best_start[r+1]\n            if other < INF:\n                total = c + other\n                if total < best:\n                    best = total\n\nprint(-1 if best == INF else best)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); x = int(next(it))\nvouchers = []\nMAXT = 2 * 10**5 + 5\nby_len = defaultdict(list)\nfor _ in range(n):\n    l = int(next(it)); r = int(next(it)); c = int(next(it))\n    d = r - l + 1\n    vouchers.append((l, r, c, d))\n    by_len[d].append((l, r, c))\n\nINF = 10**30\nbest = INF\n\n# Precompute for each length d an array best_left[t]: minimal cost of interval of length d that ends at or before t\n# and best_right[t]: minimal cost of interval of length d that starts at or after t\n# We'll build for needed lengths only.\nfor d, arr in by_len.items():\n    # build arrays of size MAXT (1..2e5)\n    best_end = [INF] * (MAXT + 2)  # best_end[t] = min cost of interval length d ending exactly at t\n    best_start = [INF] * (MAXT + 2)  # best_start[t] = min cost of interval length d starting exactly at t\n    for l, r, c in arr:\n        # end at r\n        if c < best_end[r]:\n            best_end[r] = c\n        if c < best_start[l]:\n            best_start[l] = c\n    # prefix min for ends: best of ending at or before t\n    for t in range(1, MAXT + 1):\n        if best_end[t-1] < best_end[t]:\n            best_end[t] = best_end[t-1]\n    # suffix min for starts: best of starting at or after t\n    for t in range(MAXT, 0, -1):\n        if best_start[t+1] < best_start[t]:\n            best_start[t] = best_start[t+1]\n    # for each voucher of length d, try to pair with length x-d\n    need = x - d\n    if need <= 0:\n        continue\n    if need not in by_len:\n        continue\n    # iterate original vouchers of this length\n    for l, r, c in arr:\n        # pair with interval of length need that ends before l (i.e., end <= l-1)\n        if l-1 >= 1:\n            other = best_end[l-1]\n            if other < INF:\n                total = c + other\n                if total < best:\n                    best = total\n        # pair with interval of length need that starts after r (i.e., start >= r+1)\n        if r+1 <= MAXT:\n            other = best_start[r+1]\n            if other < INF:\n                total = c + other\n                if total < best:\n                    best = total\n\nprint(-1 if best == INF else best)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 680,
        "completion_token_count": 651,
        "thoughts_token_count": 0
    }
}