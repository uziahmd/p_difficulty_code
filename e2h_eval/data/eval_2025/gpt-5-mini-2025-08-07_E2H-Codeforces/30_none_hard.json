{
    "start": 1758294652.5215838,
    "end": 1758294666.526563,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:11 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    L = 2 * n\n    digits = A\n\n    # DP: dp[i][h] = best total sum string for first i digits where Homer has taken h digits\n    # We need to maximize integer value of concatenation S1 + S2 as integers (not strings).\n    # But sum S1+S2 where S1 and S2 are numbers formed by digits appended in order.\n    # Value contributed by a digit when assigned depends on position in that player's number.\n    # For efficient DP we store values as integers.\n    # dp[i][h] = (total_value, prev_choice) where prev_choice 0 for H,1 for M\n    # total_value = current numeric total of S1+S2 formed from first i digits.\n    # Keep also power arrays: when Homer has h-1 previous digits, appending digit d adds d * 10^(n - (h) )? Wait:\n    # We build numbers left-to-right; final length of each S is n. When appending early, its place value depends on how many digits will follow for that player.\n    # For Homer: if he has taken h-1 before and now takes one (becomes h), this digit will end up at position h among n digits: its multiplier is 10^(n - h).\n    # Similarly for Marge: if she has taken m-1 before and now takes one (becomes m), multiplier is 10^(n - m).\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = pow10[i-1] * 10\n    # We'll use multiplier 10^(n - pos), so pow10[n - pos] where pos is 1..n. Precompute pow10big\n    pow10big = [1] * (n + 1)\n    for pos in range(0, n + 1):\n        pow10big[pos] = pow10[pos]  # pow10[pos] = 10^pos\n    # dp table dimensions (L+1) x (n+1)\n    NEG = -10**100\n    dp_val = [[NEG] * (n + 1) for _ in range(L + 1)]\n    prev = [[None] * (n + 1) for _ in range(L + 1)]\n    dp_val[0][0] = 0\n    for i in range(0, L):\n        d = ord(digits[i]) - 48\n        for h in range(0, n+1):\n            if dp_val[i][h] == NEG:\n                continue\n            m = i - h\n            # Homer takes if h < n\n            if h < n:\n                newh = h + 1\n                pos = newh  # position among Homer's digits (1..n)\n                add = d * pow10big[n - pos]\n                cand = dp_val[i][h] + add\n                if cand > dp_val[i+1][newh]:\n                    dp_val[i+1][newh] = cand\n                    prev[i+1][newh] = ('H', h)\n            # Marge takes if m < n\n            if m < n:\n                newh = h\n                pos = m + 1\n                add = d * pow10big[n - pos]\n                cand = dp_val[i][h] + add\n                if cand > dp_val[i+1][newh]:\n                    dp_val[i+1][newh] = cand\n                    prev[i+1][newh] = ('M', h)\n    # reconstruct from dp[L][n]\n    res = []\n    i = L\n    h = n\n    while i > 0:\n        pv = prev[i][h]\n        if pv is None:\n            break\n        ch, prevh = pv\n        res.append(ch)\n        h = prevh\n        i -= 1\n    res.reverse()\n    print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    L = 2 * n\n    digits = A\n\n    # DP: dp[i][h] = best total sum string for first i digits where Homer has taken h digits\n    # We need to maximize integer value of concatenation S1 + S2 as integers (not strings).\n    # But sum S1+S2 where S1 and S2 are numbers formed by digits appended in order.\n    # Value contributed by a digit when assigned depends on position in that player's number.\n    # For efficient DP we store values as integers.\n    # dp[i][h] = (total_value, prev_choice) where prev_choice 0 for H,1 for M\n    # total_value = current numeric total of S1+S2 formed from first i digits.\n    # Keep also power arrays: when Homer has h-1 previous digits, appending digit d adds d * 10^(n - (h) )? Wait:\n    # We build numbers left-to-right; final length of each S is n. When appending early, its place value depends on how many digits will follow for that player.\n    # For Homer: if he has taken h-1 before and now takes one (becomes h), this digit will end up at position h among n digits: its multiplier is 10^(n - h).\n    # Similarly for Marge: if she has taken m-1 before and now takes one (becomes m), multiplier is 10^(n - m).\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = pow10[i-1] * 10\n    # We'll use multiplier 10^(n - pos), so pow10[n - pos] where pos is 1..n. Precompute pow10big\n    pow10big = [1] * (n + 1)\n    for pos in range(0, n + 1):\n        pow10big[pos] = pow10[pos]  # pow10[pos] = 10^pos\n    # dp table dimensions (L+1) x (n+1)\n    NEG = -10**100\n    dp_val = [[NEG] * (n + 1) for _ in range(L + 1)]\n    prev = [[None] * (n + 1) for _ in range(L + 1)]\n    dp_val[0][0] = 0\n    for i in range(0, L):\n        d = ord(digits[i]) - 48\n        for h in range(0, n+1):\n            if dp_val[i][h] == NEG:\n                continue\n            m = i - h\n            # Homer takes if h < n\n            if h < n:\n                newh = h + 1\n                pos = newh  # position among Homer's digits (1..n)\n                add = d * pow10big[n - pos]\n                cand = dp_val[i][h] + add\n                if cand > dp_val[i+1][newh]:\n                    dp_val[i+1][newh] = cand\n                    prev[i+1][newh] = ('H', h)\n            # Marge takes if m < n\n            if m < n:\n                newh = h\n                pos = m + 1\n                add = d * pow10big[n - pos]\n                cand = dp_val[i][h] + add\n                if cand > dp_val[i+1][newh]:\n                    dp_val[i+1][newh] = cand\n                    prev[i+1][newh] = ('M', h)\n    # reconstruct from dp[L][n]\n    res = []\n    i = L\n    h = n\n    while i > 0:\n        pv = prev[i][h]\n        if pv is None:\n            break\n        ch, prevh = pv\n        res.append(ch)\n        h = prevh\n        i -= 1\n    res.reverse()\n    print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 411,
        "completion_token_count": 924,
        "thoughts_token_count": 0
    }
}