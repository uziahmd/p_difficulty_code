{
    "start": 1758290729.1205826,
    "end": 1758290826.643042,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Modeling edge constraints**\n\nI’m thinking about how each edge determines a ratio that can be modeled with graph constraints. I could set up values with prime factorization for each prime number. For an edge with a GCD, we need to relate valuations of the numerators and denominators with defined maximums and minimums based on these primes. It seems like for edges involving different primes, the vertices might need to be in opposite states, especially if we’re dealing with multiple primes. There’s a lot to account for!",
    "response": "#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            step = i\n            start = i*i\n            for j in range(start, n+1, step):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    maxval = 1\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n\n    # quick checks\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n\n    spf = sieve_spf(maxval)\n\n    # Build per-prime constraints\n    prime_constraints = defaultdict(list)  # p -> list of (u,v,ge,le)\n    for (u,v,g,l) in edges:\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            ge = fg.get(p, 0)\n            le = fl.get(p, 0)\n            if le < ge:\n                print(\"NO\")\n                return\n            # only add if at least one exponent >0 or (both zero won't happen as p from primes)\n            prime_constraints[p].append((u, v, ge, le))\n\n    # initialize exponent dict per prime per node\n    exponents = [defaultdict(int) for _ in range(n)]  # exponents[i][p] = exp\n\n    # Process each prime\n    for p, cons in prime_constraints.items():\n        # build adjacency for vertices involved\n        adj = defaultdict(list)\n        verts = set()\n        for (u,v,ge,le) in cons:\n            adj[u].append((v,ge,le))\n            adj[v].append((u,ge,le))\n            verts.add(u); verts.add(v)\n        assigned = {}\n        allowed = {}\n        # compute initial allowed sets\n        for v in verts:\n            sets = None\n            for (to,ge,le) in adj[v]:\n                s = {ge, le}\n                if sets is None:\n                    sets = s.copy()\n                else:\n                    sets &= s\n            if sets is None:\n                sets = {0}\n            if len(sets) == 0:\n                print(\"NO\")\n                return\n            allowed[v] = sets\n\n        visited = set()\n        for v0 in verts:\n            if v0 in visited:\n                continue\n            # collect component\n            q = deque([v0])\n            comp = []\n            visited.add(v0)\n            while q:\n                x = q.popleft()\n                comp.append(x)\n                for (y,_,_) in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        q.append(y)\n            # process component: BFS assignments\n            comp_assigned = {}\n            queue = deque()\n            # seed with vertices with allowed size 1\n            for v in comp:\n                if len(allowed[v]) == 1:\n                    val = next(iter(allowed[v]))\n                    comp_assigned[v] = val\n                    queue.append(v)\n            # propagate\n            while queue:\n                u = queue.popleft()\n                eu = comp_assigned[u]\n                for (v,ge,le) in adj[u]:\n                    # required value for v\n                    if eu == ge:\n                        need = le\n                    elif eu == le:\n                        need = ge\n                    else:\n                        print(\"NO\")\n                        return\n                    if need not in allowed[v]:\n                        print(\"NO\")\n                        return\n                    if v in comp_assigned:\n                        if comp_assigned[v] != need:\n                            print(\"NO\")\n                            return\n                    else:\n                        comp_assigned[v] = need\n                        queue.append(v)\n            # any unassigned: pick arbitrary allowed and propagate\n            for v in comp:\n                if v in comp_assigned:\n                    continue\n                # pick an arbitrary value from allowed[v]\n                pick = min(allowed[v])\n                comp_assigned[v] = pick\n                queue = deque([v])\n                while queue:\n                    u = queue.popleft()\n                    eu = comp_assigned[u]\n                    for (v2,ge,le) in adj[u]:\n                        if eu == ge:\n                            need = le\n                        elif eu == le:\n                            need = ge\n                        else:\n                            print(\"NO\")\n                            return\n                        if need not in allowed[v2]:\n                            print(\"NO\")\n                            return\n                        if v2 in comp_assigned:\n                            if comp_assigned[v2] != need:\n                                print(\"NO\")\n                                return\n                        else:\n                            comp_assigned[v2] = need\n                            queue.append(v2)\n            # commit comp_assigned to global exponents\n            for v, val in comp_assigned.items():\n                exponents[v][p] = val\n\n    # build final values\n    res = [1]*n\n    for i in range(n):\n        val = 1\n        for p, e in exponents[i].items():\n            if e>0:\n                val *= pow(p, e)\n        res[i] = val\n\n    # verify all edges\n    import math\n    for (u,v,g,l) in edges:\n        a = res[u]; b = res[v]\n        gg = math.gcd(a,b)\n        if gg != g:\n            print(\"NO\")\n            return\n        # compute lcm\n        # avoid overflow, use (a//gg)*b\n        ll = (a//gg)*b\n        if ll != l:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            step = i\n            start = i*i\n            for j in range(start, n+1, step):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    maxval = 1\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n\n    # quick checks\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n\n    spf = sieve_spf(maxval)\n\n    # Build per-prime constraints\n    prime_constraints = defaultdict(list)  # p -> list of (u,v,ge,le)\n    for (u,v,g,l) in edges:\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            ge = fg.get(p, 0)\n            le = fl.get(p, 0)\n            if le < ge:\n                print(\"NO\")\n                return\n            # only add if at least one exponent >0 or (both zero won't happen as p from primes)\n            prime_constraints[p].append((u, v, ge, le))\n\n    # initialize exponent dict per prime per node\n    exponents = [defaultdict(int) for _ in range(n)]  # exponents[i][p] = exp\n\n    # Process each prime\n    for p, cons in prime_constraints.items():\n        # build adjacency for vertices involved\n        adj = defaultdict(list)\n        verts = set()\n        for (u,v,ge,le) in cons:\n            adj[u].append((v,ge,le))\n            adj[v].append((u,ge,le))\n            verts.add(u); verts.add(v)\n        assigned = {}\n        allowed = {}\n        # compute initial allowed sets\n        for v in verts:\n            sets = None\n            for (to,ge,le) in adj[v]:\n                s = {ge, le}\n                if sets is None:\n                    sets = s.copy()\n                else:\n                    sets &= s\n            if sets is None:\n                sets = {0}\n            if len(sets) == 0:\n                print(\"NO\")\n                return\n            allowed[v] = sets\n\n        visited = set()\n        for v0 in verts:\n            if v0 in visited:\n                continue\n            # collect component\n            q = deque([v0])\n            comp = []\n            visited.add(v0)\n            while q:\n                x = q.popleft()\n                comp.append(x)\n                for (y,_,_) in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        q.append(y)\n            # process component: BFS assignments\n            comp_assigned = {}\n            queue = deque()\n            # seed with vertices with allowed size 1\n            for v in comp:\n                if len(allowed[v]) == 1:\n                    val = next(iter(allowed[v]))\n                    comp_assigned[v] = val\n                    queue.append(v)\n            # propagate\n            while queue:\n                u = queue.popleft()\n                eu = comp_assigned[u]\n                for (v,ge,le) in adj[u]:\n                    # required value for v\n                    if eu == ge:\n                        need = le\n                    elif eu == le:\n                        need = ge\n                    else:\n                        print(\"NO\")\n                        return\n                    if need not in allowed[v]:\n                        print(\"NO\")\n                        return\n                    if v in comp_assigned:\n                        if comp_assigned[v] != need:\n                            print(\"NO\")\n                            return\n                    else:\n                        comp_assigned[v] = need\n                        queue.append(v)\n            # any unassigned: pick arbitrary allowed and propagate\n            for v in comp:\n                if v in comp_assigned:\n                    continue\n                # pick an arbitrary value from allowed[v]\n                pick = min(allowed[v])\n                comp_assigned[v] = pick\n                queue = deque([v])\n                while queue:\n                    u = queue.popleft()\n                    eu = comp_assigned[u]\n                    for (v2,ge,le) in adj[u]:\n                        if eu == ge:\n                            need = le\n                        elif eu == le:\n                            need = ge\n                        else:\n                            print(\"NO\")\n                            return\n                        if need not in allowed[v2]:\n                            print(\"NO\")\n                            return\n                        if v2 in comp_assigned:\n                            if comp_assigned[v2] != need:\n                                print(\"NO\")\n                                return\n                        else:\n                            comp_assigned[v2] = need\n                            queue.append(v2)\n            # commit comp_assigned to global exponents\n            for v, val in comp_assigned.items():\n                exponents[v][p] = val\n\n    # build final values\n    res = [1]*n\n    for i in range(n):\n        val = 1\n        for p, e in exponents[i].items():\n            if e>0:\n                val *= pow(p, e)\n        res[i] = val\n\n    # verify all edges\n    import math\n    for (u,v,g,l) in edges:\n        a = res[u]; b = res[v]\n        gg = math.gcd(a,b)\n        if gg != g:\n            print(\"NO\")\n            return\n        # compute lcm\n        # avoid overflow, use (a//gg)*b\n        ll = (a//gg)*b\n        if ll != l:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in res))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 5005,
        "thoughts_token_count": 3584
    }
}