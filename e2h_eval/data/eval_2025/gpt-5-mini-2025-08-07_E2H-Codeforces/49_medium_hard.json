{
    "start": 1758290734.1803458,
    "end": 1758290863.9317176,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Exploring prime constraints in graphs**\n\nI'm working with prime p, where I have constraints like e_g ≤ e_l. For edges, either e_u = e_g and e_v = e_l or vice versa; both can equal if e_g = e_l. If e_g < e_l, one must be e_l and the other e_g. I'm modeling this as a graph—each prime p will have edges labeled differently between endpoints. The values assigned must respect the allowed exponents. Since primes go up to 1e6, I’ll factor g and l accordingly for edges.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factor_with_spf(x, spf):\n    res = {}\n    while x>1:\n        p = spf[x]\n        c = 0\n        while x%p==0:\n            x//=p\n            c+=1\n        res[p]=c\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    maxval = 10**6\n    spf = sieve_spf(maxval)\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Preliminary checks and build per-prime edge info\n    edges_by_prime = defaultdict(list)  # p -> list of (u,v,eg,el)\n    for idx,(u,v,g,l) in enumerate(edges):\n        if l % g != 0:\n            print(\"NO\")\n            return\n        fg = factor_with_spf(g, spf) if g>1 else {}\n        fl = factor_with_spf(l, spf) if l>1 else {}\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p,0)\n            el = fl.get(p,0)\n            if eg > el:\n                print(\"NO\")\n                return\n            if eg==0 and el==0:\n                continue\n            edges_by_prime[p].append((u,v,eg,el))\n    # For each prime, solve exponent assignments\n    nverts = n\n    exponents = [defaultdict(int) for _ in range(n)]  # per vertex dict p->exp\n    for p, elist in edges_by_prime.items():\n        # build adjacency per vertex\n        adj = defaultdict(list)\n        nodes = set()\n        for (u,v,eg,el) in elist:\n            adj[u].append((v,eg,el))\n            adj[v].append((u,eg,el))\n            nodes.add(u); nodes.add(v)\n        # domain per node: union of incident edge values\n        domain = {}\n        for node in nodes:\n            s = set()\n            for (nei,eg,el) in adj[node]:\n                s.add(eg); s.add(el)\n            domain[node]=s\n        assigned = {}\n        # initial forced from edges where eg==el\n        q = deque()\n        for (u,v,eg,el) in elist:\n            if eg==el:\n                # both must be eg\n                if u in assigned:\n                    if assigned[u]!=eg:\n                        print(\"NO\"); return\n                else:\n                    assigned[u]=eg\n                    q.append(u)\n                if v in assigned:\n                    if assigned[v]!=eg:\n                        print(\"NO\"); return\n                else:\n                    assigned[v]=eg\n                    q.append(v)\n        # propagate forced assignments\n        while q:\n            x = q.popleft()\n            ex_x = assigned[x]\n            # check domain\n            if ex_x not in domain.get(x, {ex_x}):\n                print(\"NO\"); return\n            for (y,eg,el) in adj[x]:\n                # edge requires values in {eg,el} and different if eg<el\n                if ex_x!=eg and ex_x!=el:\n                    print(\"NO\"); return\n                need = el if ex_x==eg else eg\n                if y in assigned:\n                    if assigned[y]!=need:\n                        print(\"NO\"); return\n                else:\n                    assigned[y]=need\n                    q.append(y)\n        # process remaining components\n        unvisited = set(nodes) - set(assigned.keys())\n        while unvisited:\n            start = unvisited.pop()\n            # try each possible start value from domain[start]\n            dom = domain[start]\n            success = False\n            for val in dom:\n                temp_assign = {start: val}\n                dq = deque([start])\n                ok = True\n                touched = [start]\n                while dq and ok:\n                    x = dq.popleft()\n                    ex_x = temp_assign[x]\n                    if ex_x not in domain.get(x, {ex_x}):\n                        ok = False; break\n                    for (y,eg,el) in adj[x]:\n                        if ex_x!=eg and ex_x!=el:\n                            ok = False; break\n                        need = el if ex_x==eg else eg\n                        if y in temp_assign:\n                            if temp_assign[y]!=need:\n                                ok = False; break\n                        elif y in assigned:\n                            if assigned[y]!=need:\n                                ok = False; break\n                        else:\n                            temp_assign[y]=need\n                            dq.append(y)\n                            touched.append(y)\n                if ok:\n                    # commit\n                    for k,vv in temp_assign.items():\n                        assigned[k]=vv\n                        if k in unvisited:\n                            unvisited.remove(k)\n                    success = True\n                    break\n                # else try next val\n            if not success:\n                print(\"NO\"); return\n        # assign computed exponents into global exponents\n        for node,exp in assigned.items():\n            if exp>0:\n                exponents[node][p]=exp\n    # build final numbers\n    a = [1]*n\n    for i in range(n):\n        val = 1\n        for p,exp in exponents[i].items():\n            val *= pow(p, exp)\n        a[i]=val\n    # verify all edges match gcd and lcm\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(a[u], a[v])\n        luv = (a[u]//guv) * a[v]\n        if guv!=g or luv!=l:\n            print(\"NO\")\n            return\n    # success\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\ndef factor_with_spf(x, spf):\n    res = {}\n    while x>1:\n        p = spf[x]\n        c = 0\n        while x%p==0:\n            x//=p\n            c+=1\n        res[p]=c\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    maxval = 10**6\n    spf = sieve_spf(maxval)\n    for _ in range(m):\n        u = int(next(it))-1\n        v = int(next(it))-1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # Preliminary checks and build per-prime edge info\n    edges_by_prime = defaultdict(list)  # p -> list of (u,v,eg,el)\n    for idx,(u,v,g,l) in enumerate(edges):\n        if l % g != 0:\n            print(\"NO\")\n            return\n        fg = factor_with_spf(g, spf) if g>1 else {}\n        fl = factor_with_spf(l, spf) if l>1 else {}\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p,0)\n            el = fl.get(p,0)\n            if eg > el:\n                print(\"NO\")\n                return\n            if eg==0 and el==0:\n                continue\n            edges_by_prime[p].append((u,v,eg,el))\n    # For each prime, solve exponent assignments\n    nverts = n\n    exponents = [defaultdict(int) for _ in range(n)]  # per vertex dict p->exp\n    for p, elist in edges_by_prime.items():\n        # build adjacency per vertex\n        adj = defaultdict(list)\n        nodes = set()\n        for (u,v,eg,el) in elist:\n            adj[u].append((v,eg,el))\n            adj[v].append((u,eg,el))\n            nodes.add(u); nodes.add(v)\n        # domain per node: union of incident edge values\n        domain = {}\n        for node in nodes:\n            s = set()\n            for (nei,eg,el) in adj[node]:\n                s.add(eg); s.add(el)\n            domain[node]=s\n        assigned = {}\n        # initial forced from edges where eg==el\n        q = deque()\n        for (u,v,eg,el) in elist:\n            if eg==el:\n                # both must be eg\n                if u in assigned:\n                    if assigned[u]!=eg:\n                        print(\"NO\"); return\n                else:\n                    assigned[u]=eg\n                    q.append(u)\n                if v in assigned:\n                    if assigned[v]!=eg:\n                        print(\"NO\"); return\n                else:\n                    assigned[v]=eg\n                    q.append(v)\n        # propagate forced assignments\n        while q:\n            x = q.popleft()\n            ex_x = assigned[x]\n            # check domain\n            if ex_x not in domain.get(x, {ex_x}):\n                print(\"NO\"); return\n            for (y,eg,el) in adj[x]:\n                # edge requires values in {eg,el} and different if eg<el\n                if ex_x!=eg and ex_x!=el:\n                    print(\"NO\"); return\n                need = el if ex_x==eg else eg\n                if y in assigned:\n                    if assigned[y]!=need:\n                        print(\"NO\"); return\n                else:\n                    assigned[y]=need\n                    q.append(y)\n        # process remaining components\n        unvisited = set(nodes) - set(assigned.keys())\n        while unvisited:\n            start = unvisited.pop()\n            # try each possible start value from domain[start]\n            dom = domain[start]\n            success = False\n            for val in dom:\n                temp_assign = {start: val}\n                dq = deque([start])\n                ok = True\n                touched = [start]\n                while dq and ok:\n                    x = dq.popleft()\n                    ex_x = temp_assign[x]\n                    if ex_x not in domain.get(x, {ex_x}):\n                        ok = False; break\n                    for (y,eg,el) in adj[x]:\n                        if ex_x!=eg and ex_x!=el:\n                            ok = False; break\n                        need = el if ex_x==eg else eg\n                        if y in temp_assign:\n                            if temp_assign[y]!=need:\n                                ok = False; break\n                        elif y in assigned:\n                            if assigned[y]!=need:\n                                ok = False; break\n                        else:\n                            temp_assign[y]=need\n                            dq.append(y)\n                            touched.append(y)\n                if ok:\n                    # commit\n                    for k,vv in temp_assign.items():\n                        assigned[k]=vv\n                        if k in unvisited:\n                            unvisited.remove(k)\n                    success = True\n                    break\n                # else try next val\n            if not success:\n                print(\"NO\"); return\n        # assign computed exponents into global exponents\n        for node,exp in assigned.items():\n            if exp>0:\n                exponents[node][p]=exp\n    # build final numbers\n    a = [1]*n\n    for i in range(n):\n        val = 1\n        for p,exp in exponents[i].items():\n            val *= pow(p, exp)\n        a[i]=val\n    # verify all edges match gcd and lcm\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(a[u], a[v])\n        luv = (a[u]//guv) * a[v]\n        if guv!=g or luv!=l:\n            print(\"NO\")\n            return\n    # success\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 6119,
        "thoughts_token_count": 4736
    }
}