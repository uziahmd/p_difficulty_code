{
    "start": 1758284936.4254243,
    "end": 1758284953.0773737,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Analyzing CF Problem \"Find Maximum\"**\n\nI'm thinking through the problem \"Find Maximum\" (276A). The goal seems to be to choose x, which is less than or equal to m, while maximizing the sum of a_i multiplied by bit(i). The number m is given as a binary string, and it translates to a sum using its bits. The process involves evaluating bits and using a greedy method; if a bit is 1, I can adjust it to maximize the sum while calculating results through dynamic programming. I need to iterate and compute prefix sums effectively.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nidx = 0\nouts = []\nwhile idx < len(data):\n    n = int(data[idx]); idx += 1\n    a = list(map(int, data[idx:idx+n])); idx += n\n    s = data[idx]; idx += 1\n    # s[0] is least significant bit\n    prefix = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix[i] = prefix[i-1] + a[i-1]\n    cur = 0\n    ans = 0\n    for i in range(n-1, -1, -1):\n        if s[i] == '1':\n            # set this bit to 0 and all lower bits to 1\n            candidate = cur + prefix[i]\n            if candidate > ans:\n                ans = candidate\n            cur += a[i]\n    if cur > ans:\n        ans = cur\n    outs.append(str(ans))\n\nsys.stdout.write(\"\\n\".join(outs))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nidx = 0\nouts = []\nwhile idx < len(data):\n    n = int(data[idx]); idx += 1\n    a = list(map(int, data[idx:idx+n])); idx += n\n    s = data[idx]; idx += 1\n    # s[0] is least significant bit\n    prefix = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix[i] = prefix[i-1] + a[i-1]\n    cur = 0\n    ans = 0\n    for i in range(n-1, -1, -1):\n        if s[i] == '1':\n            # set this bit to 0 and all lower bits to 1\n            candidate = cur + prefix[i]\n            if candidate > ans:\n                ans = candidate\n            cur += a[i]\n    if cur > ans:\n        ans = cur\n    outs.append(str(ans))\n\nsys.stdout.write(\"\\n\".join(outs))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 523,
        "completion_token_count": 943,
        "thoughts_token_count": 704
    }
}