{
    "start": 1758290719.7441807,
    "end": 1758290823.3659768,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Building constraint equations**\n\nI'm thinking about building a system of equations based on the constraints of minimum and maximum values for each prime p. For each node v in the graph, the exponent ev has to fit within the bounds set by the incident edges. This means that for every edge (u,v), I can derive pairs of allowed values. If the minimum is equal to the maximum, both values can be the same, but if they differ, I need to keep track of this consistency across all incident edges.",
    "response": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef input():\n    return sys.stdin.readline()\n\nMAXV = 10**6\n\ndef spf_sieve(n):\n    spf = list(range(n+1))\n    spf[0] = 0\n    if n >= 1:\n        spf[1] = 1\n    p = 2\n    while p*p <= n:\n        if spf[p] == p:\n            for q in range(p*p, n+1, p):\n                if spf[q] == q:\n                    spf[q] = p\n        p += 1\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        if p == 1:\n            break\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxval = 1\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n    if maxval < 1: maxval = 1\n    spf = spf_sieve(maxval)\n    # Validate and build prime->edge list\n    prime_edges = defaultdict(list)  # p -> list of (u,v,eg,el)\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p, 0)\n            el = fl.get(p, 0)\n            if eg > el:\n                print(\"NO\")\n                return\n            prime_edges[p].append((u, v, eg, el))\n    # For each prime, determine exponent per node\n    per_prime_assign = {}  # p -> dict node->exp\n    for p, pedges in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_involved = set()\n        for (u,v,eg,el) in pedges:\n            adj[u].append((v,eg,el))\n            adj[v].append((u,eg,el))\n            nodes_involved.add(u); nodes_involved.add(v)\n        assign = {node: None for node in nodes_involved}\n        q = deque()\n        # initial forced from edges with eg==el\n        for (u,v,eg,el) in pedges:\n            if eg == el:\n                # both must be eg\n                if assign[u] is None:\n                    assign[u] = eg\n                    q.append(u)\n                elif assign[u] != eg:\n                    print(\"NO\"); return\n                if assign[v] is None:\n                    assign[v] = eg\n                    q.append(v)\n                elif assign[v] != eg:\n                    print(\"NO\"); return\n        # propagate forced\n        while q:\n            u = q.popleft()\n            au = assign[u]\n            for (v,eg,el) in adj[u]:\n                # required for v depends on au\n                if au == eg:\n                    need = el\n                elif au == el:\n                    need = eg\n                else:\n                    print(\"NO\"); return\n                if assign[v] is None:\n                    assign[v] = need\n                    q.append(v)\n                elif assign[v] != need:\n                    print(\"NO\"); return\n        # process remaining components\n        visited = set()\n        for node in nodes_involved:\n            if assign[node] is not None:\n                visited.add(node)\n        for node in nodes_involved:\n            if node in visited:\n                continue\n            # collect component nodes via BFS\n            comp_nodes = []\n            dq = deque([node])\n            visited.add(node)\n            while dq:\n                x = dq.popleft()\n                comp_nodes.append(x)\n                for (y,_,_) in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        dq.append(y)\n            # try to assign this component: pick a start and try candidate values\n            s = comp_nodes[0]\n            # candidate values are exponents that appear on edges incident to s\n            cand_set = set()\n            for (y,eg,el) in adj[s]:\n                cand_set.add(eg); cand_set.add(el)\n            success = False\n            for cand in cand_set:\n                # temp assign dict for nodes in component (copy current global assign which here are None)\n                temp = {}\n                bad = False\n                queue = deque()\n                temp[s] = cand\n                queue.append(s)\n                while queue and not bad:\n                    u = queue.popleft()\n                    au = temp[u]\n                    for (v,eg,el) in adj[u]:\n                        # determine needed for v\n                        if au == eg:\n                            need = el\n                        elif au == el:\n                            need = eg\n                        else:\n                            bad = True\n                            break\n                        # if v has global assign already (should not in this comp though), ensure match\n                        if assign.get(v) is not None:\n                            if assign[v] != need:\n                                bad = True\n                                break\n                            else:\n                                continue\n                        if v in temp:\n                            if temp[v] != need:\n                                bad = True\n                                break\n                        else:\n                            temp[v] = need\n                            queue.append(v)\n                if not bad:\n                    # commit temp to assign\n                    for k,vv in temp.items():\n                        assign[k] = vv\n                    success = True\n                    break\n            if not success:\n                print(\"NO\"); return\n        per_prime_assign[p] = assign\n    # Now build final numbers\n    a = [1]*n\n    for p, assign in per_prime_assign.items():\n        for node, exp in assign.items():\n            if exp:\n                a[node] *= pow(p, exp)\n    # Validate all edges satisfy gcd and lcm\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(a[u], a[v])\n        luv = a[u]//guv * a[v]\n        if guv != g or luv != l:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef input():\n    return sys.stdin.readline()\n\nMAXV = 10**6\n\ndef spf_sieve(n):\n    spf = list(range(n+1))\n    spf[0] = 0\n    if n >= 1:\n        spf[1] = 1\n    p = 2\n    while p*p <= n:\n        if spf[p] == p:\n            for q in range(p*p, n+1, p):\n                if spf[q] == q:\n                    spf[q] = p\n        p += 1\n    return spf\n\ndef factorize(x, spf):\n    res = {}\n    while x > 1:\n        p = spf[x]\n        if p == 1:\n            break\n        cnt = 0\n        while x % p == 0:\n            x //= p\n            cnt += 1\n        res[p] = cnt\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = []\n    maxval = 1\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        if g > maxval: maxval = g\n        if l > maxval: maxval = l\n    if maxval < 1: maxval = 1\n    spf = spf_sieve(maxval)\n    # Validate and build prime->edge list\n    prime_edges = defaultdict(list)  # p -> list of (u,v,eg,el)\n    for (u,v,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n        fg = factorize(g, spf)\n        fl = factorize(l, spf)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            eg = fg.get(p, 0)\n            el = fl.get(p, 0)\n            if eg > el:\n                print(\"NO\")\n                return\n            prime_edges[p].append((u, v, eg, el))\n    # For each prime, determine exponent per node\n    per_prime_assign = {}  # p -> dict node->exp\n    for p, pedges in prime_edges.items():\n        adj = defaultdict(list)\n        nodes_involved = set()\n        for (u,v,eg,el) in pedges:\n            adj[u].append((v,eg,el))\n            adj[v].append((u,eg,el))\n            nodes_involved.add(u); nodes_involved.add(v)\n        assign = {node: None for node in nodes_involved}\n        q = deque()\n        # initial forced from edges with eg==el\n        for (u,v,eg,el) in pedges:\n            if eg == el:\n                # both must be eg\n                if assign[u] is None:\n                    assign[u] = eg\n                    q.append(u)\n                elif assign[u] != eg:\n                    print(\"NO\"); return\n                if assign[v] is None:\n                    assign[v] = eg\n                    q.append(v)\n                elif assign[v] != eg:\n                    print(\"NO\"); return\n        # propagate forced\n        while q:\n            u = q.popleft()\n            au = assign[u]\n            for (v,eg,el) in adj[u]:\n                # required for v depends on au\n                if au == eg:\n                    need = el\n                elif au == el:\n                    need = eg\n                else:\n                    print(\"NO\"); return\n                if assign[v] is None:\n                    assign[v] = need\n                    q.append(v)\n                elif assign[v] != need:\n                    print(\"NO\"); return\n        # process remaining components\n        visited = set()\n        for node in nodes_involved:\n            if assign[node] is not None:\n                visited.add(node)\n        for node in nodes_involved:\n            if node in visited:\n                continue\n            # collect component nodes via BFS\n            comp_nodes = []\n            dq = deque([node])\n            visited.add(node)\n            while dq:\n                x = dq.popleft()\n                comp_nodes.append(x)\n                for (y,_,_) in adj[x]:\n                    if y not in visited:\n                        visited.add(y)\n                        dq.append(y)\n            # try to assign this component: pick a start and try candidate values\n            s = comp_nodes[0]\n            # candidate values are exponents that appear on edges incident to s\n            cand_set = set()\n            for (y,eg,el) in adj[s]:\n                cand_set.add(eg); cand_set.add(el)\n            success = False\n            for cand in cand_set:\n                # temp assign dict for nodes in component (copy current global assign which here are None)\n                temp = {}\n                bad = False\n                queue = deque()\n                temp[s] = cand\n                queue.append(s)\n                while queue and not bad:\n                    u = queue.popleft()\n                    au = temp[u]\n                    for (v,eg,el) in adj[u]:\n                        # determine needed for v\n                        if au == eg:\n                            need = el\n                        elif au == el:\n                            need = eg\n                        else:\n                            bad = True\n                            break\n                        # if v has global assign already (should not in this comp though), ensure match\n                        if assign.get(v) is not None:\n                            if assign[v] != need:\n                                bad = True\n                                break\n                            else:\n                                continue\n                        if v in temp:\n                            if temp[v] != need:\n                                bad = True\n                                break\n                        else:\n                            temp[v] = need\n                            queue.append(v)\n                if not bad:\n                    # commit temp to assign\n                    for k,vv in temp.items():\n                        assign[k] = vv\n                    success = True\n                    break\n            if not success:\n                print(\"NO\"); return\n        per_prime_assign[p] = assign\n    # Now build final numbers\n    a = [1]*n\n    for p, assign in per_prime_assign.items():\n        for node, exp in assign.items():\n            if exp:\n                a[node] *= pow(p, exp)\n    # Validate all edges satisfy gcd and lcm\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(a[u], a[v])\n        luv = a[u]//guv * a[v]\n        if guv != g or luv != l:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 5439,
        "thoughts_token_count": 3968
    }
}