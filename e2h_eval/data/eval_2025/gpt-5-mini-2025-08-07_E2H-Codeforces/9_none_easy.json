{
    "start": 1758094586.7087886,
    "end": 1758094603.8327248,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# Input may contain multiple testcases in format shown in prompt examples: concatenated cases.\n# We'll parse until exhausted: each case starts with n m then n pairs.\nwhile True:\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        break\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        wi = int(next(it)); ci = int(next(it))\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    # prefix sums\n    pref1 = [0]\n    for v in w1:\n        pref1.append(pref1[-1]+v)\n    pref2 = [0]\n    for v in w2:\n        pref2.append(pref2[-1]+v)\n    pref3 = [0]\n    for v in w3:\n        pref3.append(pref3[-1]+v)\n    best = 0\n    # try number of weight-3 items k\n    max_k = min(len(w3), m//3)\n    # For each k, remaining capacity R = m - 3k, we can pick 2s and 1s optimally.\n    # Precompute best values for capacity up to m using 1s and 2s: but simpler iterate k and then compute best using greedy: try t2 count from 0..min(len(w2), R//2) but that could be large. Instead precompute for number of weight-2 items j, value pref2[j] and weight 2j. For given R, best is max over j with 2j<=R of pref2[j] + pref1[min(len(w1), R-2j)].\n    # To speed up, for each possible number of weight-2 items j, we can consider j up to len(w2) which <= n. But overall max_k up to m/3 ~1e5, and len(w2) up to 1e5 gives O(n^2) worst-case. Better approach: precompute best_for_weight[r] for r from 0..m using combination of 1s and 2s via DP-like greedy building.\n    # We'll build dp[r] = max cost with total weight exactly r using only weight1 and weight2; then for each r take max over <=r. But m up to 3e5 acceptable.\n    # Initialize dp with -inf\n    INF_NEG = -10**30\n    dp = [INF_NEG] * (m+1)\n    dp[0] = 0\n    # add weight-1 items one by one (0/1 knapsack but items count large; we can process by adding each item: for weight 1 iterate r from m down to1)\n    for val in w1:\n        for r in range(m, 0, -1):\n            prev = dp[r-1] + val\n            if prev > dp[r]:\n                dp[r] = prev\n    # add weight-2 items\n    for val in w2:\n        for r in range(m, 1, -1):\n            prev = dp[r-2] + val\n            if prev > dp[r]:\n                dp[r] = prev\n    # make dp_max[r] = max dp[t] for t<=r (or 0 if none)\n    dp_max = [0]*(m+1)\n    cur_max = 0\n    for r in range(0, m+1):\n        if dp[r] > cur_max:\n            cur_max = dp[r]\n        dp_max[r] = cur_max\n    # now iterate k\n    for k in range(0, max_k+1):\n        val3 = pref3[k]\n        rem = m - 3*k\n        total = val3 + dp_max[rem]\n        if total > best:\n            best = total\n    out_lines.append(str(best))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nout_lines = []\n# Input may contain multiple testcases in format shown in prompt examples: concatenated cases.\n# We'll parse until exhausted: each case starts with n m then n pairs.\nwhile True:\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        break\n    w1 = []\n    w2 = []\n    w3 = []\n    for _ in range(n):\n        wi = int(next(it)); ci = int(next(it))\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    # prefix sums\n    pref1 = [0]\n    for v in w1:\n        pref1.append(pref1[-1]+v)\n    pref2 = [0]\n    for v in w2:\n        pref2.append(pref2[-1]+v)\n    pref3 = [0]\n    for v in w3:\n        pref3.append(pref3[-1]+v)\n    best = 0\n    # try number of weight-3 items k\n    max_k = min(len(w3), m//3)\n    # For each k, remaining capacity R = m - 3k, we can pick 2s and 1s optimally.\n    # Precompute best values for capacity up to m using 1s and 2s: but simpler iterate k and then compute best using greedy: try t2 count from 0..min(len(w2), R//2) but that could be large. Instead precompute for number of weight-2 items j, value pref2[j] and weight 2j. For given R, best is max over j with 2j<=R of pref2[j] + pref1[min(len(w1), R-2j)].\n    # To speed up, for each possible number of weight-2 items j, we can consider j up to len(w2) which <= n. But overall max_k up to m/3 ~1e5, and len(w2) up to 1e5 gives O(n^2) worst-case. Better approach: precompute best_for_weight[r] for r from 0..m using combination of 1s and 2s via DP-like greedy building.\n    # We'll build dp[r] = max cost with total weight exactly r using only weight1 and weight2; then for each r take max over <=r. But m up to 3e5 acceptable.\n    # Initialize dp with -inf\n    INF_NEG = -10**30\n    dp = [INF_NEG] * (m+1)\n    dp[0] = 0\n    # add weight-1 items one by one (0/1 knapsack but items count large; we can process by adding each item: for weight 1 iterate r from m down to1)\n    for val in w1:\n        for r in range(m, 0, -1):\n            prev = dp[r-1] + val\n            if prev > dp[r]:\n                dp[r] = prev\n    # add weight-2 items\n    for val in w2:\n        for r in range(m, 1, -1):\n            prev = dp[r-2] + val\n            if prev > dp[r]:\n                dp[r] = prev\n    # make dp_max[r] = max dp[t] for t<=r (or 0 if none)\n    dp_max = [0]*(m+1)\n    cur_max = 0\n    for r in range(0, m+1):\n        if dp[r] > cur_max:\n            cur_max = dp[r]\n        dp_max[r] = cur_max\n    # now iterate k\n    for k in range(0, max_k+1):\n        val3 = pref3[k]\n        rem = m - 3*k\n        total = val3 + dp_max[rem]\n        if total > best:\n            best = total\n    out_lines.append(str(best))\n\nsys.stdout.write(\"\\n\".join(out_lines))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 913,
        "thoughts_token_count": 0
    }
}