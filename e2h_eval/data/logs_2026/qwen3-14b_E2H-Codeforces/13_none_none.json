{
    "start": 1757842767.600984,
    "end": 1757842778.100251,
    "start-formatted": "2025-09-14 18:39 KST",
    "end-formatted": "2025-09-14 18:39 KST",
    "gpu": 2,
    "pid": 13,
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    cases = list(map(int, data[1:t+1]))\n    \n    def is_snowflake(n):\n        if n == 1:\n            return False\n        # Check if n can be represented as (k^d - 1) // (k - 1) for some k > 1 and d >= 2\n        # We iterate over possible depths d from 2 to log2(n) + 1\n        max_depth = int(math.log(n, 2)) + 2\n        for d in range(2, max_depth + 1):\n            # Try to find k such that (k^d - 1) // (k - 1) == n\n            low = 2\n            high = int(n ** (1.0 / (d - 1))) + 2\n            while low <= high:\n                mid = (low + high) // 2\n                total = 1\n                for _ in range(d):\n                    total = total * mid + 1\n                if total == n:\n                    return True\n                elif total < n:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        return False\n    \n    results = []\n    for n in cases:\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    cases = list(map(int, data[1:t+1]))\n    \n    def is_snowflake(n):\n        if n == 1:\n            return False\n        # Check if n can be represented as (k^d - 1) // (k - 1) for some k > 1 and d >= 2\n        # We iterate over possible depths d from 2 to log2(n) + 1\n        max_depth = int(math.log(n, 2)) + 2\n        for d in range(2, max_depth + 1):\n            # Try to find k such that (k^d - 1) // (k - 1) == n\n            low = 2\n            high = int(n ** (1.0 / (d - 1))) + 2\n            while low <= high:\n                mid = (low + high) // 2\n                total = 1\n                for _ in range(d):\n                    total = total * mid + 1\n                if total == n:\n                    return True\n                elif total < n:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        return False\n    \n    results = []\n    for n in cases:\n        if is_snowflake(n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 581,
        "completion_token_count": 336,
        "thoughts_token_count": 0
    }
}