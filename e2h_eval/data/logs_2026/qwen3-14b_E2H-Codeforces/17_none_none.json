{
    "start": 1757842746.1828723,
    "end": 1757842757.7983196,
    "start-formatted": "2025-09-14 18:39 KST",
    "end-formatted": "2025-09-14 18:39 KST",
    "gpu": 2,
    "pid": 17,
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    weight1 = []\n    weight2 = []\n    weight3 = []\n    \n    index = 2\n    for _ in range(n):\n        w = int(data[index])\n        c = int(data[index + 1])\n        index += 2\n        if w == 1:\n            weight1.append(c)\n        elif w == 2:\n            weight2.append(c)\n        else:\n            weight3.append(c)\n    \n    # Sort the lists in descending order of cost\n    weight1.sort(reverse=True)\n    weight2.sort(reverse=True)\n    weight3.sort(reverse=True)\n    \n    # Count how many of each weight we can take\n    count1 = len(weight1)\n    count2 = len(weight2)\n    count3 = len(weight3)\n    \n    # Try all possible combinations of weight3 items\n    # Since weight3 items are heavy (weight 3), we can try taking up to m // 3 of them\n    max_cost = 0\n    for i in range(min(count3, m // 3) + 1):\n        remaining_weight = m - i * 3\n        # Now use weight2 items\n        j = min(count2, remaining_weight // 2)\n        remaining_weight -= j * 2\n        # Now use weight1 items\n        k = min(count1, remaining_weight)\n        total_cost = sum(weight1[:k]) + sum(weight2[:j]) + sum(weight3[:i])\n        if total_cost > max_cost:\n            max_cost = total_cost\n    \n    print(max_cost)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    weight1 = []\n    weight2 = []\n    weight3 = []\n    \n    index = 2\n    for _ in range(n):\n        w = int(data[index])\n        c = int(data[index + 1])\n        index += 2\n        if w == 1:\n            weight1.append(c)\n        elif w == 2:\n            weight2.append(c)\n        else:\n            weight3.append(c)\n    \n    # Sort the lists in descending order of cost\n    weight1.sort(reverse=True)\n    weight2.sort(reverse=True)\n    weight3.sort(reverse=True)\n    \n    # Count how many of each weight we can take\n    count1 = len(weight1)\n    count2 = len(weight2)\n    count3 = len(weight3)\n    \n    # Try all possible combinations of weight3 items\n    # Since weight3 items are heavy (weight 3), we can try taking up to m // 3 of them\n    max_cost = 0\n    for i in range(min(count3, m // 3) + 1):\n        remaining_weight = m - i * 3\n        # Now use weight2 items\n        j = min(count2, remaining_weight // 2)\n        remaining_weight -= j * 2\n        # Now use weight1 items\n        k = min(count1, remaining_weight)\n        total_cost = sum(weight1[:k]) + sum(weight2[:j]) + sum(weight3[:i])\n        if total_cost > max_cost:\n            max_cost = total_cost\n    \n    print(max_cost)",
    "score": -1,
    "metadata": {
        "prompt_token_count": 501,
        "completion_token_count": 370,
        "thoughts_token_count": 0
    }
}