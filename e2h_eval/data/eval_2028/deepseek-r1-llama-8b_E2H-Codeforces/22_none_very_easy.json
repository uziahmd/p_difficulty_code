{
    "start": 1758292058.276352,
    "end": 1758292135.705312,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef count_successful_students():\n    # Read the number of students and subjects from the input\n    n, m = map(int, input().split())\n\n    # Initialize a dictionary to store the best marks for each subject\n    best_marks = {}\n\n    # Iterate over each student's gradebook\n    for _ in range(n):\n        # Read the gradebook for the current student\n        gradebook = input()\n\n        # Iterate over each subject in the gradebook\n        for j in range(m):\n            # Get the mark for the current subject\n            mark = int(gradebook[j])\n\n            # If the subject is not in the best_marks dictionary or the current mark is higher than the best mark\n            if j not in best_marks or mark > best_marks[j]:\n                # Update the best mark for the subject\n                best_marks[j] = mark\n\n    # Initialize a set to store the successful students\n    successful_students = set()\n\n    # Iterate over each student's gradebook again\n    for i in range(n):\n        # Initialize a flag to indicate if the student is successful\n        is_successful = False\n\n        # Iterate over each subject in the gradebook\n        for j in range(m):\n            # Get the mark for the current subject\n            mark = int(input()[j])\n\n            # If the current mark is equal to the best mark for the subject\n            if mark == best_marks[j]:\n                # Mark the student as successful\n                is_successful = True\n                break\n\n        # If the student is successful, add them to the set of successful students\n        if is_successful:\n            successful_students.add(i + 1)\n\n    # Return the number of successful students\n    return len(successful_students)\n\n\n# Test the function with the provided example inputs\nexample_inputs = [\n    ['3 3\\n223\\n232\\n112', '2'],\n    ['3 5\\n91728\\n11828\\n11111', '3']\n]\n\nfor example_input in example_inputs:\n    # Split the input into the problem description and the test case\n    problem_description, test_case = example_input\n\n    # Split the test case into the number of students and subjects and the gradebooks\n    num_students, num_subjects, *gradebooks = test_case.split('\\n')\n\n    # Replace the newline characters in the gradebooks with empty strings\n    gradebooks = [gb.replace('\\n', '') for gb in gradebooks]\n\n    # Join the gradebooks into a single string\n    gradebooks = '\\n'.join(gradebooks)\n\n    # Split the gradebooks into individual rows\n    gradebooks = gradebooks.split('\\n')\n\n    # Split the gradebooks into individual cells\n    gradebooks = [list(row) for row in gradebooks]\n\n    # Print the expected output\n    print('Expected output:', example_input[1])\n\n    # Set the input for the function\n    input_value = f'{num_students} {num_subjects}\\n' + '\\n'.join([''.join(row) for row in gradebooks])\n\n    # Set the original sys.stdin\n    import sys\n    original_stdin = sys.stdin\n\n    # Redirect the input to a StringIO object containing the input value\n    import io\n    import sys\n    sys.stdin = io.StringIO(input_value)\n\n    # Call the function\n    output = count_successful_students()\n\n    # Restore the original sys.stdin\n    sys.stdin = original_stdin\n\n    # Print the actual output\n    print('Actual output:', output)\n```\n\nThis script reads the input from the standard input, processes it according to the problem description, and prints the result to the standard output. The `count_successful_students` function is the main logic of the script, which counts the number of successful students in the group based on their grades. The script also includes test cases to verify that the function works correctly.",
    "ground_truth": "N/A",
    "extracted_answer": "def count_successful_students():\n    # Read the number of students and subjects from the input\n    n, m = map(int, input().split())\n\n    # Initialize a dictionary to store the best marks for each subject\n    best_marks = {}\n\n    # Iterate over each student's gradebook\n    for _ in range(n):\n        # Read the gradebook for the current student\n        gradebook = input()\n\n        # Iterate over each subject in the gradebook\n        for j in range(m):\n            # Get the mark for the current subject\n            mark = int(gradebook[j])\n\n            # If the subject is not in the best_marks dictionary or the current mark is higher than the best mark\n            if j not in best_marks or mark > best_marks[j]:\n                # Update the best mark for the subject\n                best_marks[j] = mark\n\n    # Initialize a set to store the successful students\n    successful_students = set()\n\n    # Iterate over each student's gradebook again\n    for i in range(n):\n        # Initialize a flag to indicate if the student is successful\n        is_successful = False\n\n        # Iterate over each subject in the gradebook\n        for j in range(m):\n            # Get the mark for the current subject\n            mark = int(input()[j])\n\n            # If the current mark is equal to the best mark for the subject\n            if mark == best_marks[j]:\n                # Mark the student as successful\n                is_successful = True\n                break\n\n        # If the student is successful, add them to the set of successful students\n        if is_successful:\n            successful_students.add(i + 1)\n\n    # Return the number of successful students\n    return len(successful_students)\n\n\n# Test the function with the provided example inputs\nexample_inputs = [\n    ['3 3\\n223\\n232\\n112', '2'],\n    ['3 5\\n91728\\n11828\\n11111', '3']\n]\n\nfor example_input in example_inputs:\n    # Split the input into the problem description and the test case\n    problem_description, test_case = example_input\n\n    # Split the test case into the number of students and subjects and the gradebooks\n    num_students, num_subjects, *gradebooks = test_case.split('\\n')\n\n    # Replace the newline characters in the gradebooks with empty strings\n    gradebooks = [gb.replace('\\n', '') for gb in gradebooks]\n\n    # Join the gradebooks into a single string\n    gradebooks = '\\n'.join(gradebooks)\n\n    # Split the gradebooks into individual rows\n    gradebooks = gradebooks.split('\\n')\n\n    # Split the gradebooks into individual cells\n    gradebooks = [list(row) for row in gradebooks]\n\n    # Print the expected output\n    print('Expected output:', example_input[1])\n\n    # Set the input for the function\n    input_value = f'{num_students} {num_subjects}\\n' + '\\n'.join([''.join(row) for row in gradebooks])\n\n    # Set the original sys.stdin\n    import sys\n    original_stdin = sys.stdin\n\n    # Redirect the input to a StringIO object containing the input value\n    import io\n    import sys\n    sys.stdin = io.StringIO(input_value)\n\n    # Call the function\n    output = count_successful_students()\n\n    # Restore the original sys.stdin\n    sys.stdin = original_stdin\n\n    # Print the actual output\n    print('Actual output:', output)",
    "score": -1,
    "metadata": {
        "prompt_token_count": 461,
        "completion_token_count": 798,
        "thoughts_token_count": 0
    }
}