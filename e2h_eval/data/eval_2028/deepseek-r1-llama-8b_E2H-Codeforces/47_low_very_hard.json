{
    "start": 1758278300.0655334,
    "end": 1758278933.9203424,
    "start-formatted": "2025-09-19 19:38 KST",
    "end-formatted": "2025-09-19 19:48 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is called \"Neko does Maths\" and the task is to find a non-negative integer k such that the least common multiple (LCM) of a+k and b+k is as small as possible. If there are multiple k's that give the same minimal LCM, I have to choose the smallest one.\n\nHmm. So, given two integers a and b, I need to compute this k. Let me think about how to approach this.\n\nFirst, let's understand the problem with some examples. Like the sample input: 6 and 10. When k=2, 6+2=8 and 10+2=12. The LCM is 24. But why is that the best? Let's see if other k's give a better result.\n\nFor k=0: 6 and 10. LCM is 30.\nk=1: 7 and 11, LCM is 77.\nk=2: 8 and 12, LCM 24.\nk=3: 9 and 13, LCM 117.\nSo yes, 24 is the smallest here.\n\nAnother sample is 5 and 10. Choosing k=0 gives 5 and 10, whose LCM is 10. Which is the smallest possible because any higher k would make them larger, but wait, maybe not. Let me check:\n\nk=0: 5 and 10 → LCM 10.\nk=1: 6 and 11 → LCM 66.\nk=2: 7 and 12 → LCM 84.\nSo yes, k=0 is best.\n\nWait, but what about when a and b are equal? Like a = b = x. Then, for any k, a+k = b+k = x +k. So their LCM is x+k. To minimize this, we should choose k=0, since any larger k would increase the value.\n\nSo, the first thing I notice is that when a == b, the answer is k=0.\n\nBut when a != b, things get more interesting.\n\nLet me think about the properties of LCM. Remember that LCM(a, b) = (a*b)/GCD(a,b). So, the LCM depends on the product of the two numbers and their GCD.\n\nIn our problem, the two numbers are a +k and b +k. So, their difference is (b +k) - (a +k) = b -a. So the difference between the two numbers remains constant regardless of k. Because when you add k to both, the difference doesn't change.\n\nWait, that's an important observation. So, the two numbers after adding k are (a +k) and (b +k), which differ by d = |a - b|. So, the problem reduces to finding two numbers with a fixed difference d, such that their LCM is minimized.\n\nSo, the key is to find two numbers m and n where m = a +k, n = b +k, and m - n = d, such that their LCM is as small as possible.\n\nWait, but m and n could be in any order. So, perhaps, without loss of generality, we can assume that m >=n, but since their difference is fixed, it's just a matter of choosing which is larger.\n\nSo, the problem is equivalent to finding two numbers m and n where m -n = d, and their LCM is minimized.\n\nSo, the problem becomes: given a fixed difference d, find m and n such that m = n +d, and LCM(n, m) is as small as possible.\n\nOur task is to find the n (and hence m) that minimizes the LCM.\n\nNow, the question is, how do we find such n?\n\nLet me consider that m = n +d. So, LCM(n, n +d) = (n*(n+d)) / GCD(n, n+d).\n\nBut since n and n+d's GCD is the same as the GCD of n and d. Because GCD(n, n+d) = GCD(n, d).\n\nLet me denote g = GCD(n, d). So, n can be written as g * x, where x is some integer, and x must divide d/g, because n and d have GCD g.\n\nWait, let me explain: Since g is the GCD of n and d, then n = g * x, and d = g * y, where x and y are coprime (since we divided out the GCD).\n\nSo, m = n +d = g(x + y).\n\nThe LCM of n and m is (n*m) / GCD(n, m). But since m = n +d, and n = g x, m = g(x +",
    "response": "To solve this problem, we need to find a non-negative integer \\( k \\) such that the least common multiple (LCM) of \\( a + k \\) and \\( b + k \\) is minimized. If there are multiple values of \\( k \\) that yield the same minimal LCM, we should choose the smallest \\( k \\).\n\n### Approach\n1. **Observation on Difference**: The difference between \\( a + k \\) and \\( b + k \\) remains constant as \\( |a - b| \\). Let's denote this difference as \\( d \\).\n2. **LCM Minimization**: For two numbers \\( m \\) and \\( n \\) with a fixed difference \\( d \\), the LCM can be minimized by finding the optimal values of \\( m \\) and \\( n \\) such that their GCD is maximized. This is because the LCM of two numbers is inversely related to their GCD.\n3. **Finding Optimal \\( k \\)**: We need to find \\( k \\) such that \\( a + k \\) and \\( b + k \\) have the highest possible GCD. This translates to finding the greatest common divisor (GCD) of \\( a \\) and \\( b \\) and adjusting \\( k \\) accordingly.\n\n### Solution Code\n```python\nimport math\n\ndef find_min_k(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    g = math.gcd(a, d)\n    x = a // g\n    y = d // g\n    # Find k such that (a +k) = g * m, (b +k) = g * (m - y)\n    # So, a +k = g * m => k = g*m - a\n    # Also, since (a +k) must be divisible by g, k = (g - (a % g)) % g\n    # Alternatively, find m such that m is the multiple of y, but I think the previous approach is better.\n    # Let's find the minimal m where m >= x and m % y == 0, then compute k.\n    # Wait, perhaps a better approach is to find the minimal m where m is a multiple of y.\n    # Because then, m must be chosen such that it's a multiple of y to maximize GCD.\n    # So, the minimal m is x', which is the smallest integer >= x such that x' is a multiple of y.\n    # Then, the optimal k is m * g - a.\n\n    # Wait, perhaps another way. Since n = g * x and m = g*(x + y), the LCM is g * x * (x + y).\n    # To minimize this, we need to minimize x*(x + y). Since y is fixed, we can find x as the smallest possible.\n    # Wait, but x has to be such that n = g*x is <= m = g*(x + y). Hmm, perhaps I'm complicating things.\n\n    # Maybe a better approach is to realize that the optimal k is (g - (a % g)) % g, but I'm not sure.\n\n    # Let's try another approach. Let's denote the optimal k as (g - (a % g)) % g. Let's test this.\n\n    # Wait, perhaps the correct approach is to find the value of k where a +k is divisible by g, which is the GCD of a and d.\n\n    # So, k = (g - (a % g)) % g. Because adding this k will make a +k divisible by g.\n\n    # Let's test this with the sample input.\n\n    # Sample 1: a=6, b=10. d=4. g = gcd(6,4)=2.\n    # k = (2 - (6 % 2)) %2 = (2-0)%2=0. But in the sample, k=2 is better. So this approach might not work.\n\n    # Hmm, perhaps I need to rethink.\n\n    # Another idea: The minimal LCM occurs when the two numbers are as close as possible. Because for a fixed difference, the product is minimized when the numbers are closest.\n\n    # But in the first sample, 8 and 12 have a product of 96, while other pairs like 7 and 11 have 77, which is smaller. Wait, but 77 is less than 96, but the LCM is 77, which is lower than 24? No, wait the sample says 24 is the minimal.\n\n    Wait, perhaps I'm getting confused here. Let me reevaluate.\n\n    The key insight is that the LCM of two numbers is minimized when their GCD is maximized. Because LCM(a,b) = a*b / GCD(a,b). So, to minimize the LCM, we need to maximize the GCD.\n\n    So, the problem reduces to finding the maximum possible GCD of (a +k) and (b +k). Since their difference is fixed, the GCD of (a +k) and (b +k) is the same as the GCD of a and d (where d is |a - b|).\n\n    Therefore, to maximize the GCD, we should find the largest possible divisor of d that also divides a. That divisor is the GCD of a and d.\n\n    Once we have this GCD, say g, we can set k such that a +k is a multiple of g. This ensures that both a +k and b +k are multiples of g, thereby maximizing their GCD.\n\n    So, the optimal k is (g - (a % g)) % g. This makes a +k a multiple of g.\n\n    Let me test this with the sample inputs.\n\n    Sample 1: a=6, b=10. d=4. GCD(6,4)=2. So g=2. a mod g is 0, so k=(2-0)%2=0. But the sample answer is 2. Wait, this doesn't match. So what's wrong?\n\n    Oh wait, when k=0: a+0=6, b+0=10. Their GCD is 2. So LCM is (6*10)/2=30. When k=2: a+2=8, b+2=12. GCD is 4. So LCM is (8*12)/4=24, which is smaller than 30. So why does the formula give k=0 instead of 2?\n\n    Because the formula gives the minimal k that makes a +k divisible by g, but in this case, choosing k=2 gives a larger GCD, leading to a smaller LCM.\n\n    So perhaps the initial approach is flawed. Let me rethink.\n\n    Perhaps the correct approach is to find all possible divisors of d and check which one, when added to a, gives the minimal LCM.\n\n    But given the constraints (a and b up to 1e9), we need an efficient method.\n\n    Another approach: Let's denote d = |a - b|. We can express the problem as finding the minimal LCM of two numbers m and n where m - n = d. \n\n    The LCM of m and n is (m*n) / GCD(m, n). Since m = n +d, the problem is to find n such that this expression is minimized.\n\n    Let g = GCD(n, d). Then n = g * x and d = g * y, where x and y are coprime. So m = g*(x + y).\n\n    The LCM becomes g * x * (x + y). To minimize this, we need to find the smallest x such that x and x + y are as small as possible, with x being a positive integer.\n\n    The minimal x is 1, but sometimes a larger x can lead to a smaller product due to the relationship between x and x + y.\n\n    However, since x and y are coprime, the minimal product x*(x + y) occurs when x is the smallest possible value that allows for a higher GCD.\n\n    This leads us to find the minimal k such that a +k is a multiple of g, which is the GCD of a and d. So the optimal k is (g - (a % g)) % g.\n\n    Wait, but in the first sample, this gives k=0, but the optimal k is 2. So this approach isn't giving the right result.\n\n    Hmm, perhaps the issue is that while making a +k a multiple of g increases the GCD, it's not the only factor affecting the LCM. Maybe the optimal solution requires a different approach.\n\n    Another Idea: The minimal LCM occurs when the two numbers are as close as possible. Since their difference is fixed, their sum is minimized when they are as close as possible. Thus, the minimal LCM would occur when a +k and b +k are as close as possible, but also have a high GCD.\n\n    So, perhaps we should find the minimal possible value of (a +k) and (b +k) such that their GCD is maximized.\n\n    Let's consider that after adding k, the two numbers are m and n, with m = a +k and n = b +k. We can express this as m = n + d, where d is the fixed difference.\n\n    The goal is to maximize GCD(m, n) because that directly affects the LCM in a multiplicative way.\n\n    Since GCD(m, n) = GCD(n, d), the maximum possible GCD is the GCD of n and d. Thus, to maximize this GCD, n should be a multiple of the GCD of d and a.\n\n    Wait, perhaps the correct approach is to find the largest possible divisor of d that also divides a. Let's denote this as g. Then, the optimal k is (g - (a % g)) % g. But as seen earlier, this may not always yield the correct result.\n\n    Alternatively, perhaps the optimal k is determined by finding the minimal k such that (a +k) is congruent to 0 modulo some divisor of d. \n\n    Given the time constraints, perhaps the correct approach is to compute the GCD of a and b, then find the minimal k that aligns a +k and b +k to have the highest possible GCD.\n\n    So, the steps would be:\n\n    1. Compute d = |a - b|.\n    2. Compute g = GCD(a, d).\n    3. Compute k = (g - (a % g)) % g.\n    4. Return k.\n\n    Let's test this with the sample inputs.\n\n    Sample 1: a=6, b=10. d=4. g=GCD(6,4)=2. a%g=0. k=(2-0)%2=0. But the optimal k is 2. So this approach doesn't work.\n\n    Hmm, so what's wrong here? It seems that the approach is not considering that sometimes a larger k might yield a higher GCD, thus leading to a smaller LCM.\n\n    Another Idea: Perhaps the optimal k is such that a +k and b +k share the largest possible divisor, which could be a divisor of d. So, we need to find all possible divisors of d, compute the corresponding k, and select the one that minimizes the LCM.\n\n    But this could be computationally expensive for large d.\n\n    Alternative Approach: Instead of checking all divisors, perhaps the optimal k is determined by the minimal value of (a +k) and (b +k) such that their GCD is maximized. This can be found by setting k to the value that makes a +k as close as possible to a multiple of the GCD of a and d.\n\n    Wait, perhaps the correct approach is to compute the minimal k such that (a +k) is divisible by the GCD of a and d. This ensures that the GCD is as large as possible, thereby minimizing the LCM.\n\n    So, let's implement this approach and see if it works for the samples.\n\n    Sample 1: a=6, b=10. d=4. g=2. a%g=0. So k=0. But the optimal k is 2. So this approach fails.\n\n    Wait, but when k=0: a+k=6, b+k=10. GCD is 2, LCM is 30.\n\n    When k=2: a+k=8, b+k=12. GCD is 4, LCM is 24, which is smaller.\n\n    So, the approach of setting k to make a +k divisible by g doesn't always give the optimal result.\n\n    Hmm, so perhaps the initial approach is incorrect, and we need a different method.\n\n    Let me think differently. Let's denote that for any k, the two numbers are a +k and b +k. Let's denote their GCD as g. Then, g must divide their difference, which is d. So, g must be a divisor of d.\n\n    Therefore, the maximum possible g is the largest divisor of d that also divides a. Because if g is a divisor of d, then a +k must also be a multiple of g.\n\n    So, the optimal g is the greatest common divisor of a and d, which is g = GCD(a, d).\n\n    Once we have g, the optimal k is (g - (a % g)) % g. This ensures that a +k is a multiple of g, and hence, so is b +k (since their difference is d, which is also a multiple of g).\n\n    However, as seen in the first sample, this approach gives k=0, which isn't the optimal solution. So, perhaps this approach isn't sufficient.\n\n    Wait, in the first sample, g=2. So, a +k must be a multiple of 2. The smallest k that satisfies this is 0, but a larger k could result in a higher g, which is a divisor of d but larger than g.\n\n    But wait, g is already the greatest common divisor of a and d. So, there can't be a larger divisor of d that also divides a. Therefore, the approach should be correct, but in the sample, it's not working.\n\n    Wait, perhaps I made a mistake in the sample analysis. Let's re-calculate:\n\n    For the first sample, a=6, b=10, d=4. g=2.\n\n    When k=0: a +k=6, b +k=10. GCD is 2, LCM is 30.\n\n    When k=2: a +k=8, b +k=12. GCD is 4, which is a divisor of d=4 but not a divisor of a=6. Wait, 8 and 12 have a GCD of 4, which is a divisor of d=4, but 4 does not divide 6. So, how is this possible?\n\n    Because 4 is a divisor of d, but not of a. So, in this case, the GCD of a +k and b +k can be a divisor of d that is larger than g, even though it doesn't divide a. So, the initial approach of setting k to make a +k a multiple of g may not capture all possibilities.\n\n    Therefore, the correct approach must consider all possible divisors of d, compute the corresponding k for each, and select the one that minimizes the LCM.\n\n    However, considering that d can be up to 1e9, enumerating all divisors of d is feasible because the number of divisors is at most around 1000 for 1e9.\n\n    So, the plan is:\n\n    1. Compute d = |a - b|.\n    2. Find all divisors of d.\n    3. For each divisor g of d, compute the minimal k such that (a +k) is a multiple of g.\n    4. For each such g, compute the LCM of (a +k) and (b +k).\n    5. Select the k that results in the smallest LCM. If multiple k's give the same LCM, choose the smallest one.\n\n    This approach ensures that we consider all possible g's that could maximize the GCD, leading to the minimal LCM.\n\n    Let's test this approach with the sample inputs.\n\n    Sample 1: a=6, b=10. d=4. Divisors of 4 are 1, 2, 4.\n\n    For each g:\n\n    - g=1: k = (1 - (6%1))%1=0. a +k=6, b +k=10. LCM=30.\n    - g=2: k=(2 - (6%2))%2=0. a +k=6, b +k=10. LCM=30.\n    - g=4: k=(4 - (6%4))%4 = (4-2)%4=2. a +k=8, b +k=12. LCM=24.\n\n    So, the minimal LCM is 24, achieved when g=4 and k=2.\n\n    Which matches the sample.\n\n    Another sample: a=5, b=10. d=5. Divisors are 1,5.\n\n    For g=1: k=0. a +k=5, b +k=10. LCM=10.\n    For g=5: k=(5 -5%5)=0. a +k=5, b +k=10. Same as above.\n\n    So, the minimal LCM is 10, achieved at k=0.\n\n    So, the approach works for these samples.\n\n    Now, let's think about how to implement this.\n\n    Steps:\n\n    1. Compute d = |a - b|.\n    2. Generate all divisors of d.\n    3. For each divisor g:\n        a. Compute the minimal k such that (a +k) is divisible by g. This is k = (g - (a % g)) % g.\n        b. Compute the corresponding m = a +k and n = b +k.\n        c. Compute the LCM of m and n.\n    4. Among all possible k's, choose the one with the smallest LCM. If multiple k's have the same minimal LCM, choose the smallest k.\n\n    Edge Cases:\n    - a == b: d=0. In this case, any k=0 gives the minimal LCM, which is a itself.\n    - a < b or a > b: handled by computing absolute difference.\n\n    Implementing this approach, we need to efficiently generate all divisors of d.\n\n    So, the code structure would be:\n\n    - Read a and b.\n    - If a == b, output 0.\n    - Else, compute d = abs(a - b).\n    - Generate all divisors of d.\n    - For each divisor g, compute k and the corresponding LCM.\n    - Track the minimal LCM and the corresponding k.\n    - Output the smallest k that achieves the minimal LCM.\n\n    Now, generating all divisors of d can be done by iterating up to sqrt(d) and collecting both i and d/i when d%i == 0.\n\n    Let's write a helper function to generate all divisors of a number.\n\n    Finally, among all the computed k's, select the one with the minimal LCM, and if there's a tie, pick the smallest k.\n\n### Solution Code\n```python\nimport math\n\ndef get_divisors(n):\n    divisors = set()\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return sorted(divisors)\n\ndef find_min_k(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    divisors = get_divisors(d)\n    min_lcm = float('inf')\n    best_k = 0\n    for g in divisors:\n        remainder = a % g\n        k = (g - remainder) % g\n        m = a + k\n        n = b + k\n        current_gcd = math.gcd(m, n)\n        current_lcm = (m * n) // current_gcd\n        if current_lcm < min_lcm or (current_lcm == min_lcm and k < best_k):\n            min_lcm = current_lcm\n            best_k = k\n    return best_k\n\n# Read input\na, b = map(int, input().split())\nprint(find_min_k(a, b))\n```\n\n### Explanation\nThe code reads two integers a and b, computes their difference, and finds all divisors of this difference. For each divisor, it calculates the optimal k that makes the sum of a and b plus k share this divisor, ensuring the highest possible GCD. It then computes the LCM for each k and selects the k that yields the smallest LCM, breaking ties by choosing the smallest k. This approach efficiently handles the problem constraints and ensures an optimal solution.",
    "ground_truth": "N/A",
    "extracted_answer": "### Explanation\nThe code reads two integers a and b, computes their difference, and finds all divisors of this difference. For each divisor, it calculates the optimal k that makes the sum of a and b plus k share this divisor, ensuring the highest possible GCD. It then computes the LCM for each k and selects the k that yields the smallest LCM, breaking ties by choosing the smallest k. This approach efficiently handles the problem constraints and ensures an optimal solution.",
    "score": -1,
    "metadata": {
        "prompt_token_count": 392,
        "completion_token_count": 4525,
        "thoughts_token_count": 1025
    }
}