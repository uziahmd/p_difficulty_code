{
    "start": 1758292125.7720037,
    "end": 1758292153.586581,
    "start-formatted": "2025-09-19 23:28 KST",
    "end-formatted": "2025-09-19 23:29 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef solve():\n    n = read_int()\n    a = read_ints()\n    m_str = sys.stdin.readline().strip()\n    m = 0\n    for i, c in enumerate(reversed(m_str)):\n        if c == '1':\n            m += 2 ** i\n    max_val = 0\n    for i in range(n):\n        max_val += a[i] * (2 ** i)\n    ans = max_val\n    for i in range(n):\n        if m & (1 << i):\n            max_val -= a[i]\n        else:\n            max_val += a[i]\n        ans = max(ans, max_val)\n    print(ans)\n\nif __name__ == \"__main__\":\n    t = 1\n    while t > 0:\n        solve()\n        t -= 1\n```\n\nThis script reads the input from standard input and prints the output to standard output. It first reads the number of elements `n`, then reads the array elements `a`, and finally reads the binary representation of `m`. It calculates the maximum value of `f(x)` among all `x` that satisfy the given inequality and prints it as the output. The script uses a while loop to handle multiple test cases.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef solve():\n    n = read_int()\n    a = read_ints()\n    m_str = sys.stdin.readline().strip()\n    m = 0\n    for i, c in enumerate(reversed(m_str)):\n        if c == '1':\n            m += 2 ** i\n    max_val = 0\n    for i in range(n):\n        max_val += a[i] * (2 ** i)\n    ans = max_val\n    for i in range(n):\n        if m & (1 << i):\n            max_val -= a[i]\n        else:\n            max_val += a[i]\n        ans = max(ans, max_val)\n    print(ans)\n\nif __name__ == \"__main__\":\n    t = 1\n    while t > 0:\n        solve()\n        t -= 1",
    "score": 0,
    "metadata": {
        "prompt_token_count": 544,
        "completion_token_count": 288,
        "thoughts_token_count": 0
    }
}