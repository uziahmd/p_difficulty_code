{
    "start": 1758292148.5355122,
    "end": 1758292186.9211965,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:29 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef find_maximum(n, a, m):\n    \"\"\"\n    Find the maximum of function f(x) among all x, for which an inequality holds: 0 <= x <= m.\n\n    Args:\n        n (int): The number of array elements.\n        a (list): Elements of array a.\n        m (int): The binary representation of number m.\n\n    Returns:\n        int: The maximum value of function f(x).\n    \"\"\"\n\n    # Convert m to binary and remove the '0b' prefix\n    m_bin = bin(m)[2:]\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate over all possible subsets of the binary representation of m\n    for i in range(1 << n):\n        # Initialize the sum for the current subset\n        subset_sum = 0\n        \n        # Iterate over the bits of the current subset\n        for j in range(n):\n            # If the j-th bit is 1, add a_j to the sum\n            if (i >> j) & 1:\n                subset_sum += a[j]\n        \n        # If the binary representation of the current subset is less than or equal to m_bin,\n        # update the maximum value\n        if bin(i).zfill(n)[::-1] <= m_bin:\n            max_value = max(max_value, subset_sum)\n    \n    return max_value\n\n\n# Read the input\nn = int(input())\na = list(map(int, input().split()))\nm = int(input(), 2)\n\n# Print the result\nprint(find_maximum(n, a, m))\n```\n\nThis script reads the input from standard input, finds the maximum value of function f(x), and prints the result to standard output. It uses a brute-force approach to iterate over all possible subsets of the binary representation of m and calculates the sum for each subset. If the binary representation of the current subset is less than or equal to m_bin, it updates the maximum value. The time complexity of this solution is O(n * 2^n), where n is the number of array elements.",
    "ground_truth": "N/A",
    "extracted_answer": "def find_maximum(n, a, m):\n    \"\"\"\n    Find the maximum of function f(x) among all x, for which an inequality holds: 0 <= x <= m.\n\n    Args:\n        n (int): The number of array elements.\n        a (list): Elements of array a.\n        m (int): The binary representation of number m.\n\n    Returns:\n        int: The maximum value of function f(x).\n    \"\"\"\n\n    # Convert m to binary and remove the '0b' prefix\n    m_bin = bin(m)[2:]\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate over all possible subsets of the binary representation of m\n    for i in range(1 << n):\n        # Initialize the sum for the current subset\n        subset_sum = 0\n        \n        # Iterate over the bits of the current subset\n        for j in range(n):\n            # If the j-th bit is 1, add a_j to the sum\n            if (i >> j) & 1:\n                subset_sum += a[j]\n        \n        # If the binary representation of the current subset is less than or equal to m_bin,\n        # update the maximum value\n        if bin(i).zfill(n)[::-1] <= m_bin:\n            max_value = max(max_value, subset_sum)\n    \n    return max_value\n\n\n# Read the input\nn = int(input())\na = list(map(int, input().split()))\nm = int(input(), 2)\n\n# Print the result\nprint(find_maximum(n, a, m))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 552,
        "completion_token_count": 429,
        "thoughts_token_count": 0
    }
}