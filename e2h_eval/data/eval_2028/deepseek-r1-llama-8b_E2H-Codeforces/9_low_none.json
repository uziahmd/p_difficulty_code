{
    "start": 1758103881.0564492,
    "end": 1758104017.109376,
    "start-formatted": "2025-09-17 19:11 KST",
    "end-formatted": "2025-09-17 19:13 KST",
    "gpu": 2,
    "pid": 9,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is called \"Selling Souvenirs.\" Hmm, I need to find the maximum possible total cost of souvenirs that Petya can carry without exceeding the weight limit m.\n\nLet me read the problem statement carefully. Oh right, each souvenir has a weight wi and a cost ci. We need to select a subset where the total weight is <= m, and the total cost is as large as possible. So it's a classic knapsack problem but with some constraints.\n\nWait, looking at the input constraints: n can be up to 1e5 and m up to 3e5. Oh, that's a big n. So a standard dynamic programming approach with O(nm) time complexity is definitely out of the question because for n=1e5 and m=3e5, that would be 3e10 operations—way too slow.\n\nHmm, so I need a more efficient approach. What's special here? Oh, the weights are only 1, 2, or 3. That's a crucial point. So each item's weight is either 1, 2, or 3. That probably allows us to group items by their weight and process them in a way that's more efficient.\n\nSo let's think: since the weights are small, maybe we can count how many items there are for each weight category. Like, count the number of items with weight 1, 2, and 3. Then, for each of these groups, we can determine how many items to take, considering their costs.\n\nBut wait, just taking all items of higher weight might not be optimal because sometimes a lower weight item could have a higher cost per unit weight. For example, an item with weight 3 and cost 100 could be better than three items each with weight 1 and cost 33 each. But in reality, it's the same cost, but perhaps if one has a higher cost, like 99 for weight 3, then it's better to take it instead of three 33s.\n\nSo the key idea is to figure out, for each possible number of 1, 2, 3-weight items, the maximum cost we can get without exceeding the weight limit.\n\nAlternatively, we can model this as trying all possible combinations of taking up to a certain number of each weight type, ensuring the total weight doesn't exceed m, and find the combination that gives the maximum cost.\n\nSo let's break down the approach:\n\n1. Separate the items into three groups based on their weight (w=1, w=2, w=3).\n2. Sort each group in descending order of cost per weight. Wait, but since the weight is fixed, maybe sorting by cost and then processing in a way that takes the highest cost first.\n   Or perhaps, for each group, sort the items in descending order of cost, because we want to take the most valuable items first.\n3. For each group, compute the prefix sums of their costs. This way, for any number of items taken from that group, we can quickly know the total cost.\n4. Then, the problem reduces to finding the best combination of taking k1 items from group 1, k2 from group 2, and k3 from group3, such that 1*k1 + 2*k2 + 3*k3 <= m, and the sum of their prefix sums is maximized.\n\nBut even with this, the problem is how to efficiently find the optimal k1, k2, k3.\n\nLet me think about the steps:\n\n- First, process each group and sort the items in descending order of cost. Compute the prefix sum for each group. So for group 1, after sorting, the first element is the highest cost item, the second is next, etc. The prefix sum array will allow us to quickly calculate the total cost for taking the first k items.\n\nNow, the challenge is to find the maximum sum across all possible k1, k2, k3 where 1*k1 + 2*k2 +3*k3 <= m.\n\nBut n can be up to 1e5, and m up to 3e5. So enumerating all possible k1, k2, k3 is not feasible.\n\nAlternative approach: Since the weights are small, perhaps we can loop through possible k3 values, and for each, determine the maximum possible k2 and k1 that fit within the remaining weight.\n\nLet me outline this:\n\n- Precompute prefix sums for each group: s1[k] is the sum of the top k items of weight 1, s2[k] for weight 2, s3[k] for weight 3.\n\nThen, for each possible k3 (from 0 to max_possible given m), calculate the remaining weight: rem = m - 3*k3. If rem is negative, skip.\n\nFor the remaining rem,",
    "response": "To solve this problem, we need to determine the maximum possible total cost of souvenirs that Petya can carry without exceeding a given weight limit. The problem is a variation of the knapsack problem with specific constraints on the weights of the items.\n\n### Approach\n1. **Categorize Items by Weight**: Since each souvenir has a weight of either 1, 2, or 3, we can categorize the items into three groups based on their weights.\n2. **Sort and Compute Prefix Sums**: For each category (weight 1, 2, or 3), sort the items in descending order of their cost. Compute prefix sums for each sorted list. The prefix sum array will allow us to quickly determine the total cost of taking the top k items from each category.\n3. **Iterate Over Possible Combinations**: Given the small possible weights (1, 2, 3), we can efficiently iterate over possible numbers of each type of item (k1, k2, k3) such that the total weight does not exceed the limit m. For each combination, compute the total cost and keep track of the maximum cost encountered.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    idx = 0\n    n, m = int(input[idx]), int(input[idx+1])\n    idx += 2\n    \n    w = []\n    for _ in range(n):\n        wi = int(input[idx])\n        ci = int(input[idx+1])\n        w.append((wi, ci))\n        idx += 2\n    \n    # Separate items into groups by weight\n    group1 = []\n    group2 = []\n    group3 = []\n    for wi, ci in w:\n        if wi == 1:\n            group1.append(ci)\n        elif wi == 2:\n            group2.append(ci)\n        else:\n            group3.append(ci)\n    \n    # Sort each group in descending order and compute prefix sums\n    group1.sort(reverse=True)\n    group2.sort(reverse=True)\n    group3.sort(reverse=True)\n    \n    # Compute prefix sums for each group\n    prefix1 = [0]\n    for c in group1:\n        prefix1.append(prefix1[-1] + c)\n    \n    prefix2 = [0]\n    for c in group2:\n        prefix2.append(prefix2[-1] + c)\n    \n    prefix3 = [0]\n    for c in group3:\n        prefix3.append(prefix3[-1] + c)\n    \n    max_cost = 0\n    \n    # Iterate over possible k3 values\n    max_k3 = min(len(group3), m // 3)\n    for k3 in range(max_k3 + 1):\n        remaining = m - 3 * k3\n        if remaining < 0:\n            continue\n        \n        # Now find the best k2 for this k3\n        max_k2 = min(len(group2), remaining // 2)\n        best_k2 = 0\n        best_sum = 0\n        for k2 in range(max_k2 + 1):\n            if 2 * k2 > remaining:\n                break\n            current_sum = prefix2[k2] + prefix3[k3]\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_k2 = k2\n        if best_sum > max_cost:\n            max_cost = best_sum\n        \n        # Now find the best k1 for the remaining weight after k2 and k3\n        rem = remaining - 2 * best_k2\n        max_k1 = min(len(group1), rem)\n        current_sum = prefix2[best_k2] + prefix3[k3]\n        for k1 in range(max_k1 + 1):\n            if 1 * k1 > rem:\n                break\n            total = current_sum + prefix1[k1]\n            if total > max_cost:\n                max_cost = total\n    \n    print(max_cost)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Categorization**: The items are divided into three groups based on their weights (1, 2, 3).\n2. **Sorting and Prefix Sums**: Each group is sorted by cost in descending order, and prefix sums are computed to quickly get the total cost for the top k items.\n3. **Combination Iteration**: By iterating over possible numbers of each type of item, we ensure that we explore all feasible combinations within the weight limit, maximizing the total cost efficiently.\n\nThis approach leverages the small possible weights to efficiently explore all relevant combinations, ensuring the solution is both optimal and efficient.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().split()\n    idx = 0\n    n, m = int(input[idx]), int(input[idx+1])\n    idx += 2\n    \n    w = []\n    for _ in range(n):\n        wi = int(input[idx])\n        ci = int(input[idx+1])\n        w.append((wi, ci))\n        idx += 2\n    \n    # Separate items into groups by weight\n    group1 = []\n    group2 = []\n    group3 = []\n    for wi, ci in w:\n        if wi == 1:\n            group1.append(ci)\n        elif wi == 2:\n            group2.append(ci)\n        else:\n            group3.append(ci)\n    \n    # Sort each group in descending order and compute prefix sums\n    group1.sort(reverse=True)\n    group2.sort(reverse=True)\n    group3.sort(reverse=True)\n    \n    # Compute prefix sums for each group\n    prefix1 = [0]\n    for c in group1:\n        prefix1.append(prefix1[-1] + c)\n    \n    prefix2 = [0]\n    for c in group2:\n        prefix2.append(prefix2[-1] + c)\n    \n    prefix3 = [0]\n    for c in group3:\n        prefix3.append(prefix3[-1] + c)\n    \n    max_cost = 0\n    \n    # Iterate over possible k3 values\n    max_k3 = min(len(group3), m // 3)\n    for k3 in range(max_k3 + 1):\n        remaining = m - 3 * k3\n        if remaining < 0:\n            continue\n        \n        # Now find the best k2 for this k3\n        max_k2 = min(len(group2), remaining // 2)\n        best_k2 = 0\n        best_sum = 0\n        for k2 in range(max_k2 + 1):\n            if 2 * k2 > remaining:\n                break\n            current_sum = prefix2[k2] + prefix3[k3]\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_k2 = k2\n        if best_sum > max_cost:\n            max_cost = best_sum\n        \n        # Now find the best k1 for the remaining weight after k2 and k3\n        rem = remaining - 2 * best_k2\n        max_k1 = min(len(group1), rem)\n        current_sum = prefix2[best_k2] + prefix3[k3]\n        for k1 in range(max_k1 + 1):\n            if 1 * k1 > rem:\n                break\n            total = current_sum + prefix1[k1]\n            if total > max_cost:\n                max_cost = total\n    \n    print(max_cost)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 442,
        "completion_token_count": 965,
        "thoughts_token_count": 1025
    }
}