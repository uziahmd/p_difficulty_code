{
    "start": 1758292170.5132065,
    "end": 1758292212.0261474,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nfrom sys import stdin, stdout\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(edges):\n    n = max(max(edge[0], edge[1]) for edge in edges) + 1\n    count = [0] * n\n    adj = [[] for _ in range(n)]\n\n    for u, v, g, l in edges:\n        count[u] += 1\n        count[v] += 1\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    for i in range(1, n):\n        if count[i] != len(adj[i]):\n            return \"NO\"\n\n    visited = [False] * n\n    ans = [None] * n\n\n    def dfs(u):\n        visited[u] = True\n        for v, g, l in adj[u]:\n            if not visited[v]:\n                count[v] -= 1\n                if ans[v] is None:\n                    ans[v] = l // g\n                else:\n                    if ans[v] * g != l:\n                        return False\n                if not dfs(v):\n                    return False\n        return True\n\n    for i in range(1, n):\n        if ans[i] is None:\n            ans[i] = 1\n            if not dfs(i):\n                return \"NO\"\n\n    return \"YES\\n\" + ' '.join(map(str, ans))\n\nedges = []\nfor line in stdin.readlines()[1:]:\n    u, v, g, l = map(int, line.split())\n    edges.append((u, v, g, l))\n\nstdout.write(solve(edges))\n```\n\nThis script first reads the input from standard input and stores it in the `edges` list. It then defines a helper function `gcd` to calculate the greatest common divisor of two numbers and another helper function `lcm` to calculate the least common multiple of two numbers.\n\nThe `solve` function initializes the `count` array to keep track of the number of roads connected to each lawn and the `adj` list to store the adjacency list representation of the graph. It then iterates over the edges to populate the `count` and `adj` arrays.\n\nNext, it checks if the number of roads connected to each lawn matches the number of adjacent lawns in the graph. If not, it returns \"NO\".\n\nIt then initializes the `visited` array to keep track of visited lawns and the `ans` array to store the result. The `dfs` function is a recursive depth-first search function that explores the graph starting from a given lawn. It updates the `ans` array based on the LCM and GCD of the current lawn and its adjacent lawns.\n\nFinally, the script calls the `solve` function with the `edges` list as input and prints the result to standard output.",
    "ground_truth": "N/A",
    "extracted_answer": "from sys import stdin, stdout\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(edges):\n    n = max(max(edge[0], edge[1]) for edge in edges) + 1\n    count = [0] * n\n    adj = [[] for _ in range(n)]\n\n    for u, v, g, l in edges:\n        count[u] += 1\n        count[v] += 1\n        adj[u].append((v, g, l))\n        adj[v].append((u, g, l))\n\n    for i in range(1, n):\n        if count[i] != len(adj[i]):\n            return \"NO\"\n\n    visited = [False] * n\n    ans = [None] * n\n\n    def dfs(u):\n        visited[u] = True\n        for v, g, l in adj[u]:\n            if not visited[v]:\n                count[v] -= 1\n                if ans[v] is None:\n                    ans[v] = l // g\n                else:\n                    if ans[v] * g != l:\n                        return False\n                if not dfs(v):\n                    return False\n        return True\n\n    for i in range(1, n):\n        if ans[i] is None:\n            ans[i] = 1\n            if not dfs(i):\n                return \"NO\"\n\n    return \"YES\\n\" + ' '.join(map(str, ans))\n\nedges = []\nfor line in stdin.readlines()[1:]:\n    u, v, g, l = map(int, line.split())\n    edges.append((u, v, g, l))\n\nstdout.write(solve(edges))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 574,
        "completion_token_count": 620,
        "thoughts_token_count": 0
    }
}