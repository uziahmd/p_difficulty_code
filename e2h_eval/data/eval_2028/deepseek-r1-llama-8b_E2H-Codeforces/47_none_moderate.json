{
    "start": 1758292058.8946662,
    "end": 1758292093.0980482,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Compute the lowest common multiple of a and b\"\"\"\n    return a * b // gcd(a, b)\n\ndef solve():\n    \"\"\"Solve the problem\"\"\"\n    a, b = map(int, input().split())\n    k = 0\n    min_lcm = float('inf')\n    \n    for i in range(1000000):  # Assuming that the answer will not exceed 1,000,000\n        if gcd(a + i, b + i) == 1:\n            lcm_val = lcm(a + i, b + i)\n            if lcm_val < min_lcm:\n                min_lcm = lcm_val\n                k = i\n    \n    print(k)\n\nif __name__ == \"__main__\":\n    t = 1  # Number of test cases\n    for _ in range(t):\n        solve()\n```\n\nThis script first defines two helper functions `gcd` and `lcm` to compute the greatest common divisor and the lowest common multiple of two numbers, respectively. The `solve` function then reads the input, iterates over possible values of `k`, and finds the smallest value of `k` for which the greatest common divisor of `a + k` and `b + k` is 1. This means that `a + k` and `b + k` are coprime, so their least common multiple is simply their product, which is minimized when `k` is minimized. The script finally prints the smallest value of `k` that satisfies this condition.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Compute the lowest common multiple of a and b\"\"\"\n    return a * b // gcd(a, b)\n\ndef solve():\n    \"\"\"Solve the problem\"\"\"\n    a, b = map(int, input().split())\n    k = 0\n    min_lcm = float('inf')\n    \n    for i in range(1000000):  # Assuming that the answer will not exceed 1,000,000\n        if gcd(a + i, b + i) == 1:\n            lcm_val = lcm(a + i, b + i)\n            if lcm_val < min_lcm:\n                min_lcm = lcm_val\n                k = i\n    \n    print(k)\n\nif __name__ == \"__main__\":\n    t = 1  # Number of test cases\n    for _ in range(t):\n        solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 422,
        "completion_token_count": 360,
        "thoughts_token_count": 0
    }
}