{
    "start": 1758278110.905912,
    "end": 1758278279.7260456,
    "start-formatted": "2025-09-19 19:35 KST",
    "end-formatted": "2025-09-19 19:37 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. Hmm, the problem is about maximizing profit by building houses on a street with certain restrictions. \n\nAlright, let me read the problem statement carefully again. So, there are n spots on the street where each house can be built with a height between 0 and h. Each spot contributes a squared value equal to the height. But there are m restrictions. Each restriction says that in the range from l_i to r_i (inclusive), the tallest house must be at most x_i. My goal is to maximize the total profit.\n\nHmm. So, the constraints are that for each of the m ranges, the maximum height in that range doesn't exceed x_i. And I want each spot's height as high as possible to maximize the sum of squares.\n\nI think this is an optimization problem with constraints. Since n, h, m are up to 50, which is manageable, maybe I can model this with dynamic programming or some kind of backtracking approach.\n\nWait, but how do I handle the overlapping constraints? Because each spot might be part of multiple restrictions. So, the height of each spot is limited by all the restrictions that include it. So, for each spot i, the maximum allowed height is the minimum of all x_j where l_j <= i <= r_j, and also not exceeding h.\n\nWait, right! For each spot i, its maximum possible height is the minimum x_j across all restrictions that cover i, and then capped at h. Because any higher than that would violate at least one restriction.\n\nSo, first, I can precompute for each spot i, the maximum possible height it can have, given all the restrictions. Then, the problem reduces to selecting a height for each spot, within these maxima, such that the sum of squares is maximized.\n\nOh wait, no. Because if a spot is covered by multiple restrictions, each restricting it in some way, the maximum allowed height is the minimum of all x_j for those restrictions, because the tallest in that range can't exceed any x_j. So for each spot i, the maximum allowed height is min{x_j for all j where l_j <=i <=r_j} and h.\n\nBut wait, what about the global h? Because each spot's maximum is h, but the restrictions could further limit it. So yes, for each spot, the maximum height is the minimum between h and all x_j for the restrictions that cover it.\n\nSo the first step is: for each spot i, compute the maximum possible height it can have. Let's call this max_height[i]. Then, the problem is to assign a height a_i to each spot, where 0 <= a_i <= max_height[i], and the sum of a_i squared is as large as possible.\n\nThat's a much simpler problem. Because now, we just need to choose for each spot the highest possible a_i, but without any constraints except that each a_i is within their individual max_height.\n\nWait, but is that correct? Because the restrictions are about ranges. Oh, but the way I computed max_height[i] ensures that for each spot, it's the maximum allowed height considering all applicable restrictions. So, when I set a_i to max_height[i], all the restrictions that include i will be satisfied, because the maximum in each of their ranges is a_i, which is <= x_j.\n\nTherefore, the problem reduces to choosing, for each spot, the maximum possible a_i within their max_height[i], and the sum of squares is the sum of (a_i)^2.\n\nWait, but wait. Suppose two spots are in the same restriction. For example, a restriction covers spots 1-3 with x=5. So, max_height[1] = 5, max_height[2] =5, max_height[3]=5. If I set all to 5, then the maximum in the range is 5, which satisfies the restriction. But what if another restriction covers spots 2-3 with x=4? Then, for spot 2, max_height becomes min(5,4) =4. Similarly, spot 3 becomes 4.\n\nIn that case, setting spot 2 to 4 and spot 3 to 4 would satisfy both restrictions. So the initial approach is correct.\n\nSo, the first thing I need to do is, for each spot i, find all the restrictions that include i, then the maximum allowed height is the minimum of all x_j for those restrictions and h.\n\nOnce I have max_height[i], the optimal solution is to set each a_i to max_height[i], because that's the maximum possible, which gives the maximum sum of squares.\n\nWait, but wait again. Is that always the case? Because, suppose for some reason, some a_i cannot be set to their max_height because other constraints might require a lower height.\n\nWait, no. Because the max_height[i] is the minimal possible maximum that satisfies",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street with given constraints. Each house can be built at a certain height, and each height contributes to the total profit based on its square value. The challenge is to respect all zoning restrictions which limit the maximum height in specific ranges.\n\n### Approach\n1. **Understand Constraints**: Each restriction specifies a range of spots and a maximum height. For each spot, the maximum allowed height is determined by the minimum height constraint from all applicable restrictions and the global maximum height `h`.\n\n2. **Compute Maximum Heights**: For each spot, compute the maximum allowed height considering all applicable restrictions. This ensures that no restriction is violated.\n\n3. **Maximize Profit**: Once the maximum allowed heights for each spot are determined, the optimal strategy is to build each house at its maximum allowed height, as this will maximize the sum of squares, thus maximizing the profit.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l-1, r-1, x))  # converting to 0-based index\n\n# For each spot, find the maximum allowed height\nmax_height = [h] * n\nfor (l, r, x) in restrictions:\n    for i in range(l, r+1):\n        if max_height[i] > x:\n            max_height[i] = x\n\n# Now, assign each spot the max possible height and calculate the profit\nprofit = sum(a * a for a in max_height)\nprint(profit)\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into variables for the number of spots, maximum height, and the number of restrictions. Each restriction is stored along with its range and maximum height.\n\n2. **Adjusting Maximum Heights**: For each spot, iterate through all applicable restrictions to determine the minimum maximum height allowed by any restriction. This ensures that all constraints are respected.\n\n3. **Calculating Profit**: After determining the maximum allowed heights for each spot, compute the total profit by summing the squares of these heights.\n\nThis approach efficiently handles the constraints and ensures the maximum possible profit is achieved while respecting all zoning restrictions.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l-1, r-1, x))  # converting to 0-based index\n\n# For each spot, find the maximum allowed height\nmax_height = [h] * n\nfor (l, r, x) in restrictions:\n    for i in range(l, r+1):\n        if max_height[i] > x:\n            max_height[i] = x\n\n# Now, assign each spot the max possible height and calculate the profit\nprofit = sum(a * a for a in max_height)\nprint(profit)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 803,
        "completion_token_count": 475,
        "thoughts_token_count": 1025
    }
}