{
    "start": 1758292191.8900723,
    "end": 1758292217.3868895,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef read_input():\n    n = int(input())\n    A = input()\n    return n, A\n\ndef solve(n, A):\n    # Initialize a 2D table to store the maximum prize for each subproblem\n    dp = [[0] * (n + 1) for _ in range(2)]\n\n    # Initialize a 2D table to store the sequence of moves for each subproblem\n    moves = [[[None] * (n + 1) for _ in range(n + 1)] for _ in range(2)]\n\n    # Fill up the tables using dynamic programming\n    for i in range(2):\n        for j in range(1, n + 1):\n            max_prize = 0\n            max_move = None\n            for k in range(i, j + 1):\n                if k % 2 == 0:\n                    move = 'H'\n                else:\n                    move = 'M'\n                prize = int(A[k - 1]) + dp[i][j - 1]\n                if prize > max_prize:\n                    max_prize = prize\n                    max_move = move\n            dp[i][j] = max_prize\n            moves[i][j][0] = max_move\n            for l in range(1, j):\n                moves[i][j][l] = moves[i][l][l]\n\n    # Backtrack to find the optimal sequence of moves\n    sequence = ''\n    i = 0\n    j = n\n    while j > 0:\n        sequence += moves[i][j][j]\n        j -= 1\n\n    # Return the optimal sequence of moves\n    return sequence[::-1]\n\ndef main():\n    n, A = read_input()\n    sequence = solve(n, A)\n    print(sequence)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script first reads the input from standard input, then uses dynamic programming to fill up two tables: `dp` and `moves`. The `dp` table stores the maximum prize for each subproblem, and the `moves` table stores the sequence of moves for each subproblem. Finally, it backtracks to find the optimal sequence of moves and prints it to standard output.\n\nThe time complexity of this script is O(n^2), where n is the number of digits in the input string A. The space complexity is also O(n^2).",
    "ground_truth": "N/A",
    "extracted_answer": "def read_input():\n    n = int(input())\n    A = input()\n    return n, A\n\ndef solve(n, A):\n    # Initialize a 2D table to store the maximum prize for each subproblem\n    dp = [[0] * (n + 1) for _ in range(2)]\n\n    # Initialize a 2D table to store the sequence of moves for each subproblem\n    moves = [[[None] * (n + 1) for _ in range(n + 1)] for _ in range(2)]\n\n    # Fill up the tables using dynamic programming\n    for i in range(2):\n        for j in range(1, n + 1):\n            max_prize = 0\n            max_move = None\n            for k in range(i, j + 1):\n                if k % 2 == 0:\n                    move = 'H'\n                else:\n                    move = 'M'\n                prize = int(A[k - 1]) + dp[i][j - 1]\n                if prize > max_prize:\n                    max_prize = prize\n                    max_move = move\n            dp[i][j] = max_prize\n            moves[i][j][0] = max_move\n            for l in range(1, j):\n                moves[i][j][l] = moves[i][l][l]\n\n    # Backtrack to find the optimal sequence of moves\n    sequence = ''\n    i = 0\n    j = n\n    while j > 0:\n        sequence += moves[i][j][j]\n        j -= 1\n\n    # Return the optimal sequence of moves\n    return sequence[::-1]\n\ndef main():\n    n, A = read_input()\n    sequence = solve(n, A)\n    print(sequence)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 440,
        "completion_token_count": 500,
        "thoughts_token_count": 0
    }
}