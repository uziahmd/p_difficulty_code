{
    "start": 1758103654.5591514,
    "end": 1758103776.6009483,
    "start-formatted": "2025-09-17 19:07 KST",
    "end-formatted": "2025-09-17 19:09 KST",
    "gpu": 2,
    "pid": 7,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is called Rudolf and Snowflakes, hard version. Hmm. From the description, it's about determining whether a certain number of vertices can form a snowflake graph as defined.\n\nLet me try to understand the problem step by step. \n\nThe snowflake is an undirected graph constructed in a specific way. Initially, there's one vertex. Then, each time, we add new vertices in a certain pattern. Each step involves taking a vertex that has only one edge (so degree 1) and connecting it to k new vertices. And this step must be done at least once. So the process goes like this:\n\n- Start with 1 node.\n- Add k children to it (so now total is 1 + k).\n- Then, for each of those k nodes, since each has degree 1, we add k children to each. So each of them becomes a parent to k new nodes. So the next step adds k*k nodes, making the total 1 + k + k^2.\n- This process can continue multiple times. So each iteration multiplies the number of nodes by k for each existing \"leaf\" node.\n\nWait, but the way it's described, each leaf (degree 1 node) gets expanded into k new nodes. So each expansion step increases the total nodes by k^m, where m is the number of leaves in the previous step.\n\nBut wait, let me think again. The initial step after the first addition gives us 1 + k nodes. Then, each of the k nodes is expanded, adding k each, so total becomes 1 + k + k^2. Then, each of the k^2 nodes is expanded, adding k each, leading to 1 +k +k² +k³. And so on. But the problem says that the step of expanding must be done at least once. So the minimal snowflake is when we have done exactly one expansion beyond the initial.\n\nSo for example, when k=4, the minimal snowflake has 1 (root) +4 (level 1) +4*4=16 (level 2) = 21? Wait no, the sample input includes 9 as a NO case. Wait, the sample input is:\n\nSample Input:\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\nSample Output:\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nLooking at the output, for n=13, it's YES. Hmm. Let's see what 13 could represent.\n\nWait, maybe the snowflake can be built in any number of layers beyond the first, not necessarily just two. So the total number of nodes is 1 + k + k^2 + ... + k^m, where m >=1. Because each expansion is optional, but at least one expansion must happen. Wait, no. The problem says that the step should be done at least once. So the initial setup is 1 node. Then, the first expansion is done, adding k children (total 1 +k). Then, each of those is expanded, adding k each, making 1 +k +k^2. So m is the number of expansions done. So the minimal case is m=1, which gives 1 +k.\n\nWait, no. The initial setup is 1 node. Then, the first expansion is adding k children, making it 1 +k. Then, each of those k nodes is expanded, adding k each, making it 1 +k +k^2. So the number of layers is m+1, where m is the number of expansion steps. Or perhaps m is the depth. Not sure yet.\n\nBut the key is that the total number of nodes is a sum of a geometric series. So the total nodes N is 1 + k*(1 + k + k² + ... +k^{m}), where m is the number of expansion steps. Wait, no. Because each expansion step adds a layer.\n\nAlternatively, perhaps each expansion step is a generation. So the root is generation 0, then generation 1 has k nodes, generation 2 has k^2 nodes, and so on up to some depth d ≥1. So the total nodes are sum_{i=0}^{d} k^i, which is (k^{d+1} -1)/(k-1). But wait, that's for a full tree where each node has exactly k children. But in our case, each expansion step is applied to all current leaves. So the tree is a perfect k-ary tree, but the depth can vary.\n\nWait, perhaps the snowflake graph is a complete k-ary tree of depth exactly m, where m ≥1. Because each leaf must have been expanded at least once",
    "response": "To solve this problem, we need to determine if a given number of vertices \\( n \\) can form a snowflake graph as defined. A snowflake graph is constructed by repeatedly expanding each leaf node (a node with only one edge) into \\( k \\) new nodes, starting from a single root node.\n\n### Approach\n1. **Understanding the Structure**: The snowflake graph is a perfect \\( k \\)-ary tree where each expansion step adds a new layer of nodes. The total number of nodes after \\( m \\) expansion steps is given by the sum of a geometric series: \\( 1 + k + k^2 + ... + k^m \\).\n\n2. **Mathematical Formulation**: The total number of nodes \\( N \\) after \\( m \\) expansions is \\( N = \\frac{k^{m+1} - 1}{k - 1} \\). Here, \\( k > 1 \\) and \\( m \\geq 1 \\) (since at least one expansion must occur).\n\n3. **Check for Valid \\( n \\)**: For each test case, check if \\( n \\) can be expressed in the form \\( N = \\frac{k^{m+1} - 1}{k - 1} \\) for some integers \\( k > 1 \\) and \\( m \\geq 1 \\).\n\n4. **Efficient Check**: Iterate over possible values of \\( k \\) and \\( m \\) to determine if \\( n \\) fits the required structure. The maximum \\( k \\) to consider is up to the square root of \\( n \\) because \\( k^2 \\) will exceed \\( n \\) beyond that point.\n\n### Solution Code\n```python\nimport sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Try all possible k starting from 2 up to sqrt(n)\n    max_k = int(n**0.5) + 1\n    for k in range(2, max_k + 1):\n        # We need to find m such that n = (k^(m+1) - 1)/(k-1)\n        # Rearranged: k^(m+1) = (n*(k-1) + 1)\n        # Let's compute target = n * (k - 1) + 1\n        target = n * (k - 1) + 1\n        # Now check if target is a perfect power of k\n        current = k\n        exponent = 1\n        while current < target:\n            next_current = current * k\n            if next_current == target:\n                return True\n            current = next_current\n            exponent += 1\n            if current > target:\n                break\n        # Also check if k=2 and m=1 is possible (but it's handled above)\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    for i in range(1, t+1):\n        n = int(input[i])\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read all at once for efficiency, especially given the constraints.\n2. **Checking Each Test Case**: For each test case, the function `is_snowflake` is called to determine if the given \\( n \\) can form a valid snowflake graph.\n3. **Iterating Over Possible \\( k \\)**: For each possible \\( k \\) from 2 up to the square root of \\( n \\), the code checks if \\( n \\) can be expressed as the sum of a geometric series.\n4. **Checking for Perfect Power**: For each \\( k \\), the code verifies if the target value (derived from \\( n \\)) is a perfect power of \\( k \\), ensuring the structure of a snowflake graph.\n\nThis approach efficiently narrows down the possible structures using mathematical properties, ensuring the solution is both correct and optimal for large values of \\( n \\).",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Try all possible k starting from 2 up to sqrt(n)\n    max_k = int(n**0.5) + 1\n    for k in range(2, max_k + 1):\n        # We need to find m such that n = (k^(m+1) - 1)/(k-1)\n        # Rearranged: k^(m+1) = (n*(k-1) + 1)\n        # Let's compute target = n * (k - 1) + 1\n        target = n * (k - 1) + 1\n        # Now check if target is a perfect power of k\n        current = k\n        exponent = 1\n        while current < target:\n            next_current = current * k\n            if next_current == target:\n                return True\n            current = next_current\n            exponent += 1\n            if current > target:\n                break\n        # Also check if k=2 and m=1 is possible (but it's handled above)\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    for i in range(1, t+1):\n        n = int(input[i])\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 534,
        "completion_token_count": 864,
        "thoughts_token_count": 1025
    }
}