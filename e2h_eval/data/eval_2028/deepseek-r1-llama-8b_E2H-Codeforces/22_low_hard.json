{
    "start": 1758278346.233513,
    "end": 1758278564.2293856,
    "start-formatted": "2025-09-19 19:39 KST",
    "end-formatted": "2025-09-19 19:42 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is about determining the number of successful students in a group based on their marks in various subjects. Hmm.\n\nSo, each student has marks for m subjects. A student is considered the best at a subject if no one else has a higher mark for that subject. And a student is successful if they are the best in at least one subject. My task is to find out how many such students there are.\n\nLet me think about the input. The first line gives n and m. Then there are n lines, each representing a student's grades. Each grade is a string of m characters, each being a digit from 1 to 9. So for example, if a student has '232' for three subjects, that means their marks are 2,3,2 respectively.\n\nThe output is a list of numbers—each being the count of successful students for each test case. Oh wait, wait. Wait, looking back at the example, the input seems to be two test cases. Because the sample input shows two lines after the first line, and the output is two numbers. So the program needs to process multiple test cases, each with n and m, followed by n lines of grades.\n\nWait, no. Looking again: the sample input is given as a single string, but perhaps it's meant to represent two separate test cases? Or maybe it's just the way the user presented it. Oh, wait, the initial problem statement says \"the following is a competitive programming problem.\" So perhaps the input is a single test case, but in the example, it's given as two test cases. Hmm, maybe I'm misunderstanding. Let me recheck.\n\nWait, the sample input is written as ['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111'], which suggests that there are two test cases. But that can't be right because the output is two numbers. Wait, perhaps the input is read as a single string, and then split into test cases. So for instance, the first line is '3 3\\n223\\n232\\n112', which is a test case, and then another test case follows.\n\nBut the problem description says, \"print the single number\"—wait, no. Wait, the problem says, \"Print the single number\"—but the sample output shows two numbers. So perhaps I'm misunderstanding. Wait, looking at the problem statement again:\n\n\"Your task is to find the number of successful students in the given group.\"\n\nBut the sample output has two numbers. Oh, right, because the input provided in the example represents two test cases. So the program needs to handle each test case separately and output the results for each.\n\nWait, no. Let me look at the example:\n\nInput:\n3 3\n223\n232\n112\n\nThen another test case:\n3 5\n91728\n11828\n11111\n\nOutput:\n2\n3\n\nSo the program needs to process each test case individually and output the result for each. So in the code, I need to read all test cases and process them, then output each result on its own line.\n\nHmm, okay. Now, the plan is to read each test case, compute the number of successful students, and output it.\n\nSo, for each test case:\n\n- Read n and m.\n- Read n strings, each of length m.\n- For each student, check if they are the best in any subject.\n- Count how many students are successful.\n\nNow, how to determine if a student is the best in any subject.\n\nFor each subject j (from 0 to m-1), collect all the marks from all students in that subject. Find the maximum mark in subject j. Then, for each student, check if their mark in subject j is equal to this maximum. If yes, then they are the best in that subject.\n\nBut wait, no: the problem says, a student is the best in a subject if there's no student who got a higher mark. So for subject j, the maximum mark among all students is the highest. Any student who has that maximum is the best in that subject.\n\nSo for each subject, find the maximum mark. Then, for each student, if in any of their subjects their mark equals the maximum for that subject, they are successful.\n\nSo, the steps for a test case:\n\n1. Read n and m.\n\n2. For each of the n students, read their m-character string, convert each character into an integer, and store as a list of lists or similar structure.\n\n3. For each subject j (from 0 to m-1):\n\n   a. Collect all the marks from all students in this subject.\n\n   b. Find the maximum mark in this subject.\n\n4. For each student, check if they have at least one subject where their mark is equal to the maximum for that subject.\n\n5. Count the number of such students",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark for that subject.\n\n### Approach\n1. **Input Reading**: Read the number of test cases. For each test case, read the number of students (n) and the number of subjects (m). Then, read the grades for each student.\n2. **Subject Analysis**: For each subject, determine the maximum mark achieved by any student. This helps identify which students are the best in that subject.\n3. **Student Success Check**: For each student, check if they have at least one subject where their mark equals the maximum mark for that subject. If so, the student is successful.\n4. **Count Successful Students**: Count how many students are successful for each test case and output the result.\n\n### Solution Code\n```python\ndef count_successful_students():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(input):\n        # Read the first line as n and m\n        line = input[idx].strip()\n        n, m = map(int, line.split())\n        idx += 1\n        # Read the next n lines as student data\n        students = []\n        for _ in range(n):\n            s = input[idx].strip()\n            idx += 1\n            marks = [int(c) for c in s]\n            students.append(marks)\n        # Now process each subject\n        max_marks = []\n        for j in range(m):\n            max_mark = -1\n            for i in range(n):\n                if students[i][j] > max_mark:\n                    max_mark = students[i][j]\n            max_marks.append(max_mark)\n        # Check each student\n        count = 0\n        for i in range(n):\n            is_success = False\n            for j in range(m):\n                if students[i][j] == max_marks[j]:\n                    is_success = True\n                    break\n            if is_success:\n                count += 1\n        print(count)\n\ncount_successful_students()\n```\n\n### Explanation\n1. **Reading Input**: The input is read all at once and split into lines. Each line represents either the parameters for a test case or the grades of a student.\n2. **Processing Each Test Case**: For each test case, we extract the number of students and subjects. We then read the grades for each student and store them.\n3. **Determining Maximum Marks**: For each subject, we find the highest mark achieved by any student. This helps us identify the best mark for each subject.\n4. **Checking Student Success**: For each student, we check if they have at least one subject where their mark matches the maximum mark for that subject. If they do, they are marked as successful.\n5. **Output Results**: After processing all students in a test case, we print the count of successful students.\n\nThis approach ensures that we efficiently determine the number of successful students by leveraging the maximum marks for each subject and checking each student's performance against these maxima.",
    "ground_truth": "N/A",
    "extracted_answer": "def count_successful_students():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(input):\n        # Read the first line as n and m\n        line = input[idx].strip()\n        n, m = map(int, line.split())\n        idx += 1\n        # Read the next n lines as student data\n        students = []\n        for _ in range(n):\n            s = input[idx].strip()\n            idx += 1\n            marks = [int(c) for c in s]\n            students.append(marks)\n        # Now process each subject\n        max_marks = []\n        for j in range(m):\n            max_mark = -1\n            for i in range(n):\n                if students[i][j] > max_mark:\n                    max_mark = students[i][j]\n            max_marks.append(max_mark)\n        # Check each student\n        count = 0\n        for i in range(n):\n            is_success = False\n            for j in range(m):\n                if students[i][j] == max_marks[j]:\n                    is_success = True\n                    break\n            if is_success:\n                count += 1\n        print(count)\n\ncount_successful_students()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 653,
        "thoughts_token_count": 1025
    }
}