{
    "start": 1758292075.239067,
    "end": 1758292104.9192748,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 32,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Array Stabilization\n\nYou are given an array $$$a$$$ consisting of $$$n$$$ integer numbers.Let instability of the array be the following value: $$$\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$$$.You have to remove exactly one element from this array to minimize instability of the resulting $$$(n-1)$$$-elements array. Your task is to calculate the minimum possible instability.\n\n## Input\nThe first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of elements in the array $$$a$$$.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — elements of the array $$$a$$$.\n\n## Output\nPrint one integer — the minimum possible instability of the array if you have to remove exactly one element from the array $$$a$$$.\n\n## Example\n### Input\n['4\\n1 3 3 7', '2\\n1 100000']\n\n### Output\n['2', '0']\n\n## Note\nIn the first example you can remove $$$7$$$ then instability of the remaining array will be $$$3 - 1 = 2$$$.In the second example you can remove either $$$1$$$ or $$$100000$$$ then instability of the remaining array will be $$$100000 - 100000 = 0$$$ and $$$1 - 1 = 0$$$ correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef array_stabilization():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    max_diff = a[-1] - a[0]\n    left_max = a[0]\n    right_min = a[-1]\n\n    for i in range(1, n - 1):\n        curr_diff = a[i] - a[0]\n        if curr_diff < max_diff:\n            max_diff = curr_diff\n            left_max = a[0]\n            right_min = a[i]\n        elif curr_diff == max_diff:\n            left_max = min(left_max, a[0])\n            right_min = max(right_min, a[i])\n\n    return max(0, max_diff - (right_min - left_max))\n\nt = 1\nfor _ in range(t):\n    print(array_stabilization())\n```\n\nThis script reads the input from standard input, sorts the array `a`, and then iterates over the array to find the minimum possible instability. It keeps track of the maximum difference found so far and the corresponding left maximum and right minimum values. If a smaller difference is found, it updates the maximum difference and the left maximum and right minimum values. If the difference is equal to the maximum difference found so far, it updates the left maximum and right minimum values if necessary. Finally, it prints the maximum of 0 and the maximum difference minus the difference between the right minimum and the left maximum.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef array_stabilization():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    max_diff = a[-1] - a[0]\n    left_max = a[0]\n    right_min = a[-1]\n\n    for i in range(1, n - 1):\n        curr_diff = a[i] - a[0]\n        if curr_diff < max_diff:\n            max_diff = curr_diff\n            left_max = a[0]\n            right_min = a[i]\n        elif curr_diff == max_diff:\n            left_max = min(left_max, a[0])\n            right_min = max(right_min, a[i])\n\n    return max(0, max_diff - (right_min - left_max))\n\nt = 1\nfor _ in range(t):\n    print(array_stabilization())",
    "score": 0,
    "metadata": {
        "prompt_token_count": 460,
        "completion_token_count": 305,
        "thoughts_token_count": 0
    }
}