{
    "start": 1758292212.026681,
    "end": 1758292222.5625706,
    "start-formatted": "2025-09-19 23:30 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 50,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Tree Sum\n\nLet us call an edge-weighted tree with $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$ good if the weight of each edge is either $$$1$$$ or $$$-1$$$ and for each vertex $$$i$$$, the product of the edge weights of all edges having $$$i$$$ as one endpoint is $$$-1$$$.You are given a positive integer $$$n$$$. There are $$$n^{n-2} \\cdot 2^{n-1}$$$ distinct$$$^\\dagger$$$ edge-weighted trees with $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$ such that each edge is either $$$1$$$ or $$$-1$$$. Your task is to find the sum of $$$d(1,n)^\\ddagger$$$ of all such trees that are good. Since the answer can be quite large, you only need to find it modulo $$$998\\,244\\,353$$$.$$$^\\dagger$$$ Two trees are considered to be distinct if either:   there exists two vertices such that there is an edge between them in one of the trees, and not in the other.  there exists two vertices such that there is an edge between them in both trees but the weight of the edge between them in one tree is different from the one in the other tree. Note that by Cayley's formula, the number of trees on $$$n$$$ labeled vertices is $$$n^{n-2}$$$. Since we have $$$n-1$$$ edges, there are $$$2^{n-1}$$$ possible assignment of weights(weight can either be $$$1$$$ or $$$-1$$$). That is why total number of distinct edge-weighted tree is $$$n^{n-2} \\cdot 2^{n-1}$$$.$$$^\\ddagger$$$ $$$d(u,v)$$$ denotes the sum of the weight of all edges on the unique simple path from $$$u$$$ to $$$v$$$.\n\n## Input\nThe first and only line of input contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 5 \\cdot 10^5$$$).\n\n## Output\nThe only line of output should contain a single integer, the required answer, modulo $$$998\\,244\\,353$$$.\n\n## Example\n### Input\n['2', '1', '4', '10', '43434']\n\n### Output\n['998244352', '0', '998244343', '948359297', '86232114']\n\n## Note\nIn the first test case, there is only $$$1$$$ distinct good tree. The value of $$$d(1,2)$$$ for that tree is $$$-1$$$, which is $$$998\\,244\\,352$$$ under modulo $$$998\\,244\\,353$$$.In the second test case, the value of $$$d(1,1)$$$ for any tree is $$$0$$$, so the answer is $$$0$$$.In the third test case, there are $$$16$$$ distinct good trees. The value of $$$d(1,4)$$$ is:   $$$-2$$$ for $$$2$$$ trees;  $$$-1$$$ for $$$8$$$ trees;  $$$0$$$ for $$$4$$$ trees;  $$$1$$$ for $$$2$$$ trees. The sum of $$$d(1,4)$$$ over all trees is $$$2 \\cdot (-2) + 8 \\cdot (-1) + 4 \\cdot (0) + 2 \\cdot (1) = -10$$$, which is $$$998\\,244\\,343$$$ under modulo $$$998\\,244\\,353$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef power_mod(a, n, p):\n    \"\"\"Compute a^n mod p.\"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * a) % p\n        a = (a * a) % p\n        n //= 2\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    MOD = 998244353\n\n    n = int(input())\n\n    ans = 0\n    for i in range(1, n):\n        numerator = (-1)**i * power_mod(i, n - 2, MOD) * power_mod(n - i, n - 2, MOD)\n        denominator = power_mod(n, n - 2, MOD)\n        ans += numerator * power_mod(denominator, MOD - 2, MOD)\n        ans %= MOD\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script first calculates the number of trees with `i` nodes as the root and `n-i` nodes as the leaves. It then multiplies this by `-1` raised to the power of `i`, which represents the sign of the sum of the edge weights in the tree. The final step is to multiply this product by the inverse of the total number of trees (`n^(n-2)`), which is used as a common factor in the numerator and denominator.",
    "ground_truth": "N/A",
    "extracted_answer": "def power_mod(a, n, p):\n    \"\"\"Compute a^n mod p.\"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * a) % p\n        a = (a * a) % p\n        n //= 2\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    MOD = 998244353\n\n    n = int(input())\n\n    ans = 0\n    for i in range(1, n):\n        numerator = (-1)**i * power_mod(i, n - 2, MOD) * power_mod(n - i, n - 2, MOD)\n        denominator = power_mod(n, n - 2, MOD)\n        ans += numerator * power_mod(denominator, MOD - 2, MOD)\n        ans %= MOD\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 875,
        "completion_token_count": 303,
        "thoughts_token_count": 0
    }
}