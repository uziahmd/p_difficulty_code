{
    "start": 1758280863.0973783,
    "end": 1758282168.1432316,
    "start-formatted": "2025-09-19 20:21 KST",
    "end-formatted": "2025-09-19 20:42 KST",
    "gpu": 2,
    "pid": 21,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko Finds Grapes\n\nOn a random day, Neko found $$$n$$$ treasure chests and $$$m$$$ keys. The $$$i$$$-th chest has an integer $$$a_i$$$ written on it and the $$$j$$$-th key has an integer $$$b_j$$$ on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.The $$$j$$$-th key can be used to unlock the $$$i$$$-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, $$$a_i + b_j \\equiv 1 \\pmod{2}$$$. One key can be used to open at most one chest, and one chest can be opened at most once.Find the maximum number of chests Neko can open.\n\n## Input\nThe first line contains integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^5$$$) — the number of chests and the number of keys.The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the numbers written on the treasure chests.The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$) — the numbers written on the keys.\n\n## Output\nPrint the maximum number of chests you can open.\n\n## Example\n### Input\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\n### Output\n['3', '1', '0']\n\n## Note\nIn the first example, one possible way to unlock $$$3$$$ chests is as follows:  Use first key to unlock the fifth chest,  Use third key to unlock the second chest,  Use fourth key to unlock the first chest. In the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).In the third example, no key can unlock the given chest.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is called \"Neko Finds Grapes.\" Hmm, sounds interesting. So, Neko found some treasure chests and keys. The goal is to open as many chests as possible using the keys.\n\nLet me read the problem statement carefully.\n\nSo, each chest has a number a_i and each key has b_j. A key can unlock a chest if the sum of their numbers is odd. That means either one is even and the other is odd because even + odd = odd. Oh right, but wait, no: wait, 1+2=3 which is odd. Yes, that's correct.\n\nEach key can be used once on at most one chest. Each chest can be opened at most once.\n\nWe need to find the maximum number of chests that can be opened.\n\nHmm, okay. So, the approach is to match keys and chests such that a_i + b_j is odd, and maximize the number of such pairs where each key and chest are used only once.\n\nWait, but since each key is used once, and each chest once, it's a bipartite matching problem, but with two possible types of edges based on the parity of a_i and b_j.\n\nLet me think about the possible cases.\n\nFor a_i and b_j to have an odd sum, one must be even and the other odd.\n\nSo, the chests can be divided into two groups: those with even a_i and those with odd a_i. Similarly for the keys.\n\nSo, let's count:\n\n- Number of chests with even a_i: let's call it even_chests.\n- Number of chests with odd a_i: odd_chests = total_chests - even_chests.\n\nSimilarly, for the keys:\n\n- Number of keys with even b_j: even_keys.\n- Number of keys with odd b_j: odd_keys = total_keys - even_keys.\n\nNow, for a key j to unlock a chest i, we need that exactly one of a_i or b_j is odd.\n\nSo, when pairing:\n\nCase 1: Use an even key with an odd chest. Because even (b_j) + odd (a_i) = odd.\n\nCase 2: Use an odd key with an even chest. Because odd (b_j) + even (a_i) = odd.\n\nSo, the maximum number of chests is the sum of the minimum of (even_keys and odd_chests) plus the minimum of (odd_keys and even_chests).\n\nYes! Because:\n\n- The first term is the maximum number of even_keys that can be paired with odd_chests.\n- The second term is the maximum number of odd_keys that can be paired with even_chests.\n\nAnd these two are independent, so adding them gives the total maximum.\n\nThat makes sense. So the solution is straightforward.\n\nSo, the steps are:\n\n1. Count the number of even and odd a_i (for chests).\n2. Count the number of even and odd b_j (for keys).\n3. Calculate the maximum possible by taking min(even_keys, odd_chests) + min(odd_keys, even_chests).\n4. Output that sum.\n\nWait, but what if there's an overlap? Like, maybe using some keys in both ways could help. But no, because each key can be used only once. So the two terms are separate.\n\nLet me test this logic against the examples.\n\nFirst example:\n\nInput:\n5 4\n9 14 6 2 11\n8 4 7 20\n\nSo, the a array is [9,14,6,2,11].\n\nEven a_i's: 14,6,2 → 3.\nOdd a_i's: 9,11 → 2.\n\nSo even_chests = 3, odd_chests = 2.\n\nThe b array is [8,4,7,20].\n\nEven b_j's: 8,4,20 → 3.\nOdd b_j's:7 →1.\n\nSo even_keys =3, odd_keys=1.\n\nCompute min(3, 2) → 2. min(1,3) →1. Total 3. Which matches the sample output.\n\nSecond example:\n\nInput:\n5 1\n2 4 6 8 10\n5\n\na_i's: all even. So even_chests =5, odd_chests=0.\n\nb_j: 5 is odd. So even_keys=0, odd_keys=1.\n\nmin(0,0) is 0, min(1,5)=1. So total is 1. Which matches the sample.\n\nThird example:\n\nn=1, m=4.\n\na_i is 10, which is even. So even_chests=1, odd_chests=0.\n\nb_j's are 20,30,40,50 → all even. So even_keys=4, odd_keys=0.\n\nSo min(4,0) is 0, min(0,1) is 0. Total 0. Which matches the sample.\n\nGreat, so the logic works for the samples.\n\nNow, how to implement this?\n\nIn Python, we can process the input as follows:\n\nRead n and m.\n\nRead the next line as a list of integers for a.\n\nRead the next line as a list of integers for b.\n\nCount the number of even and odd in a.\n\nSimilarly for b.\n\nThen compute the sum as described.\n\nSo code-wise:\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_a = sum(1 for x in a if x % 2 == 0)\nodd_a = n - even_a\n\neven_b = sum(1 for x in b if x % 2 == 0)\nodd_b = m - even_b\n\nresult = min(even_b, odd_a) + min(odd_b, even_a)\nprint(result)\n\nWait, but wait. Wait, the a is the chests, so even_a is the count of chests with even a_i. So when we want to pair even_b (number of even keys) with odd_a (number of odd chests), yes.\n\nWait, no, wait: no, because a_i even can be unlocked by a key that is odd.\n\nSo for a_i even, you can use any odd key. So the number of such possible pairs is the minimum between the number of even chests and the number of odd keys.\n\nSimilarly, for a_i odd, you can use any even key. So the number of such possible pairs is the minimum between the number of odd chests and the number of even keys.\n\nWait, no. Wait, the first part is for when a_i is even and b_j is odd. Because even + odd = odd. So for the even chests, you can only use the odd keys.\n\nWait, no, wait: the condition is a_i + b_j is odd.\n\nIf a_i is even, then b_j must be odd.\n\nIf a_i is odd, then b_j must be even.\n\nSo, for even chests: they can be unlocked by odd keys.\n\nFor odd chests: they can be unlocked by even keys.\n\nSo, the maximum number of even chests that can be unlocked is the minimum of (number of even chests) and (number of odd keys).\n\nWait, no. No. Because even chests can only be unlocked by odd keys. So the number of even chests is even_chest_count, and the number of odd keys is odd_key_count. So the maximum possible is min(even_chest_count, odd_key_count).\n\nSimilarly, for the odd chests, they can be unlocked by even keys. So min(odd_chest_count, even_key_count).\n\nSo the total is the sum of these two.\n\nWait, so in code:\n\nsum = min(even_chests, odd_keys) + min(odd_chests, even_keys)\n\nWhich is the same as before.\n\nSo in the first example:\n\neven_chests =3, odd_keys=1 → min is 1.\n\nWait, no. Wait, wait. Let me recalculate.\n\nWait, no. In the first example, the even_chests are 3 (14,6,2). The odd_keys is 1 (7). So min(3,1)=1.\n\nBut wait, the even_chests are 3, and each can be unlocked by one of the 1 odd key. So you can only unlock 1 even chest.\n\nThen, the odd_chests are 2 (9,11). They can be unlocked by the even keys, which are 3 (8,4,20). So min(2,3)=2. So total is 1+2=3.\n\nYes, that's correct.\n\nSo, the code should correctly calculate that.\n\nAnother test case: say even_chests=5, odd_keys=10. Then min is 5.\n\nodd_chests=3, even_keys=5. Min is3.\n\nTotal 8.\n\nYes.\n\nSo the code seems correct.\n\nI think that's the solution.\n",
    "response": "To solve this problem, we need to determine the maximum number of treasure chests that Neko can open using the given keys. Each key can unlock a chest if their sum is odd, meaning one must be even and the other odd.\n\n### Approach\n1. **Categorize Chests and Keys by Parity**:\n   - Divide the chests into two groups based on whether the number written on them is even or odd.\n   - Similarly, divide the keys into two groups based on whether the number written on them is even or odd.\n\n2. **Count the Groups**:\n   - Count the number of even and odd chests.\n   - Count the number of even and odd keys.\n\n3. **Determine Maximum Openable Chests**:\n   - Use even keys to unlock odd chests.\n   - Use odd keys to unlock even chests.\n   - The maximum number of chests that can be opened is the sum of the minimum of even keys and odd chests plus the minimum of odd keys and even chests.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_chests = sum(1 for x in a if x % 2 == 0)\nodd_chests = n - even_chests\n\neven_keys = sum(1 for x in b if x % 2 == 0)\nodd_keys = m - even_keys\n\nmax_chests = min(even_keys, odd_chests) + min(odd_keys, even_chests)\nprint(max_chests)\n```\n\n### Explanation\n- **Categorization**: We categorize each chest and key into even or odd based on their values.\n- **Counting**: We count how many even and odd chests and keys there are.\n- **Matching**: We match even keys with odd chests and odd keys with even chests to maximize the number of chests opened. This is done by taking the minimum of the respective counts to ensure we do not exceed the available keys or chests.\n\nThis approach efficiently determines the maximum number of chests that can be opened using the given keys, ensuring optimal use of both resources.",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_chests = sum(1 for x in a if x % 2 == 0)\nodd_chests = n - even_chests\n\neven_keys = sum(1 for x in b if x % 2 == 0)\nodd_keys = m - even_keys\n\nmax_chests = min(even_keys, odd_chests) + min(odd_keys, even_chests)\nprint(max_chests)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 593,
        "completion_token_count": 448,
        "thoughts_token_count": 1892
    }
}