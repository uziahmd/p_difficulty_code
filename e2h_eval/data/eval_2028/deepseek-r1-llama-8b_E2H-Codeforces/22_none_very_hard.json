{
    "start": 1758292076.7089741,
    "end": 1758292124.2677386,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nfrom typing import List\n\ndef count_successful_students(n: int, m: int, gradebook: List[str]) -> int:\n    \"\"\"\n    Counts the number of successful students in a group.\n\n    A student is considered successful if there exists a subject where they have the highest mark.\n\n    Args:\n        n (int): The number of students.\n        m (int): The number of subjects.\n        gradebook (List[str]): A list of strings representing the gradebook.\n\n    Returns:\n        int: The number of successful students.\n    \"\"\"\n    # Initialize a set to store the maximum marks for each subject\n    max_marks = [0] * m\n\n    # Initialize a set to store the successful students\n    successful_students = set()\n\n    # Iterate over each student's grades\n    for i, grades in enumerate(gradebook):\n        # Iterate over each subject's grade\n        for j, grade in enumerate(grades):\n            # Update the maximum mark for the subject if necessary\n            max_marks[j] = max(max_marks[j], int(grade))\n            # If the student's grade is equal to the maximum mark for the subject, add them to the set of successful students\n            if int(grade) == max_marks[j]:\n                successful_students.add(i)\n\n    # Return the number of successful students\n    return len(successful_students)\n\n\ndef main():\n    # Read the input from standard input\n    input_str = input()\n    n, m = map(int, input_str.split())\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(input())\n\n    # Print the result to standard output\n    print(count_successful_students(n, m, gradebook))\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script defines a function `count_successful_students` that takes the number of students, the number of subjects, and the gradebook as input and returns the number of successful students. The `main` function reads the input from standard input, calls `count_successful_students`, and prints the result to standard output.\n\nThe time complexity of this solution is O(n*m), where n is the number of students and m is the number of subjects. This is because we iterate over each student's grades and each subject's grade once. The space complexity is also O(n*m), as we store the maximum marks for each subject and the successful students in sets.",
    "ground_truth": "N/A",
    "extracted_answer": "from typing import List\n\ndef count_successful_students(n: int, m: int, gradebook: List[str]) -> int:\n    \"\"\"\n    Counts the number of successful students in a group.\n\n    A student is considered successful if there exists a subject where they have the highest mark.\n\n    Args:\n        n (int): The number of students.\n        m (int): The number of subjects.\n        gradebook (List[str]): A list of strings representing the gradebook.\n\n    Returns:\n        int: The number of successful students.\n    \"\"\"\n    # Initialize a set to store the maximum marks for each subject\n    max_marks = [0] * m\n\n    # Initialize a set to store the successful students\n    successful_students = set()\n\n    # Iterate over each student's grades\n    for i, grades in enumerate(gradebook):\n        # Iterate over each subject's grade\n        for j, grade in enumerate(grades):\n            # Update the maximum mark for the subject if necessary\n            max_marks[j] = max(max_marks[j], int(grade))\n            # If the student's grade is equal to the maximum mark for the subject, add them to the set of successful students\n            if int(grade) == max_marks[j]:\n                successful_students.add(i)\n\n    # Return the number of successful students\n    return len(successful_students)\n\n\ndef main():\n    # Read the input from standard input\n    input_str = input()\n    n, m = map(int, input_str.split())\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(input())\n\n    # Print the result to standard output\n    print(count_successful_students(n, m, gradebook))\n\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 461,
        "completion_token_count": 492,
        "thoughts_token_count": 0
    }
}