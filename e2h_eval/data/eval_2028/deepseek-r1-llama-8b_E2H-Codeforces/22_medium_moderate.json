{
    "start": 1758282270.2482352,
    "end": 1758284109.7539268,
    "start-formatted": "2025-09-19 20:44 KST",
    "end-formatted": "2025-09-19 21:15 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is about determining the number of successful students in a group based on their marks in various subjects. Hmm.\n\nSo, each student has marks for m subjects. A student is considered the best at a subject if no one else has a higher mark for that subject. And a student is successful if they are the best in at least one subject. My task is to find out how many such students there are.\n\nLet me think about the input. The first line gives n and m. Then there are n lines, each representing a student's grades. Each grade is a string of m characters, each being a digit from 1 to 9. So for example, a line like '223' would mean the student scored 2, 2, 3 in three subjects.\n\nThe output is a list of numbers, each indicating the count of successful students for each test case. Wait, wait, looking back at the sample input, the input is given as a single string with multiple test cases separated by newlines? Or maybe the way the input is presented is a bit confusing. Oh, right, the input is given as a single string, perhaps with multiple test cases. But in the code, we can read it line by line.\n\nWait, no. Looking at the sample input, it's written as ['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111'], which looks like two test cases. So each test case is a block consisting of n lines, each line starting with n and m, followed by n lines of m characters.\n\nWait, no. Wait, the first line of each test case is a line containing n and m. Then n lines follow, each representing a student's grades. So for each test case, we have to process those n lines.\n\nBut in the sample input, the way it's written might be a representation. So in reality, when reading the input, perhaps each test case is processed separately.\n\nSo the plan is: For each test case, process all the students, determine for each subject who the maximum is, then for each student check if they are the maximum in any subject, and count how many such students.\n\nYes. So the steps are:\n\n1. Read the input, parse each test case.\n2. For each subject (each column in the student's grades), find the maximum mark across all students.\n3. For each student, check if they have at least one subject where their mark equals the maximum for that subject.\n4. Count the number of students who meet this condition.\n\nNow, the challenge is to parse the input correctly.\n\nLet me think about how to structure this in code.\n\nIn Python, I can read the entire input as a string, split into lines. Then, each line is either a test case header or a student's grades.\n\nWait, but each test case starts with a line like 'n m', followed by n lines of student data.\n\nSo, the approach is:\n\n- Read all lines from stdin.\n- Split them into groups where each group starts with a line of n m.\n- For each group:\n   - Process each of the next n lines as a student's marks.\n   - For each subject, track the maximum mark.\n   - Then, for each student, check if they are the maximum in any subject.\n   - Sum the count.\n\nHmm. So, let's outline the code structure.\n\nRead all lines into a list.\n\nThen, iterate through the lines, grouping them into test cases.\n\nEach test case is identified by a line that starts with two integers, n and m.\n\nOnce a test case is identified, collect the next n lines as the students' marks.\n\nFor each student, convert their marks string into a list of integers.\n\nThen, for each subject (from 0 to m-1), find the maximum value across all students.\n\nOnce we have the max for each subject, for each student, check if any of their marks equals the corresponding max.\n\nIf yes, count this student as successful.\n\nFinally, output the count for each test case.\n\nNow, handling the input correctly is important.\n\nWait, but how to split the lines into test cases. Because after the initial line, each test case consists of n+1 lines: the n m line, and then n lines of student data.\n\nSo, for example, the sample input seems to have two test cases. So the first line is '3 3', then 3 lines of students. Then another test case: '3 5', then 3 lines.\n\nSo, in code:\n\nlines = [line.strip() for line in sys.stdin]\n\ntest_cases = []\ncurrent_test_case = None\nfor line in lines:\n    if line == '':  # sometimes, trailing newlines cause empty lines\n        continue\n    if line.split()[0] in ['3','5']:  # not sure; maybe better to process as integers\n        parts = line.split()\n        if len(parts) != 2:\n            # error? Maybe not, but per problem statement, probably correct.\n            pass\n        n = int(parts[0])\n        m = int(parts[1])\n        current_test_case = {'n':n, 'm':m}\n        test_cases.append(current_test_case)\n        # now collect the next n lines as students\n        students = []\n        for _ in range(n):\n            if len(lines) < len(students) + ...:  # need to manage indices\n                break\n            student_line = lines[...]\n            students.append(student_line)\n        # process students\n        # compute max for each subject\n        max_marks = [0]*m\n        for i in range(m):\n            max_val = 0\n            for s in students:\n                mark = int(s[i])\n                if mark > max_val:\n                    max_val = mark\n            max_marks[i] = max_val\n        # now for each student, check if any mark is equal to max_marks in that subject\n        count = 0\n        for s in students:\n            is_successful = False\n            for i in range(m):\n                if int(s[i]) == max_marks[i]:\n                    is_successful = True\n                    break\n            if is_successful:\n                count +=1\n        print(count)\n    else:\n        # part of a student's line\n        pass\n\nWait, but this approach may not correctly capture the test cases because once a test case is started, the next n lines are part of it, and then another test case starts.\n\nSo, perhaps a better way is to loop through all lines, and whenever a line starts with n and m, process that as a new test case.\n\nBut perhaps an alternative approach is to keep track of whether we're inside a test case or not.\n\nInitialize a variable, like in_test_case = False.\n\nLoop over each line:\n\nif in_test_case is False:\n\n   if the line is 'n m' format, then extract n and m, and set in_test_case to True.\n\nelse:\n\n   collect the line as a student's data.\n\nOnce n lines have been collected after processing a test case, process it, then set in_test_case to False.\n\nWait, but this could be tricky because the lines may be in order, but perhaps some lines are empty, leading to issues.\n\nAlternatively, perhaps use a queue-like approach, where we process lines until we have a complete test case.\n\nAnother approach: for each line, if it's the start of a new test case (i.e., contains n and m), then process the next n lines as students.\n\nThis seems manageable.\n\nSo, here's a plan:\n\n- Read all lines into a list, stripping whitespace.\n\n- Initialize index to 0.\n\n- While index < len(lines):\n\n   - Skip any empty lines.\n\n   - Check if the current line can be parsed into n and m.\n\n   - If yes, then this is the start of a test case.\n\n      - Read the next n lines as students' data.\n\n      - For each student, process their marks.\n\n      - Compute max for each subject.\n\n      - Count how many students are successful.\n\n      - Output the count.\n\n      - Increment index by 1 (for the n m line) plus n (students lines).\n\n   - Else:\n\n      - index +=1.\n\nBut wait, how to handle cases where the line is not properly formatted? Probably, the problem ensures that the input is correct, so we don't have to handle errors.\n\nSo, in code:\n\nimport sys\n\ndef main():\n    lines = [line.rstrip('\\n') for line in sys.stdin]\n    idx = 0\n    while idx < len(lines):\n        # skip empty lines\n        while idx < len(lines) and lines[idx].strip() == '':\n            idx +=1\n        if idx >= len(lines):\n            break\n        # check if current line is a test case header\n        parts = lines[idx].split()\n        if len(parts) == 2:\n            n = int(parts[0])\n            m = int(parts[1])\n            idx +=1\n            students = []\n            for _ in range(n):\n                if idx >= len(lines):\n                    break\n                s = lines[idx].strip()\n                students.append(s)\n                idx +=1\n            # Now process students\n            # Compute max for each subject\n            max_marks = [0] * m\n            for j in range(m):\n                max_val = 0\n                for s in students:\n                    c = s[j]\n                    mark = int(c)\n                    if mark > max_val:\n                        max_val = mark\n                max_marks[j] = max_val\n            # Count successful students\n            count = 0\n            for s in students:\n                found = False\n                for j in range(m):\n                    if int(s[j]) == max_marks[j]:\n                        found = True\n                        break\n                if found:\n                    count +=1\n            print(count)\n        else:\n            # invalid line, skip?\n            idx +=1\n\nWait, but in the sample input, the first test case is:\n\n3 3\n\n223\n\n232\n\n112\n\nWhich means, the students are '223', '232', '112'. So for subject 1, the max is 2, subject 2 max is 3, subject 3 max is 2.\n\nWait, no: let's see. The first student's marks are 2, 2, 3. Second: 2,3,2. Third: 1,1,2.\n\nSo for subject 1: the max is 2 (all students have <=2). Subject 2: the max is 3 (student 2). Subject3: max is 3 (student1) and 2 (student2) and 2 (student3). So the max is 3.\n\nWait no: wait, the third student's third mark is 2, same as the first and second.\n\nSo for each subject, find the highest mark.\n\nSo for subject 1: the highest is 2.\n\nSubject2: highest is 3.\n\nSubject3: highest is 3.\n\nSo for each student:\n\nStudent1: marks 2,2,3.\n\nCompare to max_marks [2,3,3].\n\nStudent1's marks match max in subject 3. So he is successful.\n\nStudent2: 2,3,2. Matches subject2's max. Successful.\n\nStudent3: 1,1,2. No match in any subject. Not successful.\n\nSo total 2, which matches the sample.\n\nSo the code should handle this correctly.\n\nAnother sample input is:\n\n3 5\n\n91728 → 9,1,7,2,8\n\n11828 → 1,1,8,2,8\n\n11111 → 1,1,1,1,1\n\nCompute max for each subject:\n\nSubject1: max is 9.\n\nSubject2: max is 1.\n\nSubject3: max is 8.\n\nSubject4: max is 2.\n\nSubject5: max is 8.\n\nNow for each student:\n\nStudent1: 9,1,7,2,8. So in subject1 and subject5, he is the max.\n\nStudent2: 1,1,8,2,8. He is max in subject3 and 5.\n\nStudent3: 1,1,1,1,1. No. So all students are successful except none? Wait, wait, no.\n\nWait, wait, student3 is 11111. So for each subject, his mark is 1. But the max for subject1 is 9, subject2 is 1, etc.\n\nWait, for subject2, the max is 1. So student3's subject2 is 1, which is equal to the max.\n\nSimilarly, for subject4, max is 2, but student3's mark is 1.\n\nWait, let's re-calculate:\n\nmax_marks = [9, 1, 8, 2, 8].\n\nStudent3's marks are 1,1,1,1,1.\n\nSo for subject2, his mark is 1, which is equal to the max (1). So he is the best in subject2.\n\nWait, because the max is 1, and he has 1. So yes.\n\nSimilarly, for subject3, the max is 8. His mark is 1, so no.\n\nSo for each student:\n\nStudent1: in subject1 and 5, he is best. So yes.\n\nStudent2: in subject3 and 5, he is best.\n\nStudent3: in subject2, he is best. So all three are successful.\n\nHence the output is 3, as in the sample.\n\nSo the code should correctly process this.\n\nNow, potential edge cases:\n\n- All students have the same marks for all subjects. Then no one is successful.\n\nWait, no. Because each student would be the best in all subjects only if their marks are higher than others. If all have the same, then no one is the best.\n\nAnother case: n=1, m=1. Then the student is successful.\n\nAnother case: n=2, m=2.\n\nStudent1: 99\n\nStudent2: 99\n\nSo for both subjects, the max is 9. Both students have 9 in each subject. So both are best in all subjects. So both are successful.\n\nWait, no. Because for each subject, both students have 9. So for a student to be the best, they must have at least one subject where they are the sole maximum.\n\nWait, no. The definition says, a student is best in a subject if there is no student who got a higher mark. So if two students have the same maximum, then neither is the best in that subject.\n\nAh! That's a crucial point. So for a subject, if multiple students have the maximum mark, then none of them are considered the best for that subject.\n\nSo, for example, if two students have 9 in subject 1, then for subject1, neither is the best because the other also has 9.\n\nOnly if a student is the only one with the maximum in a subject, do they count as best in that subject.\n\nSo this changes things.\n\nOh, right, that's a big oversight in my initial thinking.\n\nSo, the approach needs to be adjusted.\n\nSo, for each subject, we need to find all the students who have the maximum mark in that subject. Then, if a student is the only one in that subject, they are the best.\n\nSo, for each subject, we track the maximum mark, and the count of students having that maximum.\n\nIf count is 1, then the student(s) with that mark are the best. If count >1, no one is the best for that subject.\n\nSo, how to adjust the code.\n\nSo, for each subject, compute the maximum mark, and the number of students with that mark.\n\nIf the count is 1, then the student(s) with that mark are the best.\n\nSo, for each student, if they are the best in any subject, they are successful.\n\nThus, the steps are:\n\nFor each test case:\n\n1. For each subject, compute the maximum mark and the number of students with that mark.\n\n2. For each subject, if the count is 1, note the student(s) who have that mark.\n\n3. For each student, check if they are the best in any subject (i.e., they are the only one with the maximum in that subject).\n\nSo, how to represent this.\n\nPerhaps, for each subject, we can store a dictionary mapping from mark to the list of students who have that mark.\n\nThen, for each subject, if the maximum mark occurs exactly once, then the student(s) in that list are the best.\n\nSo, for each subject:\n\nmax_mark = max of all students' marks in that subject.\n\nstudents_with_max = [students whose mark in this subject is max_mark].\n\nif len(students_with_max) == 1:\n\n   add this student to the best list for this subject.\n\nElse:\n\n   no one is best.\n\nThen, for each student, check if they are in any of the best lists for any subject.\n\nIf yes, they are successful.\n\nSo, the code will need to be adjusted.\n\nLet me think about how to implement this.\n\nIn code:\n\nFor each test case:\n\nstudents = list of strings, each string is the marks for a student.\n\nsubjects = m.\n\nmax_marks = for each subject, a dictionary where key is the mark, value is the list of students with that mark.\n\nbest_students = list of sets, where each set contains the students who are best in that subject.\n\nSo, for each subject in 0 to m-1:\n\n   get the marks for that subject from all students.\n\n   max_mark = max of these.\n\n   students_with_max = [s for s in students if their mark in subject is max_mark]\n\n   if len(students_with_max) == 1:\n\n       best_students.append( {students_with_max[0]} )\n\n   else:\n\n       pass\n\nWait, but in Python, the students are represented as strings, not indices. So, for each student, we can track their index in the students list.\n\nWait, perhaps it's better to process each student as an object with their marks for each subject.\n\nAlternatively, for each student, create a list of their marks as integers.\n\nSo, for each test case:\n\nstudents_marks = []\n\nfor each student in students:\n\n   marks = list of integers for each character in the string.\n\nstudents_marks.append( marks )\n\nThen, for each subject j:\n\n   max_mark = max( students_marks[i][j] for i in range(n) )\n\n   count = 0\n\n   for i in range(n):\n\n       if students_marks[i][j] == max_mark:\n\n           count +=1\n\n   if count == 1:\n\n       best_in_subject.add( students[i] )  # but how to track which student?\n\nWait, perhaps for each subject j:\n\n   collect all students who have the max mark.\n\n   if len(collection) ==1:\n\n       add that student's index to a list indicating they are best in subject j.\n\nSo, let's see.\n\nLet me think again.\n\nWe can represent each student by their index in the students_marks list.\n\nFor each subject j:\n\n   max_mark = max( students_marks[i][j] for i in 0..n-1 )\n\n   candidates = [i for i in 0..n-1 if students_marks[i][j] == max_mark ]\n\n   if len(candidates) == 1:\n\n       best_in_j.append( candidates[0] )\n\nSo, for each subject j, best_in_j is a list of student indices (0-based) who are the best in that subject.\n\nAfter processing all subjects, for each student i, check if i is present in any of best_in_j lists.\n\nIf yes, count him as successful.\n\nSo, in code:\n\ncount = 0\n\nfor i in 0..n-1:\n\n   if i in any of best_in_0, best_in_1, ..., best_in_{m-1}:\n\n       count +=1\n\nSo, putting it all together.\n\nSample Input 1:\n\n3 3\n\n223\n\n232\n\n112\n\nstudents_marks:\n\nstudent0: [2,2,3]\n\nstudent1: [2,3,2]\n\nstudent2: [1,1,2]\n\nProcessing each subject:\n\nsubject0 (first column):\n\nmarks are 2,2,1 → max is 2. Candidates are students0 and 1 → len 2. So no one is best.\n\nsubject1:\n\nmarks are 2,3,1 → max 3. Only student1 has 3. So best_in_j is [1].\n\nsubject2:\n\nmarks are 3,2,2 → max 3. Only student0 has 3. So best_in_j is [0].\n\nThus, the best students are:\n\nstudent0 is best in subject2.\n\nstudent1 is best in subject1.\n\nSo, both are successful. So count is 2.\n\nWhich matches the sample.\n\nAnother sample where two students have same max:\n\nn=2, m=1\n\nstudents: '9' and '9'\n\nsubject0: max 9, candidates [0,1]. So len 2, no one is best. So no students are successful.\n\nSo output is 0.\n\nSo, the code needs to be adjusted accordingly.\n\nThus, the plan is:\n\nFor each test case:\n\n   Read n and m.\n\n   Read n student lines, each converted into a list of integers.\n\n   For each subject j (from 0 to m-1):\n\n       collect all student indices where their mark is the maximum.\n\n       if the length of this list is 1:\n\n           record this student's index as a best in j.\n\n   For each student i, check if they are in any of the best_in_j lists.\n\n   Count the total.\n\nSo, the code needs to be modified.\n\nLet's adjust the code accordingly.\n\nIn the main function:\n\nfor each test case:\n\n   read n and m.\n\n   students_marks = []\n\n   for _ in range(n):\n\n       s = lines[idx].strip()\n\n       marks = [int(c) for c in s]\n\n       students_marks.append(marks)\n\n       idx +=1\n\n   # Now, for each subject:\n\n   best_in_subj = []  # list of lists; best_in_subj[j] is the list of student indices (0-based) who are best in subject j.\n\n   for j in range(m):\n\n       max_mark = -1\n\n       candidates = []\n\n       for i in range(n):\n\n           if students_marks[i][j] > max_mark:\n\n               max_mark = students_marks[i][j]\n\n               candidates = [i]\n\n           elif students_marks[i][j] == max_mark:\n\n               candidates.append(i)\n\n       if len(candidates) == 1:\n\n           best_in_subj.append( [candidates[0]] )\n\n       else:\n\n           best_in_subj.append( [] )\n\n   # Now, for each student, check if they are in any best_in_subj[j]\n\n   count = 0\n\n   for i in range(n):\n\n       for j in range(m):\n\n           if i in best_in_subj[j]:\n\n               count +=1\n\n               break\n\n   print(count)\n\nThis should handle the cases correctly.\n\nTesting this code against the samples:\n\nSample 1:\n\nstudents_marks = [[2,2,3], [2,3,2], [1,1,2]]\n\nFor j=0:\n\nmax is 2. candidates are 0,1. len 2 → best_in_subj[0] is empty.\n\nj=1:\n\nmax is 3. only student1. best_in_subj[1] = [[1]].\n\nj=2:\n\nmax is 3. only student0. best_in_subj[2] = [[0]].\n\nThen, for each student:\n\nstudent0: check if 0 is in any best_in_subj. Yes in j=2.\n\nstudent1: yes in j=1.\n\nstudent2: no.\n\nSo count is 2.\n\nSample 2:\n\nstudents_marks = [\n    [9,1,7,2,8],\n    [1,1,8,2,8],\n    [1,1,1,1,1]\n]\n\nProcess each subject:\n\nj=0:\n\nmarks are 9,1,1 → max 9. Only student0. best_in_subj[0] = [[0]].\n\nj=1:\n\nmarks are 1,1,1 → max 1. All three. len 3 → no best.\n\nj=2:\n\nmarks are 7,8,1 → max 8. Only student1. best_in_subj[2] = [[1]].\n\nj=3:\n\nmarks 2,2,1 → max 2. Only student0 and 1. len 2 → no best.\n\nj=4:\n\nmarks 8,8,1 → max 8. Only student0 and 1. len 2 → no best.\n\nThus, best_in_subj is:\n\n[[[0]], [], [[1]], [], []]\n\nFor each student:\n\nstudent0: in j=0, yes.\n\nstudent1: in j=2, yes.\n\nstudent2: no.\n\nThus, count is 3.\n\nWhich is correct.\n\nAnother test case: n=2, m=1.\n\nstudents: '9' and '9'.\n\nstudents_marks = [[9], [9]]\n\nj=0:\n\nmax is 9. candidates are 0 and 1. len 2 → no best.\n\nThus, no students are successful.\n\nOutput is 0.\n\nAnother test case: n=1, m=1.\n\nstudent: '5'.\n\nProcessing:\n\nj=0: max is 5, only candidate 0. best_in_subj[0] = [0].\n\nThus, student0 is successful. Output 1.\n\nAnother test case: n=3, m=2.\n\nstudents:\n\n222\n\n333\n\n222\n\nSo, each subject has max 3 (subject0) and max 2 (subject1).\n\nSubject0: students with 3 are only student1. So best_in_subj[0] = [1].\n\nSubject1: all students have 2 except none. Wait, no: each student has 2 in subject1.\n\nWait, no, the first student's marks are '22' → subject0 is 2, subject1 is 2.\n\nSecond: '33' → 3,3.\n\nThird: '22' → 2,2.\n\nSo for subject0: max is 3. Only student1.\n\nsubject1: max is 2. All 3 students have 2. So len(candidates)=3 → no best.\n\nSo best_in_subj is:\n\n[ [1], [] ]\n\nThus, only student1 is successful. So output is 1.\n\nSo the code seems correct.\n\nThus, the code is:\n\nRead all lines.\n\nFor each test case, process as above.\n\nSo the final code is as follows.\n",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their marks in various subjects. A student is considered successful if they are the best in at least one subject, meaning no other student has a higher mark for that subject.\n\n### Approach\n1. **Input Parsing**: Read the input and parse it into test cases. Each test case starts with a line containing the number of students `n` and the number of subjects `m`.\n2. **Student Marks Processing**: For each student, convert their marks from strings to a list of integers for easier processing.\n3. **Subject-wise Maximum Calculation**: For each subject, determine the maximum mark and identify the students who achieved this maximum mark.\n4. **Best Student Identification**: Check if a student is the only one achieving the maximum mark in any subject. If so, mark them as successful.\n5. **Count Successful Students**: For each student, check if they are the best in any subject and count how many such students exist.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    lines = [line.rstrip('\\n') for line in sys.stdin]\n    idx = 0\n    while idx < len(lines):\n        # Skip empty lines\n        while idx < len(lines) and lines[idx].strip() == '':\n            idx += 1\n        if idx >= len(lines):\n            break\n        # Check if current line is a test case header\n        parts = lines[idx].split()\n        if len(parts) == 2:\n            n = int(parts[0])\n            m = int(parts[1])\n            idx += 1\n            students_marks = []\n            for _ in range(n):\n                if idx >= len(lines):\n                    break\n                s = lines[idx].strip()\n                marks = [int(c) for c in s]\n                students_marks.append(marks)\n                idx += 1\n            # Now process each subject\n            best_in_subj = []\n            for j in range(m):\n                max_mark = -1\n                candidates = []\n                for i in range(n):\n                    if students_marks[i][j] > max_mark:\n                        max_mark = students_marks[i][j]\n                        candidates = [i]\n                    elif students_marks[i][j] == max_mark:\n                        candidates.append(i)\n                if len(candidates) == 1:\n                    best_in_subj.append([candidates[0]])\n                else:\n                    best_in_subj.append([])\n            # Count successful students\n            count = 0\n            for i in range(n):\n                for j in range(m):\n                    if i in best_in_subj[j]:\n                        count += 1\n                        break\n            print(count)\n        else:\n            # Not a valid test case header, skip\n            idx += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, and each test case is processed individually.\n2. **Processing Each Test Case**: For each test case, the number of students and subjects are read, followed by reading each student's marks.\n3. **Finding Maximum Marks**: For each subject, the maximum mark is identified, and all students who achieved this mark are noted.\n4. **Identifying Best Students**: If a student is the sole highest scorer in any subject, they are marked as successful.\n5. **Counting Successes**: Each student is checked against the list of best students for each subject to determine if they are successful.\n\nThis approach ensures that we efficiently determine the number of successful students by leveraging subject-wise maximums and checking each student's performance against these maxima.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    lines = [line.rstrip('\\n') for line in sys.stdin]\n    idx = 0\n    while idx < len(lines):\n        # Skip empty lines\n        while idx < len(lines) and lines[idx].strip() == '':\n            idx += 1\n        if idx >= len(lines):\n            break\n        # Check if current line is a test case header\n        parts = lines[idx].split()\n        if len(parts) == 2:\n            n = int(parts[0])\n            m = int(parts[1])\n            idx += 1\n            students_marks = []\n            for _ in range(n):\n                if idx >= len(lines):\n                    break\n                s = lines[idx].strip()\n                marks = [int(c) for c in s]\n                students_marks.append(marks)\n                idx += 1\n            # Now process each subject\n            best_in_subj = []\n            for j in range(m):\n                max_mark = -1\n                candidates = []\n                for i in range(n):\n                    if students_marks[i][j] > max_mark:\n                        max_mark = students_marks[i][j]\n                        candidates = [i]\n                    elif students_marks[i][j] == max_mark:\n                        candidates.append(i)\n                if len(candidates) == 1:\n                    best_in_subj.append([candidates[0]])\n                else:\n                    best_in_subj.append([])\n            # Count successful students\n            count = 0\n            for i in range(n):\n                for j in range(m):\n                    if i in best_in_subj[j]:\n                        count += 1\n                        break\n            print(count)\n        else:\n            # Not a valid test case header, skip\n            idx += 1\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 431,
        "completion_token_count": 753,
        "thoughts_token_count": 5647
    }
}