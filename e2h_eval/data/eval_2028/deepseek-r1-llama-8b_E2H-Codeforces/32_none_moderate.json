{
    "start": 1758292073.528956,
    "end": 1758292107.0579169,
    "start-formatted": "2025-09-19 23:27 KST",
    "end-formatted": "2025-09-19 23:28 KST",
    "gpu": 2,
    "pid": 32,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Array Stabilization\n\nYou are given an array $$$a$$$ consisting of $$$n$$$ integer numbers.Let instability of the array be the following value: $$$\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$$$.You have to remove exactly one element from this array to minimize instability of the resulting $$$(n-1)$$$-elements array. Your task is to calculate the minimum possible instability.\n\n## Input\nThe first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of elements in the array $$$a$$$.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) — elements of the array $$$a$$$.\n\n## Output\nPrint one integer — the minimum possible instability of the array if you have to remove exactly one element from the array $$$a$$$.\n\n## Example\n### Input\n['4\\n1 3 3 7', '2\\n1 100000']\n\n### Output\n['2', '0']\n\n## Note\nIn the first example you can remove $$$7$$$ then instability of the remaining array will be $$$3 - 1 = 2$$$.In the second example you can remove either $$$1$$$ or $$$100000$$$ then instability of the remaining array will be $$$100000 - 100000 = 0$$$ and $$$1 - 1 = 0$$$ correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef array_stabilization():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    max_diff = a[-1] - a[0]\n    left_max = a[0]\n    right_min = a[-1]\n\n    for i in range(1, n - 1):\n        curr_diff = a[i] - a[0]\n        if curr_diff < max_diff:\n            max_diff = curr_diff\n            left_max = a[0]\n            right_min = a[i]\n        elif curr_diff == max_diff:\n            if a[i] > left_max:\n                left_max = a[i]\n            elif a[i] < right_min:\n                right_min = a[i]\n\n    return max_diff\n\nif __name__ == \"__main__\":\n    t = 1\n    for _ in range(t):\n        print(array_stabilization())\n```\n\nThis script first reads the number of elements `n` and the array `a` from the standard input. It then sorts the array in ascending order.\n\nThe instability of the array is initially set to the difference between the maximum and minimum elements. We then iterate through the sorted array, keeping track of the maximum difference and the corresponding left maximum and right minimum elements. If we find a smaller difference, we update the maximum difference and the left maximum and right minimum elements. If we find a difference that is equal to the current maximum difference, we check if the current element is greater than the left maximum or less than the right minimum, and update them if necessary.\n\nFinally, we return the maximum difference found, which represents the minimum possible instability of the array after removing one element.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef array_stabilization():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    max_diff = a[-1] - a[0]\n    left_max = a[0]\n    right_min = a[-1]\n\n    for i in range(1, n - 1):\n        curr_diff = a[i] - a[0]\n        if curr_diff < max_diff:\n            max_diff = curr_diff\n            left_max = a[0]\n            right_min = a[i]\n        elif curr_diff == max_diff:\n            if a[i] > left_max:\n                left_max = a[i]\n            elif a[i] < right_min:\n                right_min = a[i]\n\n    return max_diff\n\nif __name__ == \"__main__\":\n    t = 1\n    for _ in range(t):\n        print(array_stabilization())",
    "score": 0,
    "metadata": {
        "prompt_token_count": 461,
        "completion_token_count": 349,
        "thoughts_token_count": 0
    }
}