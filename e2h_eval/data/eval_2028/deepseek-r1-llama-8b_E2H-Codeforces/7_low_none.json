{
    "start": 1758103650.5789602,
    "end": 1758103758.7801516,
    "start-formatted": "2025-09-17 19:07 KST",
    "end-formatted": "2025-09-17 19:09 KST",
    "gpu": 2,
    "pid": 7,
    "use_openrouter": false,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem is called Rudolf and Snowflakes, hard version. Hmm. From the description, it's about determining whether a certain number of vertices can form a snowflake graph as defined.\n\nLet me try to understand the problem step by step. \n\nThe snowflake is an undirected graph constructed in a specific way. Initially, there's one vertex. Then, each time, we add new vertices in a certain pattern. Each step involves taking a vertex that has only one edge (so degree 1) and connecting it to k new vertices. And this step must be done at least once. So the process goes like this:\n\n- Start with 1 node.\n- Add k children to it (so now total is 1 + k).\n- Then, for each of those k nodes, since each has degree 1, we add k children to each. So each of them becomes a parent to k new nodes. So the next step adds k*k nodes, making the total 1 +k +k^2.\n- This process can continue multiple times. So each iteration multiplies the number of nodes by k for each existing \"leaf\" node.\n\nWait, but the way it's described, each leaf (degree 1 node) gets expanded into k new nodes. So each expansion step increases the total nodes by k^m, where m is the number of leaves in the previous step.\n\nBut wait, let me think again. The initial step after 1 node is adding k children, so the total is 1 +k. Then, each of those k nodes will add k children each, so that's another k*k nodes, making the total 1 +k +k². Then, each of those k² nodes (each was added from a parent which was a leaf) will each add k children, leading to k³ nodes added, so total is 1 +k +k² +k³. And this continues until some step.\n\nBut wait, the problem says that the process should be done at least once. So the minimal case is when after the initial step, we do one more expansion. So for k=4, the smallest snowflake has 1+4+16=21 nodes? Or wait, maybe I'm getting the steps wrong.\n\nWait, let's look at the example given. For k=4, the smallest snowflake has 9 nodes. Wait, how?\n\nWait, perhaps I misunderstood the process. Let me read the problem statement again.\n\nThe initial graph has one vertex. Then, the initial vertex is connected to k new vertices (k>1). So the initial step creates 1 +k nodes. Then, each vertex that is connected by only one edge (i.e., the ones just added) must each be connected to k new vertices. And this step must be done at least once.\n\nSo for k=4, the initial step gives 1 +4 =5 nodes. Then, each of the four nodes adds four children, adding 4*4=16 nodes. So total is 5+16=21. But the sample input says that n=9 is a NO. So perhaps my understanding is incorrect.\n\nWait, maybe the initial step is creating k children, but then each of those children is expanded in a way that may not require all of them to be expanded each time.\n\nAlternatively, perhaps the process is that each step is applied to all current leaves. So for example:\n\nStep 0: 1 node.\n\nStep 1: add k children. Total nodes: 1 +k.\n\nStep 2: each of the k children adds k children. Total nodes: 1 +k +k².\n\nStep 3: each of the k² children adds k children. Total nodes: 1 +k +k² +k³.\n\nAnd so on.\n\nBut according to the sample input, when n=9, the output is NO. So let's compute for different k.\n\nFor n=9, possible k values are 2,3, etc.\n\nCheck for k=2:\n\nTotal nodes would be 1 +2 +4 =7, which is less than 9.\n\nThen step 3: 1+2+4+8=15, which is more than 9. So no, n=9 can't be achieved by k=2.\n\nWhat about k=3?\n\n1+3=4, then step 2: 4 +9=13, which is more than 9. So 9 isn't achievable for k=3.\n\nWait, but the sample says that n=6 is NO, n=13 is YES.\n\nWait, looking at the sample input:\n\nSample Input:\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\nSample Output:\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES",
    "response": "To solve this problem, we need to determine if a given number of vertices \\( n \\) can form a snowflake graph as defined. The snowflake graph is constructed by repeatedly expanding each leaf node (a node with only one edge) into \\( k \\) new nodes, starting from an initial single node and expanding at least once.\n\n### Approach\n1. **Understanding the Structure**: The snowflake graph starts with 1 node. Each expansion step adds \\( k^m \\) nodes for some \\( m \\), where each leaf node from the previous step becomes a parent to \\( k \\) new nodes.\n2. **Formulating the Problem**: We need to check if \\( n \\) can be expressed as \\( 1 + k + k^2 + k^3 + ... + k^m \\) for some \\( k > 1 \\) and \\( m \\geq 1 \\).\n3. **Iterative Check**: For each test case, iterate over possible values of \\( k \\) (from 2 upwards) and check if \\( n \\) can be represented in the required form. If any \\( k \\) satisfies this condition, the answer is \"YES\"; otherwise, it's \"NO\".\n\n### Solution Code\n```python\nimport sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Try k from 2 up to cube root of (n-1)\n    max_k = int((n - 1) ** (1/3)) + 2\n    for k in range(2, max_k + 1):\n        total = 1\n        current = 1\n        while True:\n            next_total = total + current * k\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            total = next_total\n            current *= k\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```\n\n### Explanation\n1. **Function `is_snowflake`**: This function checks if \\( n \\) can be represented as the sum of a geometric series starting from 1, with common ratio \\( k \\) and at least two terms.\n2. **Loop Through Possible \\( k \\)**: For each \\( k \\) starting from 2, the function calculates the cumulative sum of the series until it either matches \\( n \\) or exceeds it.\n3. **Efficiency Considerations**: The loop for \\( k \\) runs up to the cube root of \\( n \\) to ensure efficiency, especially given the constraint \\( n \\leq 10^{18} \\).\n\nThis approach efficiently determines if \\( n \\) can form a valid snowflake graph by leveraging properties of geometric series and iterative checks for feasible values of \\( k \\).",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef is_snowflake(n):\n    if n < 3:\n        return False\n    # Try k from 2 up to cube root of (n-1)\n    max_k = int((n - 1) ** (1/3)) + 2\n    for k in range(2, max_k + 1):\n        total = 1\n        current = 1\n        while True:\n            next_total = total + current * k\n            if next_total == n:\n                return True\n            if next_total > n:\n                break\n            total = next_total\n            current *= k\n    return False\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    if is_snowflake(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 526,
        "completion_token_count": 610,
        "thoughts_token_count": 1025
    }
}