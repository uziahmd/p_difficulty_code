{
    "start": 1758292129.257845,
    "end": 1758292209.4019492,
    "start-formatted": "2025-09-19 23:28 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nfrom collections import deque\nfrom sys import stdin, stdout\n\ndef dfs(node, visited, graph):\n    \"\"\"Perform DFS from the given node.\"\"\"\n    stack = [(node, [node])]\n    while stack:\n        n, path = stack.pop()\n        if not visited[n]:\n            visited[n] = True\n            for neighbor in graph[n]:\n                if neighbor not in path:\n                    stack.append((neighbor, path + [neighbor]))\n\ndef find_odd_cycle(graph):\n    \"\"\"Find an odd cycle in the graph using DFS.\"\"\"\n    visited = {i: False for i in range(len(graph))}\n    for i in range(len(graph)):\n        if not visited[i]:\n            dfs(i, visited, graph)\n    for i in range(len(graph)):\n        if len(graph[i]) % 2 != 0:\n            return True\n    return False\n\ndef find_articulation_points(graph):\n    \"\"\"Find articulation points in the graph using DFS.\"\"\"\n    visited = {i: False for i in range(len(graph))}\n    low = {i: float('inf') for i in range(len(graph))}\n    disc = {i: float('inf') for i in range(len(graph))}\n    ap = set()\n    parent = {i: -1 for i in range(len(graph))}\n    time = 0\n\n    def dfs(node):\n        nonlocal time\n        visited[node] = True\n        disc[node] = time\n        low[node] = time\n        time += 1\n        children = 0\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                parent[neighbor] = node\n                children += 1\n                dfs(neighbor)\n                low[node] = min(low[node], low[neighbor])\n                if (parent[node] == -1 and children > 1) or \\\n                   (parent[node] != -1 and low[neighbor] >= disc[node]):\n                    ap.add(node)\n            elif neighbor != parent[node]:\n                low[node] = min(low[node], disc[neighbor])\n\n    for i in range(len(graph)):\n        if not visited[i]:\n            dfs(i)\n\n    return ap\n\ndef find_biconnected_components(graph):\n    \"\"\"Find biconnected components in the graph.\"\"\"\n    ap = find_articulation_points(graph)\n    components = []\n    visited = {i: False for i in range(len(graph))}\n    for node in ap:\n        if not visited[node]:\n            component = set()\n            stack = [node]\n            while stack:\n                n = stack.pop()\n                visited[n] = True\n                component.add(n)\n                for neighbor in graph[n]:\n                    if neighbor not in visited and neighbor != parent[n]:\n                        stack.append(neighbor)\n            components.append(component)\n    return components\n\ndef solve():\n    \"\"\"Solve the problem.\"\"\"\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    # Find a connected component with an odd number of edges.\n    found = False\n    for i in range(n):\n        if len(graph[i]) % 2 != 0:\n            found = True\n            break\n\n    if found:\n        t = 0\n        w = 1\n        print(f\"{t} {w}\")\n        return\n\n    # Find a biconnected component with an odd number of edges.\n    biconnected_components = find_biconnected_components(graph)\n    for component in biconnected_components:\n        if len(component) % 2 != 0:\n            t = 1\n            w = 1\n            print(f\"{t} {w}\")\n            return\n\n    # The graph is disconnected and does not contain any cycles.\n    t = 2\n    w = 0\n    print(f\"{t} {w}\")\n\nsolve()\n```\n\nThis script uses DFS to find an odd cycle in the graph. If such a cycle exists, it prints the minimum number of edges that must be added to form a simple cycle of odd length.\n\nIf no odd cycle exists, it uses DFS to find articulation points in the graph. If there are any articulation points, it means that the graph is not connected, and we need to add at least two edges to form a cycle.\n\nIf there are no articulation points, it means that the graph is connected but does not contain any cycles. In this case, we need to add two edges to form a cycle.\n\nFinally, if the graph is disconnected and does not contain any cycles, it means that we need to add two edges to connect two different components and then add one more edge to form a cycle.",
    "ground_truth": "N/A",
    "extracted_answer": "from collections import deque\nfrom sys import stdin, stdout\n\ndef dfs(node, visited, graph):\n    \"\"\"Perform DFS from the given node.\"\"\"\n    stack = [(node, [node])]\n    while stack:\n        n, path = stack.pop()\n        if not visited[n]:\n            visited[n] = True\n            for neighbor in graph[n]:\n                if neighbor not in path:\n                    stack.append((neighbor, path + [neighbor]))\n\ndef find_odd_cycle(graph):\n    \"\"\"Find an odd cycle in the graph using DFS.\"\"\"\n    visited = {i: False for i in range(len(graph))}\n    for i in range(len(graph)):\n        if not visited[i]:\n            dfs(i, visited, graph)\n    for i in range(len(graph)):\n        if len(graph[i]) % 2 != 0:\n            return True\n    return False\n\ndef find_articulation_points(graph):\n    \"\"\"Find articulation points in the graph using DFS.\"\"\"\n    visited = {i: False for i in range(len(graph))}\n    low = {i: float('inf') for i in range(len(graph))}\n    disc = {i: float('inf') for i in range(len(graph))}\n    ap = set()\n    parent = {i: -1 for i in range(len(graph))}\n    time = 0\n\n    def dfs(node):\n        nonlocal time\n        visited[node] = True\n        disc[node] = time\n        low[node] = time\n        time += 1\n        children = 0\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                parent[neighbor] = node\n                children += 1\n                dfs(neighbor)\n                low[node] = min(low[node], low[neighbor])\n                if (parent[node] == -1 and children > 1) or \\\n                   (parent[node] != -1 and low[neighbor] >= disc[node]):\n                    ap.add(node)\n            elif neighbor != parent[node]:\n                low[node] = min(low[node], disc[neighbor])\n\n    for i in range(len(graph)):\n        if not visited[i]:\n            dfs(i)\n\n    return ap\n\ndef find_biconnected_components(graph):\n    \"\"\"Find biconnected components in the graph.\"\"\"\n    ap = find_articulation_points(graph)\n    components = []\n    visited = {i: False for i in range(len(graph))}\n    for node in ap:\n        if not visited[node]:\n            component = set()\n            stack = [node]\n            while stack:\n                n = stack.pop()\n                visited[n] = True\n                component.add(n)\n                for neighbor in graph[n]:\n                    if neighbor not in visited and neighbor != parent[n]:\n                        stack.append(neighbor)\n            components.append(component)\n    return components\n\ndef solve():\n    \"\"\"Solve the problem.\"\"\"\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    # Find a connected component with an odd number of edges.\n    found = False\n    for i in range(n):\n        if len(graph[i]) % 2 != 0:\n            found = True\n            break\n\n    if found:\n        t = 0\n        w = 1\n        print(f\"{t} {w}\")\n        return\n\n    # Find a biconnected component with an odd number of edges.\n    biconnected_components = find_biconnected_components(graph)\n    for component in biconnected_components:\n        if len(component) % 2 != 0:\n            t = 1\n            w = 1\n            print(f\"{t} {w}\")\n            return\n\n    # The graph is disconnected and does not contain any cycles.\n    t = 2\n    w = 0\n    print(f\"{t} {w}\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 600,
        "completion_token_count": 999,
        "thoughts_token_count": 0
    }
}