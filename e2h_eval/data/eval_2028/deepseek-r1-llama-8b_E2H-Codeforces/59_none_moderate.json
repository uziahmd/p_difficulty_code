{
    "start": 1758292179.498047,
    "end": 1758292206.8377872,
    "start-formatted": "2025-09-19 23:29 KST",
    "end-formatted": "2025-09-19 23:30 KST",
    "gpu": 2,
    "pid": 59,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Happy Sets\n\nDefine a set $$$A$$$ as a child of set $$$B$$$ if and only if for each element of value $$$x$$$ that is in $$$A$$$, there exists an element of value $$$x+1$$$ that is in $$$B$$$.Given integers $$$N$$$ and $$$K$$$. In order to make Chaneka happy, you must find the number of different arrays containing $$$N$$$ sets $$$[S_1, S_2, S_3, \\ldots, S_N]$$$ such that: - Each set can only contain zero or more different integers from $$$1$$$ to $$$K$$$. - There exists a way to rearrange the order of the array of sets into $$$[S'_1, S'_2, S'_3, \\ldots, S'_N]$$$ such that $$$S'_i$$$ is a child of $$$S'_{i+1}$$$ for each $$$1\\leq i\\leq N-1$$$.Print the answer modulo $$$998\\,244\\,353$$$.Two sets are considered different if and only if there is at least one value that only occurs in one of the two sets.Two arrays of sets are considered different if and only if there is at least one index $$$i$$$ such that the sets at index $$$i$$$ in the two arrays are different.\n\n## Input\nThe only line contains two integers $$$N$$$ and $$$K$$$ ($$$1 \\leq N,K \\leq 2\\cdot10^5$$$) â€” the number of sets in the array and the maximum limit for the values in the sets.\n\n## Output\nAn integer representing the number of different arrays of sets that satisfy the problem condition, modulo $$$998\\,244\\,353$$$.\n\n## Example\n### Input\n['2 2', '1 3', '3 1']\n\n### Output\n['11', '8', '4']\n\n## Note\nIn the first example, there are $$$11$$$ different arrays of sets possible, which are:   $$$[\\{\\}, \\{\\}]$$$  $$$[\\{\\}, \\{1\\}]$$$  $$$[\\{\\}, \\{1, 2\\}]$$$  $$$[\\{\\}, \\{2\\}]$$$  $$$[\\{1\\}, \\{\\}]$$$  $$$[\\{1\\}, \\{1, 2\\}]$$$  $$$[\\{1\\}, \\{2\\}]$$$  $$$[\\{1, 2\\}, \\{\\}]$$$  $$$[\\{1, 2\\}, \\{1\\}]$$$  $$$[\\{2\\}, \\{\\}]$$$  $$$[\\{2\\}, \\{1\\}]$$$ \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef happy_sets(n, k):\n    mod = 998244353\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base case: One set can contain any subset of numbers from 1 to k\n    for j in range(k + 1):\n        dp[1][j] = 1\n    \n    # Dynamic programming\n    for i in range(2, n + 1):\n        for j in range(k + 1):\n            # For each element that is not present in the current set\n            for x in range(j + 1):\n                # Add the number of ways to choose the current set and the previous sets\n                dp[i][j] += dp[i - 1][x]\n                dp[i][j] %= mod\n    \n    # Calculate the total number of arrays of sets\n    total = 0\n    for j in range(k + 1):\n        total += dp[n][j]\n        total %= mod\n    \n    return total\n\n# Read input from standard input\nn, k = map(int, input().split())\nprint(happy_sets(n, k))\n```\n\nThis script uses dynamic programming to solve the problem. The `dp` table stores the number of ways to choose the current set and the previous sets for each possible number of elements in the current set. The base case is when there is only one set, in which case the current set can contain any subset of numbers from 1 to `k`. The script then iterates over the remaining sets and calculates the number of ways to choose the current set and the previous sets for each possible number of elements in the current set. Finally, it returns the total number of arrays of sets.\n\nThe time complexity of this script is O(nk), where n is the number of sets and k is the maximum limit for the values in the sets. The space complexity is also O(nk).",
    "ground_truth": "N/A",
    "extracted_answer": "def happy_sets(n, k):\n    mod = 998244353\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base case: One set can contain any subset of numbers from 1 to k\n    for j in range(k + 1):\n        dp[1][j] = 1\n    \n    # Dynamic programming\n    for i in range(2, n + 1):\n        for j in range(k + 1):\n            # For each element that is not present in the current set\n            for x in range(j + 1):\n                # Add the number of ways to choose the current set and the previous sets\n                dp[i][j] += dp[i - 1][x]\n                dp[i][j] %= mod\n    \n    # Calculate the total number of arrays of sets\n    total = 0\n    for j in range(k + 1):\n        total += dp[n][j]\n        total %= mod\n    \n    return total\n\n# Read input from standard input\nn, k = map(int, input().split())\nprint(happy_sets(n, k))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 686,
        "completion_token_count": 404,
        "thoughts_token_count": 0
    }
}