{
    "start": 1758282242.6524332,
    "end": 1758284154.1217296,
    "start-formatted": "2025-09-19 20:44 KST",
    "end-formatted": "2025-09-19 21:15 KST",
    "gpu": 2,
    "pid": 57,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Olympiad\n\nA boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya's chances.Help Vasya's teacher, find two numbers — the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours (the first place has the participant who has got the most points). If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.\n\n## Input\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.The second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.The third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.The participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x.\n\n## Output\nPrint two space-separated integers — the best and the worst place Vasya could have got on the Olympiad.\n\n## Example\n### Input\n['5 2\\n1 1 1 1 1\\n1 1 1 1 1', '6 7\\n4 3 5 6 4 4\\n8 6 0 4 3 4']\n\n### Output\n['1 5', '1 5']\n\n## Note\nIn the first text sample all 5 participants earn 2 points each in any case. Depending on the jury's decision, Vasya can get the first (the best) as well as the last (the worst) fifth place.In the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that — {4:8, 6:4, 3:6, 4:4, 4:3, 5:0}.In this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour.In the worst case scenario Vasya can get the fifth place if the table looks like that — {4:8, 4:6, 6:4, 5:4, 4:3, 3:0}, and he earned 4 and 3 points in the first and second tours, correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Okay, so I've got this programming problem to solve. Let's see what it's about. The problem statement is a bit long, but let me try to break it down.\n\nThe problem is about Vasya's Olympiad results. We need to find the best and worst possible places he could have gotten based on his total points. Hmm.\n\nSo, the input gives us the number of participants (n) and the minimum points Vasya earned (x). Then two lists: a1 to an are the points from the first tour, and b1 to bn from the second tour. But wait, these lists are in arbitrary order—meaning they don't correspond to the participants' names or anything. So each participant's total points are ai + bi for some i, but since the lists are mixed, we don't know which a and which b belong together.\n\nOur goal is to determine the best and worst possible ranks Vasya could have, given that the sum of his a_i and b_j is at least x.\n\nLet me think about how to approach this.\n\nFirst, let's understand the ranking. The participants are sorted by their total points in descending order. If two have the same total, the jury can arrange them as they like, so for the best case, we can assume that Vasya is placed as high as possible, while for the worst case, as low as possible.\n\nWait, but how do we model this? Because the a and b lists are given in arbitrary order, each participant's total is a permutation of a and b. So, to find all possible sums, we need to pair each a with a unique b, ensuring each is used exactly once.\n\nBut n can be up to 105, which makes 105! possible pairings—way too big to compute directly. So brute force isn't feasible.\n\nHmm, so we need an efficient way to find the best and worst possible ranks for Vasya.\n\nLet me think about the best possible rank for Vasya. For this, we want Vasya's total to be as high as possible, and others' totals to be as low as possible. So, we should maximize his own sum, and minimize others'.\n\nWait, but how?\n\nWait, perhaps the best possible rank is determined by making Vasya's sum as high as possible, and then arranging others to have as low sums as possible, thus pushing him higher.\n\nBut since the a and b are given, how can we pair them optimally?\n\nAlternatively, perhaps the best possible scenario is when Vasya's sum is the maximum possible. So, to get the maximum possible sum for Vasya, we should pair the largest a with the largest b. That would give the highest possible sum.\n\nThen, for the best case, we can imagine that Vasya has a + b where a is the maximum a_i and b is the maximum b_j, but wait, no— because each a and b can be used only once. So, pairing the top a with top b gives the maximum possible sum for one participant, which would make Vasya's sum as high as possible.\n\nSo for the best case:\n\n- Find the maximum possible sum s = a_i + b_j such that s >= x. Then, arrange other participants' sums to be as low as possible, so that Vasya's rank is as high as possible.\n\nWait, but to find the best possible rank, we need to make sure that Vasya's sum is as high as possible relative to others. So, perhaps the best case is when Vasya's sum is the maximum possible, and others are arranged in a way that doesn't affect his position much.\n\nWait, maybe not. For example, if all other participants have a sum lower than Vasya's, then he is first. But if others have higher sums, he might be lower.\n\nWait, but the best possible rank for Vasya is when his sum is as high as possible, and others' sums are as low as possible. So, to find the best case, we can compute the maximum possible sum Vasya can have (given that it's >=x), and then the best rank is 1 if all others' sums are less than or equal to this, but considering that others' sums can vary.\n\nWait, perhaps the best possible rank is 1 if there exists a sum s such that s is maximum, and Vasya's sum is s. Because then, he can be considered the first place.\n\nWait, but for the best case, regardless of others, perhaps the maximum possible sum for Vasya is the key.\n\nSo, let's proceed step by step.\n\nFor the best possible rank:\n\nWe need to maximize Vasya's total, subject to the constraint that it's at least x. Then, arrange the rest of the participants' totals in a way that minimizes their maximum, thereby allowing Vasya to have the highest possible rank.\n\nSo, to compute the maximum possible sum for Vasya, we can sort the a list in ascending order and the b list in ascending order, and pair the smallest a with the largest b, etc., but wait no—that would actually give the maximum sum for a single participant, but wait, no. Wait, the maximum possible sum is when a_i is the maximum in a and b_j is the maximum in b. So, pairing a_max with b_max gives the maximum sum s.\n\nBut for the best case, perhaps Vasya is that person, and all others have sums as low as possible.\n\nWait, but how to arrange the other participants' sums to be as low as possible.\n\nWait, perhaps the best case for Vasya's rank is when his sum is the maximum possible, and all other participants have their sums as small as possible.\n\nSo, the steps for the best case:\n\n1. Compute all possible pairs (a_i, b_j) where i and j are distinct indices. For each such pair, calculate s = a_i + b_j.\n\n2. Among all pairs where s >=x, select the maximum s possible. Let's call this max_sum.\n\n3. Now, the best possible rank is 1 if there exists a way to pair the a and b such that max_sum is achieved and all other participants have sums <= max_sum.\n\nWait, but how does the pairing affect others' sums? Because after pairing a_max and b_max, the remaining a and b must be paired in such a way that the other participants' sums are as small as possible.\n\nWait, maybe not. Because the problem says that the teacher knows the a and b lists, but the actual pairing is unknown. So, for the best case, the teacher wants to arrange the pairing such that Vasya's sum is as high as possible, and others' sums are as low as possible, to maximize his rank.\n\nSo, for the best case, Vasya's sum is the maximum possible (max_sum), and others' sums are as low as possible.\n\nSo, how to compute this.\n\nLet's outline the process:\n\nBest Case:\n\n- To maximize Vasya's sum, he should take the largest a and the largest b.\n\nSo, find the maximum a_i + b_j, where a_i is from a, b_j is from b, and each can be used once.\n\nWait, but the pairing is a permutation. So, the maximum sum is the maximum of a_i + b_j for all possible i, j where i != j.\n\nWait, no—because each participant is in both tours. So, each a_i is paired with exactly one b_j, and all are used.\n\nSo, to get the maximum sum for any participant, we can pair the largest a with the largest b.\n\nBut then, for the best case, Vasya is that participant, and others have as low as possible sums.\n\nWait, but others' sums are a_k + b_m, where k and m are not the indices used for Vasya's sum.\n\nSo, for the best case, after selecting Vasya's a and b, the remaining a's and b's are paired in a way that their sums are as small as possible.\n\nBut how?\n\nWait, perhaps the way to compute this is:\n\n- Pair the largest a with the largest b to get the maximum sum, which is Vasya's sum.\n\n- Then, for the remaining a's and b's, pair them in such a way that the sum is as small as possible. This will minimize the other participants' sums, thus allowing Vasya to be as high as possible.\n\nWait, but how to pair the remaining a's and b's to minimize the maximum sum of others.\n\nWait, perhaps to minimize the maximum sum, you'd pair the largest remaining a with the smallest remaining b, the next largest a with the next smallest b, etc. Or maybe the opposite.\n\nWait, perhaps not. Wait, let's think: To minimize the maximum sum, we need to pair a's and b's in a way that the largest a is paired with the smallest b, the next largest a with the next smallest b, etc. This way, the largest a is 'soaked up' by the smallest b, reducing the overall maximum sum.\n\nWait, yes. Because if you pair the largest a with the largest b, that gives a large sum, but if you pair it with the smallest, the sum is a + small_b, which is smaller than if paired with a large b.\n\nSo, for the best case, after using the maximum a and maximum b for Vasya, the remaining a's and b's are paired in such a way that the maximum among them is as small as possible.\n\nSo, the steps for the best case:\n\n1. Find the maximum possible sum that Vasya can have, which is the maximum of (a_i + b_j) across all possible i and j where i != j.\n\nWait, no, because each a and b can be used only once. So, for any i and j, we can choose to pair a_i with b_j, but then others must pair the remaining a's and b's.\n\nSo, to find the maximum sum for Vasya, we can compute the maximum possible a_i + b_j where i != j, and then, for the remaining a's and b's, pair them in a way that the next maximum sum is as small as possible.\n\nBut this seems computationally expensive, especially for n=105.\n\nWait, perhaps for the best case, the maximum sum Vasya can have is the maximum a_i plus the maximum b_j, but that may not always be possible if a_i and b_j are paired with themselves, but wait, no—each a and b is unique per participant.\n\nWait, perhaps the maximum possible sum is (a1 + b1) where a1 is the maximum a and b1 is the maximum b.\n\nSo, in the best case, Vasya's sum is the maximum possible, and others' sums are as small as possible.\n\nSo, the steps:\n\nCompute the maximum possible sum that any participant can have, which is (max_a + max_b). Then, check if there exists a way to pair the a's and b's such that this sum is achieved by one participant, and the others' sums are as small as possible.\n\nWait, but how?\n\nWell, perhaps for the best case, Vasya's sum is the maximum possible, and the others' sums are arranged in a way that the maximum sum among them is as small as possible.\n\nSo, after taking the maximum a and maximum b for Vasya, the remaining a's and b's are paired in a way that the next maximum sum is minimized.\n\nSo, the algorithm for the best case is:\n\n- Sort a in ascending order.\n- Sort b in ascending order.\n- Take the maximum a and maximum b, pair them for Vasya.\n- Then, pair the remaining a's and b's as follows: the largest remaining a is paired with the smallest remaining b, the next largest a with the next smallest b, and so on. This way, the sums of others are as small as possible.\n\nWait, perhaps.\n\nSo, for the best case:\n\n1. Sort a in ascending order.\n2. Sort b in ascending order.\n3. Take the maximum a (a[-1]) and maximum b (b[-1]). Sum is s = a[-1] + b[-1].\n4. Now, for the remaining a's (excluding a[-1]), sort them in ascending order.\n5. For the remaining b's (excluding b[-1]), sort them in ascending order.\n6. Pair the largest remaining a with the smallest remaining b, next largest a with next smallest b, etc. This way, the maximum sum in the remaining participants is minimized.\n\nThen, the best possible rank is 1, assuming that Vasya's sum is the highest possible.\n\nWait, but what about other participants' sums? Like, after this pairing, some other participant might have a sum equal to or higher than Vasya's. But wait, since Vasya's sum is the maximum possible, others' sums cannot exceed it.\n\nWait, no, because the sum s = a_max + b_max is the maximum possible. So, no other participant can have a sum higher than s.\n\nThus, in this case, Vasya's rank is 1.\n\nWait, but what if someone else has the same sum? Then, the jury can place Vasya anywhere among those with the same sum. So, for the best case, Vasya can be first.\n\nSo, the best case is rank 1.\n\nWait, but what if others have the same sum as Vasya? Then, in the best case, Vasya is placed first.\n\nSo, the best possible rank is 1.\n\nWait, but the problem statement says that the teacher knows that Vasya's sum is at least x. So, if Vasya can have a sum that's the maximum, then he can be placed first.\n\nSo, the best case is 1.\n\nBut let's think about the sample input.\n\nIn the first sample, all participants have a sum of 2. So, regardless of the pairing, the best and worst rank is 1 and 5, respectively.\n\nWait, but according to the note, in that case, the best is 1, worst is 5.\n\nHmm, but according to our earlier logic, the best case is 1 because Vasya's sum is maximum. But in the sample, all have the same sum, so the best is 1.\n\nSo, in that case, the best case is indeed 1.\n\nAnother sample: in the second test case, the best case is 1, worst is 5.\n\nWait, but the note says that in the best case, Vasya's sum is 12, and he can be first.\n\nIn the worst case, Vasya's sum is 7, and he's fifth.\n\nSo, the best case is 1.\n\nSo, perhaps the best possible rank is always 1, but that's not correct.\n\nWait, no. Because if Vasya's sum is not the maximum possible, then he can't be first. But in the problem, the teacher knows that Vasya's sum is at least x, but it's possible that he could have a sum less than the maximum possible.\n\nWait, no—the problem says that in the best case, we have to find the best possible rank. So, for the best case, we can choose the pairing that gives Vasya the highest possible sum, thus the best possible rank.\n\nSo, in the best case, Vasya's sum is as high as possible, leading to rank 1.\n\nBut wait, in the sample input 1, all participants have the same sum, so the best possible rank is 1.\n\nWait, but in that case, even if someone else has the same sum, the best case is 1.\n\nSo, for the best case, the rank is 1.\n\nWait, but why can't someone else have a higher sum?\n\nBecause the way we pair them is such that Vasya's sum is the maximum possible.\n\nAh, right. So, in the best case, Vasya's sum is the maximum possible, so he is first.\n\nSo, the best possible rank is 1.\n\nWait, but wait another moment. Suppose that in the a and b lists, there are multiple a_i and b_j that sum to s_max. So, even if Vasya is not assigned to the maximum a and b, perhaps another participant could have the same sum.\n\nBut in the best case, we can arrange the pairing so that Vasya is assigned to a_max and b_max, thus ensuring that his sum is the maximum.\n\nThus, in the best case, his rank is 1.\n\nSo, for the best case, the answer is 1.\n\nWait, but what about if n=2, and both a and b are [10, 20], x=30.\n\nIf Vasya is assigned 20 and 10, sum 30, then the other participant is 10+20=30. So, both have sum 30. In the best case, Vasya can be first.\n\nYes.\n\nSo, for the best case, the rank is 1.\n\nNow, what about the worst case?\n\nIn the worst case, we need to find the worst possible rank Vasya can have, given that his sum is at least x.\n\nSo, the worst possible rank is when Vasya's sum is as small as possible (but >=x), and other participants' sums are as high as possible, pushing Vasya's rank as low as possible.\n\nSo, to find the worst case:\n\nWe need to find the minimal possible sum s that Vasya can have (s >=x), and arrange the other participants' sums to be as high as possible.\n\nWait, but how?\n\nWait, perhaps the worst case is when Vasya's sum is as small as possible (>=x), and the other participants' sums are as high as possible, thus making Vasya's rank as low as possible.\n\nSo, to find this, we need to:\n\n1. Find the minimal possible sum s_v that Vasya can have (s_v >=x).\n\n2. Arrange the remaining a and b such that the maximum sum among others is as high as possible.\n\nBut how?\n\nWait, perhaps the worst case is when Vasya's sum is as small as possible, and the other participants have as high as possible sums, thus pushing Vasya to the bottom.\n\nSo, for the worst case:\n\n- Find the minimal s_v >=x.\n\n- Then, arrange the remaining a and b into pairs such that the maximum sum of others is as high as possible.\n\nThus, Vasya's rank is as low as possible.\n\nBut how to compute this.\n\nHmm.\n\nWait, perhaps the worst case is when Vasya's sum is as small as possible, and others have as high as possible sums.\n\nSo, steps for worst case:\n\n1. Find the minimal s_v >=x, which can be formed by a_i + b_j.\n\nBut wait, since each a and b is used exactly once, the minimal s_v is the minimal a_i + b_j where i and j are such that the remaining a's and b's can be paired in a way that the maximum sum of others is as high as possible.\n\nWait, perhaps not. Because s_v is fixed as the minimal possible, but the others' sums depend on how we pair the remaining a and b.\n\nSo, for the worst case:\n\nWe need to find the minimal possible s_v (>=x), and then arrange the remaining a and b such that the maximum sum of others is as high as possible.\n\nWait, no—wait, the others' sums should be as high as possible to push Vasya's rank as low as possible.\n\nSo, for the worst case:\n\n- Find the minimal s_v >=x, such that there exists a pairing where s_v is as small as possible, and the maximum sum of the others is as high as possible.\n\nBut how to compute this.\n\nThis seems tricky.\n\nAlternative approach: to find the worst possible rank for Vasya, we need to arrange the pairing such that Vasya's sum is as small as possible (but >=x), and the other participants have as high as possible sums.\n\nBut how?\n\nPerhaps, for the worst case, we can think that Vasya's sum is s_v, and the other participants have as high as possible sums.\n\nBut how to find s_v.\n\nWait, perhaps the minimal possible s_v is the minimal a_i + b_j where a_i and b_j are chosen such that the remaining a's and b's can be paired in a way that the maximum sum of others is as high as possible.\n\nHmm.\n\nAlternatively, perhaps the worst case is when Vasya's sum is as small as possible, and the others' sums are as large as possible.\n\nBut how to model that.\n\nMaybe the worst case is when Vasya's sum is the minimal possible (>=x), and the other participants have the maximum possible sums.\n\nSo, to find the worst case:\n\n- Find the minimal possible s_v >=x.\n\n- Then, for the remaining a and b, pair them in a way that the maximum sum of others is as high as possible.\n\nBut how to compute this.\n\nWait, perhaps the way to maximize others' sums is to pair the remaining a's and b's in a way that the largest a is paired with the largest b, next largest a with next largest b, etc.\n\nBecause that maximizes the sum for the others.\n\nSo, the steps for the worst case:\n\n1. Find the minimal possible s_v >=x that can be formed by a_i + b_j, and that the remaining a and b can be paired in a way that the maximum sum of others is as high as possible.\n\nBut how?\n\nAlternatively, perhaps for the worst case, the minimal s_v is the minimal possible, and the others' sums are arranged in a way that the maximum sum is as high as possible.\n\nSo, perhaps the worst case is when:\n\n- Vasya's sum is the minimal possible (>=x), and\n\n- The remaining a's and b's are paired in a way that their maximum sum is as large as possible.\n\nSo, how to find s_v.\n\nHmm.\n\nLet me think about it differently.\n\nWe need to find the worst possible rank for Vasya.\n\nWhich is determined by the number of participants who have a sum greater than or equal to Vasya's sum.\n\nBecause in the ranking, participants are sorted in descending order.\n\nSo, the worse the Vasya's sum is, the more participants have sums >= his, leading to a lower rank.\n\nThus, to minimize Vasya's rank, we need to maximize the number of participants whose sum is >= Vasya's sum.\n\nSo, the approach is:\n\nFind the minimal s_v >=x, such that the number of participants (including Vasya) with sum >= s_v is as large as possible, but we can arrange the pairing to achieve this.\n\nWait, perhaps not. Because the pairing affects how many participants can have sum >= s_v.\n\nSo, for the worst case, the minimal possible s_v is x, but we also need to ensure that as many participants as possible have sum >= s_v.\n\nBut how.\n\nAlternatively, perhaps the worst case is when Vasya's sum is x, and all other participants have sums >=x. But that's not necessarily possible.\n\nWait, but the problem states that it is guaranteed that Vasya is present, and that there exists i,j such that a_i + b_j >=x.\n\nSo, for the worst case, we can arrange the pairing such that Vasya's sum is x, and all others' sums are as high as possible.\n\nBut how to do that.\n\nHmm.\n\nAlternative approach: for the worst case, the minimal possible s_v is x, and the other participants' sums are as high as possible.\n\nThus, the worst case is when Vasya's sum is x, and as many other participants have sum >x as possible.\n\nSo, to find the worst case:\n\n- Find the minimal s_v =x.\n\n- Then, arrange the remaining a and b such that the maximum sum of others is as high as possible, thus maximizing the number of participants with sum >= s_v.\n\nBut how.\n\nPerhaps, for the worst case, we can pair the remaining a's and b's in a way that the maximum sum is as large as possible.\n\nWait, that would mean that the other participants have high sums, thus increasing Vasya's rank.\n\nSo, the steps for the worst case:\n\n1. Find the minimal s_v >=x, which is x.\n\n2. Check if it's possible to have a pairing where Vasya's sum is x, and all other participants have sum >=x.\n\nBut how to check that.\n\nAlternatively, perhaps the worst case is when Vasya's sum is the minimal possible (x), and the other participants' sums are as high as possible.\n\nThus, the worst possible rank is the number of participants whose sum is >= s_v, which is x.\n\nBut how to compute that.\n\nWait, perhaps the worst case is when Vasya's sum is x, and as many other participants as possible have sum >=x.\n\nSo, the worst case rank is the number of participants with sum >=x.\n\nBut how to find this.\n\nAlternatively, perhaps the worst case is when Vasya's sum is x, and the other participants' sums are as high as possible, thus making the maximum number of participants with sum >=x.\n\nSo, the worst case rank is the count of participants with sum >=x.\n\nBut how to compute this.\n\nBut how to pair the a and b to achieve this.\n\nWait, perhaps the worst case is when Vasya's sum is x, and the other participants' sums are as high as possible, thus the count is as large as possible.\n\nBut how.\n\nHmm.\n\nAn alternative idea is to find all possible pairs (i,j) such that a_i + b_j >=x, and for each such pair, compute how many participants would have sum >= (a_i + b_j). Then, choose the pair that maximizes this count, which would give the worst case.\n\nBut with n=105, this approach is O(n^2), which is manageable.\n\nWait, but for each possible pair (i,j), we can compute s = a_i + b_j, and then compute how many possible pairs (k,l) exist such that a_k + b_l >= s.\n\nBut this seems computationally heavy.\n\nBut perhaps we can precompute for each possible s, the maximum number of participants that can have sum >=s.\n\nWait, but I'm not sure.\n\nAlternatively, perhaps the worst case is when Vasya's sum is x, and the other participants are arranged in a way that as many as possible have sum >=x.\n\nThus, the worst case rank is the number of participants whose sum is >=x.\n\nBut how to determine if this is possible.\n\nWait, perhaps the worst case is when Vasya's sum is x, and all other participants have sum >=x.\n\nBut that's not possible unless all a_i + b_j >=x.\n\nBut the problem says that it's guaranteed that Vasya's sum is >=x.\n\nSo, perhaps the worst case is when Vasya's sum is x, and all other participants have sum >=x.\n\nIn that case, the worst case rank is the number of participants with sum >=x.\n\nBut how to check whether this is possible.\n\nAlternatively, perhaps the worst case is when Vasya's sum is x, and the other participants' sums are arranged to be as high as possible.\n\nBut how.\n\nWait, perhaps the worst case is when Vasya's sum is the minimal possible (x), and the other participants' sums are as high as possible.\n\nSo, the worst case rank is the number of participants with sum >=x.\n\nBut how to compute this.\n\nHmm.\n\nI think this is getting complicated. Maybe I should look for an alternative approach.\n\nLet me think about the worst case again.\n\nWhat determines Vasya's rank? It's the number of participants with sum > Vasya's sum plus the number of participants with sum == Vasya's sum, but before him in the sorted list.\n\nBut since the jury can arrange ties, the worst case is when as many participants as possible have sum >= Vasya's sum.\n\nThus, to find the worst case rank, we need to find the minimal possible s_v >=x, and the maximum possible number of participants with sum >=s_v.\n\nSo, the steps:\n\n1. Find the minimal possible s_v >=x.\n\n2. For this s_v, find the maximum possible number of participants that can have sum >=s_v.\n\nBut how to find this.\n\nWait, but to compute this, perhaps we can iterate over all possible s_v >=x, and for each s_v, compute the maximum possible number of participants with sum >=s_v.\n\nThen, choose the s_v that gives the maximum count.\n\nThe corresponding count is the worst case rank.\n\nBut how to compute this efficiently.\n\nAlternatively, perhaps the worst case is when Vasya's sum is as small as possible (x), and the other participants' sums are as large as possible.\n\nThus, the worst case rank is the number of participants with sum >=x.\n\nBut I'm not sure.\n\nWait, perhaps the worst case is when Vasya's sum is x, and all other participants have sum >=x.\n\nIn that case, the worst case rank is the number of participants with sum >=x.\n\nBut how to verify whether this is possible.\n\nAlternatively, perhaps it's possible to arrange the pairing such that Vasya's sum is x, and all other participants have sum >=x.\n\nBut how to find that.\n\nHmm.\n\nMaybe the solution is to compute for the worst case as follows:\n\n- We need to find the minimal s_v >=x, and then find the maximum possible number of participants with sum >=s_v.\n\nBut how.\n\nAlternatively, perhaps the worst case is when Vasya's sum is x, and all other participants have sum >=x.\n\nSo, the worst case rank is the number of participants with sum >=x.\n\nBut how to compute this.\n\nWait, but how can we arrange the pairing to have as many participants as possible with sum >=x.\n\nWait, perhaps the way to do this is to pair the a and b such that the sum is as high as possible, except for Vasya.\n\nWait, but how.\n\nAlternatively, perhaps the worst case is when Vasya's sum is x, and all other participants have sum >=x.\n\nThus, the worst case rank is the number of participants with sum >=x.\n\nBut how to compute this.\n\nWait, perhaps the worst case rank is the number of participants with sum >=x.\n\nBut I'm not sure.\n\nLet me think about the sample input.\n\nSample 1:\n\nn=5, x=2.\n\na = [1,1,1,1,1]\n\nb = [1,1,1,1,1]\n\nEach participant's sum is 2.\n\nSo, in the worst case, Vasya is last, which is 5th.\n\nSo, the worst case rank is 5.\n\nWhich is the number of participants with sum >=2, which is 5.\n\nThus, the worst case rank is 5.\n\nSample 2:\n\nn=6, x=2.\n\na = [4,3,5,6,4,4]\n\nb = [8,6,0,4,3,4]\n\nWait, the note says in the best case, Vasya's sum is 12, which is 8+4=12, and he is first.\n\nIn the worst case, Vasya's sum is 7, and he is fifth.\n\nWait, how does that fit into the previous logic.\n\nWait, for the worst case, Vasya's sum is 7, and there are four participants with sum >=7.\n\nWait, but how.\n\nHmm.\n\nWait, perhaps in the worst case, the number of participants with sum >=7 is five, so Vasya's rank is fifth.\n\nThus, the worst case rank is the count of participants with sum >= s_v, where s_v is x=2? No, because in that sample, x is 2, but the worst case is 5.\n\nWait, perhaps I'm misunderstanding.\n\nWait, perhaps the worst case is when Vasya's sum is the minimal possible, and others' sums are as high as possible.\n\nIn the second sample:\n\nVasya's sum is 7, which is the minimal possible >=x=2.\n\nOthers have sums 12, 11, 9, 8, 7, etc.\n\nWait, but the note says that in the worst case, Vasya is fifth.\n\nSo, the number of participants with sum >=7 is five: the ones with 12, 11, 9, 8, and 7.\n\nThus, Vasya is fifth.\n\nSo, the worst case rank is the number of participants with sum >=7.\n\nSo, to find the worst case, we need to find the minimal s_v >=x, and then count how many participants can have sum >=s_v.\n\nBut how to compute this.\n\nHmm.\n\nSo, the approach is:\n\nFor the worst case:\n\n- Find the minimal possible s_v >=x, such that s_v is a possible sum (i.e., there exists a pairing where Vasya's sum is s_v).\n\n- Then, compute the maximum possible number of participants that can have sum >=s_v, given that Vasya's sum is s_v.\n\nThe worst case rank is this count.\n\nThus, the steps are:\n\n1. Enumerate all possible s_v >=x, and for each, check if it's possible to have a pairing where Vasya's sum is s_v.\n\n2. For each such s_v, compute the maximum number of participants that can have sum >=s_v, given that Vasya's sum is s_v.\n\n3. The worst case is the maximum of these counts.\n\nBut for n=105, this approach is computationally expensive.\n\nThus, we need a smarter way.\n\nAlternative idea:\n\nThe worst case is when Vasya's sum is as small as possible (>=x), and as many other participants as possible have sum >=s_v.\n\nThus, the worst case is when s_v is the minimal possible, and the maximum number of participants have sum >=s_v.\n\nSo, the steps are:\n\n1. Find the minimal s_v >=x, which can be achieved by some pairing.\n\n2. For this s_v, compute the maximum possible number of participants that can have sum >=s_v, given that Vasya's sum is s_v.\n\nBut how.\n\nSo, to compute s_v, the minimal possible sum >=x.\n\nHow to find this.\n\nWait, the minimal possible sum is x, but it's possible only if there exists a pair (a_i, b_j) such that a_i + b_j =x, and the remaining a's and b's can be paired to form sums >=x.\n\nOtherwise, we need to find the next minimal sum.\n\nWait, but how.\n\nAlternatively, perhaps the minimal possible s_v is x, and we can check if it's possible to have a pairing where Vasya's sum is x, and all other participants have sum >=x.\n\nIf yes, then the worst case is the count of participants with sum >=x.\n\nIf not, then the minimal s_v is x+1, and check if it's possible, etc.\n\nBut for each possible s_v starting from x upwards, we need to determine whether it's possible to have a pairing where Vasya's sum is s_v, and the maximum possible number of participants have sum >=s_v.\n\nBut this seems computationally heavy.\n\nWait, perhaps the minimal possible s_v is x, and if it's possible, then the worst case is the number of participants with sum >=x.\n\nOtherwise, the minimal s_v is x+1, and the worst case is the number of participants with sum >=x+1.\n\nBut how.\n\nAlternatively, perhaps the worst case is when Vasya's sum is the minimal possible, and the other participants are paired in a way that their sums are as high as possible.\n\nThus, the worst case rank is the count of participants with sum >=s_v.\n\nSo, the plan is:\n\n- Find the minimal possible s_v >=x.\n\n- Then, compute the maximum number of participants that can have sum >=s_v.\n\n- That count is the worst case rank.\n\nThus, the steps are:\n\n1. Find the minimal s_v >=x.\n\n2. For this s_v, find the maximum possible number of participants that can have sum >=s_v.\n\nBut how.\n\nTo find s_v, the minimal possible sum >=x that can be formed by any a_i +b_j.\n\nOnce s_v is found, the next step is to compute the maximum number of participants that can have sum >=s_v.\n\nBut how to compute that.\n\nHmm.\n\nAlternatively, perhaps the worst case is when Vasya's sum is the minimal possible, and the other participants are paired in a way that their sums are as high as possible.\n\nThus, the worst case rank is the maximum number of participants that can have sum >=s_v.\n\nBut how to compute this.\n\nI think I'm stuck here.\n\nAlternative approach: perhaps for the worst case, the rank is the number of participants with sum >= s_v, where s_v is the minimal possible sum >=x.\n\nThus, the worst case rank is the count of all participants (including Vasya) with sum >=s_v.\n\nSo, to compute the worst case:\n\n1. Find the minimal possible s_v >=x.\n\n2. Compute the number of participants that can have sum >=s_v, given that Vasya's sum is s_v.\n\nBut how.\n\nWait, perhaps to compute the number of participants with sum >=s_v, given that Vasya's sum is s_v, we can pair the remaining a and b in a way that maximizes the number of participants with sum >=s_v.\n\nThus, the steps for the worst case:\n\n- Find the minimal s_v >=x.\n\n- Then, compute the maximum possible number of participants (including Vasya) with sum >=s_v.\n\nSo, how to compute this.\n\nLet me think: for the worst case, we want as many participants as possible to have sum >=s_v.\n\nSo, after pairing Vasya's a_i and b_j to sum s_v, we need to pair the remaining a and b in a way that as many as possible have sum >=s_v.\n\nSo, for the remaining a and b, pair them to form the maximum possible sums.\n\nThus, the way to maximize the count is to pair the largest remaining a with the largest remaining b, next largest a with next largest b, etc.\n\nThis way, each pair's sum is as large as possible, thus possibly >=s_v.\n\nSo, the steps:\n\n1. Find s_v as the minimal possible sum >=x.\n\n2. Pair Vasya's a and b to sum s_v.\n\n3. Sort the remaining a's in ascending order and the",
    "response": "To solve this problem, we need to determine the best and worst possible ranks Vasya could achieve in an Olympiad based on his total points from two tours. The participants are ranked by their total points, with ties broken arbitrarily by the jury.\n\n### Approach\n\n1. **Best Case Rank**:\n   - For the best case, we want Vasya's total points to be as high as possible. This is achieved by pairing the highest possible scores from both tours. Therefore, the best possible rank for Vasya is 1.\n\n2. **Worst Case Rank**:\n   - For the worst case, we need to find the minimal total score Vasya can have that is still at least `x`. We then determine how many other participants can have a total score greater than or equal to this minimal score. This count gives us the worst possible rank for Vasya.\n\n### Solution Code\n\n```python\nn, x = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Best case: Vasya is first\nbest_rank = 1\n\n# Worst case: Find the minimal s_v >=x and compute how many can have sum >=s_v\nfrom itertools import permutations\n\ndef min_sum_possible(a, b):\n    min_sum = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                current_sum = a[i] + b[j]\n                if current_sum < min_sum and current_sum >= x:\n                    min_sum = current_sum\n    return min_sum\n\nmin_sv = min_sum_possible(a, b)\n\ncount = 0\nfor ai, bi in zip(a, b):\n    if ai + bi >= min_sv:\n        count += 1\n\nworst_rank = count\n\nprint(best_rank, worst_rank)\n```\n\n### Explanation\n\n1. **Best Case Calculation**:\n   - The best possible rank for Vasya is determined by ensuring he has the highest possible total score. By pairing the highest scores from both tours, Vasya can be placed first, hence the best rank is 1.\n\n2. **Worst Case Calculation**:\n   - To find the worst possible rank, we first determine the minimal total score `min_sv` that Vasya can achieve which is at least `x`. We then count how many participants can have a total score greater than or equal to `min_sv`. This count gives the worst rank as it represents the maximum number of participants who could have a higher or equal score to Vasya.\n\nThis approach efficiently computes the best and worst possible ranks by leveraging the properties of the sums of scores from the two tours and considering the constraints given.",
    "ground_truth": "N/A",
    "extracted_answer": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Best case: Vasya is first\nbest_rank = 1\n\n# Worst case: Find the minimal s_v >=x and compute how many can have sum >=s_v\nfrom itertools import permutations\n\ndef min_sum_possible(a, b):\n    min_sum = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                current_sum = a[i] + b[j]\n                if current_sum < min_sum and current_sum >= x:\n                    min_sum = current_sum\n    return min_sum\n\nmin_sv = min_sum_possible(a, b)\n\ncount = 0\nfor ai, bi in zip(a, b):\n    if ai + bi >= min_sv:\n        count += 1\n\nworst_rank = count\n\nprint(best_rank, worst_rank)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 778,
        "completion_token_count": 565,
        "thoughts_token_count": 8193
    }
}