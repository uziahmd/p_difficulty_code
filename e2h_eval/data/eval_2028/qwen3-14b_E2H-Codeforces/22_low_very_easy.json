{
    "start": 1758309332.6966813,
    "end": 1758309554.5754154,
    "start-formatted": "2025-09-20 04:15 KST",
    "end-formatted": "2025-09-20 04:19 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A successful student is one who is the best in at least one subject. Being the best in a subject means no one else has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where they have the maximum mark for that subject.\n\nHmm, first, I need to read the input. The input starts with n and m, then n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the first student's marks for three subjects.\n\nSo, the plan is:\n\n1. For each subject (columns), find the maximum mark.\n2. For each student, check if in any of the subjects they have that maximum mark. If yes, they are successful.\n3. Count how many such students there are.\n\nWait, but how do I process the data? Let's think about the steps.\n\nFirst, read n and m. Then read n lines, each line being a string of m digits. Then, for each column (subject), find the maximum value. Then, for each student, check if any of their marks in the columns is equal to the maximum of that column. If at least one exists, count them.\n\nSo, for example, in the first sample input:\n\n3 3\n223\n232\n112\n\nThe subjects are columns 0,1,2 (assuming zero-based). Let's look at each column:\n\nSubject 0: 2, 2, 1 → max is 2. So students 1 and 2 have 2 here. But student 1 has 2 in subject 0, which is the max. Student 2 also has 2 in subject 0. Wait, but the first sample says student 1 is best in subjects 1 and 3 (but maybe the subjects are 1-based? Or maybe the note's example is using 1-based indexing.)\n\nWait, the note says in the first sample, student 1 is best at subjects 1 and 3. Let me check the input. The first student's marks are 2, 2, 3. The second student's marks are 2, 3, 2. Third is 1,1,2.\n\nFor subject 1 (assuming 1-based?), let's see:\n\nSubject 1 (second column) for the first student is 2, second student is 3, third is 1. So the max is 3. So only student 2 is best here. But according to the note, student 1 is best at subject 1? Wait, maybe I'm misunderstanding the note.\n\nWait the note says in the first sample test, student 1 is best at subjects 1 and 3. Let me check:\n\nOriginal input is:\n\nStudent 1: 2 2 3 → subjects 1, 2, 3?\n\nWait, perhaps the subjects are 1-based. Let me check the first sample:\n\nFor subject 1 (the first column?), the marks are 2, 2, 1. So the max is 2. Both student 1 and 2 have 2 here. So they are both best in subject 1? But according to the note, student 1 is best in subject 1. But then why isn't student 2 considered best in subject 1?\n\nWait, the note says that student 1 is best at subjects 1 and 3. Let me re-examine the sample input.\n\nWait, the first sample input is:\n\n3 3\n\n223 → student 1's marks are 2, 2, 3.\n\n232 → student 2's marks are 2, 3, 2.\n\n112 → student 3's marks are 1, 1, 2.\n\nSo for subject 1 (first column):\n\nstudents have 2, 2, 1. Max is 2. So students 1 and 2 are best in subject 1. But according to the note, student 1 is best at subject 1 and 3. Student 2 is best at subjects 1 and 2. But how?\n\nAh, for subject 2 (second column):\n\nstudent 1 has 2, student 2 has 3, student 3 has 1. Max is 3. So only student 2 is best here.\n\nFor subject 3 (third column):\n\nstudent 1 has 3, student 2 has 2, student 3 has 2. Max is 3. Only student 1 is best here.\n\nSo student 1 is best in subject 3, and subject 1 (since he has 2, which is the max). Student",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their performance in various subjects. A student is considered successful if they are the best in at least one subject. The best student in a subject is defined as having the highest mark for that subject.\n\n### Approach\n1. **Input Reading**: Read the number of students (n) and subjects (m), followed by the gradebook data.\n2. **Determine Maximum Marks per Subject**: For each subject, find the maximum mark achieved by any student.\n3. **Identify Successful Students**: For each student, check if they have the maximum mark in at least one subject. If so, they are considered successful.\n4. **Count Successful Students**: Count how many students meet the criteria of being successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\ngrades = [input().strip() for _ in range(n)]\n\n# Find the maximum for each subject (column)\nmax_per_subject = []\nfor col in range(m):\n    max_val = 0\n    for row in range(n):\n        val = int(grades[row][col])\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\n# Check each student if they have at least one max in any subject\ncount = 0\nfor row in range(n):\n    for col in range(m):\n        if int(grades[row][col]) == max_per_subject[col]:\n            count += 1\n            break\n\nprint(count)\n```\n\n### Explanation\n1. **Reading Input**: The first line of input is split into integers `n` (number of students) and `m` (number of subjects). The subsequent lines are read as strings representing the grades of each student.\n2. **Finding Maximum Marks per Subject**: For each subject (column), iterate through all students to determine the highest mark achieved.\n3. **Checking for Successful Students**: For each student, check if they have the highest mark in any subject. If they do, increment the count of successful students.\n4. **Output the Result**: Print the total count of successful students.\n\nThis approach ensures that we efficiently determine the successful students by leveraging the maximum values for each subject and checking each student against these values. The complexity is linear with respect to the number of students and subjects, making it efficient for the given constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrades = [input().strip() for _ in range(n)]\n\n# Find the maximum for each subject (column)\nmax_per_subject = []\nfor col in range(m):\n    max_val = 0\n    for row in range(n):\n        val = int(grades[row][col])\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\n# Check each student if they have at least one max in any subject\ncount = 0\nfor row in range(n):\n    for col in range(m):\n        if int(grades[row][col]) == max_per_subject[col]:\n            count += 1\n            break\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 493,
        "thoughts_token_count": 1024
    }
}