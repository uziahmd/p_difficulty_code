{
    "start": 1758309445.032441,
    "end": 1758309679.3177907,
    "start-formatted": "2025-09-20 04:17 KST",
    "end-formatted": "2025-09-20 04:21 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's see. I need to find the smallest non-negative integer k such that the LCM of (a + k) and (b + k) is minimized. And if there are multiple k's with the same minimal LCM, pick the smallest one.\n\nHmm. Let me think about how to approach this. The problem is to find k that minimizes LCM(a+k, b+k). Let's denote x = a + k and y = b + k. Then since k is non-negative, x and y are at least a and b respectively. Also, since k is the same for both, the difference between x and y is (a - b). Wait, because x - y = (a +k) - (b +k) = a - b. So, x - y = a - b. Let me think: suppose a < b. Then x would be smaller than y. Or maybe not. Wait, if a is 6 and b is 10, then for k=2, x=8 and y=12. So x is smaller than y. But their difference is 4, which is a - b? No, a is 6, b is 10, so a - b is -4. So x - y is (a - b) = -4. So in general, x = a +k, y = b +k. So y -x = b -a. So the difference between the two numbers is fixed as (b -a), regardless of k. \n\nSo the problem reduces to finding two numbers x and y, where y -x = d (d is |a -b|?), such that their LCM is minimized. And then find the smallest k that gives this.\n\nWait, let me rephrase. Let me assume that a and b are given. Let me compute d = |a - b|. Then, the two numbers x and y must differ by d. So, for example, if a is 6 and b is 10, d is 4. Then x and y are (a +k) and (b +k) which differ by 4. So the problem becomes: find x and y such that y = x + d, and their LCM is minimized. Then, find the smallest k such that x = a +k, and y = b +k. Which implies that x can be any number >= a (if k is non-negative), but also y = x + d. Wait, but since d is |a -b|, let's say that a <= b. Then d = b -a. Then, y = x + d. But since y = b +k and x = a +k, then substituting, y = x + (b -a) = x + d. So yes. So the problem is equivalent to finding x such that x >= a (since k is non-negative, and x = a +k), and y = x + d, and LCM(x, y) is minimized. Then, once we find x, k is x - a.\n\nBut wait, what if a is larger than b? Then d = a - b, and y = x - d. So perhaps I should take d as |a -b|, and then the difference between the two numbers is d. So regardless of which is bigger, the difference is d. So the problem becomes: find x such that x >= min(a, b) (since k is non-negative, and if a is bigger than b, then x would be a +k, which is larger than a, but then y would be b +k, which is smaller than x. But in that case, the difference between x and y is a - b = d. So regardless of which is larger, the difference between the two numbers is d. \n\nSo the key is to find x and y = x + d (or x - d, depending on which is larger), such that LCM(x, y) is minimized. \n\nNow, how do I find x such that LCM(x, y) is minimized, given that y = x + d (assuming d is fixed)?\n\nLet me think about LCM(x, y). Since LCM(x, y) = x*y / GCD(x, y). So to minimize LCM(x, y), we need to maximize GCD(x, y), because x*y is fixed? No, wait, x and y are varying. For example, if d is fixed, then y = x + d. So for each x, y is determined. So LCM(x, x + d) = x*(x +d)/GCD(x, x +d). But GCD(x, x +d) = GCD(x, d). Because GCD(x, x +d) = GCD(x, d). So, the LCM is x*(x +",
    "response": "To solve the problem of finding the smallest non-negative integer `k` such that the least common multiple (LCM) of `a + k` and `b + k` is minimized, we need to understand a few key properties:\n\n---\n\n### Key Observations\n\n1. **Difference Between Values**:\n   Let `d = |a - b|`. Then, the values `(a + k)` and `(b + k)` differ by exactly `d`.\n\n2. **LCM and GCD Relationship**:\n   The LCM of two numbers `x` and `y` is given by:\n   $$\n   \\text{LCM}(x, y) = \\frac{x \\cdot y}{\\text{GCD}(x, y)}\n   $$\n   Since `y = x + d`, the LCM becomes:\n   $$\n   \\text{LCM}(x, x + d) = \\frac{x(x + d)}{\\text{GCD}(x, d)}\n   $$\n\n3. **Optimization Insight**:\n   To minimize the LCM, we should maximize the GCD of the two numbers, which depends on the GCD of `x` and `d`. This suggests we want to find an `x` such that `x` is divisible by a large divisor of `d`.\n\n---\n\n### Strategy\n\nWe can iterate over all divisors of `d`, and for each divisor `g`, compute the smallest `x` such that:\n- `x % g == 0`\n- `x >= min(a, b)`\n- The resulting `k = x - a` (or `x - b`, depending on which is smaller) is minimized.\n\nThe optimal solution will be the one with the smallest LCM, and in case of ties, the smallest `k`.\n\n---\n\n### Implementation\n\nHere's the Python code that implements the above logic efficiently:\n\n```python\nimport sys\nimport math\n\ndef get_divisors(n):\n    divisors = set()\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    d = abs(a - b)\n    \n    if d == 0:\n        print(0)\n        return\n    \n    min_lcm = float('inf')\n    best_k = float('inf')\n    \n    # Iterate through all divisors of d\n    for g in get_divisors(d):\n        # Compute x such that x % g == 0, and x >= min(a, b)\n        m = min(a, b)\n        x = ((m + g - 1) // g) * g\n        \n        # Compute k\n        k = x - a if a < b else x - b\n        \n        # Compute LCM of x and x + d\n        y = x + d\n        gcd_val = math.gcd(x, y)\n        lcm = (x * y) // gcd_val\n        \n        # Update minimum\n        if lcm < min_lcm or (lcm == min_lcm and k < best_k):\n            min_lcm = lcm\n            best_k = k\n    \n    print(best_k)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n### Example Walkthrough\n\nFor input `6 10`:\n- `d = 4`, and we check all divisors of 4: `{1, 2, 4}`\n- For `g = 2`, the smallest `x >= 6` that is divisible by 2 is 6.\n- Then, `k = 6 - 6 = 0` gives `a+k = 6`, `b+k = 10` → LCM = 30.\n- But for `g = 2` and `x = 8`, `k = 2` gives `a+k = 8`, `b+k = 12` → LCM = 24.\n\nSo the minimal LCM is 24, achieved at `k = 2`.\n\n---\n\n### Edge Cases Handled\n\n- When `a == b`: LCM is just `a + k`, so `k = 0` is the answer.\n- Very large values (up to `10^9`) are handled efficiently using divisor generation via square root.\n\nThis approach ensures correctness and efficiency for all valid inputs.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef get_divisors(n):\n    divisors = set()\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    d = abs(a - b)\n    \n    if d == 0:\n        print(0)\n        return\n    \n    min_lcm = float('inf')\n    best_k = float('inf')\n    \n    # Iterate through all divisors of d\n    for g in get_divisors(d):\n        # Compute x such that x % g == 0, and x >= min(a, b)\n        m = min(a, b)\n        x = ((m + g - 1) // g) * g\n        \n        # Compute k\n        k = x - a if a < b else x - b\n        \n        # Compute LCM of x and x + d\n        y = x + d\n        gcd_val = math.gcd(x, y)\n        lcm = (x * y) // gcd_val\n        \n        # Update minimum\n        if lcm < min_lcm or (lcm == min_lcm and k < best_k):\n            min_lcm = lcm\n            best_k = k\n    \n    print(best_k)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 403,
        "completion_token_count": 938,
        "thoughts_token_count": 1024
    }
}