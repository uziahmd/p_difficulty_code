{
    "start": 1758313931.8651474,
    "end": 1758314898.8330235,
    "start-formatted": "2025-09-20 05:32 KST",
    "end-formatted": "2025-09-20 05:48 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's tackle this problem. Hmm, the problem is about finding the minimum number of nodes required for a directed graph to be p-reachable, and then among those graphs, find the maximum number of unidirectional pairs. \n\nFirst, let's understand what p-reachable means. A p-reachable graph has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. Wait, but reachability here is mutual. So for each such pair (u, v), both can reach each other. And we need exactly p such pairs. \n\nThe first part is to find the minimum number of nodes needed. Let's think about how to model this. For a graph with n nodes, the maximum number of such pairs (u, v) with u < v and mutual reachability would be when all nodes are in a single strongly connected component (SCC). Because in that case, every pair (u, v) where u < v is counted. The number of such pairs would be C(n, 2) = n*(n-1)/2. But if there are multiple SCCs, then pairs between different components may not be counted. \n\nWait, but the p-reachable condition requires exactly p such pairs. So the minimal n is the smallest integer such that C(n, 2) ≥ p. But wait, no. Because maybe there's a way to have some structure where the number of mutual pairs is exactly p, but with fewer nodes than that. Wait, no. For example, if we have a graph with two components: one being a single node, and another being a component with k nodes. Then, the number of mutual pairs would be C(k, 2). So if p is less than C(k, 2), but we can't get it with a smaller k. So the minimal n is determined by the minimal n such that C(n, 2) ≥ p, and then arrange the graph so that exactly p pairs are mutual. \n\nWait, but how? Because if you have a graph with n nodes, and you arrange them into a single SCC, then you have C(n,2) mutual pairs. If you want exactly p, perhaps you can split some nodes into a separate component. For example, suppose n is the minimal such that C(n, 2) ≥ p. Then, if we take a graph where one component is a single node, and the rest form a complete SCC. Then the number of mutual pairs would be C(n-1, 2). So if p is between C(n-1, 2) and C(n, 2), then the minimal n is n, and we can adjust the graph to have exactly p pairs. \n\nBut how to find the minimal n? Let's think of it as the minimal n where C(n, 2) >= p. Because even if you have a graph with n nodes, but not all in one SCC, you can't get more than C(n, 2) mutual pairs. So to get exactly p, you need to have at least n nodes where C(n, 2) >= p. \n\nSo for example, if p=3, then C(3,2)=3. So n is 3. So the minimal nodes is 3. \n\nIn the sample input, for p=3, output is 3 0. The second part is the maximum number of unidirectional pairs. How does that work?\n\nUnidirectional pairs are ordered pairs (u, v) where u != v, there's a path from u to v, but not vice versa. So for the graph with 3 nodes, if all are in a single SCC, then there are no unidirectional pairs. Because any pair (u, v) is mutual. But if the graph is structured such that some pairs are unidirectional, then the count would be higher. However, the problem says that for the minimal n, which is 3, the maximum number of unidirectional pairs is 0. Which suggests that in this case, the graph must be such that all pairs are mutual. Because otherwise, if there's a way to have some unidirectional pairs, but still have exactly p mutual pairs. \n\nWait, but the p-reachable condition requires exactly p mutual pairs. So the minimal n is determined based on the maximum possible mutual pairs. So for example, if n is chosen such that C(n,2) >= p, then the minimal n is the smallest n where this holds. Then, the way to get exactly p mutual pairs is to have a graph that has exactly p such pairs. For example, if you have a complete SCC of k nodes, and some other nodes arranged in a way that they don't contribute to mutual pairs. \n\nBut how to arrange that? Let's think. Suppose n is the minimal such that C(n, 2) >= p. Then, the minimal n is the answer for the first part. \n\nSo the first step is to find the minimal n where C(n, 2) >= p. Let me think about how to compute that. For example, solving n(n-1)/2 >= p. So n^2 -n - 2p >=0. Solving for n, the positive root is [1 + sqrt(1 + 8p)] / 2. So the minimal n is the ceiling of that value. \n\nWait, but for example, if p=3, then sqrt(1+24)=5, so (1+5)/2=3. So n=3. Which matches the sample. For p=4, the same formula gives (1 + sqrt(33))/2 ≈ (1+5.744)/2 ≈ 3.37. So ceiling is 4. But C(3,2)=3 <4. So minimal n is 4. But wait, for n=4, C(4,2)=6. So if p=4, the minimal n is 4. But maybe there's a way to arrange the graph with n=3. Let's see: for n=3, the maximum possible mutual pairs is 3. So if p is 4, then it's impossible. Hence, the minimal n is 4. \n\nSo the first part of the problem is to find the minimal n such that C(n, 2) >= p. But wait, what if p is zero? Then, the minimal n is 1? Because with n=1, there are zero pairs. But according to the sample input, when p=0, the output is 0 0. Wait, the sample input includes p=0, and output is '0 0'. Wait, but the problem says that the graph must have exactly p ordered pairs (u, v) with u < v and mutual reachability. For p=0, that means there are zero such pairs. How can that be achieved? Well, if the graph has no nodes, but that's probably not allowed. Wait, the problem says \"the minimum number of nodes required to create a p-reachable directed graph.\" So for p=0, the graph can be any graph with no mutual pairs. But the minimal number of nodes would be 1. Because with one node, there are zero pairs (since u < v is not possible). So for p=0, the minimal n is 1. But according to the sample input, when p=0, the output is '0 0'. Wait, the sample input shows that for input 0, output is 0 0. But that contradicts with our reasoning. Wait, looking back:\n\nIn the sample input, the third input is 0, and the output is '0 0'. So according to the sample, when p=0, the minimal number of nodes is 0? That can't be right. Wait, maybe I misunderstood the problem statement.\n\nWait, the problem says \"the minimum number of nodes required to create a p-reachable directed graph.\" So for p=0, the graph must have exactly zero ordered pairs (u, v) where u < v and they are mutually reachable. So the graph can be any graph with that property. What is the minimal number of nodes?\n\nIf the graph has zero nodes, then there are zero pairs. So that's possible. But the sample output for p=0 is 0 0. So that's correct. But how can a graph have zero nodes? Well, perhaps the problem allows that. But maybe the problem requires that the graph has at least one node. Wait, but the sample shows that for p=0, the answer is 0. So perhaps the problem allows for zero nodes when p=0.\n\nBut that seems odd. Let me check the note for the first test case. For p=3, the minimal number is 3. So for p=0, the minimal number is zero? That's the sample. So according to that, the answer for p=0 is 0 nodes. But how can a graph with zero nodes be considered? Well, perhaps the problem considers that the number of pairs is zero, which meets the requirement. So that's the case.\n\nBut then, for p=0, the minimal number of nodes is zero. But for p=0, the minimal number could also be 1. Because with 1 node, there are no pairs. But the sample shows 0. So perhaps the problem allows for zero nodes. So we need to handle that.\n\nSo the first part of the problem is to find the minimal n such that the maximum possible mutual pairs is >= p, but also considering that when p=0, n=0 is allowed.\n\nBut how to model this. Let's think again. Let's consider the minimal n such that the maximum possible number of mutual pairs in a graph with n nodes is >= p. However, when p is zero, the maximum possible is zero, which is achieved by n=0. So for p=0, the answer is 0 nodes.\n\nBut for p>0, the minimal n is the minimal n where C(n, 2) >= p. Because for that n, the maximum number of mutual pairs is C(n, 2), which is >= p. So we can arrange the graph to have exactly p mutual pairs. \n\nBut how to compute this n. Let's proceed:\n\nFor p=0, n=0.\n\nElse, compute the minimal n such that n*(n-1)/2 >= p.\n\nSo for example, p=3, n=3.\n\nNow, once we have the minimal n, the next part is to find the maximum number of unidirectional pairs possible in such graphs.\n\nSo the second part of the problem is, given that the minimal n is fixed, find the maximum number of unidirectional pairs possible in a p-reachable graph with n nodes.\n\nSo how to approach this.\n\nFirst, for the minimal n, the graph must have exactly p mutual pairs. But how to arrange the graph to maximize the number of unidirectional pairs.\n\nLet me think about the structure of the graph. The unidirectional pairs are those where u can reach v but not vice versa. To maximize the number of such pairs, we need to arrange the graph such that as many pairs as possible are unidirectional, while ensuring that exactly p pairs are mutual.\n\nSo, the key idea is to split the graph into components such that:\n\n- Some components are strongly connected (so their internal pairs are mutual).\n\n- Between components, there are directed edges in one direction (so that pairs between components are unidirectional).\n\nBut how to model this.\n\nLet me think. Suppose that the graph is divided into two parts: a strongly connected component (SCC) of size k, and the rest of the nodes (n -k) arranged in a way that they form a DAG with no cycles, and all edges pointing from one component to another. For example, arrange the remaining nodes in a linear order, with edges from earlier nodes to later ones. Then, between the main SCC and the other nodes, if there are edges from the main SCC to the others, then any pair between the main SCC and the other nodes would be unidirectional (since the other nodes can't reach back to the main SCC). Similarly, if the other nodes are arranged in a DAG, then pairs between them can be unidirectional.\n\nBut how to model this.\n\nAlternatively, perhaps the optimal way to maximize the number of unidirectional pairs is to have as few mutual pairs as possible (i.e., exactly p), and maximize the rest as unidirectional.\n\nBut how?\n\nLet me think. The total number of ordered pairs (u, v) with u != v is n*(n-1). Among these, some are mutual (counted in the p-reachable condition), some are unidirectional, and some are neither (like if there's no path either way). However, the problem defines unidirectional pairs as those where there is a path from u to v and none from v to u. So, for the purposes of counting, the unidirectional pairs are those where exactly one of the directions is possible.\n\nSo, the total number of ordered pairs (u, v) with u != v is T = n*(n-1). Among them, let M be the number of mutual pairs (exactly p), and U be the number of unidirectional pairs. Also, there are some pairs where neither u can reach v nor vice versa. Let's call that N. So T = M + U + N. But since the problem asks for U, which is the maximum possible, given that M is fixed as p.\n\nBut how to maximize U, given that M is p.\n\nTo maximize U, we need to minimize N (the number of pairs with no path in either direction). How?\n\nThis suggests that the graph should be as \"dense\" as possible, with as many paths as possible. But how?\n\nAlternatively, perhaps the maximum number of unidirectional pairs occurs when the graph is split into two parts: one strongly connected component (SCC) with k nodes, and the rest of the nodes arranged in a way that all edges are directed from the SCC to the rest, and the rest is a DAG with all possible edges in one direction.\n\nBut I'm not sure. Let's think of the example given in the sample input. For p=3, the minimal n is 3. In that case, the only way to have exactly 3 mutual pairs is to have all three nodes in a single SCC. Then, all pairs (u, v) where u != v are mutual. Thus, there are zero unidirectional pairs. Hence, the sample output is 0.\n\nAnother example: the sample input for p=4 is output 5 6. Let's think. The minimal n for p=4 is calculated as follows: find the smallest n where n*(n-1)/2 >=4. Let's compute:\n\nn=3: 3*2/2=3 <4\n\nn=4: 4*3/2=6 >=4. So minimal n is 4. But sample output for p=4 is 5 6. Wait, no. Wait the sample input is given as ['3', '4', '0'], and output is ['3 0', '5 6', '0 0'].\n\nWait, for p=4, the output is 5 6. Wait that's conflicting with my previous calculation. Wait, why is the minimal n 5 for p=4? That suggests that my initial approach is wrong. So I must have made a mistake here.\n\nWait, let's recheck the sample. For input p=4, the output is '5 6'.\n\nWait, according to the sample, for p=4, the minimal number of nodes is 5. But according to my previous reasoning, for p=4, the minimal n is 4, since C(4,2)=6 ≥4. So why is the sample output for p=4 5?\n\nThat indicates that my previous reasoning is incorrect. So I need to re-examine the problem.\n\nWait, perhaps I misunderstood the definition of p-reachable. The problem says that a directed graph is p-reachable if it contains exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other. So, the mutual reachability pairs are counted only when u < v. So, for example, in a complete SCC of n nodes, the number of such pairs is C(n, 2) = n(n-1)/2. So for n=4, this is 6. But for p=4, we need exactly 4 such pairs. So, if we have a graph with n=4 nodes, how can we arrange it to have exactly 4 such pairs?\n\nAh, here's the problem. The minimal n is not necessarily the minimal n where C(n,2) ≥ p. Because in that case, for p=4, n=4 would suffice. But according to the sample, for p=4, the minimal n is 5. Which suggests that there's something wrong with my understanding of the problem.\n\nWait, the sample input for p=4 gives output 5 6. Let me look at the sample explanation. The note says that for the first test case (p=3), the minimal n is 3. So why for p=4, the minimal n is 5?\n\nThis suggests that my previous reasoning is incorrect. So I need to re-examine the problem.\n\nLet me read the problem statement again carefully.\n\nThe problem defines a p-reachable graph as containing exactly p ordered pairs (u, v) such that u < v and u and v are reachable from each other. So, for example, if there are two nodes u and v with u < v, and they are mutually reachable, then this pair is counted once. \n\nNow, the question is to find the minimal number of nodes required to create such a graph. So, for p=4, perhaps the minimal n is 5. How?\n\nLet me think. For example, if we have a graph with 4 nodes. How can we arrange it to have exactly 4 mutual pairs?\n\nWell, if all four nodes are in a single SCC, then there are 6 mutual pairs (C(4,2) = 6). So that's more than p=4. But how to reduce it to exactly 4?\n\nWe can split the graph into two components. For example, suppose we have two components: one with 3 nodes (A, B, C) forming a strongly connected component, and one node D. Then, the mutual pairs are C(3, 2) = 3. That's less than 4. So not enough.\n\nAlternatively, suppose we have two components: one with 2 nodes (A and B) in an SCC, and another component with 2 nodes (C and D) in an SCC. Then, the mutual pairs are C(2,2) + C(2,2) = 1 + 1 = 2. Still not enough.\n\nAlternatively, suppose we have one component with 3 nodes (A, B, C) in an SCC, and another component with one node D. Now, suppose there is a directed edge from D to A. Then, D can reach A, but A cannot reach D. So, the mutual pairs are C(3, 2) = 3. Still not enough.\n\nWhat if we have a graph with 4 nodes arranged such that some pairs are not mutually reachable. For example, a DAG with certain edges. But in that case, there are no mutual pairs. So that's not helpful.\n\nHmm, perhaps the problem requires that the graph must have exactly p mutual pairs. But for some values of p, it's impossible to achieve that with a certain n. For example, for n=4, the possible number of mutual pairs can be anything between 0 and 6, but how?\n\nWait, perhaps not. Because the number of mutual pairs depends on the structure. For example, if you have a graph with a single SCC of size k, and other nodes arranged in a way that they are not in any mutual pairs. Then, the number of mutual pairs is C(k, 2). So for example, if k=3, then mutual pairs is 3. If you have k=4, mutual pairs is 6. But how to get exactly 4?\n\nMaybe by splitting into multiple SCCs. For example, one SCC of size 3 (with 3 mutual pairs) and another SCC of size 1 (no mutual pairs). Then, the total is 3. Not enough. Another possibility: one SCC of size 2 (1 mutual pair) and another SCC of size 2 (another mutual pair), total 2. Still not enough.\n\nAlternatively, perhaps you can have a graph with some nodes in an SCC and others not. For example, a graph where there are three nodes in an SCC and one node that has a bidirectional edge with one of them. Wait, but adding a bidirectional edge between the single node and one of the SCC nodes would make the single node part of the SCC. So that doesn't help.\n\nAlternatively, perhaps the graph has some nodes that are in a cycle but not all. For example, a cycle of three nodes (A, B, C) with edges A→B, B→C, C→A. Then, all three are in an SCC. Adding a fourth node D with edges D→A and D→B and D→C. Now, D can reach A, B, C, but they cannot reach D. So mutual pairs are still C(3, 2) = 3. Still not enough.\n\nAlternatively, what if we have two SCCs: one of size 3 and one of size 1. Then, the mutual pairs are C(3, 2) = 3. If we add an edge from the single node to one of the nodes in the larger SCC, but not the other way around. Then, mutual pairs remain 3. \n\nSo for n=4, how can we get exactly 4 mutual pairs? It seems impossible. Hence, perhaps the minimal n for p=4 is indeed 5. But how?\n\nFor n=5, the maximum number of mutual pairs is C(5, 2) = 10. So if we can arrange the graph to have exactly 4 mutual pairs, then the minimal n is 5. But why can't we do it with n=4?\n\nAh, perhaps there is a misunderstanding here. The problem says that the graph must have exactly p ordered pairs (u, v) with u < v and mutual reachability. So the number of mutual pairs is exactly p. For p=4, can we find a graph with n=4 nodes that has exactly 4 such pairs?\n\nLet me think: For example, if there are 4 nodes, and two of them are in an SCC of size 2 (mutual pairs between them), and the other two nodes are in an SCC of size 2. Then, the mutual pairs are 1 (from first SCC) plus 1 (from second SCC) = 2. Not enough.\n\nAlternatively, what if three nodes are in an SCC, and the fourth node has a directed edge to one of them, but not vice versa. Then, mutual pairs are C(3, 2) = 3. Still not enough.\n\nAnother possibility: one SCC of size 3 (3 mutual pairs) and the fourth node has mutual reachability with one of the three. But then, the fourth node is part of the SCC. So the SCC becomes size 4, leading to C(4, 2) = 6 mutual pairs. Which is more than 4.\n\nSo perhaps for p=4, it's impossible to have exactly 4 mutual pairs with n=4. Hence, the minimal n is 5. But why?\n\nWait, how about having a graph with two SCCs. One SCC of size 3 (mutual pairs C(3,2) = 3), and another SCC of size 2 (mutual pairs C(2,2) = 1). Total mutual pairs is 3 + 1 = 4. Oh! So with n=3+2=5 nodes. So this gives exactly 4 mutual pairs. Hence, for p=4, the minimal n is 5. Which matches the sample input. \n\nAh! So my previous reasoning was wrong. The minimal n is not determined by the minimal n where C(n, 2) ≥ p. Instead, the minimal n is the minimal number of nodes such that there exists a way to partition the nodes into some SCCs, and the sum of C(k_i, 2) over all SCCs equals p. \n\nWait, but how? Because the sum of C(k_i, 2) is the total number of mutual pairs. For example, if there are multiple SCCs, each of size k_i, then for any two nodes within the same SCC, they are mutually reachable. So the number of mutual pairs is the sum over all SCCs of C(k_i, 2). \n\nTherefore, the problem reduces to finding the minimal n such that there exists a set of integers {k_1, k_2, ..., k_m} with sum k_i = n, and sum_{i} C(k_i, 2) = p. \n\nSo for p=4, the minimal n is 5, achieved by k_1=3, k_2=2, sum C(3,2)+C(2,2) = 3 + 1 =4. \n\nSo the minimal n is not simply determined by the minimal n where C(n, 2) ≥ p. Instead, it's the minimal n such that there exists a decomposition of n into integers whose sum of combinations is exactly p. \n\nThis changes everything. So the problem is now to find the minimal n such that there exists a way to split n into some integers k_i where the sum of C(k_i, 2) equals p. \n\nThis seems like a more complex problem. How can we find this minimal n?\n\nLet me think. For a given p, we need to find the minimal n where the sum of C(k_i, 2) = p and sum k_i =n. \n\nThe sum of C(k_i, 2) is equal to the total number of mutual pairs. \n\nBut how to find the minimal n. Let's think of this as an optimization problem. \n\nFor a fixed p, the minimal n is achieved when the sum of k_i is as small as possible. How can we achieve this? \n\nThe sum of C(k_i, 2) is p. To minimize the sum of k_i, we need to maximize the individual C(k_i, 2) per unit of k_i. \n\nThe function C(k, 2) = k*(k-1)/2. For a given value of C(k, 2), the minimal k is achieved when k is as large as possible. For example, if we have a value of p, to minimize the sum of k_i, we should use as few terms as possible, and make each term as large as possible. \n\nThus, the minimal n for a given p is obtained by taking the largest possible k such that C(k, 2) ≤ p, then subtract that from p and repeat. This is similar to the greedy algorithm for making change with coins of denominations C(k, 2). \n\nFor example, for p=4:\n\nLargest k with C(k, 2) ≤4 is k=3 (C(3,2)=3). Subtract 3 from p=4, leaving 1. Next largest k with C(k, 2) ≤1 is k=2 (C(2,2)=1). Subtract 1, leaving 0. Total n is 3+2=5. Which matches the sample.\n\nFor p=3: largest k is 3 (C(3,2)=3). Subtract, done. n=3.\n\nFor p=6: largest k is 4 (C(4,2)=6). So n=4.\n\nFor p=5: largest k is 3 (C(3,2)=3). Remaining 5-3=2. Largest k for 2 is 2 (C(2,2)=1). Remaining 2-1=1. Then largest k for 1 is 2 (C(2,2)=1). So sum is 3+2+2=7? But that would give sum C(3,2)+C(2,2)+C(2,2)=3+1+1=5. So n=3+2+2=7. But is there a better way? For example, using k=4 and k= something. Wait, C(4,2)=6 which is larger than 5. So not allowed. So next option is k=3 (3) and then k=2 (1) and k=2 (1). Total is 3+1+1=5. But that requires n=3+2+2=7. Alternatively, can we have k=3 (3) and then k=3 (but C(3,2)=3, which would sum to 6, which is more than 5. Not allowed. So no. So the minimal n is 7. But maybe there's another way. For example, using k=3 (3) and k=2 (1) and then a k=1 (0). Sum is 3+1+0=4, but that gives n=3+2+1=6. But the sum of C(k_i, 2) would be 3+1=4. Not enough. So no. So the minimal n is 7.\n\nBut this seems complicated. How can we find this minimal n for a given p?\n\nThe approach is to find the minimal n such that there exists a decomposition of p into a sum of terms C(k_i, 2), and the sum of k_i is minimized.\n\nThis sounds like a dynamic programming problem. But for p up to 2e5, it's going to be computationally intensive.\n\nAlternatively, perhaps there's a pattern or formula that can be derived.\n\nLet me think: the minimal n is achieved when the decomposition uses as many as possible the largest possible terms. So the greedy approach of taking the largest possible k_i each time.\n\nLet me try with p=5. Greedy approach:\n\nTake the largest k where C(k,2) <= p. For p=5, the largest k is 3 (C(3,2)=3). Subtract 3 from p, now p=2. Take the largest k for 2, which is 2 (C(2,2)=1). Subtract 1, p=1. Take another 2 (C(2,2)=1). Subtract 1, p=0. So sum k_i is 3+2+2=7.\n\nBut is there a better decomposition? For example, using k=3 and k=2 and k=1. Then sum is 3+1+1=5. But that would give C(3,2)+C(2,2)+C(1,2)=3+1+0=4 <5. Not enough. \n\nAnother possibility: two components of size 3. C(3,2)*2=3*2=6>5. Not allowed. \n\nAnother possibility: one component of size 3 (3) and one component of size 2 (1), and one component of size 1 (0). Total sum is 3+2+1=6, but sum of C(k_i, 2) is 3+1=4. Still not enough. \n\nSo the only way to get 5 is 3+2+2=7. Hence, the minimal n is 7. \n\nBut how to find this for general p? It seems that the greedy approach of taking the largest possible k_i each time gives the minimal n. \n\nSo the algorithm would be:\n\nInitialize n = 0.\n\nWhile p > 0:\n\n   Find the largest k such that C(k, 2) ≤ p.\n\n   Add k to n.\n\n   Subtract C(k, 2) from p.\n\nRepeat until p is 0.\n\nThis would give us the minimal n. \n\nBut why is this approach correct?\n\nBecause for each step, taking the largest possible k_i minimizes the sum of k_i. Because C(k, 2) increases with k, and for a given value of C(k, 2), larger k contributes more to the sum. \n\nFor example, say you have p=5. The greedy approach takes 3 (C=3), then 2 (C=1), then 2 (C=1). Sum is 7. If instead, you take two 2's (C=1 each) and then a 3 (C=3), that's same as before. \n\nBut suppose there's a case where taking a slightly smaller k_i now allows taking a larger one later. For example, say p=6. Greedy takes 4 (C=6), sum n=4. Which is better than taking 3 (C=3) and then another 3 (C=3), which would sum to 6. So the greedy approach is better. \n\nAnother example: p=7. Greedy approach: largest k with C(k,2) <=7 is 4 (C=6). Subtract 6, p=1. Then take 2 (C=1). Sum n=4+2=6. Alternative: take 3 (C=3) and then 3 (C=3) and then 2 (C=1). Sum is 3+3+2=8. So greedy approach is better. \n\nHence, the greedy approach seems correct. \n\nThus, the first part of the problem is to compute the minimal n using this greedy approach. \n\nSo for p=0, the minimal n is 0. \n\nFor p>0, we apply the greedy decomposition.\n\nOnce we have the minimal n, the next part is to find the maximum number of unidirectional pairs in such a graph.\n\nNow, the second part: given that the graph has exactly p mutual pairs (as per the decomposition into SCCs), and the minimal n, find the maximum number of unidirectional pairs possible.\n\nSo, how to maximize the number of unidirectional pairs.\n\nLet me think. The unidirectional pairs are those pairs (u, v) where u can reach v but not vice versa. \n\nTo maximize this, we need to arrange the graph such that as many pairs as possible are unidirectional. \n\nThe structure of the graph is composed of several SCCs. Between different SCCs, we can arrange the edges in a way that allows one-way reachability. \n\nFor example, if we have multiple SCCs, and arrange them in a DAG order, with edges directed from earlier components to later components. This way, any pair between components (u in earlier, v in later) can be reached from u to v, but not vice versa. \n\nThus, the number of unidirectional pairs between components is the product of their sizes multiplied by 1 (since each pair (u, v) between the components contributes one unidirectional pair, assuming that all edges are directed from earlier to later components). \n\nAdditionally, within each component, since they are strongly connected, there are no unidirectional pairs between nodes in the same component. \n\nMoreover, for the mutual pairs, they are the ones counted in the p value. \n\nSo the maximum number of unidirectional pairs is achieved when the components are arranged in a DAG (like a linear order) with all edges directed from earlier components to later ones. \n\nThus, the total number of unidirectional pairs is the sum over all pairs of components (A, B) where A comes before B, of |A| * |B|. \n\nSo, given the decomposition of the graph into components with sizes k_1, k_2, ..., k_m (summing to n), the maximum number of unidirectional pairs is the sum_{i < j} k_i * k_j. \n\nWait, because for each pair of components (i, j), where i is before j, all pairs (u in i, v in j) contribute 1 unidirectional pair. \n\nBut the sum of k_i * k_j for i < j is equal to [ (sum k_i)^2 - sum k_i^2 ] / 2. \n\nSince sum k_i is n. \n\nSo the total number of unidirectional pairs is (n^2 - sum k_i^2)/2. \n\nBut wait, what about the pairs between components where there are no edges? For example, if the components are arranged in a DAG but not fully connected. However, to maximize the number of unidirectional pairs, we should connect all components in a way that allows all possible pairs between components to be unidirectional. Hence, arranging them in a linear order, and directing all edges from earlier components to later ones. \n\nSo, the maximum number of unidirectional pairs is (n^2 - sum k_i^2) / 2. \n\nBut wait, the total number of ordered pairs (u, v) with u != v is n*(n-1). The number of mutual pairs is sum C(k_i, 2) = p. The number of unidirectional pairs is (n^2 - sum k_i^2)/2. And the number of pairs with no path in either direction is ... ?\n\nBut the problem states that the unidirectional pairs are those with u can reach v but not vice versa. So, the formula (n² - sum k_i²)/2 gives the total number of ordered pairs (u, v) where u is in one component and v is in another, and there is a directed path from u to v. \n\nBut in this arrangement, for any two components A and B, if A comes before B, then all pairs from A to B are unidirectional. However, pairs from B to A are not. So the total number of such unidirectional pairs is sum_{i<j} k_i * k_j. \n\nWhich is equal to (sum k_i)^2 - sum k_i^2 all over 2. \n\nYes. Because sum_{i != j} k_i * k_j = (sum k_i)^2 - sum k_i^2. And since sum_{i < j} k_i*k_j = sum_{i > j} k_i*k_j, the total is (sum k_i)^2 - sum k_i^2 divided by 2. \n\nSo the formula for the maximum number of unidirectional pairs is (n^2 - sum_k (k_i^2 )) // 2. \n\nBut",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs among all such graphs with the minimum number of nodes.\n\n### Approach\n1. **Understanding p-reachable Graphs**: A p-reachable graph has exactly p ordered pairs (u, v) such that u < v and both u and v are mutually reachable. The goal is to find the minimum number of nodes needed to form such a graph.\n2. **Greedy Decomposition**: To minimize the number of nodes, we use a greedy approach where we decompose p into sums of combinations of node sizes (C(k, 2)) such that the sum of these combinations equals p. This ensures we use the largest possible components first to minimize the total number of nodes.\n3. **Maximizing Unidirectional Pairs**: Once we have the minimum number of nodes, we arrange the graph into strongly connected components (SCCs) and compute the maximum number of unidirectional pairs by considering the arrangement of these components in a DAG structure.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef minimal_nodes(p):\n    if p == 0:\n        return 0\n    n = 0\n    while p > 0:\n        # Find the largest k such that k*(k-1)//2 <= p\n        k = int((2 * p + 0.25)**0.5 + 0.5)\n        if k * (k - 1) // 2 > p:\n            k -= 1\n        n += k\n        p -= k * (k - 1) // 2\n    return n\n\ndef max_unidirectional_pairs(n, components):\n    sum_k_sq = 0\n    for k in components:\n        sum_k_sq += k * k\n    return (n * n - sum_k_sq) // 2\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    # Compute the components used in the decomposition\n    components = []\n    remaining_p = p\n    while remaining_p > 0:\n        k = int((2 * remaining_p + 0.25)**0.5 + 0.5)\n        if k * (k - 1) // 2 > remaining_p:\n            k -= 1\n        components.append(k)\n        remaining_p -= k * (k - 1) // 2\n    \n    n = sum(components)\n    # Calculate the maximum unidirectional pairs\n    sum_k_sq = sum(k*k for k in components)\n    max_uni = (n * n - sum_k_sq) // 2\n    print(f\"{n} {max_uni}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Minimal Nodes Calculation**: The function `minimal_nodes` uses a greedy approach to decompose the value `p` into the sum of combinations C(k, 2). This ensures that we use the largest possible components first, minimizing the total number of nodes.\n2. **Unidirectional Pairs Calculation**: After determining the minimum number of nodes, we calculate the maximum number of unidirectional pairs by considering the components as SCCs arranged in a DAG. The formula `(n^2 - sum_k_sq) // 2` gives the maximum number of unidirectional pairs based on the sizes of these components.\n\nThis approach efficiently determines the minimum nodes and maximizes unidirectional pairs using mathematical decomposition and properties of graph theory.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef minimal_nodes(p):\n    if p == 0:\n        return 0\n    n = 0\n    while p > 0:\n        # Find the largest k such that k*(k-1)//2 <= p\n        k = int((2 * p + 0.25)**0.5 + 0.5)\n        if k * (k - 1) // 2 > p:\n            k -= 1\n        n += k\n        p -= k * (k - 1) // 2\n    return n\n\ndef max_unidirectional_pairs(n, components):\n    sum_k_sq = 0\n    for k in components:\n        sum_k_sq += k * k\n    return (n * n - sum_k_sq) // 2\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    # Compute the components used in the decomposition\n    components = []\n    remaining_p = p\n    while remaining_p > 0:\n        k = int((2 * remaining_p + 0.25)**0.5 + 0.5)\n        if k * (k - 1) // 2 > remaining_p:\n            k -= 1\n        components.append(k)\n        remaining_p -= k * (k - 1) // 2\n    \n    n = sum(components)\n    # Calculate the maximum unidirectional pairs\n    sum_k_sq = sum(k*k for k in components)\n    max_uni = (n * n - sum_k_sq) // 2\n    print(f\"{n} {max_uni}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 481,
        "completion_token_count": 753,
        "thoughts_token_count": 8192
    }
}