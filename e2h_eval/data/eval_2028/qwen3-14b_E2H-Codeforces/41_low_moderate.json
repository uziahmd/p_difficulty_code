{
    "start": 1758309280.6795642,
    "end": 1758309515.826593,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:18 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let's read the problem carefully.\n\nSo the problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the tallest house in a certain interval [l_i, r_i] must be at most x_i. My goal is to maximize the total profit while satisfying all restrictions.\n\nHmm. How to approach this? Since n, h, m are all up to 50, maybe a brute-force approach is possible, but maybe not. Let's think about the constraints.\n\nEach house's height can be between 0 and h, but with some restrictions. The restrictions are that for each interval, the maximum in that interval can't exceed x_i. So for each restriction, the maximum of the houses in l_i to r_i must be <= x_i.\n\nThe challenge is to assign heights to each house such that all these constraints are satisfied, and the sum of squares is maximized.\n\nFirst thought: For each house, we want to set it as high as possible, but considering all the restrictions that apply to it. However, since the restrictions are about ranges, it's not straightforward.\n\nBut with n being small (up to 50), maybe we can model this as a problem where for each position, we determine the maximum possible height it can have given all the constraints.\n\nWait, but how do the constraints affect each position? For example, a restriction on a range [l, r] says that the maximum in that range is at most x. So for each position in that range, the height can't be higher than x, unless there's another restriction that allows it. Wait no, because if any house in the range is higher than x, then the restriction is violated. Therefore, for each restriction, every house in the range [l_i, r_i] must have a height <= x_i. Because if even one house in the range is higher than x_i, then the max would be higher than x_i, violating the restriction. Wait, no. Wait, the restriction says that the tallest house in the range must be at most x_i. So, that implies that all houses in the range must be <= x_i. Because if any house in the range is higher than x_i, then the maximum would be higher than x_i. Therefore, each restriction [l_i, r_i, x_i] implies that for every position in l_i to r_i, the height of that position must be <= x_i. Because otherwise, the max would be higher than x_i.\n\nWait, but maybe that's not the case. Suppose there's a restriction that the maximum in [1,3] is at most 2. Then, each house in 1-3 must be <=2. Because if any of them is higher than 2, the max would be higher than 2. Therefore, the restriction can be viewed as imposing that for each position in [l_i, r_i], the height is <= x_i. Therefore, for each position, the maximum allowed height is the minimum of all x_i's from restrictions that include that position in their interval. Also, the global maximum h is a restriction as well. So, for each position, the maximum possible height is min(h, all x_i's from restrictions that cover that position).\n\nWait, but is that correct? Let me think again. Suppose there's a restriction on [1,3] with x=2, and another restriction on [2,4] with x=3. Then for position 2, the maximum allowed is min(2,3) = 2. Because the first restriction applies to it. But if there's a restriction on [1,3] with x=3, and [2,4] with x=2. Then for position 2, the maximum allowed is min(3, 2) = 2. So yes, for each position, the maximum allowed height is the minimum of all x_i's from the restrictions that cover that position, and also h.\n\nWait, but what if there's a restriction that says that the maximum in [1,3] is 2, and another restriction that says the maximum in [1,4] is 3. Then for position 4, the restriction [1,4] says that the maximum in that range is 3. However, position 4 is not covered by any other restriction. So the maximum for position 4 is 3, but the restriction on [1,4] requires that the maximum in that range is 3. Which would mean that position 4 can be up to 3. However, if position 4 is 3, but other positions in [1,3] could be up to 2. But the restriction on [1,4] is that the",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction limits the maximum height of houses within a specific range.\n\n### Approach\n1. **Understand Constraints**: Each house can have a height between 0 and a given maximum height `h`. Additionally, there are zoning restrictions that limit the maximum height in specific intervals.\n2. **Determine Maximum Heights**: For each house, determine the maximum allowable height by considering all restrictions that apply to it. The maximum height for each house is the minimum value between the global maximum height `h` and the minimum restriction value that applies to that house.\n3. **Calculate Profit**: Once the maximum allowable height for each house is determined, compute the total profit by summing the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = 0\n        for height in max_heights:\n            total += height * height\n        \n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of spots `n`, maximum height `h`, and number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum allowable height for each house within the specified range is updated to the minimum of its current value and the restriction's maximum height.\n4. **Calculating Profit**: The total profit is calculated by summing the squares of the maximum allowable heights for each house.\n\nThis approach ensures that all restrictions are respected while maximizing the profit by setting each house to the highest possible height allowed by the constraints. The solution efficiently processes each restriction and computes the result in a straightforward manner, leveraging the small constraints (up to 50 spots and restrictions).",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        total = 0\n        for height in max_heights:\n            total += height * height\n        \n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 584,
        "thoughts_token_count": 1024
    }
}