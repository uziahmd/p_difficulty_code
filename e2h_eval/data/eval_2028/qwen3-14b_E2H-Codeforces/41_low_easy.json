{
    "start": 1758309275.914858,
    "end": 1758309433.3009713,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:17 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let's read the problem carefully.\n\nThe problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the tallest house in a certain range [l_i, r_i] must be at most x_i. My goal is to maximize the total profit while satisfying all restrictions.\n\nHmm. So how do I approach this? Since n, h, m are all up to 50, maybe a brute-force approach is feasible. But even then, for n=50, each house can have up to h+1 possibilities (from 0 to h). So 50^50 possibilities? That's way too big. Brute force isn't going to work here.\n\nWait, but maybe there's a smarter way. Let's think about constraints. Each restriction imposes that the maximum in a certain interval is <= x_i. So for each interval, the maximum of the houses in that interval must not exceed x_i.\n\nSo how can I model this? Maybe for each position, determine the maximum allowed height based on the restrictions. But since restrictions can overlap, it's not straightforward.\n\nAnother thought: For each house, the maximum possible height it can have is the minimum of h and all the restrictions that apply to it. Wait, no. Because a restriction applies to a range. For example, if a restriction says that in [1,3], the max is 2. Then each house in that range can't be higher than 2. But if another restriction says that in [2,2], the max is 3, then the first restriction would take precedence for the [2,2] range. Wait, but the first restriction requires that the max in [1,3] is <= 2, which implies that the house at 2 can't be more than 2. So the second restriction (which allows up to 3) is redundant here. So the actual maximum for each house is determined by the tightest restriction that covers it.\n\nBut how to find for each house, what is the maximum possible height it can have, considering all the restrictions?\n\nAlternatively, perhaps we can model this as for each house, the maximum allowed height is the minimum between h and the minimum of all x_i where the restriction's interval includes that house. But wait, that's not correct. Because a restriction applies to the maximum in the interval. For example, if there's a restriction on [1,3] with x=2, then each house in that interval can be at most 2. However, if there's another restriction on [1,1] with x=3, then that doesn't affect the first house. But the first restriction would require that the maximum in [1,3] is <=2. So the first house can be up to 2. So even though there's a restriction on [1,1] allowing up to 3, the first restriction (on [1,3]) limits the first house to 2. Therefore, for each house, the maximum possible height is the minimum of h and all the x_i of restrictions that cover that house and have their interval's max being constrained. But how to find that?\n\nWait, no. Because each restriction says that in the interval [l_i, r_i], the maximum height is <=x_i. So for any house in that interval, the maximum possible height is <=x_i. Because if there's a house in the interval that is higher than x_i, then the maximum would be higher than x_i, violating the restriction. Therefore, for each house, the maximum height it can have is the minimum of h and all x_i from restrictions that include that house in their interval. But wait, that's not necessarily true. Because suppose there's a restriction on [1,3] with x=2, and another restriction on [1,1] with x=3. Then the first house can be up to 2, because the first restriction requires that the maximum in [1,3] is <=2. But the second restriction allows up to 3. However, the first restriction is more restrictive. So the maximum for the first house is 2. So for each house, the maximum possible height is the minimum between h and the minimum x_i among all restrictions that include that house in their interval. Wait, no. Because for each restriction that includes the house in their interval, the maximum of the entire interval must be <=x_i. Which implies that the house can't be higher than x_i. Because if the house is higher than x_i, then the maximum of the interval would be higher than x_i, violating the restriction. Therefore, for each house, the maximum allowed height is the minimum between h and the minimum x_i of all restrictions that include that house in",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street with given constraints. Each house can be built with a height between 0 and a maximum value `h`, and there are zoning restrictions that impose limits on the maximum height of houses within specific intervals. The goal is to determine the optimal heights for each house such that all restrictions are satisfied and the total profit is maximized.\n\n### Approach\n1. **Constraints Analysis**: Each restriction specifies that the tallest house in a given interval must not exceed a certain height. This means that for each house, the maximum height it can have is determined by the most restrictive constraint that includes it in its interval.\n2. **Determine Maximum Heights**: For each house, calculate the minimum height allowed by all constraints that include that house. This ensures that no constraint is violated.\n3. **Profit Calculation**: Once the maximum allowable height for each house is determined, compute the profit as the sum of the squares of these heights.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Convert to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate total profit\n        total = sum(hh * hh for hh in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of spots `n`, maximum height `h`, and the number of restrictions `m`.\n2. **Initialization**: An array `max_heights` is initialized with the maximum possible height `h` for each spot.\n3. **Applying Restrictions**: For each restriction, the maximum height for each house within the specified interval is updated to the minimum of its current value and the restriction's maximum height.\n4. **Profit Calculation**: The total profit is computed by summing the squares of the allowable heights for each house after applying all restrictions.\n\nThis approach ensures that all constraints are respected while maximizing the profit by leveraging the most restrictive constraints for each house. The complexity is manageable given the constraints (up to 50 spots and restrictions), making this approach both efficient and effective.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Convert to 0-based index\n            for i in range(l-1, r):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate total profit\n        total = sum(hh * hh for hh in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 828,
        "completion_token_count": 598,
        "thoughts_token_count": 1024
    }
}