{
    "start": 1758338208.2613177,
    "end": 1758338311.9726722,
    "start-formatted": "2025-09-20 12:16 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    g = int(data[2])\n    \n    total = n + m\n    max_n = max(n, m)\n    \n    # Precompute factorials and inverse factorials up to max_n\n    fact = [1] * (max_n + 1)\n    for i in range(1, max_n + 1):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact = [1] * (max_n + 1)\n    inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\n    for i in range(max_n - 1, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n    \n    def count_ways(a, b):\n        # a is number of 0s, b is number of 1s\n        # We need to form a string with a 0s and b 1s that can be reduced to g\n        # The key idea is that the number of operations needed to reduce to one character\n        # depends on the parity of the number of characters.\n        # But here we are counting how many strings can be reduced to g\n        # This is a bit tricky, so let's think recursively\n        # We need to check if it's possible to reduce to g\n        \n        # The final character is determined by the parity of the number of operations\n        # Each operation reduces the length by 1, starting from length a + b\n        # So the number of operations is a + b - 1\n        # The result depends on the number of 0s and 1s and the number of operations\n        \n        # Let's think about the parity of the number of operations\n        # If the number of operations is even, the final character is the same as the initial character\n        # If odd, it's flipped\n        \n        # But this is not directly helpful. Instead, think about the parity of the number of 1s and 0s\n        # Let's use the following logic:\n        # A string can be reduced to '0' if the number of 0s - number of 1s is congruent to the number of operations mod 2\n        # But this is not straightforward. Let's use dynamic programming approach\n        \n        # Another way: For the string to be reducible to g, the number of 0s and 1s must satisfy certain conditions\n        # Let's try to find the number of ways to choose positions for 0s and 1s such that the string can be reduced to g\n        \n        # We can use the following trick:\n        # The final character depends on the number of operations and the initial counts\n        # Each operation replaces two characters with one, and the new character is 1 if both are 0, else 0\n        # This is equivalent to XOR of the two characters\n        # So the final character depends on the parity of the number of 1s and 0s\n        # But again, this is complex\n        \n        # Let's use the following observation:\n        # The final character after all operations is determined by the parity of the number of 1s\n        # If the number of 1s is even, then the final character is 0\n        # If the number of 1s is odd, then the final character is 1\n        # Wait, no. That's not accurate. Let's simulate\n        \n        # Let's use the following approach:\n        # For a string to be reducible to g, the number of 1s must have the same parity as the number of operations\n        # Because each operation reduces the length by 1, and the final character is determined by the parity of the number of 1s\n        \n        # The number of operations is total - 1\n        # So the number of 1s must have the same parity as (total - 1)\n        # If g == 1, then the number of 1s must be odd\n        # If g == 0, then the number of 1s must be even\n        \n        if g == 1:\n            if (m % 2) == 1:\n                return comb(n + m, n, fact, inv_fact)\n            else:\n                return 0\n        else:\n            if (m % 2) == 0:\n                return comb(n + m, n, fact, inv_fact)\n            else:\n                return 0\n\n    result = count_ways(n, m)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    g = int(data[2])\n    \n    total = n + m\n    max_n = max(n, m)\n    \n    # Precompute factorials and inverse factorials up to max_n\n    fact = [1] * (max_n + 1)\n    for i in range(1, max_n + 1):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact = [1] * (max_n + 1)\n    inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\n    for i in range(max_n - 1, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n    \n    def count_ways(a, b):\n        # a is number of 0s, b is number of 1s\n        # We need to form a string with a 0s and b 1s that can be reduced to g\n        # The key idea is that the number of operations needed to reduce to one character\n        # depends on the parity of the number of characters.\n        # But here we are counting how many strings can be reduced to g\n        # This is a bit tricky, so let's think recursively\n        # We need to check if it's possible to reduce to g\n        \n        # The final character is determined by the parity of the number of operations\n        # Each operation reduces the length by 1, starting from length a + b\n        # So the number of operations is a + b - 1\n        # The result depends on the number of 0s and 1s and the number of operations\n        \n        # Let's think about the parity of the number of operations\n        # If the number of operations is even, the final character is the same as the initial character\n        # If odd, it's flipped\n        \n        # But this is not directly helpful. Instead, think about the parity of the number of 1s and 0s\n        # Let's use the following logic:\n        # A string can be reduced to '0' if the number of 0s - number of 1s is congruent to the number of operations mod 2\n        # But this is not straightforward. Let's use dynamic programming approach\n        \n        # Another way: For the string to be reducible to g, the number of 0s and 1s must satisfy certain conditions\n        # Let's try to find the number of ways to choose positions for 0s and 1s such that the string can be reduced to g\n        \n        # We can use the following trick:\n        # The final character depends on the number of operations and the initial counts\n        # Each operation replaces two characters with one, and the new character is 1 if both are 0, else 0\n        # This is equivalent to XOR of the two characters\n        # So the final character depends on the parity of the number of 1s and 0s\n        # But again, this is complex\n        \n        # Let's use the following observation:\n        # The final character after all operations is determined by the parity of the number of 1s\n        # If the number of 1s is even, then the final character is 0\n        # If the number of 1s is odd, then the final character is 1\n        # Wait, no. That's not accurate. Let's simulate\n        \n        # Let's use the following approach:\n        # For a string to be reducible to g, the number of 1s must have the same parity as the number of operations\n        # Because each operation reduces the length by 1, and the final character is determined by the parity of the number of 1s\n        \n        # The number of operations is total - 1\n        # So the number of 1s must have the same parity as (total - 1)\n        # If g == 1, then the number of 1s must be odd\n        # If g == 0, then the number of 1s must be even\n        \n        if g == 1:\n            if (m % 2) == 1:\n                return comb(n + m, n, fact, inv_fact)\n            else:\n                return 0\n        else:\n            if (m % 2) == 0:\n                return comb(n + m, n, fact, inv_fact)\n            else:\n                return 0\n\n    result = count_ways(n, m)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 549,
        "completion_token_count": 1080,
        "thoughts_token_count": 0
    }
}