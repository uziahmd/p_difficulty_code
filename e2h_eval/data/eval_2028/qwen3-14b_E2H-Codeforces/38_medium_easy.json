{
    "start": 1758308565.0531373,
    "end": 1758308739.5097144,
    "start-formatted": "2025-09-20 04:02 KST",
    "end-formatted": "2025-09-20 04:05 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The problem is about finding the minimum number of nodes required to create a p-reachable directed graph, and then among those graphs, find the maximum number of unidirectional pairs.\n\nFirst, I need to understand what exactly p-reachable means. From the description, a p-reachable graph has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So, for each such pair, both directions must have paths. But the problem says that the ordered pairs are counted with u < v, so maybe it's considering unordered pairs but ordered in the sense of u and v's indices?\n\nWait, the problem says \"ordered pair of nodes (u, v)\" but then specifies u < v. Wait, no. Wait the definition says: \"exactly p ordered pairs of nodes (u, v) such that u < v and u and v are reachable from each other.\" So, for each unordered pair {u, v}, if u < v, then we count (u, v) once. So the total number of such pairs is p. So the problem is about counting the number of unordered pairs (u, v) where u < v and they are mutually reachable. And the graph must have exactly p such pairs.\n\nThe first part of the problem is to find the minimal number of nodes required to have exactly p such pairs. Then, among all such minimal node graphs, find the maximum number of unidirectional pairs.\n\nSo, the first thing is to model how many such mutual pairs can be formed with n nodes, and find the minimal n such that the maximum possible mutual pairs is >= p. Wait, but the graph must have exactly p mutual pairs. So perhaps the approach is to find the minimal n such that the maximum number of mutual pairs possible in a graph with n nodes is at least p. But how do we model that?\n\nWait, but the problem says that the graph must have exactly p mutual pairs. So for example, if we have a graph with n nodes arranged in a way that there are exactly p mutual pairs. How can we arrange that?\n\nBut perhaps the minimal number of nodes is determined by the maximal number of mutual pairs that can be achieved with n nodes. For example, if we take a complete graph where all nodes are mutually reachable (like a strongly connected component), then the number of mutual pairs is C(n, 2). But if we have multiple components, perhaps the mutual pairs are the sum of C(k_i, 2) for each strongly connected component of size k_i. Because within each strongly connected component, all pairs are mutually reachable. Between different components, if there's no path between them, then there are no mutual pairs. However, if there are paths in both directions between two components, then they would form mutual pairs, but that would require that they are in the same strongly connected component. So perhaps the total number of mutual pairs is the sum over each strongly connected component (SCC) of C(k_i, 2), where k_i is the size of the component.\n\nIf that's the case, then the problem reduces to choosing a set of integers k_1, k_2, ..., k_m such that sum_{i} C(k_i, 2) = p, and the total number of nodes is sum k_i, and we want to minimize sum k_i. Also, for the minimal sum, we need to choose the optimal decomposition of p into sums of C(k_i, 2).\n\nSo the first part of the problem becomes: find the minimal number of nodes n such that there exists a decomposition of p into sum of C(k_i, 2), and n is the sum of the k_i's. Then, for that minimal n, find the maximum number of unidirectional pairs.\n\nBut how to find that decomposition?\n\nLet me think. For example, if p is 3, then C(3, 2) = 3. So the minimal n is 3. If p is 4, then maybe we can't do it with a single component. Because C(3, 2) is 3, and C(4, 2) is 6. So 4 can't be achieved with a single component. So perhaps we can split into two components. Let's see: for example, 3 + 1 = 4. But C(2, 2) is 1. So if we have a component of size 3 (which contributes 3) and a component of size 2 (which contributes 1), sum is 4. Total nodes is 3+2=5. Which matches the sample input where for p=4, the output is 5 and then something else. So that's probably correct.\n\nSo the problem for the first part is to find the minimal n such that p can be written as sum of C(k_i, 2), and the sum of k_i is minimized. How to do this?\n\nThe optimal way to minimize the sum of k_i for a given p is to use as large as possible C(k, 2) terms. Because C(k, 2) is increasing with k, and for a given value, using the largest possible C(k, 2) would minimize the sum of k_i. Wait, for example, suppose we have p=4. The largest C(k, 2) less than or equal to 4 is 3 (k=3). Then remaining is 1, which can be achieved with k=2. Sum is 3+2=5. Alternatively, if we use two components of size 2 (each contributes 1, total 2) and then another two components of size 2 (total 4), but sum would be 2*2 + 2*2 = 8? No, wait. Wait, sum of k_i would be 2+2+2+2 = 8? That's worse than 5. So the approach is to greedily take the largest possible C(k, 2) for each step.\n\nSo the way to find the minimal n is to decompose p into the sum of as many C(k, 2) as possible, starting with the largest possible.\n\nSo the algorithm for the first part would be:\n\nFind the minimal n by decomposing p into sum of C(k_i, 2), where each k_i is as large as possible. For example, for each step, find the largest k such that C(k, 2) ≤ remaining_p. Subtract that value from p, add k to the sum, and repeat until p is zero.\n\nBut how to compute that?\n\nLet me think. For example, for p=4, the first step is to find the maximum k where C(k, 2) ≤4. C(3,2)=3, C(4,2)=6>4. So k=3. Subtract 3, remaining is 1. Now find maximum k for 1: C(2,2)=1. Subtract 1. So sum is 3+2=5.\n\nAnother example: p=3. Take k=3, sum is 3.\n\nAnother example: p=6. C(4,2)=6. So sum is 4.\n\nWhat about p=5? The largest C(k,2) ≤5 is 3 (k=3). Then remaining 2. Next largest is 2 (k=2). So sum is 3+2=5. But wait, 3+2=5. But C(3,2) + C(2,2) =3+1=4. Oh, no, that's not right. Wait, p=5. So after taking 3, remaining is 2. Now find the largest C(k,2) ≤2. Which is 1 (k=2). Then subtract 1, remaining 1. Then again take 1. So sum is 3+2+2=7. But that's not efficient. Alternatively, maybe there's a better decomposition. For example, 2+2+1. Wait, but how?\n\nAlternatively, maybe the decomposition can be done as 3 (C(3,2)=3) and 2 (C(2,2)=1) and another 2 (another 1). Total sum is 3+2+2=7. But is there a better way? What if we take two components of size 3? Then sum of C(3,2) is 3+3=6, which is larger than 5. So that's not helpful. Hmm.\n\nWait, but maybe there's a way to have a component of size 4 and then some other components. For example, C(4,2) is 6 which is more than 5. So not allowed. So the only way is to take 3 (C(3,2)=3), then 2 (C(2,2)=1), then 2 (another 1). So total sum is 3+2+2=7. But that's for p=5. But maybe there's a better way. For example, if you have a component of size 3 (3) and a component of size 3 (3), but then subtract 1? No, because that's not allowed. Because the sum of C(k_i, 2) must be exactly p.\n\nWait, but maybe there's a way to have a component of size 3 (3) and a component of size 2 (1) and then another component of size 1 (0). But that would sum to 3+1=4. Still not enough.\n\nSo for p=5, the minimal sum is 3+2+2=7. But is there a way to get a smaller sum? Let's think. Suppose we have two components: one of size 3 (3) and one of size 3 (3) but that gives 6, which is larger than 5. Not helpful. Alternatively, can we have a component of size 4 and another component of size 1? Then the sum is C(4,2) + C(1,2) =6 +0=6. Still larger than 5. So no. So maybe the minimal sum is 7.\n\nBut how to find this decomposition efficiently? The greedy approach may not always work. Wait, but in the case of p=5, the greedy approach would take the largest possible C(k,2) each time. Let's see:\n\nFirst step: find the largest k where C(k,2) <=5. C(3,2)=3, C(4,2)=6>5. So take k=3. Subtract 3, remaining p=2. Now find largest k for 2: C(2,2)=1. Subtract 1, remaining 1. Again take k=2, subtract 1. Remaining 0. So sum is 3+2+2=7.\n\nBut is there a better way? For example, using k=2 (C(2,2)=1) three times, and then a k=3 (3). That would be 3+1+1+1=6? No, sum of k_i would be 3+2+2+2=9, which is worse. So no. So the greedy approach seems to be the way to go.\n\nSo the minimal number of nodes is achieved by taking the largest possible C(k, 2) each time. So the approach is:\n\nInitialize n = 0.\n\nWhile p > 0:\n\n   find the maximum k such that k*(k-1)/2 ≤ p.\n\n   subtract k*(k-1)/2 from p.\n\n   add k to n.\n\nSo, for example, for p=5, the steps would be:\n\np=5: max k is 3 (3*2/2=3). p becomes 5-3=2. n=3.\n\np=2: max k is 2 (2*1/2=1). p becomes 2-1=1. n=3+2=5.\n\np=1: max k is 2 again. subtract 1, p=0. n=5+2=7.\n\nSo the minimal n is 7.\n\nBut how to compute this maximum k for a given p?\n\nWe can solve for k in k*(k-1)/2 ≤ p. Let's find the maximum k.\n\nThis can be found by solving quadratic equation. For example, k^2 -k - 2p ≤ 0. The positive root is [1 + sqrt(1 + 8p)] / 2. So the maximum k is floor( [sqrt(8p + 1) + 1]/2 )\n\nFor example, when p=5, sqrt(41) is ~6.4, adding 1 gives 7.4, divided by 2 is ~3.7. So floor is 3. Which is correct.\n\nSo the algorithm for the first part is:\n\nCompute the minimal n by greedily taking the largest possible k for each step, as described.\n\nOnce we have the minimal n, the second part is to find the maximum number of unidirectional pairs in such a graph.\n\nNow, the unidirectional pairs are ordered pairs (u, v) where u != v, there is a path from u to v, but not vice versa. So the total number of such pairs depends on the structure of the graph.\n\nBut how to maximize this number given that the graph has exactly p mutual pairs and minimal n nodes.\n\nLet's think about the structure of the graph. Since the minimal n is achieved by decomposing p into sum of C(k_i, 2), the graph is composed of several strongly connected components (SCCs), each of size k_i, and there are no edges between the components (or if there are, they are directed in such a way that there are no cycles between components, so that no two components have mutual reachability). Because if there are edges between components, but not in both directions, then that would create some unidirectional pairs between the components, but also possibly affect the mutual reachability.\n\nWait, but for the mutual pairs, the sum of C(k_i, 2) is exactly p. So the way to achieve this is to have each SCC of size k_i, and arrange the components in a DAG (directed acyclic graph) structure. For example, arrange the components in a linear order, with edges from earlier components to later ones. Then, within each component, all pairs are mutually reachable. Between components, there are paths from earlier to later, but not vice versa. Thus, for any two nodes in different components, if they are in different components, then there is a path from the one in the earlier component to the one in the later component, but not the other way around. Therefore, each such pair contributes to a unidirectional pair.\n\nSo the total number of unidirectional pairs would be:\n\nsum_{i < j} (k_i * k_j) * 2 ?\n\nWait, no. Let's think. For two components A and B, where A is before B in the DAG. Then, for every u in A and v in B, there is a path from u to v. But no path from v to u. So the ordered pair (u, v) is unidirectional. Similarly, (v, u) is not. So for each pair of components (A, B), where A comes before B, the number of unidirectional pairs is |A| * |B|. Because each u in A and v in B contributes one unidirectional pair (u, v). Also, for pairs (v, u), since there's no path from v to u, they are not considered here.\n\nBut also, within a component, all pairs are mutually reachable, so they don't contribute to unidirectional pairs. So the total number of unidirectional pairs is the sum over all ordered pairs of components (A, B) where A comes before B, of |A| * |B| multiplied by 1 (since each such pair contributes exactly one unidirectional pair).\n\nBut how to maximize this sum?\n\nThe sum is equal to the total number of ordered pairs of nodes (u, v) where u is in a component that comes before v's component. Because for each such pair, u and v are in different components, and there's a path from u to v but not vice versa.\n\nBut the sum of |A| * |B| for all ordered pairs of components where A comes before B is equal to [ (sum |A|)^2 - sum |A|^2 ] / 2. Because:\n\nsum_{i < j} |A_i| * |A_j| = [ (sum |A_i|)^2 - sum |A_i|^2 ] / 2.\n\nBut since the components are ordered, the total sum for ordered pairs (A_i, A_j) where i < j is the same as the above. But in our case, the ordered pairs (A_i, A_j) where i < j contribute |A_i| * |A_j|, and the total is sum_{i < j} |A_i| * |A_j|.\n\nSo to maximize this sum, given that the sum of |A_i| is fixed (n), we need to arrange the components in such a way that the sum of |A_i| * |A_j| for i < j is maximized.\n\nBut how to arrange the components to maximize that sum?\n\nThe sum is maximized when the components are as equal as possible. Wait, no. Wait, the sum of products for i < j is maximized when the sizes are as uneven as possible. Wait, for example, suppose we have two components. Let's say the total sum is S = a + b. The sum for i<j is a*b. Which is maximized when a and b are as close as possible. Wait, for fixed a + b, the product a*b is maximized when a and b are as close as possible. But in this case, the sum is a*b. So if we have more components, say, three components, then the sum is a*b + a*c + b*c. Which is maximized when the sizes are as equal as possible?\n\nAlternatively, perhaps the sum is maximized when we have as few components as possible. Because when you have more components, you split the sizes into smaller parts, which may reduce the product sum.\n\nWait, but the way the components are split depends on how we decomposed p into the sum of C(k_i, 2). For example, in the first sample input where p=3, the minimal n is 3. The decomposition is a single component of size 3. Then, the sum of |A_i| * |A_j| for i<j is zero, since there's only one component. Hence, the number of unidirectional pairs is zero, which matches the sample output.\n\nIn the second sample input, p=4. The minimal n is 5, achieved by components of sizes 3 and 2. Then the sum is 3*2 = 6. So the number of unidirectional pairs is 6, which matches the sample output of 5 6.\n\nSo the problem now is: given the decomposition of p into sum C(k_i, 2), with sum k_i = n, how to arrange the components (i.e., their sizes) in a way that the sum of |A_i| * |A_j| for all i<j is maximized. Because that sum is the number of unidirectional pairs.\n\nBut how to compute this maximum sum, given the decomposition of the components into sizes k_1, k_2, ..., k_m.\n\nThe maximum sum is achieved when the components are arranged in a certain order. However, the order does not affect the sum of products, since the sum is the same regardless of the order. For example, if we have components of sizes a and b, the sum is a*b regardless of which comes first. Hence, the arrangement of the components in the DAG doesn't affect the total number of unidirectional pairs. So the sum is fixed once the sizes of the components are determined.\n\nTherefore, the problem reduces to: given the decomposition into components of sizes k_1, k_2, ..., k_m, compute the sum of all products of pairs of sizes, where each pair is counted once (i.e., sum_{i < j} k_i * k_j).\n\nThis can be computed as (total^2 - sum_k^2) / 2, where total is the sum of all k_i (which is n), and sum_k^2 is the sum of squares of the k_i's.\n\nSo, the maximum number of unidirectional pairs is (n^2 - sum_k^2) / 2.\n\nTherefore, the problem becomes: once we have the decomposition of p into sum C(k_i, 2), compute sum_k^2, then compute (n² - sum_k²) / 2.\n\nBut how to find the decomposition of p into the sum of C(k_i, 2) that gives the minimal n, and then compute sum_k²?\n\nWait, but the decomposition is determined by the greedy approach. For example, when we decompose p into the sum of C(k_i, 2) by taking the largest possible k each time. So for each step, we take the maximum possible k, subtract C(k, 2) from p, and add k to the list of component sizes. Then, the sum of squares is the sum of k_i² for each component.\n\nSo, the steps are:\n\nFor the first part:\n\n- Find the minimal n by decomposing p into sum of C(k_i, 2) using the greedy approach.\n\nFor the second part:\n\n- Once the component sizes are known (from the decomposition), compute sum_k_squared = sum (k_i^2).\n\nThen, the maximum number of unidirectional pairs is (n^2 - sum_k_squared) // 2.\n\nSo, for example, in the case of p=4:\n\nThe decomposition is 3 and 2. sum_k_squared = 3^2 + 2^2 = 9 +4 =13. n is 5. So (5² - 13)/2 = (25 -13)/2 = 12/2=6, which matches the sample.\n\nAnother example: p=0. Then the decomposition is zero components (but that's not possible). Wait, for p=0, the graph must have zero mutual pairs. So the minimal n is 0? No, but the problem says that p can be 0. Let's think. For p=0, the graph must have exactly zero pairs (u, v) with u < v and mutual reachability. So, the graph can be a DAG with no cycles. For example, a DAG with no strongly connected components except for single nodes. So, for n=1, there are no pairs. For n=0, it's invalid. So the minimal n is 1? Or 0? Well, the problem says that the graph is a directed graph. So for p=0, the minimal n is 1. Because with n=1, there are no pairs (u, v) with u < v. But according to the sample input, when p=0, the output is '0 0'. Wait, looking at the sample input:\n\nSample input includes '0' as one of the test cases. The output is '0 0'.\n\nBut that's impossible, because a graph with zero nodes is not a valid graph. Wait, but the problem statement says that the graph is a directed graph. But the problem says that the input p can be 0. So for p=0, the minimal number of nodes is 0? But that's not possible. However, according to the sample input, when the input is 0, the output is '0 0'.\n\nWait, the sample input is:\n\nInput: ['3', '4', '0']\n\nOutput: ['3 0', '5 6', '0 0']\n\nSo for p=0, the output is 0 0. So the minimal number of nodes is 0. But that's only possible if the graph is allowed to have zero nodes. But perhaps the problem considers that for p=0, the minimal n is 0. Because there are zero pairs (u, v) with u < v. But with zero nodes, there are zero pairs, which satisfies p=0.\n\nBut how can a graph have zero nodes? Well, maybe the problem allows that. So, for p=0, the minimal n is 0. Then, the maximum number of unidirectional pairs is zero.\n\nBut how to handle that in the code.\n\nSo, in code, we need to handle p=0 as a special case.\n\nNow, back to the general approach.\n\nSo, the plan is:\n\nFor a given p, compute the minimal n as follows:\n\nif p is 0, then n is 0.\n\nElse:\n\nWe decompose p into sum of C(k_i, 2) using the greedy approach, and sum the k_i to get n.\n\nOnce we have the list of k_i's, compute sum_k_squared = sum of k_i^2.\n\nThen, the maximum number of unidirectional pairs is (n^2 - sum_k_squared) // 2.\n\nBut how to implement this in Python?\n\nFirst, for p=0: output 0 0.\n\nElse, proceed with the decomposition.\n\nSo, the code steps:\n\nRead p.\n\nif p ==0:\n\n    print 0 0\n\nelse:\n\n    compute the decomposition.\n\nNow, the decomposition:\n\nInitialize list of components.\n\nremaining_p = p\n\nsum_n = 0\n\nwhile remaining_p >0:\n\n    find k such that k*(k-1)//2 is the maximum possible <= remaining_p.\n\n    add k to components.\n\n    remaining_p -= k*(k-1)//2\n\n    sum_n +=k\n\nOnce we have the components list, compute sum_k_squared = sum(k**2 for k in components)\n\nthen unidirectional_pairs = (sum_n **2 - sum_k_squared) // 2\n\nBut how to find k for each step?\n\nImplementing the calculation of k:\n\nfor a given remaining_p, compute k = floor( (sqrt(8*remaining_p +1) +1)/2 )\n\nBut we need to make sure that k*(k-1)/2 <= remaining_p.\n\nFor example, compute k as integer.\n\nLet me think of code for that:\n\ndef max_k(p):\n\n    # returns maximum k where k*(k-1)//2 <= p\n\n    if p ==0:\n\n        return 0\n\n    k = int( ( (2*p)**0.5 + 1 ) )\n\n    while k*(k-1)//2 > p:\n\n        k -=1\n\n    while (k+1)*k//2 <= p:\n\n        k +=1\n\n    return k\n\nWait, perhaps a better way is to calculate k via binary search.\n\nAlternatively, compute the value using math.\n\nBut for code purposes, perhaps the following:\n\nWe can compute k as the floor of (sqrt(8*p +1) +1)/2.\n\nBut let's test with p=5.\n\nsqrt(8*5 +1) = sqrt(41) ~6.4. +1 is 7.4. divided by 2 is 3.7, floor is 3. Which is correct.\n\nAnother example: p=3. sqrt(25) is 5. +1 is 6, divided by 2 is 3. Correct.\n\nAnother example: p=1. sqrt(9)=3. +1 is 4/2=2. 2*1/2=1. Correct.\n\nBut for p=2, sqrt(17) is ~4.123. +1 is 5.123/2=2.56. floor is 2. 2*1/2=1 <=2. But 3*2/2=3>2. So yes, correct.\n\nSo the formula is:\n\nk = int( (math.sqrt(8*p +1) +1) // 2 )\n\nWait, no. Let me think again.\n\nLet me compute:\n\nWe want to find the maximum k where k(k-1)/2 <= p.\n\nSolving k² -k - 2p <=0.\n\nThe positive root is [1 + sqrt(1 +8p)] / 2.\n\nSo the maximum k is floor( [1 + sqrt(1 +8p)] / 2 )\n\nSo, in code:\n\nimport math\n\ndef get_max_k(p):\n\n    return int( (1 + math.sqrt(1 + 8*p )) // 2 )\n\nWait, but perhaps not. Let me test with p=5.\n\nsqrt(1+8*5) = sqrt(41) ≈6.403. 1+6.403=7.403. Divided by 2 is ~3.701. So floor is 3. Correct.\n\nAnother example, p=3: sqrt(25)=5. 1+5=6, divided by 2 is 3. Correct.\n\nFor p=1, sqrt(9)=3. 1+3=4/2=2. Correct.\n\nBut let's see for p=2: sqrt(17)=~4.123. 1+4.123=5.123/2=2.56. Floor is 2. Correct.\n\nBut what if the exact value is an integer? For example, p=6: sqrt(1+48)=sqrt(49)=7. 1+7=8/2=4. So k=4. Which is correct.\n\nSo the code can be:\n\nimport math\n\ndef get_max_k(p):\n\n    return int( (1 + math.sqrt(1 + 8*p )) // 2 )\n\nWait, but in Python, math.sqrt returns a float, and the expression (1 + math.sqrt(...)) might not be exactly the integer. So perhaps we should compute it as:\n\nk = int( (1 + math.sqrt(1 + 8*p )) // 2 )\n\nWait, no. Let me think again. For example, if the value is exactly an integer, then (1 + sqrt(...)) is even?\n\nNo. For example, when p=3, sqrt(1+8*3)=sqrt(25)=5. So (1+5)/2=3. So yes. For p=6, sqrt(1+8*6)=sqrt(49)=7. (1+7)/2=4. So yes.\n\nBut for p=2, the value is (1+sqrt(17))/2 ≈ (1+4.123)/2≈ 2.56. So floor is 2. So the code can be:\n\nk = int( (1 + math.sqrt(1 + 8*p )) / 2 )\n\nBut since math.sqrt returns a float, perhaps we need to use math.floor.\n\nBut perhaps the code can be written as:\n\nk = int( (1 + math.sqrt(1 + 8*p )) / 2 )\n\nBut in Python, when you cast a float to int, it truncates towards zero. So for example, 3.7 becomes 3, 2.56 becomes 2.\n\nBut perhaps there are cases where the calculation is slightly off due to floating point precision. For example, for very large p, the calculation might give a value that is one less than the actual maximum k. So perhaps it's better to compute k as the floor of (sqrt(8p +1) +1)/2.\n\nTo avoid errors, perhaps it's better to compute k using binary search.\n\nBut for the purposes of code, perhaps the initial approach is sufficient, and then check if k*(k-1)/2 is <= p, and if not, decrease by 1.\n\nSo here's a possible code snippet:\n\ndef get_max_k(p):\n\n    if p ==0:\n\n        return 0\n\n    k = int( (1 + math.sqrt(1 + 8*p )) / 2 )\n\n    while k*(k-1)//2 > p:\n\n        k -=1\n\n    return k\n\nBut why? For example, if due to floating point inaccuracies, the initial k is too high. For example, if the exact value is 3.9999999999, then int would give 3, which is correct. But perhaps in some cases, the calculation could be slightly lower than the actual value. But I think that the initial approach with the formula and then checking is safe.\n\nOnce we have that, the rest is straightforward.\n\nSo putting it all together.\n\nNow, handling the case when p=0. For p=0, the minimal n is 0, and the maximum unidirectional pairs is 0.\n\nBut what about when p=0 and n=0? Well, according to the sample input, that's acceptable.\n\nNow, for the code:\n\nimport math\n\ndef main():\n\n    import sys\n\n    p = int(sys.stdin.readline())\n\n    if p ==0:\n\n        print(\"0 0\")\n\n        return\n\n    components = []\n\n    remaining_p = p\n\n    sum_n =0\n\n    while remaining_p >0:\n\n        # compute max k\n\n        k = int( (1 + math.sqrt(1 + 8*remaining_p )) / 2 )\n\n        while k*(k-1)//2 > remaining_p:\n\n            k -=1\n\n        components.append(k)\n\n        remaining_p -= k*(k-1)//2\n\n        sum_n +=k\n\n    # Now compute sum_k_squared\n\n    sum_k_squared = sum( [k*k for k in components] )\n\n    unidirectional = (sum_n * sum_n - sum_k_squared) // 2\n\n    print(f\"{sum_n} {unidirectional}\")\n\nWait, but let's test this code with the sample inputs.\n\nSample Input 1: p=3.\n\ncomponents:\n\nremaining_p=3.\n\nk is (1 + sqrt(25))/2 = (1+5)/2=3. Check 3*2/2=3 <=3. So append 3. remaining_p=0. sum_n=3. sum_k_squared=9. unidirectional is (3^2 -9)/2 = (9-9)/2=0. Output is 3 0. Which matches the sample.\n\nSample Input 2: p=4.\n\nremaining_p=4.\n\nk = (1 + sqrt(33))/2. sqrt(33) is ~5.744. 1+5.744=6.744 /2=3.372 → int is 3. Check 3*2/2=3 ≤4. So append 3. remaining_p=4-3=1.\n\nNow, remaining_p=1.\n\nk = (1 + sqrt(9))/2 → (1+3)/2=2. Check 2*1/2=1 ≤1. Append 2. remaining_p=0. sum_n=3+2=5. sum_k_squared=9+4=13. unidirectional = (25-13)/2=6 → correct.\n\nSample Input 3: p=0 → output 0 0.\n\nAnother test case: p=1. The code will compute:\n\nremaining_p=1.\n\nk=(1 + sqrt(9))/2= (1+3)/2=2. 2*1/2=1. append 2. sum_n=2. sum_k_squared=4. unidirectional = (2² -4)/2 = (4-4)/2=0. So output is 2 0.\n\nBut what is the minimal n for p=1? It's 2. Because the graph can have two nodes with a single edge from u to v. Then, the mutual pairs are zero. But according to the decomposition, the sum of C(k_i, 2) is 1. Which would require that the graph has a component of size 2. Because C(2,2)=1. So in that case, the mutual pairs are exactly 1. So the graph must have exactly one mutual pair. How?\n\nAh, if the graph has two nodes in a single strongly connected component, meaning there are edges both ways. Then, the mutual pair is (u, v) where u < v. So that's exactly 1. So the minimal n is 2, and the maximum unidirectional pairs is (2² - 2²)/2=0. Which is correct.\n\nBut what about the unidirectional pairs? Since the graph is a single component of size 2, there are no unidirectional pairs. So the code is correct.\n\nAnother test case: p=2. Let's see.\n\nremaining_p=2.\n\nk is (1 + sqrt(1+16))/2 = (1 + sqrt(17))/2 ≈ (1 +4.123)/2 ≈ 2.56 → k=2. Check 2*1/2=1 ≤2. So append 2. remaining_p=2-1=1. Then again, append 2. remaining_p=0. sum_n=2+2=4. sum_k_squared=4+4=8. unidirectional pairs: (4² -8)/2 = (16-8)/2=4. So output is 4 4.\n\nBut is there a better decomposition? Let's think. For p=2, can we have a component of size 3? C(3,2)=3>2. No. So the decomposition is two components of size 2. So sum_n=4.\n\nBut what if we have a component of size 2 and a component of size 1? Then sum of C(2,2) + C(1,2) =1 +0=1 <2. Not enough. So no. So the code is correct.\n\nBut the code would generate components [2, 2], sum_n=4. So the maximum unidirectional pairs is 4. How?\n\nThe components are two components of size 2. The sum of products between components is 2*2=4. So that's correct.\n\nYes.\n\nAnother example: p=5. As discussed earlier, the decomposition is [3,2,2]. sum_n=3+2+2=7. sum_k_squared=9+4+4=17. unidirectional pairs is (7² -17)/2 = (49-17)/",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs among all such graphs with the minimum number of nodes.\n\n### Approach\n1. **Understanding p-reachable Graphs**: A p-reachable graph has exactly `p` ordered pairs (u, v) where `u < v` and both nodes are mutually reachable. The goal is to find the minimum number of nodes required to form such a graph.\n2. **Decomposition into Strongly Connected Components (SCCs)**: The number of mutual pairs in a graph can be maximized by decomposing it into SCCs. Each SCC of size `k` contributes `k*(k-1)/2` mutual pairs.\n3. **Greedy Decomposition**: To minimize the number of nodes, we use a greedy approach to decompose `p` into the sum of values of the form `k*(k-1)/2`, starting with the largest possible `k` each time.\n4. **Maximizing Unidirectional Pairs**: Once the decomposition is done, the number of unidirectional pairs is calculated using the formula derived from the sum of products of sizes of different SCCs.\n\n### Solution Code\n```python\nimport math\nimport sys\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    components = []\n    remaining_p = p\n    sum_n = 0\n    \n    while remaining_p > 0:\n        # Calculate maximum k for current remaining_p\n        k = int((1 + math.sqrt(1 + 8 * remaining_p)) / 2)\n        # Adjust k if necessary\n        while k * (k - 1) // 2 > remaining_p:\n            k -= 1\n        components.append(k)\n        remaining_p -= k * (k - 1) // 2\n        sum_n += k\n    \n    sum_k_squared = sum(k * k for k in components)\n    unidirectional = (sum_n * sum_n - sum_k_squared) // 2\n    print(f\"{sum_n} {unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input value `p` is read from standard input.\n2. **Special Case for p=0**: If `p` is 0, the output is immediately \"0 0\" since no nodes are needed.\n3. **Greedy Decomposition**: For each iteration, the maximum size `k` of an SCC is determined such that the number of mutual pairs contributed by this component (`k*(k-1)/2`) does not exceed the remaining value of `p`. This `k` is added to the list of components, and the remaining value of `p` is adjusted accordingly.\n4. **Summing Nodes and Squares**: The total number of nodes (`sum_n`) and the sum of squares of component sizes (`sum_k_squared`) are computed.\n5. **Calculating Unidirectional Pairs**: Using the formula `(sum_n^2 - sum_k_squared) // 2`, the maximum number of unidirectional pairs is derived from the sum of products of sizes of different SCCs.\n\nThis approach efficiently decomposes the problem into manageable parts, ensuring minimal nodes and maximizing unidirectional pairs as required.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\nimport sys\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n    \n    components = []\n    remaining_p = p\n    sum_n = 0\n    \n    while remaining_p > 0:\n        # Calculate maximum k for current remaining_p\n        k = int((1 + math.sqrt(1 + 8 * remaining_p)) / 2)\n        # Adjust k if necessary\n        while k * (k - 1) // 2 > remaining_p:\n            k -= 1\n        components.append(k)\n        remaining_p -= k * (k - 1) // 2\n        sum_n += k\n    \n    sum_k_squared = sum(k * k for k in components)\n    unidirectional = (sum_n * sum_n - sum_k_squared) // 2\n    print(f\"{sum_n} {unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 480,
        "completion_token_count": 712,
        "thoughts_token_count": 8192
    }
}