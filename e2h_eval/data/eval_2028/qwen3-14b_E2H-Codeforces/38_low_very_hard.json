{
    "start": 1758309749.7830894,
    "end": 1758309852.8227453,
    "start-formatted": "2025-09-20 04:22 KST",
    "end-formatted": "2025-09-20 04:24 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, let's try to tackle this problem. Hmm, the problem is about finding the minimum number of nodes required for a p-reachable directed graph and then determining the maximum number of unidirectional pairs in such graphs. \n\nFirst, let's understand what a p-reachable graph is. The definition says that it has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So, for each such pair, both directions must be reachable. Wait no, wait: the problem says \"u and v are reachable from each other.\" So that implies that there's a path from u to v and from v to u. Therefore, each such pair contributes one to the count of p. And the problem wants exactly p such pairs.\n\nThe first part is to find the minimal number of nodes needed to have exactly p such pairs. Then, among all such graphs with that minimal number of nodes, find the maximum number of unidirectional pairs. \n\nLet me think about how to model this. \n\nLet's think about the structure of the graph. For the minimal number of nodes, we probably need to maximize the number of such mutual reachability pairs with as few nodes as possible. But how?\n\nWait, mutual reachability implies that u and v are in the same strongly connected component (SCC). Because if there's a path from u to v and vice versa, they are in the same SCC. So, the number of ordered pairs (u, v) with u < v and u and v mutually reachable is equal to the sum over each SCC of C(k, 2), where k is the size of the SCC. Because within an SCC, every pair of distinct nodes (u, v) with u < v would contribute to p. \n\nSo the problem reduces to choosing a set of SCCs with sizes k_1, k_2, ..., k_m, such that the sum of C(k_i, 2) for all i equals p. And we want to minimize the total number of nodes, which is the sum of all k_i. Also, since the graph is directed, the way the SCCs are connected doesn't affect the count of mutual reachability pairs, as long as they are separate components. Because if two SCCs are connected in a way that allows paths between them, that would merge them into a larger SCC. So to maximize the mutual reachability pairs, perhaps we need to arrange the graph so that the SCCs are as large as possible. Wait, but for the minimal number of nodes, maybe we need to split the SCCs into smaller ones? Or maybe not. Let me think.\n\nThe minimal number of nodes would be achieved when the sum of C(k_i, 2) is exactly p, and the sum of k_i is minimized. How can we do that?\n\nThis seems like an optimization problem. Let's think about how to select the sizes of the SCCs. For example, if we have a single SCC of size n, then the number of mutual pairs is C(n, 2). So if p is C(n, 2), then the minimal number of nodes is n. But if p is not exactly a triangular number, then we need to combine multiple SCCs. \n\nFor example, suppose p is 3. Then C(3,2)=3. So the minimal number of nodes is 3. Which matches the first example in the problem statement. \n\nAnother example: if p is 4. What's the minimal number of nodes? Let's see. The largest possible C(k, 2) less than or equal to 4 is C(3, 2) =3. Then the remaining is 1. For that, we can have another SCC of size 2 (C(2,2)=1). So total nodes is 3+2=5. Alternatively, could we have a single SCC of size 4? C(4,2)=6 which is larger than 4. So no. So the minimal is 5. Which matches the second sample input where p=4 gives output 5 6. Wait the sample input for p=4 outputs 5 and 6. Wait, the second sample input in the problem is for p=4, the output is 5 6. Wait, the first part of the output is the minimal number of nodes (which is 5), and the second part is the maximum number of unidirectional pairs. \n\nSo for the first part, the minimal number of nodes is determined by choosing the optimal decomposition of p into sum of C(k_i, 2) terms, such that the sum of k_i is minimized. \n\nSo how do we find this decomposition? The approach is to use as large as possible C(k, 2) terms. Because for a given sum, using larger terms would minimize the total sum of k_i. For example, suppose we need to represent p as a sum of C(k_i",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs among all such graphs with the minimum number of nodes.\n\n### Approach\n1. **Understanding Mutual Reachability**: A p-reachable graph has exactly `p` ordered pairs (u, v) where u < v and both u and v are mutually reachable. This is equivalent to the sum of combinations of sizes of Strongly Connected Components (SCCs) in the graph.\n\n2. **Optimal SCC Decomposition**: To minimize the number of nodes, we need to decompose `p` into sums of combinations of the form C(k, 2) where k is the size of an SCC. The goal is to use the largest possible values of k to minimize the total number of nodes.\n\n3. **Unidirectional Pairs Calculation**: Once the minimal number of nodes is determined, the maximum number of unidirectional pairs can be calculated by considering the structure of the graph with the optimal decomposition of SCCs.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n\n    # Find the minimal number of nodes\n    # We want to represent p as sum of C(k_i, 2), and minimize sum(k_i)\n    # The approach is to take the largest possible C(k, 2) <= remaining p, subtract it, and proceed\n    # So we need to find all k's such that their C(k,2) sum to p, and the sum of k's is minimized\n    # Let's collect the k's in a list\n    nodes = []\n    remaining_p = p\n    while remaining_p > 0:\n        # Find the largest k such that C(k, 2) <= remaining_p\n        k = 1\n        while (k * (k - 1)) // 2 <= remaining_p:\n            k += 1\n        k -= 1\n        nodes.append(k)\n        remaining_p -= (k * (k - 1)) // 2\n\n    total_nodes = sum(nodes)\n\n    # Now, to compute the maximum number of unidirectional pairs\n    # The unidirectional pairs are between different SCCs, considering the order (u < v)\n    # For each pair of SCCs (A, B), if A comes before B in the topological order, then all pairs (a, b) where a is in A and b is in B contribute to unidirectional pairs if there is a path from A to B but not vice versa.\n    # However, to maximize the unidirectional pairs, we should arrange the SCCs in a chain, such that each SCC points to the next one, and no reverse paths exist.\n    # Thus, for each pair of SCCs (A, B) where A is before B, all |A| * |B| pairs are unidirectional if there is a directed edge from A to B and no reverse.\n\n    # Since the graph is constructed with SCCs arranged in a DAG (to avoid merging them into larger SCCs), the maximum number of unidirectional pairs is the sum over all i < j of (size_i * size_j) * 2? Wait no. Wait, each ordered pair (u, v) with u in A and v in B (A before B) contributes 1 if there's a path from A to B and none from B to A. But since the SCCs are arranged in a DAG, and we arrange them in a linear order, then each pair of SCCs contributes |A| * |B| * 1 (since only one direction is possible).\n\n    # But the problem counts ordered pairs (u, v) where u != v and there is a path from u to v but not from v to u. So for each pair of SCCs A and B, if A is before B in the DAG, then all (u in A, v in B) are unidirectional. Similarly, if B is before A, then all (v in B, u in A) are unidirectional. But since the DAG is a linear chain, for any two distinct components, one is before the other. So the total unidirectional pairs is the sum for all i < j (size_i * size_j) * 1 (for each direction). Wait no, because if you have components A and B, and A is before B, then all (a, b) are unidirectional, and (b, a) are not. So for each unordered pair of components, we have exactly one direction contributing |A|*|B| unidirectional pairs.\n\n    # So the total number of unidirectional pairs is sum_{i < j} (size_i * size_j) * 1 + sum_{i < j} (size_j * size_i) * 0? No. Because for each pair of components A and B, if A is before B, then (a, b) are unidirectional. If B is before A, then (b, a) are unidirectional. But in a linear chain, for each pair of components, exactly one of these occurs. Therefore, the total unidirectional pairs is the sum over all pairs of components (A, B) where A is before B of |A| * |B|.\n\n    # To maximize this sum, we need to arrange the components in an order that maximizes this sum. The maximum occurs when the components are sorted in non-decreasing order. Wait, no. Wait, the sum of products of all pairs in a certain order. For example, if we have components of sizes s1, s2, ..., sn, then arranging them in increasing order would maximize the sum of s_i * s_j for i < j. Wait, no. Actually, the sum is fixed regardless of the order. Because sum_{i < j} s_i * s_j = [ (sum s_i)^2 - sum s_i^2 ] / 2. Which is independent of the order. Therefore, the total number of unidirectional pairs is always (total_nodes^2 - sum(s_i^2)) // 2 - p_unordered_pairs?\n\n    # Wait, let me think again. The total number of ordered pairs (u, v) where u != v is total_nodes*(total_nodes-1). Among these, some are mutual (counted in p), and others are unidirectional.\n\n    # But the mutual pairs are those within each SCC. For each SCC of size k, the number of ordered pairs (u, v) with u != v is k*(k-1). But since mutual reachability is counted as (u < v) pairs, but here we are considering all ordered pairs. However, the mutual reachability count p is the number of (u < v) pairs with mutual reachability. \n\n    # However, for the unidirectional pairs, we need to count all ordered pairs (u, v) with u != v where there's a path from u to v but not from v to u. \n\n    # The total number of such pairs is equal to the total number of ordered pairs (u, v) with u != v minus twice the number of mutual pairs (since for each mutual pair, both (u, v) and (v, u) are present, but they are not unidirectional). Wait, no. Because mutual pairs are those where both directions exist, so they are not counted as unidirectional. So the total number of unidirectional pairs is:\n\n    # total_ordered_pairs - 2 * mutual_pairs_count - same_component_non_mutual_pairs?\n\n    # Alternatively, think of the total number of ordered pairs (u, v) with u != v as T = n*(n-1). Among these, the mutual pairs are those that are in the same SCC and have u != v. For each such pair, both (u, v) and (v, u) exist. So the number of mutual pairs in terms of ordered pairs is 2*p. Because the original p is the number of (u < v) pairs with mutual reachability, which is exactly half of the ordered pairs (since for each such pair (u, v) with u < v, there's also (v, u) if they are mutual).\n\n    # Therefore, the number of ordered pairs that are mutual is 2*p. The rest are either unidirectional or not reachable at all. However, the problem defines unidirectional pairs as those where there's a path from u to v but not from v to u. So the total number of unidirectional pairs is T - 2*p - R, where R is the number of ordered pairs where neither u can reach v nor v can reach u. However, since the graph is a DAG of SCCs, and the SCCs are arranged in a way that allows paths between them, but not necessarily all pairs. However, the maximum number of unidirectional pairs is achieved when the DAG is a linear chain, ensuring that for any two components, there's a directed path from one to the other, but not vice versa.\n\n    # Given that, the number of unidirectional pairs is equal to the total number of ordered pairs (u, v) with u != v, minus twice the number of mutual pairs (because mutual pairs are not unidirectional), minus the number of pairs that are not reachable in either direction. But since we are trying to maximize the unidirectional pairs, we assume that all non-mutual pairs are unidirectional. That is, the graph is constructed in a way that ensures that for any two nodes not in the same SCC, there is a path from one to the other but not vice versa.\n\n    # Therefore, the maximum number of unidirectional pairs is (total_nodes * (total_nodes - 1)) - 2*p.\n\n    # Wait, let's verify with the sample input. For p=3, the minimal nodes is 3. Then total_ordered_pairs is 3*2=6. 2*p is 6. So 6 - 6 = 0, which matches the first sample output. For p=4, minimal nodes is 5. total_ordered_pairs is 5*4=20. 2*p is 8. 20-8=12. But the sample output is 6. Hmm, that doesn't match. So there must be an error in this reasoning.\n\n    # Let's look at the sample where p=4, the output is 5 6. So according to this formula, 5*4=20, 2*4=8, 20-8=12. But sample says 6. So clearly, this approach is wrong.\n\n    # Let me re-examine the problem statement. The unidirectional pairs are defined as ordered pairs (u, v) where u != v, there exists a path from u to v, and no path from v to u. The problem asks for the number of such pairs in the graph. \n\n    # In the case where the graph consists of two SCCs: one of size 3 (C(3,2)=3) and one of size 2 (C(2,2)=1), total p is 4. The total number of nodes is 5. \n\n    # The mutual pairs are the ones inside each SCC. So for the first SCC (size 3), there are 3*2=6 ordered pairs (u, v) with u != v, and all are mutual. For the second SCC (size 2), there are 2*1=2 ordered pairs, which are mutual. So total mutual pairs is 6 + 2 = 8. But the p value is 4, which is the number of (u < v) pairs. So the 8 ordered pairs include both (u, v) and (v, u) for each of the 4 (u < v) pairs. Hence, the formula for the number of mutual ordered pairs is 2*p. \n\n    # Now, the total number of ordered pairs (u, v) with u != v is 5*4=20. The mutual pairs are 8. The remaining 20 - 8 = 12 are unidirectional or not reachable. But how many of them are unidirectional?\n\n    # The graph is constructed with two SCCs, A (size 3) and B (size 2). Suppose there is a directed edge from A to B. Then, all pairs (a, b) where a is in A and b is in B are unidirectional. There are 3*2=6 such pairs. Also, there are no paths from B to A, so the pairs (b, a) are not reachable. Additionally, within each SCC, there are mutual pairs. Between the SCCs, there are no paths from B to A. So the unidirectional pairs are 3*2=6. Which matches the sample output. \n\n    # So in this case, the number of unidirectional pairs is 3*2 = 6. Which equals the product of the sizes of the two components. So the general approach is: the maximum number of unidirectional pairs is the sum over all pairs of components (A, B) where A is before B in the DAG, of |A| * |B|. \n\n    # To maximize this sum, we should arrange the components in a linear order where each component points to the next one. And the maximum sum is achieved when the components are ordered in non-decreasing order of size. Wait, no. The maximum sum of products for all pairs (i < j) is achieved when the components are ordered in non-decreasing order. Wait, no. Let's think: suppose we have components of sizes a, b. The sum is a*b. If a < b, then putting a before b gives a*b. If we put b before a, then it's still a*b. So the order doesn't affect the sum. But when there are more than two components, the order affects how the products are accumulated. For example, components of sizes 1, 2, 3. If we arrange them in order 1, 2, 3, the sum is 1*2 + 1*3 + 2*3 = 2 + 3 + 6 = 11. If we arrange them in order 3, 2, 1, the sum is 3*2 + 3*1 + 2*1 = 6 + 3 + 2 = 11. So the order does not matter. Therefore, the total sum is always the same, regardless of the order of the components. Therefore, the total number of unidirectional pairs is the sum for all pairs of components (i < j) of size_i * size_j.\n\n    # So the formula for the maximum number of unidirectional pairs is (total_nodes^2 - sum(size_i^2)) // 2. Because sum_{i < j} size_i * size_j = [ (sum size_i)^2 - sum size_i^2 ] / 2.\n\n    # Let's test this with the sample. For the case where the components are 3 and 2. Sum sizes squared is 9 + 4 = 13. Total nodes squared is 25. So (25 - 13)/2 = 12/2 = 6. Which matches the sample. For the first sample where p=3, the components are just 3. So sum of squares is 9. Total nodes squared is 9. (9 -9)/2 = 0. Which matches the sample.\n\n    # So the correct formula for the maximum number of unidirectional pairs is (total_nodes^2 - sum_of_squares) // 2.\n\n    # Therefore, the steps are:\n    # 1. Find the minimal number of nodes by decomposing p into sum of C(k_i, 2) terms.\n    # 2. Calculate sum_of_squares as the sum of k_i^2.\n    # 3. The maximum number of unidirectional pairs is (total_nodes^2 - sum_of_squares) // 2.\n\n    # Now, implement this.\n\n    # Compute sum_of_squares\n    sum_squares = sum(k*k for k in nodes)\n    total_nodes_squared = total_nodes * total_nodes\n    max_unidirectional = (total_nodes_squared - sum_squares) // 2\n\n    print(f\"{total_nodes} {max_unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read as an integer `p`.\n2. **Decomposing `p`**: The value `p` is decomposed into the sum of combinations C(k, 2) to determine the minimal number of nodes required.\n3. **Sum of Squares Calculation**: The sum of squares of the sizes of the SCCs is computed to determine the maximum number of unidirectional pairs using the formula derived.\n4. **Output**: The minimal number of nodes and the maximum number of unidirectional pairs are printed based on the calculations.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef main():\n    p = int(sys.stdin.readline())\n    if p == 0:\n        print(\"0 0\")\n        return\n\n    # Find the minimal number of nodes\n    # We want to represent p as sum of C(k_i, 2), and minimize sum(k_i)\n    # The approach is to take the largest possible C(k, 2) <= remaining p, subtract it, and proceed\n    # So we need to find all k's such that their C(k,2) sum to p, and the sum of k's is minimized\n    # Let's collect the k's in a list\n    nodes = []\n    remaining_p = p\n    while remaining_p > 0:\n        # Find the largest k such that C(k, 2) <= remaining_p\n        k = 1\n        while (k * (k - 1)) // 2 <= remaining_p:\n            k += 1\n        k -= 1\n        nodes.append(k)\n        remaining_p -= (k * (k - 1)) // 2\n\n    total_nodes = sum(nodes)\n\n    # Now, to compute the maximum number of unidirectional pairs\n    # The unidirectional pairs are between different SCCs, considering the order (u < v)\n    # For each pair of SCCs (A, B), if A comes before B in the topological order, then all pairs (a, b) where a is in A and b is in B contribute to unidirectional pairs if there is a path from A to B but not vice versa.\n    # However, to maximize the unidirectional pairs, we should arrange the SCCs in a chain, such that each SCC points to the next one, and no reverse paths exist.\n    # Thus, for each pair of SCCs (A, B) where A is before B, all |A| * |B| pairs are unidirectional if there is a directed edge from A to B and no reverse.\n\n    # Since the graph is constructed with SCCs arranged in a DAG (to avoid merging them into larger SCCs), the maximum number of unidirectional pairs is the sum over all i < j of (size_i * size_j) * 2? Wait no. Wait, each ordered pair (u, v) with u in A and v in B (A before B) contributes 1 if there's a path from A to B and none from B to A. But since the SCCs are arranged in a DAG, and we arrange them in a linear order, then each pair of SCCs contributes |A| * |B| * 1 (since only one direction is possible).\n\n    # But the problem counts ordered pairs (u, v) where u != v and there is a path from u to v but not from v to u. So for each pair of SCCs A and B, if A is before B in the DAG, then all (u in A, v in B) are unidirectional. Similarly, if B is before A, then all (v in B, u in A) are unidirectional. But since the DAG is a linear chain, for any two distinct components, one is before the other. So the total unidirectional pairs is the sum for all i < j (size_i * size_j) * 1 (for each direction). Wait no, because if you have components A and B, and A is before B, then all (a, b) are unidirectional, and (b, a) are not. So for each unordered pair of components, we have exactly one direction contributing |A|*|B| unidirectional pairs.\n\n    # So the total number of unidirectional pairs is sum_{i < j} (size_i * size_j) * 1 + sum_{i < j} (size_j * size_i) * 0? No. Because for each pair of components A and B, if A is before B, then (a, b) are unidirectional. If B is before A, then (b, a) are unidirectional. But in a linear chain, for each pair of components, exactly one of these occurs. Therefore, the total unidirectional pairs is the sum over all pairs of components (A, B) where A is before B of |A| * |B|.\n\n    # To maximize this sum, we need to arrange the components in an order that maximizes this sum. The maximum occurs when the components are sorted in non-decreasing order. Wait, no. Wait, the sum of products of all pairs in a certain order. For example, if we have components of sizes s1, s2, ..., sn, then arranging them in increasing order would maximize the sum of s_i * s_j for i < j. Wait, no. Actually, the sum is fixed regardless of the order. Because sum_{i < j} s_i * s_j = [ (sum s_i)^2 - sum s_i^2 ] / 2. Which is independent of the order. Therefore, the total number of unidirectional pairs is always (total_nodes^2 - sum(s_i^2)) // 2 - p_unordered_pairs?\n\n    # Wait, let me think again. The total number of ordered pairs (u, v) where u != v is total_nodes*(total_nodes-1). Among these, some are mutual (counted in p), and others are unidirectional.\n\n    # But the mutual pairs are those within each SCC. For each SCC of size k, the number of ordered pairs (u, v) with u != v is k*(k-1). But since mutual reachability is counted as (u < v) pairs, but here we are considering all ordered pairs. However, the mutual reachability count p is the number of (u < v) pairs with mutual reachability. \n\n    # However, for the unidirectional pairs, we need to count all ordered pairs (u, v) with u != v where there's a path from u to v but not from v to u. \n\n    # The total number of such pairs is equal to the total number of ordered pairs (u, v) with u != v minus twice the number of mutual pairs (since for each mutual pair, both (u, v) and (v, u) are present, but they are not unidirectional). Wait, no. Because mutual pairs are those where both directions exist, so they are not counted as unidirectional. So the total number of unidirectional pairs is:\n\n    # total_ordered_pairs - 2 * mutual_pairs_count - same_component_non_mutual_pairs?\n\n    # Alternatively, think of the total number of ordered pairs (u, v) with u != v as T = n*(n-1). Among these, the mutual pairs are those that are in the same SCC and have u != v. For each such pair, both (u, v) and (v, u) exist. So the number of mutual pairs in terms of ordered pairs is 2*p. Because the original p is the number of (u < v) pairs with mutual reachability, which is exactly half of the ordered pairs (since for each such pair (u, v) with u < v, there's also (v, u) if they are mutual).\n\n    # Therefore, the number of ordered pairs that are mutual is 2*p. The rest are either unidirectional or not reachable at all. However, the problem defines unidirectional pairs as those where there's a path from u to v but not from v to u. So the total number of unidirectional pairs is T - 2*p - R, where R is the number of ordered pairs where neither u can reach v nor v can reach u. However, since the graph is a DAG of SCCs, and the SCCs are arranged in a way that allows paths between them, but not necessarily all pairs. However, the maximum number of unidirectional pairs is achieved when the DAG is a linear chain, ensuring that for any two components, there's a directed path from one to the other, but not vice versa.\n\n    # Given that, the number of unidirectional pairs is equal to the total number of ordered pairs (u, v) with u != v, minus twice the number of mutual pairs (because mutual pairs are not unidirectional), minus the number of pairs that are not reachable in either direction. But since we are trying to maximize the unidirectional pairs, we assume that all non-mutual pairs are unidirectional. That is, the graph is constructed in a way that ensures that for any two nodes not in the same SCC, there is a path from one to the other but not vice versa.\n\n    # Therefore, the maximum number of unidirectional pairs is (total_nodes * (total_nodes - 1)) - 2*p.\n\n    # Wait, let's verify with the sample input. For p=3, the minimal nodes is 3. Then total_ordered_pairs is 3*2=6. 2*p is 6. So 6 - 6 = 0, which matches the first sample output. For p=4, minimal nodes is 5. total_ordered_pairs is 5*4=20. 2*p is 8. 20-8=12. But the sample output is 6. Hmm, that doesn't match. So there must be an error in this reasoning.\n\n    # Let's look at the sample where p=4, the output is 5 6. So according to this formula, 5*4=20, 2*4=8, 20-8=12. But sample says 6. So clearly, this approach is wrong.\n\n    # Let me re-examine the problem statement. The unidirectional pairs are defined as ordered pairs (u, v) where u != v, there exists a path from u to v, and no path from v to u. The problem asks for the number of such pairs in the graph. \n\n    # In the case where the graph consists of two SCCs: one of size 3 (C(3,2)=3) and one of size 2 (C(2,2)=1), total p is 4. The total number of nodes is 5. \n\n    # The mutual pairs are the ones inside each SCC. So for the first SCC (size 3), there are 3*2=6 ordered pairs (u, v) with u != v, and all are mutual. For the second SCC (size 2), there are 2*1=2 ordered pairs, which are mutual. So total mutual pairs is 6 + 2 = 8. But the p value is 4, which is the number of (u < v) pairs. So the 8 ordered pairs include both (u, v) and (v, u) for each of the 4 (u < v) pairs. Hence, the formula for the number of mutual ordered pairs is 2*p. \n\n    # Now, the total number of ordered pairs (u, v) with u != v is 5*4=20. The mutual pairs are 8. The remaining 20 - 8 = 12 are unidirectional or not reachable. But how many of them are unidirectional?\n\n    # The graph is constructed with two SCCs, A (size 3) and B (size 2). Suppose there is a directed edge from A to B. Then, all pairs (a, b) where a is in A and b is in B are unidirectional. There are 3*2=6 such pairs. Also, there are no paths from B to A, so the pairs (b, a) are not reachable. Additionally, within each SCC, there are mutual pairs. Between the SCCs, there are no paths from B to A. So the unidirectional pairs are 3*2=6. Which matches the sample output. \n\n    # So in this case, the number of unidirectional pairs is 3*2 = 6. Which equals the product of the sizes of the two components. So the general approach is: the maximum number of unidirectional pairs is the sum over all pairs of components (A, B) where A is before B in the DAG, of |A| * |B|. \n\n    # To maximize this sum, we should arrange the components in a linear order where each component points to the next one. And the maximum sum is achieved when the components are ordered in non-decreasing order of size. Wait, no. The maximum sum of products for all pairs (i < j) is achieved when the components are ordered in non-decreasing order. Wait, no. Let's think: suppose we have components of sizes a, b. The sum is a*b. If a < b, then putting a before b gives a*b. If we put b before a, then it's still a*b. So the order doesn't affect the sum. But when there are more than two components, the order affects how the products are accumulated. For example, components of sizes 1, 2, 3. If we arrange them in order 1, 2, 3, the sum is 1*2 + 1*3 + 2*3 = 2 + 3 + 6 = 11. If we arrange them in order 3, 2, 1, the sum is 3*2 + 3*1 + 2*1 = 6 + 3 + 2 = 11. So the order does not matter. Therefore, the total sum is always the same, regardless of the order of the components. Therefore, the total number of unidirectional pairs is the sum for all pairs of components (i < j) of size_i * size_j.\n\n    # So the formula for the maximum number of unidirectional pairs is (total_nodes^2 - sum(size_i^2)) // 2. Because sum_{i < j} size_i * size_j = [ (sum size_i)^2 - sum size_i^2 ] / 2.\n\n    # Let's test this with the sample. For the case where the components are 3 and 2. Sum sizes squared is 9 + 4 = 13. Total nodes squared is 25. So (25 - 13)/2 = 12/2 = 6. Which matches the sample. For the first sample where p=3, the components are just 3. So sum of squares is 9. Total nodes squared is 9. (9 -9)/2 = 0. Which matches the sample.\n\n    # So the correct formula for the maximum number of unidirectional pairs is (total_nodes^2 - sum_of_squares) // 2.\n\n    # Therefore, the steps are:\n    # 1. Find the minimal number of nodes by decomposing p into sum of C(k_i, 2) terms.\n    # 2. Calculate sum_of_squares as the sum of k_i^2.\n    # 3. The maximum number of unidirectional pairs is (total_nodes^2 - sum_of_squares) // 2.\n\n    # Now, implement this.\n\n    # Compute sum_of_squares\n    sum_squares = sum(k*k for k in nodes)\n    total_nodes_squared = total_nodes * total_nodes\n    max_unidirectional = (total_nodes_squared - sum_squares) // 2\n\n    print(f\"{total_nodes} {max_unidirectional}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 481,
        "completion_token_count": 3649,
        "thoughts_token_count": 1024
    }
}