{
    "start": 1758338166.9981656,
    "end": 1758338276.1395805,
    "start-formatted": "2025-09-20 12:16 KST",
    "end-formatted": "2025-09-20 12:17 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    max_nm = 2 * 10**5 + 10\n    fact = [1] * (max_nm)\n    inv_fact = [1] * (max_nm)\n    \n    for i in range(1, max_nm):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact[max_nm - 1] = pow(fact[max_nm - 1], MOD - 2, MOD)\n    for i in range(max_nm - 2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n    \n    results = []\n    for line in data:\n        n_str, m_str, g_str = line.split()\n        n = int(n_str)\n        m = int(m_str)\n        g = int(g_str)\n        \n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n        \n        # We need to reduce the string to a single character using the allowed operations\n        # Each operation reduces the length by 1. So we need to reduce from total to 1\n        # Which means we need (total - 1) operations\n        # Each operation reduces the number of 0s and 1s by some amount\n        # Let's analyze the parity of the number of operations needed\n        # The final character must be g\n        # Let's simulate what happens during each operation\n        \n        # Let's think recursively: the final character depends on the parity of the number of operations\n        # and the initial count of 0s and 1s\n        # But there's a simpler way: the final character is determined by the parity of the number of 1s\n        # Because each operation replaces two characters with one, which is 1 if both are 0, else 0\n        # So the parity of the number of 1s determines the final character\n        \n        # Let's see:\n        # If we have an even number of 1s, the final character will be 0\n        # If we have an odd number of 1s, the final character will be 1\n        # So the final character is equal to the parity of the number of 1s\n        \n        # So to get g as the final character, the number of 1s must be congruent to g modulo 2\n        # But wait, the number of operations is total - 1\n        # Each operation reduces the number of 1s by either 0 or 2\n        # So the parity of the number of 1s is preserved\n        # Therefore, the parity of the number of 1s must be equal to g\n        \n        if (m % 2) != g:\n            results.append(0)\n            continue\n        \n        # Now, the number of beautiful strings is the number of ways to arrange n 0s and m 1s\n        res = comb(n + m, n, fact, inv_fact)\n        results.append(res)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    max_nm = 2 * 10**5 + 10\n    fact = [1] * (max_nm)\n    inv_fact = [1] * (max_nm)\n    \n    for i in range(1, max_nm):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact[max_nm - 1] = pow(fact[max_nm - 1], MOD - 2, MOD)\n    for i in range(max_nm - 2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n    \n    results = []\n    for line in data:\n        n_str, m_str, g_str = line.split()\n        n = int(n_str)\n        m = int(m_str)\n        g = int(g_str)\n        \n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n        \n        # We need to reduce the string to a single character using the allowed operations\n        # Each operation reduces the length by 1. So we need to reduce from total to 1\n        # Which means we need (total - 1) operations\n        # Each operation reduces the number of 0s and 1s by some amount\n        # Let's analyze the parity of the number of operations needed\n        # The final character must be g\n        # Let's simulate what happens during each operation\n        \n        # Let's think recursively: the final character depends on the parity of the number of operations\n        # and the initial count of 0s and 1s\n        # But there's a simpler way: the final character is determined by the parity of the number of 1s\n        # Because each operation replaces two characters with one, which is 1 if both are 0, else 0\n        # So the parity of the number of 1s determines the final character\n        \n        # Let's see:\n        # If we have an even number of 1s, the final character will be 0\n        # If we have an odd number of 1s, the final character will be 1\n        # So the final character is equal to the parity of the number of 1s\n        \n        # So to get g as the final character, the number of 1s must be congruent to g modulo 2\n        # But wait, the number of operations is total - 1\n        # Each operation reduces the number of 1s by either 0 or 2\n        # So the parity of the number of 1s is preserved\n        # Therefore, the parity of the number of 1s must be equal to g\n        \n        if (m % 2) != g:\n            results.append(0)\n            continue\n        \n        # Now, the number of beautiful strings is the number of ways to arrange n 0s and m 1s\n        res = comb(n + m, n, fact, inv_fact)\n        results.append(res)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 549,
        "completion_token_count": 746,
        "thoughts_token_count": 0
    }
}