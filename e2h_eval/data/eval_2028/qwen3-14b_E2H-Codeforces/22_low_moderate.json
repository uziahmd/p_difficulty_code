{
    "start": 1758309590.9359276,
    "end": 1758309808.1826067,
    "start-formatted": "2025-09-20 04:19 KST",
    "end-formatted": "2025-09-20 04:23 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, the approach is to check for each student if there's at least one subject where they have the maximum mark for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the first student's marks for three subjects.\n\nSo, the plan is:\n\n1. For each subject (columns), find the maximum mark.\n2. For each student, check if in any of the subjects they have the maximum mark for that subject.\n3. Count how many students meet this condition.\n\nWait, but how do I process the data? Let's think about the steps.\n\nFirst, I need to process the gradebook. Let's think of it as a 2D array. Each row is a student, each column is a subject.\n\nFor example, for the first sample input:\n\n3 3\n223\n232\n112\n\nThe gradebook would be:\n\nStudent 0: [2,2,3]\nStudent 1: [2,3,2]\nStudent 2: [1,1,2]\n\nFor each subject (columns 0, 1, 2):\n\nSubject 0: max is 2 (students 0 and 1 have 2)\nSubject 1: max is 3 (student 1)\nSubject 2: max is 3 (student 0)\n\nSo, student 0 is best in subject 2 (since 3 is the max there). Student 1 is best in subject 1 (3). Student 2 isn't best in any. So total is 2.\n\nSo the output is 2.\n\nSo the steps are:\n\n- Find the maximum value for each subject (column).\n- Then, for each student, check if there's at least one column where their mark equals the max for that column.\n\nSo the key is to compute the maximums per column.\n\nHow to do that in Python?\n\nFirst, read the input. Let's read n and m. Then read n lines, each line being a string of m digits. Then convert each line into a list of integers. So for example, the first line after n and m is '223' which becomes [2,2,3].\n\nOnce we have the data as a list of lists, then for each column (from 0 to m-1), compute the maximum value.\n\nOnce we have those max values per column, then for each student, check if any of their marks in the columns is equal to the max of that column. If yes, then they are successful.\n\nSo, the steps in code:\n\nRead n and m.\n\nThen read n lines, each line is a string. For each line, convert into a list of integers. So, for example, for line '223', we can do [int(c) for c in line].\n\nOnce we have the data stored as a 2D list (students x subjects), then for each column, compute the max.\n\nSo for columns in 0 to m-1:\n\nmax_marks = [max of column j for each j]\n\nOnce we have that, for each student in the data, check if any of their marks in the columns equals the max_marks for that column.\n\nIf at least one such column exists, count that student.\n\nSo, how to compute the max for each column?\n\nLet's think: for each column j, iterate through all students' j-th mark and find the maximum.\n\nFor example, for column j:\n\nmax_val = max( [students[i][j] for i in range(n)] )\n\nSo, for each j in 0..m-1.\n\nOnce we have that list, then for each student, check if any of their marks in the columns is equal to the max of that column.\n\nNow, code steps:\n\nRead n and m.\n\nThen read n lines, each line is a string. Convert each into a list of integers. Let's call this grid.\n\nThen compute for each column j, the max value. Let's create a list called max_per_subject, where max_per_subject[j] is the maximum of column j.\n\nOnce that's done, for each student in grid, check if there exists at least one j where student's j-th mark is equal to max_per_subject[j].\n\nThe count of such students is the answer.\n\nNow, let's think about how to implement this in Python.\n\nSample code:\n\nRead n, m.\n\nThen read n lines, each line is a string. For example:\n\nn, m = map(int, input().split())\n\n",
    "response": "```python\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    line = input().strip()\n    grid.append([int(c) for c in line])\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grid[i][j] > max_val:\n            max_val = grid[i][j]\n    max_per_subject.append(max_val)\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    line = input().strip()\n    grid.append([int(c) for c in line])\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grid[i][j] > max_val:\n            max_val = grid[i][j]\n    max_per_subject.append(max_val)\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 140,
        "thoughts_token_count": 1024
    }
}