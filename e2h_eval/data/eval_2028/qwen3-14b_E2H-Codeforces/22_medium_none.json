{
    "start": 1758309118.744715,
    "end": 1758309312.4964705,
    "start-formatted": "2025-09-20 04:11 KST",
    "end-formatted": "2025-09-20 04:15 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A successful student is one who is the best in at least one subject. Being the best in a subject means no one else has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where they have the maximum mark for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters, each representing the marks. Oh right, each line is a string of digits, like '223' for a student's marks in three subjects.\n\nSo, the plan is:\n\n1. For each subject (column), find the maximum mark.\n2. For each student, check if in any of the subjects they have the maximum mark for that subject.\n3. Count how many students meet this condition.\n\nWait, but how to process the data? Let's think about the structure.\n\nThe gradebook can be represented as a 2D list. For example, for the first sample input:\n\n3 3\n223\n232\n112\n\nThe gradebook would be:\nstudent 0: [2,2,3]\nstudent 1: [2,3,2]\nstudent 2: [1,1,2]\n\nFor each column (subject), find the max value. For subject 0 (first column), the values are 2,2,1 → max is 2. Subject 1: 2,3,1 → max is 3. Subject 2: 3,2,2 → max is 3.\n\nThen, for each student, check if any of their marks in a subject is equal to the max of that subject.\n\nSo for student 0: his marks are 2 (subject 0, which has max 2), so he is successful. Also, subject 2 has 3 which is the max. So he is successful. Student 1 has in subject 1 a 3 which is the max. So he is successful. Student 2 has none of his marks equal to the max of their respective subjects. So total is 2.\n\nSo how to compute this?\n\nFirst, process the input into a list of lists. Then, for each column, compute the maximum value.\n\nBut how to get the columns? Well, for each column index j, iterate through all the rows (students) and collect the j-th element.\n\nOnce I have the maximums for each subject, then for each student, check if any of their marks in any subject is equal to the max of that subject.\n\nSo steps:\n\nRead n and m.\n\nRead the next n lines, each line being a string. Convert each string into a list of integers. So, for example, '223' becomes [2,2,3].\n\nThen, for each subject (columns 0 to m-1), compute the maximum value. Let's create a list called max_per_subject, where max_per_subject[j] is the maximum of column j.\n\nOnce that's done, for each student, check if any of their marks in any subject is equal to the max_per_subject for that subject. If yes, then count them.\n\nSo the code steps:\n\nRead n and m.\n\nRead n lines, each as a string. Then convert each to a list of integers. Let's say we have a 2D list called grades, where grades[i][j] is the mark of student i in subject j.\n\nCompute max_per_subject for each column j.\n\nThen for each student i, check if any of their marks in any subject j is equal to max_per_subject[j]. If yes, increment the count.\n\nNow, how to compute the max_per_subject.\n\nFor j in 0 to m-1:\n\nmax_val = max(grades[i][j] for i in range(n))\n\nSo, for each column j, loop through all students and take their j-th mark, then find the max.\n\nOnce that is done, for each student, loop through their marks and check if any of them is equal to the max of that column.\n\nNow, code-wise, in Python:\n\nRead the input. The first line is n and m. Then n lines follow.\n\nBut wait, the input could be given as a single string, but in the example, the input is given as a list of strings. Wait, the problem says that the input is read from standard input. So for example, in the first sample input, the input is:\n\n3 3\n\n223\n\n232\n\n112\n\nSo, the code needs to read from stdin. So in Python, I can read using input() or sys.stdin.\n\nBut for multiple test cases? Wait, the problem says that the input is given as per the first sample. Wait, looking back at the problem statement:\n\nThe input is given as the first line with n and m, then n lines of m characters each.\n\nBut the sample input shows two examples, but perhaps the code is supposed to handle a single test case. Wait, looking at the problem statement again:\n\nThe input is given as per the first sample. The user is to write a Python script that reads from stdin and outputs to stdout. So the code must process one test case, not multiple. The sample input shows two examples, but that's probably for illustrating the problem. So the code must read one n and m, then n lines of the gradebook.\n\nSo, the code will be:\n\nRead n and m.\n\nThen read n lines, each line being a string of m digits.\n\nThen process as discussed.\n\nSo, code steps:\n\nRead n, m = map(int, input().split())\n\nThen grades = [list(map(int, list(input().strip()))) for _ in range(n)]\n\nWait, for example, input line '223' → list('223') → ['2','2','3'], then map to int → [2,2,3].\n\nYes.\n\nOnce grades is built, compute max_per_subject.\n\nmax_per_subject = []\n\nfor j in range(m):\n\n    max_val = max(grades[i][j] for i in range(n))\n\n    max_per_subject.append(max_val)\n\nThen, for each student in grades, check if any of their marks in any subject j is equal to max_per_subject[j].\n\ncount = 0\n\nfor student in grades:\n\n    for j in range(m):\n\n        if student[j] == max_per_subject[j]:\n\n            count +=1\n\n            break\n\nSo, for each student, loop through their subjects. If any of them is equal to the max for that subject, increment count and break to check next student.\n\nYes.\n\nSo that's the plan.\n\nNow, let's test against the first sample input.\n\nSample 1:\n\nn=3, m=3\n\ngrades:\n\nstudent 0: [2,2,3]\n\nstudent 1: [2,3,2]\n\nstudent 2: [1,1,2]\n\nmax_per_subject:\n\nfor j=0: 2,2,1 → max 2.\n\nj=1: 2,3,1 → max 3.\n\nj=2: 3,2,2 → max 3.\n\nso max_per_subject is [2,3,3]\n\nNow for each student:\n\nstudent 0: check each j:\n\nj=0: 2 == 2 → yes. So count +=1.\n\nstudent 1: j=0: 2 ==2 → yes. So count +=1.\n\nstudent 2: check j=0: 1 <2. j=1: 1 <3. j=2: 2 <3. So no. So not counted.\n\nTotal count is 2 → matches sample.\n\nSecond sample input:\n\n3 5\n\n91728\n\n11828\n\n11111\n\ngrades:\n\nstudent 0: [9,1,7,2,8]\n\nstudent 1: [1,1,8,2,8]\n\nstudent 2: [1,1,1,1,1]\n\nmax_per_subject:\n\nfor j=0: 9,1,1 → max 9.\n\nj=1: 1,1,1 → max 1.\n\nj=2:7,8,1 → max 8.\n\nj=3: 2,2,1 → max 2.\n\nj=4: 8,8,1 → max 8.\n\nso max_per_subject is [9,1,8,2,8]\n\nNow for each student:\n\nstudent 0:\n\nj=0: 9 ==9 → yes. So counted.\n\nstudent 1:\n\nj=2: 8 ==8 → yes.\n\nstudent 2:\n\nj=1: 1 ==1 → yes. So all three are counted. Hence output 3.\n\nWhich matches the sample.\n\nSo the code should work.\n\nNow, what about edge cases?\n\nCase where all students have same marks. Like n=2, m=1, and both have 5. Then max is 5. Both students are best in the subject. So count is 2.\n\nAnother case: n=1, m=1. The student is best, so count 1.\n\nAnother case: n=2, m=2. Student 1 has [9, 9], student 2 has [9, 9]. Then for each subject, max is 9. Both students are successful. So count is 2.\n\nAnother case: student has multiple max subjects. Like in the first sample, student 0 has two max subjects. But he is counted once.\n\nSo the code is correct.\n\nNow, implement this in Python.\n\nNow, code:\n\nRead n and m.\n\nRead n lines, each as a list of integers.\n\nCompute max_per_subject.\n\nThen for each student, check if any of their marks in any subject is equal to the max for that subject.\n\nNow, code:\n\nIn Python:\n\nRead input:\n\nn, m = map(int, input().split())\n\ngrades = []\n\nfor _ in range(n):\n\n    line = input().strip()\n\n    row = [int(c) for c in line]\n\n    grades.append(row)\n\nThen compute max_per_subject:\n\nmax_per_subject = [0]*m\n\nfor j in range(m):\n\n    max_val = 0\n\n    for i in range(n):\n\n        if grades[i][j] > max_val:\n\n            max_val = grades[i][j]\n\n    max_per_subject[j] = max_val\n\nAlternatively, using list comprehensions:\n\nmax_per_subject = [max(grades[i][j] for i in range(n)) for j in range(m)]\n\nBut for code efficiency, perhaps better to precompute.\n\nOnce that is done, count the successful students.\n\ncount = 0\n\nfor student in grades:\n\n    for j in range(m):\n\n        if student[j] == max_per_subject[j]:\n\n            count +=1\n\n            break\n\nprint(count)\n\nYes.\n\nSo putting it all together.\n\nTesting the code with the sample inputs.\n\nSample 1:\n\nInput is:\n\n3 3\n\n223\n\n232\n\n112\n\ngrades becomes [[2,2,3], [2,3,2], [1,1,2]]\n\nmax_per_subject is [2,3,3]\n\ncount:\n\nstudent 0: 2 (j=0) equals 2 → count +=1.\n\nstudent 1: j=0 is 2 equals 2 → count +=1.\n\nstudent 2: none. So total 2.\n\nSample 2:\n\n3 5\n\n91728 → [9,1,7,2,8]\n\n11828 → [1,1,8,2,8]\n\n11111 → [1,1,1,1,1]\n\nmax_per_subject is [9,1,8,2,8]\n\nstudent 0: j=0 is 9 → yes.\n\nstudent 1: j=2 is 8 → yes.\n\nstudent 2: j=1 is 1 → yes.\n\nSo count is 3.\n\nSo code works.\n\nAnother test case: n=1, m=1. Input is 1 1 and 5. Output is 1.\n\nAnother test case: n=2, m=1. Input is 2 1, then 5 and 5. Output is 2.\n\nYes.\n\nNow, code:\n\nSo the code is:\n\nRead n, m.\n\nRead n lines, each converted to list of integers.\n\nCompute max_per_subject for each column.\n\nLoop through each student, check if any of their marks in any column is equal to the max for that column.\n\nNow, code:\n\nNow, code:\n\nRead the input, process, etc.\n\nSo the code is:\n\nn, m = map(int, input().split())\n\ngrades = []\n\nfor _ in range(n):\n\n    line = input().strip()\n\n    grades.append([int(c) for c in line])\n\nmax_per_subject = [max(grades[i][j] for i in range(n)) for j in range(m)]\n\ncount = 0\n\nfor student in grades:\n\n    for j in range(m):\n\n        if student[j] == max_per_subject[j]:\n\n            count += 1\n\n            break\n\nprint(count)\n\nWait, but in Python, list comprehensions can be used. But for the max_per_subject, the code is:\n\nmax_per_subject = [max(grades[i][j] for i in range(n)) for j in range(m)]\n\nBut for each j, the code loops through all i.\n\nYes.\n\nThis should work.\n\nSo that's the code. Let me check for possible errors.\n\nWhat if m is zero? But according to the constraints, m is at least 1. Because 1 ≤ n, m ≤ 100.\n\nSo no problem.\n\nAnother possible error: when the student has multiple max in different subjects, but the code breaks after the first occurrence. Which is correct, since the student is successful once.\n\nYes.\n\nThus, the code should work.\n",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their performance in various subjects. A student is considered successful if they are the best in at least one subject. The best in a subject means no other student has a higher mark in that subject.\n\n### Approach\n1. **Input Reading**: Read the number of students (n) and subjects (m), followed by the gradebook which is an n x m matrix of integers.\n2. **Determine Maximum Marks per Subject**: For each subject, compute the maximum mark achieved by any student.\n3. **Identify Successful Students**: For each student, check if they have achieved the maximum mark in any subject. If they have, they are considered successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_per_subject = [max(grades[i][j] for i in range(n)) for j in range(m)]\n\ncount = 0\nfor student in grades:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)\n```\n\n### Explanation\n1. **Reading Input**: The first line of input is parsed to get the number of students (n) and subjects (m). The subsequent lines are read as strings and converted into lists of integers representing the marks of each student.\n2. **Computing Maximum Marks per Subject**: For each subject (column in the gradebook), we determine the highest mark achieved by any student using a list comprehension.\n3. **Checking for Successful Students**: For each student, we check if their mark in any subject matches the maximum mark for that subject. If it does, the student is counted as successful, and we move to the next student immediately.\n\nThis approach ensures that we efficiently determine the successful students by leveraging the maximum values for each subject and checking each student against these values. The overall complexity is O(n*m), which is efficient given the constraints (n, m ≤ 100).",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_per_subject = [max(grades[i][j] for i in range(n)) for j in range(m)]\n\ncount = 0\nfor student in grades:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 448,
        "completion_token_count": 447,
        "thoughts_token_count": 2929
    }
}