{
    "start": 1758343941.477287,
    "end": 1758344725.705666,
    "start-formatted": "2025-09-20 13:52 KST",
    "end-formatted": "2025-09-20 14:05 KST",
    "gpu": 2,
    "pid": 13,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Chord\n\nVasya studies music. He has learned lots of interesting stuff. For example, he knows that there are 12 notes: C, C#, D, D#, E, F, F#, G, G#, A, B, H. He also knows that the notes are repeated cyclically: after H goes C again, and before C stands H. We will consider the C note in the row's beginning and the C note after the H similar and we will identify them with each other. The distance between the notes along the musical scale is measured in tones: between two consecutive notes there's exactly one semitone, that is, 0.5 tone. The distance is taken from the lowest tone to the uppest one, that is, the distance between C and E is 4 semitones and between E and C is 8 semitonesVasya also knows what a chord is. A chord is an unordered set of no less than three notes. However, for now Vasya only works with triads, that is with the chords that consist of exactly three notes. He can already distinguish between two types of triads — major and minor.Let's define a major triad. Let the triad consist of notes X, Y and Z. If we can order the notes so as the distance along the musical scale between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones, then the triad is major. The distance between X and Z, accordingly, equals 7 semitones.A minor triad is different in that the distance between X and Y should be 3 semitones and between Y and Z — 4 semitones.For example, the triad \"C E G\" is major: between C and E are 4 semitones, and between E and G are 3 semitones. And the triplet \"C# B F\" is minor, because if we order the notes as \"B C# F\", than between B and C# will be 3 semitones, and between C# and F — 4 semitones.Help Vasya classify the triad the teacher has given to him.\n\n## Input\nThe only line contains 3 space-separated notes in the above-given notation.\n\n## Output\nPrint \"major\" if the chord is major, \"minor\" if it is minor, and \"strange\" if the teacher gave Vasya some weird chord which is neither major nor minor. Vasya promises you that the answer will always be unambiguous. That is, there are no chords that are both major and minor simultaneously.\n\n## Example\n### Input\n['C E G', 'C# B F', 'A B H']\n\n### Output\n['major', 'minor', 'strange']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nSo the task is to determine whether a given triad of notes is major, minor, or strange. The input is three notes, and I have to check all possible orderings to see if any of them fit the major or minor criteria.\n\nFirst, let's understand the note order and distances. The notes are in a cyclic order: C, C#, D, D#, E, F, F#, G, G#, A, B, H. Then it cycles back to C. Each consecutive pair is a semitone apart. So the distance between two notes is calculated as the number of steps from the first to the second in this order, moving forward. For example, C to E is 4 semitones (C→C# is 1, then D is 2, D# 3, E is 4). But if you go the other way, like E to C, that's 8 semitones because you go E→F (1), F# (2), G (3), G# (4), A (5), B (6), H (7), C (8). But the problem says that the distance is measured from lower to upper, so maybe when considering the distance between two notes, it's always the minimal steps in the cyclic order? Wait no, the problem says that the distance between X and Y is calculated as the number of semitones from X to Y along the scale. So for example, between X and Y, if X is before Y in the list, then it's the difference. But if Y is before X, then it's (Y's position - X's position + 12) mod 12? Or maybe it's the number of steps when moving forward from X to Y. For example, the distance between E and C would be 8 semitones, but the distance between C and E is 4. So the problem says that the distance is from the lower to upper. So when they say the distance between X and Y is 4, that's when X is lower than Y. But how do we determine which is lower?\n\nWait, the problem says that the distance is taken from the lowest tone to the upper. So, for example, between C and E, the distance is 4 semitones. Between E and C, it's 8 semitones. So the distance depends on the order. So when we have two notes, X and Y, the distance between X and Y is the number of semitones you get by moving from X to Y in the cyclic order. So if X comes before Y in the list, then it's Y's index minus X's index. If Y comes before X, then it's (12 - (X's index - Y's index))? Or maybe (Y's index + 12 - X's index) mod 12? Wait, let's think of the notes as arranged in a circle. The distance from X to Y is the number of steps you take moving forward (clockwise) from X to reach Y. So for example, if X is C (index 0) and Y is E (index 4), the distance is 4. If X is E (index 4) and Y is C (index 0), then moving forward, you have to go E→F→...→H→C. That's 8 steps. So the distance is 8.\n\nTherefore, to calculate the distance between two notes, given their positions in the list, we can compute (y_index - x_index) if y_index >= x_index, else (y_index + 12 - x_index). Wait, no. Because the total number of notes is 12. So the distance from X to Y is (y_index - x_index) mod 12. But since the problem says that the distance is from the lower to upper, perhaps the distance is the minimal steps in one direction. No, the problem says that the distance between X and Y is measured as the number of semitones when moving from X to Y along the scale. So the distance is not the minimal, but the number of steps when moving forward. So for example, if X is C and Y is H (which is index 11?), then the distance from C to H is 11 semitones. But the distance from H to C is 1 semitone.\n\nSo the key is to find, for any two notes, the distance when moving from the first to the second in the cyclic order. So the distance between X and Y is (y_index - x_index) if y_index >= x_index, else (y_index + 12 - x_index). Which can also be written as (y_index - x_index) % 12. Wait, no. Let's take an example: X is E (index 4), Y is C (index 0). Then (0 - 4) mod 12 is 8, which is correct. So the distance from X to Y is (y_index - x_index) mod 12. But wait, if X is C (0) and Y is E (4), then (4-0) mod 12 is 4, which is correct. So yes, the distance between X and Y is (y_index - x_index) mod 12. But wait, in the problem statement, the distance between E and C is 8 semitones. Which is exactly what this formula gives. So this formula gives the correct distance.\n\nBut how do we compute the distance between two notes? So first, we need to map each note to its index in the list. Let's create a list of the notes in order, then for each note, find its index.\n\nSo the notes are ordered as:\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\nWait, but the problem says that after H comes C again. So the indexes are 0 to 11. So for example, H is at index 11. Then C is 0, which is next.\n\nSo the first step is to create a dictionary that maps each note to its index. For example, note_to_index = {'C': 0, 'C#': 1, ... 'H': 11}.\n\nOnce I have that, for any two notes X and Y, the distance from X to Y is (y_index - x_index) % 12. Wait, no. Wait, for example, if X is C (0) and Y is C (0), the distance is zero. But (0 - 0) mod 12 is zero. Correct. If X is C (0), Y is H (11): (11 - 0) mod 12 is 11. Which is correct. If X is H (11), Y is C (0): (0 - 11) mod 12 is ( -11 ) mod 12 = 1. Which is correct, since the distance from H to C is 1 semitone. So that formula works.\n\nSo the plan is:\n\nFor the three given notes, generate all possible permutations (since the order matters for checking the major/minor conditions). For each permutation (X, Y, Z), check if the distance from X to Y is 4 semitones and Y to Z is 3 semitones. If any permutation satisfies this, then it's a major chord. Similarly, check if any permutation has X to Y as 3 and Y to Z as 4, which would make it a minor chord.\n\nBut since the triad is unordered, we need to check all possible orderings of the three notes. However, since there are 3! = 6 possible permutations, we can generate them all and check for each.\n\nBut perhaps there's a smarter way. For example, for a major chord, the three notes must have two intervals: 4 and 3. So for any ordering, the first interval is 4, the second is 3. But since the triad is unordered, we need to check all possible orderings.\n\nSo for the three notes, let's generate all permutations of the three elements, and for each permutation, check:\n\ndistance between first and second is 4, and between second and third is 3 → major.\n\nOr, for minor, check if distance between first and second is 3, and between second and third is 4 → minor.\n\nIf any permutation meets either condition, then return the corresponding result.\n\nNow, the problem says that the answer is unambiguous, so there's no case where both major and minor are possible.\n\nSo steps for the code:\n\n1. Read the input: three notes. For example, input is a list of three strings, like ['C', 'E', 'G'].\n\n2. Create a mapping from note names to their indices. So, create a dictionary.\n\n3. Generate all permutations of the three notes. For each permutation (X, Y, Z):\n\n   a. Compute distance from X to Y: d1 = (y_index - x_index) % 12.\n\n   b. Compute distance from Y to Z: d2 = (z_index - y_index) % 12.\n\n   c. Check if d1 is 4 and d2 is 3 → if yes, then it's a major chord.\n\n   d. Check if d1 is 3 and d2 is 4 → if yes, then it's a minor chord.\n\n4. If any permutation meets the major condition, output 'major'. Similarly for minor. Otherwise, output 'strange'.\n\nBut how do I generate all permutations of the three notes? Well, in Python, itertools.permutations can generate all possible orderings. So for the three notes, permutations will generate all 6 possible orderings.\n\nBut since the input is three distinct notes (assuming that the input has three distinct notes?), but the problem says that the input is three notes. But according to the problem statement, the chord is a set of three notes. So the input may have duplicates? Probably not. But according to the problem statement, the input is three notes, but perhaps they can be same? But the problem says that the answer is unambiguous. But for the code, we can assume that the three notes are distinct. However, the problem says that the input is a chord, which is an unordered set of three notes. So the input will have three distinct notes.\n\nBut regardless, the code can process any three notes, even if they are same, but according to the problem statement, the answer is unambiguous, but perhaps the code doesn't need to handle that.\n\nSo, in code:\n\nRead the three notes as a list. For example, input is split into three elements. Then, generate all permutations of these three elements. For each permutation, check the conditions.\n\nNow, for example, in the sample input:\n\nFirst case: C E G.\n\nCheck all permutations. Let's take the permutation (C, E, G). The distance from C to E is 4 (correct), E to G is 3 (correct). So this permutation meets the major condition. So output is major.\n\nSecond sample input: C# B F. Let's see. One of the permutations is B, C#, F. Distance from B to C#: B is index 10 (assuming the order is as per the list). Let me check the note_to_index mapping.\n\nLet me define the order as:\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\nWait, the problem says that the notes are: C, C#, D, D#, E, F, F#, G, G#, A, B, H. So the order is as such. So the indexes are 0 to 11. So:\n\nC is 0\n\nC# is 1\n\nD is 2\n\nD# is 3\n\nE is 4\n\nF is 5\n\nF# is 6\n\nG is 7\n\nG# is 8\n\nA is 9\n\nB is 10\n\nH is 11.\n\nSo for example, B is index 10, H is 11.\n\nSo in the sample input 'C# B F':\n\nThe notes are C#, B, F. Let's take permutation B, C#, F.\n\nB is index 10. C# is index 1. So distance from B to C# is (1 - 10) mod 12 → ( -9 ) mod 12 → 3. Because 1 -10 is -9, adding 12 gives 3. So that's 3 semitones. Then from C# (index 1) to F (index 5): 5-1 = 4. So that's 4. So this permutation meets the minor condition (d1=3, d2=4). So it's minor.\n\nSo the code needs to check for all permutations.\n\nNow, the code steps:\n\nImplement the note_to_index mapping.\n\nThen, for each permutation of the three notes, check if any of the conditions are met.\n\nOnce any permutation meets the major condition, return 'major'. Similarly for minor.\n\nSo the code can proceed as follows:\n\nRead the input line as a list of three strings. For example, input is split into parts.\n\nThen, generate all permutations of the three notes.\n\nFor each permutation:\n\nx, y, z = permutation.\n\nCompute d1 = (y_index - x_index) % 12.\n\nCompute d2 = (z_index - y_index) % 12.\n\nIf d1 ==4 and d2 ==3 → major.\n\nIf d1 ==3 and d2 ==4 → minor.\n\nOnce any permutation meets either condition, we can return the answer.\n\nBut since there are multiple permutations, we need to check all of them. For example, even if one permutation meets the major condition, but another permutation meets the minor condition, but according to the problem statement, the answer is unambiguous. So the code can check all permutations, and if any of them meets the major condition, then return major, else check if any meets minor, else strange.\n\nSo in code:\n\nWe can loop through all permutations. For each permutation, check for major and minor.\n\nOnce we find a major, we can immediately return 'major' (since the problem says that the answer is unique, so once found, no need to check others). Similarly for minor.\n\nBut perhaps for code efficiency, it's better to check all permutations and collect whether any of them meets the major or minor conditions.\n\nBut since the permutations are only 6, it's manageable.\n\nSo code steps:\n\nRead the three notes as a list.\n\nCreate note_to_index dictionary.\n\nGenerate all permutations of the three notes.\n\nFor each permutation:\n\nCheck for major and minor.\n\nIf any permutation meets major, then answer is major.\n\nElse, check for minor.\n\nElse, strange.\n\nSo in code:\n\nfrom itertools import permutations\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\n\nnote_to_index = {note: idx for idx, note in enumerate(notes_order)}\n\ninput_notes = input().split()\n\nfor perm in permutations(input_notes):\n\n    x, y, z = perm\n\n    x_idx = note_to_index[x]\n\n    y_idx = note_to_index[y]\n\n    z_idx = note_to_index[z]\n\n    d1 = (y_idx - x_idx) % 12\n\n    d2 = (z_idx - y_idx) % 12\n\n    if d1 ==4 and d2 ==3:\n\n        print(\"major\")\n\n        exit()\n\n    if d1 ==3 and d2 ==4:\n\n        print(\"minor\")\n\n        exit()\n\nprint(\"strange\")\n\nWait, but in the sample input, for the first case, the code would check all permutations. For example, the permutation (C, E, G) would trigger the major condition. So the code would print 'major' and exit. For the second case, one of the permutations would trigger minor. For the third example, 'A B H' — let's see:\n\nNotes are A (9), B (10), H (11).\n\nCheck permutations:\n\nLet's take A, B, H.\n\nd1 is (10 -9) =1 mod 12 → 1. d2 is 11-10=1. Not matching.\n\nAnother permutation: A, H, B.\n\nd1 is (11 -9) = 2. d2 is (10-11) mod 12 → ( -1 ) mod 12 → 11. Not matching.\n\nAnother permutation: B, A, H.\n\nd1 is (9-10) mod 12 → -1 mod 12 → 11. Not 3 or 4.\n\nAnother permutation: B, H, A.\n\nd1 is (11 -10) =1. d2 is (9 - 11) mod 12 → -2 mod 12 → 10. No.\n\nAnother permutation: H, A, B. d1 is (9 - 11) mod 12 → -2 → 10. No.\n\nH, B, A: d1 is (10 -11) mod 12 → -1 → 11. d2 is 9 -10 → -1 → 11. No.\n\nSo none of the permutations meet the major or minor conditions. So output is 'strange'.\n\nWhich matches the sample.\n\nSo the code seems correct.\n\nBut let's test some edge cases.\n\nAnother example: C, E, G → major. The code would find it.\n\nAnother example: C#, B, F → in the permutation B, C#, F → d1 is (1 -10) mod 12 → 1-10 is -9 → mod 12 is 3. d2 is 5-1 =4. So yes, minor.\n\nAnother test case: C, E, G# → ?\n\nCheck permutations. Let's take C, E, G#. Distance from C to E is 4. From E to G# is (8 -4) =4. So d1=4, d2=4. Not 3. So no. Any other permutation?\n\nE, C, G#: d1 from E to C is (0 -4) mod 12 → 8. Not 3 or 4. So no.\n\nWhat about C, G#, E? d1 from C to G# is 8-0 =8. No. So no.\n\nSo this would be strange.\n\nAnother test case: C, E, B. Let's see. Let's check permutations. For example, C, E, B. d1 is 4. d2 from E to B is (10 -4) =6. Not 3. Another permutation: E, B, C. d1 from E to B is 6. d2 from B to C is 1. No. Another permutation: B, C, E. d1 is 1, d2 is 4. So 1 and 4. Not matching. Another permutation: B, E, C. d1 is 4 (E is index 4, B is 10. (4-10) mod 12 is ( -6 ) mod 12 = 6. No. Not 3 or 4. So perhaps this is strange.\n\nBut perhaps there is a permutation. Let me think. What if the permutation is C, B, E? Let's compute:\n\nC is 0, B is 10. d1 is (10 -0) mod 12 =10. Not 3 or 4. No.\n\nAnother permutation: E, C, B. d1 is (0 -4) mod 12 → 8. No.\n\nHmm. So perhaps it's strange.\n\nNow, code-wise, the code checks all permutations. So the code should work.\n\nNow, the code needs to read input from stdin, and output the answer.\n\nBut the input is given as a single line with three space-separated notes. For example, in the sample input, the input is given as ['C E G', 'C# B F', 'A B H'] — but wait, that's the example for the input. Wait, the actual input is a single line. Wait, the problem says:\n\nInput: The only line contains 3 space-separated notes in the above-given notation.\n\nSo for example, the sample input is three lines? No. The sample input shows that the input is a list of three examples, but that's probably part of the example for the problem. Wait, looking back:\n\nIn the example, the input is given as:\n\n['C E G', 'C# B F', 'A B H']\n\nBut that's probably not the actual input. Wait, the problem says:\n\nInput\n\nThe only line contains 3 space-separated notes in the above-given notation.\n\nSo for example, the input is a single line with three notes. Like:\n\nC E G\n\nOr C# B F\n\nBut in the sample input, the user provided three different test cases. But in the problem statement, the sample input is probably:\n\nSample Input:\n\nC E G\n\nSample Output:\n\nmajor\n\nBut the problem says that the sample input is:\n\n['C E G', 'C# B F', 'A B H']\n\nand output is ['major', 'minor', 'strange'].\n\nBut that's probably for the purpose of showing multiple test cases. However, the actual code needs to read a single line of input. So the code must read the three notes from a single line.\n\nWait, the problem says that the input is the only line with three space-separated notes. So for example, the input for the sample is:\n\nC E G\n\nWhich outputs 'major'.\n\nBut in the sample given, the input is written as a list of three examples. So perhaps that's a mistake in the problem description. But the code must read a single line with three notes.\n\nSo, for the code, the input is read as:\n\ninput_notes = input().split()\n\nWhich splits the input line into three elements.\n\nSo the code is correct.\n\nNow, code-wise, the code uses permutations from itertools. So need to import that.\n\nBut the code must be written as a Python script that reads from stdin and writes to stdout.\n\nSo the code:\n\nimport sys\nfrom itertools import permutations\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\nnote_to_index = {note: idx for idx, note in enumerate(notes_order)}\n\ninput_notes = sys.stdin.read().split()\n\nfor perm in permutations(input_notes):\n    x, y, z = perm\n    x_idx = note_to_index[x]\n    y_idx = note_to_index[y]\n    z_idx = note_to_index[z]\n    d1 = (y_idx - x_idx) % 12\n    d2 = (z_idx - y_idx) % 12\n    if d1 == 4 and d2 == 3:\n        print(\"major\")\n        exit()\n    if d1 == 3 and d2 == 4:\n        print(\"minor\")\n        exit()\n\nprint(\"strange\")\n\nWait, but in Python, the exit() function may not be the best way. But in code submission, using sys.exit() is better. However, in the code, perhaps using return or break. But in a script, using exit() (which is in the sys module) is okay. However, in the code above, the code uses exit(), but in Python, that's from the sys module. However, in practice, the code may need to import sys and use sys.exit().\n\nWait, in Python, the exit() function is available in the standard environment, but it's actually part of the sys module. However, in some environments, it's possible that exit() is not available. So better to use sys.exit().\n\nBut the code as written uses exit() which may not work. So perhaps replace with sys.exit().\n\nBut in the code, the code is written as:\n\nOnce a condition is met, print and exit.\n\nSo modifying the code:\n\nimport sys\nfrom itertools import permutations\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\nnote_to_index = {note: idx for idx, note in enumerate(notes_order)}\n\ninput_notes = sys.stdin.read().split()\n\nfor perm in permutations(input_notes):\n    x, y, z = perm\n    x_idx = note_to_index[x]\n    y_idx = note_to_index[y]\n    z_idx = note_to_index[z]\n    d1 = (y_idx - x_idx) % 12\n    d2 = (z_idx - y_idx) % 12\n    if d1 == 4 and d2 == 3:\n        print(\"major\")\n        sys.exit()\n    if d1 == 3 and d2 == 4:\n        print(\"minor\")\n        sys.exit()\n\nprint(\"strange\")\n\nYes. This should work.\n\nTesting the sample input:\n\nFor example, input line 'C E G' → code checks permutations. The first permutation that meets the condition is (C, E, G) → d1 is 4, d2 3 → prints major and exits.\n\nAnother example, input line 'C# B F' → permutations include B, C#, F. For that, d1 is (1 -10) mod 12 = ( -9 ) mod 12 = 3. d2 is (5 - 1) = 4 → 3 and 4 → minor.\n\nThird example: 'A B H' → none of the permutations meet the conditions → output 'strange'.\n\nSo the code works.\n\nNow, what about the case where the same note is repeated? According to the problem statement, the input is a chord, which is a set of three notes. So the input should have three distinct notes. But the code can handle that. For example, if all three are same note. Then, all permutations would have d1=0 and d2=0. So no match. Output is strange.\n\nBut according to the problem statement, the answer is unambiguous. So the code is safe.\n\nAnother test case: 'C# E G' → let's see. Let's check permutations. For example, C#, E, G. d1 from C# (1) to E (4) is 3. Then from E (4) to G (7) is 3. So d1=3, d2=3 → no. Any other permutation?\n\nE, G, C# → d1 from E (4) to G (7) is 3. d2 from G (7) to C# (1) is (1 -7) mod 12 = -6 mod 12 = 6. No. Not 3 and 4. Another permutation: G, C#, E → d1 from G (7) to C# (1) is (1-7) mod 12 = 6. No. So no. So output strange.\n\nAnother test case: 'C E G#'. Let's check permutations. For example, C, E, G# → d1 is 4 (E - C is 4), d2 is (G# is index 8, E is 4 → 8-4=4. So d2 is 4. Not 3. So no. Another permutation: E, G#, C. d1 is (8-4)=4. d2 is (0 -8) mod 12 = 4. So 4 and 4. No. Another permutation: C, G#, E. d1 is (8-0) =8. No. So output strange.\n\nSo the code seems to handle all cases correctly.\n\nThus, the code should be correct.\n",
    "response": "To solve this problem, we need to determine whether a given triad of musical notes forms a major chord, a minor chord, or neither. The solution involves checking all permutations of the three notes to see if they fit the criteria for either a major or minor chord based on specific semitone distances between the notes.\n\n### Approach\n1. **Note Mapping**: First, map each note to its corresponding index in the cyclic sequence of musical notes. This helps in calculating the semitone distances between any two notes.\n2. **Permutations Check**: Generate all permutations of the three input notes. For each permutation, check if the distances between consecutive notes match the criteria for a major or minor chord.\n3. **Distance Calculation**: For each permutation, calculate the distances between the first and second note, and between the second and third note. If these distances match the criteria for a major chord (4 semitones followed by 3 semitones) or a minor chord (3 semitones followed by 4 semitones), classify the chord accordingly.\n\n### Solution Code\n```python\nimport sys\nfrom itertools import permutations\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\nnote_to_index = {note: idx for idx, note in enumerate(notes_order)}\n\ninput_notes = sys.stdin.read().split()\n\nfor perm in permutations(input_notes):\n    x, y, z = perm\n    x_idx = note_to_index[x]\n    y_idx = note_to_index[y]\n    z_idx = note_to_index[z]\n    d1 = (y_idx - x_idx) % 12\n    d2 = (z_idx - y_idx) % 12\n    if d1 == 4 and d2 == 3:\n        print(\"major\")\n        sys.exit()\n    if d1 == 3 and d2 == 4:\n        print(\"minor\")\n        sys.exit()\n\nprint(\"strange\")\n```\n\n### Explanation\n1. **Note Mapping**: The `notes_order` list defines the sequence of musical notes in order. Each note is mapped to an index using a dictionary `note_to_index`, which allows quick lookup of each note's position in the sequence.\n2. **Permutations Check**: Using `itertools.permutations`, we generate all possible orderings of the three input notes. This ensures that we check every possible arrangement of the notes to find if any arrangement fits the criteria for a major or minor chord.\n3. **Distance Calculation**: For each permutation of notes, we compute the semitone distances between consecutive notes using modular arithmetic to handle the cyclic nature of the musical scale. If the distances match the criteria for a major or minor chord, the corresponding result is printed immediately, and the program exits. If no valid chord type is found after checking all permutations, the result is \"strange\".\n\nThis approach efficiently checks all possible configurations of the input notes and leverages modular arithmetic to correctly compute distances in a cyclic musical scale.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom itertools import permutations\n\nnotes_order = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']\nnote_to_index = {note: idx for idx, note in enumerate(notes_order)}\n\ninput_notes = sys.stdin.read().split()\n\nfor perm in permutations(input_notes):\n    x, y, z = perm\n    x_idx = note_to_index[x]\n    y_idx = note_to_index[y]\n    z_idx = note_to_index[z]\n    d1 = (y_idx - x_idx) % 12\n    d2 = (z_idx - y_idx) % 12\n    if d1 == 4 and d2 == 3:\n        print(\"major\")\n        sys.exit()\n    if d1 == 3 and d2 == 4:\n        print(\"minor\")\n        sys.exit()\n\nprint(\"strange\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 684,
        "completion_token_count": 635,
        "thoughts_token_count": 6024
    }
}