{
    "start": 1758307299.83226,
    "end": 1758307403.9506948,
    "start-formatted": "2025-09-20 03:41 KST",
    "end-formatted": "2025-09-20 03:43 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nThe task is to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, for each subject, we need to find the maximum mark, and then check which students have that mark. Each such student is considered successful. But since a student can be successful in multiple subjects, we need to count each student once even if they are best in multiple subjects.\n\nSo the approach would be:\n\n1. For each subject (column in the gradebook), find the maximum value.\n2. For each student, check if there's at least one subject where their mark in that subject is equal to the maximum for that subject. If yes, they are successful.\n3. Count how many such students there are.\n\nLet me think about how to implement this.\n\nFirst, the input is n and m, followed by n lines each with m characters. Each line represents a student's marks for m subjects.\n\nSo, for example, if the input is:\n\n3 3\n223\n232\n112\n\nThen the students are:\n\nStudent 1: [2, 2, 3]\nStudent 2: [2, 3, 2]\nStudent 3: [1, 1, 2]\n\nFor each subject (columns 0, 1, 2):\n\nSubject 0: max is 2 (students 1 and 2 have 2)\nSubject 1: max is 3 (only student 2)\nSubject 2: max is 3 (only student 1)\n\nSo successful students are student 1 (subject 2), student 2 (subject 1), and student 1 again (subject 0). But since we count unique students, the total is 2.\n\nSo the output is 2.\n\nSo the plan is:\n\n- Read the input.\n- For each column (subject), find the maximum value.\n- For each student, check if any of their marks in the columns is equal to the maximum of that column. If at least one exists, count them.\n\nNow, how to process the data.\n\nFirst, read n and m. Then read n lines, each line being a string of m digits. We can convert each line into a list of integers.\n\nThen, for each column (from 0 to m-1), compute the maximum value. Let's create a list of max values per subject.\n\nOnce we have that, for each student, check if any of their marks in the subjects is equal to the max of that subject. If yes, add them to a set (to avoid duplicates).\n\nFinally, the size of the set is the answer.\n\nSo steps in code:\n\nRead n and m.\n\nRead n lines, each line as a string. Then convert each string into a list of integers. So for example, for the first input, the students are [[2,2,3], [2,3,2], [1,1,2]].\n\nThen, for each subject (columns), find the max. For example, for column 0, the values are 2,2,1 → max is 2. Column 1: 2,3,1 → max is 3. Column 2: 3,2,2 → max is 3.\n\nThen, for each student, check if any of their marks in the columns is equal to the max of that column. For example, student 1 has 2 in column 0 (which is max), 2 in column 1 (not max), 3 in column 2 (max). So he has at least one, so he's successful.\n\nSo, for each student, loop through their marks. For each mark, check if it's equal to the max of that column. If any of them is, then the student is successful.\n\nNow, how to represent the max per column.\n\nWe can create a list called max_per_subject. For each column j, max_per_subject[j] is the maximum value in that column.\n\nTo compute that:\n\nInitialize a list of size m, filled with 0.\n\nFor each row (student), for each column j, compare the value to the current max for j, and update accordingly.\n\nAlternatively, for each column j, collect all the values in that column across all students, then take the max.\n\nSo, for example, for j in 0 to m-1:\n\nvalues = [students[i][j] for i in range(n)]\n\nmax_val = max(values)\n\nStore that in max_per_subject[j].\n\nOnce that is done, for each student, check if any of their marks in the columns equals the max_per_subject for that column.\n\nNow, code steps.\n\nIn Python:\n\nRead n, m. Then read n lines. Then for each line, convert into a list of integers.\n\nThen compute max_per_subject for each column.\n\nThen for each student, check if any of their marks in the columns is equal to the max of that column. If yes, add to a set.\n\nThe count is the size of the set.\n\nSo code:\n\nRead input:\n\nn, m = map(int, input().split())\n\nstudents = []\nfor _ in range(n):\n    line = input().strip()\n    marks = [int(c) for c in line]\n    students.append(marks)\n\nThen compute max_per_subject:\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        val = students[i][j]\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\nAlternatively, using list comprehensions:\n\nmax_per_subject = [max(students[i][j] for i in range(n)) for j in range(m)]\n\nBut for each column j, compute the max.\n\nOnce that's done, for each student, check if any of their marks is equal to the max in that column.\n\nSo for each student in students:\n\nis_successful = False\n\nfor j in range(m):\n    if student[j] == max_per_subject[j]:\n        is_successful = True\n        break\n\nif is_successful:\n    count +=1\n\nSo, code:\n\ncount = 0\nfor student in students:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count +=1\n            break\n\nWait, but that would count each student once even if they have multiple subjects. Because once they have at least one, we add 1 to count and break.\n\nYes.\n\nSo that's the approach.\n\nNow, test case 1:\n\nSample Input 1:\n\n3 3\n\n223\n\n232\n\n112\n\nstudents is [[2,2,3], [2,3,2], [1,1,2]]\n\nmax_per_subject:\n\nfor column 0: 2,2,1 → max 2\n\ncolumn 1: 2,3,1 → 3\n\ncolumn 2: 3,2,2 → 3\n\nso max_per_subject = [2,3,3]\n\nCheck each student:\n\nstudent 1: [2,2,3]\n\ncheck column 0: 2 == 2 → yes → count +=1.\n\nstudent 2: [2,3,2]. column 1: 3 == 3 → yes → count +=1.\n\nstudent 3: [1,1,2]. check columns:\n\ncolumn 0: 1 < 2 → no. column 1: 1 < 3 → no. column 2: 2 <3 → no. so not added. total count is 2.\n\nWhich matches the sample.\n\nAnother sample:\n\nSecond input:\n\n3 5\n\n91728\n\n11828\n\n11111\n\nstudents:\n\nstudent 0: [9,1,7,2,8]\n\nstudent 1: [1,1,8,2,8]\n\nstudent 2: [1,1,1,1,1]\n\nmax_per_subject:\n\ncolumn 0: 9,1,1 → max 9\n\ncolumn 1: 1,1,1 → 1\n\ncolumn 2: 7,8,1 → 8\n\ncolumn 3: 2,2,1 → 2\n\ncolumn 4: 8,8,1 → 8\n\nso max_per_subject = [9, 1, 8, 2, 8]\n\nCheck each student:\n\nstudent 0:\n\ncolumn 0: 9 == 9 → yes → counted.\n\nstudent 1:\n\ncolumn 2: 8 == 8 → yes.\n\nstudent 2:\n\ncolumn 1: 1 == 1 → yes. So all three students are counted. So output is 3. Which matches the sample.\n\nSo the code seems to work.\n\nNow, edge cases.\n\nWhat if all students have same marks in all subjects? For example, n=2, m=1. All students have 5. Then max_per_subject is 5. All students are successful. So answer is 2.\n\nAnother case: n=1, m=1. Then the student is best in that subject. Answer is 1.\n\nAnother case: n=2, m=2. Student 1 has [1, 2], student 2 has [2, 1]. max_per_subject is [2, 2]. Both students have at least one subject where they are best. So answer is 2.\n\nSo code should handle these.\n\nNow, code in Python:\n\nRead the input. But note that the input may have multiple test cases? Wait, looking back at the problem statement:\n\nWait, the input given in the example is a list of inputs. But in the actual problem, the input is a single test case. Wait, the problem says:\n\nThe input is given as the first line with n and m, then n lines of m digits.\n\nBut looking at the example given, the first input is:\n\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\nBut that's probably for multiple test cases. However, the problem says that the user should write a Python script that reads from stdin. So perhaps the actual input is one test case. Wait, the problem says:\n\nIn the example, the input is given as two separate cases, but in reality, the program must process a single input. Wait, the problem says:\n\nThe first input line contains two integers n and m... So the input is for a single test case. The example shows two different test cases, but the code should process one test case.\n\nWait, the example shows two inputs and outputs. But the code is supposed to read from stdin, which would be one input. So the sample input is given as two separate examples, but the code is supposed to process one input.\n\nSo the code should read n and m, then n lines of m digits.\n\nSo the code is as follows.\n\nNow, code:\n\nRead n and m.\n\nThen read n lines, each line being a string of m digits.\n\nThen process as discussed.\n\nNow, code:\n\nRead n and m:\n\nn, m = map(int, input().split())\n\nThen read n lines:\n\nstudents = []\nfor _ in range(n):\n    line = input().strip()\n    # convert each character to int\n    marks = [int(c) for c in line]\n    students.append(marks)\n\nThen compute max_per_subject:\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        val = students[i][j]\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\nAlternatively, using list comprehensions:\n\nmax_per_subject = [max(students[i][j] for i in range(n)) for j in range(m)]\n\nBut for each column j, this would get the max.\n\nOnce that is done, for each student, check if any of their marks is equal to the max of that column.\n\ncount = 0\nfor student in students:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count +=1\n            break\n\nprint(count)\n\nYes.\n\nTesting this code on the first sample:\n\nSample input 1:\n\n3 3\n\n223\n\n232\n\n112\n\nstudents is [[2,2,3], [2,3,2], [1,1,2]]\n\nmax_per_subject is [2,3,3]\n\ncount:\n\nstudent 0: 2 == 2 (col 0) → count +=1.\n\nstudent 1: 3 == 3 (col 1) → count +=1.\n\nstudent 2: none. So total 2 → correct.\n\nSample 2:\n\n3 5\n\n91728 → [9,1,7,2,8]\n\n11828 → [1,1,8,2,8]\n\n11111 → [1,1,1,1,1]\n\nmax_per_subject is:\n\ncol0: 9,1,1 → 9\n\ncol1: 1,1,1 →1\n\ncol2:7,8,1 →8\n\ncol3: 2,2,1 →2\n\ncol4:8,8,1 →8\n\nso for each student:\n\nstudent0: 9 (col0) → yes.\n\nstudent1: 8 (col2) → yes.\n\nstudent2: 1 (col1) → yes.\n\nso count is 3.\n\nWhich matches the sample.\n\nSo code seems correct.\n\nNow, what about when a student has multiple max in different columns?\n\nLike, if a student has max in two subjects, but the code counts them once. Which is correct.\n\nNow, code seems correct.\n\nNow, code in Python:\n\nNow, code:\n\nRead n and m, then read lines.\n\nBut need to make sure that the input is read properly. For example, sometimes, after reading n and m, the next lines may have leading or trailing spaces, but the problem says that each line is m characters. So the code uses line.strip() to remove any leading/trailing whitespace (like newlines), but in the problem statement, the input is given as exactly n lines each with m characters. So for example, if the input is '223', then line.strip() is '223', which is correct.\n\nSo the code is correct.\n\nNow, code:\n\nSo the code is:\n\nn, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    line = input().strip()\n    marks = [int(c) for c in line]\n    students.append(marks)\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        val = students[i][j]\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\ncount = 0\nfor student in students:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count +=1\n            break\n\nprint(count)\n\nYes.\n\nThis should handle all cases.\n\nAnother test case: n=1, m=1. Input is 1 1 followed by 5. Then the student is successful. Output is 1.\n\nAnother test case: n=2, m=1. Input is 2 1, then 5 and 5. Then max_per_subject is 5. Both students have 5, so both are successful. Output is 2.\n\nAnother case: n=2, m=2. Students are [9, 9], [9, 9]. Then max_per_subject is [9,9]. Both students are successful. Output is 2.\n\nYes.\n\nSo the code should work.\n",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their grades in various subjects. A student is considered successful if they are the best in at least one subject. The best in a subject means no other student has a higher grade in that subject.\n\n### Approach\n1. **Input Reading**: Read the number of students (n) and the number of subjects (m), followed by the gradebook entries for each student.\n2. **Determine Maximum Grades per Subject**: For each subject, compute the maximum grade achieved by any student.\n3. **Identify Successful Students**: Check each student to see if they have achieved the maximum grade in any subject. If they have, they are considered successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    line = input().strip()\n    marks = [int(c) for c in line]\n    students.append(marks)\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        val = students[i][j]\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\ncount = 0\nfor student in students:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)\n```\n\n### Explanation\n1. **Reading Input**: The first line of input contains the integers `n` (number of students) and `m` (number of subjects). The subsequent `n` lines contain the grades of each student for `m` subjects.\n2. **Finding Maximum Grades per Subject**: For each subject (column in the gradebook), we iterate through all students to find the highest grade. This helps us determine the threshold for being the best in that subject.\n3. **Checking Successful Students**: For each student, we check if their grade in any subject matches the maximum grade for that subject. If it does, the student is marked as successful and we move to the next student.\n\nThis approach ensures that we efficiently determine the successful students by leveraging the maximum grades per subject, leading to an optimal solution with a time complexity of O(n*m), which is efficient given the constraints (n and m up to 100).",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    line = input().strip()\n    marks = [int(c) for c in line]\n    students.append(marks)\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        val = students[i][j]\n        if val > max_val:\n            max_val = val\n    max_per_subject.append(max_val)\n\ncount = 0\nfor student in students:\n    for j in range(m):\n        if student[j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 457,
        "completion_token_count": 489,
        "thoughts_token_count": 3351
    }
}