{
    "start": 1758309467.2060168,
    "end": 1758309590.23053,
    "start-formatted": "2025-09-20 04:17 KST",
    "end-formatted": "2025-09-20 04:19 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nThe task is to find the number of successful students. A student is successful if they are the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, for each subject, we need to find the maximum mark, and then check which students have that mark. Each such student is considered successful. But since a student can be successful in multiple subjects, we need to count each student once even if they are best in multiple subjects.\n\nSo the approach would be:\n\n1. For each subject (column in the gradebook), determine the maximum mark.\n2. For each student, check if there's at least one subject where their mark in that subject is equal to the maximum for that subject. If yes, they are successful.\n3. Count all such students.\n\nLet me think about how to structure this.\n\nFirst, the input is n and m, followed by n lines each with m characters. Each line represents a student's marks. So, for example, if the input is '223', that's student 1's marks for 3 subjects: 2, 2, 3.\n\nSo, the first step is to read the data. Let's think about storing the marks as a 2D list. Each row is a student, each column is a subject.\n\nThen, for each subject (column), find the maximum value. Let's create a list where for each subject (column index), we have the maximum value.\n\nOnce we have that, for each student, check if any of their marks in the columns is equal to the maximum for that column. If at least one exists, the student is successful.\n\nSo, the steps:\n\n- Read n and m.\n- Read the next n lines, each line being a string of m digits. Convert each line into a list of integers. So, for example, '223' becomes [2,2,3].\n- Then, for each column (from 0 to m-1), compute the maximum value. Let's create a list called max_per_subject, where max_per_subject[j] is the maximum of column j.\n- Then, for each student, iterate through their marks. For each mark in position j, check if it equals max_per_subject[j]. If any of them do, then the student is successful. We need to count how many such students there are.\n\nSo, how to process the columns?\n\nFor example, for the first sample input:\n\n3 3\n223\n232\n112\n\nThe students' marks are:\n\nStudent 0: [2, 2, 3]\nStudent 1: [2, 3, 2]\nStudent 2: [1, 1, 2]\n\nFor each column:\n\nColumn 0: 2, 2, 1 → max is 2\nColumn 1: 2, 3, 1 → max is 3\nColumn 2: 3, 2, 2 → max is 3\n\nSo, max_per_subject is [2,3,3].\n\nNow, check each student:\n\nStudent 0: his marks are 2 (column 0, which is max), 2 (not max for column 1), 3 (max for column 2). So he has at least one, so successful.\n\nStudent 1: column 0 is 2 (max), column 1 is 3 (max), so yes. Successful.\n\nStudent 2: column 0 is 1 < 2, column 1 is 1 < 3, column 2 is 2 <3. So no. Not successful. So total is 2, which matches the sample.\n\nSo the approach seems correct.\n\nNow, how to code this.\n\nFirst, read the input. Let's note that the input is given as a single string per line. So for example, the first input line is '3 3', then the next three lines are the students' marks.\n\nIn Python, the code would read:\n\nn, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nThen, compute max_per_subject. For each column j in 0..m-1:\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grades[i][j] > max_val:\n            max_val = grades[i][j]\n    max_per_subject.append(max_val)\n\nAlternatively, using list comprehensions. For each column j, take the max of [grades[i][j] for i in range(n)].\n\nOnce that's done, for each student, check if any of their marks in the columns is equal to the max for that column.\n\n",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their performance in various subjects. A student is considered successful if they are the best in at least one subject. The best student in a subject is defined as having the highest mark in that subject.\n\n### Approach\n1. **Reading Input**: First, we read the number of students (n) and the number of subjects (m). Then, we read the gradebook which consists of n lines, each containing m digits representing the marks of students in different subjects.\n2. **Determine Maximum Marks per Subject**: For each subject (column in the gradebook), compute the maximum mark achieved by any student.\n3. **Identify Successful Students**: For each student, check if they have achieved the maximum mark in at least one subject. If they have, they are considered successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grades[i][j] > max_val:\n            max_val = grades[i][j]\n    max_per_subject.append(max_val)\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_per_subject[j]:\n            successful += 1\n            break\n\nprint(successful)\n```\n\n### Explanation\n1. **Reading Input**: The input is read and stored in a 2D list `grades` where each row represents a student and each column represents a subject.\n2. **Maximum Marks Calculation**: For each subject (column), we iterate through all students to find the highest mark. These maximum values are stored in the list `max_per_subject`.\n3. **Check Successful Students**: For each student, we check if they have the maximum mark in any subject. If they do, they are counted as successful. This is done using a nested loop where we check each student against each subject's maximum mark.\n\nThis approach ensures that we efficiently determine the successful students by leveraging the maximum values for each subject and checking each student against these values. The overall complexity is O(n*m), which is efficient given the constraints (n and m up to 100).",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngrades = []\nfor _ in range(n):\n    line = input().strip()\n    grades.append([int(c) for c in line])\n\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if grades[i][j] > max_val:\n            max_val = grades[i][j]\n    max_per_subject.append(max_val)\n\nsuccessful = 0\nfor i in range(n):\n    for j in range(m):\n        if grades[i][j] == max_per_subject[j]:\n            successful += 1\n            break\n\nprint(successful)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 448,
        "completion_token_count": 499,
        "thoughts_token_count": 1024
    }
}