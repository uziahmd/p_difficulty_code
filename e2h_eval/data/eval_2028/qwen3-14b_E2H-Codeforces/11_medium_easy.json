{
    "start": 1758016193.7853658,
    "end": 1758017676.4645889,
    "start-formatted": "2025-09-16 18:49 KST",
    "end-formatted": "2025-09-16 19:14 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this programming problem. Let me read the problem carefully again.\n\nThe problem is about a group of friends making toasts. Each toast requires certain amounts of drink, lime slices, and salt. The goal is to find out the maximum number of toasts each friend can make, given that all friends must make the same number of toasts. So, the answer is the minimum possible number based on the constraints of each resource.\n\nLet me break down the inputs. The input gives n (number of friends), k (number of bottles), l (ml per bottle), c (number of limes), d (slices per lime), p (grams of salt), nl (ml of drink per toast per friend), np (grams of salt per toast per friend).\n\nWait, each friend needs nl milliliters of drink per toast. So for one toast, all n friends would need n * nl ml of drink. Because each of them has to have nl ml. Similarly for the salt: each toast requires n * np grams of salt. And each toast requires one slice per friend, so n slices per toast.\n\nWait, no. Wait the problem says: each friend needs nl milliliters of the drink, a slice of lime, and np grams of salt. So for one toast, each friend uses those amounts. So for one toast, total drink needed is n * nl. Total salt is n * np. And total lime slices is n slices.\n\nSo the steps are:\n\nCalculate the total amount of each resource available, then compute how many toasts can be made based on each resource, then take the minimum of those numbers.\n\nSo let's think:\n\nTotal drink available: k * l ml.\n\nTotal lime slices available: c * d slices.\n\nTotal salt available: p grams.\n\nFor each resource, calculate how many toasts can be made with that resource.\n\nFor drink: total_drink = k*l. Each toast takes n * nl ml. So the number of toasts possible is total_drink // (n * nl). But wait, if it's not divisible, we take the floor.\n\nSimilarly for salt: total_salt = p. Each toast takes n * np grams. So possible toasts is p // (n * np).\n\nFor lime slices: total_slices = c*d. Each toast takes n slices. So possible toasts is (c*d) // n.\n\nThen the answer is the minimum of these three numbers.\n\nWait, but in the first example:\n\nSample input is 3 4 5 10 8 100 3 1.\n\nLet me compute:\n\nDrink: 4 * 5 = 20 ml. Each toast requires 3 friends * 3 ml per toast per friend? Wait, no. Wait nl is 3. So per toast, each friend needs 3 ml. So for one toast, total is 3 * 3 = 9 ml. So 20 / 9 is 2.222... so floor is 2. Which matches the sample explanation. Then the drink allows 2 toasts.\n\nLimes: 10 limes cut into 8 slices each: 80 slices. Each toast requires 3 slices (since n=3). 80 /3 is 26.666..., floor 26. But the sample says limes are enough for 80 toasts. Wait wait, what's the mistake here?\n\nWait the sample explanation says that the limes are enough for 80 toasts. Wait why?\n\nAh! Oh, wait. Wait the sample says that the limes are enough for 10 * 8 = 80 toasts. But according to my calculation, each toast needs n slices. So for n=3 friends, each toast requires 3 slices. So 80 slices would allow 80 / 3 = 26.666, which is 26 toasts. But according to the sample explanation, they have 80 toasts possible from limes. That suggests that maybe I misunderstood the problem.\n\nWait the sample explanation says: \"the limes are enough for 10 * 8 = 80 toasts\". Wait that's 80 toasts. But how? Because for each toast, each friend needs a slice. So for one toast, there are n slices required. So for 80 toasts, you need 80 * n slices. So in the first sample, n is 3. So 80 toasts would require 80*3 = 240 slices. But the total slices available is 10 * 8 = 80. So that's impossible. So why does the sample explanation say that limes are enough for 80 toasts?\n\nOh wait, no! Wait the sample explanation says that the limes are enough for 80 toasts. But that's not possible. Wait perhaps I have misunderstood the problem statement.\n\nLet me re-read the problem statement.\n\n\"each friend needs ... a slice of lime and np grams of salt.\"\n\nAh, so for each toast, each friend needs a slice. So for one toast, n slices are needed. So for the first sample, the total slices is 10 * 8 = 80. How many toasts can be made? Well, each toast needs n slices. So total toasts possible is 80 / n. For n=3, that's 80/3 = 26.666, so 26. But the sample explanation says that the limes are enough for 80 toasts. Which is conflicting.\n\nBut according to the sample explanation:\n\nIn the first sample, the answer is min(6, 80, 100) /3 = 2. Wait why is 6 the drink limit?\n\nWait the sample explanation says that the drink is enough for 20 / 3 = 6 toasts. Wait why is that?\n\nBecause the drink is 20 ml. Each toast requires n * nl = 3 * 3 = 9 ml. 20 / 9 is 2.222, which is 2 toasts. But the sample explanation says 20 / 3 = 6. Oh wait, that's a mistake. Wait why?\n\nAh, here's the confusion. Wait the sample explanation says that the drink is enough for 20 / 3 = 6 toasts. But why?\n\nWait perhaps I have misunderstood the problem. Let me recheck the problem statement.\n\nThe problem says: each friend needs nl milliliters of the drink. So for one toast, each friend has one portion of nl ml. So for one toast, total drink needed is n * nl. So for the first sample, n is 3, nl is 3. So 3 * 3 = 9 per toast. The total drink is 4 * 5 = 20. So 20 / 9 is 2.222, so 2 toasts. But the sample explanation says that the drink is enough for 6 toasts. That's a contradiction. So clearly I have misunderstood the problem.\n\nWait looking at the sample explanation:\n\n\"A comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n\nWait why is it divided by 3? Because each toast requires 3 ml per friend. So per toast, 3 friends * 3 ml = 9 ml. So 20 / 9 = 2.222. But the sample explanation says 20 / 3 = 6. That suggests that perhaps the problem says that per toast, each friend needs nl ml. But the total per toast is nl ml, not multiplied by n. That would be a misunderstanding.\n\nWait this is a critical point. Let me recheck the problem statement.\n\nProblem statement says:\n\neach friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\n\nSo for each toast, each friend needs those things. So if there are n friends, then for one toast, the total drink required is n * nl. Because each of the n friends has to have nl ml. Similarly, for salt, it's n * np grams. And for lime slices, it's n slices.\n\nBut according to the sample explanation, the drink is 20 ml, which is divided by 3 (nl) to get 6 toasts. Which would imply that per toast, the total drink required is nl ml. Which would be wrong. So why is that?\n\nWait the sample explanation says:\n\n\"Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts.\"\n\nWhich suggests that per toast, they need 3 ml of drink. But that would be if each toast requires nl ml total, not per friend. So perhaps the problem statement is different.\n\nWait maybe the problem says that for each toast, each friend needs nl milliliters. But the total per toast is nl ml. Which would be impossible. So there's a contradiction here.\n\nAlternatively, perhaps the problem says that each toast requires nl milliliters per friend. So for each toast, the total is n * nl. But the sample explanation says that 20 / 3 = 6 toasts. Which would be if the per toast total is 3 ml. So in that case, n * nl = 3. For the first sample, n is 3, nl is 1. Then 3 * 1 = 3 per toast. Which would make 20 / 3 = 6.666, which is 6 toasts. But in the first sample input, the nl is 3. So that doesn't fit.\n\nWait the first sample input is:\n\nInput line is '3 4 5 10 8 100 3 1'\n\nSo the parameters are:\n\nn=3, k=4, l=5, c=10, d=8, p=100, nl=3, np=1.\n\nSo according to the sample explanation, the drink is 4*5=20. Divided by 3 (nl) gives 6 toasts. Which suggests that per toast, the total drink is nl, not n * nl. But that would mean that each toast requires nl ml total, regardless of the number of friends. Which would be inconsistent with the problem statement.\n\nThis indicates that I must have misunderstood the problem statement.\n\nLet me re-examine the problem statement.\n\nProblem statement says:\n\neach friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount.\n\nAh, so for each toast, each friend must have their own portion. So for one toast, each of the n friends drinks nl ml. So total drink per toast is n * nl.\n\nBut the sample explanation says that the drink is 20 ml, which is enough for 20 / 3 = 6 toasts. Which would imply that per toast, the total drink is 3 ml. Which would be nl, not n * nl. So that suggests that the problem statement is different. What's going on here?\n\nAlternatively, perhaps the problem says that each toast requires nl milliliters per friend. So for each toast, each friend drinks nl ml. So the total for one toast is n * nl. But the sample explanation is wrong?\n\nBut that can't be. The sample explanation must be correct. So what's the error here?\n\nLet me look at the sample explanation again. It says that the drink is enough for 20 / 3 = 6 toasts. Let me think: 20 divided by 3 is 6.666... so 6 toasts. But how does that relate to the parameters?\n\nIf each toast requires 3 ml per friend, then for one toast, the total is 3 * 3 = 9 ml. So 20 /9 is 2.222, which would be 2 toasts. But sample says 6.\n\nWait this is confusing. Maybe the problem is that each toast requires nl milliliters per friend, but the total number of toasts is t, and each friend makes t toasts. So the total drink per friend is t * nl. So total drink for all friends is n * t * nl. Which must be <= total available drink (k*l).\n\nSimilarly for salt: total salt is n * t * np <= p.\n\nAnd for lime slices: each toast requires one slice per friend, so total slices needed is n * t <= c*d.\n\nSo solving for t:\n\nt <= (k*l) / (n * nl)\n\nt <= p / (n * np)\n\nt <= (c*d) / n\n\nThen the answer is the minimum of those three values.\n\nBut in the first sample, let's compute:\n\nk*l = 4*5=20.\n\nn * nl = 3 * 3 =9. So 20 /9 is 2.222, so floor is 2.\n\np is 100, n * np = 3 *1=3. 100 /3 is 33.333, floor 33.\n\nc*d is 10 *8=80. divided by n=3 is 26.666, floor 26.\n\nSo the minimum of 2, 33, 26 is 2. Which matches the sample output of 2. So that's correct.\n\nBut the sample explanation says that the drink is enough for 20 /3 =6 toasts. Which seems to be a mistake. Or perhaps the sample explanation is referring to something else.\n\nWait the sample explanation says:\n\n\"it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n\nWait this is very confusing. According to the sample explanation, the drink allows 6 toasts, limes allow 80, salt 100. Then they divide by 3 (number of friends) to get 2.\n\nBut why would the drink allow 6 toasts? Because 20 / 3 is 6. So according to the sample explanation, the drink allows 6 toasts, but then divided by 3 (friends) to get 2. Which suggests that the initial calculation was the total number of toasts per friend, but that doesn't align with the previous logic.\n\nWait this implies that the sample explanation is considering the drink as allowing 6 toasts per friend. But that's not possible. So perhaps the sample explanation is wrong? Or perhaps I'm missing something.\n\nAlternatively, maybe the problem is that the sample explanation is miscalculating. Let's think again.\n\nThe sample explanation says that the drink is enough for 20 /3 =6 toasts. But why? If the total drink is 20 ml, and each toast requires 3 ml per friend, then for one toast, each of the 3 friends needs 3 ml, so 3 * 3 =9 ml. So for 6 toasts, that would be 6 *9 =54 ml, which is more than 20. So that's impossible.\n\nBut according to the sample explanation, the answer is min(6, 80, 100) /3 =2. Which suggests that the initial numbers are the total possible toasts across all friends, and then divided by the number of friends to get the per-person toasts.\n\nBut that would imply that the initial calculations are for the total number of toasts that can be made in total, not per person.\n\nBut that would be a different approach. Let me think:\n\nSuppose that the total number of toasts that can be made is t. Each toast requires that each friend has their own portions. So for t toasts, each friend makes t toasts. So the total drink needed is n * t * nl.\n\nSo the maximum possible t is determined by the resources. So the way to compute t is:\n\nt_drink = (k * l) // (n * nl)\n\nt_salt = p // (n * np)\n\nt_lime = (c * d) // n\n\nthen the answer is min(t_drink, t_salt, t_lime).\n\nWhich is exactly what I thought earlier. Which for the first sample gives 2, which is correct.\n\nBut the sample explanation says that the drink allows 6 toasts, which is 20 /3. Where does that 3 come from? Maybe the sample explanation is wrong, or there's a misunderstanding.\n\nAlternatively, perhaps the problem is that the sample explanation refers to the total number of toasts possible if each toast requires nl ml per friend, but without dividing by the number of friends. Like, for example, the total number of toasts possible is (total drink) / (nl) per toast. But that would be if each toast requires nl ml per friend, but the number of toasts is the same for each friend. Which is not clear.\n\nAlternatively, perhaps the problem is that the sample explanation is calculating the total number of toasts possible if each toast requires nl ml per friend, but the number of toasts is the same for all friends. For example, if each friend can make t toasts, then total drink is n * t * nl. So t = (k*l) / (n * nl). Which is what I had before.\n\nBut the sample explanation says that the drink is 20 /3 =6. Which would be (k*l) / nl = 20 /3 = 6.666, which is 6. Which would be the case if the total drink is divided by nl, not by n * nl.\n\nSo why is that?\n\nThis suggests that the sample explanation is incorrect. But that's unlikely. So where is the mistake here?\n\nLet me check the sample input again. The first sample input is:\n\n3 4 5 10 8 100 3 1\n\nWhich corresponds to:\n\nn=3 friends.\n\nk=4 bottles, each l=5 ml. So total drink is 4*5=20 ml.\n\nEach friend needs nl=3 ml per toast.\n\nSo for t toasts, each friend has t * 3 ml. So total for all friends is 3 * t * 3 = 9t ml. Which must be <=20. So t <= 20/9 = 2.222, so 2.\n\nBut the sample explanation says that the drink is enough for 20/3 =6 toasts. Which is 6. So that suggests that the sample explanation is thinking of t as being (total drink) / (nl). So 20 /3 =6.666, which is 6. But why?\n\nUnless the problem says that each toast requires nl ml total, not per friend. For example, if the problem said that for each toast, the group needs nl ml total. Then the total for t toasts would be t * nl. Which would be 20 /3 =6.666. Which would be 6.\n\nBut that would contradict the problem statement.\n\nThe problem statement says: \"each friend needs nl milliliters of the drink\".\n\nSo for each toast, each friend needs nl ml. So for one toast, the total is n * nl. For t toasts, it's t * n * nl.\n\nSo the sample explanation seems to have a mistake. But the sample output is correct. So perhaps the sample explanation is wrong, but the actual calculation is as I thought.\n\nBut how can that be? Because according to the sample explanation, they are taking the min of 6, 80, 100, then dividing by 3 to get 2. Which would be the case if the initial numbers were the total number of toasts possible if each toast required nl ml per friend, but then divided by the number of friends. Which would be the case if the initial numbers were calculated as (total drink) / nl, (total salt) / np, (total slices) / 1, then divided by n.\n\nBut that seems convoluted.\n\nLet me think again. The sample explanation says:\n\n\"the answer is min(6, 80, 100) / 3 = 2.\"\n\nWhich suggests that the initial numbers are 6, 80, 100. Then divided by 3 (number of friends) to get 2.\n\nBut where do these numbers come from?\n\nFor the drink, 20 /3 =6. For the limes, 10*8=80. For salt, 100 /1=100.\n\nSo perhaps the initial numbers are computed as:\n\ndrink_toasts = total_drink / nl → 20 /3 =6.666 →6\n\nlime_toasts = total_slices / 1 → since each toast requires one slice per friend. Wait, no. How many slices per toast? For each toast, each friend needs a slice. So for one toast, n slices. So for total_slices = c*d, the number of toasts is total_slices / n. Which in the first sample is 80 /3 =26.666 →26. But the sample explanation says that the limes are enough for 80 toasts. So that suggests that the sample explanation is considering lime_toasts as total_slices / 1. Which is 80. Which would be the case if each toast requires one slice, not n slices.\n\nSo this is very confusing. But the sample output is correct. So the actual calculation must be as follows:\n\nThe sample explanation is wrong, and the correct approach is to calculate for each resource:\n\ndrink_toasts = (k*l) // (n * nl)\n\nsalt_toasts = p // (n * np)\n\nlime_toasts = (c*d) // n\n\nthen the answer is min(drink_toasts, salt_toasts, lime_toasts).\n\nWhich for the first sample:\n\ndrink_toasts = 20 / (3 *3) = 20/9 = 2.222 →2\n\nsalt_toasts = 100/(3*1) = 33.333 →33\n\nlime_toasts = 80/3 =26.666 →26\n\nmin(2,33,26) is 2 → correct.\n\nBut according to the sample explanation, the drink_toasts is 6, which is 20/3. Which suggests that the calculation was (k*l) / nl → 20/3=6.666. So why would that be?\n\nMaybe the problem statement is different. Let me recheck the problem statement once again.\n\nProblem statement:\n\neach friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount.\n\nSo for each toast, each friend has to have their own portions. So for each toast, each friend consumes nl ml. So for one toast, the total is n * nl ml. For t toasts, it's t * n * nl.\n\nSo the drink_toasts is (k*l) // (n * nl).\n\nBut according to the sample explanation, the drink_toasts is 20 / 3 =6. Which would be the case if the total drink is divided by nl, not by n * nl. Which would suggest that for each toast, the total drink is nl ml. Which would be possible only if there is one friend. But the sample input has n=3 friends.\n\nSo this suggests that there is a mistake in the sample explanation. But the sample output is correct. So the correct approach is to proceed with the initial calculation.\n\nTherefore, the code should compute:\n\ntotal_drink = k * l\n\ntotal_salt = p\n\ntotal_slices = c * d\n\ntoast_drink = total_drink // (n * nl)\n\ntoast_salt = total_salt // (n * np)\n\ntoast_slices = total_slices // n\n\nresult = min(toast_drink, toast_salt, toast_slices)\n\nSo for the first sample, this gives 2, which is correct.\n\nAnother sample input is '5 100 10 1 19 90 4 3'.\n\nLet's compute:\n\nn=5, k=100, l=10 → total drink is 100*10=1000.\n\nnl=4. So drink_toasts = 1000/(5*4) = 1000/20=50.\n\nsalt: p=90, np=3 → 90/(5*3) = 90/15=6.\n\nslices: c=1, d=19 → total_slices =1*19=19. divided by n=5 → 3. So min(50,6,3) →3. Which matches the sample output of 3.\n\nThird sample input: '10 1000 1000 25 23 1 50 1'\n\nn=10, k=1000, l=1000 → total drink 1e6.\n\nnl=50 → drink_toasts = 1e6/(10 *50) = 1e6 / 500 = 2000.\n\nsalt: p=1, np=1 → 1/(10*1) = 0.1 → 0.\n\nslices: 25 *23 =575. divided by 10 →57.5 →57. So min(2000, 0, 57) is 0. Which matches the sample output.\n\nSo the code seems to work.\n\nTherefore, the correct approach is to compute the three values as described and take the minimum.\n\nNow, the code can be written as follows:\n\nRead the input line as integers.\n\nCompute total_drink = k * l.\n\ntoast_drink = total_drink // (n * nl)\n\ntoast_salt = p // (n * np)\n\ntoast_slices = (c * d) // n\n\nresult = min(toast_drink, toast_salt, toast_slices)\n\nprint(result)\n\nBut wait, what if any of the denominators is zero? No, because the input constraints say that all numbers are positive integers. So no division by zero.\n\nSo the code is straightforward.\n\nNow, let's test the first sample input.\n\nSample input line 1: 3 4 5 10 8 100 3 1 → n=3, k=4, l=5, c=10, d=8, p=100, nl=3, np=1.\n\ntotal_drink = 4*5=20 → 20/(3*3)=20/9=2.222 → 2.\n\ntoast_salt: 100/(3*1) = 33.333 →33.\n\ntoast_slices: 10*8=80 //3 =26. So min(2,33,26) →2. Correct.\n\nYes.\n\nSo the code is correct.\n\nNow, implement this in Python.\n\nThe code needs to read from stdin. The input is given as multiple lines? Wait the input says that the first and only line contains the integers. Wait in the example, the input is given as a list of three examples. But in the problem statement, the input is a single line. Wait the user says:\n\nInput:\n\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\nSo the code should read one line of input, split into the 8 integers.\n\nBut the sample input shows three lines. But that's probably part of the test cases. For example, in the sample input given, it's three test cases. But the actual code should read one line per test case. Or is it that the input is multiple lines, each being a separate test case?\n\nWait the problem says: the input is the first and only line. So the code should read one line of input. But in the sample input, there are three lines, but that's probably part of the example showing multiple test cases. However, the actual code should read one line of input.\n\nWait looking back at the problem statement:\n\nInput:\n\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\nSo the code is supposed to read one line of input. But the sample input shows multiple lines. But that's likely because the sample input shows multiple test cases. For example, the sample input is three test cases, each on their own line, and the output is three lines.\n\nBut the code is supposed to process one line of input, and output one line of output.\n\nBut the user's note says that the sample input is given as a list of three inputs, and the outputs are three. But the code is to read from standard input. So perhaps the code should read one line, process it, and output the answer.\n\nSo the code should read a single line from stdin, split into the eight integers, compute the answer, and print it.\n\nSo the code would be:\n\nRead the input line as a list of integers.\n\nn, k, l, c, d, p, nl, np = map(int, input().split())\n\nThen compute:\n\ntotal_drink = k * l\n\ntoast_drink = total_drink // (n * nl)\n\ntoast_salt = p // (n * np)\n\ntoast_slices = (c * d) // n\n\nresult = min(toast_drink, toast_salt, toast_slices)\n\nprint(result)\n\nYes.\n\nTesting this code against the sample input.\n\nFirst sample input line: 3 4 5 10 8 100 3 1 → output 2. Correct.\n\nSecond sample input line: 5 100 10 1 19 90 4 3 → output 3. Correct.\n\nThird sample input line: 10 1000 1000 25 23 1 50 1 → output 0. Correct.\n\nThus, the code should be correct.\n\nNow, write the Python code accordingly.\n",
    "response": "\n\nTo solve this problem, we need to determine the maximum number of toasts each friend can make given the constraints on the available resources: soft drink, lime slices, and salt. Each toast requires a specific amount of drink, a slice of lime, and a certain amount of salt per friend. The solution involves calculating how many toasts can be made based on each resource and then taking the minimum of these values.\n\n### Approach\n1. **Input Reading**: Read the input values which include the number of friends, the number of bottles of drink, milliliters per bottle, number of limes, slices per lime, grams of salt, milliliters of drink per toast per friend, and grams of salt per toast per friend.\n2. **Resource Calculation**:\n   - **Total Drink Available**: Calculate the total milliliters of drink available by multiplying the number of bottles by the milliliters per bottle.\n   - **Total Salt Available**: Use the given grams of salt directly.\n   - **Total Lime Slices Available**: Calculate the total number of lime slices by multiplying the number of limes by the slices per lime.\n3. **Toast Calculation**:\n   - **Drink Constraints**: Determine how many toasts can be made based on the drink available, considering the total drink needed per toast for all friends.\n   - **Salt Constraints**: Determine how many toasts can be made based on the salt available, considering the total salt needed per toast for all friends.\n   - **Lime Slices Constraints**: Determine how many toasts can be made based on the available lime slices, considering the total slices needed per toast for all friends.\n4. **Result Calculation**: The answer is the minimum value obtained from the three constraints calculated above.\n\n### Solution Code\n```python\nn, k, l, c, d, p, nl, np = map(int, input().split())\ntotal_drink = k * l\ntoast_drink = total_drink // (n * nl)\ntoast_salt = p // (n * np)\ntoast_slices = (c * d) // n\nprint(min(toast_drink, toast_salt, toast_slices))\n```\n\n### Explanation\n- **Total Drink Calculation**: The total amount of drink available is calculated by multiplying the number of bottles by the milliliters per bottle.\n- **Toast Constraints**:\n  - **Drink**: The number of toasts possible is determined by dividing the total drink by the product of the number of friends and the drink required per toast per friend.\n  - **Salt**: Similarly, the number of toasts possible is determined by dividing the total salt by the product of the number of friends and the salt required per toast per friend.\n  - **Lime Slices**: The number of toasts possible is determined by dividing the total number of lime slices by the number of friends (since each toast requires one slice per friend).\n- **Result**: The minimum value among the toasts possible from each resource gives the maximum number of toasts each friend can make, ensuring all constraints are satisfied.",
    "ground_truth": "N/A",
    "extracted_answer": "n, k, l, c, d, p, nl, np = map(int, input().split())\ntotal_drink = k * l\ntoast_drink = total_drink // (n * nl)\ntoast_salt = p // (n * np)\ntoast_slices = (c * d) // n\nprint(min(toast_drink, toast_salt, toast_slices))",
    "score": 1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 625,
        "thoughts_token_count": 6652
    }
}