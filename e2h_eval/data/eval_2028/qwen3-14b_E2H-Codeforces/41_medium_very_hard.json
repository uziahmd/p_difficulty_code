{
    "start": 1758312549.6419811,
    "end": 1758312695.931599,
    "start-formatted": "2025-09-20 05:09 KST",
    "end-formatted": "2025-09-20 05:11 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully again.\n\nThe problem is about building houses on n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the interval [l_i, r_i], the tallest house must be at most x_i. My goal is to maximize the total profit while satisfying all restrictions.\n\nHmm. So how do I model this? Since n is up to 50, and h is up to 50, maybe a brute-force approach is possible? But even then, for 50 houses, each with 50 possibilities, that's 50^50 possibilities, which is way too big. So brute force isn't feasible.\n\nAlternative idea: think of this as an optimization problem with constraints. Each restriction imposes that the maximum in a certain interval is <= x_i. How can I model these constraints?\n\nAnother thought: For each position, the maximum height allowed is determined by all the restrictions that include it. For example, if there's a restriction on [1,3] with x=2, then all houses in positions 1-3 can't be taller than 2. But maybe there's another restriction on [2,2] with x=3, which allows the second house to be up to 3. However, the first restriction would limit the second house to 2. So for each position, the maximum possible height is the minimum of h and all the x_i's from restrictions that cover that position. Wait, no. Because a restriction applies to the maximum in a range. So for example, if a restriction says that the max in [1,3] is <= x, then each individual house in that range can be up to x. But if there's another restriction that says the max in [1,1] is <= y, then the first house can be up to min(x, y). But how do I find for each position, the maximum possible height that is allowed by all the restrictions?\n\nWait, perhaps not. Because the restrictions are about the maximum in ranges. For example, suppose there is a restriction that the max in [1,3] is <= 2. Then, each house in that range can be at most 2. Because if any of them was higher than 2, then the max would be higher than 2, violating the restriction. So for each position i, the maximum allowed height is the minimum of h and all x_i's from restrictions that apply to ranges that include i. But that's not exactly correct. Because a restriction on [l_i, r_i] implies that the max in that interval is <= x_i. Therefore, for every position in that interval, the height can be at most x_i. Because if any position in the interval had a height higher than x_i, then the max would be higher than x_i, violating the restriction. Therefore, for each position i, the maximum allowed height is the minimum between h and all x_i's from restrictions where l_i <= i <= r_i. Because each such restriction requires that the height of i is <= x_i. So if I can compute for each position i, the maximum possible height allowed by all restrictions, then the optimal solution is to set each house to that maximum allowed height. Because the profit is maximized when each house is as tall as possible.\n\nWait, but that's only true if all the restrictions are compatible. For example, if there's a restriction that says [1,3] must be <= 2, and another restriction that says [1,1] must be <= 3. Then, for position 1, the max allowed is 2. Because the first restriction requires that the max in [1,3] is <=2. Therefore, the first house can't be more than 2. So the maximum allowed for each position i is the minimum of h and all x_i from restrictions that cover i. So, for each position i, compute the minimal x_i among all restrictions that include i. Then, set the height of i to that value. But wait, that's not correct. Because some restrictions may not include i, but their ranges may overlap with others.\n\nWait, for example, suppose there's a restriction on [1,2] with x=3, and a restriction on [2,3] with x=2. Then, for position 2, the max allowed is 2. Because the second restriction applies to [2,3], so the max in that interval must be <=2. Therefore, position 2 can't be higher than 2. But the first restriction allows position 2 to be up to 3. But since the second restriction requires that the max in [2,3] is <=2, then position 2 can't be higher than 2. So the maximum allowed for position 2 is the minimum between all x_i of the restrictions that include it. Therefore, for each position i, the maximum possible height is the minimum between h and the minimum x_i of all restrictions that include i. Because each such restriction requires that the max in their interval is <=x_i. Therefore, for any position in that interval, the height can't exceed x_i. Hence, for each position, the maximum height allowed is the minimum of h and the minimum x_i of all restrictions that include that position.\n\nIf this is correct, then the solution is straightforward: for each position, compute the minimal x_i from all restrictions that cover it, then set the height to that value. Then the total profit is sum of squares of those values.\n\nBut wait, what if there are overlapping restrictions that don't directly cover a position but affect the maximum in a range? For example, suppose there is a restriction that says [1,3] must be <=2. Then, the maximum allowed for positions 1, 2, 3 is 2. But suppose there's another restriction that says [2,2] must be <=3. Then, for position 2, the maximum is min(2, 3) = 2. So the previous approach still holds. So the conclusion is that for each position, the maximum allowed is the minimum between h and all x_i of restrictions that include that position. Because any restriction that includes the position in its interval requires that the position's height is <= x_i.\n\nBut is that sufficient? Let me think of an example where this approach might not work. Suppose there are two restrictions: one says that [1,2] must be <=3, and another says [2,3] must be <=4. Then, for position 2, the min x_i is 3 (from the first restriction) and 4 (from the second), so the min is 3. So position 2 is set to 3. Then, the first restriction is satisfied because the max of [1,2] is 3 (if position 1 is also 3). The second restriction says that the max of [2,3] must be <=4. Since position 2 is 3, and position 3 can be up to 4 (since no restriction covers it except the second one, which allows up to 4). So the max of [2,3] is 4, which is allowed. So the approach works.\n\nAnother example: suppose there's a restriction that [1,3] must be <=2. Then, all positions 1,2,3 are limited to 2. Now, suppose there's another restriction that [1,1] must be <=3. Then, the first position's max is min(2,3) =2. Which is correct. So the approach seems to work.\n\nBut what if there's a restriction that [1,2] must be <=3, and another restriction that [1,3] must be <=2. Then, for position 1 and 2, their maximum is 2. For position 3, it's 2. So the max in [1,2] is 2, which is <=3, so the first restriction is satisfied. The second restriction is also satisfied. So the approach is correct.\n\nSo this suggests that for each position, the maximum allowed height is the minimum between h and the minimum x_i of all restrictions that include that position. Then, the answer is the sum of squares of these values.\n\nBut wait, what if there are multiple restrictions that apply to ranges that include a position, but their x_i's are higher than the minimal x_i? For example, suppose a position is covered by two restrictions: one with x=3, another with x=4. Then, the minimal x is 3, so the position's height is 3. Which is allowed. Because the first restriction requires that the max in its range is <=3. So even if the other restriction allows higher, the position's height is limited by the lower one.\n\nBut then, how about a case where the restrictions are not directly on the position but on ranges that include it. For example, suppose there's a restriction that [1,3] must be <=2. Then, for each position 1,2,3, the maximum allowed is 2. But suppose there's another restriction that [1,1] must be <=3. Then, for position 1, the maximum is min(2,3) =2. So that's correct.\n\nSo according to this logic, the solution is:\n\nFor each position i from 1 to n:\n\nmax_height[i] = min( h, min( x_j for all restrictions j where l_j <= i <= r_j ) )\n\nBut if there are no restrictions that cover i, then the max_height[i] is h.\n\nOnce we compute max_height[i] for all positions, then the answer is sum of (max_height[i]^2).\n\nBut wait, let's check the first example given.\n\nFirst example input:\n\nn=3, h=3, m=3\n\nRestrictions:\n\n1 1 1 → covers position 1, x=1.\n\n2 2 3 → covers position 2, x=3.\n\n3 3 2 → covers position 3, x=2.\n\nSo for each position, the min x is 1, 3, 2. So the heights are [1,3,2]. Sum of squares is 1+9+4=14. Which matches the sample. So correct.\n\nSecond example:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → covers positions 2 and 3.\n\n3 4 7 → covers positions 3 and 4.\n\nSo for position 1: no restrictions, so max is 10.\n\nposition 2: min x is 8.\n\nposition3: min x is min(8,7) =7.\n\nposition4: min x is 7.\n\nSo the heights are [10,8,7,7]. Sum is 100 + 64 + 49 +49 = 262. Which matches the sample. So this approach works.\n\nBut wait, what about a case where the restrictions are not on individual positions, but on ranges. For example, suppose there's a restriction that [1,2] must be <=3. Then, the max for positions 1 and 2 is 3. But suppose there's another restriction on [1,2] with x=4. Then the min x is 3. So the max for positions 1 and 2 is 3. Which is correct.\n\nBut what if there's a restriction on [1,2] with x=3, and another restriction on [1,3] with x=4. Then, for position 1 and 2, their max is 3 (because the first restriction applies to them). Position 3's max is 4 (since the second restriction applies to it). So the max in [1,2] is 3, which is <=3. The max in [1,3] is 4, which is allowed. So that's correct.\n\nBut what about a case where the restrictions are overlapping ranges, but the minimal x for a position is not the tightest constraint? For example, suppose there's a restriction on [1,3] with x=5, and another on [2,2] with x=3. Then, for position 2, the min x is 3. So the maximum allowed for position 2 is 3. Which is correct. The restriction on [1,3] allows up to 5, but the [2,2] restriction requires that position 2 is at most 3. So the approach works.\n\nTherefore, the approach seems correct. So the problem reduces to for each position, find the minimal x_i among all restrictions that include that position. Then, take the minimum between h and that value. Then sum the squares.\n\nSo the steps to solve the problem are:\n\n1. Read n, h, m.\n\n2. For each of the m restrictions, store l_i, r_i, x_i.\n\n3. For each position i (from 1 to n), find all restrictions where l_i <= i <= r_i. Take the minimum x_i among these. If there are no such restrictions, then the maximum is h.\n\n4. The maximum height for position i is min(h, min_x_i).\n\n5. Sum the squares of these heights.\n\nSo this seems straightforward. Now, how to implement this in Python.\n\nLet's think about the code structure.\n\nRead input. For each test case.\n\nBut the input is given as a list of inputs. Wait, looking back at the example input:\n\nThe input is given as a list of strings. For example, the first example input is:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nSo the code needs to read from stdin. Wait, but in the problem statement, the input is given as per standard input. The user's code should read from stdin, and output to stdout.\n\nWait, the problem says: \"Your task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout).\"\n\nSo the code should read input from stdin, process it, and output the answer.\n\nBut the sample input shows that the input is a list of multiple test cases. Wait, looking back:\n\nIn the example, the input is given as two separate test cases. The first line is the first test case, then the second is the second test case. So the code needs to process multiple test cases.\n\nWait, but how are the test cases structured? Let me recheck the problem statement.\n\nThe input description says:\n\nThe first line contains three integers n, h, m. Then m lines follow with the restrictions.\n\nBut in the sample input, the first input is:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nWhich is two test cases. So the code should read multiple test cases. However, the problem statement's input format says that the first line contains n, h, m. So perhaps the input is multiple test cases, each with their own n, h, m, etc. So the code should process each test case, and for each, output the answer.\n\nBut how to read the input? For example, in the sample input, the first test case has 3 lines (the first line is n, h, m, then m=3 lines). The second test case has 3 lines (first line 4 10 2, then two lines of restrictions).\n\nSo the code should read all lines from stdin, split into test cases. But how to determine how many test cases there are? Well, in programming competition problems, sometimes the input is a single test case, but sometimes multiple. However, the problem's sample input shows that there are multiple test cases. However, looking back at the problem statement's input description, it says:\n\nThe first line contains three integers n, h, m. Then m lines follow. So perhaps the input is one test case. But the sample input shows two test cases. So perhaps the problem is expecting that the code can handle multiple test cases. However, looking at the problem's original statement, perhaps the input is one test case. Wait, the problem says:\n\n\"In the first example, there are 3 houses... In the second example, there are 4 houses...\"\n\nSo the sample input has two test cases. But the problem says that the input is given as per the first line. So perhaps the actual code needs to read multiple test cases. However, the problem's input format is unclear. But looking at the sample input, the first line is a string that represents the first test case, then another string for the second test case. So perhaps the code is supposed to read from stdin multiple test cases, each of which is a block of lines.\n\nBut how to read them in Python? For example, in programming competitions, sometimes the input is read via sys.stdin.read().splitlines(), and then processed as a list of lines. So for each test case, the first line is n, h, m. Then m lines follow. Then the next test case starts.\n\nBut how to process that. For example, the sample input has two test cases. The first test case's input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nThe second test case's input is:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nSo the code needs to read all lines, and for each test case, process the lines accordingly.\n\nSo in Python, the code can read all lines into a list, and then process them sequentially. For example:\n\nimport sys\n\nlines = sys.stdin.read().splitlines()\n\nThen, process the lines as follows:\n\ncurrent_line = 0\n\nwhile current_line < len(lines):\n\n    read the first line as n, h, m.\n\n    then read the next m lines as restrictions.\n\n    process this test case.\n\n    current_line += 1 + m\n\nBut in the sample input, the first line is '3 3 3\\n1 1 1\\n2 2 3\\n3 3 2' — but that's actually a single line (assuming that the input is split into lines as per the \\n characters). Wait, the sample input is given as a list of strings, each representing a test case. But in reality, the code will read from stdin, which for the first example would be:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nSo the code needs to read the first line as n, h, m, then m lines of restrictions, then the next line as n, h, m, etc.\n\nSo the code can process multiple test cases.\n\nNow, for each test case, the code can proceed as follows:\n\nFor each position i (1-based) in 1..n:\n\nFind all restrictions that have l_i <= i <= r_i. For those, collect their x_i. Find the minimum x_i. If there are no such restrictions, then the max height is h. Else, the max height is min(h, min_x).\n\nOnce the max heights are determined, sum their squares.\n\nSo the code can be written as:\n\nRead all lines.\n\nProcess each test case:\n\nfor each test case:\n\n    read n, h, m.\n\n    read m restrictions (l_i, r_i, x_i).\n\n    for each position i in 1..n:\n\n        min_x = infinity\n\n        for each restriction:\n\n            if l_i <= i <= r_i:\n\n                if x_i < min_x:\n\n                    min_x = x_i\n\n        if min_x is still infinity (no restrictions covering i):\n\n            height = h\n\n        else:\n\n            height = min(h, min_x)\n\n        add height^2 to total.\n\n    print total.\n\nBut since n and m are up to 50, this is O(n*m) per test case, which is acceptable.\n\nNow, let's test this approach with the sample input.\n\nSample 1:\n\nTest case 1: n=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → covers 1.\n\n2 2 3 → covers 2.\n\n3 3 2 → covers 3.\n\nFor each position:\n\ni=1: min_x is 1 → height 1.\n\ni=2: min_x is 3 → height 3.\n\ni=3: min_x is 2 → height 2.\n\nsum is 1 + 9 +4 =14. Correct.\n\nSample 2:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → covers positions 2,3.\n\n3 4 7 → covers positions 3,4.\n\nFor each position:\n\ni=1: no restrictions → h=10.\n\ni=2: only first restriction (x=8). So min_x=8 → height 8.\n\ni=3: both restrictions. x=8 and x=7. min is 7. height 7.\n\ni=4: only second restriction x=7. height 7.\n\nsum is 100 + 64 + 49 +49 = 262. Correct.\n\nAnother test case: what if there are overlapping restrictions.\n\nExample:\n\nn=2, h=5, m=2.\n\nRestrictions:\n\n1 2 3\n\n1 1 4\n\nSo for position 1: restrictions 1-2 (x=3) and 1-1 (x=4). min x is 3. So height is 3.\n\nposition 2: only first restriction (x=3). So height 3.\n\nsum is 9 +9 = 18.\n\nBut what if the restriction is [1,2] x=3 and [1,2] x=4. Then, the min x is 3. So the max for positions 1 and 2 is 3.\n\nAnother example: n=2, h=5, m=1. Restriction [1,2] x=3. So both positions are 3. sum is 18.\n\nYes.\n\nAnother test case: n=2, h=5, m=1. Restriction [1,2] x=6. So the min x is 6, but h is 5. So the max is 5. So sum 25 +25 =50.\n\nSo the code correctly takes min between h and min_x.\n\nSo the code seems to handle that.\n\nNow, code implementation.\n\nIn Python, for each test case, read n, h, m. Then read m lines of l, r, x. Then for each position i from 1 to n, check all restrictions.\n\nImplementing this:\n\nRead lines as per the code.\n\nBut how to read the input? Let's proceed.\n\nIn Python:\n\nimport sys\n\ndef main():\n\n    import sys\n\n    lines = sys.stdin.read().splitlines()\n\n    idx = 0\n\n    while idx < len(lines):\n\n        # read n, h, m\n\n        if not lines[idx].strip():\n\n            idx +=1\n\n            continue\n\n        n, h, m = map(int, lines[idx].split())\n\n        idx +=1\n\n        restrictions = []\n\n        for _ in range(m):\n\n            l, r, x = map(int, lines[idx].split())\n\n            restrictions.append( (l, r, x) )\n\n            idx +=1\n\n        # Now process this test case.\n\n        total = 0\n\n        for i in range(1, n+1):\n\n            min_x = float('inf')\n\n            for (l, r, x) in restrictions:\n\n                if l <= i <= r:\n\n                    if x < min_x:\n\n                        min_x = x\n\n            if min_x == float('inf'):\n\n                # no restrictions on this position\n\n                height = h\n\n            else:\n\n                height = min( h, min_x )\n\n            total += height * height\n\n        print(total)\n\nBut wait, in the code, for each position i, we check all the restrictions. For each restriction, check if i is between l and r. So that's O(n*m) time.\n\nBut for n and m up to 50, this is acceptable.\n\nTesting this code against the sample input.\n\nSample input:\n\nFirst test case lines:\n\nLine 0: '3 3 3'\n\nThen lines 1-3: the three restrictions.\n\nThen line 4: '4 10 2' etc.\n\nSo the code would process the first test case, then the second.\n\nThe code would output 14 and 262, which matches the sample.\n\nNow, edge cases.\n\nWhat if there are no restrictions?\n\nFor example, n=2, h=5, m=0. Then, each position can be 5. sum is 50.\n\nAnother case: a restriction that covers all positions. For example, n=2, h=5, m=1, restriction [1,2] x=3. Then each position is 3. sum 18.\n\nAnother case: overlapping ranges. For example, n=3, m=2, restrictions [1,3] x=2, [2,2] x=3. Then for each position:\n\ni=1: min_x is 2.\n\ni=2: min_x is min(2, 3) → 2.\n\ni=3: min_x is 2. So sum 4+4+4=12.\n\nAnother case: a restriction that is [1, 1] x=0. Then the first house is 0, others can be h.\n\nSo code seems to handle all cases.\n\nNow, code must be written. Also, note that in the code, when reading the input, the lines may have leading or trailing spaces, but split() handles that.\n\nBut the code must process multiple test cases. For example, in the sample input, the code reads the first line as n, h, m, then m lines, then the next line as n, h, m again, etc.\n\nBut what if the input is empty? Well, the problem says that n, h, m are at least 1.\n\nSo the code should handle that.\n\nAnother edge case: when a restriction has l_i = r_i. Which is allowed.\n\nAnother edge case: when a restriction's x_i is larger than h. For example, h=3, and a restriction [1,1] x=5. Then the min_x is 5, but min with h is 3. So the height is 3.\n\nYes.\n\nSo the code seems correct.\n\nNow, write the code accordingly.\n",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house can have a height between 0 and a given maximum height, and each restriction imposes a limit on the tallest house within a specific range. The goal is to determine the optimal heights for each house to maximize the total profit, which is calculated as the sum of the squares of the house heights.\n\n### Approach\n1. **Input Reading**: Read all input lines at once and process them sequentially.\n2. **Restriction Analysis**: For each house position, determine the minimum height restriction imposed by any applicable zoning restriction.\n3. **Height Calculation**: For each position, compute the maximum allowable height considering both the zoning restrictions and the global maximum height.\n4. **Profit Calculation**: Sum the squares of the computed heights for all positions to determine the maximum profit.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(lines):\n        line = lines[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        restrictions = []\n        for _ in range(m):\n            l, r, x = map(int, lines[idx].split())\n            restrictions.append((l, r, x))\n            idx += 1\n        total = 0\n        for i in range(1, n + 1):\n            min_x = float('inf')\n            for (l, r, x) in restrictions:\n                if l <= i <= r:\n                    if x < min_x:\n                        min_x = x\n            if min_x == float('inf'):\n                height = h\n            else:\n                height = min(h, min_x)\n            total += height * height\n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read all at once and split into lines for easier processing. This allows handling multiple test cases efficiently.\n2. **Processing Each Test Case**: For each test case, the number of houses (n), maximum height (h), and the number of restrictions (m) are read first. Then, each restriction is stored as a tuple of (start, end, max_height).\n3. **Determining Maximum Heights**: For each house position, we check all restrictions to find the minimum height allowed by any restriction that covers that position. If no restriction applies, the house can be built up to the global maximum height.\n4. **Calculating Profit**: The profit is calculated by summing the squares of the maximum allowable heights for each house position, ensuring compliance with all restrictions.\n\nThis approach efficiently processes each test case in O(n*m) time complexity, which is feasible given the constraints (n, m ≤ 50). The solution ensures that all restrictions are respected while maximizing the profit.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(lines):\n        line = lines[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        restrictions = []\n        for _ in range(m):\n            l, r, x = map(int, lines[idx].split())\n            restrictions.append((l, r, x))\n            idx += 1\n        total = 0\n        for i in range(1, n + 1):\n            min_x = float('inf')\n            for (l, r, x) in restrictions:\n                if l <= i <= r:\n                    if x < min_x:\n                        min_x = x\n            if min_x == float('inf'):\n                height = h\n            else:\n                height = min(h, min_x)\n            total += height * height\n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 618,
        "thoughts_token_count": 5705
    }
}