{
    "start": 1758309268.756647,
    "end": 1758309467.205696,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:17 KST",
    "gpu": 2,
    "pid": 21,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko Finds Grapes\n\nOn a random day, Neko found $$$n$$$ treasure chests and $$$m$$$ keys. The $$$i$$$-th chest has an integer $$$a_i$$$ written on it and the $$$j$$$-th key has an integer $$$b_j$$$ on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.The $$$j$$$-th key can be used to unlock the $$$i$$$-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, $$$a_i + b_j \\equiv 1 \\pmod{2}$$$. One key can be used to open at most one chest, and one chest can be opened at most once.Find the maximum number of chests Neko can open.\n\n## Input\nThe first line contains integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^5$$$) — the number of chests and the number of keys.The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the numbers written on the treasure chests.The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$) — the numbers written on the keys.\n\n## Output\nPrint the maximum number of chests you can open.\n\n## Example\n### Input\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\n### Output\n['3', '1', '0']\n\n## Note\nIn the first example, one possible way to unlock $$$3$$$ chests is as follows:  Use first key to unlock the fifth chest,  Use third key to unlock the second chest,  Use fourth key to unlock the first chest. In the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).In the third example, no key can unlock the given chest.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. The problem is about finding the maximum number of chests Neko can open using the keys. The condition is that the sum of a chest's number and a key's number must be odd. So, for each chest and key pair, their sum has to be odd. \n\nHmm, so first, I need to figure out how to pair the chests and keys optimally. Let's think about the parity of the numbers. Because the sum is odd only when one is even and the other is odd. So, for a chest with an even a_i, we need a key with an odd b_j. And for a chest with an odd a_i, we need a key with even b_j. \n\nRight. So the approach would be to count how many chests are even and how many are odd. Then, count how many keys are even and how many are odd. Then, the maximum possible pairs would be the minimum between the number of even chests and the number of odd keys, plus the minimum between the number of odd chests and the number of even keys. \n\nWait, yes. Because each even chest can be paired with an odd key, and each odd chest can be paired with an even key. But since each key can be used once and each chest once, we take the minimum of each pair. \n\nSo the steps are:\n\n1. Count the number of even and odd chests.\n2. Count the number of even and odd keys.\n3. The answer is min(even_chests, odd_keys) + min(odd_chests, even_keys).\n\nBut wait, let me check with the examples.\n\nFirst example input:\nChests: 9,14,6,2,11. Let's see their parities:\n9 is odd, 14 even, 6 even, 2 even, 11 odd. So even_chests = 3 (14,6,2), odd_chests=2 (9,11). \n\nKeys: 8,4,7,20. Their parities: 8 even, 4 even, 7 odd, 20 even. So odd_keys = 1, even_keys=3.\n\nSo min(3,1) + min(2,3) = 1 + 2 = 3. Which matches the first example's output of 3. Correct.\n\nSecond example: chests are 2,4,6,8,10. All even. So even_chests=5, odd_chests=0. Keys: 5 (odd). So odd_keys=1, even_keys=0. So min(5,1) + min(0,0) = 1 + 0 =1. Which matches the second example.\n\nThird example: chest is 10 (even). Keys are 20,30,40,50 (all even). So even_chests=1, odd_chests=0. Keys: odd_keys=0, even_keys=4. So min(1,0) + min(0,4) = 0 + 0 =0. Correct.\n\nSo this logic works. \n\nSo the plan is:\n\n- Iterate through the chests and count how many are even and odd.\n- Do the same for the keys.\n- Compute the sum as described.\n\nSo the code steps:\n\nRead n and m.\n\nRead the list of a_i. Count even_a and odd_a.\n\nRead the list of b_j. Count even_b and odd_b.\n\nThe answer is min(even_a, odd_b) + min(odd_a, even_b).\n\nYes. That's straightforward.\n\nNow, implement this in Python.\n\nBut wait, how to count even and odd?\n\nFor each number in a list, check if it's even or odd. For example, for a_i, even_a is the count of numbers where x % 2 == 0.\n\nSo code:\n\nn, m = map(int, input().split())\n\na = list(map(int, input().split()))\neven_a = 0\nodd_a = 0\nfor num in a:\n    if num % 2 == 0:\n        even_a +=1\n    else:\n        odd_a +=1\n\nb = list(map(int, input().split()))\neven_b = 0\nodd_b = 0\nfor num in b:\n    if num % 2 ==0:\n        even_b +=1\n    else:\n        odd_b +=1\n\nresult = min(even_a, odd_b) + min(odd_a, even_b)\nprint(result)\n\nThat should work. Let's test the examples.\n\nFirst example input:\n\nn=5, m=4\n\na: 9,14,6,2,11 → even_a=3, odd_a=2.\n\nb:8,4,7,20 → even_b=3, odd_b=1.\n\nmin(3,1)",
    "response": "```python\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_chest = 0\nodd_chest = 0\nfor num in a:\n    if num % 2 == 0:\n        even_chest += 1\n    else:\n        odd_chest += 1\n\neven_key = 0\nodd_key = 0\nfor num in b:\n    if num % 2 == 0:\n        even_key += 1\n    else:\n        odd_key += 1\n\nresult = min(even_chest, odd_key) + min(odd_chest, even_key)\nprint(result)\n```",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_chest = 0\nodd_chest = 0\nfor num in a:\n    if num % 2 == 0:\n        even_chest += 1\n    else:\n        odd_chest += 1\n\neven_key = 0\nodd_key = 0\nfor num in b:\n    if num % 2 == 0:\n        even_key += 1\n    else:\n        odd_key += 1\n\nresult = min(even_chest, odd_key) + min(odd_chest, even_key)\nprint(result)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 600,
        "completion_token_count": 152,
        "thoughts_token_count": 1024
    }
}