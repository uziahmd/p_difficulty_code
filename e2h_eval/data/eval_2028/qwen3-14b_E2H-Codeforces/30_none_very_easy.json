{
    "start": 1758338319.3453999,
    "end": 1758338338.8547294,
    "start-formatted": "2025-09-20 12:18 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    A = data[1]\n    \n    # We want to maximize the total sum of S1 and S2\n    # Since S1 and S2 are numbers formed by digits taken from A,\n    # the total value is simply the sum of all digits in A multiplied by their place values.\n    # However, since we are allowed to choose the order of taking digits,\n    # the best way to maximize the total is to take the largest digits first.\n    \n    # So, we will simulate the process where each player takes turns to take the largest remaining digit.\n    # But since both players take exactly n digits, we need to alternate turns such that the largest digits are taken first.\n    \n    # We will use a greedy approach: at each step, the next player (Homer or Marge) takes the leftmost digit.\n    # To ensure maximum total, we should prioritize taking larger digits earlier.\n    # However, since the order of players is not fixed, we need to find the best sequence of H and M moves.\n    \n    # The key insight: the total value is the same regardless of who takes which digit, as long as all digits are used.\n    # Therefore, any valid sequence of H and M with n each is acceptable, but we must output one that maximizes the total.\n    \n    # Since the total is fixed (sum of digits times their place values), we can just output any valid sequence.\n    # For simplicity, we'll output \"H\" for the first n moves and \"M\" for the rest.\n    \n    result = ['H'] * n + ['M'] * n\n    print(''.join(result))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    A = data[1]\n    \n    # We want to maximize the total sum of S1 and S2\n    # Since S1 and S2 are numbers formed by digits taken from A,\n    # the total value is simply the sum of all digits in A multiplied by their place values.\n    # However, since we are allowed to choose the order of taking digits,\n    # the best way to maximize the total is to take the largest digits first.\n    \n    # So, we will simulate the process where each player takes turns to take the largest remaining digit.\n    # But since both players take exactly n digits, we need to alternate turns such that the largest digits are taken first.\n    \n    # We will use a greedy approach: at each step, the next player (Homer or Marge) takes the leftmost digit.\n    # To ensure maximum total, we should prioritize taking larger digits earlier.\n    # However, since the order of players is not fixed, we need to find the best sequence of H and M moves.\n    \n    # The key insight: the total value is the same regardless of who takes which digit, as long as all digits are used.\n    # Therefore, any valid sequence of H and M with n each is acceptable, but we must output one that maximizes the total.\n    \n    # Since the total is fixed (sum of digits times their place values), we can just output any valid sequence.\n    # For simplicity, we'll output \"H\" for the first n moves and \"M\" for the rest.\n    \n    result = ['H'] * n + ['M'] * n\n    print(''.join(result))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 389,
        "thoughts_token_count": 0
    }
}