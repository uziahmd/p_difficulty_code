{
    "start": 1758309257.0138052,
    "end": 1758309413.3306005,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:16 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nSo, the problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the range from l_i to r_i, the tallest house must be at most x_i. My task is to find the maximum possible profit under these constraints.\n\nHmm. The constraints are that for each restriction, the maximum height in the interval [l_i, r_i] must be ≤ x_i. And I need to maximize the sum of squares of the heights.\n\nThe input is small: n, h, m up to 50. So maybe a brute-force approach is possible? But even with n=50, trying all possibilities would be impossible because each house can have up to h+1 options. For 50 houses, that's (h+1)^50 possibilities. Which is way too big. So brute force isn't feasible here.\n\nAlternative approach: think of this as an optimization problem with constraints. How can we model this?\n\nAnother thought: since the constraints involve the maximum in certain intervals, perhaps we can model this with some kind of dynamic programming or constraint satisfaction. But how?\n\nWait, but given that n and m are small (up to 50), perhaps we can use backtracking with pruning. But even that might not be feasible for n=50. Let's think about the maximum possible number of possibilities. For example, if each house can have up to h options, but with constraints. However, with h=50, 50^50 is way too big.\n\nAlternative idea: For each position, determine the maximum possible height it can have, considering all the constraints. But how?\n\nEach restriction says that in some interval, the maximum height is at most x_i. So for any interval [l_i, r_i], the maximum of the heights in that interval must be ≤ x_i.\n\nBut how do we model this? For example, if there are multiple overlapping intervals, the constraints could be conflicting. But the problem says that the restrictions must be satisfied.\n\nSo the problem reduces to assigning a height to each house, such that for every restriction, the maximum in [l_i, r_i] is ≤ x_i. And we want to maximize the sum of squares.\n\nSo how to model this? Maybe think of it as a problem where each house's height is constrained by all the restrictions that include it in their interval. But that's not sufficient because a restriction affects the maximum in the entire interval. For example, if a restriction says that the max in [1,3] is ≤ 2, then all three houses can be at most 2. But if another restriction says that the max in [2,3] is ≤ 3, then the first restriction is more restrictive for the first house.\n\nBut how can we model the maximums across intervals?\n\nAnother approach: For each house i, find the minimal upper bound on its height. Because the maximum height of the house can't exceed the minimum of all the x_i's from restrictions that cover it in their interval. Wait, no. Because a restriction on [l, r] says that the maximum in that interval is ≤ x. So that implies that each individual house in [l, r] can be at most x. But that's not necessarily true. For example, if there's a restriction that the max in [1,3] is ≤ 2. Then each house in that interval can be at most 2. So the maximum of those three is ≤ 2. Therefore, each individual house is ≤ 2. Therefore, for any house i, the maximum possible height it can have is the minimum of all x_i's from restrictions that include i in their [l_i, r_i], and also the global h. Wait, but that's not correct. Because if a restriction applies to a range that includes house i, then the maximum in that range can't exceed x_i. Therefore, house i's height can't be higher than x_i. Because if it were, then the maximum in that range would be higher than x_i, violating the restriction.\n\nTherefore, for each house i, the maximum possible height it can have is the minimum between h and the minimum x_i of all restrictions that include i in their [l_i, r_i] interval. However, this might not be accurate. Because if there's a restriction that says the max in [1,3] is ≤ 2, then house 1 can be 2, but if another restriction says that the max in [1,2] is 3, then house 1 can be up to 3. But the first restriction would require that house 1 is at most 2. So for house 1, the maximum allowed is min(2,3",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. Each house's height contributes to the profit as the square of its height, and each restriction imposes a limit on the maximum height within a specific range.\n\n### Approach\n1. **Constraints Analysis**: Each house can have a height between 0 and the maximum allowed height `h`. Additionally, each restriction imposes a maximum height for a specific range of houses.\n2. **Determine Maximum Heights**: For each house, determine the minimum height restriction that applies to it. This is derived from all restrictions that include the house in their range.\n3. **Optimal Heights**: Once we have the effective maximum height for each house, we can set each house to this height to maximize the profit. This is because the profit function $a^2$ is maximized when `a` is as large as possible under the constraints.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            l -= 1\n            r -= 1\n            # For each position in [l, r], update max_heights[i] to min(current value, x)\n            for i in range(l, r + 1):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate the total profit\n        total = sum(height * height for height in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, parsing the number of houses, maximum height, and restrictions.\n2. **Initialization**: An array `max_heights` is initialized with the maximum possible height `h` for each house.\n3. **Applying Restrictions**: For each restriction, the maximum height for each house in the specified range is updated to the minimum of its current value and the restriction's maximum height.\n4. **Calculating Profit**: After applying all restrictions, the profit is calculated by summing the squares of the effective maximum heights for each house.\n\nThis approach ensures that we adhere to all restrictions while maximizing the profit by leveraging the properties of the quadratic profit function. The complexity is linear with respect to the number of restrictions and houses, making it efficient given the problem constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_heights array with h\n        max_heights = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Adjust to 0-based index\n            l -= 1\n            r -= 1\n            # For each position in [l, r], update max_heights[i] to min(current value, x)\n            for i in range(l, r + 1):\n                if max_heights[i] > x:\n                    max_heights[i] = x\n        \n        # Calculate the total profit\n        total = sum(height * height for height in max_heights)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 820,
        "completion_token_count": 616,
        "thoughts_token_count": 1024
    }
}