{
    "start": 1758309740.721067,
    "end": 1758309787.5684292,
    "start-formatted": "2025-09-20 04:22 KST",
    "end-formatted": "2025-09-20 04:23 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The task is to find the minimum number of edges to add to a graph to create an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I remember that a graph is bipartite if and only if it doesn't contain any odd-length cycles. So if the graph is already bipartite, then adding edges to create an odd cycle would require some changes. Wait, but the problem is to find the minimum edges needed. So maybe the approach is to check if the graph is bipartite. If it's not, then there's already an odd cycle, so t is 0 and w is 1? Wait no, because the existing graph might have multiple odd cycles. But according to the problem statement, we need to find the minimum number of edges to add. So if the original graph already contains an odd cycle, then t is 0. But how to compute w in that case?\n\nWait, the problem says that the output is t and w. So for the first case, if the graph already has an odd cycle, then t is 0 and w is the number of ways to add zero edges (which would be 1, since there's nothing to add). Wait, but the note says that the answer for the second example input (which is a triangle) is 0 1. That makes sense. So in that case, the graph already has an odd cycle, so t=0 and w=1.\n\nSo the first thing to check is whether the graph has any odd-length cycles. If it does, then t is 0 and w is 1. But wait, maybe there are multiple ways to form such cycles. However, the problem says that when you add zero edges, you have to count the number of ways to add edges (which is zero edges added) that form an odd cycle. But if the graph already contains at least one odd cycle, then adding zero edges would mean that there's already such a cycle. But how many ways are there? Because the question says that the way is considered as the same if they have the same set of edges. But adding zero edges would mean that the existing cycles are considered. However, the problem says that w is the number of ways to add t edges. So if t is zero, then w is 1? Or maybe the number of existing odd cycles? No, that can't be. Because the problem says that the way to add edges must form a cycle of odd length. But when t=0, the existing graph already has such a cycle. However, the problem states that the answer for the second example is 0 1. So perhaps when the graph already contains at least one odd cycle, then the answer is t=0 and w=1. Because even though there are multiple existing cycles, the way to add zero edges is only one way (adding nothing). So maybe the answer is t=0 and w=1 in that case.\n\nBut how to check if the graph has an odd cycle? Well, the standard approach is to check if the graph is bipartite. If it's not bipartite, then there exists an odd cycle. So for each connected component, we can check if it's bipartite. If any component is not bipartite, then the answer is t=0 and w=1. Otherwise, we need to find the minimal edges to add to create an odd cycle.\n\nSo the first step is to check if the graph is bipartite. If not, then output 0 1. But if it is bipartite, then we need to find the minimal edges to add.\n\nNow, if the graph is bipartite, then all its connected components are bipartite. So, for each connected component, it's a bipartite graph. So, in order to create an odd cycle, we need to add edges that connect two nodes in the same partition of a bipartition. Because adding such an edge would create an odd-length cycle.\n\nBut how to find the minimal number of edges to add?\n\nWait, the minimal t is 1. Because if we have a bipartite graph, which is connected, then adding one edge between two nodes in the same partition would create an odd-length cycle. For example, suppose the graph is a tree (which is bipartite). Then adding any edge between two nodes in the same partition would create a cycle. The length of that cycle would be odd? Let me think. Suppose the tree is bipartitioned into sets A and B. Adding an edge between two nodes in A. The path from u to v in the tree is of length d. Then the cycle is u to v through the tree (d edges) plus the new edge (1 edge). So total length is d+1. Since the original tree's path from u to v has length d. Since the tree is bipartition",
    "response": "To solve this problem, we need to determine the minimum number of edges to add to a given undirected graph to form a simple cycle of odd length. Additionally, we need to count the number of ways to achieve this.\n\n### Approach\n1. **Check for Existing Odd Cycles**: If the graph already contains an odd-length cycle, the answer is trivial: no edges need to be added (`t = 0`) and there's exactly one way to do nothing (`w = 1`).\n2. **Bipartite Check**: If the graph is bipartite (i.e., it does not contain any odd-length cycles), we need to determine the minimum number of edges to add to create an odd cycle.\n3. **Component Analysis**: For each connected component in the graph, if it is bipartite, we can compute the number of nodes in each partition. Adding an edge between two nodes in the same partition will create an odd-length cycle.\n4. **Minimum Edges Calculation**: The minimum number of edges required to create an odd cycle in a bipartite graph is 1. The number of ways to do this is determined by the product of the sizes of the two partitions in each connected component.\n\n### Solution Code\n```python\nimport sys\nimport threading\nfrom collections import deque\n\ndef main():\n    sys.setrecursionlimit(1 << 25)\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u-1].append(v-1)\n        edges[v-1].append(u-1)\n\n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n\n    def bfs(start):\n        nonlocal is_bipartite\n        q = deque()\n        q.append(start)\n        color[start] = 0\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    q.append(v)\n                else:\n                    if color[v] == color[u]:\n                        is_bipartite = False\n                        return\n\n    for i in range(n):\n        if color[i] == -1:\n            bfs(i)\n            if not is_bipartite:\n                break\n\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    # Now, the graph is bipartite, so we need to find t and w\n    # t is 1, and w is the sum over all components of (a * b), where a and b are the sizes of the two partitions\n    # But wait, for each component, we can choose any pair of nodes in the same partition\n    # However, since adding one edge between any two nodes in the same partition would create an odd cycle\n    # So the number of ways is the sum over all components of (a * (a - 1) // 2 + b * (b - 1) // 2)\n    # Wait no, because adding an edge between two nodes in the same partition of the bipartition will create an odd cycle\n    # So for each component, the number of possible edges that can be added to create an odd cycle is (count_A choose 2) + (count_B choose 2)\n    # But the problem requires the minimal t, which is 1. So the number of ways is the total number of such possible edges across all components.\n\n    # But the problem says to find the minimum number of edges to add. Since t is 1, we just need to count how many such edges exist.\n\n    # So we need to compute for each connected component, the number of nodes in each partition, then compute (a*(a-1)//2 + b*(b-1)//2)\n    # Then sum over all components.\n\n    # Re-color the graph again, but this time track the partitions for each component\n    color = [-1] * n\n    total_ways = 0\n\n    def bfs2(start):\n        nonlocal total_ways\n        q = deque()\n        q.append(start)\n        color[start] = 0\n        count = [0, 0]\n        count[0] += 1\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    count[color[v]] += 1\n                    q.append(v)\n        # compute the number of possible edges within the same partition\n        a = count[0]\n        b = count[1]\n        ways = (a * (a - 1) // 2) + (b * (b - 1) // 2)\n        total_ways += ways\n\n    for i in range(n):\n        if color[i] == -1:\n            bfs2(i)\n\n    print(\"1\", total_ways)\n\nthreading.Thread(target=main).start()\n```\n\n### Explanation\n1. **Bipartite Check**: We use BFS to check if the graph is bipartite. If it is not, we immediately know there's an odd cycle.\n2. **Component Analysis**: For each connected component, we determine the size of each partition in the bipartite graph.\n3. **Count Ways**: For each component, the number of ways to add an edge within the same partition to create an odd cycle is calculated using combinations. The total number of ways across all components gives the required value `w`.\n\nThis approach ensures we efficiently determine the minimum edges needed and the number of ways to achieve the desired result.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\nfrom collections import deque\n\ndef main():\n    sys.setrecursionlimit(1 << 25)\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u-1].append(v-1)\n        edges[v-1].append(u-1)\n\n    color = [-1] * n\n    is_bipartite = True\n    has_odd_cycle = False\n\n    def bfs(start):\n        nonlocal is_bipartite\n        q = deque()\n        q.append(start)\n        color[start] = 0\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    q.append(v)\n                else:\n                    if color[v] == color[u]:\n                        is_bipartite = False\n                        return\n\n    for i in range(n):\n        if color[i] == -1:\n            bfs(i)\n            if not is_bipartite:\n                break\n\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    # Now, the graph is bipartite, so we need to find t and w\n    # t is 1, and w is the sum over all components of (a * b), where a and b are the sizes of the two partitions\n    # But wait, for each component, we can choose any pair of nodes in the same partition\n    # However, since adding one edge between any two nodes in the same partition would create an odd cycle\n    # So the number of ways is the sum over all components of (a * (a - 1) // 2 + b * (b - 1) // 2)\n    # Wait no, because adding an edge between two nodes in the same partition of the bipartition will create an odd cycle\n    # So for each component, the number of possible edges that can be added to create an odd cycle is (count_A choose 2) + (count_B choose 2)\n    # But the problem requires the minimal t, which is 1. So the number of ways is the total number of such possible edges across all components.\n\n    # But the problem says to find the minimum number of edges to add. Since t is 1, we just need to count how many such edges exist.\n\n    # So we need to compute for each connected component, the number of nodes in each partition, then compute (a*(a-1)//2 + b*(b-1)//2)\n    # Then sum over all components.\n\n    # Re-color the graph again, but this time track the partitions for each component\n    color = [-1] * n\n    total_ways = 0\n\n    def bfs2(start):\n        nonlocal total_ways\n        q = deque()\n        q.append(start)\n        color[start] = 0\n        count = [0, 0]\n        count[0] += 1\n        while q:\n            u = q.popleft()\n            for v in edges[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    count[color[v]] += 1\n                    q.append(v)\n        # compute the number of possible edges within the same partition\n        a = count[0]\n        b = count[1]\n        ways = (a * (a - 1) // 2) + (b * (b - 1) // 2)\n        total_ways += ways\n\n    for i in range(n):\n        if color[i] == -1:\n            bfs2(i)\n\n    print(\"1\", total_ways)\n\nthreading.Thread(target=main).start()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 578,
        "completion_token_count": 1212,
        "thoughts_token_count": 1024
    }
}