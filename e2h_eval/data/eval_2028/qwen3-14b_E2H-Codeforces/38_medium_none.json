{
    "start": 1758309807.771112,
    "end": 1758309992.4347374,
    "start-formatted": "2025-09-20 04:23 KST",
    "end-formatted": "2025-09-20 04:26 KST",
    "gpu": 2,
    "pid": 38,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Node Pairs\n\nLet's call an ordered pair of nodes $$$(u, v)$$$ in a directed graph unidirectional if $$$u \\neq v$$$, there exists a path from $$$u$$$ to $$$v$$$, and there are no paths from $$$v$$$ to $$$u$$$.A directed graph is called $$$p$$$-reachable if it contains exactly $$$p$$$ ordered pairs of nodes $$$(u, v)$$$ such that $$$u < v$$$ and $$$u$$$ and $$$v$$$ are reachable from each other. Find the minimum number of nodes required to create a $$$p$$$-reachable directed graph.Also, among all such $$$p$$$-reachable directed graphs with the minimum number of nodes, let $$$G$$$ denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.\n\n## Input\nThe first and only line contains a single integer $$$p$$$ ($$$0 \\le p \\le 2 \\cdot 10^5$$$) — the number of ordered pairs of nodes.\n\n## Output\nPrint a single line containing two integers — the minimum number of nodes required to create a $$$p$$$-reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such $$$p$$$-reachable directed graphs with the minimum number of nodes.\n\n## Example\n### Input\n['3', '4', '0']\n\n### Output\n['3 0', '5 6', '0 0']\n\n## Note\nIn the first test case, the minimum number of nodes required to create a $$$3$$$-reachable directed graph is $$$3$$$. Among all $$$3$$$-reachable directed graphs with $$$3$$$ nodes, the following graph $$$G$$$ is one of the graphs with the maximum number of unidirectional pairs of nodes, which is $$$0$$$.   \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's try to tackle this problem. Hmm, the problem is about finding the minimum number of nodes required for a p-reachable directed graph and then determining the maximum number of unidirectional pairs in such graphs. \n\nFirst, let's understand what a p-reachable graph is. The definition says that it has exactly p ordered pairs (u, v) where u < v and u and v are reachable from each other. So, for each such pair, both directions must be reachable. Wait no, wait: the problem says \"u and v are reachable from each other.\" So that implies that there's a path from u to v and from v to u. Therefore, each such pair contributes one to the count of p. And the problem wants exactly p such pairs.\n\nThe first part is to find the minimal number of nodes needed to have exactly p such pairs. Then, among all such graphs with that minimal number of nodes, find the maximum number of unidirectional pairs. \n\nLet me think about how to model this. \n\nLet's think about the structure of the graph. For the minimal number of nodes, we probably need to maximize the number of such mutual reachability pairs with as few nodes as possible. But how?\n\nWait, mutual reachability implies that u and v are in the same strongly connected component (SCC). Because if there's a path from u to v and vice versa, they are in the same SCC. So, the number of ordered pairs (u, v) with u < v and u and v mutually reachable is equal to the sum over each SCC of C(k, 2), where k is the size of the SCC. Because within an SCC, every pair of distinct nodes is mutually reachable. So, if an SCC has k nodes, there are k*(k-1)/2 such pairs. \n\nSo, the problem reduces to choosing a set of SCCs such that the sum of C(k_i, 2) for each SCC of size k_i equals p. And we need to minimize the total number of nodes (sum of k_i), and then maximize the number of unidirectional pairs. \n\nBut wait, the unidirectional pairs are those (u, v) where u != v, there's a path from u to v but not vice versa. So, these are pairs that are in different SCCs, and there's a directed path from one to the other. But how to count them?\n\nBut first, the main problem is to find the minimal number of nodes. Let's focus on that first.\n\nSo, to minimize the number of nodes for a given p, we need to arrange the SCCs such that their C(k_i, 2) sum up to p, and the total nodes is minimized. How can we do that?\n\nThe key here is that for a given sum of C(k_i, 2) = p, the minimal total nodes is achieved by making the sizes of the SCCs as large as possible. Because C(k, 2) grows quadratically, while the total nodes is linear. For example, if we have two components of size a and b, then C(a, 2) + C(b, 2) is compared to C(a + b, 2) which is larger. So, to get the maximum sum with minimal nodes, we need to make the components as large as possible. Wait, but here we want to reach exactly p. So perhaps we need to find the minimal number of nodes by using the largest possible components. \n\nAlternatively, the problem is similar to representing p as a sum of triangular numbers, and trying to minimize the sum of the bases. For example, the triangular numbers are T_k = k*(k-1)/2. We need to find a set of integers k_1, k_2, ..., k_m such that sum(T_{k_i}) = p, and sum(k_i) is minimized. \n\nSo, the minimal sum of k_i would be achieved by taking the largest possible T_k values first. For example, if p is 3, then T_3 is 3. So using one component of size 3 gives sum of k_i as 3. Which is better than using three components of size 2 (each T_2 is 1, sum 3, total nodes 3*2=6). So, clearly, using the largest possible components is better. \n\nTherefore, the strategy for the first part is to find the minimal number of nodes by decomposing p into a sum of T_k's, choosing the largest possible T_k first. \n\nWait, but how do we find this decomposition? Let's think. For example, for a given p, we want to find the minimal number of nodes by selecting as many as possible of the largest possible T_k. \n\nLet me think of this as a greedy approach. For example, start with the largest possible k such that T_k ≤ p. Subtract T_k from p, add k to the total nodes. Repeat until p becomes zero. \n\nBut wait, maybe there's a case where this approach isn't optimal. For example, suppose p is 4. The largest T_k less than or equal to 4 is T_3=3. Then remaining p is 1. Then take T_2=1, total nodes is 3+2=5. But another way is to take two T_2's (sum 1+1=2, but that's not enough). Or maybe take T_3 (3) and then T_2 (1) gives sum 4. But what if there's another way? Like maybe T_2 (1) and T_3 (3) and T_2 (1) again? No, that would be sum 5. So in this case, the greedy approach gives 3+2=5 nodes. However, is there a better way? What if we take a component of size 3 (T_3=3) and then a component of size 2 (T_2=1), total sum is 4, total nodes is 3+2=5. Alternatively, can we have a component of size 4? T_4 is 6, which is larger than 4. So no. So that's the only way. \n\nAnother example: p=5. Greedy approach would take T_3=3, then T_2=1, then T_2=1 again. Sum is 3+1+1=5, total nodes 3+2+2=7. But maybe another decomposition: T_3=3 and T_3=3, but that would sum to 6 which is more than 5. Not helpful. Alternatively, T_4 is 6 which is larger than 5. So perhaps there's no better way. But wait, what about a component of size 3 (3) and a component of size 3 (but that would contribute 3 again?), but no, because then sum would be 3 + 3 = 6. Not helpful. So perhaps the minimal nodes is 3+2+2=7? But wait, what if we use one component of size 3 (3) and one component of size 2 (1), and then another component of size 2 (another 1) — but that's 3+2+2=7 nodes. But what if we have a component of size 4 and then subtract something? Well, T_4 is 6, which is larger than 5. So perhaps that's not possible. \n\nBut maybe there's a way to split p into components that sum up to the same value but with fewer nodes. For example, if p is 6, the greedy approach would take T_4=6, which uses 4 nodes. That's better than taking T_3 + T_2 + T_2 (3+1+1=5, nodes 3+2+2=7). So yes, greedy approach works here.\n\nSo, the conclusion is that the minimal number of nodes is achieved by greedily taking the largest possible T_k (i.e., the largest k where T_k ≤ remaining p) and subtracting it from p, adding k to the node count. Repeat until p is zero. \n\nBut how to compute this? Let's think of the process. For example, for a given p, we can compute the largest k such that T_k ≤ p. Then subtract T_k from p, add k to the sum, and repeat. \n\nBut what about when p is zero? Then the minimal number of nodes is zero? But according to the sample input, when p is zero, the output is 0 0. Wait, the first sample input is 0, output is 0 0. So yes. \n\nBut what if p is zero? Then the graph must have zero mutual pairs. Which can be achieved by having no nodes, or any graph where all pairs are not mutually reachable. But the minimal number of nodes is zero. However, the problem says that the graph is a directed graph. But perhaps the problem allows zero nodes? But the problem says \"nodes\", so maybe the minimal is zero. \n\nBut for the problem's constraints, when p=0, the minimal number of nodes is zero. Because with zero nodes, there are no pairs, hence exactly zero. So that's correct. \n\nNow, let's think about the first part of the problem: finding the minimal number of nodes. \n\nSo, the algorithm for the first part is:\n\nInitialize total_nodes = 0\n\nWhile p > 0:\n\n   find the maximum k such that k*(k-1)/2 ≤ p\n\n   subtract k*(k-1)/2 from p\n\n   add k to total_nodes\n\nSo, for example, when p=3, the maximum k is 3 (3*2/2=3). Subtract 3, p becomes 0. total_nodes is 3. Which matches the first sample. \n\nAnother example, when p=4: the maximum k is 3 (3), subtract 3, p=1. Then maximum k is 2 (1), subtract 1, p=0. total_nodes is 3+2=5. Which matches the second sample input (the second input is 4, output is 5 6). Wait, the sample input for 4 is output 5 6. Let me check that. \n\nYes, the second example input is 4, output is 5 6. So the minimal number of nodes is 5. Then the second part is the maximum number of unidirectional pairs. \n\nSo, once we have the minimal number of nodes, how do we compute the maximum number of unidirectional pairs?\n\nLet me think about the structure of the graph. The unidirectional pairs are those pairs (u, v) where u != v, and there's a path from u to v but not vice versa. \n\nIn terms of the SCCs, if we have two SCCs A and B, and there is a directed edge from A to B (i.e., all nodes in A can reach all nodes in B, but not vice versa), then each pair (a, b) where a is in A and b is in B contributes to a unidirectional pair. Similarly, if there is a directed edge from B to A, then those pairs contribute. However, if there's a bidirectional connection between A and B (so that they are merged into a single SCC), then they would be part of the same SCC and contribute to mutual reachability. \n\nSo, to maximize the number of unidirectional pairs, we need to arrange the SCCs in a DAG (directed acyclic graph) such that between any two SCCs, there is a directed edge in one direction. Because if there's a path from A to B and also from B to A, then they would be merged into one SCC, which would increase the mutual pairs and reduce the unidirectional ones. \n\nBut since the minimal number of nodes is determined by the decomposition of p into the sum of T_k's, the way to arrange the SCCs to maximize the number of unidirectional pairs is to arrange them in a DAG where each pair of SCCs has edges in only one direction. \n\nSo, the maximum number of unidirectional pairs would be the sum over all pairs of SCCs (A, B) where there's a directed edge from A to B, multiplied by |A| * |B|. \n\nBut how to compute this maximum? \n\nLet me think. Suppose that we have m SCCs with sizes s_1, s_2, ..., s_m. To maximize the number of unidirectional pairs, we need to arrange these SCCs in a linear order (like a chain), where each earlier component can reach all later components. For example, component 1 can reach component 2, component 3, etc. Component 2 can reach component 3, etc. In this case, for each pair of components (i, j) where i < j, the number of unidirectional pairs is s_i * s_j. \n\nSo, the total number of unidirectional pairs is sum_{i < j} s_i * s_j * 1 (if there's a path from i to j but not vice versa). \n\nBut if the components are arranged in a DAG with a topological order, then for each pair of components (A, B), if A comes before B in the topological order, then there is a path from A to B (but not B to A). Therefore, the total number of unidirectional pairs is sum_{i < j} s_i * s_j. \n\nBut how to compute this sum?\n\nThe sum of s_i * s_j for all i < j is equal to [(sum s_i)^2 - sum s_i^2 ] / 2. \n\nBecause sum_{i != j} s_i s_j = (sum s_i)^2 - sum s_i^2. And sum_{i < j} s_i s_j is half of that. \n\nSo, if we arrange the components in a DAG such that there is a total order between them, then the total unidirectional pairs is (total_nodes^2 - sum s_i^2 ) / 2. \n\nBut wait, the total number of ordered pairs (u, v) with u != v is total_nodes * (total_nodes - 1). But the mutual pairs are the sum of T_k for each component (which is p). The unidirectional pairs would be total_ordered_pairs - 2 * p. Because each mutual pair is counted twice (once as (u, v) and once as (v, u)), but in the unidirectional case, only one direction is present. \n\nWait, no. Let me think again. \n\nThe total number of ordered pairs (u, v) with u != v is N*(N-1), where N is the total number of nodes. \n\nThese pairs can be categorized into three types:\n\n1. Mutual reachability (u and v are in the same SCC): each such pair contributes 1 to the mutual count (since both directions are reachable). But for the problem's p, it's the number of ordered pairs (u, v) with u < v and mutual reachability. So, the total number of mutual ordered pairs (regardless of u < v) would be 2*p. Because for each pair (u, v) with u < v and mutual, there's also (v, u) which is mutual. But the problem counts only u < v pairs. \n\nBut for the unidirectional pairs, the count is the number of ordered pairs (u, v) where u != v, there's a path from u to v but not vice versa. \n\nSo, the total number of such pairs is equal to the total number of ordered pairs (u, v) with u != v minus the number of mutual pairs (each mutual pair is counted twice, once as (u, v) and once as (v, u)) minus the number of pairs that are not reachable in either direction. \n\nBut perhaps this is getting complicated. Let's go back to the earlier approach. \n\nIf the components are arranged in a DAG with a total order (each component can reach all components that come after it), then the number of unidirectional pairs is sum_{i < j} s_i * s_j. Because for each pair (u, v) where u is in component i and v in component j, and i < j, there is a path from u to v, but not vice versa. \n\nAdditionally, within each component, there are no unidirectional pairs because all pairs are mutual. \n\nSo, the total number of unidirectional pairs is sum_{i < j} s_i * s_j. \n\nWhich is equal to [ (sum s_i)^2 - sum s_i^2 ] / 2. \n\nBut sum s_i is the total number of nodes, N. So, the formula becomes (N^2 - sum s_i^2 ) / 2. \n\nSo, our task is to compute this value. \n\nBut how do we compute sum s_i^2? Well, during the decomposition of p into the sum of T_k, each component's size is k. So, for example, if the decomposition is k1, k2, ..., km, then sum s_i^2 is sum (k_i^2). \n\nThus, once we have the decomposition of p into the sum of T_k's, we can compute the sum of squares of the k_i's. Then, the maximum number of unidirectional pairs is (N^2 - sum_squares) // 2, where N is the total number of nodes. \n\nWait, but in the sample input for p=3, the minimal nodes is 3. The decomposition is one component of size 3. So sum_squares is 3^2=9. N is 3. Then (3^2 - 9)/2 = (9-9)/2=0. Which matches the first sample's output of 0. \n\nAnother sample input is p=4. The decomposition is 3 and 2. So sum_squares is 3² + 2² = 9 +4=13. N is 3+2=5. Then (5² -13)/2 = (25 -13)/2 = 12/2=6. Which matches the sample output of 5 6. \n\nYes! So that's the formula. \n\nSo, the steps are:\n\nFor the first part, decompose p into the sum of T_k's using the greedy approach, getting the sizes of each component. \n\nThen, compute the total nodes N = sum k_i. \n\nThen, compute the sum of squares of the k_i's. \n\nThe maximum number of unidirectional pairs is (N^2 - sum_squares) // 2. \n\nBut wait, what about when p is zero? For example, when p=0, then there are no components contributing to mutual pairs. So, the minimal number of nodes is zero. Then, the maximum number of unidirectional pairs is zero. Which matches the sample input. \n\nBut for p=0, the decomposition is zero components. So sum_squares is zero. N is zero. Then (0^2 - 0)/2 = 0. Correct. \n\nAnother example: p=1. The decomposition is k=2 (T_2=1). So N=2. sum_squares is 4. (2² -4)/2= (4-4)/2=0. So the maximum unidirectional pairs is zero. \n\nBut in this case, the graph has a single component of size 2. All pairs are mutual. So there are zero unidirectional pairs. Correct. \n\nAnother example: p=2. The decomposition would be k=2 (T_2=1) and another k=2 (T_2=1). So sum is 2. N is 4. sum_squares is 4+4=8. (4² -8)/2 = (16-8)/2=4. So maximum unidirectional pairs is 4. \n\nBut how is that possible? If there are two components of size 2 each. Arranged in a DAG where one component can reach the other. So, the number of unidirectional pairs is 2*2=4. Which is correct. \n\nSo, the formula seems to work. \n\nSo, the plan is:\n\n1. For the given p, decompose it into the sum of T_k's using the greedy approach. \n\n2. Compute N = sum of k_i. \n\n3. Compute sum_squares = sum of (k_i)^2. \n\n4. The maximum unidirectional pairs is (N^2 - sum_squares) // 2. \n\nNow, the challenge is to implement this decomposition correctly. \n\nSo, how to find the maximum k for each step? For a given remaining p, find the maximum k where k*(k-1)/2 ≤ p. \n\nThis can be done via binary search. For example, for a given p, the maximum k is the floor of the solution to k(k-1)/2 = p. \n\nLet me think about solving k(k-1)/2 ≤ p. Rearranged, k^2 -k - 2p ≤ 0. The positive root of the equation k^2 -k -2p =0 is [1 + sqrt(1 + 8p)] / 2. So the maximum k is floor( (sqrt(8p + 1) + 1)/2 ). \n\nSo for example, when p=3: sqrt(25) is 5. (5+1)/2=3. So k=3. Correct. \n\nFor p=4: sqrt(33) ≈5.744. (5.744 +1)/2 ≈ 3.37. So floor is 3. Correct. \n\nSo the code can compute this k as follows. \n\nBut let's code this. For each step, we can calculate the maximum possible k. \n\nSo, the code steps:\n\nFor the decomposition part:\n\nInitialize remaining_p = p\n\ncomponents = []\n\nwhile remaining_p > 0:\n\n    compute k = floor( (sqrt(8*remaining_p +1) +1)/2 )\n\n    if k*(k-1)//2 > remaining_p:\n\n        k -=1\n\n    components.append(k)\n\n    remaining_p -= k*(k-1)//2\n\nOnce we have the components, then compute N = sum(components), sum_squares = sum(k*k for k in components)\n\nThen the answer for the second part is (N*N - sum_squares) // 2. \n\nBut wait, let's test this for p=4. \n\nremaining_p starts at 4.\n\nk is computed as (sqrt(33) +1)/2 ~ (5.744 +1)/2 ~ 3.37 → floor is 3. Check 3*2/2=3 ≤4. So yes. Add 3 to components. remaining_p becomes 4-3=1. \n\nNext iteration: remaining_p is 1. sqrt(8*1 +1)=sqrt(9)=3. (3+1)/2=2. So k=2. 2*1/2=1. Subtract, remaining_p is 0. Add 2. Components are [3,2]. sum is 5, sum_squares is 9+4=13. \n\nSo (25-13)/2=6. Correct. \n\nAnother example: p=5. \n\nFirst, remaining_p=5. \n\nsqrt(8*5 +1)=sqrt(41)=~6.4. (6.4+1)/2=3.7 → floor 3. 3*2/2=3. Subtract, remaining_p=5-3=2. \n\nNow, remaining_p=2. sqrt(8*2+1)=sqrt(17)=~4.123. (4.123+1)/2=2.56 → floor 2. 2*1/2=1. Subtract, remaining_p=2-1=1. \n\nAgain, same as before. Now remaining_p=1. k=2 again. subtract 1, remaining_p=0. components are [3,2,2]. sum is 3+2+2=7. sum_squares is 9 +4 +4 = 17. (7^2 -17)/2 = (49-17)/2= 32/2=16. \n\nSo the maximum unidirectional pairs is 16. \n\nBut is there a better decomposition for p=5? Let's see. For example, could we have a component of size 3 (3) and a component of size 3 (3) but then subtract 3+3=6 which is more than 5. So no. Alternatively, maybe a component of size 4 (T_4=6) which is larger than 5. So no. So the decomposition is indeed [3,2,2]. \n\nSo the code seems correct. \n\nNow, handling the case when p=0. Then, the loop doesn't run. components is empty. sum is 0. sum_squares is 0. (0^2 -0)/2=0. Correct. \n\nSo the code for the decomposition is correct. \n\nNow, the next step is to implement this in Python. \n\nBut for very large p (up to 2e5), the code needs to be efficient. However, since the loop runs O(sqrt(p)) times, it's acceptable. For example, for p=2e5, the maximum k would be around sqrt(2*2e5) ~ sqrt(4e5) ~ 632. So the loop would run about 632 times. Which is acceptable. \n\nNow, code steps:\n\nRead p from input. \n\nHandle the case when p=0: output 0 0. \n\nElse, proceed with decomposition. \n\nBut code for decomposition:\n\nimport math\n\ndef decompose(p):\n    components = []\n    while p > 0:\n        # compute k\n        sqrt_val = math.sqrt(8*p +1)\n        k = int( (sqrt_val +1) // 2 )\n        # check if k*(k-1)//2 <= p\n        while k*(k-1)//2 > p:\n            k -=1\n        components.append(k)\n        p -= k*(k-1)//2\n    return components\n\nBut wait, maybe there's a better way to compute k. For example, using integer operations. But for now, the code seems okay. \n\nOnce the components are found, compute N = sum(components), sum_squares = sum(k*k for k in components). Then the answer for the second part is (N*N - sum_squares) // 2. \n\nBut for the first part, the minimal number of nodes is N. \n\nSo, putting it all together. \n\nBut let's test the sample input:\n\nSample Input 3: 0 → Output 0 0. \n\nSample Input 3: 4 → Output 5 6. \n\nAnother sample input is 3 → output 3 0. \n\nNow, code for the problem:\n\nRead p from input. \n\nBut the input is a single integer. \n\nSo, the code will be:\n\nimport math\n\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    components = []\n    remaining = p\n    while remaining > 0:\n        sqrt_val = math.sqrt(8 * remaining + 1)\n        k = int( (sqrt_val + 1) // 2 )\n        # Check if k*(k-1)//2 <= remaining\n        while k*(k-1)//2 > remaining:\n            k -= 1\n        components.append(k)\n        remaining -= k*(k-1)//2\n    N = sum(components)\n    sum_squares = sum( k*k for k in components )\n    unidirectional = (N*N - sum_squares) // 2\n    print(f\"{N} {unidirectional}\")\n\nWait, but for the case when p is zero, the code outputs 0 0. \n\nBut let's check the sample input where p is 0. \n\nYes. \n\nAnother test case: p=1. The decomposition is [2], N=2, sum_squares=4. (2² -4)/2 = 0. So output is 2 0. \n\nAnother test case: p=2. Decomposition is [2, 2]. N=4. sum_squares= 4+4=8. (16-8)/2=4. Output is 4 4. \n\nBut what's the actual scenario? Two components of size 2. The maximum unidirectional pairs is 2*2=4. Correct. \n\nAnother example: p=6. The decomposition would be [4], since 4*3/2=6. N=4, sum_squares=16. (16-16)/2=0. So output is 4 0. Which makes sense, since all pairs are mutual. \n\nAnother example: p=5. The decomposition is [3,2,2], as discussed. N=7, sum_squares=9+4+4=17. (49-17)/2= 16. \n\nSo code seems correct. \n\nBut wait, what if the decomposition is not unique? For example, suppose p=6 can be decomposed as [3, 3] (sum 3+3=6). But 3*2/2=3. So two components of size 3, sum 3+3=6. Then N is 6. sum_squares is 9+9=18. (6² -18)/2 = (36-18)/2=9. Which is larger than the previous case of 4 0. \n\nBut why is the decomposition not [4] in this case? Because 4*3/2=6. So the code would choose k=4 first. So the code would generate [4], which is better (N=4 < 6). So the code is correct. \n\nAh, right. So the code is correct. \n\nBut why in the case of p=6, the code would take k=4. \n\nYes. \n\nSo the code works. \n\nBut what about when there are multiple ways to decompose p into sum of T_k's with the same N? For example, maybe for some p, there are multiple decompositions with the same sum of k_i. However, the code's greedy approach ensures that the sum is minimal. \n\nSo the code is correct. \n\nNow, let's test the sample input for p=4. \n\ncomponents is [3,2]. sum is 5. sum_squares is 9+4=13. (25-13)/2=6. Which matches the sample. \n\nSo the code should work. \n\nNow, the code needs to handle p=0. \n\nBut what about when p is zero? Let's see. \n\nIn the code, if p is zero, then the code prints 0 0. \n\nBut what if the code is called with p=0, then the components list is empty. N is 0. sum_squares is 0. (0^2 -0)/2=0. So the code would output 0 0. \n\nYes. \n\nAnother edge case: p=1. \n\ncomponents is [2], N=2. sum_squares is 4. unidirectional is (4-4)/2=0. \n\nAnother edge case: p=2. The code would take k=2 (T_2=1), remaining is 1. Then take k=2 again. So components are [2,2]. N=4. sum_squares is 8. (16-8)/2=4. \n\nSo the code is correct. \n\nThus, the code should handle all cases. \n\nNow, the code for the problem. \n\nBut wait, the code may have a problem with the calculation of k. For example, when 8*p +1 is not a perfect square. Let's see. \n\nFor example, p=2. 8*2+1=17. sqrt(17) is approx 4.123. Adding 1 gives 5.123. Divided by 2 is 2.56. So int( (sqrt_val +1)//2 ) → in Python, the code uses math.sqrt, which returns a float. Then (sqrt_val +1) is 5.123, divided by 2 is 2.56. The integer division (//2) would be 2.56//2? Wait, no. Wait, the code is written as:\n\nsqrt_val = math.sqrt(...)\n\nk = int( (sqrt_val +1) // 2 )\n\nWait, no. Let me recheck:\n\nThe code says:\n\nk = int( (sqrt_val +1) // 2 )\n\nBut in Python, the // operator is floor division. However, sqrt_val is a float, so adding 1 and then dividing by 2. \n\nWait, for example, if sqrt_val is 5.744 (for p=4), then sqrt_val +1 is 6.744. Divided by 2 is 3.372. Then, using integer conversion, int(3.372) is 3. Which is correct. \n\nBut what if the calculation is precise? For example, when p=3, 8p+1=25. sqrt_val is 5.0. Then (5.0 +1)/2=3.0. So k is 3. Correct. \n\nAnother example: p=1. 8p+1=9. sqrt is 3. (3+1)/2=2.0. k is 2. Correct. \n\nSo the code is correct. \n\nBut perhaps there's a better way to calculate k. For example, using math.isqrt for integer square roots. \n\nBut for the purposes of code submission, the current approach should work. \n\nNow, let's write the code. \n\nBut note that for large p, the code may have some floating point inaccuracies. For example, when 8*p+1 is very large, but math.sqrt may not give an exact value. However, since the code checks for k*(k-1)//2 > remaining and decrements k if necessary, it should still find the correct k. \n\nThus, the code should be correct. \n\nNow, the code:\n\nimport math\n\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    components = []\n    remaining = p\n    while remaining > 0:\n        sqrt_val = math.sqrt(8 * remaining + 1)\n        k = int( (sqrt_val + 1) // 2 )\n        # Check if k*(k-1)//2 <= remaining\n        while k * (k - 1) // 2 > remaining:\n            k -= 1\n        components.append(k)\n        remaining -= k * (k - 1) // 2\n    N = sum(components)\n    sum_squares = sum(k*k for k in components)\n    unidirectional = (N * N - sum_squares) // 2\n    print(f\"{N} {unidirectional}\")\n\nBut wait, in the sample input where p=0, the code outputs 0 0. Which is correct. \n\nAnother test case: input is 0, output 0 0. \n\nBut what if p=0 and the code is handled in the else clause? No, the code checks if p == 0, and handles it. \n\nTesting this code with the sample inputs:\n\nSample Input 1: 3 → Output is 3 0. \n\nLet's see. \n\ncomponents = [3]. sum is 3. sum_squares 9. (3^2 -9)/2 = 0. Correct. \n\nSample Input 2: 4 → Output 5 6. \n\ncomponents [3, 2]. sum 5. sum_squares 13. 25-13=12, divided by 2 is 6. Correct. \n\nSample Input 3: 0 → Output 0 0. \n\nYes. \n\nAnother test case: input 1 → output 2 0. \n\nYes. \n\nAnother test case: input 2 → output 4 4. \n\nYes. \n\nThus, the code should be correct. \n\nBut wait, what about when the decomposition has multiple components with the same size. For example, p=6, which can be decomposed as [4], or [3, 2, 2] (sum 3+1+1=5, but that's not correct. Wait, no. For p=6, the code will take k=4 (since 4*3/2=6). So components is [4]. sum is 4. sum_squares is 16. (16-16)/2=0. So output is 4 0. Which is correct. \n\nSo the code works. \n\nThus, this should be the correct solution.\n",
    "response": "To solve this problem, we need to determine the minimum number of nodes required to create a p-reachable directed graph and then find the maximum number of unidirectional pairs among all such graphs with the minimum number of nodes.\n\n### Approach\n1. **Understanding p-reachable Graphs**: A p-reachable graph contains exactly `p` ordered pairs (u, v) where `u < v` and both `u` and `v` are mutually reachable. This implies that each such pair must be within the same strongly connected component (SCC).\n\n2. **Decomposition into SCCs**: The problem can be reduced to decomposing `p` into sums of triangular numbers, where each triangular number corresponds to the number of mutual pairs in an SCC of size `k`. The triangular number for size `k` is given by `T(k) = k * (k - 1) / 2`.\n\n3. **Greedy Decomposition**: To minimize the number of nodes, we use a greedy approach to decompose `p` into the largest possible triangular numbers first. This ensures that we use the fewest nodes possible.\n\n4. **Unidirectional Pairs Calculation**: Once we have the decomposition, the maximum number of unidirectional pairs can be derived from the arrangement of these SCCs in a directed acyclic graph (DAG). The formula used is `(N^2 - sum_squares) // 2`, where `N` is the total number of nodes and `sum_squares` is the sum of squares of the sizes of each SCC.\n\n### Solution Code\n```python\nimport math\n\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    components = []\n    remaining = p\n    while remaining > 0:\n        sqrt_val = math.sqrt(8 * remaining + 1)\n        k = int((sqrt_val + 1) // 2)\n        # Check if k*(k-1)//2 <= remaining\n        while k * (k - 1) // 2 > remaining:\n            k -= 1\n        components.append(k)\n        remaining -= k * (k - 1) // 2\n    N = sum(components)\n    sum_squares = sum(k * k for k in components)\n    unidirectional = (N * N - sum_squares) // 2\n    print(f\"{N} {unidirectional}\")\n```\n\n### Explanation\n1. **Reading Input**: The input value `p` is read which represents the number of mutual reachable pairs needed.\n\n2. **Handling Zero Case**: If `p` is zero, the output is immediately `0 0` since no nodes are needed.\n\n3. **Greedy Decomposition**: For each remaining value of `p`, we calculate the largest possible `k` such that the triangular number `T(k)` does not exceed the remaining value. This `k` is added to the list of components, and the value of `p` is reduced accordingly.\n\n4. **Calculating Minimum Nodes**: The total number of nodes `N` is the sum of all component sizes.\n\n5. **Calculating Unidirectional Pairs**: Using the formula derived from the properties of SCCs arranged in a DAG, we compute the maximum number of unidirectional pairs as `(N^2 - sum_squares) // 2`, where `sum_squares` is the sum of the squares of the sizes of each component.\n\nThis approach ensures that we efficiently determine the minimal node count and maximize the unidirectional pairs using mathematical insights and greedy decomposition.",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\np = int(input())\n\nif p == 0:\n    print(\"0 0\")\nelse:\n    components = []\n    remaining = p\n    while remaining > 0:\n        sqrt_val = math.sqrt(8 * remaining + 1)\n        k = int((sqrt_val + 1) // 2)\n        # Check if k*(k-1)//2 <= remaining\n        while k * (k - 1) // 2 > remaining:\n            k -= 1\n        components.append(k)\n        remaining -= k * (k - 1) // 2\n    N = sum(components)\n    sum_squares = sum(k * k for k in components)\n    unidirectional = (N * N - sum_squares) // 2\n    print(f\"{N} {unidirectional}\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 472,
        "completion_token_count": 741,
        "thoughts_token_count": 7946
    }
}