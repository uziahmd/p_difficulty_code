{
    "start": 1758313666.2057168,
    "end": 1758313703.0084643,
    "start-formatted": "2025-09-20 05:27 KST",
    "end-formatted": "2025-09-20 05:28 KST",
    "gpu": 2,
    "pid": 9,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where Petya wants to select souvenirs with maximum total cost without exceeding a weight limit. The constraints are that n can be up to 1e5 and m up to 3e5. Also, each souvenir's weight is between 1 and 3. Hmm, so the weights are small. That probably suggests some kind of optimized approach based on that.\n\nThe classic knapsack problem is NP-hard, but with these constraints, maybe there's a way to optimize. Since the weights are only 1, 2, or 3, perhaps we can handle each group separately.\n\nLet me think. For each weight category (1, 2, 3), we can sort the items in descending order of cost. Then, for each category, we can precompute the prefix sums. Then, the problem becomes selecting how many items from each category to take, such that their total weight doesn't exceed m, and the sum of their costs is maximized.\n\nBut how do we combine these choices? Because taking some number of weight 1 items, some of weight 2, and some of weight 3, and the total weight is the sum of (count_i * weight_i) <= m.\n\nBut since the weights are small, maybe we can iterate over the possible number of items of one type and compute the rest optimally.\n\nWait, here's an idea. Let's separate the items into three groups: w=1, w=2, w=3. For each group, we sort them in descending order of cost, then compute prefix sums. Then, for each possible number of items taken from the weight 3 group, say k, we can compute the maximum number of items from the other groups that can fit into the remaining weight. But even that might be too slow if done naively.\n\nAlternatively, considering that the weight is up to 3, maybe we can model this with dynamic programming. However, with m up to 3e5, a standard O(nm) DP would be too slow for n=1e5. So that approach isn't feasible.\n\nSo back to the grouping idea. Let's think about the following steps:\n\n1. Preprocess all items by their weight. For each weight (1, 2, 3), sort them in descending order of cost, and compute prefix sums. This way, for any number of items taken from a group, we can quickly get the total cost.\n\nFor example, for weight 1 items, if we take x items, the total cost is prefix1[x], and the total weight is x*1 = x.\n\nSimilarly for weight 2: taking y items gives weight 2y and cost prefix2[y].\n\nSame for weight3: z items gives weight 3z and cost prefix3[z].\n\nNow, the problem is to choose x, y, z such that x + 2y + 3z ≤ m, and the sum of prefix1[x] + prefix2[y] + prefix3[z] is maximized.\n\nBut how do we find x, y, z efficiently?\n\nSince the weight is small, maybe we can iterate over the possible number of z (for weight 3 items) and then compute the best x and y for the remaining weight.\n\nBut even that, with z up to m//3, which could be up to 1e5, and for each z, we have to compute x and y for the remaining weight. How to compute x and y quickly?\n\nLet me think. Suppose we have a remaining weight W = m - 3*z. Then, we need to choose x and y such that x + 2y ≤ W. How to maximize the sum of prefix1[x] + prefix2[y].\n\nBut again, how to compute this quickly. For each possible W, what's the maximum sum of prefix1[x] + prefix2[y] with x + 2y ≤ W.\n\nThis seems like a sub-problem. Let's think about solving that.\n\nFor the x and y part, given W, how to find the optimal combination of x and y.\n\nLet me consider that for each possible y, the maximum x is W - 2y. So for each possible y, we can take up to (W - 2y) items of weight 1, but since the prefix1 is sorted, taking as many as possible is better.\n\nBut how to find the optimal y?\n\nBut since the weight for y is 2 per item, and the items are sorted, perhaps we can precompute the prefix sums for the weight2 items, and for each possible W, find the optimal y.\n\nAlternatively, for each possible W, the optimal choice for y is to take as many as possible of the highest value items for weight2, and then fill the rest with weight1 items.\n\nBut how to compute that quickly.\n\nAnother approach: for each possible number of weight2 items, say y,",
    "response": "To solve this problem efficiently, we leverage the constraint that each souvenir's weight can only be 1, 2, or 3. This allows us to use a greedy approach with precomputed prefix sums for each weight group, enabling us to maximize the total cost without exceeding the weight limit.\n\n---\n\n### Approach\n\n1. **Group and Sort Items**: Separate the items by their weight (1, 2, 3), sort each group in descending order of cost, and compute prefix sums for each group. This helps in quickly determining the maximum value obtainable from any number of items in a group.\n\n2. **Iterate Over Possible Choices for Weight 3 Items**: For each possible number of weight-3 items that can be included, calculate how much weight remains and then determine the optimal combination of weight-1 and weight-2 items that can fit into the remaining weight using a two-pointer technique.\n\n3. **Two-Pointer Technique**: For each weight-3 choice, compute the best combination of weight-1 and weight-2 items using two pointers. This is efficient because it avoids recalculating all combinations from scratch for each weight-3 choice.\n\n---\n\n### Code Implementation\n\n```python\nimport sys\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    idx = 0\n    n = int(data[idx])\n    m = int(data[idx+1])\n    idx += 2\n    \n    w1 = []\n    w2 = []\n    w3 = []\n    \n    for _ in range(n):\n        wi = int(data[idx])\n        ci = int(data[idx+1])\n        idx += 2\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    \n    # Sort and compute prefix sums\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    \n    # Prefix sums\n    prefix1 = [0]\n    for c in w1:\n        prefix1.append(prefix1[-1] + c)\n    \n    prefix2 = [0]\n    for c in w2:\n        prefix2.append(prefix2[-1] + c)\n    \n    prefix3 = [0]\n    for c in w3:\n        prefix3.append(prefix3[-1] + c)\n    \n    max_total = 0\n    \n    # Iterate over possible count of weight 3 items\n    max_z = min(len(w3), m // 3)\n    for z in range(0, max_z + 1):\n        weight_left = m - 3 * z\n        if weight_left < 0:\n            continue\n        \n        # Now find best x and y such that x + 2y <= weight_left\n        i = len(prefix2) - 1\n        j = 0\n        best = 0\n        \n        # Use two pointers to find max prefix1[x] + prefix2[y]\n        while i >= 0 and j < len(prefix1):\n            total_weight = 2 * i + j\n            if total_weight <= weight_left:\n                best = max(best, prefix2[i] + prefix1[j])\n                j += 1\n            else:\n                i -= 1\n        \n        current_total = prefix3[z] + best\n        if current_total > max_total:\n            max_total = current_total\n    \n    print(max_total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n### Explanation\n\n- **Prefix Sums**: By precomputing prefix sums for each weight group, we can quickly determine the total cost of taking the first `k` items in a group.\n- **Two-Pointer Technique**: This helps efficiently explore combinations of weight-1 and weight-2 items for each fixed number of weight-3 items. It ensures we do not recompute combinations multiple times.\n- **Time Complexity**: The algorithm runs in approximately O(n log n) due to sorting and O(m) for the iteration over weight-3 counts, which is feasible given the constraints.\n\nThis approach ensures we maximize the total cost while adhering to the weight limit, leveraging the small weight values for optimization.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    idx = 0\n    n = int(data[idx])\n    m = int(data[idx+1])\n    idx += 2\n    \n    w1 = []\n    w2 = []\n    w3 = []\n    \n    for _ in range(n):\n        wi = int(data[idx])\n        ci = int(data[idx+1])\n        idx += 2\n        if wi == 1:\n            w1.append(ci)\n        elif wi == 2:\n            w2.append(ci)\n        else:\n            w3.append(ci)\n    \n    # Sort and compute prefix sums\n    w1.sort(reverse=True)\n    w2.sort(reverse=True)\n    w3.sort(reverse=True)\n    \n    # Prefix sums\n    prefix1 = [0]\n    for c in w1:\n        prefix1.append(prefix1[-1] + c)\n    \n    prefix2 = [0]\n    for c in w2:\n        prefix2.append(prefix2[-1] + c)\n    \n    prefix3 = [0]\n    for c in w3:\n        prefix3.append(prefix3[-1] + c)\n    \n    max_total = 0\n    \n    # Iterate over possible count of weight 3 items\n    max_z = min(len(w3), m // 3)\n    for z in range(0, max_z + 1):\n        weight_left = m - 3 * z\n        if weight_left < 0:\n            continue\n        \n        # Now find best x and y such that x + 2y <= weight_left\n        i = len(prefix2) - 1\n        j = 0\n        best = 0\n        \n        # Use two pointers to find max prefix1[x] + prefix2[y]\n        while i >= 0 and j < len(prefix1):\n            total_weight = 2 * i + j\n            if total_weight <= weight_left:\n                best = max(best, prefix2[i] + prefix1[j])\n                j += 1\n            else:\n                i -= 1\n        \n        current_total = prefix3[z] + best\n        if current_total > max_total:\n            max_total = current_total\n    \n    print(max_total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 474,
        "completion_token_count": 872,
        "thoughts_token_count": 1024
    }
}