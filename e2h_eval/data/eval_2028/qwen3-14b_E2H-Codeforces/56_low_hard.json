{
    "start": 1758309277.7901876,
    "end": 1758309634.115652,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 56,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Guard Duty (easy)\n\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n## Input\nThe first line contains two space-separated integers R, B(1 ≤ R, B ≤ 10). For 1 ≤ i ≤ R, the i + 1-th line contains two space-separated integers xi and yi (|xi|, |yi| ≤ 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n## Output\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n## Example\n### Input\n['3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2', '2 1\\n1 0\\n2 2\\n3 1']\n\n### Output\n['Yes', 'No']\n\n## Note\nFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, I need to solve this problem where I have to determine if there's a perfect matching between Rebel spaceships and bases such that no two connecting lines intersect. Let me think about how to approach this.\n\nFirst, the problem states that R and B are up to 10, which is small. So maybe a brute-force approach checking all possible matchings is feasible. But even then, for R=10, the number of possible perfect matchings is 10! which is around 3.6 million. Wait, but 10! is 3,628,800. For each of these, I need to check if all the line segments between matched pairs don't intersect. But since R and B are up to 10, maybe this is manageable.\n\nBut how do I check if any two line segments intersect? Oh right, the problem says that any two paths (from base to spaceship) shouldn't intersect. So for a given matching, all the line segments must be non-intersecting.\n\nSo the steps would be:\n\n1. Generate all possible perfect matchings between the R spaceships and B bases. Wait, but R and B must be equal for a perfect matching. Oh, the problem says that the input has R and B, but the first line says R and B. Wait, the problem says that the assignment is a perfect matching, so R must equal B. Wait, the input may have R and B not equal? But the problem says that the output is whether it's possible to assign R spaceships to B bases with each having exactly one. So that implies that R must equal B. But the input could have R != B, in which case the answer is automatically No. Wait, the problem says \"every base has exactly one guardian and each spaceship has exactly one assigned base\". So that requires that R equals B. So the first thing in the code is to check if R != B, then output No.\n\nSo first, check if R != B. If they are not equal, output No. Otherwise, proceed.\n\nNow, assuming R = B = n. Then generate all possible permutations of the bases, assigning each spaceship to a base. For each permutation, check if all the line segments between the spaceship and base in the permutation do not intersect with each other.\n\nBut how to check if any two line segments intersect. For that, I need a function that takes two line segments and returns True if they intersect, False otherwise.\n\nBut wait, the problem says that no three points are colinear. So that might help in some cases. However, the line segments could still cross each other even if no three points are colinear.\n\nSo the plan is:\n\nFor each possible permutation (each possible matching between spaceships and bases):\n\n   For all pairs of line segments in the matching, check if they intersect. If any pair does, reject this permutation. Else, accept and return Yes.\n\nIf any permutation passes, output Yes. Otherwise, output No.\n\nNow, how to implement this.\n\nFirst, generate all permutations of the bases. For example, if there are n bases, then for each permutation of the bases, we can assign spaceship i to base permutation[i]. Wait, but the spaceships are in a list, and the bases are in another list. So for example, the first spaceship is matched to the first base in the permutation, etc.\n\nBut the problem is that for each possible way to assign the spaceships to the bases, we need to check if all the line segments between them are non-intersecting.\n\nNow, for the line segment intersection check, I need a helper function.\n\nThe standard way to check if two line segments AB and CD intersect is to use the orientation method. But I need to remember that the segments are in 2D, and that the endpoints are all distinct (since the problem says no two points coincide). Also, since no three points are colinear, that simplifies things a bit. Because if two segments share a common endpoint, but that's allowed? Wait, the problem says that the paths shouldn't intersect. So if two segments share an endpoint, like if a spaceship is connected to base A, and another spaceship is connected to base B, but their paths share a point (like if two segments meet at a common point), but the problem says that the paths shouldn't intersect. So, do overlapping endpoints count as an intersection?\n\nThe problem statement says that the paths (straight lines) should not intersect. So if two line segments share an endpoint, they do intersect at that point. But according to the note in the problem statement, in the first example, connecting in order works. Let me think about that. For example, suppose the first spaceship is at (0,0), the first base is at (-2,1). The second spaceship is (2,0), the second base is (0,3). The third spaceship is (3,1), third base is (2,2). So the line",
    "response": "```python\nimport sys\nimport itertools\n\ndef read_input():\n    data = sys.stdin.read().split('\\n')\n    lines = [line.strip() for line in data if line.strip()]\n    R, B = map(int, lines[0].split())\n    rebels = []\n    for i in range(1, R + 1):\n        x, y = map(int, lines[i].split())\n        rebels.append((x, y))\n    bases = []\n    for i in range(R + 1, R + B + 1):\n        x, y = map(int, lines[i].split())\n        bases.append((x, y))\n    return R, B, rebels, bases\n\ndef orientation(p, q, r):\n    val = (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0])\n    if val == 0:\n        return 0  # colinear\n    return 1 if val > 0 else 2  # clock or counterclock wise\n\ndef on_segment(p, q, r):\n    return (min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and\n            min(p[1], r[1]) <= q[1] <= max(p[1], r[1]))\n\ndef segments_intersect(seg1, seg2):\n    p1, q1 = seg1\n    p2, q2 = seg2\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n\n    if o1 != o2 and o3 != o4:\n        return True\n\n    if o1 == 0 and on_segment(p1, p2, q1):\n        return True\n    if o2 == 0 and on_segment(p1, q2, q1):\n        return True\n    if o3 == 0 and on_segment(p2, p1, q2):\n        return True\n    if o4 == 0 and on_segment(p2, q1, q2):\n        return True\n\n    return False\n\ndef solve():\n    R, B, rebels, bases = read_input()\n    if R != B:\n        print(\"No\")\n        return\n\n    n = R\n    for perm in itertools.permutations(range(n)):\n        segments = []\n        for i in range(n):\n            r = rebels[i]\n            b = bases[perm[i]]\n            segments.append((r, b))\n        valid = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                if segments_intersect(segments[i], segments[j]):\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport itertools\n\ndef read_input():\n    data = sys.stdin.read().split('\\n')\n    lines = [line.strip() for line in data if line.strip()]\n    R, B = map(int, lines[0].split())\n    rebels = []\n    for i in range(1, R + 1):\n        x, y = map(int, lines[i].split())\n        rebels.append((x, y))\n    bases = []\n    for i in range(R + 1, R + B + 1):\n        x, y = map(int, lines[i].split())\n        bases.append((x, y))\n    return R, B, rebels, bases\n\ndef orientation(p, q, r):\n    val = (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0])\n    if val == 0:\n        return 0  # colinear\n    return 1 if val > 0 else 2  # clock or counterclock wise\n\ndef on_segment(p, q, r):\n    return (min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and\n            min(p[1], r[1]) <= q[1] <= max(p[1], r[1]))\n\ndef segments_intersect(seg1, seg2):\n    p1, q1 = seg1\n    p2, q2 = seg2\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n\n    if o1 != o2 and o3 != o4:\n        return True\n\n    if o1 == 0 and on_segment(p1, p2, q1):\n        return True\n    if o2 == 0 and on_segment(p1, q2, q1):\n        return True\n    if o3 == 0 and on_segment(p2, p1, q2):\n        return True\n    if o4 == 0 and on_segment(p2, q1, q2):\n        return True\n\n    return False\n\ndef solve():\n    R, B, rebels, bases = read_input()\n    if R != B:\n        print(\"No\")\n        return\n\n    n = R\n    for perm in itertools.permutations(range(n)):\n        segments = []\n        for i in range(n):\n            r = rebels[i]\n            b = bases[perm[i]]\n            segments.append((r, b))\n        valid = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                if segments_intersect(segments[i], segments[j]):\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 485,
        "completion_token_count": 654,
        "thoughts_token_count": 1024
    }
}