{
    "start": 1758309317.400193,
    "end": 1758309537.330519,
    "start-formatted": "2025-09-20 04:15 KST",
    "end-formatted": "2025-09-20 04:18 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's see. The problem is to find the smallest non-negative integer k such that the LCM of (a +k) and (b +k) is minimized. And if there are multiple k's with the same minimal LCM, choose the smallest one.\n\nHmm. Let me think about how to approach this. Let's first understand what's happening here. Since both a and b are being added to k, the two numbers we are considering are (a +k) and (b +k). Let me denote x = a +k and y = b +k. Then, since x and y are both increased by k, the difference between them remains the same as the original difference between a and b. Because, x - y = (a +k) - (b +k) = a - b. So the difference between x and y is fixed as (a - b), or (b - a) depending on which is larger.\n\nWait, so let's assume without loss of generality that a â‰¤ b. Then, the difference between the two numbers is (b - a). Let me call this difference d. So, d = |a - b|. So, for example, if a is 6 and b is 10, then d is 4. Then, when we add k to both, the two numbers are (a +k) and (b +k), which differ by d. \n\nThe LCM of two numbers x and y can be written as (x * y) / gcd(x, y). So, to minimize the LCM, we need to maximize the GCD of x and y. Because for fixed product x*y, higher GCD would mean lower LCM. However, the product x*y isn't fixed here. Wait, but since x and y differ by d, perhaps there's a way to find the optimal GCD.\n\nAlternatively, maybe the minimal LCM occurs when x and y are as small as possible, but that's not necessarily true. For example, in the first sample input: a=6, b=10. So d is 4. The initial values are 6 and 10, their LCM is 30. If k=2, then they become 8 and 12, which have LCM 24. Which is better. But if we take k=0, the LCM is 30, which is worse. So adding k here allows us to get a higher GCD. For 8 and 12, GCD is 4, which is the same as d. Wait, but d is 4 here. So perhaps the optimal k is such that x and y are multiples of d. Because then their GCD would be at least d, which would make the LCM smaller.\n\nSo, maybe the idea is to find the minimal k such that (a +k) and (b +k) are multiples of d. Because then their GCD is at least d, which would make the LCM as small as possible.\n\nBut wait, let's think again. Let me suppose that d is the difference between the two numbers. Let me assume that a < b, so d = b - a. Then, the two numbers after adding k are (a +k) and (a +k +d). So, their difference is d. So, the GCD of these two numbers must divide d. Because GCD(x, x +d) = GCD(x, d). So, the maximum possible GCD is d. Which would happen when x is a multiple of d. Because then, x and x +d are both multiples of d. So, their GCD would be d, which is the maximum possible.\n\nTherefore, the minimal LCM would be achieved when the GCD is as large as possible. So, the best case is when the GCD is d. Then, the LCM of x and x +d is (x * (x +d)) / d. But since x is a multiple of d, let's say x = m*d. Then x +d = (m+1)*d. Their LCM is m*(m+1)*d. So, to minimize this, we need to choose the smallest possible m. Which would be m=1. Then, the LCM is 1*2*d = 2d. So, in that case, the minimal LCM is 2d.\n\nBut how do we get x = m*d? Since x = a +k, then a +k = m*d. So, k = m*d -a. But since k has to be non-negative, m*d -a >=0 => m >= ceil(a/(d)). But also, since x +d = (a +k) +d = (a +k) + (b -a) = b +k. So, that's the other number.",
    "response": "To solve this problem, we need to find the smallest non-negative integer $ k $ such that the least common multiple (LCM) of $ a + k $ and $ b + k $ is minimized. The key insight is that the optimal $ k $ will be determined by the difference $ d $ between $ a $ and $ b $, as this difference remains constant when both values are incremented by $ k $.\n\n### Approach\n1. **Understanding the Difference**: Let $ d = |a - b| $. The difference between $ a + k $ and $ b + k $ remains $ d $.\n2. **Maximizing GCD**: The LCM of two numbers is minimized when their greatest common divisor (GCD) is maximized. The maximum possible GCD of $ a + k $ and $ b + k $ is $ d $, which occurs when both $ a + k $ and $ b + k $ are multiples of $ d $.\n3. **Finding Optimal $ k $**: To make $ a + k $ a multiple of $ d $, we compute the smallest $ k $ such that $ a + k $ is a multiple of $ d $. This is achieved by computing $ k = (d - (a \\% d)) \\% d $, ensuring $ k $ is non-negative.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    d = abs(a - b)\n    if d == 0:\n        print(0)\n        return\n    # We want (a + k) to be a multiple of d\n    # So k = (d - (a % d)) % d\n    # But since a + k must be divisible by d\n    # Let's compute it\n    remainder = a % d\n    if remainder == 0:\n        k = 0\n    else:\n        k = d - remainder\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n- **Difference Calculation**: Compute $ d = |a - b| $, which is the constant difference between the two numbers after adding $ k $.\n- **Non-zero Check**: If $ d $ is zero, $ a $ and $ b $ are already equal, so $ k = 0 $ is the optimal solution.\n- **Modulo Operation**: Calculate the remainder of $ a $ divided by $ d $. If this remainder is zero, $ a $ is already a multiple of $ d $, so $ k = 0 $. Otherwise, compute $ k $ as $ d - \\text{remainder} $ to make $ a + k $ the next multiple of $ d $, ensuring the LCM is minimized.\n\nThis approach efficiently computes the smallest $ k $ in constant time, ensuring optimal performance even for large input values.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    d = abs(a - b)\n    if d == 0:\n        print(0)\n        return\n    # We want (a + k) to be a multiple of d\n    # So k = (d - (a % d)) % d\n    # But since a + k must be divisible by d\n    # Let's compute it\n    remainder = a % d\n    if remainder == 0:\n        k = 0\n    else:\n        k = d - remainder\n    print(k)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 403,
        "completion_token_count": 597,
        "thoughts_token_count": 1024
    }
}