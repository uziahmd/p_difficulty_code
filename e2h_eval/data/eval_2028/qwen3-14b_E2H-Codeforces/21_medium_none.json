{
    "start": 1758308981.7841735,
    "end": 1758309118.7443569,
    "start-formatted": "2025-09-20 04:09 KST",
    "end-formatted": "2025-09-20 04:11 KST",
    "gpu": 2,
    "pid": 21,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko Finds Grapes\n\nOn a random day, Neko found $$$n$$$ treasure chests and $$$m$$$ keys. The $$$i$$$-th chest has an integer $$$a_i$$$ written on it and the $$$j$$$-th key has an integer $$$b_j$$$ on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.The $$$j$$$-th key can be used to unlock the $$$i$$$-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, $$$a_i + b_j \\equiv 1 \\pmod{2}$$$. One key can be used to open at most one chest, and one chest can be opened at most once.Find the maximum number of chests Neko can open.\n\n## Input\nThe first line contains integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 10^5$$$) — the number of chests and the number of keys.The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$) — the numbers written on the treasure chests.The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$1 \\leq b_i \\leq 10^9$$$) — the numbers written on the keys.\n\n## Output\nPrint the maximum number of chests you can open.\n\n## Example\n### Input\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\n### Output\n['3', '1', '0']\n\n## Note\nIn the first example, one possible way to unlock $$$3$$$ chests is as follows:  Use first key to unlock the fifth chest,  Use third key to unlock the second chest,  Use fourth key to unlock the first chest. In the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).In the third example, no key can unlock the given chest.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's see. The problem is about finding the maximum number of chests Neko can open using the keys. The condition is that the sum of a chest's number and a key's number must be odd. So, for each chest and key pair, their sum has to be odd. \n\nHmm, so first, I need to figure out how to pair the chests and keys optimally. Let's think about the parity of the numbers. Because the sum is odd only when one is even and the other is odd. So, for a chest with an even a_i, we need a key with an odd b_j. And for a chest with an odd a_i, we need a key with even b_j. \n\nSo the approach should be:\n\n1. Count the number of even and odd chests.\n2. Count the number of even and odd keys.\n3. Then, the maximum possible pairs would be the minimum between the number of even chests and the number of odd keys, plus the minimum between the number of odd chests and the number of even keys.\n\nWait, right! Because even chests can be paired with odd keys, and odd chests can be paired with even keys. So those are the two possible pairings. And for each of these two pairings, we take the minimum of the counts. Then sum them up.\n\nFor example, if there are 3 even chests and 5 odd keys, then we can pair 3 chests here. Similarly, if there are 2 odd chests and 4 even keys, we can pair 2 here. Total is 3 + 2 = 5.\n\nSo the plan is:\n\n- Count even_chest = number of a_i even\n- odd_chest = n - even_chest\n- even_key = number of b_j even\n- odd_key = m - even_key\n\nThen answer is min(even_chest, odd_key) + min(odd_chest, even_key)\n\nBut wait, let me check the sample input.\n\nFirst example input:\n\nn=5, m=4\n\na = [9,14,6,2,11]\n\nLooking at the a's:\n\n9 is odd, 14 even, 6 even, 2 even, 11 odd. So odd_chest is 2 (9 and 11), even_chest is 3 (14,6,2).\n\nKeys are [8,4,7,20]. Let's see:\n\n8 even, 4 even, 7 odd, 20 even. So even_key is 3 (8,4,20), odd_key is 1 (7).\n\nSo min(even_chest (3), odd_key (1)) is 1. Then min(odd_chest (2), even_key (3)) is 2. Total 3, which matches the sample output. Correct.\n\nAnother sample: second input is 5 1. Chests are all even (2,4,6,8,10). So even_chest=5, odd_chest=0. Keys: 5 (odd). So odd_key is 1. So min(5,1) is 1. Then min(0, even_key (0)) is 0. So total 1, which matches the sample.\n\nThird example: chest is 10 (even). Keys are all even (20,30,40,50). So even_key is 4, odd_key is 0. So min(even_chest (1), odd_key (0)) is 0. min(odd_chest (0), even_key (4)) is 0. Total 0. Correct.\n\nSo this logic works. So the code needs to compute these counts.\n\nNow, how to implement this in Python?\n\nFirst, read n and m.\n\nThen read the list a, then list b.\n\nCount even_chest: for each number in a, check if it's even.\n\nSimilarly for the keys.\n\nOnce we have even_chest, odd_chest, even_key, odd_key, compute the sum of min(even_chest, odd_key) + min(odd_chest, even_key).\n\nThat's the answer.\n\nSo code steps:\n\nRead n, m.\n\nRead a as list of integers.\n\nRead b as list of integers.\n\ncount_even_chest = sum(1 for x in a if x % 2 == 0)\n\ncount_odd_chest = n - count_even_chest\n\ncount_even_key = sum(1 for x in b if x % 2 == 0)\n\ncount_odd_key = m - count_even_key\n\nresult = min(count_even_chest, count_odd_key) + min(count_odd_chest, count_even_key)\n\nprint(result)\n\nYes. That should handle all cases.\n\nTesting the sample inputs:\n\nFirst sample:\n\nn=5, m=4\n\na: 9 (odd), 14 (even), 6 (even), 2 (even), 11 (odd). count_even_chest is 3. count_odd_chest is 2.\n\nb: 8 (even), 4 (even), 7 (odd), 20 (even). count_even_key is 3, count_odd_key is 1.\n\nmin(3,1) is 1. min(2,3) is 2. Total 3. Correct.\n\nSecond sample:\n\nn=5, m=1.\n\na: all even. count_even_chest=5, count_odd_chest=0.\n\nb: 5 (odd). count_even_key=0, count_odd_key=1.\n\nmin(5,1) is 1. min(0,0) is 0. Total 1. Correct.\n\nThird sample:\n\nn=1, m=4.\n\na: 10 even. count_even_chest=1, count_odd_chest=0.\n\nb: all even. count_even_key=4, count_odd_key=0.\n\nmin(1,0)=0. min(0,4)=0. Total 0. Correct.\n\nEdge cases: what if there are zero even chests or keys?\n\nLike, if all chests are odd, and all keys are even. Then min(odd_chest, even_key) would be the min of (n, m). But if all chests are odd and all keys are even, then the answer is min(n, m).\n\nAnother edge case: when there are more keys than needed. For example, even_chest is 2, odd_key is 5. So min(2,5) is 2. Then the rest can't be used.\n\nSo the code seems solid.\n\nNow, implement this in Python.\n\nRead the input. But the input is given as multiple test cases? Wait, looking back at the problem statement.\n\nWait, the input format says that the first line contains n and m, then the second line has a_i, third line has b_j. But the sample input shows three different test cases. Wait, looking at the sample input:\n\nThe sample input is given as a list of three examples, but in reality, the problem is for a single test case. Wait, no. Wait, the user provided the sample input as a list of three examples, but in the actual programming problem, the input is one test case per run. Wait, the original problem says that the input is given as per the first line, etc. So perhaps the sample input is given as three separate test cases, but in the code, we need to process a single test case.\n\nWait, looking at the problem statement:\n\nThe input is given as:\n\nThe first line contains n and m.\n\nSecond line has a_1 ... a_n.\n\nThird line has b_1 ... b_m.\n\nSo the code should read one test case. However, the sample input shows three examples, but that's probably part of the problem's sample input, but in practice, the code is supposed to read from stdin once.\n\nWait, the sample input given in the problem is:\n\nSample Input:\n\n['5 4\\n9 14 6 2 11\\n8 4 7 20', '5 1\\n2 4 6 8 10\\n5', '1 4\\n10\\n20 30 40 50']\n\nSample Output:\n\n['3', '1', '0']\n\nBut that's probably for three separate test cases. However, in the actual programming problem, the code is supposed to read a single test case. So perhaps the user made a mistake in formatting the sample input, but the actual code needs to process a single test case.\n\nBut the problem says that the input is given as per the first line, etc. So the code should read from stdin once. So the code should read n and m from the first line, then the next line for a's, then the next line for b's.\n\nTherefore, the code should read the input as follows:\n\nRead the first line as n and m.\n\nThen read the second line as list of a's.\n\nThen read the third line as list of b's.\n\nSo in Python, the code would be:\n\nn, m = map(int, input().split())\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nThen compute the counts.\n\nBut in the sample input, the first example is:\n\n5 4\n\n9 14 6 2 11\n\n8 4 7 20\n\nWhich gives output 3.\n\nSo the code would process that correctly.\n\nSo the code is straightforward.\n\nNow, code:\n\nRead n and m.\n\nRead a list.\n\nRead b list.\n\ncount_even_chest = sum(1 for x in a if x % 2 == 0)\n\ncount_odd_chest = n - count_even_chest\n\ncount_even_key = sum(1 for x in b if x % 2 == 0)\n\ncount_odd_key = m - count_even_key\n\nans = min(count_even_chest, count_odd_key) + min(count_odd_chest, count_even_key)\n\nprint(ans)\n\nYes.\n\nNow, let's test for some edge cases.\n\nCase where all chests are even and all keys are even. Then count_odd_key is zero. So min(even_chest, 0) is zero. And count_odd_chest is zero, so min(0, even_key) is zero. So total zero.\n\nAnother case: n=1, m=1. a is [1], b is [2]. Then even_chest is 0, odd_chest is 1. even_key is 1, odd_key is 0. So min(0, 0) is 0, min(1, 1) is 1. Total 1. Which is correct.\n\nAnother case: n=2, m=2. a is [1,3], b is [2,4]. So even_chest is 0, odd_chest is 2. even_key is 2, odd_key is 0. So min(0, 0) is 0, min(2, 2) is 2. Total 2. Which is correct.\n\nAnother case: n=2, m=3. a is [1,2], b is [3,4,5]. So even_chest is 1, odd_chest is 1. even_key is 1 (4), odd_key is 2 (3,5). So min(1,2) is 1. min(1,1) is 1. Total 2. Which is correct.\n\nYes, that's correct.\n\nSo the code should work.\n",
    "response": "To solve this problem, we need to determine the maximum number of treasure chests Neko can open using the given keys. A chest can be opened by a key if their sum is an odd number. This means that an even-numbered chest requires an odd-numbered key and vice versa.\n\n### Approach\n1. **Count Even and Odd Numbers**: First, count the number of even and odd numbers in both the list of chests and the list of keys.\n2. **Determine Pairings**: The maximum number of chests that can be opened is determined by two possible pairings:\n   - Even-numbered chests with odd-numbered keys.\n   - Odd-numbered chests with even-numbered keys.\n3. **Calculate Maximum Pairs**: For each pairing, take the minimum of the counts of available chests and keys. Sum these minimum values to get the total number of chests that can be opened.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_chest = sum(1 for x in a if x % 2 == 0)\nodd_chest = n - even_chest\n\neven_key = sum(1 for x in b if x % 2 == 0)\nodd_key = m - even_key\n\nresult = min(even_chest, odd_key) + min(odd_chest, even_key)\nprint(result)\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, which includes the number of chests and keys, followed by the lists of numbers on the chests and keys.\n2. **Counting Evens and Odds**: We count how many numbers in the chest list are even and how many are odd. Similarly, we count the even and odd numbers in the key list.\n3. **Pairing Calculation**: The maximum number of chests that can be opened is determined by pairing even chests with odd keys and odd chests with even keys. The result is the sum of the minimum values of these two pairings, ensuring we use the available keys and chests optimally.\n\nThis approach efficiently computes the solution in linear time relative to the size of the input lists, making it suitable for large input sizes up to the given constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\neven_chest = sum(1 for x in a if x % 2 == 0)\nodd_chest = n - even_chest\n\neven_key = sum(1 for x in b if x % 2 == 0)\nodd_key = m - even_key\n\nresult = min(even_chest, odd_key) + min(odd_chest, even_key)\nprint(result)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 600,
        "completion_token_count": 472,
        "thoughts_token_count": 2432
    }
}