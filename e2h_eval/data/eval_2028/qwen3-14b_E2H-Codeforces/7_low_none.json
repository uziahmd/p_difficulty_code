{
    "start": 1758008507.5064278,
    "end": 1758008688.3193443,
    "start-formatted": "2025-09-16 16:41 KST",
    "end-formatted": "2025-09-16 16:44 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, I need to solve this problem where I have to determine if a given number n can be the number of vertices in a snowflake graph as defined. Let's think about what the snowflake structure looks like.\n\nThe problem says that the snowflake is built in a certain way. Let me try to model it. \n\nThe initial step is a single vertex. Then, we add k new vertices connected to it. Then, each vertex that has only one connection (so those added in the first step) must have k new vertices connected to them. And this process is done at least once. So, the structure is like a tree where each node branches out into k children, but with some constraints on how many levels there are.\n\nWait, let's think recursively. Let me try to model the number of nodes for different steps.\n\nLet me consider the construction steps. The first step is level 0: 1 node. Then, level 1: adding k nodes connected to the root. Then, for each node in level 1, we add k nodes. But this step must be done at least once. So, the minimal snowflake would have two levels. For example, when k=4, the minimal snowflake would have 1 + 4 + 4*4 = 1 + 4 + 16 = 21? Wait, no. Wait, the initial step is one node. Then, we add k new nodes connected to it. Then, each node that is connected to only one other (the ones added in the first step) must be connected to k new nodes. So, after the first step (adding k nodes), the second step adds k * k nodes. So total nodes would be 1 + k + k^2. But wait, the problem says that the step of adding k new nodes to each leaf must be done at least once. So the minimal snowflake is when we do this once. So for example, the minimal snowflake for k=4 would have 1 + 4 + 4*4 = 1 +4 +16 = 21 nodes. But according to the example given in the problem statement, the sample input for 6 gives a 'NO' and for 13 gives 'YES'. Let me check that. \n\nWait the sample input includes 13 as a YES. Let's see. Let's think for k=3. Let's see:\n\nIf the snowflake has two levels. Then the total nodes would be 1 +3 + 3*3 = 1+3+9=13. Oh right! So that's why 13 is a yes. So the formula for the snowflake is that the total number of nodes is 1 + k + k*(k) ? No, wait. Because each of the initial k nodes (level 1) gets k children. So level 0: 1, level 1: k, level 2: k * k. So total is 1 + k + k^2. But then, what if there are more levels? For example, if we do another step. Like, after adding level 2, each node in level 2 (which are leaves) would get k new children. So then the total would be 1 +k +k^2 +k^3. But the problem says that the step of adding k new nodes to each leaf must be done at least once. So the process is that after the initial step (adding level 1), we must do at least one more step. So the minimal number of levels is two (level 0, level 1, level 2). But maybe there could be more steps. So the total number of nodes can be 1 + k + k^2 + ... +k^m, where m is at least 2? Or maybe not. Wait, let me re-examine the problem statement.\n\nThe problem says: \n\nInitially, the graph has only one vertex. Then, more vertices are added. The initial vertex is connected by edges to k new vertices (k>1). Each vertex that is connected to only one other vertex is connected by edges to k new vertices. This step should be done at least once.\n\nSo the initial step is adding k children to the root. Then, the step of adding k children to each leaf (those that are connected to only one other node) is done at least once. So after the initial step, we have some leaves (the ones added in the first step). Then, we perform the step once: adding k children to each of them. So that's the minimal case. However, perhaps after that, we can perform the step again. For example, after adding the second level, the leaves are the ones in the second level. Then, adding k children to each of them would be another step. So the total number of nodes would be 1 +k +k^2",
    "response": "\n\nTo solve this problem, we need to determine if a given number of vertices `n` can form a valid snowflake graph as defined by the rules. The snowflake graph is constructed in such a way that it starts with one vertex and expands by adding layers of vertices according to specific rules.\n\n### Approach\n1. **Understanding the Structure**: The snowflake graph starts with one vertex. Then, each subsequent layer adds `k` new vertices to each leaf node from the previous layer. This process must be done at least once after the initial step.\n2. **Formulating the Problem**: For a valid snowflake, the total number of vertices `n` must be expressible in the form `1 + k + k^2 + ... + k^m` where `m >= 2` and `k > 1`. This is because the minimal structure requires at least two layers (initial vertex, first layer, and second layer).\n3. **Efficient Check**: For each test case, we need to check if there exists an integer `k > 1` such that `n` can be expressed in the required form. We iterate over possible values of `k` and check if `n` fits the structure for some `k`.\n\n### Solution Code\n```python\nimport sys\nimport math\n\ndef is_snowflake(n):\n    if n == 1:\n        return False\n    # Try all possible k values\n    # The maximum possible k is when m=2, so 1 + k + k^2 = n => k^2 +k +1 =n\n    # So k_max is around sqrt(n)\n    max_k = int(math.isqrt(n)) + 2\n    for k in range(2, max_k + 1):\n        # Check for m >= 2\n        # Compute sum of geometric series 1 + k + k^2 + ... + k^m\n        # We need to find m >= 2 such that sum equals n\n        total = 1\n        current = 1\n        for m in range(1, 64):  # since k^m can be very large, but n is up to 1e18\n            current *= k\n            total += current\n            if total == n:\n                return True\n            elif total > n:\n                break\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    cases = list(map(int, input[1:t+1]))\n    for n in cases:\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints.\n2. **Checking Validity**: For each test case, the function `is_snowflake` checks if the number of vertices `n` can be represented as a valid snowflake structure.\n3. **Iterating Over Possible k Values**: We iterate over possible values of `k` starting from 2 up to a calculated maximum based on the square root of `n`.\n4. **Geometric Series Check**: For each `k`, we compute the cumulative sum of the geometric series until it exceeds `n` or matches it exactly. If it matches, `n` is a valid snowflake number.\n\nThis approach efficiently checks all possible configurations using geometric series properties and ensures that we handle the large constraints effectively.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef is_snowflake(n):\n    if n == 1:\n        return False\n    # Try all possible k values\n    # The maximum possible k is when m=2, so 1 + k + k^2 = n => k^2 +k +1 =n\n    # So k_max is around sqrt(n)\n    max_k = int(math.isqrt(n)) + 2\n    for k in range(2, max_k + 1):\n        # Check for m >= 2\n        # Compute sum of geometric series 1 + k + k^2 + ... + k^m\n        # We need to find m >= 2 such that sum equals n\n        total = 1\n        current = 1\n        for m in range(1, 64):  # since k^m can be very large, but n is up to 1e18\n            current *= k\n            total += current\n            if total == n:\n                return True\n            elif total > n:\n                break\n    return False\n\ndef main():\n    input = sys.stdin.read().split()\n    t = int(input[0])\n    cases = list(map(int, input[1:t+1]))\n    for n in cases:\n        if is_snowflake(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 553,
        "completion_token_count": 736,
        "thoughts_token_count": 1023
    }
}