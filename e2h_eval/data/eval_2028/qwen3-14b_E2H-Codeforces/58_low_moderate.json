{
    "start": 1758309541.5287197,
    "end": 1758309771.6007655,
    "start-formatted": "2025-09-20 04:19 KST",
    "end-formatted": "2025-09-20 04:22 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The task is to find the minimum number of edges to add to form an odd-length cycle, and the number of ways to do that. Hmm.\n\nFirst, I remember that a graph has an odd-length cycle if and only if it's not bipartite. So maybe the problem is related to checking bipartition of each connected component.\n\nWait, the question is about creating a simple cycle of odd length. So if the original graph already has such a cycle, then t is 0 and w is 1? Or wait, no. Because the problem says \"the minimum number of edges that must be added to form a simple cycle of an odd length\". So if the graph already contains such a cycle, then t is 0, and w is the number of ways to add zero edges (i.e., 1 way?), but maybe there are multiple existing cycles. Wait, but the problem says that the answer is the number of ways to add t edges. For t=0, it's the number of existing such cycles? No, no. Wait, no. Because the problem says that we need to find the minimum t, which would be zero if there's already an odd-length cycle. But the question is, how many ways can you add t edges (which is zero) to form such a cycle. But since the graph already has such a cycle, then the answer is 1? Or maybe the number of possible such cycles?\n\nWait, no. The problem says that the output is the number of ways to add t edges. So when t is zero, the answer is the number of ways to choose zero edges (so 1 way) if the graph already has at least one odd-length cycle. But wait, maybe the problem requires that after adding those edges, there exists at least one such cycle. So even if there are multiple existing cycles, the number of ways is 1 because adding zero edges is one way. Because the problem says that two ways are considered equal if they have the same set of added edges. So if there are multiple existing cycles, but adding zero edges is considered as one way. Because the way is to add nothing. So in that case, the answer for w is 1. So for example, in the second sample input, which is a triangle (a cycle of length 3), the output is 0 1. Which matches that. So if the graph already has an odd cycle, then t is 0 and w is 1. So the first thing to check is whether the graph already contains an odd-length cycle. If yes, then answer is t=0, w=1.\n\nSo the problem reduces to: if the graph is bipartite, then we need to add edges to make it non-bipartite. Otherwise, answer is 0 and 1.\n\nWait, but how to find the minimal number of edges to add. Let me think again.\n\nIf the graph is bipartite, then adding any edge between two nodes in the same partition will create an odd-length cycle. Because in a bipartite graph, all cycles are even-length. Adding an edge between two nodes in the same partition would create a cycle of length (original path length + 1). Since the original path between them is even (because in bipartition, any path between two nodes in same partition has even length), adding the edge makes it odd. So the minimal t is 1. But how to compute the number of ways?\n\nSo for each connected component that is bipartite, we can compute the number of possible edges that can be added between nodes in the same partition. Then, the minimal t is 1, and the number of ways is the sum over all connected components of (number of possible edges in that component that connect same partitions) ?\n\nBut wait, because adding any such edge would create an odd cycle. However, the problem says that the added edges must form a cycle of odd length. So adding one such edge would create exactly one such cycle. So the minimal t is 1, and the number of ways is the total number of possible edges that can be added between same partitions in any connected component. But wait, because the graph may have multiple connected components. For example, if the graph is bipartite and has two connected components. Then, adding any such edge in any component would create an odd cycle. So the total number of possible ways is the sum over all connected components of (number of possible edges that can be added within that component to create an odd cycle).\n\nBut how to compute that for each connected component.\n\nSo the steps:\n\nCheck if the graph already contains an odd-length cycle. If yes, output t=0, w=1.\n\nElse, the graph is bipartite. Then, the minimal t is 1. And the number of ways is the sum for each connected component of (the number of possible edges that can be added between same partitions in that",
    "response": "To solve this problem, we need to determine the minimum number of edges required to form a simple cycle of odd length in an undirected graph and the number of ways to achieve this. The solution involves checking if the graph is bipartite and computing the necessary edges if it is not.\n\n### Approach\n1. **Check for Existing Odd Cycles**: If the graph already contains an odd-length cycle, the answer is immediately `0 1` since no edges need to be added.\n2. **Bipartite Check**: If the graph is bipartite (i.e., no odd cycles), we need to add edges to create an odd cycle. The minimum number of edges required is 1.\n3. **Count Valid Edge Additions**: For each connected component of the graph, count the number of possible edges that can be added between nodes in the same partition. This count gives the number of ways to add edges to form an odd cycle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1] * n\n    is_bipartite = True\n    components = []\n\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            components.append(cnt)\n    \n    # Check if the graph is bipartite\n    # If any component is not bipartite, then there's an odd cycle\n    # But how to check? Wait, during BFS, if we find a conflict, we mark is_bipartite as False\n    # So let's redo the BFS with checking for bipartition\n\n    color = [-1] * n\n    is_bipartite = True\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    # Now, the graph is bipartite, so compute the number of ways\n    # For each component, count the number of possible edges within same partition\n    total_ways = 0\n    color = [-1] * n\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            # Compute the number of possible edges in same partition\n            a = cnt[0]\n            b = cnt[1]\n            total_ways += (a * (a - 1) // 2) + (b * (b - 1) // 2)\n\n    print(f\"1 {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into an adjacency list representation of the graph.\n2. **Bipartite Check**: Using BFS, we check if each connected component is bipartite. If any component is not bipartite, the graph already contains an odd-length cycle.\n3. **Component Analysis**: For each bipartite component, we count the number of nodes in each partition. The number of ways to add edges within the same partition is calculated using combinations.\n4. **Result Calculation**: If the graph is bipartite, the minimum edges needed is 1, and the number of ways is derived from the sum of possible edges within each partition of all components. If the graph is not bipartite, the result is `0 1`.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1] * n\n    is_bipartite = True\n    components = []\n\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            components.append(cnt)\n    \n    # Check if the graph is bipartite\n    # If any component is not bipartite, then there's an odd cycle\n    # But how to check? Wait, during BFS, if we find a conflict, we mark is_bipartite as False\n    # So let's redo the BFS with checking for bipartition\n\n    color = [-1] * n\n    is_bipartite = True\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n\n    if not is_bipartite:\n        print(\"0 1\")\n        return\n\n    # Now, the graph is bipartite, so compute the number of ways\n    # For each component, count the number of possible edges within same partition\n    total_ways = 0\n    color = [-1] * n\n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n            # Compute the number of possible edges in same partition\n            a = cnt[0]\n            b = cnt[1]\n            total_ways += (a * (a - 1) // 2) + (b * (b - 1) // 2)\n\n    print(f\"1 {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 579,
        "completion_token_count": 1068,
        "thoughts_token_count": 1024
    }
}