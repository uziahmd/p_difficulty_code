{
    "start": 1758309605.3500075,
    "end": 1758309651.318142,
    "start-formatted": "2025-09-20 04:20 KST",
    "end-formatted": "2025-09-20 04:20 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The task is to find the minimum number of edges to add to a graph to create an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I remember that a graph is bipartite if and only if it doesn't contain any odd-length cycles. So if the graph is already bipartite, then adding edges to create an odd cycle would require some changes. Wait, but the problem is to find the minimum edges needed. So maybe the approach is to check if the graph is bipartite. If it's not, then there's already an odd cycle, so t is 0 and w is 1? Wait no, because the existing graph might have multiple odd cycles, but the question is about the minimum number of edges to add. Oh right, if the original graph already has an odd cycle, then t is 0, and w is the number of ways to choose zero edges (which is 1?), but wait the problem says that the existing graph might have multiple odd cycles, but the answer for w would be 1 because you don't need to add any edges. But the sample input shows for the second case, which is a triangle (a cycle of length 3), the output is 0 1. So that makes sense. So in that case, the answer is t=0, w=1.\n\nBut if the graph is bipartite, then we need to add edges to make it non-bipartite. How can we do that with minimal edges?\n\nSo the minimal number of edges to add would be 1 if there's at least one connected component that is bipartite. Because adding an edge between two nodes in the same partition of a bipartition would create an odd-length cycle. Wait, but how?\n\nWait, for a bipartite graph, any cycle is even-length. So to create an odd-length cycle, you need to add an edge that creates a cycle of odd length. So adding an edge between two nodes in the same partition of a bipartite component would create a cycle of odd length. For example, suppose a component is bipartitioned into A and B. If you connect two nodes in A, then the cycle formed would be of length (original path from u to v in the bipartition) + 1. Since the original path between u and v is of even length (since the graph is bipartite), adding the edge makes it odd.\n\nSo, for each connected component that is bipartite, we can compute the number of possible edges that can be added between nodes in the same partition. Then, the minimal t is 1, and the number of ways is the sum over all components of (number of possible edges in same partition) for each component. Wait, but the minimal t is 1, because adding any such edge would create an odd cycle. So the minimal number of edges to add is 1. However, if there are multiple components, but each is bipartite, then adding any such edge in any component would suffice. So the total number of ways is the sum of the number of possible edges in each component that can be added to create an odd cycle.\n\nWait, but the problem requires that the new cycle is a simple cycle. So when adding an edge between two nodes in the same partition, the cycle formed must be simple. But since the original graph is bipartite, and the two nodes are in the same partition, the path between them in the original graph is of even length. Adding the edge creates a cycle of length (even + 1) = odd. And since the original graph had no cycles (if it's a tree) or even cycles, but adding that edge creates a single cycle. But what if the component is not a tree? Well, even if there are other cycles, adding an edge between two nodes in the same partition would create an odd-length cycle. But the problem requires that the added edges form a cycle. So regardless of the existing structure, adding that edge will create an odd-length cycle. Therefore, the minimal t is 1 if the original graph is bipartite. Otherwise, t is 0.\n\nWait, but the original graph may have multiple connected components. So first, we need to check whether the entire graph is bipartite. If it's not, then there's already an odd cycle, so t is 0 and w is 1. But if the entire graph is bipartite, then we need to add one edge. But how to compute the number of possible ways?\n\nSo the steps would be:\n\n1. Check if the graph is bipartite. If not, then output t=0 and w=1.\n\nWait, no. Wait, the graph could have multiple components, some of which are bipartite and others not. For example, if there's a component that is not bipartite (has an",
    "response": "To solve this problem, we need to determine the minimum number of edges required to form an odd-length cycle in a given undirected graph and count the number of ways to achieve this. The solution leverages graph bipartiteness properties to efficiently determine the result.\n\n### Approach\n1. **Check Bipartiteness**: A graph is bipartite if it can be colored using two colors such that no two adjacent nodes share the same color. If a graph contains an odd-length cycle, it is not bipartite.\n2. **Cycle Detection**: If the graph is already non-bipartite, it contains an odd-length cycle, so no edges need to be added (`t = 0` and `w = 1`).\n3. **Edge Addition for Non-Bipartite Graphs**: If the graph is bipartite, adding any edge between two nodes in the same partition of a bipartite component will create an odd-length cycle. The number of such possible edges is calculated for each bipartite component and summed up.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    color = [-1] * n\n    is_bipartite = True\n    total_ways = 0\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt0 = 1\n            cnt1 = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        if color[v] == 0:\n                            cnt0 += 1\n                        else:\n                            cnt1 += 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n            if is_bipartite:\n                total_ways += cnt0 * cnt1\n    \n    if not is_bipartite:\n        print(\"0 1\")\n    else:\n        if n == 1:\n            print(\"3 1\")\n        else:\n            print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into an adjacency list representation of the graph.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component is found to be non-bipartite, the graph already contains an odd-length cycle.\n3. **Counting Ways**: For each bipartite component, the number of ways to add an edge between nodes in different partitions is calculated. This count gives the number of ways to form an odd-length cycle by adding one edge.\n4. **Output**: If the graph is non-bipartite, the result is `0 1`. If the graph is bipartite, the result is `1` followed by the total number of valid edge additions.\n\nThis approach ensures efficient detection of bipartiteness and calculation of required edge additions, adhering to the constraints and requirements of the problem.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(input[idx]) - 1\n        idx += 1\n        v = int(input[idx]) - 1\n        idx += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    color = [-1] * n\n    is_bipartite = True\n    total_ways = 0\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt0 = 1\n            cnt1 = 0\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        if color[v] == 0:\n                            cnt0 += 1\n                        else:\n                            cnt1 += 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n            if is_bipartite:\n                total_ways += cnt0 * cnt1\n    \n    if not is_bipartite:\n        print(\"0 1\")\n    else:\n        if n == 1:\n            print(\"3 1\")\n        else:\n            print(\"1\", total_ways)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 579,
        "completion_token_count": 774,
        "thoughts_token_count": 1024
    }
}