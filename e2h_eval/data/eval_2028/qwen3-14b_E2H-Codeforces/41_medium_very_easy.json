{
    "start": 1758338783.4247437,
    "end": 1758338909.4633884,
    "start-formatted": "2025-09-20 12:26 KST",
    "end-formatted": "2025-09-20 12:28 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nThe problem is about building houses on a street with n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that the tallest house in a certain interval [l_i, r_i] must be at most x_i. My goal is to maximize the total profit while satisfying all restrictions.\n\nHmm. So how do I approach this? Since n, h, m are all up to 50, maybe a brute-force approach is feasible. But even with n=50, trying all possibilities for each house's height would be O(h^n), which is way too big. For example, 50^50 is impossible. So brute force isn't going to work here.\n\nWait, but maybe there's a smarter way. Let me think about the constraints. Each restriction imposes that the maximum in a range is <= x_i. So for each such restriction, the maximum of the houses in that interval must not exceed x_i. How can I model this?\n\nAlternatively, perhaps for each position, determine the maximum allowed height based on the restrictions. But since a restriction applies to a range, it's possible that multiple restrictions apply to a single house. For example, if there are two restrictions that include a certain house in their ranges, the maximum allowed for that house would be the minimum of all the x_i's from the restrictions that cover it. Wait, no. Because the restriction is on the maximum in the range. So for example, if a restriction says that the max in [1,3] is at most 2, then each house in that range can be up to 2. But if another restriction says that the max in [2,4] is at most 3, then house 2 can be up to 3, but the first restriction requires that house 2 can be at most 2. So the maximum allowed for house 2 is min(2,3) = 2.\n\nWait, but that's not necessarily correct. Because the restriction is on the maximum of the entire interval. So for each restriction, the maximum of the interval must be <= x_i. Therefore, for each house, the maximum allowed height is the minimum of all x_i's from restrictions that cover that house. Wait, no. Because if a house is in multiple intervals, but each restriction applies to their respective ranges. For example, suppose there's a restriction on [1,2] with x=3, and another on [2,3] with x=2. Then for house 2, the maximum allowed height is 2. Because if house 2 is 2, then the first restriction (which includes house 2) allows it (since the max in [1,2] would be max(house1, 2). But if house1 is 3, then the first restriction would be violated. So this approach of taking the minimum x_i for each house is not sufficient. Because the restrictions are on the maximum of ranges, not individual houses.\n\nSo this complicates things. How can we model this?\n\nAlternative idea: For each house, the maximum height it can have is the minimum of all x_i's from restrictions that cover it. But that's not correct. For example, if there's a restriction on [1,2], x=3, and a restriction on [2,3], x=2. Then for house 2, the maximum allowed height is 2. But if house 1 is 3, then the first restriction is satisfied (since the max in [1,2] is 3, which is equal to x_i=3). However, if house 2 is 2, then the second restriction is satisfied. But if house 2 is 3, then the second restriction would be violated. So for house 2, the maximum allowed is 2. But for house 1, it can be up to 3. But how do we know that?\n\nBut how do we model that for each house, the maximum possible height is determined by the restrictions that apply to ranges that include it. But since the restrictions are on ranges, it's not straightforward.\n\nAnother approach: For each restriction, the maximum in the interval [l_i, r_i] must be <= x_i. So, the maximum of all houses in that interval must be <= x_i. To satisfy all restrictions, we need to assign heights to each house such that for every restriction, this condition holds.\n\nNow, the problem is to assign heights to each house (each between 0 and h) so that all these conditions are met, and the sum of squares is maximized.\n\nHow can we model this?\n\nSince n is small (up to 50), perhaps we can model this as a constraint satisfaction problem and find the optimal solution.\n\nBut how to find the optimal solution efficiently?\n\nAlternative idea: For each house, the maximum possible height it can have is the minimum of h and all x_i's from restrictions that cover that house. Wait, but that's not correct. Because a restriction on a range [l_i, r_i] doesn't directly limit the individual house unless that house is in that range. For example, if a restriction says that the max in [1,3] is <= x, then each house in that range can be up to x, but the max of them all must be <=x. However, if you set all houses in that range to x, that's allowed. But if you set some to x and others to lower, that's allowed.\n\nBut if there's a restriction that [l_i, r_i] must have max <= x_i, then for any house in that range, it's allowed to be up to x_i. However, if there are multiple restrictions, the effective maximum for a house is the minimum of all x_i's from restrictions that include that house in their range. Because if a house is in a restriction's range, then the max of that range must be <= x_i. Therefore, that house can't be higher than x_i, otherwise the max of that range would be higher than x_i. Wait, that's correct! Because if the house is in the range, then if its height is higher than x_i, then the max of that range would be higher than x_i, violating the restriction. Therefore, for each house, the maximum possible height is the minimum of all x_i's from restrictions that include that house in their [l_i, r_i] interval, and also h. Because the house can't be higher than h anyway.\n\nWait, that's a key insight. Because for any restriction that covers a house, the house's height cannot exceed x_i. Otherwise, the max of that interval would be higher than x_i. So, for each house, the maximum allowed height is the minimum between h and the minimum x_i of all restrictions that include that house in their interval.\n\nBut what about overlapping restrictions? For example, if a house is in multiple restrictions. For example, if there are two restrictions on [1,2] with x=3 and [1,2] with x=2. Then the house can be up to 2. Which is the minimum of the two x's. So yes, the maximum allowed height for a house is the minimum x_i among all restrictions that cover it, and also h.\n\nWait, but what if there are no restrictions that cover a house? Then the maximum allowed is h.\n\nIf that's the case, then the problem becomes easy. For each house, compute the maximum allowed height as min(h, min of all x_i's from restrictions that cover that house). Then, set each house to that maximum allowed height. Then sum the squares.\n\nBut why is that correct? Because each restriction requires that the maximum in its interval is <= x_i. If for each house in that interval, the maximum allowed is <= x_i, then the maximum in the interval is also <= x_i. Because all houses in the interval are <= x_i. So the max is <= x_i. Therefore, all restrictions are satisfied.\n\nYes! That makes sense. So the optimal solution is to set each house to the minimum between h and the minimum x_i of all restrictions that include that house in their interval. Because that way, all restrictions are satisfied, and each house is as high as possible, maximizing the sum of squares.\n\nWait, but what if there are multiple restrictions on different ranges. For example, suppose there is a restriction [1,3] with x=2, and another [2,2] with x=3. Then the house 2 is in both ranges. The first restriction says that the max in [1,3] is 2. So house 2 can be at most 2. The second restriction says that the max in [2,2] is 3, which would allow house 2 to be 3. But since the first restriction requires that house 2 is <= 2, the overall maximum allowed for house 2 is 2. So the correct approach is to take the minimum of all x_i's from the restrictions that cover that house. So for each house, the maximum allowed is the minimum of all x_i's from restrictions that include that house, and h.\n\nSo this seems to be the correct approach. Therefore, the steps are:\n\nFor each house i (from 1 to n):\n\n- Find all restrictions where l_i <= i <= r_i.\n\n- Take the minimum x_i among those restrictions.\n\n- Then, the maximum allowed height for house i is min(h, that minimum x_i).\n\nBut wait, if there are no restrictions covering that house, then the maximum allowed is h.\n\nOnce we compute that for each house, then set each house to that maximum allowed value. Then the sum of squares is the answer.\n\nBut let's check the example given.\n\nFirst example input:\n\n3 3 3\n\nRestrictions:\n\n1 1 1 → house 1 is covered by this, so min x is 1.\n\n2 2 3 → house 2 is covered by this, min x is 3.\n\n3 3 2 → house 3 is covered by this, min x is 2.\n\nSo each house is set to 1, 3, 2. Sum is 1 +9 +4 =14. Which matches the sample.\n\nSecond example input:\n\n4 10 2\n\nRestrictions:\n\n2 3 8 → covers houses 2 and 3.\n\n3 4 7 → covers houses 3 and 4.\n\nFor house 1: no restrictions. So max is 10.\n\nHouse 2: covered by first restriction, x=8. So max is 8.\n\nHouse 3: covered by both restrictions. The min x is 7 (since 8 and 7). So max 7.\n\nHouse 4: covered by second restriction, x=7. So max 7.\n\nSo the heights are 10, 8,7,7. Sum is 100 +64 +49 +49 = 262. Which matches the sample.\n\nSo this approach works for the examples.\n\nAnother test case: what if there's a restriction that covers multiple houses. For example, n=2, h=5, m=1. Restriction is l=1, r=2, x=3. Then both houses can be set to 3. Sum is 3² *2= 18.\n\nAnother case: if there are two restrictions. One on [1,2] x=3, another on [1,1] x=2. Then house 1 is covered by both. So the minimum is 2. House 2 is covered by the first restriction, so 3. So the heights are 2 and 3. The max in [1,2] is 3 which is <=3. The max in [1,1] is 2 <=2. All good.\n\nSo this approach seems to work.\n\nTherefore, the algorithm is:\n\nFor each house i (1-based?), compute the minimal x_i across all restrictions that include i in their [l_i, r_i] interval. Then, the maximum allowed height for i is min(h, that minimal x_i). Then sum the squares.\n\nSo the problem reduces to, for each house, find the minimal x_i of the restrictions that cover it. Then set the height to that, but not exceeding h.\n\nSo how to implement this?\n\nRead n, h, m.\n\nFor each of the m restrictions, store l_i, r_i, x_i.\n\nThen, for each house i (from 1 to n):\n\nInitialize max_allowed as h.\n\nThen for each restriction, check if l_i <= i <= r_i. If so, take x_i and compare with current max_allowed. Update max_allowed to be the minimum between current max_allowed and x_i.\n\nOnce all restrictions are checked, the max allowed for house i is min(h, max_allowed). Wait, but initially max_allowed is h, and then for each restriction that covers i, we take the min between current max_allowed and x_i. So the final value is the minimum between h and all x_i's of restrictions covering i.\n\nWait, because initially, the max allowed is h. Then, for each restriction that covers i, we take the minimum between the current max allowed and x_i. So if there are no restrictions covering i, the max allowed remains h. If there are restrictions, then it's the minimum of all x_i's for those restrictions and h.\n\nSo that's correct.\n\nOnce we have the max allowed for each house, we set the height to that value, and sum the squares.\n\nSo the code can be written as follows.\n\nRead n, h, m.\n\nThen read m lines of l_i, r_i, x_i.\n\nThen for each house i (from 1 to n):\n\nmax_h = h\n\nfor each restriction in the list:\n\n   if l_i <= i <= r_i:\n\n       if x_i < max_h:\n\n           max_h = x_i\n\nthen add max_h^2 to the total.\n\nSo that's straightforward.\n\nBut wait, what if there are multiple restrictions that cover the same house. For example, two restrictions covering house i with x_i values 3 and 5. Then the minimum is 3, which is correct.\n\nYes.\n\nSo this approach should work.\n\nLet me test another case.\n\nSuppose n=2, h=5, m=2.\n\nRestrictions:\n\n1 2 3\n\n1 2 4\n\nThen for house 1 and 2, the min x is 3. So the heights are 3 and 3. Sum is 18.\n\nWhich is correct.\n\nAnother case: n=2, h=5, m=1. Restriction is 1 1 3. Then house 1 can be 3, house 2 can be 5. Sum is 9 +25=34.\n\nYes.\n\nSo this seems to handle all cases.\n\nSo the code is straightforward.\n\nNow, implement this in Python.\n\nRead input: the input is given as a list of strings. Wait, the input is given as per the sample input, but in the problem statement, the input is read from stdin. So in the code, the input is read via input() or sys.stdin.\n\nBut for the code, the input is given as per the problem's input format. So the first line has n, h, m. Then m lines follow.\n\nSo code steps:\n\nRead n, h, m.\n\nThen read m lines, each with l_i, r_i, x_i.\n\nThen for each house i in 1..n:\n\n   max_h = h\n\n   for each restriction:\n\n       if l_i <= i <= r_i:\n\n           if x_i < max_h:\n\n               max_h = x_i\n\n   total += max_h ** 2\n\nPrint total.\n\nYes.\n\nNow, code.\n\nIn Python:\n\nRead the first line as n, h, m.\n\nThen read m lines. For each of them, split into l, r, x.\n\nThen for each i from 1 to n:\n\ncurrent_max = h\n\nfor each restriction in the list:\n\n   if l <= i <= r:\n\n       current_max = min(current_max, x)\n\nsum += current_max ** 2\n\nSo code:\n\nn, h, m = map(int, input().split())\n\nrestrictions = []\n\nfor _ in range(m):\n\n    l, r, x = map(int, input().split())\n\n    restrictions.append( (l, r, x) )\n\ntotal = 0\n\nfor i in range(1, n+1):\n\n    current_max = h\n\n    for (l, r, x) in restrictions:\n\n        if l <= i <= r:\n\n            if x < current_max:\n\n                current_max = x\n\n    total += current_max ** 2\n\nprint(total)\n\nWait, that's the code.\n\nLet me test the sample input.\n\nFirst sample input:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nProcessing:\n\nFor i=1:\n\nCheck each restriction. First restriction is l=1, r=1, x=1. So current_max is min(3, 1) =1. The other restrictions don't cover i=1. So current_max is 1. Add 1.\n\ni=2:\n\nCheck restrictions. Second restriction is l=2, r=2, x=3. So current_max is 3. Other restrictions don't cover i=2. So add 9.\n\ni=3: third restriction l=3, r=3, x=2. current_max is 2. add 4. Total 1+9+4=14. Correct.\n\nSecond sample input:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nFor i=1: none of the restrictions apply. current_max is 10. Add 100.\n\ni=2: check first restriction (l=2, r=3). So x=8. current_max is 8. Add 64.\n\ni=3: check first restriction (x=8) and second (x=7). So current_max is min(10, 8,7) =7. Add 49.\n\ni=4: check second restriction (l=3, r=4). x=7. current_max is 7. Add 49. Total 100+64+49+49= 262. Correct.\n\nAnother test case: if there are no restrictions, then each house is h. Sum is n * h².\n\nAnother test case: if a house is covered by multiple restrictions. For example, n=2, m=2. Restrictions: [1,2,3], [1,2,4]. Then for each house, the min is 3. Sum is 3² *2 = 18.\n\nYes.\n\nWhat about if a restriction's x_i is larger than h? For example, h=3, and a restriction says [1,1], x=5. Then the current_max is min(3,5) =3. So it's handled correctly.\n\nYes.\n\nSo this code should work. Let me check the problem statement again. Oh, the input may have multiple test cases? Wait, looking back at the problem statement's sample input, the first input is given as a list of strings, but in the actual problem, the input is read from stdin. Wait, the sample input shows two examples, but the actual problem says that the input is given as per the problem's input format. So perhaps the code is supposed to process one test case per run.\n\nWait, the problem says that the input is given as per the first line with n, h, m, then m lines. So the code is supposed to read one test case. But in the sample input, there are two examples, but perhaps that's just for illustration. The actual code should process one test case.\n\nWait, looking back, the sample input shows two examples, but in the problem statement, the input is given as per the first line. So perhaps the code is supposed to process one test case. The sample input is given as a list of strings, but perhaps that's for the code submission. But the user's code should read from stdin, not from a list.\n\nSo the code I wrote is correct.\n\nThus, the code is as written above. Let me write it properly.\n\nWait, the code reads the first line as n, h, m. Then m lines. Then processes.\n\nYes.\n\nSo the code should be:\n\nRead n, h, m from input.\n\nRead m lines, each as l, r, x.\n\nFor each house from 1 to n:\n\ncurrent_max = h\n\nfor each restriction:\n\n   if l <= i <= r:\n\n      current_max = min(current_max, x)\n\nsum += current_max^2\n\nPrint sum.\n\nYes.\n\nThis should work.\n\nNow, code in Python:\n\nRead the input, etc.\n\nBut note that in Python, the code must read from stdin. So the code would be:\n\nRead the first line as n, h, m.\n\nThen read m lines.\n\nThen process as described.\n\nSo the code is:\n\nn, h, m = map(int, input().split())\n\nrestrictions = []\n\nfor _ in range(m):\n\n    l, r, x = map(int, input().split())\n\n    restrictions.append( (l, r, x) )\n\ntotal = 0\n\nfor i in range(1, n+1):\n\n    current_max = h\n\n    for (l, r, x) in restrictions:\n\n        if l <= i <= r:\n\n            if x < current_max:\n\n                current_max = x\n\n    total += current_max ** 2\n\nprint(total)\n\nYes.\n\nThat's the code. Let me test with the sample input.\n\nFirst sample input:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nThe code gives 14. Correct.\n\nSecond sample input:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nOutput is 262. Correct.\n\nAnother test case: n=1, h=5, m=0. Then total is 5^2 =25.\n\nAnother case: n=2, h=5, m=1, restriction 1 2 3. Then sum is 3^2 +3^2= 18.\n\nYes.\n\nSo this should handle all cases. The code seems correct.\n",
    "response": "To solve this problem, we need to determine the maximum profit from building houses on a street while adhering to zoning restrictions. Each house can have a height between 0 and a given maximum height, and each restriction imposes a limit on the tallest house within a specific range. The goal is to maximize the total profit, which is calculated as the sum of the squares of the heights of the houses.\n\n### Approach\n1. **Understand Restrictions**: Each restriction specifies that the tallest house within a given range must not exceed a certain height. This means that for each house, the maximum allowable height is influenced by all restrictions that cover that house.\n2. **Determine Maximum Allowable Heights**: For each house, compute the minimum height allowed by all restrictions that include that house in their range. If there are no restrictions affecting a particular house, its maximum height is simply the given overall maximum height.\n3. **Calculate Profit**: Once the maximum allowable height for each house is determined, calculate the profit by summing the squares of these heights.\n\n### Solution Code\n```python\nn, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\ntotal = 0\nfor i in range(1, n + 1):\n    current_max = h\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < current_max:\n                current_max = x\n    total += current_max ** 2\n\nprint(total)\n```\n\n### Explanation\n1. **Reading Input**: The first line of input contains the number of spots (n), the maximum height (h), and the number of restrictions (m). The subsequent lines contain the restrictions.\n2. **Processing Restrictions**: For each house, we check all restrictions to see if they apply to that house. If they do, we update the maximum allowable height for that house to be the minimum of the current value and the restriction's height.\n3. **Calculating Total Profit**: After determining the maximum allowable height for each house, we compute the total profit by summing the squares of these heights.\n\nThis approach ensures that we respect all restrictions while maximizing the profit by setting each house to the highest possible height allowed by the constraints. The complexity is manageable given the small constraints (up to 50 spots and restrictions), making this approach both efficient and straightforward.",
    "ground_truth": "N/A",
    "extracted_answer": "n, h, m = map(int, input().split())\nrestrictions = []\nfor _ in range(m):\n    l, r, x = map(int, input().split())\n    restrictions.append((l, r, x))\n\ntotal = 0\nfor i in range(1, n + 1):\n    current_max = h\n    for (l, r, x) in restrictions:\n        if l <= i <= r:\n            if x < current_max:\n                current_max = x\n    total += current_max ** 2\n\nprint(total)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 829,
        "completion_token_count": 512,
        "thoughts_token_count": 4743
    }
}