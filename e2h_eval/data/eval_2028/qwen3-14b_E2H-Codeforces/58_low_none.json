{
    "start": 1758309673.44212,
    "end": 1758309718.5289302,
    "start-formatted": "2025-09-20 04:21 KST",
    "end-formatted": "2025-09-20 04:21 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The task is to find the minimum number of edges to add to a graph to create an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I need to understand what's required here. A simple cycle of odd length. Oh right, and each vertex occurs once. So it's a cycle with no repeated vertices. But how do we determine if the graph already has such a cycle?\n\nWait, the problem says that the original graph might not have any such cycles. So our job is to find the minimal t (edges to add) and the number of ways to add them to achieve that.\n\nLet me think about the properties. A graph that has no odd-length cycles is bipartite. Because bipartite graphs can't have odd-length cycles. So if the original graph is bipartite, then adding edges to create an odd-length cycle would require some changes. But if the graph already has an odd-length cycle, then t is 0 and w is 1? No, wait. Wait, the problem says that the output is for the minimum t. So if the graph already contains an odd-length cycle, then t is 0, and w is the number of ways to add zero edges (which is 1, but maybe there are multiple existing cycles? Or does the problem consider that any existing cycle would count as a way? Wait, the problem says that the output w is the number of ways to add t edges to form such a cycle. So if the graph already has an odd cycle, then adding zero edges would be one way. But perhaps there are multiple such cycles. However, the problem says that the answer for w is the number of ways to add edges. But when t=0, the existing cycles are already present. However, the problem says that the answer w is the number of ways to add t edges (i.e., zero edges) such that the graph has such a cycle. But since the existing graph already has at least one such cycle, but how many different ways are there? Well, the problem says that two ways are considered equal if they have the same set of added edges. But when t is zero, there are no edges added, so there's only one way. But that's not correct. Because the existing graph may have multiple odd cycles. However, the problem says that the output w is the number of ways to add t edges (in this case zero) such that the graph has a cycle of odd length. But adding zero edges would mean that the graph already has such a cycle. However, the question isn't about counting the number of existing cycles, but the number of ways to add edges. Since adding zero edges is just one way (no edges added), regardless of how many existing cycles there are. Therefore, if the original graph already has an odd cycle, then t is 0 and w is 1. Because there's only one way to add zero edges. So in that case, the output would be 0 1.\n\nSo the first thing we need to check is whether the graph already has an odd-length cycle. If yes, then answer is t=0 and w=1.\n\nIf not, then the graph is bipartite. Then, how do we find the minimal edges to add to create an odd-length cycle?\n\nLet me think. For a bipartite graph, adding an edge between two nodes in the same partition would create an odd-length cycle. Because in a bipartite graph, all cycles are even-length. Suppose we have a bipartition (A, B). If we add an edge between two nodes in A, then there's a path from u to v through the bipartition (which is even length) plus the new edge, making an odd-length cycle. So to create an odd-length cycle, we need to add an edge between two nodes in the same partition.\n\nBut the minimal number of edges to add would be 1. Because adding one such edge would create an odd cycle. So t is 1. But then, how many such possible edges are there?\n\nWait, but the graph may consist of multiple connected components. Each connected component is bipartite. So for each connected component, we can compute the number of possible edges that can be added between nodes in the same partition. Then, the total number of ways would be the sum over all connected components of (number of possible edges within the same partition) for that component. But wait, adding any such edge would create an odd-length cycle. But if the component is bipartite, adding an edge between two nodes in the same partition would create an odd-length cycle. So for each connected component, the number of such edges is (count of nodes in partition A choose 2) + (count of nodes in partition B choose 2). Then, the total number of ways is the sum of these across all components. But wait, the minimal t is",
    "response": "To solve this problem, we need to determine the minimum number of edges required to form a simple cycle of odd length in an undirected graph and count the number of ways to achieve this. The key insight is that a graph without any odd-length cycles is bipartite. If the graph is already non-bipartite, it contains an odd-length cycle, and no edges need to be added.\n\n### Approach\n1. **Check Bipartiteness**: Determine if the graph is bipartite. If it is not, then it already contains an odd-length cycle, so the answer is `t = 0` and `w = 1`.\n2. **Bipartite Graph Handling**: If the graph is bipartite, we need to add edges between nodes within the same partition to create an odd-length cycle. For each connected component:\n   - Calculate the number of nodes in each partition.\n   - Compute the number of possible edges within each partition using combinations.\n3. **Sum Possible Edges**: Sum the possible edges across all components to determine the number of ways to add edges to form an odd-length cycle.\n\n### Solution Code\n```python\nimport sys\nimport threading\nfrom collections import deque\n\ndef main():\n    sys.setrecursionlimit(1 << 25)\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u-1].append(v-1)\n        edges[v-1].append(u-1)\n    \n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            while queue:\n                u = queue.popleft()\n                for v in edges[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n            components.append(cnt)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    total_ways = 0\n    for a, b in components:\n        total_ways += (a * (a - 1)) // 2 + (b * (b - 1)) // 2\n    \n    print(f\"1 {total_ways}\")\n\nthreading.Thread(target=main).start()\n```\n\n### Explanation\n1. **Bipartite Check**: The graph is checked for bipartiteness using BFS. If any component is not bipartite, it contains an odd-length cycle.\n2. **Component Analysis**: For each connected component, we count the number of nodes in each partition of the bipartite graph.\n3. **Edge Calculation**: For each component, the number of ways to add an edge within the same partition is calculated using combinations. This gives the number of ways to form an odd-length cycle by adding one edge.\n\nThis approach efficiently determines the minimum edges needed and the number of ways to add them, leveraging properties of bipartite graphs and combinatorial counting.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\nfrom collections import deque\n\ndef main():\n    sys.setrecursionlimit(1 << 25)\n    n, m = map(int, sys.stdin.readline().split())\n    edges = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u-1].append(v-1)\n        edges[v-1].append(u-1)\n    \n    color = [-1] * n\n    is_bipartite = True\n    components = []\n    \n    for start in range(n):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            cnt = [0, 0]\n            cnt[0] += 1\n            while queue:\n                u = queue.popleft()\n                for v in edges[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        cnt[color[v]] += 1\n                        queue.append(v)\n                    else:\n                        if color[v] == color[u]:\n                            is_bipartite = False\n            components.append(cnt)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    total_ways = 0\n    for a, b in components:\n        total_ways += (a * (a - 1)) // 2 + (b * (b - 1)) // 2\n    \n    print(f\"1 {total_ways}\")\n\nthreading.Thread(target=main).start()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 570,
        "completion_token_count": 716,
        "thoughts_token_count": 1024
    }
}