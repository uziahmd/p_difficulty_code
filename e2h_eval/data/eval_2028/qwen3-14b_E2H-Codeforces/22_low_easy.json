{
    "start": 1758309498.5628536,
    "end": 1758309540.3464308,
    "start-formatted": "2025-09-20 04:18 KST",
    "end-formatted": "2025-09-20 04:19 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\nOkay, let's see. I need to solve this problem where I have to find the number of successful students. A successful student is one who is the best in at least one subject. Being the best in a subject means no one has a higher mark than them in that subject. So, the approach here is to check for each student if there's at least one subject where they have the maximum mark for that subject.\n\nFirst, I need to read the input. The first line is n and m. Then there are n lines each with m characters. Each character is a digit from 1-9. So, for example, if the input is '223', that's the first student's marks for the three subjects.\n\nSo, the plan is:\n\n1. For each subject (columns), find the maximum mark.\n2. For each student, check if in any of the subjects they have the maximum mark for that subject.\n3. Count how many students meet this condition.\n\nWait, but how do I process the data? Let's think about the steps.\n\nFirst, let's parse the input. Let's say we have a list of lists. Each row is a student's marks. For example, for the first sample input:\n\nn=3, m=3\nstudent 1: [2,2,3]\nstudent 2: [2,3,2]\nstudent 3: [1,1,2]\n\nThen for each subject (columns 0, 1, 2):\n\nSubject 0: max is 2 (students 1 and 2 have 2)\nWait, no. Wait, the first student's first subject is 2, second student's first is 2, third is 1. So the max is 2. So any student who has 2 in subject 0 is considered best for that subject. But if multiple students have the same max, then all of them are considered best for that subject.\n\nSo for each subject, find the maximum value. Then, for each student, check if in any of the m subjects, their mark in that subject is equal to the maximum for that subject. If yes, then they are successful.\n\nSo the steps are:\n\n- Read n and m.\n- Read the next n lines, each line being a string of m digits. Convert each into a list of integers, perhaps. Or maybe keep them as strings and process each character.\n- For each column (subject), find the maximum value. So for column j, iterate through all students' j-th mark and find the max.\n- Then, for each student, check if in any of the columns, their mark in that column is equal to the max of that column. If at least one such column exists, count them.\n\nSo the key is to compute for each subject the maximum, then check for each student if they have at least one subject where they have that max.\n\nNow, how to implement this in Python?\n\nLet me think about the code structure.\n\nFirst, read the input. Let's say the input is read via stdin. The first line is n and m. Then, n lines follow.\n\nBut in the example given, the input is given as a list of strings. Wait, but in the actual problem, the input is read from standard input. So for example, the first input line is '3 3', then three lines of '223', etc.\n\nSo in code:\n\nRead n and m from input. Then read n lines, each line is a string. Then, for each of those lines, process each character into integers.\n\nSo, for example, for the first sample input, the gradebook is:\n\n223\n232\n112\n\nWhich would be stored as a list of lists:\n\n[\n [2,2,3],\n [2,3,2],\n [1,1,2]\n]\n\nOnce that is done, for each subject (columns), find the max. Let's create a list called max_per_subject, where max_per_subject[j] is the maximum value in column j.\n\nOnce that is computed, for each student, check if any of their marks in the columns equals the max_per_subject for that column. If at least one, then count them.\n\nSo, for the first sample, max_per_subject would be:\n\nFor column 0: max(2,2,1) = 2\ncolumn 1: max(2,3,1) = 3\ncolumn 2: max(3,2,2) = 3\n\nThen, for each student:\n\nStudent 1: [2,2,3]. Check each column:\n\ncolumn 0: 2 == 2 → yes. So this student is successful.\n\nStudent 2: [2,3,2]. column 1: 3 == 3 → yes. So successful.\n\nStudent 3: [1,1,2]. None of the columns have max. For column 0: ",
    "response": "To solve this problem, we need to determine the number of successful students in a group based on their grades in various subjects. A student is considered successful if they are the best in at least one subject. Being the best in a subject means no other student has a higher grade in that subject.\n\n### Approach\n1. **Read Input**: First, read the number of students (n) and the number of subjects (m). Then, read the grades for each student.\n2. **Determine Maximum Grades per Subject**: For each subject, find the highest grade achieved by any student.\n3. **Check Successful Students**: For each student, check if they have achieved the maximum grade in at least one subject. If so, they are considered successful.\n\n### Solution Code\n```python\nn, m = map(int, input().split())\ngradebook = [list(map(int, list(input()))) for _ in range(n)]\n\n# Find the maximum for each subject (column)\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if gradebook[i][j] > max_val:\n            max_val = gradebook[i][j]\n    max_per_subject.append(max_val)\n\n# Check each student for success\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if gradebook[i][j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)\n```\n\n### Explanation\n1. **Reading Input**: The input is read and stored as a list of lists where each sublist represents a student's grades in different subjects.\n2. **Finding Maximum Grades**: For each subject (column), iterate through all students to find the highest grade. This helps in determining the best performance for each subject.\n3. **Checking Success**: For each student, check if their grade in any subject matches the maximum grade for that subject. If they do, they are counted as successful.\n\nThis approach efficiently determines the number of successful students by leveraging the maximum grades per subject and checking each student against these values. The complexity is O(n*m) for both determining the maximum grades and checking each student, which is efficient given the constraints (n, m ≤ 100).",
    "ground_truth": "N/A",
    "extracted_answer": "n, m = map(int, input().split())\ngradebook = [list(map(int, list(input()))) for _ in range(n)]\n\n# Find the maximum for each subject (column)\nmax_per_subject = []\nfor j in range(m):\n    max_val = 0\n    for i in range(n):\n        if gradebook[i][j] > max_val:\n            max_val = gradebook[i][j]\n    max_per_subject.append(max_val)\n\n# Check each student for success\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if gradebook[i][j] == max_per_subject[j]:\n            count += 1\n            break\n\nprint(count)",
    "score": -1,
    "metadata": {
        "prompt_token_count": 456,
        "completion_token_count": 464,
        "thoughts_token_count": 1024
    }
}