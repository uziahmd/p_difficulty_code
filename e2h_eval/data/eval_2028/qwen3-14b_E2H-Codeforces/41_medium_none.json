{
    "start": 1758308981.9402585,
    "end": 1758309147.7787251,
    "start-formatted": "2025-09-20 04:09 KST",
    "end-formatted": "2025-09-20 04:12 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully again.\n\nThe problem is about building houses on n spots. Each house can have a height between 0 and h. The profit for each house is the square of its height. But there are m restrictions. Each restriction says that in the interval [l_i, r_i], the tallest house must be at most x_i. My goal is to maximize the total profit while satisfying all restrictions.\n\nHmm. So how do I model this? Since n is up to 50, and h is up to 50, maybe a brute-force approach is possible? But even with n=50 and h=50, trying all possibilities would be 50^50 possibilities, which is way too big. That's not feasible.\n\nSo I need another approach. Let's think about constraints. Each restriction imposes that the maximum in a range is at most x_i. So for each such range, the maximum of the houses in that interval must not exceed x_i.\n\nThe challenge is to assign heights to each house such that all these constraints are satisfied, and the sum of squares is maximized.\n\nThis sounds like a constraint satisfaction problem. How can I model the constraints and find the optimal solution?\n\nAn idea: For each house, the maximum possible height it can have is the minimum of h and all the restrictions that apply to it. Wait, but restrictions are on ranges. For example, a restriction on [l_i, r_i] implies that the maximum in that range is at most x_i. Therefore, each individual house in that range can't be higher than x_i. Because if any house in the range was higher than x_i, then the maximum would be higher than x_i, violating the restriction.\n\nWait, that's correct. Because if a restriction says that the maximum in [l, r] is at most x, then every house in [l, r] must be <= x. Because if even one house in that range is higher than x, then the maximum is higher than x, which violates the restriction. Therefore, each house in the range [l_i, r_i] must have height <= x_i. \n\nWait, is that true? Suppose there's a restriction that the maximum in [1,3] is 2. Then all three houses must be <= 2. Because if any of them is higher than 2, the maximum would be higher. So yes, each individual house in that range can't be higher than x_i.\n\nBut then, perhaps the constraints can be transformed into per-house constraints. For each house i, the maximum allowed height is the minimum between h and all x_i's from restrictions that include i in their [l_i, r_i] interval. Because each such restriction requires that the house i's height is <= x_i.\n\nWait, but that's not entirely accurate. Because a restriction could be on a range that includes house i, but maybe there's another restriction on a different range that also includes i. So for house i, the maximum allowed height is the minimum of all x_i's from restrictions where i is in [l_j, r_j], and also h. Because each such restriction requires that the maximum in their range is <= x_j. Which implies that house i's height can't be more than x_j. So for each house i, the maximum possible height is the minimum of h and all x_j's where i is in [l_j, r_j].\n\nWait, but is that sufficient? Because if we set each house to the minimum of those values, then for each restriction [l, r], the maximum in that range would be the maximum of the individual house heights, which are all <= x_j (since for each house in [l, r], their maximum is constrained by x_j). So the maximum in that range would be <= x_j. Thus, this would satisfy the restriction.\n\nTherefore, the problem reduces to: For each house i, determine the maximum possible height it can have, which is the minimum between h and all x_j's from restrictions that cover i. Then, set each house to that maximum value. Because that would maximize the sum of squares.\n\nWait, but that seems too simple. Let me check the examples.\n\nFirst example:\n\nInput:\n3 3 3\n1 1 1\n2 2 3\n3 3 2\n\nFor house 1: only the first restriction applies. So min(3, 1) = 1. House 2: min(3, 3) = 3. House 3: min(3, 2) = 2. So the total is 1² + 3² + 2² = 14, which matches the example. So that works.\n\nSecond example:\n\nInput:\n4 10 2\n2 3 8\n3 4 7\n\nFor house 1: no restrictions apply. So maximum is 10. House 2: restriction 8. House 3: restrictions 8 and 7. So min(10, 8,7) =7. House 4: restriction 7. So max is 7. So the heights would be [10, 8,7,7]. Sum is 10² + 8² +7² +7² = 100 +64 +49 +49 = 262, which matches the example.\n\nSo this approach works for the examples. So why is this the case?\n\nBecause each restriction [l_i, r_i] requires that the maximum in that interval is <= x_i. Therefore, for each house in that interval, their height must be <= x_i. Therefore, for each house, the maximum possible height is the minimum of h and all x_i's from restrictions that include that house. Once we set each house to that value, all restrictions are satisfied.\n\nBut wait, suppose there's a restriction that [1,3] must be <= 2, and another restriction that [1,2] must be <= 3. Then for house 3, the first restriction applies, so it's limited to 2. But for house 1 and 2, they are limited by the first restriction to 2, but the second restriction allows them to be up to 3. So the minimum between h and all x_i's that include the house. So for house 1, the first restriction says it's <=2, and the second says <=3. So the minimum is 2. So that's correct.\n\nSo this approach seems to work. Therefore, the problem can be solved by computing for each house i, the minimal x_j among all restrictions that include i in their interval, and then take the minimum between that and h. Then, set each house to that value, and compute the sum of squares.\n\nWait, but what if there are overlapping restrictions that are not directly covering the same house? For example, suppose there's a restriction on [1,2] with x=3, and another on [2,3] with x=2. Then for house 2, it's covered by both. So the minimal x is 2. So house 2 is set to 2. Then, the first restriction [1,2] has maximum 2 (since house 2 is 2, and house 1 can be up to 3, but the restriction says that the maximum in [1,2] must be <=3. So since house 1 is allowed up to 3, but house 2 is 2. So the maximum is 3, which is allowed. So that's okay.\n\nSo the approach is correct. Because for each restriction [l_i, r_i], the maximum in that interval is the maximum of the individual house heights. Since each house in that interval is limited to at most x_i, the maximum in the interval is <=x_i. Therefore, the restriction is satisfied.\n\nTherefore, the problem reduces to for each house, compute the minimal x_i of all restrictions that include that house. Then, the maximum height for that house is the minimum between h and that value. Then, the sum of squares is the sum of each house's height squared.\n\nSo how to implement this?\n\nThe steps:\n\n1. For each house i (from 1 to n), find the minimal x_j among all restrictions where l_j <= i <= r_j. Also, if there are no such restrictions, then the maximum is h.\n\n2. Then, the height for house i is min(h, that minimal x_j). Then sum the squares.\n\nWait, but for house i, if there are multiple restrictions that cover it, we take the minimal x_j. Because that's the tightest constraint.\n\nYes. For example, if a house is covered by two restrictions: one that says x=3 and another x=5. Then the minimal is 3. So the house can be up to 3. Which satisfies both restrictions.\n\nSo the algorithm is straightforward.\n\nNow, how to code this?\n\nRead n, h, m.\n\nThen for each of m restrictions, read l_i, r_i, x_i.\n\nFor each house i (from 1 to n), collect all x_i's from restrictions where l_i <= i <= r_i. Then, the minimal x among these. If no such restrictions, then it's h.\n\nThen the height is min(h, that minimal x).\n\nThen sum the squares.\n\nSo that's the plan.\n\nLet me test this logic against the sample inputs.\n\nFirst sample input:\n\nn=3, h=3, m=3.\n\nRestrictions:\n\n1 1 1 → covers house 1.\n\n2 2 3 → covers house 2.\n\n3 3 2 → covers house 3.\n\nSo for each house, the minimal x is 1, 3, 2. So heights are 1,3,2. Sum is 14. Correct.\n\nSecond sample input:\n\nn=4, h=10, m=2.\n\nRestrictions:\n\n2 3 8 → covers houses 2,3.\n\n3 4 7 → covers houses 3,4.\n\nFor house 1: no restrictions. So min x is h=10.\n\nHouse 2: covered by first restriction (x=8). So min x is 8. So height is 8.\n\nHouse 3: covered by both restrictions. x=8 and x=7. min is 7. So height is 7.\n\nHouse 4: covered by second restriction (x=7). So height is 7.\n\nSum is 10² + 8² +7² +7² = 262. Correct.\n\nAnother test case: let's imagine a scenario where a house is covered by multiple restrictions. For example, n=2, h=5, m=2. Restrictions: [1,2] x=3, and [1,1] x=4. For house 1: covered by both restrictions. The x's are 3 and 4. The minimal is 3. So house 1's height is 3. House 2 is covered by first restriction, x=3. So height is 3. The maximum in [1,2] is 3, which meets the restriction. Also, the [1,1] restriction is met.\n\nAnother example: n=2, h=5, m=2. Restrictions: [1,2] x=4, and [2,2] x=5. So for house 1, the restriction [1,2] applies. So min x is 4. For house 2, the restrictions are [1,2] (x=4) and [2,2] (x=5). So minimal is 4. So house 2 is 4. So the maximum in [1,2] is 4, which is okay. So the sum is 4² +4² = 32.\n\nBut if there's a restriction [1,2] x=4 and [2,2] x=3. Then for house 2, the minimal is 3. So house 2 is 3, and house 1 is 4. Then the maximum in [1,2] is 4, which is <=4. So that's okay.\n\nSo the approach works.\n\nSo the code can be written as follows:\n\nRead n, h, m.\n\nInitialize for each house i (from 1 to n), the minimal x is h (if no restrictions apply). Then, for each restriction, iterate through all houses in l_i to r_i, and for each house, check if the current x_i is less than the current minimal x. If so, update it.\n\nWait, but how to do that?\n\nFor each house i, initial value is h. Then, for each restriction (l, r, x), for each house in l to r, if x is less than the current value for that house, then set it to x.\n\nYes. Because for each restriction, all houses in l to r must have their maximum x_i as the minimal between their current value and x.\n\nSo code steps:\n\nInitialize an array max_heights of size n, with each element initialized to h.\n\nThen for each restriction (l, r, x):\n\n   for i in range l to r (inclusive):\n\n       if x < max_heights[i-1]:\n\n           max_heights[i-1] = x\n\nWait, but in Python, indexes are zero-based. So for the houses 1..n, we can have a list of size n, indexes 0..n-1.\n\nSo for each restriction l, r, x:\n\n   for i in range(l, r+1):\n\n       if x < max_heights[i-1]:\n\n           max_heights[i-1] = x\n\nOnce all restrictions are processed, the max_heights array contains for each house the minimal x from all restrictions covering it, or h if none.\n\nThen, the sum is sum of (h_i)^2 for each h_i in max_heights.\n\nYes.\n\nSo this approach would work. Let me see.\n\nFor example, in the first sample, the initial max_heights is [3,3,3]. Then processing the first restriction (1,1,1): for i=1, set to 1. Now the array is [1,3,3]. Then the second restriction (2,2,3): for i=2, current value is 3, which is equal to x. So no change. Third restriction (3,3,2): set to 2. Final array [1,3,2]. Sum is 1+9+4=14.\n\nYes.\n\nAnother example: the second sample. Initial max_heights is [10,10,10,10]. First restriction (2,3,8): process i=2 and 3. For i=2, 10 is replaced with 8. For i=3, same. Now array is [10,8,8,10]. Then second restriction (3,4,7): process i=3 and 4. For i=3, 8 vs 7: set to 7. For i=4, 10 vs 7: set to 7. Final array [10,8,7,7]. Sum is 100+64+49+49=262. Correct.\n\nSo this approach works.\n\nSo the code can be written as follows:\n\nRead n, h, m.\n\nInitialize max_heights as [h] * n.\n\nThen for each of m restrictions:\n\n   read l, r, x.\n\n   for i in range l to r (inclusive):\n\n       if x < max_heights[i-1]:\n\n           max_heights[i-1] = x\n\nThen compute sum of squares.\n\nSo that's the code.\n\nNow, what about the case where a restriction is redundant? Like, if a house is already constrained to a lower value than a new restriction. For example, if a house is already set to 2, and a new restriction applies to it with x=3. Then, the code will not change it, which is correct.\n\nYes.\n\nNow, handling the input. The input is given as a list of strings, but in the problem statement, the input is read from stdin. However, the sample shows that the input can be in the form of multiple test cases. Wait, looking back at the problem statement:\n\nThe example input is given as:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nBut the actual input is given as a single input. Wait, perhaps the sample is showing two separate test cases, but the actual code needs to process a single test case. Wait, looking back at the problem statement:\n\nThe input is given as:\n\nThe first line contains three integers n, h, m. Then m lines follow.\n\nBut in the sample input, the first input is given as a string that represents the input for the first test case, and the second string is for the second test case. However, the user's code is supposed to read from stdin. So perhaps the problem is expecting that the code is to process multiple test cases?\n\nWait, looking at the problem statement's sample input and output:\n\nThe sample input shows two test cases. The sample output shows two outputs. However, the problem's input description says that the first line contains n, h, m. So perhaps the problem is expecting that the code reads a single test case. However, the sample input shows two test cases. So perhaps the problem is presented in a way where the input is multiple test cases. But that's unclear.\n\nWait, looking back at the problem statement's input section:\n\nThe first line contains three integers n, h, m. Then m lines follow. So the input is for a single test case. But the sample input shows two separate test cases. So perhaps the sample input is a list of test cases, but the actual code should read a single test case.\n\nBut looking at the problem's sample input and output:\n\nIn the sample input, the first line is a list of strings, which seems to be two test cases. However, the problem's input is supposed to be read from stdin. So perhaps the user is to write code that reads a single test case. But the sample shows two test cases. So perhaps the problem is part of a programming competition where the code is supposed to read multiple test cases. But the problem's input description says that the first line contains n, h, m, which suggests that the code is supposed to read one test case.\n\nBut looking at the sample input and output, the first input is given as a list of two test cases. However, in reality, the code should read from standard input. So perhaps the sample input is presented as a list of test cases, but the actual code should process a single test case. However, the problem's sample shows that the code is supposed to process multiple test cases. But the problem statement's input description does not mention that. This is confusing.\n\nWait, looking at the problem statement again:\n\nThe input is given as:\n\nThe first line contains three integers n, h, m. Then m lines follow.\n\nSo the code is supposed to process a single test case. But in the sample input, there are two test cases. How is that possible? Oh, perhaps the sample input is given as a list of two test cases, but in reality, the code is supposed to read one test case. But in the problem statement's example, the input is given as two separate test cases, and the output is given as two outputs. So perhaps the code is supposed to process multiple test cases. But the problem's input description says that the first line contains n, h, m. So perhaps the code is supposed to read multiple test cases, each with their own n, h, m, etc. But the problem statement is not clear.\n\nBut looking at the problem's sample input, the first input line is:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nWhich is two test cases. The output is ['14', '262'].\n\nBut in the problem's actual input, perhaps the code is supposed to read multiple test cases. However, the problem's input description says that the first line contains n, h, m. So perhaps the code is supposed to process a single test case. But the sample shows two test cases, which implies that the code should process multiple test cases.\n\nThis is a contradiction. However, looking at the problem's note, the first example's input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nand the output is 14. The second example's input is:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\noutput 262.\n\nSo perhaps the sample input is presented as two separate test cases. But when writing the code, the code should read from stdin, which for programming competition problems is typically one test case. However, in some cases, the code may need to handle multiple test cases.\n\nBut in the problem's input description, there's no mention of multiple test cases. So perhaps the sample input is formatted incorrectly, and the actual code should process a single test case. However, the user's code is expected to read from stdin, and the sample shows that the code should process multiple test cases. This is confusing.\n\nBut looking back at the user's instruction, the problem says:\n\n\"Your task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout).\"\n\nSo the code should read input from stdin. How is the input structured?\n\nThe problem's input is given as:\n\nThe first line contains three integers n, h, m. Then m lines follow.\n\nBut the sample input shows two test cases. So perhaps the sample input is for two separate test cases. So the code should read multiple test cases. But how?\n\nIn programming competitions, sometimes the input is multiple test cases. For example, the first line is the number of test cases. However, in this problem's input description, there's no mention of that. So this is conflicting.\n\nBut looking at the sample input given in the problem statement, the first input is:\n\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\nWhich seems to be two test cases. So perhaps the code should read multiple test cases, each with their own n, h, m, etc. But how?\n\nAlternatively, perhaps the sample input is formatted in a way that's not standard. Perhaps the user is supposed to read one test case. But the sample input shows two test cases. However, the problem's output is two numbers, so the code must process multiple test cases.\n\nBut without further information, perhaps the problem expects that the code reads multiple test cases. However, the problem's input description is not clear on that. This is a problem.\n\nBut looking at the problem's sample input and output:\n\nThe first test case's input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nThe output is 14.\n\nThe second test case's input is:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nOutput is 262.\n\nSo the code must read multiple test cases, but how?\n\nIn programming competitions, it's common to have multiple test cases. However, the problem's input description does not state that. However, given the sample input, it's likely that the code is supposed to process multiple test cases, each of which is given as per the input description.\n\nBut how to know when to stop reading input? For example, in Python, reading from stdin until EOF.\n\nBut how to handle this? Well, in programming competition problems, sometimes the input is given as multiple test cases. However, in this case, the problem's input description doesn't mention that. But the sample input shows two test cases. So perhaps the code is supposed to read all test cases from input, each of which is in the format described.\n\nThus, the code should read all lines from stdin, split them into test cases, and process each one.\n\nBut how to parse that? For example, in the sample input, the input is given as two separate test cases. Each test case consists of m+1 lines. The first line is n, h, m. Then m lines of restrictions.\n\nSo, the code should read all input lines, and process each test case.\n\nBut how to read them? For example, in Python, the standard way is to read all input lines, then process them.\n\nBut how to split into test cases. For example, each test case starts with a line with n, h, m, followed by m lines. So the code can read all input lines, then process them as follows:\n\nRead all lines from stdin.\n\nThen, process each test case by taking the first line as n, h, m, then next m lines as the restrictions. Then, after that, the next line (if any) is the next test case's first line.\n\nBut how to handle this in code.\n\nIn Python, the code can read all input lines into a list, then process them sequentially.\n\nSo for example:\n\nimport sys\n\nlines = [line.strip() for line in sys.stdin if line.strip()]\n\nThen, process the lines as follows:\n\ncurrent = 0\n\nwhile current < len(lines):\n\n   read the first line as n, h, m.\n\n   current +=1\n\n   then read next m lines as the restrictions.\n\n   current +=m\n\n   process this test case.\n\nBut in the sample input, the first test case has m=3, so after reading the first line, read the next 3 lines. Then, the next line is the start of the next test case.\n\nBut how to handle this in code.\n\nBut in the problem's sample input, the input is given as two test cases. However, in practice, the code must read from stdin. So the code should process multiple test cases.\n\nBut the problem's input description says nothing about multiple test cases. However, the sample input shows that. So perhaps the problem's original input is multiple test cases, and the code should handle that.\n\nBut the problem's original input description says that the first line contains n, h, m. So perhaps the code is supposed to handle a single test case. But the sample shows two test cases. This is conflicting.\n\nAlternatively, perhaps the sample input is a mistake. For example, perhaps the sample input is given as two separate test cases, but the actual code is supposed to process one test case. However, the sample output shows two outputs, which would imply that the code must process multiple test cases.\n\nBut the user's problem statement says: \"You are planning to build housing on a street...\" which suggests that it's a single test case.\n\nBut given the sample input and output, the code must process multiple test cases. So I'll proceed under the assumption that the code must read multiple test cases, each with their own n, h, m, and m restrictions.\n\nBut how to read them? Let's think about the sample input:\n\nThe first test case's input is:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nThe second test case's input is:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nSo, when the code reads from stdin, it will read all these lines. So the code must process each test case in turn.\n\nThus, the code should read all lines, and for each test case, read the first line as n, h, m, then read m lines for the restrictions.\n\nSo, in code:\n\nimport sys\n\ndef main():\n\n    import sys\n\n    data = sys.stdin.read().splitlines()\n\n    idx = 0\n\n    while idx < len(data):\n\n        line = data[idx].strip()\n\n        if not line:\n\n            idx +=1\n\n            continue\n\n        n, h, m = map(int, line.split())\n\n        idx +=1\n\n        restrictions = []\n\n        for _ in range(m):\n\n            l, r, x = map(int, data[idx].split())\n\n            restrictions.append( (l, r, x) )\n\n            idx +=1\n\n        # process this test case\n\n        max_heights = [h]*n\n\n        for l, r, x in restrictions:\n\n            for i in range(l, r+1):\n\n                if x < max_heights[i-1]:\n\n                    max_heights[i-1] = x\n\n        total = sum( [a*a for a in max_heights] )\n\n        print(total)\n\nBut wait, the sample input has two test cases, and the code would process them both, printing two lines. Which matches the sample output.\n\nSo, for the sample input, the code would process two test cases, and output 14 and 262.\n\nYes.\n\nBut what about the case when there are multiple test cases, but the code is written for one? Well, according to the problem statement, the code must read from stdin, and the sample shows that the code must process multiple test cases.\n\nThus, this approach is correct.\n\nNow, what about edge cases?\n\nEdge case 1: n=1, h=0, m=0. Then, the max height is 0. Sum is 0.\n\nEdge case 2: m=0. All houses can be set to h. So sum is n*h².\n\nEdge case 3: multiple restrictions on the same range. For example, two restrictions on [1, 2], x=2 and x=3. The code will process both, and the max_heights for 1 and 2 will be 2.\n\nAnother edge case: a restriction with x larger than h. For example, h=3, and a restriction on [1,1] x=5. Since the max height is h=3, the code will set it to 3.\n\nYes, because the initial max_heights is h. The restriction x=5 is larger than current value (3), so no change.\n\nAnother edge case: a restriction that covers the entire range. For example, n=5, h=10, m=1, restriction [1,5] x=5. All houses are set to 5. Sum is 5*5² = 125.\n\nYes.\n\nThus, the code seems to handle all cases.\n\nSo the code is correct.\n\nNow, code implementation in Python.\n\nNow, considering that the code must read from stdin, and handle multiple test cases.\n\nBut in the problem's sample input, the input is given as two test cases. The code will process them.\n\nSo the code is written as follows.\n\nTesting the sample input:\n\nSample Input 1:\n\n3 3 3\n\n1 1 1\n\n2 2 3\n\n3 3 2\n\nSample Output: 14.\n\nSample Input 2:\n\n4 10 2\n\n2 3 8\n\n3 4 7\n\nSample Output: 262.\n\nThe code processes these correctly.\n\nAnother test case: n=1, h=5, m=1, restriction [1,1], x=3. So the max height is 3. Sum is 9.\n\nAnother test case: n=2, h=5, m=1, restriction [1,2], x=4. Both houses are set to 4. Sum 32.\n\nYes.\n\nNow, coding this.\n\nSo the code will be:\n\nRead all lines from stdin. For each test case, process as explained.\n\nNow, code:\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(data):\n        line = data[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        restrictions = []\n        for _ in range(m):\n            l, r, x = map(int, data[idx].split())\n            restrictions.append( (l, r, x) )\n            idx += 1\n        max_heights = [h] * n\n        for l, r, x in restrictions:\n            for i in range(l, r+1):\n                if x < max_heights[i-1]:\n                    max_heights[i-1] = x\n        total = sum( a*a for a in max_heights )\n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n\nBut need to make sure that in cases where m=0, the code doesn't crash. For example, when m=0, the for loop for reading restrictions will run zero times. So the code handles that.\n\nYes.\n\nAnother edge case: when m=0, and n=0? No, n is >=1 per input constraints (1<=n,h,m <=50). Wait, the input constraints say 1<=n,h,m<=50. So m can be 0? No, the input constraints for m are 1<=m<=50. Wait, looking back:\n\nThe problem says:\n\nInput:\n\nThe first line contains three integers n, h, m (1 ≤ n,h,m ≤ 50).\n\nAh, no. The input constraints for m are 1 ≤ m ≤50. Wait, no. Looking back:\n\nThe problem says:\n\n\"1 ≤ n,h,m ≤ 50\" — so m can be 1 to 50. So m can't be zero. So the code doesn't need to handle m=0.\n\nBut in the code, when m=0, the code would read zero restrictions. But according to the problem statement, m is at least 1. So no need to handle m=0.\n\nBut the code is written to handle m=0, but according to the problem's input constraints, it's not possible. So no problem.\n\nThus, the code is correct.\n",
    "response": "To solve this problem, we need to determine the maximum profit from building houses on a street while adhering to zoning restrictions. Each house can have a height between 0 and a given maximum height, and each restriction imposes a limit on the tallest house within a specific range.\n\n### Approach\n1. **Understanding Constraints**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This implies that every house within the specified range must be at most the given height.\n2. **Maximizing Profit**: The profit from each house is the square of its height. To maximize profit, each house should be built as tall as possible while respecting all constraints.\n3. **Processing Restrictions**: For each house, determine the minimum height allowed by all restrictions that apply to it. This ensures that all constraints are satisfied.\n4. **Efficient Calculation**: By iterating through each restriction and updating the maximum allowable height for each house in the affected range, we can efficiently compute the optimal heights for all houses.\n\n### Solution Code\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(data):\n        line = data[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        restrictions = []\n        for _ in range(m):\n            l, r, x = map(int, data[idx].split())\n            restrictions.append((l, r, x))\n            idx += 1\n        max_heights = [h] * n\n        for l, r, x in restrictions:\n            for i in range(l, r + 1):\n                if x < max_heights[i - 1]:\n                    max_heights[i - 1] = x\n        total = sum(a * a for a in max_heights)\n        print(total)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read all at once and split into lines for easier processing.\n2. **Initialization**: For each test case, initialize an array `max_heights` where each element starts at the maximum allowable height `h`.\n3. **Applying Restrictions**: For each restriction, update the maximum allowable height for each house in the specified range to be the minimum of its current value and the restriction's height.\n4. **Calculating Profit**: After processing all restrictions, compute the total profit by summing the squares of the allowable heights for each house.\n\nThis approach ensures that all constraints are respected while maximizing the profit, efficiently handling up to the maximum constraints given (n, h, m ≤ 50).",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    idx = 0\n    while idx < len(data):\n        line = data[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        restrictions = []\n        for _ in range(m):\n            l, r, x = map(int, data[idx].split())\n            restrictions.append((l, r, x))\n            idx += 1\n        max_heights = [h] * n\n        for l, r, x in restrictions:\n            for i in range(l, r + 1):\n                if x < max_heights[i - 1]:\n                    max_heights[i - 1] = x\n        total = sum(a * a for a in max_heights)\n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 820,
        "completion_token_count": 566,
        "thoughts_token_count": 7233
    }
}