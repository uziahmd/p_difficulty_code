{
    "start": 1758309279.025314,
    "end": 1758309423.7504287,
    "start-formatted": "2025-09-20 04:14 KST",
    "end-formatted": "2025-09-20 04:17 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully again.\n\nThe problem is about building houses on n spots. Each house can have a height between 0 and h. For each house, the profit is a^2 where a is the height. But there are m restrictions. Each restriction says that the tallest house in the range l_i to r_i must be at most x_i. My goal is to maximize the total profit while satisfying all the restrictions.\n\nHmm. So how do I approach this? Since n and h and m are up to 50, maybe a brute force approach is feasible here. But wait, even with n=50, trying all possibilities for each house's height would be O(h^n), which is way too big. For example, h=50, n=50, that's 50^50 possibilities. That's impossible.\n\nSo brute force isn't going to work. Need another approach.\n\nAlternative idea: The constraints are that for each interval [l_i, r_i], the maximum height in that interval is <= x_i. How can we model these constraints?\n\nThis feels like a problem where we need to assign heights to each house such that all constraints are satisfied, and the sum of squares is maximized.\n\nBut how to find such assignments efficiently?\n\nLet me think about the constraints. Each restriction imposes that in some interval, the maximum is at most x_i. So for any interval [l_i, r_i], the maximum of the houses in that interval must be <= x_i.\n\nNow, since the maximum is involved, perhaps for each position, we can determine the maximum possible height it can have, considering all constraints that apply to it.\n\nWait, but the constraints are not per-house. For example, a constraint on [1,3] that max is <= 2 implies that all houses in positions 1,2,3 must be <= 2. However, if there's another constraint on [2,4] with max <=3, then the first constraint would require that house 2 and 3 are <=2, but the second allows house 2 and 3 to be up to 3. So the first constraint is more restrictive here.\n\nSo for each house, the maximum possible height it can have is the minimum of h and all the constraints that cover it. Wait, no. Because a constraint that applies to a range [l, r] requires that the maximum in that range is <= x. So for a particular house i, if there are multiple constraints that include i in their ranges, then the maximum possible height of i is the minimum of all the x_i's from the constraints that apply to ranges that include i, and also h. Wait, no. Because suppose there's a constraint that says the max in [1,3] is <= 2, and another that says the max in [2,4] is <=3. Then house 2 is included in both ranges. The first constraint requires that house 2 is <=2. The second allows it up to 3. So the first constraint is more restrictive. So for house 2, the maximum possible height is 2.\n\nBut how to find for each house the maximum possible height it can have, considering all constraints?\n\nBut this isn't straightforward because a constraint on a range [l, r] doesn't directly limit individual houses. It limits the maximum in that range. So, for example, if there's a constraint that says the max in [1,3] is <=2, then each of the houses 1,2,3 can be up to 2. But if there's another constraint that says the max in [1,3] is <=3, then that doesn't affect the previous one. So the overall constraint is that the max in [1,3] is <= min(2,3) = 2.\n\nBut how do we find for each house, what is the maximum possible height it can have given all the constraints?\n\nAlternatively, perhaps we can model this as for each house, the maximum allowed height is the minimum between h and the minimum of all x_i for which the house is in [l_i, r_i], and also considering overlapping constraints. Wait, no. Because suppose there's a constraint on [1,2] with x=3, and another constraint on [2,3] with x=2. Then for house 2, the maximum possible height is 2. But for house 1, it's constrained by the first constraint (x=3) and not the second. So house 1 can be up to 3. Similarly, house 3 can be up to 2. But in this case, the maximum in [1,2] would be 3 (house 1) and 2 (house 2). So the max is 3, which is higher than the x_i of 3. So that's okay. But if there",
    "response": "To solve this problem, we need to maximize the profit from building houses on a street with specific zoning restrictions. Each house's height contributes to the profit as the square of its height, but we must adhere to constraints that limit the maximum height in specific ranges.\n\n### Approach\n1. **Constraints Analysis**: Each restriction specifies that the tallest house in a given range must not exceed a certain height. This means that for each house, the maximum possible height it can have is influenced by all restrictions that cover it.\n2. **Determine Maximum Heights**: For each house, determine the minimum height limit imposed by any restriction that includes it in its range. This ensures that all constraints are respected.\n3. **Maximize Profit**: Once we have the maximum allowable height for each house, the optimal strategy is to set each house's height to its maximum allowable value, as this will yield the highest profit due to the square function.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_height array with h\n        max_height = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Convert to 0-based index\n            l -= 1\n            r -= 1\n            # For each position in [l, r], the max allowed is min(current value, x)\n            for i in range(l, r + 1):\n                if max_height[i] > x:\n                    max_height[i] = x\n        \n        # Calculate the total profit\n        total = sum(hei * hei for hei in max_height)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read line by line, handling multiple test cases if present.\n2. **Initialization**: For each test case, initialize an array `max_height` where each element starts at the maximum allowed height `h`.\n3. **Applying Restrictions**: For each restriction, update the `max_height` array to ensure that the height of each house in the restricted range does not exceed the specified limit.\n4. **Calculating Profit**: After processing all restrictions, compute the total profit by summing the squares of the heights in the `max_height` array.\n\nThis approach efficiently processes each restriction and ensures that all constraints are respected while maximizing the profit by leveraging the square function's properties. The solution runs in O(n*m) time, which is efficient given the problem constraints (n, h, m ≤ 50).",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    input = sys.stdin.read().splitlines()\n    idx = 0\n    results = []\n    \n    while idx < len(input):\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        n, h, m = map(int, line.split())\n        idx += 1\n        \n        # Initialize max_height array with h\n        max_height = [h] * n\n        \n        for _ in range(m):\n            l, r, x = map(int, input[idx].strip().split())\n            idx += 1\n            # Convert to 0-based index\n            l -= 1\n            r -= 1\n            # For each position in [l, r], the max allowed is min(current value, x)\n            for i in range(l, r + 1):\n                if max_height[i] > x:\n                    max_height[i] = x\n        \n        # Calculate the total profit\n        total = sum(hei * hei for hei in max_height)\n        results.append(str(total))\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 828,
        "completion_token_count": 613,
        "thoughts_token_count": 1024
    }
}