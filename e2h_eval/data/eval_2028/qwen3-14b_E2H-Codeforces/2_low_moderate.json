{
    "start": 1758008442.8295388,
    "end": 1758008638.1800747,
    "start-formatted": "2025-09-16 16:40 KST",
    "end-formatted": "2025-09-16 16:43 KST",
    "gpu": 2,
    "pid": 2,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Valera and X\n\nValera is a little boy. Yesterday he got a huge Math hometask at school, so Valera didn't have enough time to properly learn the English alphabet for his English lesson. Unfortunately, the English teacher decided to have a test on alphabet today. At the test Valera got a square piece of squared paper. The length of the side equals n squares (n is an odd number) and each unit square contains some small letter of the English alphabet.Valera needs to know if the letters written on the square piece of paper form letter \"X\". Valera's teacher thinks that the letters on the piece of paper form an \"X\", if:  on both diagonals of the square paper all letters are the same;  all other squares of the paper (they are not on the diagonals) contain the same letter that is different from the letters on the diagonals. Help Valera, write the program that completes the described task for him.\n\n## Input\nThe first line contains integer n (3 ≤ n < 300; n is odd). Each of the next n lines contains n small English letters — the description of Valera's paper.\n\n## Output\nPrint string \"YES\", if the letters on the paper form letter \"X\". Otherwise, print string \"NO\". Print the strings without quotes.\n\n## Example\n### Input\n['5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox', '3\\nwsw\\nsws\\nwsw', '3\\nxpx\\npxp\\nxpe']\n\n### Output\n['NO', 'YES', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\nOkay, I need to solve this programming problem. Let's read the problem carefully.\n\nThe task is to determine if a given square grid forms the letter 'X' according to specific rules. The conditions are:\n\n1. Both diagonals of the square must have the same letters.\n2. All other squares (not on the diagonals) must have the same letter, which is different from the diagonal letters.\n\nSo, first, I need to check two main things: the diagonals and the non-diagonal elements.\n\nLet me think about how to approach this.\n\nFirst, the diagonals. For a square of size n x n (n is odd), the main diagonal is from top-left to bottom-right, and the anti-diagonal is from top-right to bottom-left. All elements on these two diagonals must be the same. Also, all other elements must be the same and different from the diagonal's letter.\n\nSo steps:\n\n1. Check that all elements on both diagonals are the same. Let's call this character 'd_char'.\n2. Check that all elements not on either diagonal are the same. Let's call this 'o_char'.\n3. Ensure that d_char is not equal to o_char.\n\nBut how to check these?\n\nFirst, let's think about how to iterate through the diagonals.\n\nFor the main diagonal, the positions are (i, i) for i from 0 to n-1.\n\nFor the anti-diagonal, the positions are (i, n-1 -i) for i from 0 to n-1.\n\nBut since n is odd, the two diagonals intersect at the center cell. So that cell is part of both diagonals. But when checking, we need to make sure that all elements in both diagonals are the same. So for example, if the main diagonal has all 'x's and the anti-diagonal has all 'x's, then that's okay. But if one diagonal has 'x' and the other has 'y', then it's invalid.\n\nSo first, collect all the characters from both diagonals and check if they are all the same. Then collect all the non-diagonal characters and check if they are all the same and different from the diagonal's character.\n\nBut wait, how to collect the non-diagonal characters? For each cell (i,j), if it's not on either diagonal, then it's part of the non-diagonal group.\n\nSo, for each cell in the grid, check if it's on the main diagonal or anti-diagonal. If not, collect it into the other group.\n\nBut how to check if a cell is on either diagonal?\n\nFor cell (i,j):\n\nif i == j or i + j == n - 1 → it's on one of the diagonals.\n\nSo, for all cells not satisfying that condition, they are part of the non-diagonal group.\n\nSo the plan is:\n\n- Collect all the characters on the diagonals. Check that they are all the same. Let's call this d_char.\n\n- Collect all the characters not on the diagonals. Check that they are all the same and different from d_char.\n\nBut how to collect those?\n\nLet me think about code structure.\n\nRead n.\n\nThen read n lines, each line being a string of length n. So, grid = [input().strip() for _ in range(n)]\n\nThen, for each cell (i,j):\n\nCheck if it's on the diagonals.\n\nBut for the diagonals, we can loop through each cell and check if i == j or i + j == n-1.\n\nSo, first, collect all diagonal characters.\n\nBut perhaps, for the first part, check that all diagonal characters are the same. Let's see.\n\nLet me think of the steps:\n\nFirst, collect all the characters from both diagonals.\n\nBut for the main diagonal and anti-diagonal, the cells are:\n\nFor i in 0 to n-1:\n\nmain_diag = (i, i)\n\nanti_diag = (i, n-1 -i)\n\nBut for the center cell (when n is odd), it's part of both. So when collecting all the characters, we need to collect all the cells in both diagonals, but avoid duplicates? Well, no. Because in the case of the center cell, it's part of both. But when checking if all are same, it's okay as long as all the characters in the diagonals are same. So for example, if the main diagonal has all 'x's and the anti-diagonal has all 'x's, then all the cells in the diagonals are 'x's. So even though the center cell is counted twice, it's still okay.\n\nSo, perhaps, collect all the characters in both diagonals. Then check that all of them are the same. Then collect all the non-diagonal characters and check that they are all same and different from the diagonal's character.\n\nBut how to collect the diagonal characters. Let me think of a way to collect them.\n\n",
    "response": "\n\nTo solve this problem, we need to determine if a given square grid forms the letter 'X' based on specific conditions. The conditions are that all characters on both diagonals of the grid must be the same, and all other characters (not on the diagonals) must be the same and different from the diagonal characters.\n\n### Approach\n1. **Input Reading**: Read the size of the grid `n` and the grid itself.\n2. **Diagonal Check**: Collect all characters from both the main diagonal (from top-left to bottom-right) and the anti-diagonal (from top-right to bottom-left). Ensure all these characters are the same.\n3. **Non-Diagonal Check**: Collect all characters that are not on either diagonal. Ensure all these characters are the same and different from the diagonal characters.\n4. **Validation**: If both checks pass, print \"YES\"; otherwise, print \"NO\".\n\n### Solution Code\n```python\nn = int(input())\ngrid = [input().strip() for _ in range(n)]\n\ndiag_chars = set()\nnon_diag_chars = set()\n\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            diag_chars.add(grid[i][j])\n        else:\n            non_diag_chars.add(grid[i][j])\n\nif len(diag_chars) == 1 and len(non_diag_chars) == 1 and diag_chars != non_diag_chars:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n```\n\n### Explanation\n1. **Reading Input**: The grid size `n` and the grid itself are read from standard input.\n2. **Collecting Characters**: We use sets to collect characters from the diagonals and non-diagonal positions. Using sets ensures that we can easily check for uniformity.\n3. **Checking Uniformity**: \n   - If the set of diagonal characters has exactly one unique character, it means all diagonal characters are the same.\n   - Similarly, if the set of non-diagonal characters has exactly one unique character, it means all non-diagonal characters are the same.\n   - Finally, we ensure that the diagonal character is different from the non-diagonal character.\n4. **Output Result**: Based on the checks, we print \"YES\" if all conditions are met, otherwise \"NO\".\n\nThis approach efficiently checks the required conditions using set operations, ensuring clarity and optimal performance.",
    "ground_truth": "N/A",
    "extracted_answer": "n = int(input())\ngrid = [input().strip() for _ in range(n)]\n\ndiag_chars = set()\nnon_diag_chars = set()\n\nfor i in range(n):\n    for j in range(n):\n        if i == j or i + j == n - 1:\n            diag_chars.add(grid[i][j])\n        else:\n            non_diag_chars.add(grid[i][j])\n\nif len(diag_chars) == 1 and len(non_diag_chars) == 1 and diag_chars != non_diag_chars:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "score": 1,
    "metadata": {
        "prompt_token_count": 444,
        "completion_token_count": 496,
        "thoughts_token_count": 1023
    }
}