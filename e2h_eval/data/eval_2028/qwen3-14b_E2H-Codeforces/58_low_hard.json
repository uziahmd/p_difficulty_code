{
    "start": 1758309850.9064486,
    "end": 1758309948.0508752,
    "start-formatted": "2025-09-20 04:24 KST",
    "end-formatted": "2025-09-20 04:25 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 1,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\nOkay, let's try to figure out this problem. The task is to find the minimum number of edges to add to a graph to create an odd-length cycle, and also count the number of ways to do that. Hmm.\n\nFirst, I need to understand what's required. A simple cycle of odd length with each vertex appearing once. Oh right, a simple cycle here means no repeated vertices. So the problem is about ensuring that after adding some edges, there exists such a cycle.\n\nBut wait, the original graph might already have an odd-length cycle. In that case, t would be 0, and w would be 1? Or maybe more? Wait, the question says that the answer is the minimum number of edges to add. So if the graph already has such a cycle, then t is zero, and w is the number of ways to add zero edges (which is 1, because there's only one way to do nothing). But wait, the example given includes a case where the input is a triangle (3 nodes connected in a cycle). The output is 0 1. Which matches that. So yes, if the graph already contains an odd-length cycle, then t is zero and w is 1. But how to check if the graph already has such a cycle?\n\nWait, but the problem says that we need to form a simple cycle of odd length. So the graph must contain at least one such cycle. If it does, then t is 0 and w is 1. Otherwise, we need to compute the minimum t and the number of ways.\n\nSo the first thing I need to do is check if the graph already contains an odd-length cycle. If it does, then output t=0 and w=1. Otherwise, compute the minimal t and w.\n\nBut how to check for the presence of an odd-length cycle? Well, that's equivalent to checking if the graph is bipartite. Because a bipartite graph cannot have any odd-length cycles. So if the graph is bipartite, then there are no odd-length cycles. Otherwise, there is at least one.\n\nWait, but the graph may consist of multiple components. So for each component, we need to check if it's bipartite. If any component is not bipartite, then the graph has an odd-length cycle. So the first step is to check if the graph is bipartite. If it's not, then t is 0, w is 1.\n\nSo the first part of the solution is to check if the graph is bipartite. If it's not, then output 0 1.\n\nBut if the graph is bipartite, then we need to find the minimal number of edges to add to create an odd-length cycle. How?\n\nLet me think. Since the graph is bipartite, all cycles are even-length. Adding edges can create odd-length cycles. What's the minimal way?\n\nIn a bipartite graph, any new edge added between two nodes in the same partition would create an odd-length cycle. Because suppose you have a bipartition (A, B). If you add an edge between two nodes in A, then there's a path from u to v through the existing bipartition (which is even length) plus the new edge, making the total length odd. So that would create an odd-length cycle.\n\nSo, for each connected component (which is bipartite), we can calculate the number of nodes in each partition. Let's say a component has partitions of size a and b. Then, the number of possible edges that can be added within the same partition is (a choose 2) + (b choose 2). However, adding any such edge would create an odd-length cycle. But since the graph is bipartite, adding any such edge would create exactly one odd cycle (assuming the component is connected). Wait, but if the component is connected and bipartite, then adding an edge between two nodes in the same partition would create exactly one cycle. And since the original path between those two nodes is of even length, adding the edge makes it odd.\n\nSo, the minimal t is 1. Because adding a single edge between two nodes in the same partition of a connected component would create an odd-length cycle.\n\nBut wait, what if the component is a tree? Then adding any edge between two nodes in the same partition would create a cycle. But for a tree, the bipartition is such that each node is in one of two partitions. So adding an edge between two nodes in the same partition would create a cycle of odd length. So for a tree, the minimal t is 1.\n\nSo, in the case when the entire graph is bipartite, then the minimal number of edges to add is 1. But how to compute the number of ways?\n\nWait, but the problem requires that the added edges form a cycle of odd length. So for each connected component, if we add an edge between two nodes in",
    "response": "```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef is_bipartite(graph, n):\n    color = [-1] * (n + 1)\n    for start in range(1, n + 1):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            while queue:\n                u = queue.popleft()\n                for v in graph[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    elif color[v] == color[u]:\n                        return False, None\n    return True, color\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(input[idx])\n        idx += 1\n        v = int(input[idx])\n        idx += 1\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    is_bipart, color = is_bipartite(graph, n)\n    if not is_bipart:\n        print(\"0 1\")\n        return\n    \n    # Count the number of ways to add one edge in each component\n    # For each component, count the number of nodes in each partition\n    components = defaultdict(list)\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            queue = deque()\n            queue.append(i)\n            visited[i] = True\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in graph[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        queue.append(v)\n            components[tuple(comp)].append(color[i])\n    \n    # For each component, calculate the number of possible edges within same partition\n    total_ways = 0\n    for comp_nodes in components.values():\n        a = 0\n        b = 0\n        for node in comp_nodes:\n            if node == 0:\n                a += 1\n            else:\n                b += 1\n        ways = (a * (a - 1) // 2) + (b * (b - 1) // 2)\n        total_ways += ways\n    \n    print(f\"1 {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\n\ndef is_bipartite(graph, n):\n    color = [-1] * (n + 1)\n    for start in range(1, n + 1):\n        if color[start] == -1:\n            queue = deque()\n            queue.append(start)\n            color[start] = 0\n            while queue:\n                u = queue.popleft()\n                for v in graph[u]:\n                    if color[v] == -1:\n                        color[v] = color[u] ^ 1\n                        queue.append(v)\n                    elif color[v] == color[u]:\n                        return False, None\n    return True, color\n\ndef main():\n    input = sys.stdin.read().split()\n    idx = 0\n    n = int(input[idx])\n    idx += 1\n    m = int(input[idx])\n    idx += 1\n    \n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(input[idx])\n        idx += 1\n        v = int(input[idx])\n        idx += 1\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    is_bipart, color = is_bipartite(graph, n)\n    if not is_bipart:\n        print(\"0 1\")\n        return\n    \n    # Count the number of ways to add one edge in each component\n    # For each component, count the number of nodes in each partition\n    components = defaultdict(list)\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            queue = deque()\n            queue.append(i)\n            visited[i] = True\n            comp = []\n            while queue:\n                u = queue.popleft()\n                comp.append(u)\n                for v in graph[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        queue.append(v)\n            components[tuple(comp)].append(color[i])\n    \n    # For each component, calculate the number of possible edges within same partition\n    total_ways = 0\n    for comp_nodes in components.values():\n        a = 0\n        b = 0\n        for node in comp_nodes:\n            if node == 0:\n                a += 1\n            else:\n                b += 1\n        ways = (a * (a - 1) // 2) + (b * (b - 1) // 2)\n        total_ways += ways\n    \n    print(f\"1 {total_ways}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 578,
        "completion_token_count": 555,
        "thoughts_token_count": 1024
    }
}