{
    "start": 1758338234.0129826,
    "end": 1758338306.2862108,
    "start-formatted": "2025-09-20 12:17 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    max_nm = 2 * 10**5 + 10\n    fact = [1] * (max_nm)\n    inv_fact = [1] * (max_nm)\n    \n    for i in range(1, max_nm):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact[max_nm - 1] = pow(fact[max_nm - 1], MOD - 2, MOD)\n    for i in range(max_nm - 2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n    \n    results = []\n    for line in data:\n        n_str, m_str, g_str = line.split()\n        n = int(n_str)\n        m = int(m_str)\n        g = int(g_str)\n        \n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n        \n        # We need to reduce the string to a single character using the allowed operations\n        # Each operation reduces the length by 1. So we need total - 1 operations.\n        # Each operation replaces two characters with one, and the result depends on the two characters.\n        # For the final character to be g, the number of 0s and 1s must satisfy certain parity conditions.\n        \n        # Let's denote the number of operations: k = total - 1\n        k = total - 1\n        \n        # The final character is determined by the parity of the number of 1s and 0s\n        # Because each operation reduces the string length by 1, and the final character depends on the parity of the count of 1s and 0s\n        # If we end up with a single character, then the number of 1s and 0s must have the same parity.\n        # Because each operation preserves the parity of the number of 1s and 0s.\n        \n        # Let's check the parity of the number of 1s and 0s\n        if (n % 2) != (m % 2):\n            results.append(0)\n            continue\n        \n        # Now, the final character must be g\n        # The number of 1s and 0s must have the same parity, and the final character is determined by that\n        # If the number of 1s is even, then the final character is 0 if the number of 1s is even and 0s is even\n        # But we need to match the final character to g\n        \n        # The number of ways to arrange the string is C(n + m, n)\n        res = comb(n + m, n, fact, inv_fact)\n        \n        # If the final character is not g, then it's invalid\n        # Check the parity again\n        if (n % 2) != (m % 2):\n            results.append(0)\n        else:\n            # The final character is determined by the parity of the number of 1s\n            # If number of 1s is even, final char is 0; if odd, final char is 1\n            if (m % 2) == g:\n                results.append(res)\n            else:\n                results.append(0)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    max_nm = 2 * 10**5 + 10\n    fact = [1] * (max_nm)\n    inv_fact = [1] * (max_nm)\n    \n    for i in range(1, max_nm):\n        fact[i] = fact[i-1] * i % MOD\n    \n    inv_fact[max_nm - 1] = pow(fact[max_nm - 1], MOD - 2, MOD)\n    for i in range(max_nm - 2, -1, -1):\n        inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n    \n    results = []\n    for line in data:\n        n_str, m_str, g_str = line.split()\n        n = int(n_str)\n        m = int(m_str)\n        g = int(g_str)\n        \n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n        \n        # We need to reduce the string to a single character using the allowed operations\n        # Each operation reduces the length by 1. So we need total - 1 operations.\n        # Each operation replaces two characters with one, and the result depends on the two characters.\n        # For the final character to be g, the number of 0s and 1s must satisfy certain parity conditions.\n        \n        # Let's denote the number of operations: k = total - 1\n        k = total - 1\n        \n        # The final character is determined by the parity of the number of 1s and 0s\n        # Because each operation reduces the string length by 1, and the final character depends on the parity of the count of 1s and 0s\n        # If we end up with a single character, then the number of 1s and 0s must have the same parity.\n        # Because each operation preserves the parity of the number of 1s and 0s.\n        \n        # Let's check the parity of the number of 1s and 0s\n        if (n % 2) != (m % 2):\n            results.append(0)\n            continue\n        \n        # Now, the final character must be g\n        # The number of 1s and 0s must have the same parity, and the final character is determined by that\n        # If the number of 1s is even, then the final character is 0 if the number of 1s is even and 0s is even\n        # But we need to match the final character to g\n        \n        # The number of ways to arrange the string is C(n + m, n)\n        res = comb(n + m, n, fact, inv_fact)\n        \n        # If the final character is not g, then it's invalid\n        # Check the parity again\n        if (n % 2) != (m % 2):\n            results.append(0)\n        else:\n            # The final character is determined by the parity of the number of 1s\n            # If number of 1s is even, final char is 0; if odd, final char is 1\n            if (m % 2) == g:\n                results.append(res)\n            else:\n                results.append(0)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 800,
        "thoughts_token_count": 0
    }
}