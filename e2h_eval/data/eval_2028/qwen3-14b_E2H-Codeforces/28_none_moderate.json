{
    "start": 1758338197.340381,
    "end": 1758338301.5276783,
    "start-formatted": "2025-09-20 12:16 KST",
    "end-formatted": "2025-09-20 12:18 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Precompute factorial and inverse factorial up to 2*1e5 + 1\n    max_n = 2 * 10**5 + 10\n    fact = [1] * (max_n)\n    for i in range(1, max_n):\n        fact[i] = fact[i-1] * i % MOD\n\n    inv_fact = [1] * (max_n)\n    inv_fact[max_n - 1] = pow(fact[max_n - 1], MOD - 2, MOD)\n    for i in range(max_n - 2, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    results = []\n    for line in data:\n        n, m, g = map(int, line.split())\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n\n        # We need to determine whether it's possible to reduce the string to 'g' via allowed operations\n        # Each operation reduces the length by 1, so we must be able to reduce from total to 1\n        # So total must be >= 1 and total - 1 must be even (since each operation reduces length by 1)\n        if (total - 1) % 2 != 0:\n            results.append(0)\n            continue\n\n        # Now, check if the final character can be 'g'\n        # Let's simulate the reduction process\n        # Let's count the number of 0s and 1s\n        # The key is to see if the final character after all reductions is 'g'\n\n        # We can model this as a DP problem where we track the number of 0s and 1s\n        # But since the number of operations is fixed (total - 1), and each operation reduces two characters to one,\n        # the parity of the number of 0s and 1s matters\n\n        # The key insight is that the final character depends on the parity of the number of 0s and 1s\n        # Let's simulate the process:\n        # Start with n 0s and m 1s\n        # While length > 1:\n        #   take last two characters\n        #   replace them with 0 if they are both 1, else 1\n        #   decrement length by 1\n\n        # But instead of simulating, we can use the following logic:\n        # If the number of 0s and 1s are both even or both odd, then the final character is determined by their sum mod 2\n        # But the actual process is more nuanced. Instead, let's use the following:\n        # The final character is determined by the parity of the number of 0s and 1s and the operations performed\n        # However, a better approach is to realize that the final character depends on the parity of the number of 0s and 1s\n\n        # The final character is:\n        # If the number of 0s and 1s are both even or both odd, then the final character is the same as the XOR of the counts\n        # Wait, no. Actually, the process is deterministic based on the number of 0s and 1s.\n        # Let's define a function f(a, b) that returns the final character when you start with a 0s and b 1s and perform the operations until length is 1\n\n        def final_char(a, b):\n            while a + b > 1:\n                if a >= 2:\n                    a -= 2\n                    a += 1\n                elif b >= 2:\n                    b -= 2\n                    b += 1\n                else:\n                    # Only one character left\n                    break\n            return '0' if a > 0 else '1'\n\n        target = final_char(n, m)\n        if target != str(g):\n            results.append(0)\n        else:\n            results.append(comb(n + m, n, fact, inv_fact))\n\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k, fact, inv_fact):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Precompute factorial and inverse factorial up to 2*1e5 + 1\n    max_n = 2 * 10**5 + 10\n    fact = [1] * (max_n)\n    for i in range(1, max_n):\n        fact[i] = fact[i-1] * i % MOD\n\n    inv_fact = [1] * (max_n)\n    inv_fact[max_n - 1] = pow(fact[max_n - 1], MOD - 2, MOD)\n    for i in range(max_n - 2, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    results = []\n    for line in data:\n        n, m, g = map(int, line.split())\n        total = n + m\n        if total == 0:\n            results.append(0)\n            continue\n\n        # We need to determine whether it's possible to reduce the string to 'g' via allowed operations\n        # Each operation reduces the length by 1, so we must be able to reduce from total to 1\n        # So total must be >= 1 and total - 1 must be even (since each operation reduces length by 1)\n        if (total - 1) % 2 != 0:\n            results.append(0)\n            continue\n\n        # Now, check if the final character can be 'g'\n        # Let's simulate the reduction process\n        # Let's count the number of 0s and 1s\n        # The key is to see if the final character after all reductions is 'g'\n\n        # We can model this as a DP problem where we track the number of 0s and 1s\n        # But since the number of operations is fixed (total - 1), and each operation reduces two characters to one,\n        # the parity of the number of 0s and 1s matters\n\n        # The key insight is that the final character depends on the parity of the number of 0s and 1s\n        # Let's simulate the process:\n        # Start with n 0s and m 1s\n        # While length > 1:\n        #   take last two characters\n        #   replace them with 0 if they are both 1, else 1\n        #   decrement length by 1\n\n        # But instead of simulating, we can use the following logic:\n        # If the number of 0s and 1s are both even or both odd, then the final character is determined by their sum mod 2\n        # But the actual process is more nuanced. Instead, let's use the following:\n        # The final character is determined by the parity of the number of 0s and 1s and the operations performed\n        # However, a better approach is to realize that the final character depends on the parity of the number of 0s and 1s\n\n        # The final character is:\n        # If the number of 0s and 1s are both even or both odd, then the final character is the same as the XOR of the counts\n        # Wait, no. Actually, the process is deterministic based on the number of 0s and 1s.\n        # Let's define a function f(a, b) that returns the final character when you start with a 0s and b 1s and perform the operations until length is 1\n\n        def final_char(a, b):\n            while a + b > 1:\n                if a >= 2:\n                    a -= 2\n                    a += 1\n                elif b >= 2:\n                    b -= 2\n                    b += 1\n                else:\n                    # Only one character left\n                    break\n            return '0' if a > 0 else '1'\n\n        target = final_char(n, m)\n        if target != str(g):\n            results.append(0)\n        else:\n            results.append(comb(n + m, n, fact, inv_fact))\n\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 550,
        "completion_token_count": 974,
        "thoughts_token_count": 0
    }
}