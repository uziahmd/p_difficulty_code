{
    "start": 1758284877.439574,
    "end": 1758284891.0742207,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Tackling the LCM Minimization Problem**\n\nAlright, I'm facing a competitive programming challenge. I need to craft a Python script to find a non-negative integer `k` that minimizes the least common multiple of `a+k` and `b+k`.  If there are ties, I'm supposed to pick the smallest `k`.\n\nMy first thought is to represent `a+k` as `x` and `b+k` as `y`.  The core of the problem is to minimize `lcm(x, y)`.  I know that `lcm(x, y)` is equivalent to `(x * y) / gcd(x, y)`.\n\nLet's introduce `g = gcd(x, y)`. Since `x = a+k` and `y = b+k`, I can see that `y - x` simplifies to `b - a`.  A key insight is that `g` has to be a divisor of the difference `y - x`, which is `b - a`.\n\nI'll call this difference `diff = abs(b - a)`.  There's a special case to consider: if `a` and `b` are equal, `diff` is zero. In this scenario, `gcd(a+k, b+k)` will always be `a+k`, and the `lcm` will also be `a+k`. To minimize this, the smallest `k` is simply 0, and the `lcm` is `a`.\n\nNow, if `a` and `b` are distinct (so `diff > 0`), the `gcd(a+k, b+k)` has to be a divisor of `diff`.  So I'll need to iterate through all the divisors of `diff`. For each divisor `g`, I'll need to find the smallest non-negative `k` such that `a+k` and `b+k` are both multiples of `g`.\n\nIf I have `g` as my divisor, then `a+k` must be a multiple of `g`, which means `a+k ≡ 0 (mod g)`. This simplifies to `k ≡ -a (mod g)`. I can find this value of k with `k = (g - (a % g)) % g`. This ensures a positive `k`. I'll need to verify that `b+k` is also a multiple of `g`. Since `b - a` is divisible by `g`, if `a+k` is, so too is `b+k`.\n\nMy strategy will be: iterate through all divisors of `diff`. For each `g`, calculate the smallest valid `k`, and then calculate the `lcm`. Track the `k` that gives me the minimum `lcm`. If there's a tie, choose the smaller `k`. Seems straightforward. Now, let's write the code!\n",
    "response": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n\n    if a == b:\n        print(0)\n        return\n\n    diff = abs(b - a)\n\n    min_lcm_val = float('inf')\n    best_k = 0\n\n    # Find all divisors of diff\n    divisors = set()\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors.add(i)\n            divisors.add(diff // i)\n\n    for g in sorted(list(divisors)):\n        # We need a+k to be a multiple of g.\n        # a+k = m * g  => k = m*g - a\n        # Smallest non-negative k:\n        # k = (-a) % g\n        # This is equivalent to (g - (a % g)) % g\n        \n        # Calculate k such that (a+k) is a multiple of g\n        # If a is already a multiple of g, k=0.\n        # Otherwise, k = g - (a % g).\n        current_k = (g - (a % g)) % g\n\n        val_a_plus_k = a + current_k\n        val_b_plus_k = b + current_k\n        \n        # Calculate lcm(val_a_plus_k, val_b_plus_k)\n        # We know gcd(val_a_plus_k, val_b_plus_k) must be g because:\n        # 1. Both are multiples of g by construction.\n        # 2. Their difference is diff, which is a multiple of g.\n        # 3. If gcd(val_a_plus_k, val_b_plus_k) was k*g for k>1,\n        #    then val_a_plus_k/g and val_b_plus_k/g would share a common factor.\n        #    But (val_a_plus_k/g) - (val_b_plus_k/g) = (a+k)/g - (b+k)/g = (a-b)/g = -diff/g.\n        #    If gcd(val_a_plus_k, val_b_plus_k) = G, then G must divide diff.\n        #    And G must be a multiple of g. So G = m*g.\n        #    lcm = (val_a_plus_k * val_b_plus_k) // G\n        #    We want to minimize this.\n        #\n        # Let's use the property that gcd(X, Y) divides Y-X.\n        # Here, X = a+k, Y = b+k. Y-X = b-a = diff.\n        # We chose k such that a+k is a multiple of g.\n        # Since g divides diff, b-a is a multiple of g.\n        # a+k = q1*g\n        # b+k = (a+diff)+k = (q1*g - k + diff) + k = q1*g + diff = q1*g + q_diff*g = (q1+q_diff)*g.\n        # So b+k is also a multiple of g.\n        # Let g_prime = math.gcd(val_a_plus_k, val_b_plus_k).\n        # We know g_prime must be a multiple of g.\n        # The LCM is (val_a_plus_k // g_prime) * val_b_plus_k.\n        \n        current_gcd = math.gcd(val_a_plus_k, val_b_plus_k)\n        current_lcm = (val_a_plus_k // current_gcd) * val_b_plus_k\n\n        if current_lcm < min_lcm_val:\n            min_lcm_val = current_lcm\n            best_k = current_k\n        elif current_lcm == min_lcm_val:\n            # If LCMs are equal, choose the smallest k\n            best_k = min(best_k, current_k)\n\n    print(best_k)\n\n# Call the solve function\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    a, b = map(int, input().split())\n\n    if a == b:\n        print(0)\n        return\n\n    diff = abs(b - a)\n\n    min_lcm_val = float('inf')\n    best_k = 0\n\n    # Find all divisors of diff\n    divisors = set()\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors.add(i)\n            divisors.add(diff // i)\n\n    for g in sorted(list(divisors)):\n        # We need a+k to be a multiple of g.\n        # a+k = m * g  => k = m*g - a\n        # Smallest non-negative k:\n        # k = (-a) % g\n        # This is equivalent to (g - (a % g)) % g\n        \n        # Calculate k such that (a+k) is a multiple of g\n        # If a is already a multiple of g, k=0.\n        # Otherwise, k = g - (a % g).\n        current_k = (g - (a % g)) % g\n\n        val_a_plus_k = a + current_k\n        val_b_plus_k = b + current_k\n        \n        # Calculate lcm(val_a_plus_k, val_b_plus_k)\n        # We know gcd(val_a_plus_k, val_b_plus_k) must be g because:\n        # 1. Both are multiples of g by construction.\n        # 2. Their difference is diff, which is a multiple of g.\n        # 3. If gcd(val_a_plus_k, val_b_plus_k) was k*g for k>1,\n        #    then val_a_plus_k/g and val_b_plus_k/g would share a common factor.\n        #    But (val_a_plus_k/g) - (val_b_plus_k/g) = (a+k)/g - (b+k)/g = (a-b)/g = -diff/g.\n        #    If gcd(val_a_plus_k, val_b_plus_k) = G, then G must divide diff.\n        #    And G must be a multiple of g. So G = m*g.\n        #    lcm = (val_a_plus_k * val_b_plus_k) // G\n        #    We want to minimize this.\n        #\n        # Let's use the property that gcd(X, Y) divides Y-X.\n        # Here, X = a+k, Y = b+k. Y-X = b-a = diff.\n        # We chose k such that a+k is a multiple of g.\n        # Since g divides diff, b-a is a multiple of g.\n        # a+k = q1*g\n        # b+k = (a+diff)+k = (q1*g - k + diff) + k = q1*g + diff = q1*g + q_diff*g = (q1+q_diff)*g.\n        # So b+k is also a multiple of g.\n        # Let g_prime = math.gcd(val_a_plus_k, val_b_plus_k).\n        # We know g_prime must be a multiple of g.\n        # The LCM is (val_a_plus_k // g_prime) * val_b_plus_k.\n        \n        current_gcd = math.gcd(val_a_plus_k, val_b_plus_k)\n        current_lcm = (val_a_plus_k // current_gcd) * val_b_plus_k\n\n        if current_lcm < min_lcm_val:\n            min_lcm_val = current_lcm\n            best_k = current_k\n        elif current_lcm == min_lcm_val:\n            # If LCMs are equal, choose the smallest k\n            best_k = min(best_k, current_k)\n\n    print(best_k)\n\n# Call the solve function\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 412,
        "completion_token_count": 997,
        "thoughts_token_count": 825
    }
}