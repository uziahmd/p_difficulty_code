{
    "start": 1758284846.8297813,
    "end": 1758284855.6165464,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Problem Decomposition for \"Marks\" Problem**\n\nOkay, so I'm looking at this \"Marks\" problem, and my immediate thought is \"Python script, let's go!\". The core challenge here is straightforward: figure out which students are \"successful\" based on their marks in various subjects. I need to count how many students have at least one subject where they achieved the highest mark.\n\nFirst, I need to understand the input format. It seems I'll be given the number of students (`n`) and subjects (`m`), followed by `n` lines, each representing a student's marks across the `m` subjects.  Each mark is a single digit between '1' and '9'.\n\nLet's break this down further. To determine \"success\", I need to find the \"best\" students for *each* subject. A student is \"best\" if they have the *maximum* mark for that subject, meaning no other student scored higher.\n\nThe example provided is helpful. Let's trace through it. First, I would go column by column, finding the maximum mark in each. Then, I need to check which students achieved that maximum mark within each column.  If a student achieves the maximum in *any* column, they're considered \"successful\".  The output, in the end, needs to be the total count of these successful students.\n\nSo, here's my plan for the script. First, I have to read the input. I'll read `n` and `m`, then store the marks in a data structure, likely a list of strings, called `gradebook`.  Next, I'll need to iterate through each subject (column) and find the maximum mark for that subject. Finally, I will identify which students have achieved that maximum mark within that column. This should give me a list, for each student, of the subjects they are the 'best' at. I will then count the successful students and output the final value.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # This set will store the indices of successful students\n    # Using a set automatically handles duplicates and gives unique successful students\n    successful_students_indices = set()\n\n    # Iterate through each subject (column)\n    for j in range(m):\n        max_mark_in_subject = '0' # Marks are '1' through '9', so '0' is a safe initial minimum\n\n        # Find the maximum mark for the current subject\n        for i in range(n):\n            if gradebook[i][j] > max_mark_in_subject:\n                max_mark_in_subject = gradebook[i][j]\n        \n        # Identify all students who achieved this maximum mark for the current subject\n        # and add their indices to the set of successful students\n        for i in range(n):\n            if gradebook[i][j] == max_mark_in_subject:\n                successful_students_indices.add(i)\n                \n    # The number of successful students is the size of the set\n    print(len(successful_students_indices))\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # This set will store the indices of successful students\n    # Using a set automatically handles duplicates and gives unique successful students\n    successful_students_indices = set()\n\n    # Iterate through each subject (column)\n    for j in range(m):\n        max_mark_in_subject = '0' # Marks are '1' through '9', so '0' is a safe initial minimum\n\n        # Find the maximum mark for the current subject\n        for i in range(n):\n            if gradebook[i][j] > max_mark_in_subject:\n                max_mark_in_subject = gradebook[i][j]\n        \n        # Identify all students who achieved this maximum mark for the current subject\n        # and add their indices to the set of successful students\n        for i in range(n):\n            if gradebook[i][j] == max_mark_in_subject:\n                successful_students_indices.add(i)\n                \n    # The number of successful students is the size of the set\n    print(len(successful_students_indices))\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 458,
        "completion_token_count": 313,
        "thoughts_token_count": 819
    }
}