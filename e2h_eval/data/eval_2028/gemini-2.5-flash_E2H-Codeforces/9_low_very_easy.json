{
    "start": 1758009616.2420313,
    "end": 1758009639.1737063,
    "start-formatted": "2025-09-16 17:00 KST",
    "end-formatted": "2025-09-16 17:00 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "**Knapsack with a Twist: My Strategy for Selling Souvenirs**\n\nAlright, so I'm tackling this \"Selling Souvenirs\" problem, which screams a knapsack variation. I see `n` souvenirs, a weight limit `m`, and each souvenir has a weight `wi` and a cost `ci`. Classic optimization problem – maximize the cost while staying under the weight limit. The twist here? Those weights are super small: 1, 2, or 3. That's the key to making this tractable.\n\nMy initial thought was the standard dynamic programming knapsack approach. Create a `dp` array where `dp[w]` stores the maximum cost for a weight `w`. Iterate through the souvenirs, updating `dp[j]` with the maximum of its current value and `dp[j - wi] + ci`. The problem? `n` and `m` are large, resulting in an `O(n * m)` complexity. At `3 * 10^{10}`, that's not going to fly.\n\nThe tiny weights are the saving grace! I'm thinking of categorizing souvenirs by their weights. I'll have `items1`, `items2`, and `items3` lists, storing costs for weights 1, 2, and 3, respectively, all sorted in descending order of cost. Since it's always optimal to take the most expensive ones first, sorting seems like the right move.\n\nSo, the game is to pick `k1` from `items1`, `k2` from `items2`, and `k3` from `items3` such that `k1 + 2*k2 + 3*k3 <= m`. The goal is to maximize the sum of costs for those selected items. A pure greedy approach felt risky because of the integer weights. Picking by cost-per-weight ratio can lead to suboptimal choices.\n\nNow, a combined approach is brewing. If I start by selecting `k3` items of weight 3, that uses up `3 * k3` weight units. That leaves me `m - 3 * k3` to fill using weights 1 and 2. This kind of suggests I could iterate through possible values of `k3`, and for each `k3`, figure out how to best fill the remaining capacity with items of weights 1 and 2. A DP approach on the 1s and 2s after determining `k3` feels like a promising path to investigate. Maybe a meet-in-the-middle kind of strategy with the weights of 1 and 2 might make sense too? I will think about that.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    # Store costs for each weight category\n    items1 = []\n    items2 = []\n    items3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items1.append(c)\n        elif w == 2:\n            items2.append(c)\n        else: # w == 3\n            items3.append(c)\n\n    # Sort items by cost in descending order for each category\n    items1.sort(reverse=True)\n    items2.sort(reverse=True)\n    items3.sort(reverse=True)\n\n    # Calculate prefix sums for each category to quickly get sum of top k items\n    # P_1[k] = sum of costs of top k items of weight 1\n    # P_2[k] = sum of costs of top k items of weight 2\n    # P_3[k] = sum of costs of top k items of weight 3\n    P1 = [0] * (len(items1) + 1)\n    for i in range(len(items1)):\n        P1[i+1] = P1[i] + items1[i]\n\n    P2 = [0] * (len(items2) + 1)\n    for i in range(len(items2)):\n        P2[i+1] = P2[i] + items2[i]\n\n    P3 = [0] * (len(items3) + 1)\n    for i in range(len(items3)):\n        P3[i+1] = P3[i] + items3[i]\n\n    max_total_cost = 0\n\n    # Iterate through all possible counts of items of weight 3\n    # k3 is the number of items of weight 3\n    for k3 in range(len(P3)):\n        current_weight_3 = k3 * 3\n        if current_weight_3 > m:\n            break # Cannot pick k3 items of weight 3, too heavy\n\n        current_cost_3 = P3[k3]\n        remaining_capacity = m - current_weight_3\n\n        # Now we need to fill the remaining_capacity with items of weight 1 and 2\n        # This is a 0/1 knapsack for two item types.\n        # Iterate through all possible counts of items of weight 2\n        # k2 is the number of items of weight 2\n        for k2 in range(len(P2)):\n            current_weight_2 = k2 * 2\n            if current_weight_2 > remaining_capacity:\n                break # Cannot pick k2 items of weight 2, too heavy\n\n            current_cost_2 = P2[k2]\n            remaining_capacity_for_1 = remaining_capacity - current_weight_2\n\n            # All remaining capacity must be filled with items of weight 1\n            # We can pick at most remaining_capacity_for_1 items of weight 1\n            # And at most len(P1)-1 items of weight 1\n            k1 = min(remaining_capacity_for_1, len(P1) - 1)\n            current_cost_1 = P1[k1]\n\n            total_cost = current_cost_3 + current_cost_2 + current_cost_1\n            max_total_cost = max(max_total_cost, total_cost)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    # Store costs for each weight category\n    items1 = []\n    items2 = []\n    items3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            items1.append(c)\n        elif w == 2:\n            items2.append(c)\n        else: # w == 3\n            items3.append(c)\n\n    # Sort items by cost in descending order for each category\n    items1.sort(reverse=True)\n    items2.sort(reverse=True)\n    items3.sort(reverse=True)\n\n    # Calculate prefix sums for each category to quickly get sum of top k items\n    # P_1[k] = sum of costs of top k items of weight 1\n    # P_2[k] = sum of costs of top k items of weight 2\n    # P_3[k] = sum of costs of top k items of weight 3\n    P1 = [0] * (len(items1) + 1)\n    for i in range(len(items1)):\n        P1[i+1] = P1[i] + items1[i]\n\n    P2 = [0] * (len(items2) + 1)\n    for i in range(len(items2)):\n        P2[i+1] = P2[i] + items2[i]\n\n    P3 = [0] * (len(items3) + 1)\n    for i in range(len(items3)):\n        P3[i+1] = P3[i] + items3[i]\n\n    max_total_cost = 0\n\n    # Iterate through all possible counts of items of weight 3\n    # k3 is the number of items of weight 3\n    for k3 in range(len(P3)):\n        current_weight_3 = k3 * 3\n        if current_weight_3 > m:\n            break # Cannot pick k3 items of weight 3, too heavy\n\n        current_cost_3 = P3[k3]\n        remaining_capacity = m - current_weight_3\n\n        # Now we need to fill the remaining_capacity with items of weight 1 and 2\n        # This is a 0/1 knapsack for two item types.\n        # Iterate through all possible counts of items of weight 2\n        # k2 is the number of items of weight 2\n        for k2 in range(len(P2)):\n            current_weight_2 = k2 * 2\n            if current_weight_2 > remaining_capacity:\n                break # Cannot pick k2 items of weight 2, too heavy\n\n            current_cost_2 = P2[k2]\n            remaining_capacity_for_1 = remaining_capacity - current_weight_2\n\n            # All remaining capacity must be filled with items of weight 1\n            # We can pick at most remaining_capacity_for_1 items of weight 1\n            # And at most len(P1)-1 items of weight 1\n            k1 = min(remaining_capacity_for_1, len(P1) - 1)\n            current_cost_1 = P1[k1]\n\n            total_cost = current_cost_3 + current_cost_2 + current_cost_1\n            max_total_cost = max(max_total_cost, total_cost)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 497,
        "completion_token_count": 845,
        "thoughts_token_count": 760
    }
}