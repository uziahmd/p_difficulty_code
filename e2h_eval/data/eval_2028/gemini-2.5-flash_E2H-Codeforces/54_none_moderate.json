{
    "start": 1758293704.5317688,
    "end": 1758293717.466625,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 to be vertex 2 (arbitrary choice, we can rotate the polygon)\n    v2 = 2\n\n    # Iterate through possible v1 (from 3 to n)\n    # v1 must be different from v2\n    # v3 must be different from v1 and v2\n    # The number of vertices between v1 and v2 (excluding v1 and v2) is k-1\n    # The number of vertices between v2 and v3 (excluding v2 and v3) is j-1\n    # The total number of vertices between v1 and v3 (passing through v2) is (k-1) + (j-1) + 1 = k+j-1\n    # This is equivalent to choosing v1 and v3 such that they are (i) steps away from v2.\n    # The angle formed by three vertices v1, v2, v3 in a regular n-gon\n    # where v1 and v3 are i and j steps away from v2 respectively\n    # (i.e., v1 is vertex (v2-i) and v3 is vertex (v2+j) or similar relative positions)\n    # is given by (k * 180 / n) where k is the number of vertices on the arc between v1 and v3\n    # that does not contain v2.\n    # More simply, if v2 is the apex, and v1, v3 are on the base,\n    # the angle v1-v2-v3 is (k * 180 / n), where k is the number of edges\n    # between v1 and v3 along the perimeter, *not passing through v2*.\n    # In a regular n-gon, all vertices lie on a circumcircle.\n    # The angle subtended by an arc at the circumference is half the angle subtended at the center.\n    # The angle between two adjacent vertices from the center is 360/n.\n    # The angle v1-v2-v3 is subtended by the arc v1-v3 (not containing v2).\n    # If there are 'k' edges between v1 and v3 along this arc, the central angle is k * (360/n).\n    # The inscribed angle is half of this: (k * 360/n) / 2 = k * 180 / n.\n    # Here, k is the number of edges on the arc (v1, v3) that doesn't contain v2.\n    # Since we fix v2 as vertex 2, v1 and v3 must be on opposite sides of v2.\n    # Let's fix v2 = 2.\n    # v1 can be 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges between v1 (vertex 1) and v3 (vertex j) (not containing v2=2)\n    # is (j - 1) - 1 = j - 2.\n    # So k = j - 2.\n    # The angle is (j - 2) * 180 / n.\n    # We iterate j from 3 to n.\n    # So k ranges from 1 to n-2.\n\n    v2 = 2\n    v1 = 1 # Fix v1 to be 1\n\n    for k in range(1, n - 1): # k is the number of edges between v1 and v3 (not containing v2)\n        # v3 is k steps away from v1 (clockwise, not passing v2)\n        # v1 is 1, v2 is 2.\n        # If k=1, v3=3. Angle is (1 * 180 / n).\n        # If k=2, v3=4. Angle is (2 * 180 / n).\n        # ...\n        # If k=n-2, v3=n. Angle is ((n-2) * 180 / n).\n        \n        current_angle = k * 180 / n\n        \n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            # v1 is 1, v2 is 2, v3 is 2 + k.\n            # But the problem statement says vertices are 1 to n.\n            # If v1=1, v2=2, then v3 is (2+k).\n            # If k=1, v3=3. (1, 2, 3)\n            # If k=n-2, v3=n. (1, 2, n)\n            best_v1, best_v2, best_v3 = 1, 2, 2 + k\n        elif diff == min_diff:\n            # If multiple optimal solutions, any is fine.\n            # We already found one, so we can stick with it or update.\n            # For simplicity, we just keep the first one found.\n            pass\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 to be vertex 2 (arbitrary choice, we can rotate the polygon)\n    v2 = 2\n\n    # Iterate through possible v1 (from 3 to n)\n    # v1 must be different from v2\n    # v3 must be different from v1 and v2\n    # The number of vertices between v1 and v2 (excluding v1 and v2) is k-1\n    # The number of vertices between v2 and v3 (excluding v2 and v3) is j-1\n    # The total number of vertices between v1 and v3 (passing through v2) is (k-1) + (j-1) + 1 = k+j-1\n    # This is equivalent to choosing v1 and v3 such that they are (i) steps away from v2.\n    # The angle formed by three vertices v1, v2, v3 in a regular n-gon\n    # where v1 and v3 are i and j steps away from v2 respectively\n    # (i.e., v1 is vertex (v2-i) and v3 is vertex (v2+j) or similar relative positions)\n    # is given by (k * 180 / n) where k is the number of vertices on the arc between v1 and v3\n    # that does not contain v2.\n    # More simply, if v2 is the apex, and v1, v3 are on the base,\n    # the angle v1-v2-v3 is (k * 180 / n), where k is the number of edges\n    # between v1 and v3 along the perimeter, *not passing through v2*.\n    # In a regular n-gon, all vertices lie on a circumcircle.\n    # The angle subtended by an arc at the circumference is half the angle subtended at the center.\n    # The angle between two adjacent vertices from the center is 360/n.\n    # The angle v1-v2-v3 is subtended by the arc v1-v3 (not containing v2).\n    # If there are 'k' edges between v1 and v3 along this arc, the central angle is k * (360/n).\n    # The inscribed angle is half of this: (k * 360/n) / 2 = k * 180 / n.\n    # Here, k is the number of edges on the arc (v1, v3) that doesn't contain v2.\n    # Since we fix v2 as vertex 2, v1 and v3 must be on opposite sides of v2.\n    # Let's fix v2 = 2.\n    # v1 can be 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges between v1 (vertex 1) and v3 (vertex j) (not containing v2=2)\n    # is (j - 1) - 1 = j - 2.\n    # So k = j - 2.\n    # The angle is (j - 2) * 180 / n.\n    # We iterate j from 3 to n.\n    # So k ranges from 1 to n-2.\n\n    v2 = 2\n    v1 = 1 # Fix v1 to be 1\n\n    for k in range(1, n - 1): # k is the number of edges between v1 and v3 (not containing v2)\n        # v3 is k steps away from v1 (clockwise, not passing v2)\n        # v1 is 1, v2 is 2.\n        # If k=1, v3=3. Angle is (1 * 180 / n).\n        # If k=2, v3=4. Angle is (2 * 180 / n).\n        # ...\n        # If k=n-2, v3=n. Angle is ((n-2) * 180 / n).\n        \n        current_angle = k * 180 / n\n        \n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            # v1 is 1, v2 is 2, v3 is 2 + k.\n            # But the problem statement says vertices are 1 to n.\n            # If v1=1, v2=2, then v3 is (2+k).\n            # If k=1, v3=3. (1, 2, 3)\n            # If k=n-2, v3=n. (1, 2, n)\n            best_v1, best_v2, best_v3 = 1, 2, 2 + k\n        elif diff == min_diff:\n            # If multiple optimal solutions, any is fine.\n            # We already found one, so we can stick with it or update.\n            # For simplicity, we just keep the first one found.\n            pass\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 1225,
        "thoughts_token_count": 0
    }
}