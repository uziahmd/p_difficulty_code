{
    "start": 1758009627.8047674,
    "end": 1758009648.3836234,
    "start-formatted": "2025-09-16 17:00 KST",
    "end-formatted": "2025-09-16 17:00 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Tackling the Souvenir Sales Problem**\n\nOkay, so I'm looking at this \"Selling Souvenirs\" problem, and my first thought is, this is a classic knapsack scenario, right? Maximize value, limited weight, seems straightforward.  But the big numbers have me a little worried. I need a Python script to solve this efficiently.\n\nI've got `n` souvenirs, each with a weight (`wi`) and a cost (`ci`), and a maximum weight capacity `m`. The goal is to maximize the total cost without exceeding the weight limit. Standard knapsack, right? Well, let's look closer.\n\nThe crucial detail jumps out: the weights (`wi`) are *small*. They're only 1, 2, or 3. This changes everything! If the weights were arbitrary, I'd be looking at dynamic programming – maybe an O(n*m) solution. But with these small weights, I can avoid that. `n` is large (up to 100,000) and `m` is also kind of big (up to 300,000). A straight DP approach is too slow, too many operations. I need a smarter strategy.\n\nI'm thinking I can categorize the souvenirs by weight. I'll create three lists: `costs_w1`, `costs_w2`, and `costs_w3`, storing the costs of items with weights 1, 2, and 3, respectively.  A good starting point would be to sort each of these lists in descending order of cost, so I can always greedily choose the most valuable items first.\n\nNow the problem is simplified to picking some number of items from each list. Let's say I choose `k1` items of weight 1, `k2` items of weight 2, and `k3` items of weight 3. My total weight becomes `1 * k1 + 2 * k2 + 3 * k3`, which needs to be less than or equal to `m`. My total cost is the sum of the top `k1` costs from `costs_w1`, the top `k2` from `costs_w2`, and the top `k3` from `costs_w3`.\n\nThe next challenge: how do I efficiently find the optimal `k1`, `k2`, and `k3`?  I can't brute-force every combination, the numbers are too big. I'm going to precompute prefix sums: for each weight category, I'll calculate the cumulative sum of the most expensive items. `prefix_sum_w1[k]` will be the total cost of the `k` most expensive items of weight 1. The same for weight 2. This will let me quickly calculate the total cost for any combination of `k1`, `k2`, `k3`. The maximum number of each item I can have is determined by `m`, for instance, max `k1` is `m`, max `k2` is `m/2`.\n\nSo, I think the Python script will go something like this: Categorize and sort the souvenirs. Calculate prefix sums. Then, I'll need a way to efficiently iterate through combinations of `k1`, `k2`, and `k3` that satisfy the weight constraint and find the combination that gives the maximum total cost.  I can probably optimize that iteration. This should be much faster than standard knapsack.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    # Store costs for each weight category\n    costs_w1 = []\n    costs_w2 = []\n    costs_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            costs_w1.append(c)\n        elif w == 2:\n            costs_w2.append(c)\n        else: # w == 3\n            costs_w3.append(c)\n\n    # Sort costs in descending order to pick most expensive first\n    costs_w1.sort(reverse=True)\n    costs_w2.sort(reverse=True)\n    costs_w3.sort(reverse=True)\n\n    # Precompute prefix sums for each category\n    # prefix_sum_wx[k] stores the sum of the k most expensive items of weight x\n    prefix_sum_w1 = [0] * (len(costs_w1) + 1)\n    for i in range(len(costs_w1)):\n        prefix_sum_w1[i+1] = prefix_sum_w1[i] + costs_w1[i]\n\n    prefix_sum_w2 = [0] * (len(costs_w2) + 1)\n    for i in range(len(costs_w2)):\n        prefix_sum_w2[i+1] = prefix_sum_w2[i] + costs_w2[i]\n\n    prefix_sum_w3 = [0] * (len(costs_w3) + 1)\n    for i in range(len(costs_w3)):\n        prefix_sum_w3[i+1] = prefix_sum_w3[i] + costs_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate through all possible counts of items with weight 3\n    # k3 is the number of items of weight 3\n    for k3 in range(len(costs_w3) + 1):\n        weight_used_w3 = k3 * 3\n        cost_w3 = prefix_sum_w3[k3]\n\n        if weight_used_w3 > m:\n            break # Cannot take k3 items of weight 3, too heavy\n\n        remaining_weight = m - weight_used_w3\n\n        # Iterate through all possible counts of items with weight 2\n        # k2 is the number of items of weight 2\n        for k2 in range(len(costs_w2) + 1):\n            weight_used_w2 = k2 * 2\n            cost_w2 = prefix_sum_w2[k2]\n\n            if weight_used_w2 > remaining_weight:\n                break # Cannot take k2 items of weight 2, too heavy\n\n            current_weight_for_w1 = remaining_weight - weight_used_w2\n\n            # All remaining weight can be filled with items of weight 1\n            # k1 is the number of items of weight 1\n            k1 = min(current_weight_for_w1, len(costs_w1))\n            cost_w1 = prefix_sum_w1[k1]\n\n            current_total_cost = cost_w1 + cost_w2 + cost_w3\n            max_total_cost = max(max_total_cost, current_total_cost)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    # Store costs for each weight category\n    costs_w1 = []\n    costs_w2 = []\n    costs_w3 = []\n\n    for _ in range(n):\n        w, c = map(int, sys.stdin.readline().split())\n        if w == 1:\n            costs_w1.append(c)\n        elif w == 2:\n            costs_w2.append(c)\n        else: # w == 3\n            costs_w3.append(c)\n\n    # Sort costs in descending order to pick most expensive first\n    costs_w1.sort(reverse=True)\n    costs_w2.sort(reverse=True)\n    costs_w3.sort(reverse=True)\n\n    # Precompute prefix sums for each category\n    # prefix_sum_wx[k] stores the sum of the k most expensive items of weight x\n    prefix_sum_w1 = [0] * (len(costs_w1) + 1)\n    for i in range(len(costs_w1)):\n        prefix_sum_w1[i+1] = prefix_sum_w1[i] + costs_w1[i]\n\n    prefix_sum_w2 = [0] * (len(costs_w2) + 1)\n    for i in range(len(costs_w2)):\n        prefix_sum_w2[i+1] = prefix_sum_w2[i] + costs_w2[i]\n\n    prefix_sum_w3 = [0] * (len(costs_w3) + 1)\n    for i in range(len(costs_w3)):\n        prefix_sum_w3[i+1] = prefix_sum_w3[i] + costs_w3[i]\n\n    max_total_cost = 0\n\n    # Iterate through all possible counts of items with weight 3\n    # k3 is the number of items of weight 3\n    for k3 in range(len(costs_w3) + 1):\n        weight_used_w3 = k3 * 3\n        cost_w3 = prefix_sum_w3[k3]\n\n        if weight_used_w3 > m:\n            break # Cannot take k3 items of weight 3, too heavy\n\n        remaining_weight = m - weight_used_w3\n\n        # Iterate through all possible counts of items with weight 2\n        # k2 is the number of items of weight 2\n        for k2 in range(len(costs_w2) + 1):\n            weight_used_w2 = k2 * 2\n            cost_w2 = prefix_sum_w2[k2]\n\n            if weight_used_w2 > remaining_weight:\n                break # Cannot take k2 items of weight 2, too heavy\n\n            current_weight_for_w1 = remaining_weight - weight_used_w2\n\n            # All remaining weight can be filled with items of weight 1\n            # k1 is the number of items of weight 1\n            k1 = min(current_weight_for_w1, len(costs_w1))\n            cost_w1 = prefix_sum_w1[k1]\n\n            current_total_cost = cost_w1 + cost_w2 + cost_w3\n            max_total_cost = max(max_total_cost, current_total_cost)\n\n    sys.stdout.write(str(max_total_cost) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 496,
        "completion_token_count": 837,
        "thoughts_token_count": 810
    }
}