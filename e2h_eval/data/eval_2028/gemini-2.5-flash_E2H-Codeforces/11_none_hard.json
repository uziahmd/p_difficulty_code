{
    "start": 1758011283.3799565,
    "end": 1758011294.2206135,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    line = input().split()\n    n, k, l, c, d, p, nl, np = map(int, line)\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate total grams of salt available\n    total_salt_grams = p\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = total_salt_grams // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these\n    # three resources, divided by the number of friends.\n    # However, the problem statement \"provided they all drink the same amount\"\n    # and \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt\"\n    # implies that the total resources needed for one \"round\" of toasts (where each of the n friends makes one toast)\n    # are n * nl ml of drink, n slices of lime, and n * np grams of salt.\n    # So, we calculate the total number of \"rounds\" of toasts that can be made.\n    # The number of toasts each friend can make is simply the number of such \"rounds\".\n\n    # Recalculate based on the interpretation that each friend makes 'X' toasts,\n    # so for 'X' toasts, each friend needs X * nl drink, X slices lime, X * np salt.\n    # And since there are 'n' friends, total for X toasts for all friends is:\n    # n * X * nl drink, n * X slices lime, n * X * np salt.\n\n    # Let's re-read the example explanation:\n    # \"Overall the friends have 4*5=20 milliliters of the drink, it is enough to make 20/3=6 toasts.\"\n    # Here, 3 is 'nl' (milliliters per friend per toast). So 20 / nl = 20 / 3 = 6 toasts total.\n    # \"The limes are enough for 10*8=80 toasts\"\n    # Here, 'd' (slices per lime) is 8. So 10 * 8 = 80 slices total. Each friend needs 1 slice.\n    # So 80 / 1 = 80 toasts total.\n    # \"and the salt is enough for 100/1=100 toasts.\"\n    # Here, 'np' (grams per friend per toast) is 1. So 100 / 1 = 100 toasts total.\n    # \"However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n    # This explanation clarifies it. We calculate the total number of toasts that can be made\n    # based on each resource individually, and then take the minimum of these totals.\n    # Finally, we divide this minimum total by the number of friends 'n' to find how many toasts\n    # *each* friend can make.\n\n    # Total toasts possible based on drink:\n    # Total drink available: k * l\n    # Drink needed per toast per friend: nl\n    # Total toasts possible from drink: (k * l) // nl\n    toasts_from_drink = (k * l) // nl\n\n    # Total toasts possible based on lime:\n    # Total lime slices available: c * d\n    # Lime slices needed per toast per friend: 1 (implicit from problem statement \"a slice of lime\")\n    # Total toasts possible from lime: (c * d) // 1\n    toasts_from_lime = c * d\n\n    # Total toasts possible based on salt:\n    # Total salt available: p\n    # Salt needed per toast per friend: np\n    # Total toasts possible from salt: p // np\n    toasts_from_salt = p // np\n\n    # Find the minimum number of total toasts possible across all resources\n    min_total_toasts = min(toasts_from_drink, toasts_from_lime, toasts_from_salt)\n\n    # Each friend makes an equal share of these toasts\n    result = min_total_toasts // n\n\n    print(result)\n\nif __name__ == '__main__':\n    solve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    line = input().split()\n    n, k, l, c, d, p, nl, np = map(int, line)\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate total grams of salt available\n    total_salt_grams = p\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = total_salt_grams // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these\n    # three resources, divided by the number of friends.\n    # However, the problem statement \"provided they all drink the same amount\"\n    # and \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt\"\n    # implies that the total resources needed for one \"round\" of toasts (where each of the n friends makes one toast)\n    # are n * nl ml of drink, n slices of lime, and n * np grams of salt.\n    # So, we calculate the total number of \"rounds\" of toasts that can be made.\n    # The number of toasts each friend can make is simply the number of such \"rounds\".\n\n    # Recalculate based on the interpretation that each friend makes 'X' toasts,\n    # so for 'X' toasts, each friend needs X * nl drink, X slices lime, X * np salt.\n    # And since there are 'n' friends, total for X toasts for all friends is:\n    # n * X * nl drink, n * X slices lime, n * X * np salt.\n\n    # Let's re-read the example explanation:\n    # \"Overall the friends have 4*5=20 milliliters of the drink, it is enough to make 20/3=6 toasts.\"\n    # Here, 3 is 'nl' (milliliters per friend per toast). So 20 / nl = 20 / 3 = 6 toasts total.\n    # \"The limes are enough for 10*8=80 toasts\"\n    # Here, 'd' (slices per lime) is 8. So 10 * 8 = 80 slices total. Each friend needs 1 slice.\n    # So 80 / 1 = 80 toasts total.\n    # \"and the salt is enough for 100/1=100 toasts.\"\n    # Here, 'np' (grams per friend per toast) is 1. So 100 / 1 = 100 toasts total.\n    # \"However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\"\n    # This explanation clarifies it. We calculate the total number of toasts that can be made\n    # based on each resource individually, and then take the minimum of these totals.\n    # Finally, we divide this minimum total by the number of friends 'n' to find how many toasts\n    # *each* friend can make.\n\n    # Total toasts possible based on drink:\n    # Total drink available: k * l\n    # Drink needed per toast per friend: nl\n    # Total toasts possible from drink: (k * l) // nl\n    toasts_from_drink = (k * l) // nl\n\n    # Total toasts possible based on lime:\n    # Total lime slices available: c * d\n    # Lime slices needed per toast per friend: 1 (implicit from problem statement \"a slice of lime\")\n    # Total toasts possible from lime: (c * d) // 1\n    toasts_from_lime = c * d\n\n    # Total toasts possible based on salt:\n    # Total salt available: p\n    # Salt needed per toast per friend: np\n    # Total toasts possible from salt: p // np\n    toasts_from_salt = p // np\n\n    # Find the minimum number of total toasts possible across all resources\n    min_total_toasts = min(toasts_from_drink, toasts_from_lime, toasts_from_salt)\n\n    # Each friend makes an equal share of these toasts\n    result = min_total_toasts // n\n\n    print(result)\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 547,
        "completion_token_count": 1051,
        "thoughts_token_count": 0
    }
}