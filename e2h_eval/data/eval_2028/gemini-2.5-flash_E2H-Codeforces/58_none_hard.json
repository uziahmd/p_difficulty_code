{
    "start": 1758293761.0689354,
    "end": 1758293808.3966477,
    "start-formatted": "2025-09-19 23:56 KST",
    "end-formatted": "2025-09-19 23:56 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n + 1)]\n    edges_set = set()\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        edges_set.add(tuple(sorted((u, v))))\n\n    # Check for existing odd cycle (t=0)\n    # Use BFS for 2-coloring to detect odd cycles\n    colors = [-1] * (n + 1) # -1: unvisited, 0: color 0, 1: color 1\n    has_odd_cycle = False\n    \n    for i in range(1, n + 1):\n        if colors[i] == -1:\n            q = [(i, 0)] # (vertex, color)\n            colors[i] = 0\n            head = 0\n            while head < len(q):\n                u, u_color = q[head]\n                head += 1\n                for v in adj[u]:\n                    if colors[v] == -1:\n                        colors[v] = 1 - u_color\n                        q.append((v, 1 - u_color))\n                    elif colors[v] == u_color:\n                        has_odd_cycle = True\n                        break\n                if has_odd_cycle:\n                    break\n        if has_odd_cycle:\n            break\n\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # No existing odd cycle. Graph is bipartite.\n    # Now we need to add edges.\n\n    # t=1: Add one edge to form an odd cycle.\n    # This requires connecting two vertices of the same color in a bipartite component.\n    # Or connecting two vertices from different components.\n    \n    # We need to find the connected components and their bipartition.\n    # Store components as (color0_count, color1_count)\n    components = []\n    visited_comp = [False] * (n + 1)\n    \n    for i in range(1, n + 1):\n        if not visited_comp[i]:\n            q = [(i, 0)]\n            visited_comp[i] = True\n            \n            comp_nodes = []\n            comp_colors = [-1] * (n + 1)\n            comp_colors[i] = 0\n            \n            head = 0\n            while head < len(q):\n                u, u_color = q[head]\n                head += 1\n                comp_nodes.append(u)\n                \n                for v in adj[u]:\n                    if not visited_comp[v]:\n                        visited_comp[v] = True\n                        comp_colors[v] = 1 - u_color\n                        q.append((v, 1 - u_color))\n            \n            # After BFS, count nodes for each color in this component\n            c0_count = 0\n            c1_count = 0\n            for node in comp_nodes:\n                if comp_colors[node] == 0:\n                    c0_count += 1\n                else:\n                    c1_count += 1\n            components.append((c0_count, c1_count))\n\n    # Calculate ways for t=1\n    # Case 1: Add an edge within a component, connecting two nodes of the same color.\n    # For each component (c0_count, c1_count):\n    # Number of pairs of color 0 nodes: c0_count * (c0_count - 1) / 2\n    # Number of pairs of color 1 nodes: c1_count * (c1_count - 1) / 2\n    # Sum these up for all components.\n    ways_t1 = 0\n    for c0, c1 in components:\n        ways_t1 += c0 * (c0 - 1) // 2\n        ways_t1 += c1 * (c1 - 1) // 2\n    \n    if ways_t1 > 0:\n        print(f\"1 {ways_t1}\")\n        return\n\n    # t=2: No way to form an odd cycle with 1 edge.\n    # This means all components are either single nodes or have only 2 nodes (e.g., 1-2, 3-4)\n    # and we can't connect two nodes of the same color.\n    # This implies that for every component (c0, c1), either c0 <= 1 or c1 <= 1.\n    # Since we can't add parallel edges, we must add an edge between two non-adjacent vertices.\n    # If we add 2 edges (u,v) and (v,w), we can form a path u-v-w.\n    # If u and w are in the same component and have the same color, this path combined with existing path u-w forms an odd cycle.\n    # But this is not how t=2 works. t=2 means adding 2 edges.\n    # The simplest odd cycle with 2 added edges is a triangle.\n    # We need to find a path u-v of length 1 (existing edge) and add (u,w) and (v,w).\n    # This would form a triangle u-v-w. If u-v is an existing edge, and we add (u,w) and (v,w).\n    # The cycle is u-v-w-u. This is a 3-cycle, which is odd.\n    # For this to be possible, u,v,w must be distinct.\n    # The graph is bipartite, so any existing edge u-v means u and v have different colors.\n    # If we add (u,w) and (v,w), then w must be a new vertex not adjacent to u or v.\n    # For a triangle u-v-w to be formed by adding (u,w) and (v,w) where (u,v) is an existing edge:\n    # u, v must be in the same component.\n    # u and v have different colors. Let color(u)=0, color(v)=1.\n    # If we add w, w must be a new vertex.\n    # If w is in the same component as u,v:\n    #   If color(w)=0, then path u-w is even, path v-w is odd.\n    #   If color(w)=1, then path u-w is odd, path v-w is even.\n    # In a bipartite graph, any path between two nodes of the same color has even length.\n    # Any path between two nodes of different colors has odd length.\n    # Cycle u-v-w-u:\n    # (u,v) is existing edge (length 1, odd).\n    # (v,w) is added edge.\n    # (w,u) is added edge.\n    # The total length is 1 + 1 + 1 = 3 (odd). This always works if u,v,w are distinct and non-adjacent.\n    # So we need to pick an existing edge (u,v) and a third vertex w such that (u,w) and (v,w) are not existing edges.\n    \n    # Count existing edges: m\n    # Number of ways to choose an existing edge (u,v): m\n    # Number of ways to choose a third vertex w: n - 2 (since w != u, w != v)\n    # For each such (u,v,w) triple, we check if (u,w) and (v,w) are not existing edges.\n    # (u,w) and (v,w) are not loops or parallel edges by definition.\n    # Total possible (u,v,w) triples: m * (n-2)\n    # For each (u,v) existing edge:\n    #   Number of w's such that (u,w) exists: degree(u) - 1 (v is excluded)\n    #   Number of w's such that (v,w) exists: degree(v) - 1 (u is excluded)\n    #   Number of w's such that (u,w) and (v,w) both exist: count common neighbors of u and v.\n    # We want w such that (u,w) and (v,w) do NOT exist.\n    # So for each (u,v), the number of valid w is (n-2) - (count of w s.t. (u,w) exists or (v,w) exists).\n    \n    # This approach is too complex. Simpler:\n    # t=2: Connect two different components.\n    # Let's say we have component A and component B.\n    # A has (c0A, c1A) nodes. B has (c0B, c1B) nodes.\n    # If we add edge (u,v) where u is in A and v is in B.\n    # The new graph is still bipartite.\n    # To form an odd cycle, we need to add two edges (u,v) and (x,y) such that u,v,x,y form an odd cycle.\n    # The simplest way to get an odd cycle of length 3 is to pick an existing edge (u,v) and a vertex w, and add (u,w) and (v,w).\n    # For this to work, (u,w) and (v,w) must not exist.\n    # This is exactly what we calculated for t=1 if there were no constraints on colors.\n    # But since the graph is bipartite, u and v must have different colors.\n    # If w is chosen from the same component, say color(w)=0. Then (u,w) is an odd path, (v,w) is an even path.\n    # The total path u-w-v has length (odd + even) = odd.\n    # With existing edge (u,v), this forms an even cycle.\n    # So this doesn't work.\n    # For t=2, we need to connect two nodes from different components.\n    # Suppose we have components C1 and C2.\n    # Pick u in C1, v in C2. Add edge (u,v). The graph is still bipartite.\n    # To make an odd cycle, we need to connect two nodes of the same color within a new component.\n    # Example: C1 (A,B), C2 (X,Y). Add (A,X). Now we have a larger component.\n    # If A and B have same color in C1, this is impossible.\n    # If A and X have different colors, then the new component is still bipartite.\n    # We need to pick u,v,x,y and add (u,v) and (x,y) such that they form an odd cycle.\n    # E.g., u-v-x-y-u.\n    # This is a 4-cycle, which is even.\n    # Simplest odd cycle with 2 added edges is 5-cycle: u-v-w-x-y-u.\n    # For example, we add (u,v) and (v,w) and (w,x) and (x,y) and (y,u).\n    # This is not how we count t. We count minimum edges to add.\n    # An odd cycle of length 3: u-v-w-u. If (u,v) is existing, add (u,w), (v,w).\n    # If (u,v) is existing, u and v have different colors.\n    # If w is in the same component as u,v:\n    #   If color(w) == color(u), then path u-w is even, path v-w is odd.\n    #   If color(w) == color(v), then path u-w is odd, path v-w is even.\n    # In both cases, the cycle u-w-v-u has length (path u-w) + (path w-v) + 1.\n    # If color(w) == color(u), path u-w is even. path w-v is odd. Sum = even + odd = odd. Cycle length = odd + 1 = even.\n    # If color(w) == color(v), path u-w is odd. path w-v is even. Sum = odd + even = odd. Cycle length = odd + 1 = even.\n    # So adding (u,w) and (v,w) to an existing edge (u,v) where u,v,w are in the same component will always create an even cycle.\n    # This means t=2 requires connecting different components.\n    \n    # t=2 ways:\n    # We need to pick two vertices u, v such that they are in different components, and add an edge (u,v).\n    # Then the two components merge into one larger component.\n    # This new larger component is still bipartite.\n    # To form an odd cycle, we need to add another edge (x,y) within this new component,\n    # such that x and y have the same color.\n    # This means we pick u from C_i, v from C_j (i != j).\n    # Add (u,v). Now C_i and C_j are merged.\n    # Then we need to find x, y in the merged component that have the same color and add (x,y).\n    # This is essentially finding a way to make t=1 in the new graph.\n    # The minimum t is 2.\n    # We can connect two vertices u,v from different components.\n    # Then we connect two vertices x,y from different components.\n    # If we add (u,v) and (x,y).\n    # Case 1: u,v,x,y are all distinct.\n    #   If u,v are in C1, C2. x,y are in C3, C4.\n    #   Then we have two new edges. The graph is still bipartite.\n    #   Unless the edges connect things in a way that creates an odd cycle.\n    #   Example: C1(A,B), C2(X,Y). Add (A,X) and (B,Y). Still bipartite.\n    #   Example: C1(A,B), C2(X,Y). Add (A,X) and (A,Y). Still bipartite.\n    #   Example: C1(A,B), C2(X,Y). Add (A,X) and (B,X). Still bipartite.\n    #   The only way to get an odd cycle is if A and B have same color. But they don't.\n    #   Or if A and X have same color. But they don't.\n    \n    # The key is to form a cycle of odd length.\n    # A cycle of odd length must contain an odd number of edges that connect vertices of the same color.\n    # Since the graph is bipartite, all existing edges connect vertices of different colors.\n    # So, an odd cycle must contain an odd number of added edges that connect vertices of the same color.\n    \n    # If we add 2 edges: (u,v) and (x,y).\n    # If u and v are of the same color, this edge creates an odd cycle. We already handled t=1.\n    # So, u and v must be of different colors. Similarly x and y must be of different colors.\n    # This means (u,v) connects two nodes of different colors, and (x,y) connects two nodes of different colors.\n    # The graph remains bipartite. So this is not t=2.\n    \n    # This implies that at least one added edge must connect two nodes of the same color.\n    # If t=1, we add (u,v) where u,v are same color. This is `ways_t1`.\n    # If `ways_t1 == 0`, it means all components are \"degenerate\" in some sense.\n    # For every component (c0, c1), either c0 <= 1 or c1 <= 1.\n    # This means each component is a path or a star graph where the center has degree at most 1 in one color partition.\n    # E.g., a path 1-2-3-4. Colors: 0-1-0-1. c0=2, c1=2. We can add (1,3) or (2,4).\n    # If ways_t1 is 0, then for every component (c0, c1), min(c0, c1) <= 1.\n    # This is not correct. E.g. c0=2, c1=1. We can add (u,v) where u,v are color 0.\n    # So ways_t1 == 0 means that for every component (c0, c1), c0 < 2 and c1 < 2.\n    # This implies that every component has at most 1 node of color 0 AND at most 1 node of color 1.\n    # This means every component has at most 2 nodes total.\n    # So each component is either a single node (c0=1, c1=0 or c0=0, c1=1) or an edge (c0=1, c1=1).\n    # If this is the case, n_nodes_in_component <= 2.\n    # If n_nodes_in_component = 1, (u). colors[u]=0. c0=1, c1=0.\n    # If n_nodes_in_component = 2, (u,v) edge. colors[u]=0, colors[v]=1. c0=1, c1=1.\n    \n    # This means if ways_t1 is 0, then the graph is a collection of isolated vertices and isolated edges.\n    # In this scenario, we must add at least 2 edges.\n    # We need to form an odd cycle. A triangle is the smallest odd cycle.\n    # To form a triangle u-v-w-u:\n    # We need to add 2 edges.\n    # Case A: One existing edge (u,v), add (u,w) and (v,w).\n    #   u and v have different colors.\n    #   If w is in the same component as u,v: as shown above, this creates an even cycle.\n    #   So w must be in a different component.\n    #   Let (u,v) be an existing edge. u in C_i, v in C_i.\n    #   Let w be a vertex in C_j (j != i).\n    #   Add (u,w) and (v,w).\n    #   The path u-w-v is formed by two added edges. Its length is 2 (even).\n    #   The cycle u-w-v-u has length 2 + 1 (existing edge) = 3 (odd).\n    #   This is a valid way to form an odd cycle with 2 added edges.\n    #   Number of ways:\n    #     Choose an existing edge (u,v): m ways.\n    #     Choose a vertex w not in the component of u,v: (n - size_of_component(u,v)) ways.\n    #     For each (u,v) and w, we must check that (u,w) and (v,w) are not existing edges.\n    #     Since w is in a different component, (u,w) and (v,w) cannot be existing edges.\n    #     This is because existing edges only connect nodes within the same component.\n    #     So, ways = m * (n - 2)\n    #     Because if (u,v) is an edge, its component has size at least 2.\n    #     If the component is just (u,v), size is 2. Then n-2 ways to choose w.\n    #     If the component is larger, then n - size_of_component(u,v) ways.\n    #     Let's be precise. A vertex w is chosen such that w is not u and w is not v.\n    #     And (u,w) is not an existing edge, and (v,w) is not an existing edge.\n    #     If w is in a different component, then (u,w) and (v,w) are guaranteed not to be existing edges.\n    #     So, ways_t2_caseA = m * (n - 2)\n    #     This assumes that all components are just single edges or isolated nodes.\n    #     If ways_t1 == 0, then every component (c0, c1) has c0 < 2 AND c1 < 2.\n    #     This means every component is either a single node or an edge.\n    #     If a component is a single node {x}, then it has no edges.\n    #     If a component is an edge {x,y}, then it has one edge (x,y).\n    #     So, if ways_t1 == 0, then any edge (u,v) means u and v are the only nodes in their component.\n    #     So the number of ways to pick w not in {u,v} is (n-2).\n    #     So, if ways_t1 == 0, then ways_t2_caseA = m * (n - 2).\n    #     This is the number of ways to add 2 edges to form a triangle using an existing edge.\n    #     Example: 1-2, 3-4. m=2, n=4.\n    #     Pick (1,2). Pick w=3 or w=4.\n    #     (1,2), add (1,3), (2,3). Cycle 1-2-3-1.\n    #     (1,2), add (1,4), (2,4). Cycle 1-2-4-1.\n    #     Pick (3,4). Pick w=1 or w=2.\n    #     (3,4), add (3,1), (4,1). Cycle 3-4-1-3.\n    #     (3,4), add (3,2), (4,2). Cycle 3-4-2-3.\n    #     Total ways = 2 * (4-2) = 4. This matches.\n    \n    # Case B: No existing edge. Add 3 edges to form a triangle.\n    # This would be t=3. We are looking for t=2.\n    \n    # So if ways_t1 == 0, then t=2, ways = m * (n - 2).\n    # This handles the case where all components are either isolated nodes or isolated edges.\n    # What if there are isolated nodes and no edges? m=0.\n    # Example: n=3, m=0.\n    # components = [(1,0), (1,0), (1,0)]. ways_t1 = 0.\n    # t=2. ways = m * (n-2) = 0 * (3-2) = 0. This is incorrect.\n    # If m=0, we need to add 3 edges to form a triangle. (1,2), (2,3), (3,1). This is t=3.\n    # So this case only applies if m > 0.\n    \n    # If m=0, all nodes are isolated.\n    # Then all components are (1,0) (assuming we color them 0).\n    # We need to add 3 edges to form a triangle. (u,v), (v,w), (w,u).\n    # This requires t=3.\n    # Number of ways to choose 3 distinct vertices: nC3 = n * (n-1) * (n-2) / 6.\n    # If m=0, t=3, ways = n * (n-1) * (n-2) / 6.\n    \n    if m == 0:\n        if n < 3: # Cannot form a triangle\n            # This case is not possible given problem constraints (cycle of more than one vertex).\n            # Smallest odd cycle is 3 vertices.\n            # If n < 3, then it's impossible to form any cycle of length > 1.\n            # But the problem guarantees n >= 1.\n            # For n=1,2, no cycle.\n            # However, the problem states \"minimum number of edges that must be added... to form a simple cycle of an odd length\".\n            # If n < 3, it's impossible. What to print? The problem implies it's always possible.\n            # Let's assume n >= 3 for m=0 case.\n            print(f\"3 {n * (n - 1) * (n - 2) // 6}\")\n        else:\n            print(f\"3 {n * (n - 1) * (n - 2) // 6}\")\n        return\n    \n    # If ways_t1 == 0 and m > 0:\n    # This means every component is an isolated edge or an isolated node.\n    # But since m > 0, there is at least one isolated edge.\n    # For any existing edge (u,v), u and v form a component of size 2.\n    # If we choose an existing edge (u,v), and a vertex w not in {u,v},\n    # we can add edges (u,w) and (v,w) to form a triangle u-v-w-u.\n    # Since w is not u or v, and (u,w) and (v,w) are not existing edges (because w is in a different component or isolated),\n    # this creates an odd cycle of length 3 with 2 added edges.\n    # The number of ways to do this is m * (n - 2).\n    print(f\"2 {m * (n - 2)}\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n + 1)]\n    edges_set = set()\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        edges_set.add(tuple(sorted((u, v))))\n\n    # Check for existing odd cycle (t=0)\n    # Use BFS for 2-coloring to detect odd cycles\n    colors = [-1] * (n + 1) # -1: unvisited, 0: color 0, 1: color 1\n    has_odd_cycle = False\n    \n    for i in range(1, n + 1):\n        if colors[i] == -1:\n            q = [(i, 0)] # (vertex, color)\n            colors[i] = 0\n            head = 0\n            while head < len(q):\n                u, u_color = q[head]\n                head += 1\n                for v in adj[u]:\n                    if colors[v] == -1:\n                        colors[v] = 1 - u_color\n                        q.append((v, 1 - u_color))\n                    elif colors[v] == u_color:\n                        has_odd_cycle = True\n                        break\n                if has_odd_cycle:\n                    break\n        if has_odd_cycle:\n            break\n\n    if has_odd_cycle:\n        print(\"0 1\")\n        return\n\n    # No existing odd cycle. Graph is bipartite.\n    # Now we need to add edges.\n\n    # t=1: Add one edge to form an odd cycle.\n    # This requires connecting two vertices of the same color in a bipartite component.\n    # Or connecting two vertices from different components.\n    \n    # We need to find the connected components and their bipartition.\n    # Store components as (color0_count, color1_count)\n    components = []\n    visited_comp = [False] * (n + 1)\n    \n    for i in range(1, n + 1):\n        if not visited_comp[i]:\n            q = [(i, 0)]\n            visited_comp[i] = True\n            \n            comp_nodes = []\n            comp_colors = [-1] * (n + 1)\n            comp_colors[i] = 0\n            \n            head = 0\n            while head < len(q):\n                u, u_color = q[head]\n                head += 1\n                comp_nodes.append(u)\n                \n                for v in adj[u]:\n                    if not visited_comp[v]:\n                        visited_comp[v] = True\n                        comp_colors[v] = 1 - u_color\n                        q.append((v, 1 - u_color))\n            \n            # After BFS, count nodes for each color in this component\n            c0_count = 0\n            c1_count = 0\n            for node in comp_nodes:\n                if comp_colors[node] == 0:\n                    c0_count += 1\n                else:\n                    c1_count += 1\n            components.append((c0_count, c1_count))\n\n    # Calculate ways for t=1\n    # Case 1: Add an edge within a component, connecting two nodes of the same color.\n    # For each component (c0_count, c1_count):\n    # Number of pairs of color 0 nodes: c0_count * (c0_count - 1) / 2\n    # Number of pairs of color 1 nodes: c1_count * (c1_count - 1) / 2\n    # Sum these up for all components.\n    ways_t1 = 0\n    for c0, c1 in components:\n        ways_t1 += c0 * (c0 - 1) // 2\n        ways_t1 += c1 * (c1 - 1) // 2\n    \n    if ways_t1 > 0:\n        print(f\"1 {ways_t1}\")\n        return\n\n    # t=2: No way to form an odd cycle with 1 edge.\n    # This means all components are either single nodes or have only 2 nodes (e.g., 1-2, 3-4)\n    # and we can't connect two nodes of the same color.\n    # This implies that for every component (c0, c1), either c0 <= 1 or c1 <= 1.\n    # Since we can't add parallel edges, we must add an edge between two non-adjacent vertices.\n    # If we add 2 edges (u,v) and (v,w), we can form a path u-v-w.\n    # If u and w are in the same component and have the same color, this path combined with existing path u-w forms an odd cycle.\n    # But this is not how t=2 works. t=2 means adding 2 edges.\n    # The simplest odd cycle with 2 added edges is a triangle.\n    # We need to find a path u-v of length 1 (existing edge) and add (u,w) and (v,w).\n    # This would form a triangle u-v-w. If u-v is an existing edge, and we add (u,w) and (v,w).\n    # The cycle is u-v-w-u. This is a 3-cycle, which is odd.\n    # For this to be possible, u,v,w must be distinct.\n    # The graph is bipartite, so any existing edge u-v means u and v have different colors.\n    # If we add (u,w) and (v,w), then w must be a new vertex not adjacent to u or v.\n    # For a triangle u-v-w to be formed by adding (u,w) and (v,w) where (u,v) is an existing edge:\n    # u, v must be in the same component.\n    # u and v have different colors. Let color(u)=0, color(v)=1.\n    # If we add w, w must be a new vertex.\n    # If w is in the same component as u,v:\n    #   If color(w)=0, then path u-w is even, path v-w is odd.\n    #   If color(w)=1, then path u-w is odd, path v-w is even.\n    # In a bipartite graph, any path between two nodes of the same color has even length.\n    # Any path between two nodes of different colors has odd length.\n    # Cycle u-v-w-u:\n    # (u,v) is existing edge (length 1, odd).\n    # (v,w) is added edge.\n    # (w,u) is added edge.\n    # The total length is 1 + 1 + 1 = 3 (odd). This always works if u,v,w are distinct and non-adjacent.\n    # So we need to pick an existing edge (u,v) and a third vertex w such that (u,w) and (v,w) are not existing edges.\n    \n    # Count existing edges: m\n    # Number of ways to choose an existing edge (u,v): m\n    # Number of ways to choose a third vertex w: n - 2 (since w != u, w != v)\n    # For each such (u,v,w) triple, we check if (u,w) and (v,w) are not existing edges.\n    # (u,w) and (v,w) are not loops or parallel edges by definition.\n    # Total possible (u,v,w) triples: m * (n-2)\n    # For each (u,v) existing edge:\n    #   Number of w's such that (u,w) exists: degree(u) - 1 (v is excluded)\n    #   Number of w's such that (v,w) exists: degree(v) - 1 (u is excluded)\n    #   Number of w's such that (u,w) and (v,w) both exist: count common neighbors of u and v.\n    # We want w such that (u,w) and (v,w) do NOT exist.\n    # So for each (u,v), the number of valid w is (n-2) - (count of w s.t. (u,w) exists or (v,w) exists).\n    \n    # This approach is too complex. Simpler:\n    # t=2: Connect two different components.\n    # Let's say we have component A and component B.\n    # A has (c0A, c1A) nodes. B has (c0B, c1B) nodes.\n    # If we add edge (u,v) where u is in A and v is in B.\n    # The new graph is still bipartite.\n    # To form an odd cycle, we need to add two edges (u,v) and (x,y) such that u,v,x,y form an odd cycle.\n    # The simplest way to get an odd cycle of length 3 is to pick an existing edge (u,v) and a vertex w, and add (u,w) and (v,w).\n    # For this to work, (u,w) and (v,w) must not exist.\n    # This is exactly what we calculated for t=1 if there were no constraints on colors.\n    # But since the graph is bipartite, u and v must have different colors.\n    # If w is chosen from the same component, say color(w)=0. Then (u,w) is an odd path, (v,w) is an even path.\n    # The total path u-w-v has length (odd + even) = odd.\n    # With existing edge (u,v), this forms an even cycle.\n    # So this doesn't work.\n    # For t=2, we need to connect two nodes from different components.\n    # Suppose we have components C1 and C2.\n    # Pick u in C1, v in C2. Add edge (u,v). The graph is still bipartite.\n    # To make an odd cycle, we need to connect two nodes of the same color within a new component.\n    # Example: C1 (A,B), C2 (X,Y). Add (A,X). Now we have a larger component.\n    # If A and B have same color in C1, this is impossible.\n    # If A and X have different colors, then the new component is still bipartite.\n    # We need to pick u,v,x,y and add (u,v) and (x,y) such that they form an odd cycle.\n    # E.g., u-v-x-y-u.\n    # This is a 4-cycle, which is even.\n    # Simplest odd cycle with 2 added edges is 5-cycle: u-v-w-x-y-u.\n    # For example, we add (u,v) and (v,w) and (w,x) and (x,y) and (y,u).\n    # This is not how we count t. We count minimum edges to add.\n    # An odd cycle of length 3: u-v-w-u. If (u,v) is existing, add (u,w), (v,w).\n    # If (u,v) is existing, u and v have different colors.\n    # If w is in the same component as u,v:\n    #   If color(w) == color(u), then path u-w is even, path v-w is odd.\n    #   If color(w) == color(v), then path u-w is odd, path v-w is even.\n    # In both cases, the cycle u-w-v-u has length (path u-w) + (path w-v) + 1.\n    # If color(w) == color(u), path u-w is even. path w-v is odd. Sum = even + odd = odd. Cycle length = odd + 1 = even.\n    # If color(w) == color(v), path u-w is odd. path w-v is even. Sum = odd + even = odd. Cycle length = odd + 1 = even.\n    # So adding (u,w) and (v,w) to an existing edge (u,v) where u,v,w are in the same component will always create an even cycle.\n    # This means t=2 requires connecting different components.\n    \n    # t=2 ways:\n    # We need to pick two vertices u, v such that they are in different components, and add an edge (u,v).\n    # Then the two components merge into one larger component.\n    # This new larger component is still bipartite.\n    # To form an odd cycle, we need to add another edge (x,y) within this new component,\n    # such that x and y have the same color.\n    # This means we pick u from C_i, v from C_j (i != j).\n    # Add (u,v). Now C_i and C_j are merged.\n    # Then we need to find x, y in the merged component that have the same color and add (x,y).\n    # This is essentially finding a way to make t=1 in the new graph.\n    # The minimum t is 2.\n    # We can connect two vertices u,v from different components.\n    # Then we connect two vertices x,y from different components.\n    # If we add (u,v) and (x,y).\n    # Case 1: u,v,x,y are all distinct.\n    #   If u,v are in C1, C2. x,y are in C3, C4.\n    #   Then we have two new edges. The graph is still bipartite.\n    #   Unless the edges connect things in a way that creates an odd cycle.\n    #   Example: C1(A,B), C2(X,Y). Add (A,X) and (B,Y). Still bipartite.\n    #   Example: C1(A,B), C2(X,Y). Add (A,X) and (A,Y). Still bipartite.\n    #   Example: C1(A,B), C2(X,Y). Add (A,X) and (B,X). Still bipartite.\n    #   The only way to get an odd cycle is if A and B have same color. But they don't.\n    #   Or if A and X have same color. But they don't.\n    \n    # The key is to form a cycle of odd length.\n    # A cycle of odd length must contain an odd number of edges that connect vertices of the same color.\n    # Since the graph is bipartite, all existing edges connect vertices of different colors.\n    # So, an odd cycle must contain an odd number of added edges that connect vertices of the same color.\n    \n    # If we add 2 edges: (u,v) and (x,y).\n    # If u and v are of the same color, this edge creates an odd cycle. We already handled t=1.\n    # So, u and v must be of different colors. Similarly x and y must be of different colors.\n    # This means (u,v) connects two nodes of different colors, and (x,y) connects two nodes of different colors.\n    # The graph remains bipartite. So this is not t=2.\n    \n    # This implies that at least one added edge must connect two nodes of the same color.\n    # If t=1, we add (u,v) where u,v are same color. This is `ways_t1`.\n    # If `ways_t1 == 0`, it means all components are \"degenerate\" in some sense.\n    # For every component (c0, c1), either c0 <= 1 or c1 <= 1.\n    # This means each component is a path or a star graph where the center has degree at most 1 in one color partition.\n    # E.g., a path 1-2-3-4. Colors: 0-1-0-1. c0=2, c1=2. We can add (1,3) or (2,4).\n    # If ways_t1 is 0, then for every component (c0, c1), min(c0, c1) <= 1.\n    # This is not correct. E.g. c0=2, c1=1. We can add (u,v) where u,v are color 0.\n    # So ways_t1 == 0 means that for every component (c0, c1), c0 < 2 and c1 < 2.\n    # This implies that every component has at most 1 node of color 0 AND at most 1 node of color 1.\n    # This means every component has at most 2 nodes total.\n    # So each component is either a single node (c0=1, c1=0 or c0=0, c1=1) or an edge (c0=1, c1=1).\n    # If this is the case, n_nodes_in_component <= 2.\n    # If n_nodes_in_component = 1, (u). colors[u]=0. c0=1, c1=0.\n    # If n_nodes_in_component = 2, (u,v) edge. colors[u]=0, colors[v]=1. c0=1, c1=1.\n    \n    # This means if ways_t1 is 0, then the graph is a collection of isolated vertices and isolated edges.\n    # In this scenario, we must add at least 2 edges.\n    # We need to form an odd cycle. A triangle is the smallest odd cycle.\n    # To form a triangle u-v-w-u:\n    # We need to add 2 edges.\n    # Case A: One existing edge (u,v), add (u,w) and (v,w).\n    #   u and v have different colors.\n    #   If w is in the same component as u,v: as shown above, this creates an even cycle.\n    #   So w must be in a different component.\n    #   Let (u,v) be an existing edge. u in C_i, v in C_i.\n    #   Let w be a vertex in C_j (j != i).\n    #   Add (u,w) and (v,w).\n    #   The path u-w-v is formed by two added edges. Its length is 2 (even).\n    #   The cycle u-w-v-u has length 2 + 1 (existing edge) = 3 (odd).\n    #   This is a valid way to form an odd cycle with 2 added edges.\n    #   Number of ways:\n    #     Choose an existing edge (u,v): m ways.\n    #     Choose a vertex w not in the component of u,v: (n - size_of_component(u,v)) ways.\n    #     For each (u,v) and w, we must check that (u,w) and (v,w) are not existing edges.\n    #     Since w is in a different component, (u,w) and (v,w) cannot be existing edges.\n    #     This is because existing edges only connect nodes within the same component.\n    #     So, ways = m * (n - 2)\n    #     Because if (u,v) is an edge, its component has size at least 2.\n    #     If the component is just (u,v), size is 2. Then n-2 ways to choose w.\n    #     If the component is larger, then n - size_of_component(u,v) ways.\n    #     Let's be precise. A vertex w is chosen such that w is not u and w is not v.\n    #     And (u,w) is not an existing edge, and (v,w) is not an existing edge.\n    #     If w is in a different component, then (u,w) and (v,w) are guaranteed not to be existing edges.\n    #     So, ways_t2_caseA = m * (n - 2)\n    #     This assumes that all components are just single edges or isolated nodes.\n    #     If ways_t1 == 0, then every component (c0, c1) has c0 < 2 AND c1 < 2.\n    #     This means every component is either a single node or an edge.\n    #     If a component is a single node {x}, then it has no edges.\n    #     If a component is an edge {x,y}, then it has one edge (x,y).\n    #     So, if ways_t1 == 0, then any edge (u,v) means u and v are the only nodes in their component.\n    #     So the number of ways to pick w not in {u,v} is (n-2).\n    #     So, if ways_t1 == 0, then ways_t2_caseA = m * (n - 2).\n    #     This is the number of ways to add 2 edges to form a triangle using an existing edge.\n    #     Example: 1-2, 3-4. m=2, n=4.\n    #     Pick (1,2). Pick w=3 or w=4.\n    #     (1,2), add (1,3), (2,3). Cycle 1-2-3-1.\n    #     (1,2), add (1,4), (2,4). Cycle 1-2-4-1.\n    #     Pick (3,4). Pick w=1 or w=2.\n    #     (3,4), add (3,1), (4,1). Cycle 3-4-1-3.\n    #     (3,4), add (3,2), (4,2). Cycle 3-4-2-3.\n    #     Total ways = 2 * (4-2) = 4. This matches.\n    \n    # Case B: No existing edge. Add 3 edges to form a triangle.\n    # This would be t=3. We are looking for t=2.\n    \n    # So if ways_t1 == 0, then t=2, ways = m * (n - 2).\n    # This handles the case where all components are either isolated nodes or isolated edges.\n    # What if there are isolated nodes and no edges? m=0.\n    # Example: n=3, m=0.\n    # components = [(1,0), (1,0), (1,0)]. ways_t1 = 0.\n    # t=2. ways = m * (n-2) = 0 * (3-2) = 0. This is incorrect.\n    # If m=0, we need to add 3 edges to form a triangle. (1,2), (2,3), (3,1). This is t=3.\n    # So this case only applies if m > 0.\n    \n    # If m=0, all nodes are isolated.\n    # Then all components are (1,0) (assuming we color them 0).\n    # We need to add 3 edges to form a triangle. (u,v), (v,w), (w,u).\n    # This requires t=3.\n    # Number of ways to choose 3 distinct vertices: nC3 = n * (n-1) * (n-2) / 6.\n    # If m=0, t=3, ways = n * (n-1) * (n-2) / 6.\n    \n    if m == 0:\n        if n < 3: # Cannot form a triangle\n            # This case is not possible given problem constraints (cycle of more than one vertex).\n            # Smallest odd cycle is 3 vertices.\n            # If n < 3, then it's impossible to form any cycle of length > 1.\n            # But the problem guarantees n >= 1.\n            # For n=1,2, no cycle.\n            # However, the problem states \"minimum number of edges that must be added... to form a simple cycle of an odd length\".\n            # If n < 3, it's impossible. What to print? The problem implies it's always possible.\n            # Let's assume n >= 3 for m=0 case.\n            print(f\"3 {n * (n - 1) * (n - 2) // 6}\")\n        else:\n            print(f\"3 {n * (n - 1) * (n - 2) // 6}\")\n        return\n    \n    # If ways_t1 == 0 and m > 0:\n    # This means every component is an isolated edge or an isolated node.\n    # But since m > 0, there is at least one isolated edge.\n    # For any existing edge (u,v), u and v form a component of size 2.\n    # If we choose an existing edge (u,v), and a vertex w not in {u,v},\n    # we can add edges (u,w) and (v,w) to form a triangle u-v-w-u.\n    # Since w is not u or v, and (u,w) and (v,w) are not existing edges (because w is in a different component or isolated),\n    # this creates an odd cycle of length 3 with 2 added edges.\n    # The number of ways to do this is m * (n - 2).\n    print(f\"2 {m * (n - 2)}\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 603,
        "completion_token_count": 6033,
        "thoughts_token_count": 0
    }
}