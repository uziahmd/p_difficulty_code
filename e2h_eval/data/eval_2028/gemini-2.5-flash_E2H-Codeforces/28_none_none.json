{
    "start": 1758293688.4049037,
    "end": 1758293704.4327314,
    "start-formatted": "2025-09-19 23:54 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m, g = map(int, sys.stdin.readline().split())\n    MOD = 1000000007\n\n    fact = [1] * (n + m + 1)\n    inv_fact = [1] * (n + m + 1)\n\n    for i in range(1, n + m + 1):\n        fact[i] = (fact[i-1] * i) % MOD\n\n    inv_fact[n + m] = pow(fact[n + m], MOD - 2, MOD)\n    for i in range(n + m - 1, -1, -1):\n        inv_fact[i] = (inv_fact[i+1] * (i+1)) % MOD\n\n    def nCr_mod_p(n_val, r_val):\n        if r_val < 0 or r_val > n_val:\n            return 0\n        num = fact[n_val]\n        den = (inv_fact[r_val] * inv_fact[n_val - r_val]) % MOD\n        return (num * den) % MOD\n\n    if m == 0:\n        if n == 1 and g == 0:\n            print(1)\n        else:\n            print(0)\n        return\n\n    if g == 1:\n        # The final character is 1 if and only if the number of 1s in the string is odd.\n        # This is because each modification operation flips the parity of 1s if a 1 is involved.\n        # If two 0s are replaced by a 1, the parity of 1s changes.\n        # If a 0 and a 1 are replaced by a 0, the parity of 1s changes.\n        # If two 1s are replaced by a 0, the parity of 1s changes.\n        # So, the final character is 1 iff the initial count of 1s (m) is odd.\n        if m % 2 == 1:\n            ans = 0\n            for k in range(m + 1):\n                if k % 2 == 1: # Number of 1s in the string is odd\n                    # We need to choose positions for k '1's among m '1's and n '0's\n                    # This is equivalent to choosing n '0's among n '0's and k '1's.\n                    # The number of 1s that remain after some 00->1 operations is k.\n                    # This logic is tricky. Let's re-evaluate.\n                    # The value of the final character is (sum of characters) mod 2,\n                    # if 00 -> 1, 01 -> 0, 11 -> 0.\n                    # This is equivalent to XOR sum.\n                    # Final character is 1 if (n_1 + n_00_to_1) % 2 == 1.\n                    # The number of 0s that are \"eaten\" by 1s is even.\n                    # The final character is 1 if and only if m is odd.\n                    # This is a known property: the result of the operation is the XOR sum of the initial string.\n                    # So, if m is odd, g must be 1. If m is even, g must be 0.\n                    # So, if m is odd and g is 1, all strings are beautiful.\n                    # If m is even and g is 1, no strings are beautiful.\n                    ans = (ans + nCr_mod_p(n + m - k - 1, n - 1)) % MOD\n            \n            # The problem states: \"The character equals one if it replaces two zeros, otherwise it equals zero.\"\n            # Let's trace the parity of 1s.\n            # 00 -> 1: (parity of 1s) changes\n            # 01 -> 0: (parity of 1s) changes\n            # 11 -> 0: (parity of 1s) changes\n            # In all cases, the parity of 1s changes.\n            # If we start with m ones, after one operation, the number of ones becomes m' such that m' != m (mod 2).\n            # If we perform L operations, the parity of 1s changes L times.\n            # The final string has length 1. So L = n + m - 1 operations.\n            # The final character is 1 if (m + (n+m-1)) % 2 == 1.\n            # This simplifies to (m + n - 1) % 2 == 1.\n            # So, if (n + m - 1) % 2 == 1, then the final character is 1.\n            # If (n + m - 1) % 2 == 0, then the final character is 0.\n            \n            if (n + m - 1) % 2 == 1: # We need g=1\n                # All strings are beautiful\n                print(nCr_mod_p(n + m, n))\n            else: # We need g=1, but the final character is 0\n                print(0)\n\n    else: # g == 0\n        # We need (n + m - 1) % 2 == 0 for the final character to be 0.\n        if (n + m - 1) % 2 == 0: # We need g=0\n            # All strings are beautiful\n            ans = nCr_mod_p(n + m, n)\n            \n            # Special case: If n=0, m=1, g=0. (n+m-1)%2 = 0.\n            # String is \"1\". Length 1, no modifications possible. Result is 1.\n            # We need g=0, but result is 1. So 0 strings.\n            # Our formula nCr(1,0) = 1. This is incorrect for n=0, m=1.\n            # The rule \"length at least two\" is crucial.\n            # If n+m=1, no modifications are possible. The string is \"0\" or \"1\".\n            # If n=1, m=0, string \"0\". g=0. Result 0. (n+m-1)%2 = 0. Correct.\n            # If n=0, m=1, string \"1\". g=1. Result 1. (n+m-1)%2 = 0. Incorrect.\n            # The property (n+m-1)%2 applies only if n+m >= 2.\n            \n            if n + m == 1:\n                if n == 1 and g == 0:\n                    print(1)\n                else: # n=0, m=1, g=0 or n=1, m=0, g=1\n                    print(0)\n            else:\n                # If m is odd, the number of 1s must be odd.\n                # If m is even, the number of 1s must be even.\n                # The rule for the final character:\n                # Let s_i be the i-th character. The final character is s_1 XOR s_2 XOR ... XOR s_{n+m}\n                # if 00 -> 0, 01 -> 1, 11 -> 0. (This is XOR)\n                # But the problem states: 00 -> 1, 01 -> 0, 11 -> 0.\n                # Let's write down the operation as a function f(x, y):\n                # f(0,0) = 1\n                # f(0,1) = 0\n                # f(1,0) = 0\n                # f(1,1) = 0\n                # This is equivalent to (x NOR y).\n                # The final character is (((s_1 NOR s_2) NOR s_3) NOR ... NOR s_{n+m}).\n                # This is equivalent to (NOT (s_1 OR s_2 OR ... OR s_{n+m})).\n                # If there is at least one '1' in the string, then (s_1 OR ... OR s_{n+m}) is 1.\n                # So the final character is 0.\n                # If all characters are '0's, then (s_1 OR ... OR s_{n+m}) is 0.\n                # So the final character is 1.\n                \n                # Case 1: All characters are '0's. This means m=0.\n                # If m=0, string is \"00...0\" (n times).\n                # Final character is 1.\n                # If n=1, m=0, g=0. String \"0\". No modifications. Result 0.\n                # If n > 1, m=0. String \"00...0\". Final character is 1.\n                # So if m=0 and n>1, we need g=1. If g=0, then 0 strings.\n                \n                # Case 2: There is at least one '1' in the string. This means m >= 1.\n                # If m >= 1, the final character is 0.\n                # So if m >= 1, we need g=0. If g=1, then 0 strings.\n                \n                if m >= 1: # We need g=0.\n                    print(nCr_mod_p(n + m, n))\n                else: # m=0. String is \"0\"*n.\n                    # We need g=0. But for m=0, the final character is 1 (if n>1) or 0 (if n=1).\n                    # If n=1, m=0, g=0. String \"0\". No ops. Result 0. Count 1.\n                    # If n > 1, m=0, g=0. String \"00...0\". Result 1. Count 0.\n                    if n == 1: # implies m=0, g=0\n                        print(1)\n                    else: # implies m=0, n>1, g=0\n                        print(0)\n        else: # We need g=0, but the final character is 1.\n            print(0)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m, g = map(int, sys.stdin.readline().split())\n    MOD = 1000000007\n\n    fact = [1] * (n + m + 1)\n    inv_fact = [1] * (n + m + 1)\n\n    for i in range(1, n + m + 1):\n        fact[i] = (fact[i-1] * i) % MOD\n\n    inv_fact[n + m] = pow(fact[n + m], MOD - 2, MOD)\n    for i in range(n + m - 1, -1, -1):\n        inv_fact[i] = (inv_fact[i+1] * (i+1)) % MOD\n\n    def nCr_mod_p(n_val, r_val):\n        if r_val < 0 or r_val > n_val:\n            return 0\n        num = fact[n_val]\n        den = (inv_fact[r_val] * inv_fact[n_val - r_val]) % MOD\n        return (num * den) % MOD\n\n    if m == 0:\n        if n == 1 and g == 0:\n            print(1)\n        else:\n            print(0)\n        return\n\n    if g == 1:\n        # The final character is 1 if and only if the number of 1s in the string is odd.\n        # This is because each modification operation flips the parity of 1s if a 1 is involved.\n        # If two 0s are replaced by a 1, the parity of 1s changes.\n        # If a 0 and a 1 are replaced by a 0, the parity of 1s changes.\n        # If two 1s are replaced by a 0, the parity of 1s changes.\n        # So, the final character is 1 iff the initial count of 1s (m) is odd.\n        if m % 2 == 1:\n            ans = 0\n            for k in range(m + 1):\n                if k % 2 == 1: # Number of 1s in the string is odd\n                    # We need to choose positions for k '1's among m '1's and n '0's\n                    # This is equivalent to choosing n '0's among n '0's and k '1's.\n                    # The number of 1s that remain after some 00->1 operations is k.\n                    # This logic is tricky. Let's re-evaluate.\n                    # The value of the final character is (sum of characters) mod 2,\n                    # if 00 -> 1, 01 -> 0, 11 -> 0.\n                    # This is equivalent to XOR sum.\n                    # Final character is 1 if (n_1 + n_00_to_1) % 2 == 1.\n                    # The number of 0s that are \"eaten\" by 1s is even.\n                    # The final character is 1 if and only if m is odd.\n                    # This is a known property: the result of the operation is the XOR sum of the initial string.\n                    # So, if m is odd, g must be 1. If m is even, g must be 0.\n                    # So, if m is odd and g is 1, all strings are beautiful.\n                    # If m is even and g is 1, no strings are beautiful.\n                    ans = (ans + nCr_mod_p(n + m - k - 1, n - 1)) % MOD\n            \n            # The problem states: \"The character equals one if it replaces two zeros, otherwise it equals zero.\"\n            # Let's trace the parity of 1s.\n            # 00 -> 1: (parity of 1s) changes\n            # 01 -> 0: (parity of 1s) changes\n            # 11 -> 0: (parity of 1s) changes\n            # In all cases, the parity of 1s changes.\n            # If we start with m ones, after one operation, the number of ones becomes m' such that m' != m (mod 2).\n            # If we perform L operations, the parity of 1s changes L times.\n            # The final string has length 1. So L = n + m - 1 operations.\n            # The final character is 1 if (m + (n+m-1)) % 2 == 1.\n            # This simplifies to (m + n - 1) % 2 == 1.\n            # So, if (n + m - 1) % 2 == 1, then the final character is 1.\n            # If (n + m - 1) % 2 == 0, then the final character is 0.\n            \n            if (n + m - 1) % 2 == 1: # We need g=1\n                # All strings are beautiful\n                print(nCr_mod_p(n + m, n))\n            else: # We need g=1, but the final character is 0\n                print(0)\n\n    else: # g == 0\n        # We need (n + m - 1) % 2 == 0 for the final character to be 0.\n        if (n + m - 1) % 2 == 0: # We need g=0\n            # All strings are beautiful\n            ans = nCr_mod_p(n + m, n)\n            \n            # Special case: If n=0, m=1, g=0. (n+m-1)%2 = 0.\n            # String is \"1\". Length 1, no modifications possible. Result is 1.\n            # We need g=0, but result is 1. So 0 strings.\n            # Our formula nCr(1,0) = 1. This is incorrect for n=0, m=1.\n            # The rule \"length at least two\" is crucial.\n            # If n+m=1, no modifications are possible. The string is \"0\" or \"1\".\n            # If n=1, m=0, string \"0\". g=0. Result 0. (n+m-1)%2 = 0. Correct.\n            # If n=0, m=1, string \"1\". g=1. Result 1. (n+m-1)%2 = 0. Incorrect.\n            # The property (n+m-1)%2 applies only if n+m >= 2.\n            \n            if n + m == 1:\n                if n == 1 and g == 0:\n                    print(1)\n                else: # n=0, m=1, g=0 or n=1, m=0, g=1\n                    print(0)\n            else:\n                # If m is odd, the number of 1s must be odd.\n                # If m is even, the number of 1s must be even.\n                # The rule for the final character:\n                # Let s_i be the i-th character. The final character is s_1 XOR s_2 XOR ... XOR s_{n+m}\n                # if 00 -> 0, 01 -> 1, 11 -> 0. (This is XOR)\n                # But the problem states: 00 -> 1, 01 -> 0, 11 -> 0.\n                # Let's write down the operation as a function f(x, y):\n                # f(0,0) = 1\n                # f(0,1) = 0\n                # f(1,0) = 0\n                # f(1,1) = 0\n                # This is equivalent to (x NOR y).\n                # The final character is (((s_1 NOR s_2) NOR s_3) NOR ... NOR s_{n+m}).\n                # This is equivalent to (NOT (s_1 OR s_2 OR ... OR s_{n+m})).\n                # If there is at least one '1' in the string, then (s_1 OR ... OR s_{n+m}) is 1.\n                # So the final character is 0.\n                # If all characters are '0's, then (s_1 OR ... OR s_{n+m}) is 0.\n                # So the final character is 1.\n                \n                # Case 1: All characters are '0's. This means m=0.\n                # If m=0, string is \"00...0\" (n times).\n                # Final character is 1.\n                # If n=1, m=0, g=0. String \"0\". No modifications. Result 0.\n                # If n > 1, m=0. String \"00...0\". Final character is 1.\n                # So if m=0 and n>1, we need g=1. If g=0, then 0 strings.\n                \n                # Case 2: There is at least one '1' in the string. This means m >= 1.\n                # If m >= 1, the final character is 0.\n                # So if m >= 1, we need g=0. If g=1, then 0 strings.\n                \n                if m >= 1: # We need g=0.\n                    print(nCr_mod_p(n + m, n))\n                else: # m=0. String is \"0\"*n.\n                    # We need g=0. But for m=0, the final character is 1 (if n>1) or 0 (if n=1).\n                    # If n=1, m=0, g=0. String \"0\". No ops. Result 0. Count 1.\n                    # If n > 1, m=0, g=0. String \"00...0\". Result 1. Count 0.\n                    if n == 1: # implies m=0, g=0\n                        print(1)\n                    else: # implies m=0, n>1, g=0\n                        print(0)\n        else: # We need g=0, but the final character is 1.\n            print(0)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 2391,
        "thoughts_token_count": 0
    }
}