{
    "start": 1758293704.1130688,
    "end": 1758293723.600638,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 54,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mister B and Angle in Polygon\n\nOn one quiet day all of sudden Mister B decided to draw angle a on his field. Aliens have already visited his field and left many different geometric figures on it. One of the figures is regular convex n-gon (regular convex polygon with n sides).That's why Mister B decided to use this polygon. Now Mister B must find three distinct vertices v1, v2, v3 such that the angle  (where v2 is the vertex of the angle, and v1 and v3 lie on its sides) is as close as possible to a. In other words, the value  should be minimum possible.If there are many optimal solutions, Mister B should be satisfied with any of them.\n\n## Input\nFirst and only line contains two space-separated integers n and a (3 ≤ n ≤ 105, 1 ≤ a ≤ 180) — the number of vertices in the polygon and the needed angle, in degrees.\n\n## Output\nPrint three space-separated integers: the vertices v1, v2, v3, which form . If there are multiple optimal solutions, print any of them. The vertices are numbered from 1 to n in clockwise order.\n\n## Example\n### Input\n['3 15', '4 67', '4 68']\n\n### Output\n['1 2 3', '2 1 3', '4 1 2']\n\n## Note\nIn first sample test vertices of regular triangle can create only angle of 60 degrees, that's why every possible angle is correct.Vertices of square can create 45 or 90 degrees angles only. That's why in second sample test the angle of 45 degrees was chosen, since |45 - 67| < |90 - 67|. Other correct answers are: \"3 1 2\", \"3 2 4\", \"4 2 3\", \"4 3 1\", \"1 3 4\", \"1 4 2\", \"2 4 1\", \"4 1 3\", \"3 1 4\", \"3 4 2\", \"2 4 3\", \"2 3 1\", \"1 3 2\", \"1 2 4\", \"4 2 1\".In third sample test, on the contrary, the angle of 90 degrees was chosen, since |90 - 68| < |45 - 68|. Other correct answers are: \"2 1 4\", \"3 2 1\", \"1 2 3\", \"4 3 2\", \"2 3 4\", \"1 4 3\", \"3 4 1\".\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2\n    v2 = 2\n\n    # Iterate through possible v1 (from 3 to n)\n    # v1 will be the first point of the angle, v2 the vertex, v3 the third point\n    # We can fix v2 and v1, and then find the best v3\n    # However, it's simpler to fix v2 and iterate through possible 'k' values\n    # The angle formed by vertices (v1, v2, v3) where v2 is the vertex\n    # and v1, v3 are on its sides, can be expressed as:\n    # (k * 180) / n, where k is the number of vertices between v1 and v3 (not including v1, v3, v2)\n    # Or more precisely, if v2 is the vertex, and v1, v3 are the other two points,\n    # the angle formed is (number of edges between v1 and v3, passing through the polygon interior) * (180 / n)\n    # Let's say v2 is vertex 2.\n    # We can choose v1 as vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges between v1 and v3 (passing through the interior, forming the angle at v2)\n    # is (v3 - v1). If v1=1, v2=2, v3=3, angle is 180/n.\n    # If v1=1, v2=2, v3=4, angle is 2 * 180/n.\n    # In general, if v2 is the vertex, and v1, v3 are the other two points,\n    # the angle is formed by the chord v2-v1 and v2-v3.\n    # The angle subtended by a chord connecting vertex i and vertex j at the center is |i-j| * (360/n).\n    # The angle subtended by a chord connecting vertex i and vertex j at any other vertex k on the major arc is (n - |i-j|) * (180/n).\n    # The angle subtended by a chord connecting vertex i and vertex j at any other vertex k on the minor arc is |i-j| * (180/n).\n    #\n    # For a regular n-gon, all vertices lie on a circumcircle.\n    # The angle subtended by an arc at the circumference is half the angle subtended by the same arc at the center.\n    # If we choose vertex v2 as the angle's vertex, and v1, v3 as the points on its sides.\n    # The angle at v2 is formed by chords v2-v1 and v2-v3.\n    # This angle subtends the arc between v1 and v3 (not passing through v2).\n    # The number of edges on this arc is |v1 - v3| (if we consider vertices numbered 1 to n).\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc between v1 and v3 (not passing through v2) is (v3 - v1).\n    # So the angle formed is (v3 - v1) * (180 / n).\n    # Let k = v3 - v1.\n    # So k can range from (3 - 1) = 2 to (n - 1).\n    # The possible angles are (k * 180) / n for k = 1, 2, ..., n-2.\n    # No, this is not correct.\n    # The angle at a vertex v2 formed by sides v2-v1 and v2-v3 is (k * 180) / n,\n    # where k is the number of vertices *between* v1 and v3 (not including v1 and v3)\n    # along the shorter arc, *plus one*. This is equivalent to the number of edges\n    # along the shorter arc between v1 and v3.\n    #\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc from v1 to v3 (going clockwise from v1 to v3, not passing through v2) is (v3 - v1).\n    # For example, if n=4, v2=2, v1=1.\n    # If v3=3: arc from 1 to 3 (not passing 2) is 1 edge (1-3). Angle = 1 * 180/4 = 45.\n    # If v3=4: arc from 1 to 4 (not passing 2) is 2 edges (1-3, 3-4). Angle = 2 * 180/4 = 90.\n    # So, k = (v3 - v1) for v1=1, v2=2, v3 in [3, n].\n    # k ranges from (3-1)=2 to (n-1).\n    # The actual possible values for k are 1, 2, ..., n-2.\n    # For k=1, angle is 180/n. (e.g., v1=1, v2=2, v3=3. The arc between 1 and 3 has 1 edge (1-3)).\n    # For k=n-2, angle is (n-2)*180/n. (e.g., v1=1, v2=2, v3=n. The arc between 1 and n has n-2 edges (1-3, ..., n-1-n)).\n\n    # Let's iterate through all possible 'k' values (number of edges on the arc between v1 and v3, not passing through v2).\n    # 'k' can range from 1 to n-2.\n    # For each 'k', the angle is `current_angle = k * (180 / n)`.\n    # We want to find 'k' such that `abs(current_angle - a)` is minimized.\n\n    for k in range(1, n - 1): # k is the number of edges between v1 and v3 (not passing through v2)\n        current_angle = k * (180.0 / n)\n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            # We can fix v2 = 2.\n            # We can fix v1 = 1.\n            # Then v3 = v1 + k + 1 = 1 + k + 1 = k + 2.\n            # This ensures v1, v2, v3 are distinct and in order.\n            # v1=1, v2=2, v3=k+2\n            # For k=1, v3=3. Angle = 1 * 180/n. Vertices: 1, 2, 3.\n            # For k=n-2, v3=n. Angle = (n-2) * 180/n. Vertices: 1, 2, n.\n            best_v1 = 1\n            best_v2 = 2\n            best_v3 = k + 2\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, a = map(int, input().split())\n\n    min_diff = float('inf')\n    best_v1, best_v2, best_v3 = -1, -1, -1\n\n    # Fix v2 as vertex 2\n    v2 = 2\n\n    # Iterate through possible v1 (from 3 to n)\n    # v1 will be the first point of the angle, v2 the vertex, v3 the third point\n    # We can fix v2 and v1, and then find the best v3\n    # However, it's simpler to fix v2 and iterate through possible 'k' values\n    # The angle formed by vertices (v1, v2, v3) where v2 is the vertex\n    # and v1, v3 are on its sides, can be expressed as:\n    # (k * 180) / n, where k is the number of vertices between v1 and v3 (not including v1, v3, v2)\n    # Or more precisely, if v2 is the vertex, and v1, v3 are the other two points,\n    # the angle formed is (number of edges between v1 and v3, passing through the polygon interior) * (180 / n)\n    # Let's say v2 is vertex 2.\n    # We can choose v1 as vertex 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges between v1 and v3 (passing through the interior, forming the angle at v2)\n    # is (v3 - v1). If v1=1, v2=2, v3=3, angle is 180/n.\n    # If v1=1, v2=2, v3=4, angle is 2 * 180/n.\n    # In general, if v2 is the vertex, and v1, v3 are the other two points,\n    # the angle is formed by the chord v2-v1 and v2-v3.\n    # The angle subtended by a chord connecting vertex i and vertex j at the center is |i-j| * (360/n).\n    # The angle subtended by a chord connecting vertex i and vertex j at any other vertex k on the major arc is (n - |i-j|) * (180/n).\n    # The angle subtended by a chord connecting vertex i and vertex j at any other vertex k on the minor arc is |i-j| * (180/n).\n    #\n    # For a regular n-gon, all vertices lie on a circumcircle.\n    # The angle subtended by an arc at the circumference is half the angle subtended by the same arc at the center.\n    # If we choose vertex v2 as the angle's vertex, and v1, v3 as the points on its sides.\n    # The angle at v2 is formed by chords v2-v1 and v2-v3.\n    # This angle subtends the arc between v1 and v3 (not passing through v2).\n    # The number of edges on this arc is |v1 - v3| (if we consider vertices numbered 1 to n).\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc between v1 and v3 (not passing through v2) is (v3 - v1).\n    # So the angle formed is (v3 - v1) * (180 / n).\n    # Let k = v3 - v1.\n    # So k can range from (3 - 1) = 2 to (n - 1).\n    # The possible angles are (k * 180) / n for k = 1, 2, ..., n-2.\n    # No, this is not correct.\n    # The angle at a vertex v2 formed by sides v2-v1 and v2-v3 is (k * 180) / n,\n    # where k is the number of vertices *between* v1 and v3 (not including v1 and v3)\n    # along the shorter arc, *plus one*. This is equivalent to the number of edges\n    # along the shorter arc between v1 and v3.\n    #\n    # Let's fix v2 = 2.\n    # Let v1 = 1.\n    # Then v3 can be any vertex from 3 to n.\n    # The number of edges on the arc from v1 to v3 (going clockwise from v1 to v3, not passing through v2) is (v3 - v1).\n    # For example, if n=4, v2=2, v1=1.\n    # If v3=3: arc from 1 to 3 (not passing 2) is 1 edge (1-3). Angle = 1 * 180/4 = 45.\n    # If v3=4: arc from 1 to 4 (not passing 2) is 2 edges (1-3, 3-4). Angle = 2 * 180/4 = 90.\n    # So, k = (v3 - v1) for v1=1, v2=2, v3 in [3, n].\n    # k ranges from (3-1)=2 to (n-1).\n    # The actual possible values for k are 1, 2, ..., n-2.\n    # For k=1, angle is 180/n. (e.g., v1=1, v2=2, v3=3. The arc between 1 and 3 has 1 edge (1-3)).\n    # For k=n-2, angle is (n-2)*180/n. (e.g., v1=1, v2=2, v3=n. The arc between 1 and n has n-2 edges (1-3, ..., n-1-n)).\n\n    # Let's iterate through all possible 'k' values (number of edges on the arc between v1 and v3, not passing through v2).\n    # 'k' can range from 1 to n-2.\n    # For each 'k', the angle is `current_angle = k * (180 / n)`.\n    # We want to find 'k' such that `abs(current_angle - a)` is minimized.\n\n    for k in range(1, n - 1): # k is the number of edges between v1 and v3 (not passing through v2)\n        current_angle = k * (180.0 / n)\n        diff = abs(current_angle - a)\n\n        if diff < min_diff:\n            min_diff = diff\n            # We can fix v2 = 2.\n            # We can fix v1 = 1.\n            # Then v3 = v1 + k + 1 = 1 + k + 1 = k + 2.\n            # This ensures v1, v2, v3 are distinct and in order.\n            # v1=1, v2=2, v3=k+2\n            # For k=1, v3=3. Angle = 1 * 180/n. Vertices: 1, 2, 3.\n            # For k=n-2, v3=n. Angle = (n-2) * 180/n. Vertices: 1, 2, n.\n            best_v1 = 1\n            best_v2 = 2\n            best_v3 = k + 2\n\n    print(best_v1, best_v2, best_v3)\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 739,
        "completion_token_count": 1802,
        "thoughts_token_count": 0
    }
}