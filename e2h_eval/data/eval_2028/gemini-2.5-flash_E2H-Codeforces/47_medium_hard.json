{
    "start": 1758294767.0199473,
    "end": 1758294814.0636156,
    "start-formatted": "2025-09-20 00:12 KST",
    "end-formatted": "2025-09-20 00:13 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Solving the LCM Minimization Problem**\n\nAlright, I've got this competitive programming problem where I need to minimize the least common multiple (LCM) of `a+k` and `b+k`, finding the smallest non-negative integer `k`.  I'm thinking of setting `x = a+k` and `y = b+k`, so I want to minimize `lcm(x, y)`. We know that the LCM is equal to the product of `x` and `y` divided by their greatest common divisor (GCD). Let's define `d` as `gcd(x, y)`, or `gcd(a+k, b+k)`.  Since `d` divides both `a+k` and `b+k`, it must also divide their difference, which is `b-a`. This means `d` must be a divisor of `diff = |b-a|`.\n\nWithout loss of generality, assume `a <= b`.  My strategy is to iterate through all possible divisors `g` of `b-a`. For each `g`, I'll find the smallest non-negative `k` such that `a+k` is a multiple of `g`.  This `k` is calculated as `(g - (a % g)) % g`. This ensures that `g` divides `a+k` and, consequently, also divides `b+k`. This `k` leads to a new pair of `x` and `y`. If `gcd(x, y) = g`, the LCM will be `(x * y) // g`.\n\nIf `a` equals `b`, the smallest `k` to minimize the LCM would be 0. Otherwise, for each `g`, I'll calculate the corresponding `k`, compute `gcd(a+k, b+k)` and calculate the new LCM. If this LCM is smaller than the current minimum, or if they are equal, then save the smallest k.\n\nThis leads to the implementation. First, I handle the case when a equals b, where I return k = 0. Otherwise, I find the divisors of the difference between a and b. Then for each divisor, I calculate the `k`. With this `k`, compute the current LCM, compare it to the current minimum. Finally, I print the best `k`. This should be efficient enough, given the constraints.  Let's code it up!\n",
    "response": "```python\nimport math\nimport sys\n\ndef solve():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a == b:\n        sys.stdout.write(\"0\\n\")\n        return\n\n    if a > b:\n        a, b = b, a\n\n    diff = b - a\n\n    min_lcm_val = float('inf')\n    best_k = -1\n\n    def calculate_lcm(x, y):\n        return (x // math.gcd(x, y)) * y\n\n    current_k = 0\n    current_a_plus_k = a + current_k\n    current_b_plus_k = b + current_k\n    current_lcm = calculate_lcm(current_a_plus_k, current_b_plus_k)\n    \n    min_lcm_val = current_lcm\n    best_k = current_k\n\n    divisors = set()\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors.add(i)\n            divisors.add(diff // i)\n    \n    for d in divisors:\n        current_k = (d - (a % d)) % d\n        \n        current_a_plus_k = a + current_k\n        current_b_plus_k = b + current_k\n        \n        current_lcm = calculate_lcm(current_a_plus_k, current_b_plus_k)\n        \n        if current_lcm < min_lcm_val:\n            min_lcm_val = current_lcm\n            best_k = current_k\n        elif current_lcm == min_lcm_val:\n            best_k = min(best_k, current_k)\n            \n    sys.stdout.write(str(best_k) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\nimport sys\n\ndef solve():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a == b:\n        sys.stdout.write(\"0\\n\")\n        return\n\n    if a > b:\n        a, b = b, a\n\n    diff = b - a\n\n    min_lcm_val = float('inf')\n    best_k = -1\n\n    def calculate_lcm(x, y):\n        return (x // math.gcd(x, y)) * y\n\n    current_k = 0\n    current_a_plus_k = a + current_k\n    current_b_plus_k = b + current_k\n    current_lcm = calculate_lcm(current_a_plus_k, current_b_plus_k)\n    \n    min_lcm_val = current_lcm\n    best_k = current_k\n\n    divisors = set()\n    for i in range(1, int(math.sqrt(diff)) + 1):\n        if diff % i == 0:\n            divisors.add(i)\n            divisors.add(diff // i)\n    \n    for d in divisors:\n        current_k = (d - (a % d)) % d\n        \n        current_a_plus_k = a + current_k\n        current_b_plus_k = b + current_k\n        \n        current_lcm = calculate_lcm(current_a_plus_k, current_b_plus_k)\n        \n        if current_lcm < min_lcm_val:\n            min_lcm_val = current_lcm\n            best_k = current_k\n        elif current_lcm == min_lcm_val:\n            best_k = min(best_k, current_k)\n            \n    sys.stdout.write(str(best_k) + \"\\n\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 421,
        "completion_token_count": 454,
        "thoughts_token_count": 7292
    }
}