{
    "start": 1758011279.0510252,
    "end": 1758011335.1522295,
    "start-formatted": "2025-09-16 17:27 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # So, n = 1 + k + k*k\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, (4n - 3) must be a perfect square, and (-1 + sqrt(4n - 3)) must be an even positive number.\n    \n    discriminant = 4 * n - 3\n    \n    if discriminant >= 0:\n        sqrt_discriminant = int(math.isqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            k_numerator = -1 + sqrt_discriminant\n            if k_numerator > 0 and k_numerator % 2 == 0:\n                k = k_numerator // 2\n                if k > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: Snowflake with 3 or more levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d >= 3 is the number of levels\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to find if n can be represented as (k^d - 1) / (k - 1) for some k > 1 and d >= 3.\n    # n * (k - 1) = k^d - 1\n    # n*k - n = k^d - 1\n    # n*k - k^d = n - 1\n    # k * (n - k^(d-1)) = n - 1\n\n    # Iterate over possible values of d (number of levels)\n    # Since k >= 2, k^(d-1) will grow very fast.\n    # For n = 10^18:\n    # If d = 3, n = 1 + k + k^2 => k approx sqrt(n) = 10^9\n    # If d = 4, n = 1 + k + k^2 + k^3 => k approx cbrt(n) = 10^6\n    # If d = 5, n = 1 + k + k^2 + k^3 + k^4 => k approx n^(1/4) = 10^4.5\n    # ...\n    # k^d <= n, so k <= n^(1/d)\n    # Also, 2^d <= n, so d <= log2(n)\n    # For n = 10^18, log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So d can go up to about 60.\n\n    for d in range(3, 61): # d is number of levels\n        # We are looking for k such that n = (k^d - 1) / (k - 1)\n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k: k^(d-1) < n, so k < n^(1/(d-1)).\n        # A slightly looser but safe upper bound: k <= n^(1/(d-1))\n        # For d=3, k < n^(1/2)\n        # For d=60, k < n^(1/59) approx (10^18)^(1/59) approx 10^(18/59) approx 10^0.3 = 2.\n        # So for d=60, k can only be 2.\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Add a small buffer just in case, though int(n**(1/(d-1))) should be enough\n        \n        # Max value of high: for d=3, high can be around 10^9.\n        # For d=60, high is small.\n        \n        # Avoid high values that might cause overflow for k^d\n        # If high is very large, k^d might overflow even 10^18 for large d.\n        # But k^d should be close to n, so k won't be that large for large d.\n        # k < n^(1/(d-1)) means k^d < n^(d/(d-1)) = n * n^(1/(d-1))\n        # This could be larger than n.\n        # A tighter upper bound for k: k^d - 1 < n * (k-1)\n        # k^d - 1 < n*k - n\n        # k^d - n*k < 1 - n\n        # k(k^(d-1) - n) < 1 - n\n        # If k^(d-1) > n, then k(k^(d-1) - n) > 0, which is not < 1-n.\n        # So k^(d-1) must be <= n.\n        # Thus, k <= n^(1/(d-1)). This is a good upper bound.\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Check for overflow before multiplying for the next term\n                    if term > n // mid: # term * mid > n, potential overflow or exceeds n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow:\n                high = mid - 1\n                continue\n\n            # Now current_sum = 1 + mid + mid^2 + ... + mid^(d-1)\n            # Check if this sum equals n\n            if current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n    \n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # So, n = 1 + k + k*k\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, (4n - 3) must be a perfect square, and (-1 + sqrt(4n - 3)) must be an even positive number.\n    \n    discriminant = 4 * n - 3\n    \n    if discriminant >= 0:\n        sqrt_discriminant = int(math.isqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            k_numerator = -1 + sqrt_discriminant\n            if k_numerator > 0 and k_numerator % 2 == 0:\n                k = k_numerator // 2\n                if k > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: Snowflake with 3 or more levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d >= 3 is the number of levels\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to find if n can be represented as (k^d - 1) / (k - 1) for some k > 1 and d >= 3.\n    # n * (k - 1) = k^d - 1\n    # n*k - n = k^d - 1\n    # n*k - k^d = n - 1\n    # k * (n - k^(d-1)) = n - 1\n\n    # Iterate over possible values of d (number of levels)\n    # Since k >= 2, k^(d-1) will grow very fast.\n    # For n = 10^18:\n    # If d = 3, n = 1 + k + k^2 => k approx sqrt(n) = 10^9\n    # If d = 4, n = 1 + k + k^2 + k^3 => k approx cbrt(n) = 10^6\n    # If d = 5, n = 1 + k + k^2 + k^3 + k^4 => k approx n^(1/4) = 10^4.5\n    # ...\n    # k^d <= n, so k <= n^(1/d)\n    # Also, 2^d <= n, so d <= log2(n)\n    # For n = 10^18, log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So d can go up to about 60.\n\n    for d in range(3, 61): # d is number of levels\n        # We are looking for k such that n = (k^d - 1) / (k - 1)\n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k: k^(d-1) < n, so k < n^(1/(d-1)).\n        # A slightly looser but safe upper bound: k <= n^(1/(d-1))\n        # For d=3, k < n^(1/2)\n        # For d=60, k < n^(1/59) approx (10^18)^(1/59) approx 10^(18/59) approx 10^0.3 = 2.\n        # So for d=60, k can only be 2.\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Add a small buffer just in case, though int(n**(1/(d-1))) should be enough\n        \n        # Max value of high: for d=3, high can be around 10^9.\n        # For d=60, high is small.\n        \n        # Avoid high values that might cause overflow for k^d\n        # If high is very large, k^d might overflow even 10^18 for large d.\n        # But k^d should be close to n, so k won't be that large for large d.\n        # k < n^(1/(d-1)) means k^d < n^(d/(d-1)) = n * n^(1/(d-1))\n        # This could be larger than n.\n        # A tighter upper bound for k: k^d - 1 < n * (k-1)\n        # k^d - 1 < n*k - n\n        # k^d - n*k < 1 - n\n        # k(k^(d-1) - n) < 1 - n\n        # If k^(d-1) > n, then k(k^(d-1) - n) > 0, which is not < 1-n.\n        # So k^(d-1) must be <= n.\n        # Thus, k <= n^(1/(d-1)). This is a good upper bound.\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Check for overflow before multiplying for the next term\n                    if term > n // mid: # term * mid > n, potential overflow or exceeds n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow:\n                high = mid - 1\n                continue\n\n            # Now current_sum = 1 + mid + mid^2 + ... + mid^(d-1)\n            # Check if this sum equals n\n            if current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n    \n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 1603,
        "thoughts_token_count": 0
    }
}