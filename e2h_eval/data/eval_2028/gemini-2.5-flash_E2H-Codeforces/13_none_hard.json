{
    "start": 1758011296.0150898,
    "end": 1758011305.3259814,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 13,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Chord\n\nVasya studies music. He has learned lots of interesting stuff. For example, he knows that there are 12 notes: C, C#, D, D#, E, F, F#, G, G#, A, B, H. He also knows that the notes are repeated cyclically: after H goes C again, and before C stands H. We will consider the C note in the row's beginning and the C note after the H similar and we will identify them with each other. The distance between the notes along the musical scale is measured in tones: between two consecutive notes there's exactly one semitone, that is, 0.5 tone. The distance is taken from the lowest tone to the uppest one, that is, the distance between C and E is 4 semitones and between E and C is 8 semitonesVasya also knows what a chord is. A chord is an unordered set of no less than three notes. However, for now Vasya only works with triads, that is with the chords that consist of exactly three notes. He can already distinguish between two types of triads — major and minor.Let's define a major triad. Let the triad consist of notes X, Y and Z. If we can order the notes so as the distance along the musical scale between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones, then the triad is major. The distance between X and Z, accordingly, equals 7 semitones.A minor triad is different in that the distance between X and Y should be 3 semitones and between Y and Z — 4 semitones.For example, the triad \"C E G\" is major: between C and E are 4 semitones, and between E and G are 3 semitones. And the triplet \"C# B F\" is minor, because if we order the notes as \"B C# F\", than between B and C# will be 3 semitones, and between C# and F — 4 semitones.Help Vasya classify the triad the teacher has given to him.\n\n## Input\nThe only line contains 3 space-separated notes in the above-given notation.\n\n## Output\nPrint \"major\" if the chord is major, \"minor\" if it is minor, and \"strange\" if the teacher gave Vasya some weird chord which is neither major nor minor. Vasya promises you that the answer will always be unambiguous. That is, there are no chords that are both major and minor simultaneously.\n\n## Example\n### Input\n['C E G', 'C# B F', 'A B H']\n\n### Output\n['major', 'minor', 'strange']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    notes_str = input().split()\n\n    note_to_semitones = {\n        \"C\": 0, \"C#\": 1, \"D\": 2, \"D#\": 3, \"E\": 4, \"F\": 5,\n        \"F#\": 6, \"G\": 7, \"G#\": 8, \"A\": 9, \"B\": 10, \"H\": 11\n    }\n\n    semitones_to_note = {v: k for k, v in note_to_semitones.items()}\n\n    notes_semitones = [note_to_semitones[n] for n in notes_str]\n\n    def get_distance(n1, n2):\n        # Distance from n1 to n2 (n1 < n2)\n        # Always positive, from lower to upper\n        return (n2 - n1 + 12) % 12\n\n    # Try all 3 permutations for the root note\n    for i in range(3):\n        x_idx = i\n        y_idx = (i + 1) % 3\n        z_idx = (i + 2) % 3\n\n        x_val = notes_semitones[x_idx]\n        y_val = notes_semitones[y_idx]\n        z_val = notes_semitones[z_idx]\n\n        # Sort the three notes to find the correct X, Y, Z for distance calculation\n        # We need to consider all permutations of the given notes as X, Y, Z\n        # The problem states \"If we can order the notes so as...\"\n        # So we try each of the three input notes as the 'X' (root) of the chord.\n        # Then we calculate distances to the other two.\n\n        # Consider notes_semitones[x_idx] as the root X\n        # The other two notes are notes_semitones[y_idx] and notes_semitones[z_idx]\n\n        # Case 1: X, Y, Z order\n        # Calculate distances relative to X\n        d1 = get_distance(x_val, y_val)\n        d2 = get_distance(x_val, z_val)\n\n        # We need to find the two notes that are at 4 and 7 semitones (major)\n        # or 3 and 7 semitones (minor) from X.\n        # The problem statement: \"distance between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones\"\n        # This implies Y is 4 semitones from X, and Z is 7 semitones from X.\n        # So we need to find two notes among the three given that fit this pattern.\n\n        # Let the three notes be n1, n2, n3 (their semitone values)\n        # Sort them to find the \"base\" note and then check distances.\n        # Or, just iterate through each note as a potential root.\n\n        current_notes = sorted(notes_semitones)\n\n        # Try each note as the potential root (X)\n        for root_note_val in current_notes:\n            # Find the other two notes\n            other_notes = [n for n in current_notes if n != root_note_val]\n            if len(other_notes) < 2: # Handle cases where there might be duplicate notes, though problem implies distinct notes\n                continue\n\n            # Calculate distances from the root_note_val to the other two notes\n            dist1 = get_distance(root_note_val, other_notes[0])\n            dist2 = get_distance(root_note_val, other_notes[1])\n\n            # Check for major triad: (X, X+4, X+7)\n            # The distances from X to Y and X to Z would be 4 and 7.\n            if (dist1 == 4 and dist2 == 7) or (dist1 == 7 and dist2 == 4):\n                print(\"major\")\n                return\n\n            # Check for minor triad: (X, X+3, X+7)\n            # The distances from X to Y and X to Z would be 3 and 7.\n            if (dist1 == 3 and dist2 == 7) or (dist1 == 7 and dist2 == 3):\n                print(\"minor\")\n                return\n\n    print(\"strange\")\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    notes_str = input().split()\n\n    note_to_semitones = {\n        \"C\": 0, \"C#\": 1, \"D\": 2, \"D#\": 3, \"E\": 4, \"F\": 5,\n        \"F#\": 6, \"G\": 7, \"G#\": 8, \"A\": 9, \"B\": 10, \"H\": 11\n    }\n\n    semitones_to_note = {v: k for k, v in note_to_semitones.items()}\n\n    notes_semitones = [note_to_semitones[n] for n in notes_str]\n\n    def get_distance(n1, n2):\n        # Distance from n1 to n2 (n1 < n2)\n        # Always positive, from lower to upper\n        return (n2 - n1 + 12) % 12\n\n    # Try all 3 permutations for the root note\n    for i in range(3):\n        x_idx = i\n        y_idx = (i + 1) % 3\n        z_idx = (i + 2) % 3\n\n        x_val = notes_semitones[x_idx]\n        y_val = notes_semitones[y_idx]\n        z_val = notes_semitones[z_idx]\n\n        # Sort the three notes to find the correct X, Y, Z for distance calculation\n        # We need to consider all permutations of the given notes as X, Y, Z\n        # The problem states \"If we can order the notes so as...\"\n        # So we try each of the three input notes as the 'X' (root) of the chord.\n        # Then we calculate distances to the other two.\n\n        # Consider notes_semitones[x_idx] as the root X\n        # The other two notes are notes_semitones[y_idx] and notes_semitones[z_idx]\n\n        # Case 1: X, Y, Z order\n        # Calculate distances relative to X\n        d1 = get_distance(x_val, y_val)\n        d2 = get_distance(x_val, z_val)\n\n        # We need to find the two notes that are at 4 and 7 semitones (major)\n        # or 3 and 7 semitones (minor) from X.\n        # The problem statement: \"distance between X and Y equals 4 semitones and the distance between Y and Z is 3 semitones\"\n        # This implies Y is 4 semitones from X, and Z is 7 semitones from X.\n        # So we need to find two notes among the three given that fit this pattern.\n\n        # Let the three notes be n1, n2, n3 (their semitone values)\n        # Sort them to find the \"base\" note and then check distances.\n        # Or, just iterate through each note as a potential root.\n\n        current_notes = sorted(notes_semitones)\n\n        # Try each note as the potential root (X)\n        for root_note_val in current_notes:\n            # Find the other two notes\n            other_notes = [n for n in current_notes if n != root_note_val]\n            if len(other_notes) < 2: # Handle cases where there might be duplicate notes, though problem implies distinct notes\n                continue\n\n            # Calculate distances from the root_note_val to the other two notes\n            dist1 = get_distance(root_note_val, other_notes[0])\n            dist2 = get_distance(root_note_val, other_notes[1])\n\n            # Check for major triad: (X, X+4, X+7)\n            # The distances from X to Y and X to Z would be 4 and 7.\n            if (dist1 == 4 and dist2 == 7) or (dist1 == 7 and dist2 == 4):\n                print(\"major\")\n                return\n\n            # Check for minor triad: (X, X+3, X+7)\n            # The distances from X to Y and X to Z would be 3 and 7.\n            if (dist1 == 3 and dist2 == 7) or (dist1 == 7 and dist2 == 3):\n                print(\"minor\")\n                return\n\n    print(\"strange\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 671,
        "completion_token_count": 1026,
        "thoughts_token_count": 0
    }
}