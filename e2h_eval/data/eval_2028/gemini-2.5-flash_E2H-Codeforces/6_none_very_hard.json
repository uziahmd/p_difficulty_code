{
    "start": 1758011277.2689676,
    "end": 1758011286.3080628,
    "start-formatted": "2025-09-16 17:27 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    vouchers = []\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers.append((l, r, cost))\n\n    vouchers.sort()\n\n    min_cost = float('inf')\n\n    # Max coordinate for l, r is 2 * 10^5\n    MAX_COORD = 2 * 10**5\n\n    # min_costs_at_end[i] stores the minimum cost of a voucher that ends at day i\n    # This is not enough, we need to know the duration.\n    # We need to store minimum cost for a given duration ending at day i.\n    # min_cost_for_duration[duration][end_day] = min_cost\n\n    # Let's group vouchers by their start day\n    vouchers_by_start = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_by_start[l].append((r, cost, r - l + 1))\n\n    # This array will store the minimum cost for a voucher of a specific duration\n    # that ends by a certain day.\n    # min_cost_ending_by_day[end_day][duration] = min_cost\n    # Initialize with infinity\n    min_cost_ending_by_day = [[float('inf')] * (x + 1) for _ in range(MAX_COORD + 2)]\n\n    # Iterate through possible end days (from 1 to MAX_COORD)\n    for current_day in range(1, MAX_COORD + 1):\n        # First, propagate minimum costs from the previous day\n        # A voucher ending at current_day-1 also effectively \"ends by\" current_day\n        for duration_val in range(1, x + 1):\n            min_cost_ending_by_day[current_day][duration_val] = \\\n                min(min_cost_ending_by_day[current_day][duration_val],\n                    min_cost_ending_by_day[current_day - 1][duration_val])\n\n        # Now, consider vouchers that start on current_day\n        for r, cost, duration_val in vouchers_by_start[current_day]:\n            if duration_val >= x: # If duration is x or more, it cannot be part of a pair summing to x\n                continue\n\n            # This voucher has duration_val and ends at r.\n            # We want to find a previous voucher that ends before current_day\n            # and has duration x - duration_val.\n            \n            # The second voucher must have duration x - duration_val\n            required_duration = x - duration_val\n            if required_duration <= 0:\n                continue\n\n            # Find the minimum cost of a voucher with required_duration\n            # that ends at or before current_day - 1 (to be disjoint)\n            # We need to check vouchers that end before current_day.\n            # The current voucher starts at current_day.\n            # A previous voucher must end at r_prev < current_day.\n            # So we look for min_cost_ending_by_day[current_day - 1][required_duration]\n            \n            prev_min_cost = min_cost_ending_by_day[current_day - 1][required_duration]\n            \n            if prev_min_cost != float('inf'):\n                min_cost = min(min_cost, cost + prev_min_cost)\n\n            # Update min_cost_ending_by_day for the current voucher itself\n            # This voucher ends at r with cost 'cost' and duration 'duration_val'\n            min_cost_ending_by_day[r][duration_val] = \\\n                min(min_cost_ending_by_day[r][duration_val], cost)\n\n    if min_cost == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(min_cost) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, x = map(int, sys.stdin.readline().split())\n    vouchers = []\n    for _ in range(n):\n        l, r, cost = map(int, sys.stdin.readline().split())\n        vouchers.append((l, r, cost))\n\n    vouchers.sort()\n\n    min_cost = float('inf')\n\n    # Max coordinate for l, r is 2 * 10^5\n    MAX_COORD = 2 * 10**5\n\n    # min_costs_at_end[i] stores the minimum cost of a voucher that ends at day i\n    # This is not enough, we need to know the duration.\n    # We need to store minimum cost for a given duration ending at day i.\n    # min_cost_for_duration[duration][end_day] = min_cost\n\n    # Let's group vouchers by their start day\n    vouchers_by_start = [[] for _ in range(MAX_COORD + 1)]\n    for l, r, cost in vouchers:\n        vouchers_by_start[l].append((r, cost, r - l + 1))\n\n    # This array will store the minimum cost for a voucher of a specific duration\n    # that ends by a certain day.\n    # min_cost_ending_by_day[end_day][duration] = min_cost\n    # Initialize with infinity\n    min_cost_ending_by_day = [[float('inf')] * (x + 1) for _ in range(MAX_COORD + 2)]\n\n    # Iterate through possible end days (from 1 to MAX_COORD)\n    for current_day in range(1, MAX_COORD + 1):\n        # First, propagate minimum costs from the previous day\n        # A voucher ending at current_day-1 also effectively \"ends by\" current_day\n        for duration_val in range(1, x + 1):\n            min_cost_ending_by_day[current_day][duration_val] = \\\n                min(min_cost_ending_by_day[current_day][duration_val],\n                    min_cost_ending_by_day[current_day - 1][duration_val])\n\n        # Now, consider vouchers that start on current_day\n        for r, cost, duration_val in vouchers_by_start[current_day]:\n            if duration_val >= x: # If duration is x or more, it cannot be part of a pair summing to x\n                continue\n\n            # This voucher has duration_val and ends at r.\n            # We want to find a previous voucher that ends before current_day\n            # and has duration x - duration_val.\n            \n            # The second voucher must have duration x - duration_val\n            required_duration = x - duration_val\n            if required_duration <= 0:\n                continue\n\n            # Find the minimum cost of a voucher with required_duration\n            # that ends at or before current_day - 1 (to be disjoint)\n            # We need to check vouchers that end before current_day.\n            # The current voucher starts at current_day.\n            # A previous voucher must end at r_prev < current_day.\n            # So we look for min_cost_ending_by_day[current_day - 1][required_duration]\n            \n            prev_min_cost = min_cost_ending_by_day[current_day - 1][required_duration]\n            \n            if prev_min_cost != float('inf'):\n                min_cost = min(min_cost, cost + prev_min_cost)\n\n            # Update min_cost_ending_by_day for the current voucher itself\n            # This voucher ends at r with cost 'cost' and duration 'duration_val'\n            min_cost_ending_by_day[r][duration_val] = \\\n                min(min_cost_ending_by_day[r][duration_val], cost)\n\n    if min_cost == float('inf'):\n        sys.stdout.write(\"-1\\n\")\n    else:\n        sys.stdout.write(str(min_cost) + \"\\n\")\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 799,
        "completion_token_count": 963,
        "thoughts_token_count": 0
    }
}