{
    "start": 1758018537.2012722,
    "end": 1758018550.596431,
    "start-formatted": "2025-09-16 19:28 KST",
    "end-formatted": "2025-09-16 19:29 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # We need to find if n = 1 + k + k*k for some integer k > 1\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s*s.\n    # And (-1 + s) must be an even positive number greater than 2.\n    # So s must be odd and s > 5.\n    \n    discriminant = 4 * n - 3\n    s = int(math.isqrt(discriminant))\n    if s * s == discriminant:\n        # Check if k is an integer and k > 1\n        if (s - 1) % 2 == 0:\n            k_val = (s - 1) // 2\n            if k_val > 1:\n                print(\"YES\")\n                return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d >= 3\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to find if n = (k^d - 1) / (k - 1) for some integers k > 1 and d >= 3.\n    # n * (k - 1) = k^d - 1\n    # n*k - n = k^d - 1\n    # n*k - k^d = n - 1\n    # k * (n - k^(d-1)) = n - 1\n\n    # Since k > 1 and d >= 3:\n    # Smallest possible sum for d=3: 1 + k + k^2\n    # Smallest possible sum for k=2, d=3: 1 + 2 + 4 = 7\n    # Smallest possible sum for k=2, d=4: 1 + 2 + 4 + 8 = 15\n    # Smallest possible sum for k=2, d=5: 1 + 2 + 4 + 8 + 16 = 31\n    # ...\n    # Smallest possible sum for k=3, d=3: 1 + 3 + 9 = 13\n    # Smallest possible sum for k=3, d=4: 1 + 3 + 9 + 27 = 40\n    \n    # Iterate over possible values of d (number of levels)\n    # Since k >= 2, k^d - 1 >= 2^d - 1\n    # And (k^d - 1) / (k - 1) >= (2^d - 1) / (2 - 1) = 2^d - 1\n    # So n >= 2^d - 1 => 2^d <= n + 1 => d <= log2(n + 1)\n    # Since n <= 10^18, log2(10^18 + 1) approx 18 * log2(10) approx 18 * 3.32 approx 59.79\n    # So d can go up to around 60.\n    \n    for d in range(3, 61): # d is number of levels\n        # We need to find integer k > 1 such that n = (k^d - 1) / (k - 1)\n        # This is equivalent to n*(k-1) = k^d - 1\n        # Or n*k - n = k^d - 1\n        # k^d - n*k + (n - 1) = 0\n        \n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k: k^d - 1 <= n*(k-1) => k^d - 1 < n*k\n        # If k >= n^(1/(d-1)), then k^(d-1) >= n, so k^d >= n*k, which means k^d - n*k >= 0.\n        # More precisely, (k^d - 1) / (k - 1) approx k^(d-1) for large k.\n        # So k^(d-1) approx n => k approx n^(1/(d-1)).\n        # Let's set a safe upper bound: k can't be much larger than n^(1/(d-1)).\n        # For d=3, k approx n^(1/2) = sqrt(n). Max sqrt(10^18) = 10^9.\n        # For d=60, k approx n^(1/59). Max (10^18)^(1/59) approx 10^(18/59) approx 10^0.3 = 2.\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Add some buffer for floating point issues and small d\n        \n        # Clamp high to a reasonable maximum if it's too large (e.g., for d=3)\n        # Max k for d=3 is around sqrt(10^18) = 10^9.\n        # Max k for d=60 is around 2.\n        # The largest k for any d is when d=3, which is 10^9.\n        # For d > 3, k is much smaller.\n        # For example, if k=2, d can be up to 60.\n        # If k=3, d can be up to log3(10^18) approx 18 * log3(10) approx 18 * 2.09 approx 37.\n        # If k=10^9, d must be 3.\n        \n        # A safer upper bound for k for any d:\n        # If k >= 2, (k^d - 1)/(k-1) = 1 + k + ... + k^(d-1)\n        # If d >= 3, k^(d-1) < n. So k < n^(1/(d-1)).\n        # For d=3, k < n^(1/2). For n=10^18, k < 10^9.\n        # For d=60, k < n^(1/59). For n=10^18, k < (10^18)^(1/59) approx 2.09.\n        # So high can be at most 10^9.\n        high = min(high, 10**9 + 7) # A sufficiently large bound for k.\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            # Calculate sum = 1 + mid + mid^2 + ... + mid^(d-1)\n            # This sum can overflow standard integer types if calculated naively.\n            # mid^d can be (10^9)^60 which is too large.\n            # But we are looking for n. So mid^d should be around n*mid.\n            # k^d - 1 = n*(k-1)\n            # k^d approx n*k.\n            # If k is large, k^(d-1) approx n.\n            \n            # Use a safe way to calculate sum or compare.\n            # sum = (mid^d - 1) // (mid - 1)\n            # Check for overflow when calculating mid^d\n            \n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid multiplying term in the last iteration\n                    if n // mid < term: # Check for overflow before multiplication: term * mid > n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # We need to find if n = 1 + k + k*k for some integer k > 1\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s*s.\n    # And (-1 + s) must be an even positive number greater than 2.\n    # So s must be odd and s > 5.\n    \n    discriminant = 4 * n - 3\n    s = int(math.isqrt(discriminant))\n    if s * s == discriminant:\n        # Check if k is an integer and k > 1\n        if (s - 1) % 2 == 0:\n            k_val = (s - 1) // 2\n            if k_val > 1:\n                print(\"YES\")\n                return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d >= 3\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to find if n = (k^d - 1) / (k - 1) for some integers k > 1 and d >= 3.\n    # n * (k - 1) = k^d - 1\n    # n*k - n = k^d - 1\n    # n*k - k^d = n - 1\n    # k * (n - k^(d-1)) = n - 1\n\n    # Since k > 1 and d >= 3:\n    # Smallest possible sum for d=3: 1 + k + k^2\n    # Smallest possible sum for k=2, d=3: 1 + 2 + 4 = 7\n    # Smallest possible sum for k=2, d=4: 1 + 2 + 4 + 8 = 15\n    # Smallest possible sum for k=2, d=5: 1 + 2 + 4 + 8 + 16 = 31\n    # ...\n    # Smallest possible sum for k=3, d=3: 1 + 3 + 9 = 13\n    # Smallest possible sum for k=3, d=4: 1 + 3 + 9 + 27 = 40\n    \n    # Iterate over possible values of d (number of levels)\n    # Since k >= 2, k^d - 1 >= 2^d - 1\n    # And (k^d - 1) / (k - 1) >= (2^d - 1) / (2 - 1) = 2^d - 1\n    # So n >= 2^d - 1 => 2^d <= n + 1 => d <= log2(n + 1)\n    # Since n <= 10^18, log2(10^18 + 1) approx 18 * log2(10) approx 18 * 3.32 approx 59.79\n    # So d can go up to around 60.\n    \n    for d in range(3, 61): # d is number of levels\n        # We need to find integer k > 1 such that n = (k^d - 1) / (k - 1)\n        # This is equivalent to n*(k-1) = k^d - 1\n        # Or n*k - n = k^d - 1\n        # k^d - n*k + (n - 1) = 0\n        \n        # We can use binary search for k.\n        # Lower bound for k is 2.\n        # Upper bound for k: k^d - 1 <= n*(k-1) => k^d - 1 < n*k\n        # If k >= n^(1/(d-1)), then k^(d-1) >= n, so k^d >= n*k, which means k^d - n*k >= 0.\n        # More precisely, (k^d - 1) / (k - 1) approx k^(d-1) for large k.\n        # So k^(d-1) approx n => k approx n^(1/(d-1)).\n        # Let's set a safe upper bound: k can't be much larger than n^(1/(d-1)).\n        # For d=3, k approx n^(1/2) = sqrt(n). Max sqrt(10^18) = 10^9.\n        # For d=60, k approx n^(1/59). Max (10^18)^(1/59) approx 10^(18/59) approx 10^0.3 = 2.\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Add some buffer for floating point issues and small d\n        \n        # Clamp high to a reasonable maximum if it's too large (e.g., for d=3)\n        # Max k for d=3 is around sqrt(10^18) = 10^9.\n        # Max k for d=60 is around 2.\n        # The largest k for any d is when d=3, which is 10^9.\n        # For d > 3, k is much smaller.\n        # For example, if k=2, d can be up to 60.\n        # If k=3, d can be up to log3(10^18) approx 18 * log3(10) approx 18 * 2.09 approx 37.\n        # If k=10^9, d must be 3.\n        \n        # A safer upper bound for k for any d:\n        # If k >= 2, (k^d - 1)/(k-1) = 1 + k + ... + k^(d-1)\n        # If d >= 3, k^(d-1) < n. So k < n^(1/(d-1)).\n        # For d=3, k < n^(1/2). For n=10^18, k < 10^9.\n        # For d=60, k < n^(1/59). For n=10^18, k < (10^18)^(1/59) approx 2.09.\n        # So high can be at most 10^9.\n        high = min(high, 10**9 + 7) # A sufficiently large bound for k.\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            # Calculate sum = 1 + mid + mid^2 + ... + mid^(d-1)\n            # This sum can overflow standard integer types if calculated naively.\n            # mid^d can be (10^9)^60 which is too large.\n            # But we are looking for n. So mid^d should be around n*mid.\n            # k^d - 1 = n*(k-1)\n            # k^d approx n*k.\n            # If k is large, k^(d-1) approx n.\n            \n            # Use a safe way to calculate sum or compare.\n            # sum = (mid^d - 1) // (mid - 1)\n            # Check for overflow when calculating mid^d\n            \n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid multiplying term in the last iteration\n                    if n // mid < term: # Check for overflow before multiplication: term * mid > n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 559,
        "completion_token_count": 2097,
        "thoughts_token_count": 0
    }
}