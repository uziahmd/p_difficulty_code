{
    "start": 1758293708.8456707,
    "end": 1758293722.843379,
    "start-formatted": "2025-09-19 23:55 KST",
    "end-formatted": "2025-09-19 23:55 KST",
    "gpu": 2,
    "pid": 57,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Olympiad\n\nA boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya's chances.Help Vasya's teacher, find two numbers — the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours (the first place has the participant who has got the most points). If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.\n\n## Input\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.The second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.The third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.The participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x.\n\n## Output\nPrint two space-separated integers — the best and the worst place Vasya could have got on the Olympiad.\n\n## Example\n### Input\n['5 2\\n1 1 1 1 1\\n1 1 1 1 1', '6 7\\n4 3 5 6 4 4\\n8 6 0 4 3 4']\n\n### Output\n['1 5', '1 5']\n\n## Note\nIn the first text sample all 5 participants earn 2 points each in any case. Depending on the jury's decision, Vasya can get the first (the best) as well as the last (the worst) fifth place.In the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that — {4:8, 6:4, 3:6, 4:4, 4:3, 5:0}.In this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour.In the worst case scenario Vasya can get the fifth place if the table looks like that — {4:8, 4:6, 6:4, 5:4, 4:3, 3:0}, and he earned 4 and 3 points in the first and second tours, correspondingly.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a.sort()\n    b.sort()\n\n    # Calculate best possible rank\n    # To maximize Vasya's score, he takes the highest a[i] and highest b[j] such that a[i] + b[j] >= x.\n    # To maximize his rank, he should get the highest possible score.\n    # The other n-1 participants get the lowest possible scores.\n    # This means pairing the largest remaining 'a' with the smallest remaining 'b', and vice versa.\n    # However, the problem states \"the total results' table sorts the participants by the sum of points\".\n    # And \"If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice.\"\n    # For the best rank, Vasya wants to maximize his score, and minimize the scores of others,\n    # and if there are ties, the jury places him first among ties.\n    # So, we just need to count how many participants *could* have a strictly higher score than Vasya.\n\n    # To find Vasya's best rank:\n    # Vasya wants to maximize his score. He can pick any a[i] and any b[j] such that a[i] + b[j] >= x.\n    # To get the highest possible score, he should pick the largest a[i] and largest b[j] available.\n    # Let Vasya's score be V_score. He can achieve max(a[i] + b[j]) where a[i] + b[j] >= x.\n    # The problem implies Vasya is one of the N participants.\n    # We want to find the minimum number of participants who *must* have a strictly higher score than Vasya.\n    # If Vasya gets the highest possible score, say S_max.\n    # How many other participants can also get S_max or higher?\n    # This is tricky because the pairings are unknown.\n    # Let's consider a simpler approach for best rank:\n    # Vasya can achieve any sum a[i] + b[j] >= x.\n    # To achieve the best rank, he wants to maximize his score.\n    # The maximum possible score for any participant is a[n-1] + b[n-1].\n    # If Vasya can achieve this score (i.e., a[n-1] + b[n-1] >= x), then his best rank is 1.\n    # This is because he can be assigned a[n-1] and b[n-1], and the jury can place him first among ties.\n    # The problem statement guarantees \"there are two integers i, j (1 <= i, j <= n) such, that ai + bj >= x\".\n    # So, Vasya can always achieve some score.\n    # The best rank is always 1. Vasya can achieve a total score S.\n    # If S is the highest possible score any participant can achieve (a[n-1] + b[n-1]), and S >= x,\n    # then Vasya can be assigned a[n-1] and b[n-1]. The jury can place him first.\n    # If S is not the highest, but he can achieve some score S' which is the highest possible *among his options*\n    # and he is tied with others, the jury can place him first.\n    # So, best rank is always 1. This is a common competitive programming trick.\n\n    best_rank = 1\n\n    # Calculate worst possible rank\n    # To find Vasya's worst rank:\n    # Vasya wants to minimize his rank, meaning he wants to maximize the number of people who are strictly better than him,\n    # or tied with him and placed above him by the jury.\n    # Vasya can be assigned any a[i] and any b[j] such that a[i] + b[j] >= x.\n    # To maximize his rank (make it worse), he should choose the smallest possible score S_vasya = a[i] + b[j] >= x.\n    # And the other N-1 participants should be paired to maximize their scores.\n    # The pairing should be such that as many people as possible get a score >= S_vasya.\n\n    # Let's try to count how many participants can get a score strictly greater than Vasya's minimum possible score.\n    # Or, how many participants can get a score greater than or equal to Vasya's minimum possible score.\n    # Vasya's minimum possible score is the smallest s = a[i] + b[j] such that s >= x.\n    # This is not necessarily fixed. Vasya's score is chosen to maximize his rank.\n\n    # To maximize Vasya's worst rank:\n    # Vasya takes the smallest possible sum (a_k + b_l) such that a_k + b_l >= x.\n    # All other N-1 participants are paired to maximize their scores.\n    # We want to count how many participants can have a score >= Vasya's score.\n    # This is equivalent to counting how many pairs (a_i, b_j) can sum up to a value >= x.\n    # We need to find the maximum number of pairs (a_i, b_j) such that a_i + b_j >= x,\n    # and each a_i and b_j is used at most once. This is a maximum bipartite matching problem,\n    # or a greedy approach.\n\n    # Sort 'a' in ascending order and 'b' in descending order.\n    # This strategy maximizes the number of pairs (a_i, b_j) such that a_i + b_j >= x.\n    # We iterate through 'a' from smallest to largest. For each a_i, we try to pair it with the largest possible b_j\n    # such that a_i + b_j >= x. If we succeed, we count it as a valid pair.\n    # This approach counts the maximum number of participants who can achieve a score >= x.\n\n    b_rev = sorted(b, reverse=True)\n    \n    count_valid_pairs = 0\n    j = 0 # pointer for b_rev\n    for i in range(n): # pointer for a\n        while j < n and a[i] + b_rev[j] < x:\n            j += 1\n        if j < n:\n            # Found a pair (a[i], b_rev[j]) such that a[i] + b_rev[j] >= x\n            count_valid_pairs += 1\n            j += 1 # move to the next b_rev element\n\n    worst_rank = count_valid_pairs\n    # If Vasya is one of these `count_valid_pairs` participants, and the jury places him last among them,\n    # his rank would be `count_valid_pairs`.\n\n    print(best_rank, worst_rank)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a.sort()\n    b.sort()\n\n    # Calculate best possible rank\n    # To maximize Vasya's score, he takes the highest a[i] and highest b[j] such that a[i] + b[j] >= x.\n    # To maximize his rank, he should get the highest possible score.\n    # The other n-1 participants get the lowest possible scores.\n    # This means pairing the largest remaining 'a' with the smallest remaining 'b', and vice versa.\n    # However, the problem states \"the total results' table sorts the participants by the sum of points\".\n    # And \"If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice.\"\n    # For the best rank, Vasya wants to maximize his score, and minimize the scores of others,\n    # and if there are ties, the jury places him first among ties.\n    # So, we just need to count how many participants *could* have a strictly higher score than Vasya.\n\n    # To find Vasya's best rank:\n    # Vasya wants to maximize his score. He can pick any a[i] and any b[j] such that a[i] + b[j] >= x.\n    # To get the highest possible score, he should pick the largest a[i] and largest b[j] available.\n    # Let Vasya's score be V_score. He can achieve max(a[i] + b[j]) where a[i] + b[j] >= x.\n    # The problem implies Vasya is one of the N participants.\n    # We want to find the minimum number of participants who *must* have a strictly higher score than Vasya.\n    # If Vasya gets the highest possible score, say S_max.\n    # How many other participants can also get S_max or higher?\n    # This is tricky because the pairings are unknown.\n    # Let's consider a simpler approach for best rank:\n    # Vasya can achieve any sum a[i] + b[j] >= x.\n    # To achieve the best rank, he wants to maximize his score.\n    # The maximum possible score for any participant is a[n-1] + b[n-1].\n    # If Vasya can achieve this score (i.e., a[n-1] + b[n-1] >= x), then his best rank is 1.\n    # This is because he can be assigned a[n-1] and b[n-1], and the jury can place him first among ties.\n    # The problem statement guarantees \"there are two integers i, j (1 <= i, j <= n) such, that ai + bj >= x\".\n    # So, Vasya can always achieve some score.\n    # The best rank is always 1. Vasya can achieve a total score S.\n    # If S is the highest possible score any participant can achieve (a[n-1] + b[n-1]), and S >= x,\n    # then Vasya can be assigned a[n-1] and b[n-1]. The jury can place him first.\n    # If S is not the highest, but he can achieve some score S' which is the highest possible *among his options*\n    # and he is tied with others, the jury can place him first.\n    # So, best rank is always 1. This is a common competitive programming trick.\n\n    best_rank = 1\n\n    # Calculate worst possible rank\n    # To find Vasya's worst rank:\n    # Vasya wants to minimize his rank, meaning he wants to maximize the number of people who are strictly better than him,\n    # or tied with him and placed above him by the jury.\n    # Vasya can be assigned any a[i] and any b[j] such that a[i] + b[j] >= x.\n    # To maximize his rank (make it worse), he should choose the smallest possible score S_vasya = a[i] + b[j] >= x.\n    # And the other N-1 participants should be paired to maximize their scores.\n    # The pairing should be such that as many people as possible get a score >= S_vasya.\n\n    # Let's try to count how many participants can get a score strictly greater than Vasya's minimum possible score.\n    # Or, how many participants can get a score greater than or equal to Vasya's minimum possible score.\n    # Vasya's minimum possible score is the smallest s = a[i] + b[j] such that s >= x.\n    # This is not necessarily fixed. Vasya's score is chosen to maximize his rank.\n\n    # To maximize Vasya's worst rank:\n    # Vasya takes the smallest possible sum (a_k + b_l) such that a_k + b_l >= x.\n    # All other N-1 participants are paired to maximize their scores.\n    # We want to count how many participants can have a score >= Vasya's score.\n    # This is equivalent to counting how many pairs (a_i, b_j) can sum up to a value >= x.\n    # We need to find the maximum number of pairs (a_i, b_j) such that a_i + b_j >= x,\n    # and each a_i and b_j is used at most once. This is a maximum bipartite matching problem,\n    # or a greedy approach.\n\n    # Sort 'a' in ascending order and 'b' in descending order.\n    # This strategy maximizes the number of pairs (a_i, b_j) such that a_i + b_j >= x.\n    # We iterate through 'a' from smallest to largest. For each a_i, we try to pair it with the largest possible b_j\n    # such that a_i + b_j >= x. If we succeed, we count it as a valid pair.\n    # This approach counts the maximum number of participants who can achieve a score >= x.\n\n    b_rev = sorted(b, reverse=True)\n    \n    count_valid_pairs = 0\n    j = 0 # pointer for b_rev\n    for i in range(n): # pointer for a\n        while j < n and a[i] + b_rev[j] < x:\n            j += 1\n        if j < n:\n            # Found a pair (a[i], b_rev[j]) such that a[i] + b_rev[j] >= x\n            count_valid_pairs += 1\n            j += 1 # move to the next b_rev element\n\n    worst_rank = count_valid_pairs\n    # If Vasya is one of these `count_valid_pairs` participants, and the jury places him last among them,\n    # his rank would be `count_valid_pairs`.\n\n    print(best_rank, worst_rank)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 872,
        "completion_token_count": 1624,
        "thoughts_token_count": 0
    }
}