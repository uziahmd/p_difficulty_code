{
    "start": 1758011303.143541,
    "end": 1758011322.647596,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4*(1 - n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    # We need 4n - 3 to be a perfect square.\n    # Let D = 4n - 3.\n    # k = (-1 + sqrt(D)) / 2\n    # For k to be an integer > 1:\n    # 1. D must be a perfect square.\n    # 2. sqrt(D) must be odd (so -1 + sqrt(D) is even).\n    # 3. (-1 + sqrt(D)) / 2 > 1 => -1 + sqrt(D) > 2 => sqrt(D) > 3 => D > 9.\n\n    D = 4 * n - 3\n    if D > 0:\n        sqrt_D_float = math.isqrt(D)\n        if sqrt_D_float * sqrt_D_float == D:\n            # D is a perfect square\n            if (sqrt_D_float - 1) % 2 == 0:\n                k = (sqrt_D_float - 1) // 2\n                if k > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d is the number of levels\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need n = (k^d - 1) / (k - 1) for some k > 1 and d >= 3.\n\n    # Iterate on d (number of levels)\n    # d can be at most ~60 for k=2 (2^60 approx 10^18)\n    # d can be at most ~3 for k=10^6 (1+k+k^2 approx 10^12, 1+k+k^2+k^3 approx 10^18)\n    # d can be at most ~2 for k=10^9 (1+k+k^2 approx 10^18)\n\n    # Maximum d for k=2: 2^d - 1 = n * (2-1) = n. So d approx log2(n).\n    # log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79. So d up to 60.\n    \n    # For a fixed d, we need to find if there exists an integer k > 1 such that\n    # n * (k - 1) = k^d - 1\n    # n * k - n = k^d - 1\n    # k^d - n*k + (n - 1) = 0\n\n    # We can use binary search for k for each d.\n    # k must be > 1.\n    # Maximum k for d=3: k^3 approx n. So k approx n^(1/3).\n    # n^(1/3) for 10^18 is 10^6.\n    # Maximum k for d=60: k^60 approx n. So k approx n^(1/60).\n    # (10^18)^(1/60) = 10^(18/60) = 10^(0.3) approx 2.\n\n    # Smallest k is 2.\n    # Largest possible k: if d=3, k approx n^(1/3). Max k is 10^6.\n    # If d=2, k approx sqrt(n). Max k is 10^9. (Already handled by quadratic formula)\n    # The smallest d we need to check is 3.\n\n    for d in range(3, 61): # d can go up to 60 for k=2\n        # Binary search for k\n        # k_min = 2 (smallest possible k)\n        # k_max = n^(1/(d-1)) + 2 (upper bound for k, since k^(d-1) < n, k < n^(1/(d-1)))\n        # A tighter upper bound: k^d - 1 < n(k-1) => k^d < nk => k^(d-1) < n => k < n^(1/(d-1))\n        # Max k for d=3 is 10^6.\n        # Max k for d=60 is 2.\n        \n        # A simple upper bound for k is n. But we can do better.\n        # k_upper_bound = math.isqrt(n) + 2 # For d=3, k^3 approx n, so k approx n^(1/3). isqrt(n) is too large.\n        # For d=3, k_max = 10^6.\n        # For d=4, k_max = (10^18)^(1/3) approx 10^4.5\n        # For d=60, k_max = (10^18)^(1/59) approx 2.\n        \n        # A safe upper bound for k is n^(1/3) + 2 for d >= 3.\n        # (10^18)^(1/3) = 10^6. So k_high can be 10^6 + 2.\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Upper bound for k. If k^(d-1) > n, then sum will be too large.\n        # Ensure high is not excessively large. Max k for d=3 is 10^6.\n        high = min(high, 2 * 10**6) # Cap high to avoid overflow with k^d for very large n\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            # Calculate sum = (mid^d - 1) / (mid - 1)\n            # Need to be careful with overflow for mid^d.\n            # mid^d can be up to (10^6)^3 = 10^18.\n            # For d=60, mid=2, 2^60 is 1.15 * 10^18. This fits in 64-bit integer.\n            \n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid multiplying in last iteration\n                    if n // mid < term: # Check for overflow before multiplication: term * mid > n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow:\n                # current_sum is too large, k is too large\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # n = 1 + k + k^2\n    # k^2 + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 + sqrt(1 - 4*(1 - n))) / 2\n    # k = (-1 + sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 + sqrt(4n - 3)) / 2\n    \n    # We need 4n - 3 to be a perfect square.\n    # Let D = 4n - 3.\n    # k = (-1 + sqrt(D)) / 2\n    # For k to be an integer > 1:\n    # 1. D must be a perfect square.\n    # 2. sqrt(D) must be odd (so -1 + sqrt(D) is even).\n    # 3. (-1 + sqrt(D)) / 2 > 1 => -1 + sqrt(D) > 2 => sqrt(D) > 3 => D > 9.\n\n    D = 4 * n - 3\n    if D > 0:\n        sqrt_D_float = math.isqrt(D)\n        if sqrt_D_float * sqrt_D_float == D:\n            # D is a perfect square\n            if (sqrt_D_float - 1) % 2 == 0:\n                k = (sqrt_D_float - 1) // 2\n                if k > 1:\n                    print(\"YES\")\n                    return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d is the number of levels\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need n = (k^d - 1) / (k - 1) for some k > 1 and d >= 3.\n\n    # Iterate on d (number of levels)\n    # d can be at most ~60 for k=2 (2^60 approx 10^18)\n    # d can be at most ~3 for k=10^6 (1+k+k^2 approx 10^12, 1+k+k^2+k^3 approx 10^18)\n    # d can be at most ~2 for k=10^9 (1+k+k^2 approx 10^18)\n\n    # Maximum d for k=2: 2^d - 1 = n * (2-1) = n. So d approx log2(n).\n    # log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79. So d up to 60.\n    \n    # For a fixed d, we need to find if there exists an integer k > 1 such that\n    # n * (k - 1) = k^d - 1\n    # n * k - n = k^d - 1\n    # k^d - n*k + (n - 1) = 0\n\n    # We can use binary search for k for each d.\n    # k must be > 1.\n    # Maximum k for d=3: k^3 approx n. So k approx n^(1/3).\n    # n^(1/3) for 10^18 is 10^6.\n    # Maximum k for d=60: k^60 approx n. So k approx n^(1/60).\n    # (10^18)^(1/60) = 10^(18/60) = 10^(0.3) approx 2.\n\n    # Smallest k is 2.\n    # Largest possible k: if d=3, k approx n^(1/3). Max k is 10^6.\n    # If d=2, k approx sqrt(n). Max k is 10^9. (Already handled by quadratic formula)\n    # The smallest d we need to check is 3.\n\n    for d in range(3, 61): # d can go up to 60 for k=2\n        # Binary search for k\n        # k_min = 2 (smallest possible k)\n        # k_max = n^(1/(d-1)) + 2 (upper bound for k, since k^(d-1) < n, k < n^(1/(d-1)))\n        # A tighter upper bound: k^d - 1 < n(k-1) => k^d < nk => k^(d-1) < n => k < n^(1/(d-1))\n        # Max k for d=3 is 10^6.\n        # Max k for d=60 is 2.\n        \n        # A simple upper bound for k is n. But we can do better.\n        # k_upper_bound = math.isqrt(n) + 2 # For d=3, k^3 approx n, so k approx n^(1/3). isqrt(n) is too large.\n        # For d=3, k_max = 10^6.\n        # For d=4, k_max = (10^18)^(1/3) approx 10^4.5\n        # For d=60, k_max = (10^18)^(1/59) approx 2.\n        \n        # A safe upper bound for k is n^(1/3) + 2 for d >= 3.\n        # (10^18)^(1/3) = 10^6. So k_high can be 10^6 + 2.\n        \n        low = 2\n        high = int(n**(1/(d-1))) + 2 # Upper bound for k. If k^(d-1) > n, then sum will be too large.\n        # Ensure high is not excessively large. Max k for d=3 is 10^6.\n        high = min(high, 2 * 10**6) # Cap high to avoid overflow with k^d for very large n\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            # Calculate sum = (mid^d - 1) / (mid - 1)\n            # Need to be careful with overflow for mid^d.\n            # mid^d can be up to (10^6)^3 = 10^18.\n            # For d=60, mid=2, 2^60 is 1.15 * 10^18. This fits in 64-bit integer.\n            \n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid multiplying in last iteration\n                    if n // mid < term: # Check for overflow before multiplication: term * mid > n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow:\n                # current_sum is too large, k is too large\n                high = mid - 1\n            elif current_sum == n:\n                print(\"YES\")\n                return\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum > n\n                high = mid - 1\n\n    print(\"NO\")\n\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 568,
        "completion_token_count": 1865,
        "thoughts_token_count": 0
    }
}