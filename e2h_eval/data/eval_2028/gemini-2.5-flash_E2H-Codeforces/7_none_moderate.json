{
    "start": 1758011309.4379785,
    "end": 1758011328.9449933,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # We need to find if n = 1 + k + k*k for some integer k > 1.\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s*s.\n    # s = sqrt(4n - 3)\n    # Then k = (-1 + s) / 2 (since k > 0)\n    # We need s to be an integer, and (-1 + s) to be an even number > 2.\n    # This means s must be odd and s > 5.\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    s_float = math.isqrt(discriminant)\n    \n    if s_float * s_float == discriminant:\n        # s_float is an integer, let's call it s\n        s = s_float\n        if (s - 1) % 2 == 0:\n            k = (s - 1) // 2\n            if k > 1:\n                print(\"YES\")\n                return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d >= 3\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to find if n = (k^d - 1) / (k - 1) for some integers k > 1 and d >= 3.\n    # n * (k - 1) = k^d - 1\n    # n * k - n = k^d - 1\n    # n * k - k^d = n - 1\n    # k * (n - k^(d-1)) = n - 1\n\n    # Since k > 1 and d >= 3, the minimum number of terms is 3 (1, k, k^2).\n    # So n = 1 + k + k^2 + ... + k^(d-1)\n    # For d = 3, n = 1 + k + k^2. We already checked this.\n    # For d = 4, n = 1 + k + k^2 + k^3.\n    # For d = 5, n = 1 + k + k^2 + k^3 + k^4.\n    # ...\n    # Maximum possible d:\n    # Smallest k is 2.\n    # If k = 2, n = 2^d - 1.\n    # So 2^d = n + 1.\n    # d = log2(n + 1).\n    # Since n <= 10^18, n+1 approx 10^18.\n    # log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So d can go up to about 60.\n\n    # Iterate over possible values of d (number of levels in the snowflake)\n    # d starts from 3 (since d=2 is handled by quadratic formula)\n    # The sum is 1 + k + k^2 + ... + k^(d-1).\n    # Since k >= 2, the sum is at least 1 + 2 + 2^2 + ... + 2^(d-1) = 2^d - 1.\n    # So 2^d - 1 <= n => 2^d <= n + 1 => d <= log2(n + 1).\n    # We can iterate d from 3 up to around 60.\n    \n    # For a fixed d, we need to find k such that sum = n.\n    # The function f(k) = 1 + k + k^2 + ... + k^(d-1) is monotonically increasing for k > 1.\n    # We can use binary search for k.\n    # Lower bound for k is 2.\n    # Upper bound for k: k^(d-1) < n => k < n^(1/(d-1)).\n    # For d=3, k < n^(1/2) = sqrt(n).\n    # For d=60, k < n^(1/59).\n    # Max k is sqrt(10^18) = 10^9.\n    \n    for d in range(3, 61): # d from 3 to log2(10^18) approx 60\n        low = 2\n        high = int(n**(1/(d-1))) + 2 # A bit of buffer for high\n        # Ensure high is not too large for potential overflow in power calculation\n        # If k^(d-1) exceeds n, then k is too large.\n        # k_max_estimate = int(n**(1/(d-1)))\n        # high = min(k_max_estimate + 2, 2 * 10**9) # Cap high to avoid overflow, e.g. 2 * 10^9 is safe for k^2\n\n        # A tighter upper bound for k for n = (k^d - 1) / (k - 1)\n        # n > k^(d-1)\n        # k < n^(1/(d-1))\n        # high = int(n**(1/(d-1))) + 2 # Add small buffer\n        # A more robust upper bound: if k=2, 2^d-1 = n. If k=n, 1+n = n.\n        # Max k for d=3 is sqrt(n) approx 10^9. Max k for d=60 is n^(1/59) approx 2.\n        # So high can be around 10^9.\n        # Max k can be 10^9. For d=3, k^2 approx 10^18.\n        # For d=4, k^3 approx 10^18, k approx 10^6.\n        # For d=60, k approx 2.\n        \n        # A safe upper bound for k is n, but that's too large for binary search.\n        # A better upper bound is sqrt(n) for d=3, and much smaller for larger d.\n        # We can use n^(1/(d-1)) as a loose upper bound.\n        # max_k_for_d = int(n**(1.0/(d-1))) + 2\n        # high = min(max_k_for_d, 2 * 10**9) # Cap to avoid issues, though 10^9 is enough for k^2\n        # The largest k for d=3 is sqrt(10^18) = 10^9.\n        # The largest k for d=60 is 2.\n        # So high can be around 10^9.\n\n        # Let's set high to a value that covers all possible k values without overflowing.\n        # For k^d, if k=10^9, d=3, k^3 = 10^27 (overflow).\n        # We need to be careful with k^d calculation.\n        # The sum is 1 + k + k^2 + ... + k^(d-1).\n        # If k is large, say 10^9, then d must be small, d=3. k^2 is 10^18.\n        # If d is large, say 60, then k must be small, k=2. 2^60 is 10^18.\n        # So we can cap high based on the maximum value of k that would not exceed n\n        # when raised to the power d-1.\n        \n        # Max k for d=3 is roughly 10^9.\n        # Max k for d=4 is roughly 10^6.\n        # Max k for d=5 is roughly 10^(18/4) = 10^4.5.\n        # Max k for d=6 is roughly 10^(18/5) = 10^3.6.\n        # Max k for d=60 is roughly 2.\n        # So a safe upper bound for k in binary search is 10^9 + 7.\n        high = int(n**(1.0/(d-1))) + 7\n        if d == 3: # Special case for d=3, k can be up to 10^9\n            high = int(math.sqrt(n)) + 7\n        \n        # Make sure high is at least low\n        high = max(high, low)\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid overflow on last multiplication\n                    if n // mid < term: # Check for potential overflow before multiplication\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # We need to find if n = 1 + k + k*k for some integer k > 1.\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s*s.\n    # s = sqrt(4n - 3)\n    # Then k = (-1 + s) / 2 (since k > 0)\n    # We need s to be an integer, and (-1 + s) to be an even number > 2.\n    # This means s must be odd and s > 5.\n    \n    # Check if 4n - 3 is a perfect square\n    discriminant = 4 * n - 3\n    s_float = math.isqrt(discriminant)\n    \n    if s_float * s_float == discriminant:\n        # s_float is an integer, let's call it s\n        s = s_float\n        if (s - 1) % 2 == 0:\n            k = (s - 1) // 2\n            if k > 1:\n                print(\"YES\")\n                return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^(d-1) where d >= 3\n    # This is a geometric series sum: (k^d - 1) / (k - 1)\n    # We need to find if n = (k^d - 1) / (k - 1) for some integers k > 1 and d >= 3.\n    # n * (k - 1) = k^d - 1\n    # n * k - n = k^d - 1\n    # n * k - k^d = n - 1\n    # k * (n - k^(d-1)) = n - 1\n\n    # Since k > 1 and d >= 3, the minimum number of terms is 3 (1, k, k^2).\n    # So n = 1 + k + k^2 + ... + k^(d-1)\n    # For d = 3, n = 1 + k + k^2. We already checked this.\n    # For d = 4, n = 1 + k + k^2 + k^3.\n    # For d = 5, n = 1 + k + k^2 + k^3 + k^4.\n    # ...\n    # Maximum possible d:\n    # Smallest k is 2.\n    # If k = 2, n = 2^d - 1.\n    # So 2^d = n + 1.\n    # d = log2(n + 1).\n    # Since n <= 10^18, n+1 approx 10^18.\n    # log2(10^18) = 18 * log2(10) approx 18 * 3.32 = 59.79.\n    # So d can go up to about 60.\n\n    # Iterate over possible values of d (number of levels in the snowflake)\n    # d starts from 3 (since d=2 is handled by quadratic formula)\n    # The sum is 1 + k + k^2 + ... + k^(d-1).\n    # Since k >= 2, the sum is at least 1 + 2 + 2^2 + ... + 2^(d-1) = 2^d - 1.\n    # So 2^d - 1 <= n => 2^d <= n + 1 => d <= log2(n + 1).\n    # We can iterate d from 3 up to around 60.\n    \n    # For a fixed d, we need to find k such that sum = n.\n    # The function f(k) = 1 + k + k^2 + ... + k^(d-1) is monotonically increasing for k > 1.\n    # We can use binary search for k.\n    # Lower bound for k is 2.\n    # Upper bound for k: k^(d-1) < n => k < n^(1/(d-1)).\n    # For d=3, k < n^(1/2) = sqrt(n).\n    # For d=60, k < n^(1/59).\n    # Max k is sqrt(10^18) = 10^9.\n    \n    for d in range(3, 61): # d from 3 to log2(10^18) approx 60\n        low = 2\n        high = int(n**(1/(d-1))) + 2 # A bit of buffer for high\n        # Ensure high is not too large for potential overflow in power calculation\n        # If k^(d-1) exceeds n, then k is too large.\n        # k_max_estimate = int(n**(1/(d-1)))\n        # high = min(k_max_estimate + 2, 2 * 10**9) # Cap high to avoid overflow, e.g. 2 * 10^9 is safe for k^2\n\n        # A tighter upper bound for k for n = (k^d - 1) / (k - 1)\n        # n > k^(d-1)\n        # k < n^(1/(d-1))\n        # high = int(n**(1/(d-1))) + 2 # Add small buffer\n        # A more robust upper bound: if k=2, 2^d-1 = n. If k=n, 1+n = n.\n        # Max k for d=3 is sqrt(n) approx 10^9. Max k for d=60 is n^(1/59) approx 2.\n        # So high can be around 10^9.\n        # Max k can be 10^9. For d=3, k^2 approx 10^18.\n        # For d=4, k^3 approx 10^18, k approx 10^6.\n        # For d=60, k approx 2.\n        \n        # A safe upper bound for k is n, but that's too large for binary search.\n        # A better upper bound is sqrt(n) for d=3, and much smaller for larger d.\n        # We can use n^(1/(d-1)) as a loose upper bound.\n        # max_k_for_d = int(n**(1.0/(d-1))) + 2\n        # high = min(max_k_for_d, 2 * 10**9) # Cap to avoid issues, though 10^9 is enough for k^2\n        # The largest k for d=3 is sqrt(10^18) = 10^9.\n        # The largest k for d=60 is 2.\n        # So high can be around 10^9.\n\n        # Let's set high to a value that covers all possible k values without overflowing.\n        # For k^d, if k=10^9, d=3, k^3 = 10^27 (overflow).\n        # We need to be careful with k^d calculation.\n        # The sum is 1 + k + k^2 + ... + k^(d-1).\n        # If k is large, say 10^9, then d must be small, d=3. k^2 is 10^18.\n        # If d is large, say 60, then k must be small, k=2. 2^60 is 10^18.\n        # So we can cap high based on the maximum value of k that would not exceed n\n        # when raised to the power d-1.\n        \n        # Max k for d=3 is roughly 10^9.\n        # Max k for d=4 is roughly 10^6.\n        # Max k for d=5 is roughly 10^(18/4) = 10^4.5.\n        # Max k for d=6 is roughly 10^(18/5) = 10^3.6.\n        # Max k for d=60 is roughly 2.\n        # So a safe upper bound for k in binary search is 10^9 + 7.\n        high = int(n**(1.0/(d-1))) + 7\n        if d == 3: # Special case for d=3, k can be up to 10^9\n            high = int(math.sqrt(n)) + 7\n        \n        # Make sure high is at least low\n        high = max(high, low)\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d):\n                current_sum += term\n                if _ < d - 1: # Avoid overflow on last multiplication\n                    if n // mid < term: # Check for potential overflow before multiplication\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 2394,
        "thoughts_token_count": 0
    }
}