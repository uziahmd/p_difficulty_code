{
    "start": 1758011274.3299432,
    "end": 1758011283.0124032,
    "start-formatted": "2025-09-16 17:27 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\ndef solve():\n    n, k, l, c, d, p, nl, np = map(int, input().split())\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate total grams of salt available\n    total_salt_grams = p\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = total_salt_grams // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these\n    # divided by the number of friends, but since we already divided by n in each calculation,\n    # we just need the minimum of the individual limits.\n    # No, the problem states \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n    # And \"The friends want to make as many toasts as they can, provided they all drink the same amount.\"\n    # This means if they make X toasts, each friend consumes X * nl drink, X * 1 lime slice, X * np salt.\n    # Total consumption for X toasts for all N friends:\n    # Drink: N * X * nl\n    # Lime: N * X * 1\n    # Salt: N * X * np\n\n    # Let's recalculate based on total available resources and total needed per toast for the group.\n\n    # Total toasts possible based on drink for the entire group:\n    # Each toast requires nl ml of drink for ONE person.\n    # For N people to make ONE toast, they need N * nl ml of drink.\n    # So, total_drink_ml / (N * nl) is the number of toasts the GROUP can make.\n    toasts_from_drink_group = total_drink_ml // (nl * n)\n\n    # Total toasts possible based on lime for the entire group:\n    # Each toast requires 1 slice of lime for ONE person.\n    # For N people to make ONE toast, they need N * 1 slices of lime.\n    # So, total_lime_slices / (1 * N) is the number of toasts the GROUP can make.\n    toasts_from_lime_group = total_lime_slices // n\n\n    # Total toasts possible based on salt for the entire group:\n    # Each toast requires np grams of salt for ONE person.\n    # For N people to make ONE toast, they need N * np grams of salt.\n    # So, total_salt_grams / (N * np) is the number of toasts the GROUP can make.\n    toasts_from_salt_group = total_salt_grams // (np * n)\n\n    # The number of toasts the group can make is limited by the minimum of these three.\n    # And since all friends drink the same amount, this minimum is the number of toasts each friend can make.\n    result = min(toasts_from_drink_group, toasts_from_lime_group, toasts_from_salt_group)\n\n    print(result)\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "def solve():\n    n, k, l, c, d, p, nl, np = map(int, input().split())\n\n    # Calculate total milliliters of drink available\n    total_drink_ml = k * l\n    # Calculate how many toasts can be made based on drink\n    toasts_from_drink = total_drink_ml // (n * nl)\n\n    # Calculate total slices of lime available\n    total_lime_slices = c * d\n    # Calculate how many toasts can be made based on lime\n    toasts_from_lime = total_lime_slices // n\n\n    # Calculate total grams of salt available\n    total_salt_grams = p\n    # Calculate how many toasts can be made based on salt\n    toasts_from_salt = total_salt_grams // (n * np)\n\n    # The number of toasts each friend can make is limited by the minimum of these\n    # divided by the number of friends, but since we already divided by n in each calculation,\n    # we just need the minimum of the individual limits.\n    # No, the problem states \"each friend needs nl milliliters of the drink, a slice of lime and np grams of salt.\"\n    # And \"The friends want to make as many toasts as they can, provided they all drink the same amount.\"\n    # This means if they make X toasts, each friend consumes X * nl drink, X * 1 lime slice, X * np salt.\n    # Total consumption for X toasts for all N friends:\n    # Drink: N * X * nl\n    # Lime: N * X * 1\n    # Salt: N * X * np\n\n    # Let's recalculate based on total available resources and total needed per toast for the group.\n\n    # Total toasts possible based on drink for the entire group:\n    # Each toast requires nl ml of drink for ONE person.\n    # For N people to make ONE toast, they need N * nl ml of drink.\n    # So, total_drink_ml / (N * nl) is the number of toasts the GROUP can make.\n    toasts_from_drink_group = total_drink_ml // (nl * n)\n\n    # Total toasts possible based on lime for the entire group:\n    # Each toast requires 1 slice of lime for ONE person.\n    # For N people to make ONE toast, they need N * 1 slices of lime.\n    # So, total_lime_slices / (1 * N) is the number of toasts the GROUP can make.\n    toasts_from_lime_group = total_lime_slices // n\n\n    # Total toasts possible based on salt for the entire group:\n    # Each toast requires np grams of salt for ONE person.\n    # For N people to make ONE toast, they need N * np grams of salt.\n    # So, total_salt_grams / (N * np) is the number of toasts the GROUP can make.\n    toasts_from_salt_group = total_salt_grams // (np * n)\n\n    # The number of toasts the group can make is limited by the minimum of these three.\n    # And since all friends drink the same amount, this minimum is the number of toasts each friend can make.\n    result = min(toasts_from_drink_group, toasts_from_lime_group, toasts_from_salt_group)\n\n    print(result)\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 538,
        "completion_token_count": 769,
        "thoughts_token_count": 0
    }
}