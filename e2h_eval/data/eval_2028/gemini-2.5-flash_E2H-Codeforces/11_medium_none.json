{
    "start": 1758011747.4996936,
    "end": 1758011779.4052649,
    "start-formatted": "2025-09-16 17:35 KST",
    "end-formatted": "2025-09-16 17:36 KST",
    "gpu": 2,
    "pid": 11,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.To make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\n## Input\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\n## Output\nPrint a single integer — the number of toasts each friend can make.\n\n## Example\n### Input\n['3 4 5 10 8 100 3 1', '5 100 10 1 19 90 4 3', '10 1000 1000 25 23 1 50 1']\n\n### Output\n['2', '3', '0']\n\n## Note\nA comment to the first sample: Overall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Soft Drinking Problem Solver**\n\nOkay, here's the deal. I need to write a Python script for this \"Soft Drinking\" problem. It's about figuring out how many toasts each friend can make given a bunch of ingredients. We have `n` friends, `k` bottles of drink with `l` milliliters each, `c` limes with `d` slices, and `p` grams of salt. Each friend needs `nl` ml of drink and `np` grams of salt per toast, and each toast uses one lime slice. The goal is to maximize the number of toasts *each* friend gets, assuming they all get the same amount.\n\nFirst, I need to break down the calculations. We have three resources that limit us: drink, limes, and salt. I'll figure out how many *individual* toasts we can make with each one.\n\nFor the drink, we have `k * l` ml total. Each toast needs `nl` ml, so we get `(k * l) // nl` individual toasts from the drink.\n\nFor limes, we have `c * d` slices, and each toast uses one, so we get `c * d` toasts from the limes.\n\nFor salt, we have `p` grams, each toast needs `np` grams, so we get `p // np` toasts from the salt.\n\nThe *total* number of toasts that *can* be made across all friends is limited by the scarcest resource which is the `min` of those three values: `toasts_from_drink`, `toasts_from_limes`, and `toasts_from_salt`.\n\nSince there are `n` friends and they each must make the same amount of toasts, I need to take the total number of toasts and *divide* it by the number of friends.  And, of course, the answer must be an integer, so I'll use integer division `//`.\n\nI'll read in the input from standard input, parse the integers, perform the calculations, and print the final result. I'll need a single function to encapsulate this logic. After writing the script, I'll test it against the example cases and verify that everything is working. I'm feeling confident it'll be a quick one.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    line = sys.stdin.readline().split()\n    n, k, l, c, d, p, nl, np = map(int, line)\n\n    toasts_from_drink = (k * l) // nl\n    toasts_from_limes = (c * d)\n    toasts_from_salt = p // np\n\n    total_individual_toasts_possible = min(toasts_from_drink, toasts_from_limes, toasts_from_salt)\n\n    toasts_per_friend = total_individual_toasts_possible // n\n\n    print(toasts_per_friend)\n\nsolve()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    line = sys.stdin.readline().split()\n    n, k, l, c, d, p, nl, np = map(int, line)\n\n    toasts_from_drink = (k * l) // nl\n    toasts_from_limes = (c * d)\n    toasts_from_salt = p // np\n\n    total_individual_toasts_possible = min(toasts_from_drink, toasts_from_limes, toasts_from_salt)\n\n    toasts_per_friend = total_individual_toasts_possible // n\n\n    print(toasts_per_friend)\n\nsolve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 538,
        "completion_token_count": 156,
        "thoughts_token_count": 3416
    }
}