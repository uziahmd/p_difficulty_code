{
    "start": 1758284867.4895263,
    "end": 1758284878.8538518,
    "start-formatted": "2025-09-19 21:27 KST",
    "end-formatted": "2025-09-19 21:27 KST",
    "gpu": 2,
    "pid": 22,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Marks\n\nVasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.Overall the group has n students. They received marks for m subjects. Each student got a mark from 1 to 9 (inclusive) for each subject.Let's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.Your task is to find the number of successful students in the group.\n\n## Input\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces.\n\n## Output\nPrint the single number — the number of successful students in the given group.\n\n## Example\n### Input\n['3 3\\n223\\n232\\n112', '3 5\\n91728\\n11828\\n11111']\n\n### Output\n['2', '3']\n\n## Note\nIn the first sample test the student number 1 is the best at subjects 1 and 3, student 2 is the best at subjects 1 and 2, but student 3 isn't the best at any subject.In the second sample test each student is the best at at least one subject.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Okay, here's the approach I'm going to take for this \"Marks\" problem. This seems like a fairly straightforward dynamic programming task.**\n\nFirst, I need to get the input: the number of students (n), the number of subjects (m), and then the gradebook itself. I'll read the gradebook as a list of strings, or maybe a list of lists if it is easier to compare integer values, since that is what the problem needs. I'll represent the grades as characters.\n\nNow, the core idea: I'll need to figure out the maximum mark achieved in each subject.  I'll store these maximums in a list,  `max_marks_per_subject`. For each subject `j`, I'll iterate through all the students and find the highest mark they got in that particular subject.\n\nNext, I'll go through each student and see if they have *any* subject where they got the highest mark.  I'll use a boolean list, `is_successful`, to track whether a student is successful, initialized to all False values. For each student, I will iterate through their marks. If a student's mark in a subject matches the maximum mark for that subject I found earlier, that student is \"successful\", and I'll mark them as true in `is_successful`. Once a student is marked, I can move on to the next one, since a single maximum mark qualifies them.\n\nFinally, I'll just count how many True values are in the `is_successful` array, which will give me the number of successful students.\n\nI'm thinking, for the sample input, I should get this:\n\nn = 3, m = 3\n`gradebook`:\n`['223',`\n` '232',`\n` '112']`\n\n`max_marks_per_subject` will be `['2', '3', '3']`.\n\n*   Student 0 is best at subject 2.\n*   Student 1 is best at subject 1 and subject 2.\n*   Student 2 is not best at any subject.\n\nSo, the answer should be 2.  Alright, let's code this up in Python!\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # Find the maximum mark for each subject\n    # max_marks_per_subject[j] will store the highest mark in subject j\n    max_marks_per_subject = ['0'] * m \n    for j in range(m): # Iterate through subjects\n        current_max_mark = '0'\n        for i in range(n): # Iterate through students\n            if gradebook[i][j] > current_max_mark:\n                current_max_mark = gradebook[i][j]\n        max_marks_per_subject[j] = current_max_mark\n\n    # Identify successful students\n    # successful_students[i] will be True if student i is successful, False otherwise\n    successful_students = [False] * n\n\n    for i in range(n): # Iterate through students\n        for j in range(m): # Iterate through subjects\n            # Check if student i's mark for subject j is the maximum for that subject\n            if gradebook[i][j] == max_marks_per_subject[j]:\n                successful_students[i] = True\n                break # This student is successful, no need to check other subjects for them\n\n    # Count the number of successful students\n    count = 0\n    for is_successful in successful_students:\n        if is_successful:\n            count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n_str, m_str = sys.stdin.readline().split()\n    n = int(n_str)\n    m = int(m_str)\n\n    gradebook = []\n    for _ in range(n):\n        gradebook.append(sys.stdin.readline().strip())\n\n    # Find the maximum mark for each subject\n    # max_marks_per_subject[j] will store the highest mark in subject j\n    max_marks_per_subject = ['0'] * m \n    for j in range(m): # Iterate through subjects\n        current_max_mark = '0'\n        for i in range(n): # Iterate through students\n            if gradebook[i][j] > current_max_mark:\n                current_max_mark = gradebook[i][j]\n        max_marks_per_subject[j] = current_max_mark\n\n    # Identify successful students\n    # successful_students[i] will be True if student i is successful, False otherwise\n    successful_students = [False] * n\n\n    for i in range(n): # Iterate through students\n        for j in range(m): # Iterate through subjects\n            # Check if student i's mark for subject j is the maximum for that subject\n            if gradebook[i][j] == max_marks_per_subject[j]:\n                successful_students[i] = True\n                break # This student is successful, no need to check other subjects for them\n\n    # Count the number of successful students\n    count = 0\n    for is_successful in successful_students:\n        if is_successful:\n            count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    solve()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 467,
        "completion_token_count": 401,
        "thoughts_token_count": 878
    }
}