{
    "start": 1758294833.927002,
    "end": 1758294899.8358452,
    "start-formatted": "2025-09-20 00:13 KST",
    "end-formatted": "2025-09-20 00:14 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Alright, here's my breakdown of this competitive programming problem:**\n\nThe user's goal is to solve a dynamic programming-ish problem. They've got `n` problems, `k` days, and an array `a` of difficulties. The goal? Maximize total profit, which is the sum of the maximum difficulty achieved each day.\n\nHere's my thought process:\n\n*   **Understanding the Problem:** I need to find the best way to split the problems into `k` contiguous groups. The key is that the profit on any given day is directly tied to the single most difficult problem tackled that day.\n*   **The Big Picture:** The core idea is that to maximize the total profit, I should try to make each day's \"max\" as large as possible. If I can, somehow, allocate the `k` highest difficulty problems in the array `a` to become the max for each of the `k` days, then the total profit would be maximized.\n*   **The Strategy:** The intuitive approach is:\n    1.  *Identify the Heavy Hitters:* Locate the `k` problems with the highest difficulties in the input array.\n    2.  *Sum for the Gold:* Total profit will be the sum of these `k` maximum difficulties.\n    3.  *Make the Cuts:* Now comes the tricky part: how to partition the problem array so that *each* of those `k` problems will be the \"maximum\" difficulty on its own day?\n*   **The \"Cut\" Solution:** To get that perfect split, the solution is, essentially, to make cuts in the array *after* the indices of those `k` chosen maximum-difficulty problems. This *guarantees* that each of the `k` high-value items become the largest one in their specific daily segment. The sum of those `k` largest items, is the maximum total profit.\n*   **Final Implementation:** First find and sum up those `k` difficulties to get the maximum total profit, then implement the cuts by taking the top `k` indices, sorting them, and splitting the original array *after* the first `k-1` sorted indices of those problems.\n\nEssentially, I'm finding the biggest wins and making sure each day includes a \"big win.\"\n",
    "response": "The problem asks us to divide `n` problems, given by their difficulties `a_1, ..., a_n`, into exactly `k` contiguous sequences (days). For each day, the profit is the maximum difficulty of problems solved on that day. We want to maximize the total profit (sum of daily profits). We need to output the maximum total profit and the number of problems solved each day (`t_1, ..., t_k`).\n\n**Understanding the Maximum Profit**\n\nTo maximize the sum of `k` maximums, we should intuitively try to make each day's maximum as large as possible. The largest possible values for these maximums would come from the overall `k` largest problem difficulties in the entire list `a`.\n\nLet's formalize this:\n1.  Identify the `k` largest problem difficulties in the array `a`. Let these be `M_1, M_2, ..., M_k`.\n2.  The maximum possible total profit is `M_1 + M_2 + ... + M_k`. This is because each `M_i` is a problem difficulty from the input array. If we can arrange the cuts such that each `M_i` falls into a different day's segment and is the maximum for that day, then we achieve this sum. It's impossible to get a larger sum because any other set of `k` maximums would involve problems with difficulties less than or equal to these `M_i` values.\n\n**Constructing the Day Distributions**\n\nOnce we've identified the `k` problems that will contribute to the maximum total profit, we need to determine the `k-1` cut points.\nLet the `k` problems corresponding to `M_1, ..., M_k` have original indices `p_1, p_2, ..., p_k` in the array `a`. It's crucial that these are the *original* 0-indexed positions.\nSort these `k` indices in ascending order: `p'_1 < p'_2 < ... < p'_k`.\n\nNow, we need to define `k` segments:\n*   Day 1: `a[0 ... end_1]`\n*   Day 2: `a[end_1+1 ... end_2]`\n*   ...\n*   Day `j`: `a[end_{j-1}+1 ... end_j]`\n*   ...\n*   Day `k`: `a[end_{k-1}+1 ... n-1]`\n\nTo ensure that `a[p'_j]` is the maximum for Day `j` (or at least *a* maximum for Day `j`), we must ensure that:\n1.  Each `p'_j` falls into a distinct day's segment.\n2.  Within its segment, `a[p'_j]` is greater than or equal to all other problems in that segment. This is guaranteed because `a[p'_j]` is one of the `k` largest problems overall. Any problem `a[x]` in the same segment where `x` is not one of `p'_1, ..., p'_k` must have `a[x] <= a[p'_j]`.\n\nThe simplest way to satisfy condition 1 is to place the `k-1` cuts *after* `p'_1`, *after* `p'_2`, ..., *after* `p'_{k-1}`.\nHowever, this places `p'_j` at the *end* of its segment, which is valid.\nLet the cut points be `c_1, c_2, ..., c_{k-1}`. These are the 0-indexed positions *after which* a day ends.\nSo, the `j`-th day ends at `c_j` (for `j < k`), and the `k`-th day ends at `n-1`.\nWe can choose `c_j = p'_j`.\nThis means:\n*   Day 1: `a[0 ... p'_1]`. Length `p'_1 - 0 + 1`.\n*   Day 2: `a[p'_1+1 ... p'_2]`. Length `p'_2 - (p'_1+1) + 1 = p'_2 - p'_1`.\n*   ...\n*   Day `j`: `a[p'_{j-1}+1 ... p'_j]`. Length `p'_j - p'_{j-1}`.\n*   ...\n*   Day `k-1`: `a[p'_{k-2}+1 ... p'_{k-1}]`. Length `p'_{k-1} - p'_{k-2}`.\n*   Day `k`: `a[p'_{k-1}+1 ... n-1]`. Length `(n-1) - (p'_{k-1}+1) + 1 = n - p'_{k-1} - 1`.\n\nLet's use the example: `n = 8, k = 3`, `a = [5, 4, 2, 6, 5, 1, 9, 2]`\n1.  Problems with their original indices: `(5,0), (4,1), (2,2), (6,3), (5,4), (1,5), (9,6), (2,7)`\n2.  Sort by difficulty (descending): `(9,6), (6,3), (5,0), (5,4), (4,1), (2,2), (2,7), (1,5)`\n    (If difficulties are equal, any tie-breaking rule is fine, e.g., by index ascending).\n3.  Top `k=3` problems: `(9,6), (6,3), (5,0)`.\n4.  Maximum total profit: `9 + 6 + 5 = 20`.\n5.  Original indices of these problems: `6, 3, 0`.\n6.  Sorted indices: `p'_1=0, p'_2=3, p'_3=6`.\n\nNow, calculate daily lengths `t_j`:\n*   `t_1`: problems `a[0 ... p'_1] = a[0 ... 0]`. Length `0 - 0 + 1 = 1`.\n*   `t_2`: problems `a[p'_1+1 ... p'_2] = a[1 ... 3]`. Length `3 - 1 + 1 = 3`.\n*   `t_3`: problems `a[p'_2+1 ... n-1] = a[4 ... 7]`. Length `7 - 4 + 1 = 4`.\n\nSo, the lengths are `[1, 3, 4]`.\nCheck sum: `1 + 3 + 4 = 8 = n`. Valid.\nCheck profits:\n*   Day 1: `[5]`. Max `5`.\n*   Day 2: `[4, 2, 6]`. Max `6`.\n*   Day 3: `[5, 1, 9, 2]`. Max `9`.\nTotal profit: `5 + 6 + 9 = 20`. This matches the maximum profit.\n\nThis strategy works and provides one valid distribution. The example output `3 2 3` also achieves 20 profit. The problem allows any valid answer.\n\n**Algorithm Steps:**\n1.  Read `n` and `k`.\n2.  Read the list `a`.\n3.  Create a list of tuples `(difficulty, index)` for each problem. `indexed_problems = [(a[i], i) for i in range(n)]`.\n4.  Sort `indexed_problems` in descending order of difficulty. If difficulties are equal, the order doesn't affect the sum, but sorting by index ascending for ties can provide a consistent result.\n5.  Take the first `k` elements from the sorted list. These are the `k` problems that will contribute to the total profit.\n6.  Calculate the `max_profit` by summing the difficulties of these `k` problems.\n7.  Extract the original indices of these `k` problems. Store them in a list, say `profit_indices`.\n8.  Sort `profit_indices` in ascending order.\n9.  Calculate the lengths of problems for each day:\n    *   Initialize `results = []` and `current_start_index = 0`.\n    *   Iterate through `j` from `0` to `k-2` (for the first `k-1` days):\n        *   The `j`-th day ends at `profit_indices[j]`.\n        *   The number of problems for this day is `profit_indices[j] - current_start_index + 1`.\n        *   Add this length to `results`.\n        *   Update `current_start_index = profit_indices[j] + 1` for the next day.\n    *   The last day (`k`-th day) covers problems from `current_start_index` to `n-1`.\n    *   The number of problems for the last day is `n - current_start_index`.\n    *   Add this length to `results`.\n10. Print `max_profit`.\n11. Print the elements of `results` separated by spaces.\n\n**Example 3: `4 2`, `1 2000 2000 2`**\n1. `n=4, k=2`, `a=[1, 2000, 2000, 2]`\n2. `indexed_problems = [(1,0), (2000,1), (2000,2), (2,3)]`\n3. Sorted: `(2000,1), (2000,2), (2,3), (1,0)`\n4. Top `k=2` elements: `(2000,1), (2000,2)`\n5. `max_profit = 2000 + 2000 = 4000`.\n6. `profit_indices = [1, 2]` (original indices of the chosen problems).\n7. Sorted `profit_indices`: `p'_1=1, p'_2=2`.\n8. Calculate lengths:\n    *   `j=0` (first day):\n        *   Day ends at `p'_1 = 1`.\n        *   Length `t_1 = 1 - 0 + 1 = 2`. `results = [2]`.\n        *   `current_start_index = 1 + 1 = 2`.\n    *   Last day (`k=2`):\n        *   Length `t_2 = n - current_start_index = 4 - 2 = 2`. `results = [2, 2]`.\n9. Output:\n   `4000`\n   `2 2`\nThis matches the example output.\n\nThis approach is efficient enough:\n*   Sorting `n` problems takes `O(N log N)`.\n*   Extracting `k` elements and summing takes `O(k)`.\n*   Sorting `k` indices takes `O(k log k)`.\n*   Calculating day lengths takes `O(k)`.\nGiven `N <= 2000`, `N log N` is well within limits.\n\n```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Step 1: Create a list of (difficulty, original_index) tuples\n    indexed_problems = []\n    for i in range(n):\n        indexed_problems.append((a[i], i))\n\n    # Step 2: Sort by difficulty in descending order.\n    # For ties in difficulty, the original index doesn't strictly matter for sum,\n    # but sorting by index ascending provides a consistent tie-breaking.\n    indexed_problems.sort(key=lambda x: (-x[0], x[1]))\n\n    # Step 3: Select the top k problems\n    top_k_problems = indexed_problems[:k]\n\n    # Step 4: Calculate the maximum total profit\n    max_total_profit = sum(p[0] for p in top_k_problems)\n\n    # Step 5: Get the original indices of these top k problems and sort them\n    profit_indices = sorted([p[1] for p in top_k_problems])\n\n    # Step 6: Determine the number of problems for each day\n    # We place cuts after profit_indices[0], profit_indices[1], ..., profit_indices[k-2]\n    # The last day takes all remaining problems.\n    \n    day_lengths = []\n    current_start_index = 0\n    \n    for i in range(k - 1):\n        # The i-th day (0-indexed) ends at profit_indices[i]\n        # So, problems from current_start_index to profit_indices[i]\n        length = profit_indices[i] - current_start_index + 1\n        day_lengths.append(length)\n        current_start_index = profit_indices[i] + 1\n    \n    # The last day (k-th day) takes all remaining problems\n    length_last_day = n - current_start_index\n    day_lengths.append(length_last_day)\n\n    # Step 7: Print the results\n    sys.stdout.write(str(max_total_profit) + '\\n')\n    sys.stdout.write(' '.join(map(str, day_lengths)) + '\\n')\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Step 1: Create a list of (difficulty, original_index) tuples\n    indexed_problems = []\n    for i in range(n):\n        indexed_problems.append((a[i], i))\n\n    # Step 2: Sort by difficulty in descending order.\n    # For ties in difficulty, the original index doesn't strictly matter for sum,\n    # but sorting by index ascending provides a consistent tie-breaking.\n    indexed_problems.sort(key=lambda x: (-x[0], x[1]))\n\n    # Step 3: Select the top k problems\n    top_k_problems = indexed_problems[:k]\n\n    # Step 4: Calculate the maximum total profit\n    max_total_profit = sum(p[0] for p in top_k_problems)\n\n    # Step 5: Get the original indices of these top k problems and sort them\n    profit_indices = sorted([p[1] for p in top_k_problems])\n\n    # Step 6: Determine the number of problems for each day\n    # We place cuts after profit_indices[0], profit_indices[1], ..., profit_indices[k-2]\n    # The last day takes all remaining problems.\n    \n    day_lengths = []\n    current_start_index = 0\n    \n    for i in range(k - 1):\n        # The i-th day (0-indexed) ends at profit_indices[i]\n        # So, problems from current_start_index to profit_indices[i]\n        length = profit_indices[i] - current_start_index + 1\n        day_lengths.append(length)\n        current_start_index = profit_indices[i] + 1\n    \n    # The last day (k-th day) takes all remaining problems\n    length_last_day = n - current_start_index\n    day_lengths.append(length_last_day)\n\n    # Step 7: Print the results\n    sys.stdout.write(str(max_total_profit) + '\\n')\n    sys.stdout.write(' '.join(map(str, day_lengths)) + '\\n')\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 972,
        "completion_token_count": 3098,
        "thoughts_token_count": 5800
    }
}