{
    "start": 1758284888.7571678,
    "end": 1758284905.9345367,
    "start-formatted": "2025-09-19 21:28 KST",
    "end-formatted": "2025-09-19 21:28 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Tackling Polycarp's Practice: A Pythonic Approach**\n\nOkay, so I'm looking at this \"Polycarp's Practice\" problem and I need to come up with a Python solution. The crux of it seems to be distributing `n` problems across `k` days to maximize the total profit, where daily profit is the maximum difficulty of the problems solved on that day. My first thought is to break this down.\n\nWe have the input: `n` problems, `k` days, and a list `a` representing problem difficulties. The constraints are straightforward enough: `1 <= k <= n <= 2000`, and `1 <= a_i <= 2000`.\n\nThe goal is to find the distribution that maximizes the sum of the maximum difficulty for each day. My initial instinct is that to get the *largest* possible sum of daily profits, I'm going to want to make the largest problem difficulties the *maximum* difficulty for *each* day.\n\nSo, I'm thinking, if I can find the `k` largest difficulties in `a` and ensure each one is the maximum for its own day, I should be on the right track. For example, if `a = [5, 4, 2, 6, 5, 1, 9, 2]` and `k = 3`, I'd want to use `9`, `6`, and `5` as the maximums for my three days. The sum would be 20. But how do I actually *achieve* this distribution?\n\nI need to sort the difficulties in descending order to identify the largest values. But, I must retain the *original indices* because the problems are solved in sequence.  I realize I can create a list of tuples, `(difficulty, original_index)`, and sort that. For `a = [5, 4, 2, 6, 5, 1, 9, 2]`, this will result in `[(9, 6), (6, 3), (5, 0), (5, 4), (4, 1), (2, 2), (2, 7), (1, 5)]`.\n\nNow, if I take the top `k` elements from this sorted list, I will have the `k` largest difficulties and their original positions in the list `a`. From here, I need to figure out how to assign problems to days, respecting the order, to achieve these max difficulties.  This is where the actual algorithm needs to take shape. I need a way to build the days around these maximum values while making sure that each one becomes the maximum for that day.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Create a list of (difficulty, original_index) pairs\n    # The original_index is important for identifying split points\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Sort these pairs by difficulty in descending order\n    # If difficulties are equal, the tie-breaking rule (e.g., by index) doesn't matter\n    # for selecting the top k values, but it might matter if we wanted a specific set\n    # of indices for the maximums. Here, any k largest values will do for the profit sum.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Select the top k largest difficulties\n    # These will be the maximums for our k days\n    top_k_values = []\n    for i in range(k):\n        top_k_values.append(indexed_a[i][0])\n\n    # Calculate the maximum total profit\n    max_total_profit = sum(top_k_values)\n    sys.stdout.write(str(max_total_profit) + '\\n')\n\n    # Get the original indices of these top k problems\n    # These indices will determine where we make cuts for the k days\n    top_k_indices = []\n    for i in range(k):\n        top_k_indices.append(indexed_a[i][1])\n\n    # Sort the indices in ascending order to represent the order of problems in the list\n    # These sorted indices will be our \"split points\"\n    top_k_indices.sort()\n\n    # Determine the number of problems for each day\n    # t_j represents the number of problems solved on day j\n    # The first day ends at the first top_k_index.\n    # The second day starts after the first top_k_index and ends at the second top_k_index, etc.\n    # The last day ends at index n-1.\n    \n    t_values = []\n    current_start_index = 0\n    \n    for i in range(k - 1):\n        # The i-th day (0-indexed) ends at top_k_indices[i]\n        # The number of problems for this day is (top_k_indices[i] - current_start_index + 1)\n        # This is because problems are 0-indexed. If problems are from index `s` to `e` (inclusive),\n        # the count is `e - s + 1`.\n        \n        t_values.append(top_k_indices[i] - current_start_index + 1)\n        current_start_index = top_k_indices[i] + 1 # Next day starts after this problem\n\n    # The last day (k-th day) takes all remaining problems\n    # It starts at current_start_index and goes up to n-1\n    t_values.append(n - current_start_index)\n\n    # Print the t_values\n    sys.stdout.write(' '.join(map(str, t_values)) + '\\n')\n\nif __name__ == '__main__':\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Create a list of (difficulty, original_index) pairs\n    # The original_index is important for identifying split points\n    indexed_a = []\n    for i in range(n):\n        indexed_a.append((a[i], i))\n\n    # Sort these pairs by difficulty in descending order\n    # If difficulties are equal, the tie-breaking rule (e.g., by index) doesn't matter\n    # for selecting the top k values, but it might matter if we wanted a specific set\n    # of indices for the maximums. Here, any k largest values will do for the profit sum.\n    indexed_a.sort(key=lambda x: x[0], reverse=True)\n\n    # Select the top k largest difficulties\n    # These will be the maximums for our k days\n    top_k_values = []\n    for i in range(k):\n        top_k_values.append(indexed_a[i][0])\n\n    # Calculate the maximum total profit\n    max_total_profit = sum(top_k_values)\n    sys.stdout.write(str(max_total_profit) + '\\n')\n\n    # Get the original indices of these top k problems\n    # These indices will determine where we make cuts for the k days\n    top_k_indices = []\n    for i in range(k):\n        top_k_indices.append(indexed_a[i][1])\n\n    # Sort the indices in ascending order to represent the order of problems in the list\n    # These sorted indices will be our \"split points\"\n    top_k_indices.sort()\n\n    # Determine the number of problems for each day\n    # t_j represents the number of problems solved on day j\n    # The first day ends at the first top_k_index.\n    # The second day starts after the first top_k_index and ends at the second top_k_index, etc.\n    # The last day ends at index n-1.\n    \n    t_values = []\n    current_start_index = 0\n    \n    for i in range(k - 1):\n        # The i-th day (0-indexed) ends at top_k_indices[i]\n        # The number of problems for this day is (top_k_indices[i] - current_start_index + 1)\n        # This is because problems are 0-indexed. If problems are from index `s` to `e` (inclusive),\n        # the count is `e - s + 1`.\n        \n        t_values.append(top_k_indices[i] - current_start_index + 1)\n        current_start_index = top_k_indices[i] + 1 # Next day starts after this problem\n\n    # The last day (k-th day) takes all remaining problems\n    # It starts at current_start_index and goes up to n-1\n    t_values.append(n - current_start_index)\n\n    # Print the t_values\n    sys.stdout.write(' '.join(map(str, t_values)) + '\\n')\n\nif __name__ == '__main__':\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 963,
        "completion_token_count": 770,
        "thoughts_token_count": 901
    }
}