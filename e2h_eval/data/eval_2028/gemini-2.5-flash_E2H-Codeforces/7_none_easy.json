{
    "start": 1758011296.479637,
    "end": 1758011324.050692,
    "start-formatted": "2025-09-16 17:28 KST",
    "end-formatted": "2025-09-16 17:28 KST",
    "gpu": 2,
    "pid": 7,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Rudolf and Snowflakes (hard version)\n\nThis is the hard version of the problem. The only difference is that in this version $$$n \\le 10^{18}$$$.One winter morning, Rudolf was looking thoughtfully out the window, watching the falling snowflakes. He quickly noticed a certain symmetry in the configuration of the snowflakes. And like a true mathematician, Rudolf came up with a mathematical model of a snowflake.He defined a snowflake as an undirected graph constructed according to the following rules:   Initially, the graph has only one vertex.  Then, more vertices are added to the graph. The initial vertex is connected by edges to $$$k$$$ new vertices ($$$k > 1$$$).  Each vertex that is connected to only one other vertex is connected by edges to $$$k$$$ more new vertices. This step should be done at least once. The smallest possible snowflake for $$$k = 4$$$ is shown in the figure.  After some mathematical research, Rudolf realized that such snowflakes may not have any number of vertices. Help Rudolf check whether a snowflake with $$$n$$$ vertices can exist.\n\n## Input\nThe first line of the input contains an integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases.Then follow the descriptions of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$) — the number of vertices for which it is necessary to check the existence of a snowflake.\n\n## Output\nOutput $$$t$$$ lines, each of which is the answer to the corresponding test case — \"YES\" if there exists such $$$k > 1$$$ that a snowflake with the given number of vertices can be constructed; \"NO\" otherwise.\n\n## Example\n### Input\n['9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000']\n\n### Output\n['NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "",
    "response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # We need to find if n = 1 + k + k*k for some integer k > 1.\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s*s.\n    # s = sqrt(4n - 3)\n    # Then k = (-1 + s) / 2 (since k > 0)\n    # For k to be an integer, -1 + s must be even, which means s must be odd.\n    # Also, k > 1 implies (-1 + s) / 2 > 1 => -1 + s > 2 => s > 3.\n\n    discriminant = 4 * n - 3\n    s_float = math.isqrt(discriminant)\n    \n    if s_float * s_float == discriminant:\n        if (s_float - 1) % 2 == 0:\n            k = (s_float - 1) // 2\n            if k > 1:\n                print(\"YES\")\n                return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^d\n    # This is a geometric series sum: (k^(d+1) - 1) / (k - 1)\n    # We need to find if n = (k^(d+1) - 1) / (k - 1) for some integers k > 1 and d >= 2.\n    # (d >= 2 because d=1 is the 2-level case we already checked)\n    # The problem states \"This step should be done at least once\", which means the branching\n    # from the initial k vertices must happen. So the minimum depth is 2.\n    # This means the total number of levels is 3 (root, k children, k*k grandchildren).\n    # So d+1 >= 3, which means d >= 2.\n\n    # Iterate over possible depths (d+1, which is the number of terms in the sum)\n    # Minimum d+1 is 3 (1 + k + k^2)\n    # Maximum d+1: Since k >= 2, 1 + k + ... + k^(d) >= 1 + 2 + 2^2 + ... + 2^d = 2^(d+1) - 1\n    # So 2^(d+1) - 1 <= n => 2^(d+1) <= n + 1 => d+1 <= log2(n+1)\n    # For n = 10^18, log2(10^18) approx 18 * log2(10) approx 18 * 3.32 approx 59.79\n    # So d+1 can go up to about 60.\n\n    for d_plus_1 in range(3, 61): # d_plus_1 is the number of terms in the sum\n        # n = (k^(d_plus_1) - 1) / (k - 1)\n        # We need to find integer k > 1.\n        # This is equivalent to finding a root k for the polynomial\n        # (k-1)n = k^(d_plus_1) - 1\n        # k^(d_plus_1) - n*k + (n - 1) = 0\n\n        # We can use binary search to find k.\n        # k must be > 1.\n        # Lower bound for k: 2\n        # Upper bound for k: n^(1/(d_plus_1 - 1)) if we approximate n ~ k^(d_plus_1 - 1) * (k-1)\n        # More simply, k^(d_plus_1 - 1) < n, so k < n^(1/(d_plus_1 - 1)).\n        # k_upper = int(n**(1/(d_plus_1 - 1))) + 2 (add some margin)\n        # A safer upper bound for k: k^(d_plus_1) - 1 < n*(k-1) => k^(d_plus_1) - 1 < n*k\n        # If k >= 2, k^(d_plus_1 - 1) < n. So k < n^(1/(d_plus_1 - 1)).\n        # For d_plus_1 = 3, k < n^(1/2) = sqrt(n). For n=10^18, k < 10^9.\n        # For d_plus_1 = 60, k < n^(1/59). For n=10^18, k < (10^18)^(1/59) approx (10^18)^(1/60) = 10^(0.3) approx 2.\n        # So the upper bound for k is not too large.\n\n        low = 2\n        high = int(n**(1/(d_plus_1 - 1))) + 2 # A reasonable upper bound for k\n        # For n=10^18, d_plus_1=3, high ~ 10^9.\n        # For n=10^18, d_plus_1=60, high ~ 2.\n        # A more robust high for k: If k=2, sum is 2^(d_plus_1)-1. If this is > n, then k cannot be 2.\n        # If k=2, sum = 2^60-1, which is > 10^18. So for d_plus_1=60, k can only be 2.\n        # If k=3, sum = (3^d_plus_1 - 1)/2. If d_plus_1=38, (3^38-1)/2 > 10^18. So k=3, d_plus_1 <= 37.\n        # So the high bound for k is not more than n.\n        # Max k could be sqrt(n) when d_plus_1 = 3.\n        # So high can be min(n, int(n**(1/2)) + 2) for safety.\n        # A loose upper bound for k: if k^3 > n, then k is too large. So k < n^(1/3).\n        # No, k^(d_plus_1 - 1) < n. So k < n^(1/(d_plus_1 - 1)).\n        # For d_plus_1 = 3, k < n^(1/2). For d_plus_1 = 60, k < n^(1/59).\n        # So high = min(n, int(n**(1.0/(d_plus_1-1))) + 5) should be safe.\n        # Let's use a simpler high: 2 * 10**9 for n=10**18, this is sufficient for k <= sqrt(n).\n        # Or just use low = 2, high = 2 * 10**9 (roughly sqrt(10^18))\n        # If d_plus_1 is large, high will be very small.\n        # Example: n=13, d_plus_1=3. k=2, 1+2+4=7. k=3, 1+3+9=13. YES.\n        # For n=10^18, d_plus_1=3, k=10^9, 1+10^9+10^18 approx 10^18.\n        # low = 2, high = int(n**(1/2)) + 1\n        # high = min(high, 2 * 10**9) # To prevent overflow with n**(1/2) for large n\n        # For n=10^18, n**(1/2) is 10^9.\n        # high = 10**9 + 5.\n        \n        # Binary search for k in [2, N_MAX_K]\n        # N_MAX_K can be 10^9 + some margin for d_plus_1=3.\n        # For larger d_plus_1, the upper bound for k is much smaller.\n        # e.g., for d_plus_1=4, k_max ~ n^(1/3) ~ 10^6.\n        # So, a fixed upper bound for k like 2 * 10^9 is fine.\n        \n        # Max k: for d_plus_1=3, k^2+k+1 = n. k approx sqrt(n). Max 10^9.\n        # For d_plus_1=60, k must be 2.\n        # So we can set a generous upper bound for k.\n        # high = min(n, 2 * 10**9) # A safe upper bound for k\n        # A tighter upper bound for k:\n        # If k=2, sum is 2^(d_plus_1)-1.\n        # If 2^(d_plus_1)-1 > n, then k cannot be 2, so no solution for this d_plus_1.\n        # If 2^(d_plus_1)-1 <= n, then k could be 2.\n        # The largest possible k is when d_plus_1=3, k approx sqrt(n).\n        # So k_max is around 10^9 for n=10^18.\n        # Let's set high = 10**9 + 7 (a prime, just for fun)\n        \n        # A more robust upper bound for binary search:\n        # If k >= 2, then sum_terms = 1 + k + ... + k^(d_plus_1 - 1) >= k^(d_plus_1 - 1).\n        # So k^(d_plus_1 - 1) <= n.\n        # k <= n^(1/(d_plus_1 - 1)).\n        # Let's calculate this upper bound precisely.\n        k_upper_bound = int(math.pow(n, 1.0 / (d_plus_1 - 1))) + 2\n        high = min(k_upper_bound, 2 * 10**9) # Clamp to prevent excessively large high, and also handle potential float precision issues for large exponents.\n        # For d_plus_1=3, high could be 10^9.\n        # For d_plus_1=60, high could be 2.\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d_plus_1):\n                current_sum += term\n                if _ < d_plus_1 - 1: # Prevent overflow on the last term multiplication\n                    if n // mid < term: # Check for term * mid > n, which means current_sum will exceed n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import math\n\ndef solve():\n    n = int(input())\n\n    if n <= 6:\n        print(\"NO\")\n        return\n\n    # Case 1: Snowflake with 2 levels (root + k children + k*k grandchildren)\n    # Total vertices = 1 + k + k*k\n    # We need to find if n = 1 + k + k*k for some integer k > 1.\n    # k*k + k + (1 - n) = 0\n    # Using quadratic formula: k = (-1 +/- sqrt(1 - 4*(1-n))) / 2\n    # k = (-1 +/- sqrt(1 - 4 + 4n)) / 2\n    # k = (-1 +/- sqrt(4n - 3)) / 2\n    # For k to be an integer > 1, 4n - 3 must be a perfect square, say s*s.\n    # s = sqrt(4n - 3)\n    # Then k = (-1 + s) / 2 (since k > 0)\n    # For k to be an integer, -1 + s must be even, which means s must be odd.\n    # Also, k > 1 implies (-1 + s) / 2 > 1 => -1 + s > 2 => s > 3.\n\n    discriminant = 4 * n - 3\n    s_float = math.isqrt(discriminant)\n    \n    if s_float * s_float == discriminant:\n        if (s_float - 1) % 2 == 0:\n            k = (s_float - 1) // 2\n            if k > 1:\n                print(\"YES\")\n                return\n\n    # Case 2: Snowflake with more than 2 levels\n    # Total vertices = 1 + k + k^2 + ... + k^d\n    # This is a geometric series sum: (k^(d+1) - 1) / (k - 1)\n    # We need to find if n = (k^(d+1) - 1) / (k - 1) for some integers k > 1 and d >= 2.\n    # (d >= 2 because d=1 is the 2-level case we already checked)\n    # The problem states \"This step should be done at least once\", which means the branching\n    # from the initial k vertices must happen. So the minimum depth is 2.\n    # This means the total number of levels is 3 (root, k children, k*k grandchildren).\n    # So d+1 >= 3, which means d >= 2.\n\n    # Iterate over possible depths (d+1, which is the number of terms in the sum)\n    # Minimum d+1 is 3 (1 + k + k^2)\n    # Maximum d+1: Since k >= 2, 1 + k + ... + k^(d) >= 1 + 2 + 2^2 + ... + 2^d = 2^(d+1) - 1\n    # So 2^(d+1) - 1 <= n => 2^(d+1) <= n + 1 => d+1 <= log2(n+1)\n    # For n = 10^18, log2(10^18) approx 18 * log2(10) approx 18 * 3.32 approx 59.79\n    # So d+1 can go up to about 60.\n\n    for d_plus_1 in range(3, 61): # d_plus_1 is the number of terms in the sum\n        # n = (k^(d_plus_1) - 1) / (k - 1)\n        # We need to find integer k > 1.\n        # This is equivalent to finding a root k for the polynomial\n        # (k-1)n = k^(d_plus_1) - 1\n        # k^(d_plus_1) - n*k + (n - 1) = 0\n\n        # We can use binary search to find k.\n        # k must be > 1.\n        # Lower bound for k: 2\n        # Upper bound for k: n^(1/(d_plus_1 - 1)) if we approximate n ~ k^(d_plus_1 - 1) * (k-1)\n        # More simply, k^(d_plus_1 - 1) < n, so k < n^(1/(d_plus_1 - 1)).\n        # k_upper = int(n**(1/(d_plus_1 - 1))) + 2 (add some margin)\n        # A safer upper bound for k: k^(d_plus_1) - 1 < n*(k-1) => k^(d_plus_1) - 1 < n*k\n        # If k >= 2, k^(d_plus_1 - 1) < n. So k < n^(1/(d_plus_1 - 1)).\n        # For d_plus_1 = 3, k < n^(1/2) = sqrt(n). For n=10^18, k < 10^9.\n        # For d_plus_1 = 60, k < n^(1/59). For n=10^18, k < (10^18)^(1/59) approx (10^18)^(1/60) = 10^(0.3) approx 2.\n        # So the upper bound for k is not too large.\n\n        low = 2\n        high = int(n**(1/(d_plus_1 - 1))) + 2 # A reasonable upper bound for k\n        # For n=10^18, d_plus_1=3, high ~ 10^9.\n        # For n=10^18, d_plus_1=60, high ~ 2.\n        # A more robust high for k: If k=2, sum is 2^(d_plus_1)-1. If this is > n, then k cannot be 2.\n        # If k=2, sum = 2^60-1, which is > 10^18. So for d_plus_1=60, k can only be 2.\n        # If k=3, sum = (3^d_plus_1 - 1)/2. If d_plus_1=38, (3^38-1)/2 > 10^18. So k=3, d_plus_1 <= 37.\n        # So the high bound for k is not more than n.\n        # Max k could be sqrt(n) when d_plus_1 = 3.\n        # So high can be min(n, int(n**(1/2)) + 2) for safety.\n        # A loose upper bound for k: if k^3 > n, then k is too large. So k < n^(1/3).\n        # No, k^(d_plus_1 - 1) < n. So k < n^(1/(d_plus_1 - 1)).\n        # For d_plus_1 = 3, k < n^(1/2). For d_plus_1 = 60, k < n^(1/59).\n        # So high = min(n, int(n**(1.0/(d_plus_1-1))) + 5) should be safe.\n        # Let's use a simpler high: 2 * 10**9 for n=10**18, this is sufficient for k <= sqrt(n).\n        # Or just use low = 2, high = 2 * 10**9 (roughly sqrt(10^18))\n        # If d_plus_1 is large, high will be very small.\n        # Example: n=13, d_plus_1=3. k=2, 1+2+4=7. k=3, 1+3+9=13. YES.\n        # For n=10^18, d_plus_1=3, k=10^9, 1+10^9+10^18 approx 10^18.\n        # low = 2, high = int(n**(1/2)) + 1\n        # high = min(high, 2 * 10**9) # To prevent overflow with n**(1/2) for large n\n        # For n=10^18, n**(1/2) is 10^9.\n        # high = 10**9 + 5.\n        \n        # Binary search for k in [2, N_MAX_K]\n        # N_MAX_K can be 10^9 + some margin for d_plus_1=3.\n        # For larger d_plus_1, the upper bound for k is much smaller.\n        # e.g., for d_plus_1=4, k_max ~ n^(1/3) ~ 10^6.\n        # So, a fixed upper bound for k like 2 * 10^9 is fine.\n        \n        # Max k: for d_plus_1=3, k^2+k+1 = n. k approx sqrt(n). Max 10^9.\n        # For d_plus_1=60, k must be 2.\n        # So we can set a generous upper bound for k.\n        # high = min(n, 2 * 10**9) # A safe upper bound for k\n        # A tighter upper bound for k:\n        # If k=2, sum is 2^(d_plus_1)-1.\n        # If 2^(d_plus_1)-1 > n, then k cannot be 2, so no solution for this d_plus_1.\n        # If 2^(d_plus_1)-1 <= n, then k could be 2.\n        # The largest possible k is when d_plus_1=3, k approx sqrt(n).\n        # So k_max is around 10^9 for n=10^18.\n        # Let's set high = 10**9 + 7 (a prime, just for fun)\n        \n        # A more robust upper bound for binary search:\n        # If k >= 2, then sum_terms = 1 + k + ... + k^(d_plus_1 - 1) >= k^(d_plus_1 - 1).\n        # So k^(d_plus_1 - 1) <= n.\n        # k <= n^(1/(d_plus_1 - 1)).\n        # Let's calculate this upper bound precisely.\n        k_upper_bound = int(math.pow(n, 1.0 / (d_plus_1 - 1))) + 2\n        high = min(k_upper_bound, 2 * 10**9) # Clamp to prevent excessively large high, and also handle potential float precision issues for large exponents.\n        # For d_plus_1=3, high could be 10^9.\n        # For d_plus_1=60, high could be 2.\n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < 2: # k must be > 1\n                low = 2\n                continue\n\n            current_sum = 0\n            term = 1\n            overflow = False\n            for _ in range(d_plus_1):\n                current_sum += term\n                if _ < d_plus_1 - 1: # Prevent overflow on the last term multiplication\n                    if n // mid < term: # Check for term * mid > n, which means current_sum will exceed n\n                        overflow = True\n                        break\n                    term *= mid\n            \n            if overflow or current_sum > n:\n                high = mid - 1\n            elif current_sum < n:\n                low = mid + 1\n            else: # current_sum == n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 568,
        "completion_token_count": 2835,
        "thoughts_token_count": 0
    }
}