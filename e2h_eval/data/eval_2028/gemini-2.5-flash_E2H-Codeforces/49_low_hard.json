{
    "start": 1758284940.9391367,
    "end": 1758284970.453301,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:29 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Diving into Mushroom Strife: A Constraint Satisfaction Challenge**\n\nOkay, so I've got this \"Mushroom Strife\" problem to tackle, and it's screaming \"constraint satisfaction\" at me.  We're given a graph – lawns connected by roads – and the GCD and LCM of the mushroom counts on the connected lawns for each road. The goal is to find valid mushroom counts for each lawn, or tell if it's impossible.\n\nInitially, I'm thinking brute force is out of the question because of the size of `N` and `M`.  We need something smarter. The core idea seems to be working with the GCD and LCM relationship. If `a` and `b` are the mushroom counts, `g` the GCD, and `l` the LCM, then `a * b = g * l`. And since `a = g * x` and `b = g * y`, where `x` and `y` are coprime factors of `l/g`.\n\nThe crucial bit is that if `l` isn't divisible by `g`, we can immediately bail out and say \"NO\".  Otherwise, we can calculate `P = l / g` and start factoring.\n\nSo, for each edge, if we're given the pair `(g, l)`, we know that `A_u = g * x` and `A_v = g * y` where `x * y = P` and `GCD(x, y) = 1`. This looks like a perfect chance to leverage the coprime aspect of `x` and `y`.\n\nMy strategy then will revolve around the coprime factors. We need a way to efficiently determine the pairs `(x, y)` given `P`. After that, it becomes a question of finding a *consistent* assignment across the entire graph. Since the constraints are *per-edge*, this sounds like a graph coloring problem, but with some extra math constraints.\n",
    "response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if m == 0:\n        if n == 0: # Should not happen based on constraints (1 <= n <= 1000)\n            sys.stdout.write(\"YES\\n\\n\")\n        else:\n            sys.stdout.write(\"YES\\n\" + \" \".join([\"1\"] * n) + \"\\n\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    \n    # Store edges and precompute P = LCM/GCD for each edge\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        if l % g != 0:\n            sys.stdout.write(\"NO\\n\")\n            return\n        p = l // g\n        adj[u].append((v, g, p))\n        adj[v].append((u, g, p))\n        edges.append((u, v, g, p))\n\n    # Initialize possible values for each node.\n    # Initially, for a node u, its value A_u must be a multiple of g_uv for all neighbors v.\n    # It also must be a divisor of l_uv for all neighbors v.\n    # So, A_u must be a multiple of LCM_g and a divisor of GCD_l.\n    # However, a more precise initial constraint is that A_u must be a multiple of g_uv for all (u,v).\n    # This means A_u must be a multiple of LCM(g_uv for all v adjacent to u).\n    # This is a strong constraint, but it's not the only one.\n    # Let's consider the prime factors.\n\n    # Precompute prime factors for numbers up to 10^6\n    MAX_VAL = 1000000\n    min_prime_factor = [0] * (MAX_VAL + 1)\n    primes = []\n    for i in range(2, MAX_VAL + 1):\n        if min_prime_factor[i] == 0:\n            min_prime_factor[i] = i\n            primes.append(i)\n        for p in primes:\n            if p > min_prime_factor[i] or i * p > MAX_VAL:\n                break\n            min_prime_factor[i * p] = p\n\n    def get_prime_factors(num):\n        factors = {}\n        if num == 0: return factors # Should not happen with problem constraints\n        while num > 1:\n            p = min_prime_factor[num]\n            factors[p] = factors.get(p, 0) + 1\n            num //= p\n        return factors\n\n    # Store prime factorization for each P_uv = L_uv / G_uv\n    for i in range(len(edges)):\n        u, v, g, p = edges[i]\n        edges[i] = (u, v, g, p, get_prime_factors(p)) # Add prime factors of p\n\n    # Assign initial state for each node: {prime_factor: exponent_state}\n    # exponent_state: 0 means A_u is a multiple of p^k, A_v is a multiple of p^(total_exp - k)\n    #                 1 means A_u is a multiple of p^(total_exp - k), A_v is a multiple of p^k\n    #                 -1 means undetermined\n    # This stores the \"relative\" state for each prime factor of P.\n    # For a prime factor p of P_uv, the exponent of p in A_u plus the exponent of p in A_v\n    # must be the exponent of p in (G_uv * P_uv) = L_uv.\n    # And the minimum of these two exponents must be the exponent of p in G_uv.\n    # This implies that for each prime factor p of P_uv, one of A_u or A_v gets the full p^k (from P_uv),\n    # and the other gets p^0 (relative to P_uv).\n    # Let exp_g be the exponent of p in G_uv.\n    # Let exp_p be the exponent of p in P_uv.\n    # Then the exponent of p in A_u is exp_g + x_u, and in A_v is exp_g + x_v.\n    # We must have x_u + x_v = exp_p and min(x_u, x_v) = 0.\n    # This means (x_u, x_v) is either (exp_p, 0) or (0, exp_p).\n    # So, A_u has p^(exp_g + exp_p) and A_v has p^exp_g, OR\n    # A_u has p^exp_g and A_v has p^(exp_g + exp_p).\n    # We can represent this as a boolean choice for each prime factor of P_uv.\n    # If p is a prime factor of P_uv with exponent k, then either A_u gets p^k or A_v gets p^k (relative to G_uv).\n\n    # `node_prime_state[u][p]` stores the \"relative\" exponent choice for prime `p` at node `u`.\n    # It's an integer `s`. If `s` is 0, it means `p` is not a factor of P_uv for any (u,v).\n    # If `s` is 1, it means `A_u` must contain `p^k` for some `k`.\n    # If `s` is -1, it means `A_u` must NOT contain `p^k` for some `k`.\n    # If `s` is 0 (unassigned), it means we haven't determined its relation to any neighbor yet.\n    # This is a 2-coloring problem on prime factors.\n    # For each prime `p` and each connected component `C` in the graph, we need to decide for each node `u` in `C`\n    # whether `A_u` contains `p^k` (where `k` is the exponent of `p` in `P_uv`) or not (relative to `G_uv`).\n    \n    # `final_exponents[u][p]` stores the final exponent of `p` in `A_u`.\n    final_exponents = [{} for _ in range(n + 1)]\n    \n    # `node_prime_choice[u][p]` stores 0 or 1.\n    # 0 means A_u gets the \"base\" part for prime p (exponent of p in G_uv).\n    # 1 means A_u gets the \"base\" part + \"P_factor\" part for prime p (exponent of p in L_uv).\n    node_prime_choice = [{} for _ in range(n + 1)] # {prime: 0 or 1 or None}\n    \n    # `visited_nodes` for DFS\n    visited_nodes = [False] * (n + 1)\n\n    # For each node u, initialize final_exponents[u] with exponents from all G_uv.\n    for u, v, g, p_val, p_factors in edges:\n        g_factors = get_prime_factors(g)\n        for prime, exp in g_factors.items():\n            final_exponents[u][prime] = max(final_exponents[u].get(prime, 0), exp)\n            final_exponents[v][prime] = max(final_exponents[v].get(prime, 0), exp)\n\n    # DFS function to propagate prime factor choices\n    # u: current node\n    # p: prime factor being processed\n    # choice: 0 or 1, the choice for node u regarding prime p\n    def dfs_prime_choice(u, p, choice):\n        if p not in node_prime_choice[u]:\n            node_prime_choice[u][p] = choice\n        elif node_prime_choice[u][p] != choice:\n            return False # Conflict found\n        else:\n            return True # Already visited with same choice\n\n        for v_node, g_val, p_val, p_factors in adj[u]:\n            if p in p_factors:\n                if not dfs_prime_choice(v_node, p, 1 - choice):\n                    return False\n        return True\n\n    # Iterate through all nodes and all primes to ensure all components are processed\n    # For each prime p\n    #   For each node u\n    #     If u is connected to an edge (u,v) where p is a factor of P_uv\n    #       And node_prime_choice[u][p] is not yet set\n    #         Start a DFS from u for prime p with an arbitrary choice (e.g., 0)\n    #         If DFS returns False, then no solution.\n    \n    # Collect all primes that appear in any P_uv\n    all_p_primes = set()\n    for u, v, g, p_val, p_factors in edges:\n        all_p_primes.update(p_factors.keys())\n\n    for p in all_p_primes:\n        for i in range(1, n + 1):\n            # Check if node i has any edge where p is a factor of P_uv\n            is_relevant_node_for_p = False\n            for v_node, g_val, p_val, p_factors in adj[i]:\n                if p in p_factors:\n                    is_relevant_node_for_p = True\n                    break\n            \n            if is_relevant_node_for_p and p not in node_prime_choice[i]:\n                if not dfs_prime_choice(i, p, 0): # Start DFS with arbitrary choice 0\n                    sys.stdout.write(\"NO\\n\")\n                    return\n\n    # Now construct the final A_i values\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        current_val = 1\n        \n        # Add exponents from G_uv for all neighbors v\n        for prime, exp in final_exponents[i].items():\n            for _ in range(exp):\n                current_val *= prime\n        \n        # Add exponents from P_uv based on choices\n        for prime, choice in node_prime_choice[i].items():\n            if choice == 1: # This node gets the P_factor for this prime\n                # Find an edge (i, v) where p is a factor of P_iv.\n                # The exponent to add is the exponent of p in P_iv.\n                # Since P_iv might be different for different neighbors, we need to be careful.\n                # The choice (0 or 1) determines whether A_u or A_v gets the P_factor.\n                # If A_u gets it (choice 1), then A_u gets p^(exp_p_uv).\n                # If A_u does not get it (choice 0), then A_u gets p^0 (relative to P_uv).\n                # The total exponent of p in A_u is exp_g_u_p + x_u_p.\n                # We need to find exp_p_uv such that p is a factor of P_uv.\n                \n                # We need to find the maximum exponent of p from any P_uv that this node \"claims\"\n                max_p_exp_from_P = 0\n                for v_node, g_val, p_val, p_factors in adj[i]:\n                    if prime in p_factors:\n                        max_p_exp_from_P = max(max_p_exp_from_P, p_factors[prime])\n                \n                for _ in range(max_p_exp_from_P):\n                    current_val *= prime\n        \n        if current_val > MAX_VAL:\n            sys.stdout.write(\"NO\\n\")\n            return\n        ans[i] = current_val\n        \n    # Verify the solution\n    for u, v, g_orig, p_orig_val, _ in edges:\n        a_u = ans[u]\n        a_v = ans[v]\n\n        # Check for 0 values, though current_val starts at 1 so this shouldn't happen.\n        if a_u == 0 or a_v == 0:\n            sys.stdout.write(\"NO\\n\")\n            return\n\n        # Calculate GCD and LCM\n        # Using math.gcd is fine for small numbers, but for larger numbers\n        # and many calls, prime factorization based GCD/LCM is faster.\n        # However, Python's math.gcd is implemented in C and is very fast.\n        import math\n        calculated_gcd = math.gcd(a_u, a_v)\n        calculated_lcm = (a_u * a_v) // calculated_gcd\n\n        if calculated_gcd != g_orig or calculated_lcm != (g_orig * p_orig_val):\n            sys.stdout.write(\"NO\\n\")\n            return\n\n    sys.stdout.write(\"YES\\n\" + \" \".join(map(str, ans[1:])) + \"\\n\")\n\nsolve()\n\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n\n    if m == 0:\n        if n == 0: # Should not happen based on constraints (1 <= n <= 1000)\n            sys.stdout.write(\"YES\\n\\n\")\n        else:\n            sys.stdout.write(\"YES\\n\" + \" \".join([\"1\"] * n) + \"\\n\")\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    edges = []\n    \n    # Store edges and precompute P = LCM/GCD for each edge\n    for _ in range(m):\n        u, v, g, l = map(int, sys.stdin.readline().split())\n        if l % g != 0:\n            sys.stdout.write(\"NO\\n\")\n            return\n        p = l // g\n        adj[u].append((v, g, p))\n        adj[v].append((u, g, p))\n        edges.append((u, v, g, p))\n\n    # Initialize possible values for each node.\n    # Initially, for a node u, its value A_u must be a multiple of g_uv for all neighbors v.\n    # It also must be a divisor of l_uv for all neighbors v.\n    # So, A_u must be a multiple of LCM_g and a divisor of GCD_l.\n    # However, a more precise initial constraint is that A_u must be a multiple of g_uv for all (u,v).\n    # This means A_u must be a multiple of LCM(g_uv for all v adjacent to u).\n    # This is a strong constraint, but it's not the only one.\n    # Let's consider the prime factors.\n\n    # Precompute prime factors for numbers up to 10^6\n    MAX_VAL = 1000000\n    min_prime_factor = [0] * (MAX_VAL + 1)\n    primes = []\n    for i in range(2, MAX_VAL + 1):\n        if min_prime_factor[i] == 0:\n            min_prime_factor[i] = i\n            primes.append(i)\n        for p in primes:\n            if p > min_prime_factor[i] or i * p > MAX_VAL:\n                break\n            min_prime_factor[i * p] = p\n\n    def get_prime_factors(num):\n        factors = {}\n        if num == 0: return factors # Should not happen with problem constraints\n        while num > 1:\n            p = min_prime_factor[num]\n            factors[p] = factors.get(p, 0) + 1\n            num //= p\n        return factors\n\n    # Store prime factorization for each P_uv = L_uv / G_uv\n    for i in range(len(edges)):\n        u, v, g, p = edges[i]\n        edges[i] = (u, v, g, p, get_prime_factors(p)) # Add prime factors of p\n\n    # Assign initial state for each node: {prime_factor: exponent_state}\n    # exponent_state: 0 means A_u is a multiple of p^k, A_v is a multiple of p^(total_exp - k)\n    #                 1 means A_u is a multiple of p^(total_exp - k), A_v is a multiple of p^k\n    #                 -1 means undetermined\n    # This stores the \"relative\" state for each prime factor of P.\n    # For a prime factor p of P_uv, the exponent of p in A_u plus the exponent of p in A_v\n    # must be the exponent of p in (G_uv * P_uv) = L_uv.\n    # And the minimum of these two exponents must be the exponent of p in G_uv.\n    # This implies that for each prime factor p of P_uv, one of A_u or A_v gets the full p^k (from P_uv),\n    # and the other gets p^0 (relative to P_uv).\n    # Let exp_g be the exponent of p in G_uv.\n    # Let exp_p be the exponent of p in P_uv.\n    # Then the exponent of p in A_u is exp_g + x_u, and in A_v is exp_g + x_v.\n    # We must have x_u + x_v = exp_p and min(x_u, x_v) = 0.\n    # This means (x_u, x_v) is either (exp_p, 0) or (0, exp_p).\n    # So, A_u has p^(exp_g + exp_p) and A_v has p^exp_g, OR\n    # A_u has p^exp_g and A_v has p^(exp_g + exp_p).\n    # We can represent this as a boolean choice for each prime factor of P_uv.\n    # If p is a prime factor of P_uv with exponent k, then either A_u gets p^k or A_v gets p^k (relative to G_uv).\n\n    # `node_prime_state[u][p]` stores the \"relative\" exponent choice for prime `p` at node `u`.\n    # It's an integer `s`. If `s` is 0, it means `p` is not a factor of P_uv for any (u,v).\n    # If `s` is 1, it means `A_u` must contain `p^k` for some `k`.\n    # If `s` is -1, it means `A_u` must NOT contain `p^k` for some `k`.\n    # If `s` is 0 (unassigned), it means we haven't determined its relation to any neighbor yet.\n    # This is a 2-coloring problem on prime factors.\n    # For each prime `p` and each connected component `C` in the graph, we need to decide for each node `u` in `C`\n    # whether `A_u` contains `p^k` (where `k` is the exponent of `p` in `P_uv`) or not (relative to `G_uv`).\n    \n    # `final_exponents[u][p]` stores the final exponent of `p` in `A_u`.\n    final_exponents = [{} for _ in range(n + 1)]\n    \n    # `node_prime_choice[u][p]` stores 0 or 1.\n    # 0 means A_u gets the \"base\" part for prime p (exponent of p in G_uv).\n    # 1 means A_u gets the \"base\" part + \"P_factor\" part for prime p (exponent of p in L_uv).\n    node_prime_choice = [{} for _ in range(n + 1)] # {prime: 0 or 1 or None}\n    \n    # `visited_nodes` for DFS\n    visited_nodes = [False] * (n + 1)\n\n    # For each node u, initialize final_exponents[u] with exponents from all G_uv.\n    for u, v, g, p_val, p_factors in edges:\n        g_factors = get_prime_factors(g)\n        for prime, exp in g_factors.items():\n            final_exponents[u][prime] = max(final_exponents[u].get(prime, 0), exp)\n            final_exponents[v][prime] = max(final_exponents[v].get(prime, 0), exp)\n\n    # DFS function to propagate prime factor choices\n    # u: current node\n    # p: prime factor being processed\n    # choice: 0 or 1, the choice for node u regarding prime p\n    def dfs_prime_choice(u, p, choice):\n        if p not in node_prime_choice[u]:\n            node_prime_choice[u][p] = choice\n        elif node_prime_choice[u][p] != choice:\n            return False # Conflict found\n        else:\n            return True # Already visited with same choice\n\n        for v_node, g_val, p_val, p_factors in adj[u]:\n            if p in p_factors:\n                if not dfs_prime_choice(v_node, p, 1 - choice):\n                    return False\n        return True\n\n    # Iterate through all nodes and all primes to ensure all components are processed\n    # For each prime p\n    #   For each node u\n    #     If u is connected to an edge (u,v) where p is a factor of P_uv\n    #       And node_prime_choice[u][p] is not yet set\n    #         Start a DFS from u for prime p with an arbitrary choice (e.g., 0)\n    #         If DFS returns False, then no solution.\n    \n    # Collect all primes that appear in any P_uv\n    all_p_primes = set()\n    for u, v, g, p_val, p_factors in edges:\n        all_p_primes.update(p_factors.keys())\n\n    for p in all_p_primes:\n        for i in range(1, n + 1):\n            # Check if node i has any edge where p is a factor of P_uv\n            is_relevant_node_for_p = False\n            for v_node, g_val, p_val, p_factors in adj[i]:\n                if p in p_factors:\n                    is_relevant_node_for_p = True\n                    break\n            \n            if is_relevant_node_for_p and p not in node_prime_choice[i]:\n                if not dfs_prime_choice(i, p, 0): # Start DFS with arbitrary choice 0\n                    sys.stdout.write(\"NO\\n\")\n                    return\n\n    # Now construct the final A_i values\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        current_val = 1\n        \n        # Add exponents from G_uv for all neighbors v\n        for prime, exp in final_exponents[i].items():\n            for _ in range(exp):\n                current_val *= prime\n        \n        # Add exponents from P_uv based on choices\n        for prime, choice in node_prime_choice[i].items():\n            if choice == 1: # This node gets the P_factor for this prime\n                # Find an edge (i, v) where p is a factor of P_iv.\n                # The exponent to add is the exponent of p in P_iv.\n                # Since P_iv might be different for different neighbors, we need to be careful.\n                # The choice (0 or 1) determines whether A_u or A_v gets the P_factor.\n                # If A_u gets it (choice 1), then A_u gets p^(exp_p_uv).\n                # If A_u does not get it (choice 0), then A_u gets p^0 (relative to P_uv).\n                # The total exponent of p in A_u is exp_g_u_p + x_u_p.\n                # We need to find exp_p_uv such that p is a factor of P_uv.\n                \n                # We need to find the maximum exponent of p from any P_uv that this node \"claims\"\n                max_p_exp_from_P = 0\n                for v_node, g_val, p_val, p_factors in adj[i]:\n                    if prime in p_factors:\n                        max_p_exp_from_P = max(max_p_exp_from_P, p_factors[prime])\n                \n                for _ in range(max_p_exp_from_P):\n                    current_val *= prime\n        \n        if current_val > MAX_VAL:\n            sys.stdout.write(\"NO\\n\")\n            return\n        ans[i] = current_val\n        \n    # Verify the solution\n    for u, v, g_orig, p_orig_val, _ in edges:\n        a_u = ans[u]\n        a_v = ans[v]\n\n        # Check for 0 values, though current_val starts at 1 so this shouldn't happen.\n        if a_u == 0 or a_v == 0:\n            sys.stdout.write(\"NO\\n\")\n            return\n\n        # Calculate GCD and LCM\n        # Using math.gcd is fine for small numbers, but for larger numbers\n        # and many calls, prime factorization based GCD/LCM is faster.\n        # However, Python's math.gcd is implemented in C and is very fast.\n        import math\n        calculated_gcd = math.gcd(a_u, a_v)\n        calculated_lcm = (a_u * a_v) // calculated_gcd\n\n        if calculated_gcd != g_orig or calculated_lcm != (g_orig * p_orig_val):\n            sys.stdout.write(\"NO\\n\")\n            return\n\n    sys.stdout.write(\"YES\\n\" + \" \".join(map(str, ans[1:])) + \"\\n\")\n\nsolve()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 551,
        "completion_token_count": 3103,
        "thoughts_token_count": 794
    }
}