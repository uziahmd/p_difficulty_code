{
    "start": 1758294614.2546997,
    "end": 1758294636.0777903,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = [[] for _ in range(n)]\n    edge_list = []\n    possible = True\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            possible = False\n        edges[u].append((v,g,l))\n        edges[v].append((u,g,l))\n        edge_list.append((u,v,g,l))\n    if not possible:\n        print(\"NO\"); return\n    from math import gcd\n    assigned = [0]*n\n    visited = [False]*n\n    for i in range(n):\n        if visited[i]: continue\n        # BFS to collect component\n        comp = []\n        stack = [i]; visited[i]=True\n        while stack:\n            u = stack.pop()\n            comp.append(u)\n            for v,_,_ in edges[u]:\n                if not visited[v]:\n                    visited[v]=True\n                    stack.append(v)\n        # choose root i, try to assign values via DFS using multiplicative ratios\n        # We will build value as product of primes? Simpler: assign symbolic rational using fractions of integers but limits up to 1e6; use propagation with fraction a[u].\n        from fractions import Fraction\n        val = dict()\n        root = comp[0]\n        val[root]=Fraction(1,1)\n        stack = [root]\n        ok = True\n        while stack and ok:\n            u = stack.pop()\n            for v,g,l in edges[u]:\n                if v in val: \n                    # check consistency: gcd and lcm must hold given current ratio\n                    # Suppose A = x * val[u], B = x * val[v] for some scale x (component scale). But we keep val as ratios relative to root.\n                    continue\n                # relation: A = g * a, B = g * b where gcd(a,b)=1 and l = g*a*b\n                # Thus A/B = a/b = (l/g) / b^2? Hard. Instead using: A/B = ? But we can deduce val[v] = val[u] * (l//g) / k where k depends.\n                # Alternative approach: deduce multiplier r = l//g. Then a*b = r with gcd(a,b)=1. So a divides r.\n                # We can't determine uniquely; assign val[v] = val[u]*(r) and later scale down by gcd over component. To keep integers small, assign A = g*a where a = 1, b = r\n                # We'll set A_u = g, A_v = l//g * g = l. But need consistency across edges; better: set ratio val[v]=val[u]*(l//g)\n                r = l//g\n                val[v]=val[u]*r\n                stack.append(v)\n        # Now we have tentative ratios; need to find integer scale S such that for every edge (u,v,g,l):\n        # Let A_u = S * val[u], A_v = S * val[v]; need gcd(A_u,A_v)=g and lcm = l\n        # That implies gcd(S*ru, S*rv)=S*gcd(ru,rv)=g => S = g / gcd(ru,rv)\n        # So S must equal that for all edges and produce consistent integers; S must be integer.\n        # ru,rv are Fractions. Convert ru to rational numerator/denominator.\n        # Work with integer representation: represent ru as p_u/q_u. Let common multiplier T to make all ru integers: choose L = lcm of denominators.\n        from math import gcd\n        den_lcm = 1\n        for u in comp:\n            den_lcm = den_lcm * val[u].denominator // gcd(den_lcm, val[u].denominator)\n            if den_lcm>10**18:\n                break\n        if den_lcm>10**18:\n            print(\"NO\"); return\n        ru_int = {}\n        for u in comp:\n            ru_int[u] = val[u].numerator * (den_lcm // val[u].denominator)\n        S_required = None\n        for u in comp:\n            for v,g,l in edges[u]:\n                if u>v: continue\n                ru = ru_int[u]; rv = ru_int[v]\n                gg = gcd(ru,rv)\n                if g % gg !=0:\n                    ok = False; break\n                S = g // gg\n                if S_required is None:\n                    S_required = S\n                else:\n                    if S_required != S:\n                        ok = False; break\n                # check lcm: A_u = S*ru, A_v = S*rv => lcm = S * ru / gcd(ru,rv) * rv = S*ru*rv/gg = (g/gg)*ru*rv/gg = g*(ru*rv)/(gg*gg)\n                l_calc = (S * ru // gg) * rv\n                # but compute via integers avoiding overflow\n                if l_calc != l:\n                    ok = False; break\n            if not ok:\n                break\n        if not ok:\n            print(\"NO\"); return\n        if S_required is None:\n            S_required = 1\n        # Build actual values\n        for u in comp:\n            assigned[u] = S_required * ru_int[u]\n            if assigned[u] < 1 or assigned[u] > 10**18:\n                print(\"NO\"); return\n    # final check all edges satisfy gcd and lcm constraints and bounds <=1e6 as original maybe not required but initial guarantees up to 1e6; but final can be larger? Problem allowed any <=? Original numbers were <=1e6. So enforce <=1e6.\n    for u,v,g,l in edge_list:\n        from math import gcd\n        a = assigned[u]; b = assigned[v]\n        if gcd(a,b)!=g or (a//g)*b!=l:\n            print(\"NO\"); return\n        if a<1 or b<1 or a>10**6 or b>10**6:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(assigned[i]) for i in range(n)))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    edges = [[] for _ in range(n)]\n    edge_list = []\n    possible = True\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        if l % g != 0:\n            possible = False\n        edges[u].append((v,g,l))\n        edges[v].append((u,g,l))\n        edge_list.append((u,v,g,l))\n    if not possible:\n        print(\"NO\"); return\n    from math import gcd\n    assigned = [0]*n\n    visited = [False]*n\n    for i in range(n):\n        if visited[i]: continue\n        # BFS to collect component\n        comp = []\n        stack = [i]; visited[i]=True\n        while stack:\n            u = stack.pop()\n            comp.append(u)\n            for v,_,_ in edges[u]:\n                if not visited[v]:\n                    visited[v]=True\n                    stack.append(v)\n        # choose root i, try to assign values via DFS using multiplicative ratios\n        # We will build value as product of primes? Simpler: assign symbolic rational using fractions of integers but limits up to 1e6; use propagation with fraction a[u].\n        from fractions import Fraction\n        val = dict()\n        root = comp[0]\n        val[root]=Fraction(1,1)\n        stack = [root]\n        ok = True\n        while stack and ok:\n            u = stack.pop()\n            for v,g,l in edges[u]:\n                if v in val: \n                    # check consistency: gcd and lcm must hold given current ratio\n                    # Suppose A = x * val[u], B = x * val[v] for some scale x (component scale). But we keep val as ratios relative to root.\n                    continue\n                # relation: A = g * a, B = g * b where gcd(a,b)=1 and l = g*a*b\n                # Thus A/B = a/b = (l/g) / b^2? Hard. Instead using: A/B = ? But we can deduce val[v] = val[u] * (l//g) / k where k depends.\n                # Alternative approach: deduce multiplier r = l//g. Then a*b = r with gcd(a,b)=1. So a divides r.\n                # We can't determine uniquely; assign val[v] = val[u]*(r) and later scale down by gcd over component. To keep integers small, assign A = g*a where a = 1, b = r\n                # We'll set A_u = g, A_v = l//g * g = l. But need consistency across edges; better: set ratio val[v]=val[u]*(l//g)\n                r = l//g\n                val[v]=val[u]*r\n                stack.append(v)\n        # Now we have tentative ratios; need to find integer scale S such that for every edge (u,v,g,l):\n        # Let A_u = S * val[u], A_v = S * val[v]; need gcd(A_u,A_v)=g and lcm = l\n        # That implies gcd(S*ru, S*rv)=S*gcd(ru,rv)=g => S = g / gcd(ru,rv)\n        # So S must equal that for all edges and produce consistent integers; S must be integer.\n        # ru,rv are Fractions. Convert ru to rational numerator/denominator.\n        # Work with integer representation: represent ru as p_u/q_u. Let common multiplier T to make all ru integers: choose L = lcm of denominators.\n        from math import gcd\n        den_lcm = 1\n        for u in comp:\n            den_lcm = den_lcm * val[u].denominator // gcd(den_lcm, val[u].denominator)\n            if den_lcm>10**18:\n                break\n        if den_lcm>10**18:\n            print(\"NO\"); return\n        ru_int = {}\n        for u in comp:\n            ru_int[u] = val[u].numerator * (den_lcm // val[u].denominator)\n        S_required = None\n        for u in comp:\n            for v,g,l in edges[u]:\n                if u>v: continue\n                ru = ru_int[u]; rv = ru_int[v]\n                gg = gcd(ru,rv)\n                if g % gg !=0:\n                    ok = False; break\n                S = g // gg\n                if S_required is None:\n                    S_required = S\n                else:\n                    if S_required != S:\n                        ok = False; break\n                # check lcm: A_u = S*ru, A_v = S*rv => lcm = S * ru / gcd(ru,rv) * rv = S*ru*rv/gg = (g/gg)*ru*rv/gg = g*(ru*rv)/(gg*gg)\n                l_calc = (S * ru // gg) * rv\n                # but compute via integers avoiding overflow\n                if l_calc != l:\n                    ok = False; break\n            if not ok:\n                break\n        if not ok:\n            print(\"NO\"); return\n        if S_required is None:\n            S_required = 1\n        # Build actual values\n        for u in comp:\n            assigned[u] = S_required * ru_int[u]\n            if assigned[u] < 1 or assigned[u] > 10**18:\n                print(\"NO\"); return\n    # final check all edges satisfy gcd and lcm constraints and bounds <=1e6 as original maybe not required but initial guarantees up to 1e6; but final can be larger? Problem allowed any <=? Original numbers were <=1e6. So enforce <=1e6.\n    for u,v,g,l in edge_list:\n        from math import gcd\n        a = assigned[u]; b = assigned[v]\n        if gcd(a,b)!=g or (a//g)*b!=l:\n            print(\"NO\"); return\n        if a<1 or b<1 or a>10**6 or b>10**6:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(assigned[i]) for i in range(n)))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 1405,
        "thoughts_token_count": 0
    }
}