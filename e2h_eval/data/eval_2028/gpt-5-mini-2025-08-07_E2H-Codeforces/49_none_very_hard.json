{
    "start": 1758294630.5770626,
    "end": 1758294651.6004577,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```unknown\n#!/usr/bin/env python3\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    A = [0]*n\n    used = [False]*n\n    for i in range(n):\n        if used[i]: continue\n        if not adj[i]:\n            A[i]=1\n            used[i]=True\n            continue\n        # BFS assign ratios via multiplicative constraints\n        # We'll try to pick a starting value as product of adjacent gcds? Better: assign rational x_i = p_i/q where we track relative integers.\n        # Represent value as numerator times base factor. We'll store value as integer variable to be solved later: x = k * val_ratio\n        # We maintain ratios as fractions: val[node] = R[node] * t where R integers scaled so gcd of R in component =1\n        from fractions import Fraction\n        R = [None]*n\n        q = deque()\n        R[i]=Fraction(1,1)\n        q.append(i)\n        comp = [i]\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            for v,g,l in adj[u]:\n                # for nodes u and v: gcd(a,b)=g and lcm(a,b)=l -> a*b = g*l\n                # So ratio b/a = (g*l)/(a*a). But using fractions we can deduce R[v] = R[u] * (g*l) / (R[u]*R[u]*t^2) impossible without t.\n                # Alternative: derive that a = g * x, b = g * y where gcd(x,y)=1 and x*y = l/g\n                if l % g != 0:\n                    ok = False; break\n                k = l // g\n                # Let a = g * x, b = g * y with x*y = k and gcd(x,y)=1\n                # Then ratio y/x = b/a = R[v]/R[u]\n                # So R[v] = R[u] * y/x where x*y=k and gcd(x,y)=1. But x,y not uniquely determined.\n                # However we can enforce that R[u] and R[v] are rational multiples consistent across cycles.\n                # We can set R[v] = R[u] * Fraction(k,1) / Fraction(x*x,1)? This becomes complex.\n                # Instead we will try to set actual integer values by attempting divisors for each edge when traversing.\n                # Strategy: store constraints per edge and later resolve via BFS trying candidate starting A[i] as divisors of product of g*l's limited by 1e6.\n                pass\n        # Fallback: brute force possible start values from 1..1e6? But n up to?\n        # Realistic approach: For each component, pick a node and try to assign integer values by BFS choosing neighbor value = g * (k // x) ??? \n        # Due to complexity, use known solution: For each component, compute product P = product of g over edges in spanning tree maybe large.\n        # Given time, implement search: try possible value for start as divisors of all (g*l) incident edges' multiples up to 1e6.\n        # Collect candidate start values as divisors of each edge's a*b = g*l; candidate a must divide (g*l) and be multiple of gcd with neighbor constraints.\n        # We'll generate divisors of up to 1e6 numbers -> feasible.\n        # Build list of candidate a0 from intersection of divisors sets of incident edges for node i.\n        def divisors(x):\n            res=[]\n            d=1\n            while d*d<=x:\n                if x%d==0:\n                    res.append(d)\n                    if d*d!=x:\n                        res.append(x//d)\n                d+=1\n            return res\n        cand = None\n        # for starting node i, for each incident edge (i,v,g,l), any a must satisfy: a divisible by g and (a*(b)=g*l) with integer b -> a divides g*l\n        for v,g,l in adj[i]:\n            prod = g*l\n            ds = []\n            for d in divisors(prod):\n                if d%g==0 and 1 <= d <= 10**6:\n                    ds.append(d)\n            s = set(ds)\n            if cand is None:\n                cand = s\n            else:\n                cand &= s\n            if not cand:\n                break\n        if not cand:\n            print(\"NO\"); return\n        # Try each candidate assigning via BFS, check consistency and bounds.\n        success=False\n        for a0 in sorted(cand):\n            vals = {}\n            q = deque([i])\n            vals[i]=a0\n            good=True\n            while q and good:\n                u=q.popleft()\n                for v,g,l in adj[u]:\n                    if vals.get(u) % g != 0:\n                        good=False; break\n                    prod = g*l\n                    if prod % vals[u] !=0:\n                        good=False; break\n                    bv = prod // vals[u]\n                    if bv < 1 or bv > 10**6:\n                        good=False; break\n                    if gcd(vals[u], bv) != g:\n                        good=False; break\n                    if max(vals[u], bv) > l:\n                        # not necessary\n                        pass\n                    if v in vals:\n                        if vals[v]!=bv:\n                            good=False; break\n                    else:\n                        vals[v]=bv\n                        q.append(v)\n            if good:\n                # check all internal edges satisfied\n                for (u,v,g,l) in edges:\n                    if u in vals and v in vals:\n                        a=vals[u]; b=vals[v]\n                        if gcd(a,b)!=g or (a//g)*(b//g)!= (l//g) or (a*b!=g*l):\n                            good=False; break\n                if good:\n                    for node, val in vals.items():\n                        A[node]=val\n                        used[node]=True\n                    # for other nodes in component not reached? they should be reached\n                    for node in range(n):\n                        pass\n                    success=True\n                    break\n        if not success:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x if x>0 else 1) for x in A))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\n#!/usr/bin/env python3\nimport sys\nfrom math import gcd\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    A = [0]*n\n    used = [False]*n\n    for i in range(n):\n        if used[i]: continue\n        if not adj[i]:\n            A[i]=1\n            used[i]=True\n            continue\n        # BFS assign ratios via multiplicative constraints\n        # We'll try to pick a starting value as product of adjacent gcds? Better: assign rational x_i = p_i/q where we track relative integers.\n        # Represent value as numerator times base factor. We'll store value as integer variable to be solved later: x = k * val_ratio\n        # We maintain ratios as fractions: val[node] = R[node] * t where R integers scaled so gcd of R in component =1\n        from fractions import Fraction\n        R = [None]*n\n        q = deque()\n        R[i]=Fraction(1,1)\n        q.append(i)\n        comp = [i]\n        ok = True\n        while q and ok:\n            u = q.popleft()\n            for v,g,l in adj[u]:\n                # for nodes u and v: gcd(a,b)=g and lcm(a,b)=l -> a*b = g*l\n                # So ratio b/a = (g*l)/(a*a). But using fractions we can deduce R[v] = R[u] * (g*l) / (R[u]*R[u]*t^2) impossible without t.\n                # Alternative: derive that a = g * x, b = g * y where gcd(x,y)=1 and x*y = l/g\n                if l % g != 0:\n                    ok = False; break\n                k = l // g\n                # Let a = g * x, b = g * y with x*y = k and gcd(x,y)=1\n                # Then ratio y/x = b/a = R[v]/R[u]\n                # So R[v] = R[u] * y/x where x*y=k and gcd(x,y)=1. But x,y not uniquely determined.\n                # However we can enforce that R[u] and R[v] are rational multiples consistent across cycles.\n                # We can set R[v] = R[u] * Fraction(k,1) / Fraction(x*x,1)? This becomes complex.\n                # Instead we will try to set actual integer values by attempting divisors for each edge when traversing.\n                # Strategy: store constraints per edge and later resolve via BFS trying candidate starting A[i] as divisors of product of g*l's limited by 1e6.\n                pass\n        # Fallback: brute force possible start values from 1..1e6? But n up to?\n        # Realistic approach: For each component, pick a node and try to assign integer values by BFS choosing neighbor value = g * (k // x) ??? \n        # Due to complexity, use known solution: For each component, compute product P = product of g over edges in spanning tree maybe large.\n        # Given time, implement search: try possible value for start as divisors of all (g*l) incident edges' multiples up to 1e6.\n        # Collect candidate start values as divisors of each edge's a*b = g*l; candidate a must divide (g*l) and be multiple of gcd with neighbor constraints.\n        # We'll generate divisors of up to 1e6 numbers -> feasible.\n        # Build list of candidate a0 from intersection of divisors sets of incident edges for node i.\n        def divisors(x):\n            res=[]\n            d=1\n            while d*d<=x:\n                if x%d==0:\n                    res.append(d)\n                    if d*d!=x:\n                        res.append(x//d)\n                d+=1\n            return res\n        cand = None\n        # for starting node i, for each incident edge (i,v,g,l), any a must satisfy: a divisible by g and (a*(b)=g*l) with integer b -> a divides g*l\n        for v,g,l in adj[i]:\n            prod = g*l\n            ds = []\n            for d in divisors(prod):\n                if d%g==0 and 1 <= d <= 10**6:\n                    ds.append(d)\n            s = set(ds)\n            if cand is None:\n                cand = s\n            else:\n                cand &= s\n            if not cand:\n                break\n        if not cand:\n            print(\"NO\"); return\n        # Try each candidate assigning via BFS, check consistency and bounds.\n        success=False\n        for a0 in sorted(cand):\n            vals = {}\n            q = deque([i])\n            vals[i]=a0\n            good=True\n            while q and good:\n                u=q.popleft()\n                for v,g,l in adj[u]:\n                    if vals.get(u) % g != 0:\n                        good=False; break\n                    prod = g*l\n                    if prod % vals[u] !=0:\n                        good=False; break\n                    bv = prod // vals[u]\n                    if bv < 1 or bv > 10**6:\n                        good=False; break\n                    if gcd(vals[u], bv) != g:\n                        good=False; break\n                    if max(vals[u], bv) > l:\n                        # not necessary\n                        pass\n                    if v in vals:\n                        if vals[v]!=bv:\n                            good=False; break\n                    else:\n                        vals[v]=bv\n                        q.append(v)\n            if good:\n                # check all internal edges satisfied\n                for (u,v,g,l) in edges:\n                    if u in vals and v in vals:\n                        a=vals[u]; b=vals[v]\n                        if gcd(a,b)!=g or (a//g)*(b//g)!= (l//g) or (a*b!=g*l):\n                            good=False; break\n                if good:\n                    for node, val in vals.items():\n                        A[node]=val\n                        used[node]=True\n                    # for other nodes in component not reached? they should be reached\n                    for node in range(n):\n                        pass\n                    success=True\n                    break\n        if not success:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x if x>0 else 1) for x in A))\n\nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 1472,
        "thoughts_token_count": 0
    }
}