{
    "start": 1758284950.5487313,
    "end": 1758285005.8269103,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Exploring edge constraints in graphs**\n\nI'm thinking about how to handle edges with g and l, requiring specific relationships between their exponents. If the exponent for g is greater than l, it seems impossible. But if they’re equal, both must have the same exponent. When e_g is less than e_l, they must differ, suggesting a form of 2-coloring. I wonder if reconstructing values using the gcd of adjacent lcm could be a simpler solution, starting each node with a value of 1.",
    "response": "import sys\nfrom collections import defaultdict, deque\n\nMAXA = 10**6\n\ndef spf_sieve(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = spf_sieve(MAXA)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        c = 0\n        while x%p==0:\n            x//=p\n            c+=1\n        res[p]=c\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\n# Quick check: for each edge l % g == 0\nfor (u,v,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Collect per-prime constraints\nprime_constraints = defaultdict(list)  # p -> list of (u,v,eg,el)\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p,0)\n        el = fl.get(p,0)\n        if eg > el:\n            print(\"NO\"); sys.exit(0)\n        prime_constraints[p].append((u,v,eg,el))\n\n# exponent per prime per node\nexp_per_prime = {}  # p -> list of exponents length n (default 0)\nfor p, plist in prime_constraints.items():\n    adj = [[] for _ in range(n)]\n    assigned = [-1]*n\n    possible_vals = [set() for _ in range(n)]\n    # build adjacency\n    for (u,v,eg,el) in plist:\n        adj[u].append((v,eg,el))\n        adj[v].append((u,eg,el))\n        possible_vals[u].add(eg); possible_vals[u].add(el)\n        possible_vals[v].add(eg); possible_vals[v].add(el)\n    # process edges with eg==el -> force assign both\n    q = deque()\n    for (u,v,eg,el) in plist:\n        if eg==el:\n            if assigned[u]!=-1 and assigned[u]!=eg:\n                print(\"NO\"); sys.exit(0)\n            if assigned[v]!=-1 and assigned[v]!=eg:\n                print(\"NO\"); sys.exit(0)\n            if assigned[u]==-1:\n                assigned[u]=eg; q.append(u)\n            if assigned[v]==-1:\n                assigned[v]=eg; q.append(v)\n    # BFS propagate forced\n    while q:\n        u = q.popleft()\n        Eu = assigned[u]\n        for (v,eg,el) in adj[u]:\n            # if Eu equals eg then v must be el; if Eu equals el then v must be eg; else impossible\n            if Eu==eg:\n                need = el\n            elif Eu==el:\n                need = eg\n            else:\n                print(\"NO\"); sys.exit(0)\n            if assigned[v]==-1:\n                assigned[v]=need; q.append(v)\n            elif assigned[v]!=need:\n                print(\"NO\"); sys.exit(0)\n    # For remaining components unassigned, try choices\n    vis = [False]*n\n    for i in range(n):\n        if assigned[i]!=-1 or not adj[i]:\n            continue\n        if vis[i]:\n            continue\n        # gather component nodes via stack\n        comp = []\n        stack = [i]; vis[i]=True\n        while stack:\n            u = stack.pop()\n            comp.append(u)\n            for v,eg,el in adj[u]:\n                if not vis[v]:\n                    vis[v]=True; stack.append(v)\n        # try to assign this component by picking a start node and trying each possible value from possible_vals[start]\n        success = False\n        start = comp[0]\n        start_choices = list(possible_vals[start])\n        for choice in start_choices:\n            # try assign with rollback\n            assigned_local = []\n            good = True\n            assign_stack = [start]\n            assigned[start]=choice\n            assigned_local.append(start)\n            while assign_stack and good:\n                u = assign_stack.pop()\n                Eu = assigned[u]\n                for (v,eg,el) in adj[u]:\n                    if Eu==eg:\n                        need = el\n                    elif Eu==el:\n                        need = eg\n                    else:\n                        good = False; break\n                    if assigned[v]==-1:\n                        assigned[v]=need\n                        assigned_local.append(v)\n                        assign_stack.append(v)\n                    elif assigned[v]!=need:\n                        good = False; break\n            if good:\n                success = True\n                break\n            else:\n                # rollback assigned in this trial\n                for node in assigned_local:\n                    assigned[node] = -1\n        if not success:\n            print(\"NO\"); sys.exit(0)\n    # remaining nodes with no incident edges keep exponent 0\n    for i in range(n):\n        if assigned[i]==-1:\n            assigned[i]=0\n    exp_per_prime[p]=assigned\n\n# Construct final numbers\nans = [1]*n\nfor p, arr in exp_per_prime.items():\n    for i,e in enumerate(arr):\n        if e:\n            ans[i] *= pow(p,e)\n\n# final check on all edges\nimport math\nfor (u,v,g,l) in edges:\n    if math.gcd(ans[u], ans[v])!=g or (ans[u]*ans[v])//math.gcd(ans[u],ans[v])!=l:\n        print(\"NO\"); sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in ans))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\nMAXA = 10**6\n\ndef spf_sieve(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = spf_sieve(MAXA)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        c = 0\n        while x%p==0:\n            x//=p\n            c+=1\n        res[p]=c\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it)) - 1\n    v = int(next(it)) - 1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\n# Quick check: for each edge l % g == 0\nfor (u,v,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# Collect per-prime constraints\nprime_constraints = defaultdict(list)  # p -> list of (u,v,eg,el)\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    primes = set(fg.keys()) | set(fl.keys())\n    for p in primes:\n        eg = fg.get(p,0)\n        el = fl.get(p,0)\n        if eg > el:\n            print(\"NO\"); sys.exit(0)\n        prime_constraints[p].append((u,v,eg,el))\n\n# exponent per prime per node\nexp_per_prime = {}  # p -> list of exponents length n (default 0)\nfor p, plist in prime_constraints.items():\n    adj = [[] for _ in range(n)]\n    assigned = [-1]*n\n    possible_vals = [set() for _ in range(n)]\n    # build adjacency\n    for (u,v,eg,el) in plist:\n        adj[u].append((v,eg,el))\n        adj[v].append((u,eg,el))\n        possible_vals[u].add(eg); possible_vals[u].add(el)\n        possible_vals[v].add(eg); possible_vals[v].add(el)\n    # process edges with eg==el -> force assign both\n    q = deque()\n    for (u,v,eg,el) in plist:\n        if eg==el:\n            if assigned[u]!=-1 and assigned[u]!=eg:\n                print(\"NO\"); sys.exit(0)\n            if assigned[v]!=-1 and assigned[v]!=eg:\n                print(\"NO\"); sys.exit(0)\n            if assigned[u]==-1:\n                assigned[u]=eg; q.append(u)\n            if assigned[v]==-1:\n                assigned[v]=eg; q.append(v)\n    # BFS propagate forced\n    while q:\n        u = q.popleft()\n        Eu = assigned[u]\n        for (v,eg,el) in adj[u]:\n            # if Eu equals eg then v must be el; if Eu equals el then v must be eg; else impossible\n            if Eu==eg:\n                need = el\n            elif Eu==el:\n                need = eg\n            else:\n                print(\"NO\"); sys.exit(0)\n            if assigned[v]==-1:\n                assigned[v]=need; q.append(v)\n            elif assigned[v]!=need:\n                print(\"NO\"); sys.exit(0)\n    # For remaining components unassigned, try choices\n    vis = [False]*n\n    for i in range(n):\n        if assigned[i]!=-1 or not adj[i]:\n            continue\n        if vis[i]:\n            continue\n        # gather component nodes via stack\n        comp = []\n        stack = [i]; vis[i]=True\n        while stack:\n            u = stack.pop()\n            comp.append(u)\n            for v,eg,el in adj[u]:\n                if not vis[v]:\n                    vis[v]=True; stack.append(v)\n        # try to assign this component by picking a start node and trying each possible value from possible_vals[start]\n        success = False\n        start = comp[0]\n        start_choices = list(possible_vals[start])\n        for choice in start_choices:\n            # try assign with rollback\n            assigned_local = []\n            good = True\n            assign_stack = [start]\n            assigned[start]=choice\n            assigned_local.append(start)\n            while assign_stack and good:\n                u = assign_stack.pop()\n                Eu = assigned[u]\n                for (v,eg,el) in adj[u]:\n                    if Eu==eg:\n                        need = el\n                    elif Eu==el:\n                        need = eg\n                    else:\n                        good = False; break\n                    if assigned[v]==-1:\n                        assigned[v]=need\n                        assigned_local.append(v)\n                        assign_stack.append(v)\n                    elif assigned[v]!=need:\n                        good = False; break\n            if good:\n                success = True\n                break\n            else:\n                # rollback assigned in this trial\n                for node in assigned_local:\n                    assigned[node] = -1\n        if not success:\n            print(\"NO\"); sys.exit(0)\n    # remaining nodes with no incident edges keep exponent 0\n    for i in range(n):\n        if assigned[i]==-1:\n            assigned[i]=0\n    exp_per_prime[p]=assigned\n\n# Construct final numbers\nans = [1]*n\nfor p, arr in exp_per_prime.items():\n    for i,e in enumerate(arr):\n        if e:\n            ans[i] *= pow(p,e)\n\n# final check on all edges\nimport math\nfor (u,v,g,l) in edges:\n    if math.gcd(ans[u], ans[v])!=g or (ans[u]*ans[v])//math.gcd(ans[u],ans[v])!=l:\n        print(\"NO\"); sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in ans))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 3255,
        "thoughts_token_count": 1920
    }
}