{
    "start": 1758290743.9545822,
    "end": 1758290843.3476388,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "**Thinking about 2-coloring in graphs**\n\nI'm considering a 2-coloring problem where edges have two potential values, but those values can differ between edges. The constraints indicate that endpoints must be assigned distinct values from two specific options. So, I’m modeling this as a graph where each node can choose an exponent value based on its incident edges. Specifically, I’ll focus on the intersection of allowed values from those edges, which is crucial for ensuring a consistent assignment. If there's no intersection, we hit a wall!",
    "response": "```unknown\nimport sys\nfrom collections import defaultdict, deque\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nedges = []\nfor _ in range(m):\n    u = next(it) - 1\n    v = next(it) - 1\n    g = next(it)\n    l = next(it)\n    edges.append((u, v, g, l))\n\n# quick check l % g == 0\nfor (u, v, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# sieve primes up to 1000 for factoring\nMAXP = 1000\npr = []\nis_composite = [False] * (MAXP + 1)\nfor i in range(2, MAXP + 1):\n    if not is_composite[i]:\n        pr.append(i)\n        for j in range(i*i, MAXP+1, i):\n            is_composite[j] = True\n\ndef factorize(x):\n    res = {}\n    t = x\n    for p in pr:\n        if p*p > t:\n            break\n        if t % p == 0:\n            c = 0\n            while t % p == 0:\n                t //= p\n                c += 1\n            res[p] = c\n    if t > 1:\n        res[t] = res.get(t, 0) + 1\n    return res\n\n# factor g and l for each edge\nfact_g = []\nfact_l = []\nprimes_set = set()\nfor (u,v,g,l) in edges:\n    fg = factorize(g)\n    fl = factorize(l)\n    fact_g.append(fg)\n    fact_l.append(fl)\n    primes_set.update(fg.keys())\n    primes_set.update(fl.keys())\n\nprimes = list(primes_set)\n\nans = [1] * n\n\n# For each prime, solve exponent assignments\nfor p in primes:\n    # build per-edge exponent info\n    per_edge = []\n    adj = [[] for _ in range(n)]\n    for idx, (u,v,g,l) in enumerate(edges):\n        eg = fact_g[idx].get(p, 0)\n        el = fact_l[idx].get(p, 0)\n        if eg == 0 and el == 0:\n            continue\n        per_edge.append((u, v, eg, el))\n        adj[u].append((v, eg, el, idx))\n        adj[v].append((u, el, eg, idx))  # storing symmetric view: when at v, eg/el swapped for neighbor view\n\n    # If no edges involve this prime, skip (all exponents zero)\n    if not per_edge:\n        continue\n\n    # S sets\n    S = [None] * n\n    # For nodes with incident edges, initialize intersection of V={eg,el} across incident edges\n    for u in range(n):\n        if not adj[u]:\n            S[u] = {0}\n        else:\n            # for each incident edge entry (neighbor, my_exp, neigh_exp, idx) where my_exp is exponent for this node in that edge\n            s = None\n            for (v, my_e, neigh_e, idx) in adj[u]:\n                V = {my_e, neigh_e}\n                if s is None:\n                    s = set(V)\n                else:\n                    s &= V\n            if s is None:\n                S[u] = {0}\n            else:\n                S[u] = s\n    for u in range(n):\n        if not S[u]:\n            print(\"NO\")\n            sys.exit(0)\n\n    # build edge map for propagation: store for each edge index its (u,v,eg,el)\n    edge_map = {}\n    for idx, (u,v,eg,el) in enumerate(per_edge):\n        edge_map[(u,v,eg,el)] = (u,v,eg,el)  # not really used\n\n    # For propagation, create list of edges keyed by unordered pair for lookup of V set\n    edges_for_node = [[] for _ in range(n)]\n    # maintain original per_edge list as edges_list\n    edges_list = []\n    for (u,v,eg,el) in per_edge:\n        edges_list.append((u,v,eg,el))\n        edges_for_node[u].append((v, eg, el))\n        edges_for_node[v].append((u, el, eg))\n\n    q = deque()\n    inq = [False]*n\n    for u in range(n):\n        if len(S[u]) == 1:\n            q.append(u)\n            inq[u] = True\n\n    while q:\n        u = q.popleft()\n        inq[u] = False\n        val = next(iter(S[u]))\n        # propagate to neighbors\n        for (v, my_e, neigh_e) in edges_for_node[u]:\n            V = {my_e, neigh_e}\n            if val not in V:\n                print(\"NO\")\n                sys.exit(0)\n            # required neighbor value:\n            if len(V) == 1:\n                other = val\n            else:\n                # other is the value in V that's not val\n                if my_e == val:\n                    other = neigh_e\n                elif neigh_e == val:\n                    other = my_e\n                else:\n                    # val in V but neither equals my_e? shouldn't happen\n                    other = (V - {val}).copy().pop()\n            # intersect S[v] with {other}\n            if other not in S[v]:\n                print(\"NO\")\n                sys.exit(0)\n            if len(S[v]) > 1:\n                S[v] = {other}\n                if not inq[v]:\n                    q.append(v)\n                    inq[v] = True\n\n    # After propagation, handle remaining nodes with S size 2 (or more, but should be <=2)\n    color = [ -1 ] * n\n    for u in range(n):\n        if len(S[u]) == 2:\n            if color[u] != -1:\n                continue\n            # BFS component\n            # Determine the pair values for this component by taking S[u]\n            pair = tuple(sorted(S[u]))\n            a, b = pair\n            dq = deque()\n            color[u] = 0\n            dq.append(u)\n            while dq:\n                x = dq.popleft()\n                for (y, my_e, neigh_e) in edges_for_node[x]:\n                    # Only edges that require two different values matter here\n                    V = {my_e, neigh_e}\n                    if len(V) == 1:\n                        # this edge would have forced earlier; should not connect two-degree-2 nodes, but skip\n                        continue\n                    # Both x and y should have S size 2\n                    if len(S[y]) != 2:\n                        # If neighbor is fixed, it should have been propagated; if not, it's a contradiction\n                        # But we can check\n                        # neighbor's single value must be opposite of this node's assigned value\n                        assigned_x = a if color[x] == 0 else b\n                        if assigned_x not in V:\n                            print(\"NO\")\n                            sys.exit(0)\n                        other_val = (V - {assigned_x}).copy().pop()\n                        if other_val not in S[y]:\n                            print(\"NO\")\n                            sys.exit(0)\n                        # Would have been processed earlier; continue\n                        continue\n                    if color[y] == -1:\n                        color[y] = color[x] ^ 1\n                        dq.append(y)\n                    else:\n                        if color[y] == color[x]:\n                            print(\"NO\")\n                            sys.exit(0)\n\n    # Assign exponents per node for this prime\n    exp_p = [0]*n\n    for u in range(n):\n        if len(S[u]) == 1:\n            exp_p[u] = next(iter(S[u]))\n        else:\n            # len==2\n            pair = tuple(sorted(S[u]))\n            a,b = pair\n            if color[u] == -1:\n                # isolated with size2? choose arbitrary\n                exp_p[u] = a\n            else:\n                exp_p[u] = a if color[u] == 0 else b\n\n    # Multiply into ans\n    mul = [1]*n\n    pow_p = [1]\n    # compute p^k up to max exponent found\n    maxe = max(exp_p)\n    for _ in range(maxe):\n        pow_p.append(pow_p[-1]*p)\n    for i in range(n):\n        ans[i] *= pow_p[exp_p[i]]\n        if ans[i] > 10**18:\n            # avoid overflow, but final values should be small\n            pass\n\n# Final verification: check each edge gcd and lcm\nimport math\nfor (u,v,g,l) in edges:\n    a = ans[u]\n    b = ans[v]\n    if math.gcd(a,b) != g or (a//math.gcd(a,b))*b != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in ans))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "unknown\nimport sys\nfrom collections import defaultdict, deque\n\ndata = list(map(int, sys.stdin.read().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nedges = []\nfor _ in range(m):\n    u = next(it) - 1\n    v = next(it) - 1\n    g = next(it)\n    l = next(it)\n    edges.append((u, v, g, l))\n\n# quick check l % g == 0\nfor (u, v, g, l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# sieve primes up to 1000 for factoring\nMAXP = 1000\npr = []\nis_composite = [False] * (MAXP + 1)\nfor i in range(2, MAXP + 1):\n    if not is_composite[i]:\n        pr.append(i)\n        for j in range(i*i, MAXP+1, i):\n            is_composite[j] = True\n\ndef factorize(x):\n    res = {}\n    t = x\n    for p in pr:\n        if p*p > t:\n            break\n        if t % p == 0:\n            c = 0\n            while t % p == 0:\n                t //= p\n                c += 1\n            res[p] = c\n    if t > 1:\n        res[t] = res.get(t, 0) + 1\n    return res\n\n# factor g and l for each edge\nfact_g = []\nfact_l = []\nprimes_set = set()\nfor (u,v,g,l) in edges:\n    fg = factorize(g)\n    fl = factorize(l)\n    fact_g.append(fg)\n    fact_l.append(fl)\n    primes_set.update(fg.keys())\n    primes_set.update(fl.keys())\n\nprimes = list(primes_set)\n\nans = [1] * n\n\n# For each prime, solve exponent assignments\nfor p in primes:\n    # build per-edge exponent info\n    per_edge = []\n    adj = [[] for _ in range(n)]\n    for idx, (u,v,g,l) in enumerate(edges):\n        eg = fact_g[idx].get(p, 0)\n        el = fact_l[idx].get(p, 0)\n        if eg == 0 and el == 0:\n            continue\n        per_edge.append((u, v, eg, el))\n        adj[u].append((v, eg, el, idx))\n        adj[v].append((u, el, eg, idx))  # storing symmetric view: when at v, eg/el swapped for neighbor view\n\n    # If no edges involve this prime, skip (all exponents zero)\n    if not per_edge:\n        continue\n\n    # S sets\n    S = [None] * n\n    # For nodes with incident edges, initialize intersection of V={eg,el} across incident edges\n    for u in range(n):\n        if not adj[u]:\n            S[u] = {0}\n        else:\n            # for each incident edge entry (neighbor, my_exp, neigh_exp, idx) where my_exp is exponent for this node in that edge\n            s = None\n            for (v, my_e, neigh_e, idx) in adj[u]:\n                V = {my_e, neigh_e}\n                if s is None:\n                    s = set(V)\n                else:\n                    s &= V\n            if s is None:\n                S[u] = {0}\n            else:\n                S[u] = s\n    for u in range(n):\n        if not S[u]:\n            print(\"NO\")\n            sys.exit(0)\n\n    # build edge map for propagation: store for each edge index its (u,v,eg,el)\n    edge_map = {}\n    for idx, (u,v,eg,el) in enumerate(per_edge):\n        edge_map[(u,v,eg,el)] = (u,v,eg,el)  # not really used\n\n    # For propagation, create list of edges keyed by unordered pair for lookup of V set\n    edges_for_node = [[] for _ in range(n)]\n    # maintain original per_edge list as edges_list\n    edges_list = []\n    for (u,v,eg,el) in per_edge:\n        edges_list.append((u,v,eg,el))\n        edges_for_node[u].append((v, eg, el))\n        edges_for_node[v].append((u, el, eg))\n\n    q = deque()\n    inq = [False]*n\n    for u in range(n):\n        if len(S[u]) == 1:\n            q.append(u)\n            inq[u] = True\n\n    while q:\n        u = q.popleft()\n        inq[u] = False\n        val = next(iter(S[u]))\n        # propagate to neighbors\n        for (v, my_e, neigh_e) in edges_for_node[u]:\n            V = {my_e, neigh_e}\n            if val not in V:\n                print(\"NO\")\n                sys.exit(0)\n            # required neighbor value:\n            if len(V) == 1:\n                other = val\n            else:\n                # other is the value in V that's not val\n                if my_e == val:\n                    other = neigh_e\n                elif neigh_e == val:\n                    other = my_e\n                else:\n                    # val in V but neither equals my_e? shouldn't happen\n                    other = (V - {val}).copy().pop()\n            # intersect S[v] with {other}\n            if other not in S[v]:\n                print(\"NO\")\n                sys.exit(0)\n            if len(S[v]) > 1:\n                S[v] = {other}\n                if not inq[v]:\n                    q.append(v)\n                    inq[v] = True\n\n    # After propagation, handle remaining nodes with S size 2 (or more, but should be <=2)\n    color = [ -1 ] * n\n    for u in range(n):\n        if len(S[u]) == 2:\n            if color[u] != -1:\n                continue\n            # BFS component\n            # Determine the pair values for this component by taking S[u]\n            pair = tuple(sorted(S[u]))\n            a, b = pair\n            dq = deque()\n            color[u] = 0\n            dq.append(u)\n            while dq:\n                x = dq.popleft()\n                for (y, my_e, neigh_e) in edges_for_node[x]:\n                    # Only edges that require two different values matter here\n                    V = {my_e, neigh_e}\n                    if len(V) == 1:\n                        # this edge would have forced earlier; should not connect two-degree-2 nodes, but skip\n                        continue\n                    # Both x and y should have S size 2\n                    if len(S[y]) != 2:\n                        # If neighbor is fixed, it should have been propagated; if not, it's a contradiction\n                        # But we can check\n                        # neighbor's single value must be opposite of this node's assigned value\n                        assigned_x = a if color[x] == 0 else b\n                        if assigned_x not in V:\n                            print(\"NO\")\n                            sys.exit(0)\n                        other_val = (V - {assigned_x}).copy().pop()\n                        if other_val not in S[y]:\n                            print(\"NO\")\n                            sys.exit(0)\n                        # Would have been processed earlier; continue\n                        continue\n                    if color[y] == -1:\n                        color[y] = color[x] ^ 1\n                        dq.append(y)\n                    else:\n                        if color[y] == color[x]:\n                            print(\"NO\")\n                            sys.exit(0)\n\n    # Assign exponents per node for this prime\n    exp_p = [0]*n\n    for u in range(n):\n        if len(S[u]) == 1:\n            exp_p[u] = next(iter(S[u]))\n        else:\n            # len==2\n            pair = tuple(sorted(S[u]))\n            a,b = pair\n            if color[u] == -1:\n                # isolated with size2? choose arbitrary\n                exp_p[u] = a\n            else:\n                exp_p[u] = a if color[u] == 0 else b\n\n    # Multiply into ans\n    mul = [1]*n\n    pow_p = [1]\n    # compute p^k up to max exponent found\n    maxe = max(exp_p)\n    for _ in range(maxe):\n        pow_p.append(pow_p[-1]*p)\n    for i in range(n):\n        ans[i] *= pow_p[exp_p[i]]\n        if ans[i] > 10**18:\n            # avoid overflow, but final values should be small\n            pass\n\n# Final verification: check each edge gcd and lcm\nimport math\nfor (u,v,g,l) in edges:\n    a = ans[u]\n    b = ans[v]\n    if math.gcd(a,b) != g or (a//math.gcd(a,b))*b != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in ans))",
    "score": -1,
    "metadata": {
        "prompt_token_count": 528,
        "completion_token_count": 5918,
        "thoughts_token_count": 3968
    }
}