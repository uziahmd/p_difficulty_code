{
    "start": 1758284940.0437458,
    "end": 1758285002.4212046,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 44,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Polycarp's Practice\n\nPolycarp is practicing his problem solving skill. He has a list of $$$n$$$ problems with difficulties $$$a_1, a_2, \\dots, a_n$$$, respectively. His plan is to practice for exactly $$$k$$$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $$$n$$$ problems in exactly $$$k$$$ days.Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $$$k$$$ days he will solve all the $$$n$$$ problems.The profit of the $$$j$$$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $$$j$$$-th day (i.e. if he solves problems with indices from $$$l$$$ to $$$r$$$ during a day, then the profit of the day is $$$\\max\\limits_{l \\le i \\le r}a_i$$$). The total profit of his practice is the sum of the profits over all $$$k$$$ days of his practice.You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $$$n$$$ problems between $$$k$$$ days satisfying the conditions above in such a way, that the total profit is maximum.For example, if $$$n = 8, k = 3$$$ and $$$a = [5, 4, 2, 6, 5, 1, 9, 2]$$$, one of the possible distributions with maximum total profit is: $$$[5, 4, 2], [6, 5], [1, 9, 2]$$$. Here the total profit equals $$$5 + 6 + 9 = 20$$$.\n\n## Input\nThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2000$$$) — the number of problems and the number of days, respectively.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 2000$$$) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n## Output\nIn the first line of the output print the maximum possible total profit.In the second line print exactly $$$k$$$ positive integers $$$t_1, t_2, \\dots, t_k$$$ ($$$t_1 + t_2 + \\dots + t_k$$$ must equal $$$n$$$), where $$$t_j$$$ means the number of problems Polycarp will solve during the $$$j$$$-th day in order to achieve the maximum possible total profit of his practice.If there are many possible answers, you may print any of them.\n\n## Example\n### Input\n['8 3\\n5 4 2 6 5 1 9 2', '5 1\\n1 1 1 1 1', '4 2\\n1 2000 2000 2']\n\n### Output\n['20\\n3 2 3', '1\\n5', '4000\\n2 2']\n\n## Note\nThe first example is described in the problem statement.In the second example there is only one possible distribution.In the third example the best answer is to distribute problems in the following way: $$$[1, 2000], [2000, 2]$$$. The total profit of this distribution is $$$2000 + 2000 = 4000$$$.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Exploring the CF problem**\n\nI’m looking at the CF problem \"Polycarp's Practice,\" likely problem 1512. It seems to involve dynamic programming for partitioning a sequence to maximize segment maxima. We have constraints like n up to 2000 and values a_i also up to 2000. The classic DP solution would be too large at O(n^2 k), which could hit 8e9. There's a chance to optimize by utilizing monotonic stacks or compressing the values since they’re relatively small.",
    "response": "```python\nimport sys\nsys.setrecursionlimit(1000000)\n\nINF = 10**18\n\nclass SegTree:\n    def __init__(self, arr):\n        n = len(arr)\n        self.n = n\n        size = 1\n        while size < n: size <<= 1\n        self.size = size\n        self.maxv = [ -INF ] * (2*size)\n        self.idx = [ -1 ] * (2*size)\n        self.lazy = [0] * (2*size)\n        for i in range(n):\n            self.maxv[size + i] = arr[i]\n            self.idx[size + i] = i\n        for i in range(size-1, 0, -1):\n            left = 2*i\n            right = left+1\n            if self.maxv[left] >= self.maxv[right]:\n                self.maxv[i] = self.maxv[left]\n                self.idx[i] = self.idx[left]\n            else:\n                self.maxv[i] = self.maxv[right]\n                self.idx[i] = self.idx[right]\n\n    def _apply(self, i, v):\n        self.maxv[i] += v\n        self.lazy[i] += v\n\n    def _push(self, i):\n        if self.lazy[i] != 0:\n            self._apply(2*i, self.lazy[i])\n            self._apply(2*i+1, self.lazy[i])\n            self.lazy[i] = 0\n\n    def _pull(self, i):\n        left = 2*i\n        right = left+1\n        if self.maxv[left] >= self.maxv[right]:\n            self.maxv[i] = self.maxv[left]\n            self.idx[i] = self.idx[left]\n        else:\n            self.maxv[i] = self.maxv[right]\n            self.idx[i] = self.idx[right]\n\n    def range_add(self, l, r, v):\n        if l > r: return\n        self._range_add(1, 0, self.size-1, l, r, v)\n\n    def _range_add(self, i, tl, tr, l, r, v):\n        if l > r:\n            return\n        if l <= tl and tr <= r:\n            self._apply(i, v)\n            return\n        self._push(i)\n        tm = (tl + tr) >> 1\n        if l <= tm:\n            self._range_add(2*i, tl, tm, l, min(r, tm), v)\n        if r > tm:\n            self._range_add(2*i+1, tm+1, tr, max(l, tm+1), r, v)\n        self._pull(i)\n\n    def range_query(self, l, r):\n        if l > r:\n            return -INF, -1\n        return self._range_query(1, 0, self.size-1, l, r)\n\n    def _range_query(self, i, tl, tr, l, r):\n        if l <= tl and tr <= r:\n            return self.maxv[i], self.idx[i]\n        self._push(i)\n        tm = (tl + tr) >> 1\n        resv = -INF\n        resi = -1\n        if l <= tm:\n            v, idx = self._range_query(2*i, tl, tm, l, min(r, tm))\n            if v > resv:\n                resv, resi = v, idx\n        if r > tm:\n            v, idx = self._range_query(2*i+1, tm+1, tr, max(l, tm+1), r)\n            if v > resv:\n                resv, resi = v, idx\n        return resv, resi\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    # dp_prev[p] for p=0..n-1 corresponds to prefix length p\n    # initial dp for 0 segments: dp_prev[0]=0 else -inf\n    dp_prev = [ -INF ] * n\n    dp_prev[0] = 0  # position p=0 means prefix length 0\n    # Note: positions p>0 represent dp_prev[p] = -inf initially\n\n    # prev pointers: prev_pos[r][j] = p\n    prev = [ [0]*(k+1) for _ in range(n+1) ]  # 1..n, j=1..k\n\n    for j in range(1, k+1):\n        st = SegTree(dp_prev)\n        stack = []  # elements (val, start)\n        dp_cur = [ -INF ] * (n+1)  # dp_cur[r] for r=0..n\n        # dp_cur[0] stays -inf (can't partition zero elements into j>=1 segments)\n        for r in range(1, n+1):\n            vr = a[r-1]\n            prev_start = r-1\n            while stack and stack[-1][0] <= vr:\n                val, s = stack.pop()\n                st.range_add(s, prev_start, vr - val)\n                prev_start = s - 1\n            left = prev_start + 1\n            stack.append((vr, left))\n            # query best p in [0..r-1]\n            best_val, best_idx = st.range_query(0, r-1)\n            dp_cur[r] = best_val\n            prev[r][j] = best_idx  # best_idx is p\n        # prepare dp_prev for next iteration: dp_prev[p] corresponds to prefix length p\n        dp_prev = [ -INF ] * n\n        for p in range(n):\n            dp_prev[p] = dp_cur[p+1]  # shift: dp_prev[p] = dp for r = p+1 for next j? Wait logic:\n            # Actually dp_prev positions represent dp for prefix length p: we need dp_prev[p] = dp_cur[p]\n            # But in segtree we used dp_prev indices 0..n-1 mapping to prefix length p.\n            # After finishing j, dp_prev for next j should be dp_cur[r] at index r (prefix length r).\n        # Correction: above assignment is wrong. We need dp_prev[p] = dp_cur[p] for p=0..n-1 where dp_cur[0] invalid.\n        # Let's fix by recomputing properly.\n\n        # Correct update:\n        new_dp_prev = [ -INF ] * n\n        # dp_cur[r] corresponds to dp for first r elements into j segments.\n        # For next iteration, dp_prev[p] should equal dp_cur[p] (prefix length p).\n        # For p from 0..n-1, dp_prev[p] = dp_cur[p]\n        for p in range(n):\n            new_dp_prev[p] = dp_cur[p]\n        dp_prev = new_dp_prev\n\n    # final dp_cur is in dp_prev as dp for j=k: dp_prev[p] = dp for prefix length p into k segments\n    total = dp_prev[n-1]  # prefix length n into k segments is at index n\n    # But dp_prev index p corresponds to prefix length p, we set dp_prev[p]=dp_cur[p]; dp_cur[n] is needed.\n    # We lost dp_cur[n] because dp_prev length n only holds p=0..n-1.\n    # Need to store final dp_cur separately in last iteration. Let's recompute properly by storing dp_cur each iter.\n\ndef main_fixed():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    dp_prev = [ -INF ] * (n+1)  # dp_prev[r] for r=0..n\n    dp_prev[0] = 0\n\n    prev = [ [0]*(k+1) for _ in range(n+1) ]\n    for j in range(1, k+1):\n        # segtree over p = 0..n-1 using values dp_prev[p]\n        base = dp_prev[:n]  # p=0..n-1\n        st = SegTree(base)\n        stack = []\n        dp_cur = [ -INF ] * (n+1)\n        dp_cur[0] = -INF\n        for r in range(1, n+1):\n            vr = a[r-1]\n            prev_start = r-1\n            while stack and stack[-1][0] <= vr:\n                val, s = stack.pop()\n                st.range_add(s, prev_start, vr - val)\n                prev_start = s - 1\n            left = prev_start + 1\n            stack.append((vr, left))\n            best_val, best_idx = st.range_query(0, r-1)\n            dp_cur[r] = best_val\n            prev[r][j] = best_idx\n        dp_prev = dp_cur\n\n    total = dp_prev[n]\n    # reconstruct\n    parts = [0]*k\n    cur = n\n    for j in range(k, 0, -1):\n        p = prev[cur][j]\n        parts[j-1] = cur - p\n        cur = p\n    # output\n    out = []\n    out.append(str(total))\n    out.append(\" \".join(str(x) for x in parts))\n    sys.stdout.write(\"\\n\".join(out))\n\nif __name__ == \"__main__\":\n    main_fixed()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nsys.setrecursionlimit(1000000)\n\nINF = 10**18\n\nclass SegTree:\n    def __init__(self, arr):\n        n = len(arr)\n        self.n = n\n        size = 1\n        while size < n: size <<= 1\n        self.size = size\n        self.maxv = [ -INF ] * (2*size)\n        self.idx = [ -1 ] * (2*size)\n        self.lazy = [0] * (2*size)\n        for i in range(n):\n            self.maxv[size + i] = arr[i]\n            self.idx[size + i] = i\n        for i in range(size-1, 0, -1):\n            left = 2*i\n            right = left+1\n            if self.maxv[left] >= self.maxv[right]:\n                self.maxv[i] = self.maxv[left]\n                self.idx[i] = self.idx[left]\n            else:\n                self.maxv[i] = self.maxv[right]\n                self.idx[i] = self.idx[right]\n\n    def _apply(self, i, v):\n        self.maxv[i] += v\n        self.lazy[i] += v\n\n    def _push(self, i):\n        if self.lazy[i] != 0:\n            self._apply(2*i, self.lazy[i])\n            self._apply(2*i+1, self.lazy[i])\n            self.lazy[i] = 0\n\n    def _pull(self, i):\n        left = 2*i\n        right = left+1\n        if self.maxv[left] >= self.maxv[right]:\n            self.maxv[i] = self.maxv[left]\n            self.idx[i] = self.idx[left]\n        else:\n            self.maxv[i] = self.maxv[right]\n            self.idx[i] = self.idx[right]\n\n    def range_add(self, l, r, v):\n        if l > r: return\n        self._range_add(1, 0, self.size-1, l, r, v)\n\n    def _range_add(self, i, tl, tr, l, r, v):\n        if l > r:\n            return\n        if l <= tl and tr <= r:\n            self._apply(i, v)\n            return\n        self._push(i)\n        tm = (tl + tr) >> 1\n        if l <= tm:\n            self._range_add(2*i, tl, tm, l, min(r, tm), v)\n        if r > tm:\n            self._range_add(2*i+1, tm+1, tr, max(l, tm+1), r, v)\n        self._pull(i)\n\n    def range_query(self, l, r):\n        if l > r:\n            return -INF, -1\n        return self._range_query(1, 0, self.size-1, l, r)\n\n    def _range_query(self, i, tl, tr, l, r):\n        if l <= tl and tr <= r:\n            return self.maxv[i], self.idx[i]\n        self._push(i)\n        tm = (tl + tr) >> 1\n        resv = -INF\n        resi = -1\n        if l <= tm:\n            v, idx = self._range_query(2*i, tl, tm, l, min(r, tm))\n            if v > resv:\n                resv, resi = v, idx\n        if r > tm:\n            v, idx = self._range_query(2*i+1, tm+1, tr, max(l, tm+1), r)\n            if v > resv:\n                resv, resi = v, idx\n        return resv, resi\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    # dp_prev[p] for p=0..n-1 corresponds to prefix length p\n    # initial dp for 0 segments: dp_prev[0]=0 else -inf\n    dp_prev = [ -INF ] * n\n    dp_prev[0] = 0  # position p=0 means prefix length 0\n    # Note: positions p>0 represent dp_prev[p] = -inf initially\n\n    # prev pointers: prev_pos[r][j] = p\n    prev = [ [0]*(k+1) for _ in range(n+1) ]  # 1..n, j=1..k\n\n    for j in range(1, k+1):\n        st = SegTree(dp_prev)\n        stack = []  # elements (val, start)\n        dp_cur = [ -INF ] * (n+1)  # dp_cur[r] for r=0..n\n        # dp_cur[0] stays -inf (can't partition zero elements into j>=1 segments)\n        for r in range(1, n+1):\n            vr = a[r-1]\n            prev_start = r-1\n            while stack and stack[-1][0] <= vr:\n                val, s = stack.pop()\n                st.range_add(s, prev_start, vr - val)\n                prev_start = s - 1\n            left = prev_start + 1\n            stack.append((vr, left))\n            # query best p in [0..r-1]\n            best_val, best_idx = st.range_query(0, r-1)\n            dp_cur[r] = best_val\n            prev[r][j] = best_idx  # best_idx is p\n        # prepare dp_prev for next iteration: dp_prev[p] corresponds to prefix length p\n        dp_prev = [ -INF ] * n\n        for p in range(n):\n            dp_prev[p] = dp_cur[p+1]  # shift: dp_prev[p] = dp for r = p+1 for next j? Wait logic:\n            # Actually dp_prev positions represent dp for prefix length p: we need dp_prev[p] = dp_cur[p]\n            # But in segtree we used dp_prev indices 0..n-1 mapping to prefix length p.\n            # After finishing j, dp_prev for next j should be dp_cur[r] at index r (prefix length r).\n        # Correction: above assignment is wrong. We need dp_prev[p] = dp_cur[p] for p=0..n-1 where dp_cur[0] invalid.\n        # Let's fix by recomputing properly.\n\n        # Correct update:\n        new_dp_prev = [ -INF ] * n\n        # dp_cur[r] corresponds to dp for first r elements into j segments.\n        # For next iteration, dp_prev[p] should equal dp_cur[p] (prefix length p).\n        # For p from 0..n-1, dp_prev[p] = dp_cur[p]\n        for p in range(n):\n            new_dp_prev[p] = dp_cur[p]\n        dp_prev = new_dp_prev\n\n    # final dp_cur is in dp_prev as dp for j=k: dp_prev[p] = dp for prefix length p into k segments\n    total = dp_prev[n-1]  # prefix length n into k segments is at index n\n    # But dp_prev index p corresponds to prefix length p, we set dp_prev[p]=dp_cur[p]; dp_cur[n] is needed.\n    # We lost dp_cur[n] because dp_prev length n only holds p=0..n-1.\n    # Need to store final dp_cur separately in last iteration. Let's recompute properly by storing dp_cur each iter.\n\ndef main_fixed():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    dp_prev = [ -INF ] * (n+1)  # dp_prev[r] for r=0..n\n    dp_prev[0] = 0\n\n    prev = [ [0]*(k+1) for _ in range(n+1) ]\n    for j in range(1, k+1):\n        # segtree over p = 0..n-1 using values dp_prev[p]\n        base = dp_prev[:n]  # p=0..n-1\n        st = SegTree(base)\n        stack = []\n        dp_cur = [ -INF ] * (n+1)\n        dp_cur[0] = -INF\n        for r in range(1, n+1):\n            vr = a[r-1]\n            prev_start = r-1\n            while stack and stack[-1][0] <= vr:\n                val, s = stack.pop()\n                st.range_add(s, prev_start, vr - val)\n                prev_start = s - 1\n            left = prev_start + 1\n            stack.append((vr, left))\n            best_val, best_idx = st.range_query(0, r-1)\n            dp_cur[r] = best_val\n            prev[r][j] = best_idx\n        dp_prev = dp_cur\n\n    total = dp_prev[n]\n    # reconstruct\n    parts = [0]*k\n    cur = n\n    for j in range(k, 0, -1):\n        p = prev[cur][j]\n        parts[j-1] = cur - p\n        cur = p\n    # output\n    out = []\n    out.append(str(total))\n    out.append(\" \".join(str(x) for x in parts))\n    sys.stdout.write(\"\\n\".join(out))\n\nif __name__ == \"__main__\":\n    main_fixed()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 938,
        "completion_token_count": 4571,
        "thoughts_token_count": 2496
    }
}