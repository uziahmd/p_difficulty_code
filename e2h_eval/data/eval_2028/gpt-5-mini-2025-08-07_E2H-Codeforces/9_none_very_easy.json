{
    "start": 1758094595.2582247,
    "end": 1758094603.803238,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums\ndef prefs(arr):\n    pref = [0]\n    for x in arr:\n        pref.append(pref[-1] + x)\n    return pref\n\np1 = prefs(w1)\np2 = prefs(w2)\np3 = prefs(w3)\n\nbest = 0\nmax_k3 = min(len(w3), m // 3)\nfor k3 in range(max_k3 + 1):\n    weight3 = 3 * k3\n    rem = m - weight3\n    # pick best combination of w1 and w2 within rem\n    # try using t twos from 0..min(len(w2), rem//2)\n    max_t2 = min(len(w2), rem // 2)\n    # iterate t2 and compute cost = p3[k3] + p2[t2] + p1[min(len(w1), rem-2*t2)]\n    # To be efficient, we can iterate t2 and compute p1 index.\n    cur_best = 0\n    for t2 in range(max_t2 + 1):\n        used_w1 = rem - 2 * t2\n        if used_w1 < 0:\n            continue\n        take1 = used_w1 if used_w1 <= len(w1) else len(w1)\n        val = p3[k3] + p2[t2] + p1[take1]\n        if val > cur_best:\n            cur_best = val\n    if cur_best > best:\n        best = cur_best\n\n# Also consider case without any w3 (already covered by k3=0)\nprint(best)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums\ndef prefs(arr):\n    pref = [0]\n    for x in arr:\n        pref.append(pref[-1] + x)\n    return pref\n\np1 = prefs(w1)\np2 = prefs(w2)\np3 = prefs(w3)\n\nbest = 0\nmax_k3 = min(len(w3), m // 3)\nfor k3 in range(max_k3 + 1):\n    weight3 = 3 * k3\n    rem = m - weight3\n    # pick best combination of w1 and w2 within rem\n    # try using t twos from 0..min(len(w2), rem//2)\n    max_t2 = min(len(w2), rem // 2)\n    # iterate t2 and compute cost = p3[k3] + p2[t2] + p1[min(len(w1), rem-2*t2)]\n    # To be efficient, we can iterate t2 and compute p1 index.\n    cur_best = 0\n    for t2 in range(max_t2 + 1):\n        used_w1 = rem - 2 * t2\n        if used_w1 < 0:\n            continue\n        take1 = used_w1 if used_w1 <= len(w1) else len(w1)\n        val = p3[k3] + p2[t2] + p1[take1]\n        if val > cur_best:\n            cur_best = val\n    if cur_best > best:\n        best = cur_best\n\n# Also consider case without any w3 (already covered by k3=0)\nprint(best)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 467,
        "thoughts_token_count": 0
    }
}