{
    "start": 1758094593.0626714,
    "end": 1758094613.8547192,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\n\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums\npref1 = [0]\nfor v in w1:\n    pref1.append(pref1[-1] + v)\npref2 = [0]\nfor v in w2:\n    pref2.append(pref2[-1] + v)\npref3 = [0]\nfor v in w3:\n    pref3.append(pref3[-1] + v)\n\n# best cost using only weight 1 and 2 for any capacity up to m\nbest12 = [0] * (m + 1)\n# Use pairing strategy: prepare list of values for taking weight 2 as either single w2 or two w1s\n# We'll greedily fill capacities by considering items: pairs of two w1s as weight2 option\n# For dynamic, compute for k weight capacity from 0..m:\n# precompute array val2 where val2[i] = value of i-th weight-2 item: either w2[i] or sum of two w1s\n# But easier: compute for using t twounits (each unit weight=2) best total value\n# Build array val_pairs where each element is one candidate weight-2 item value\npairs = []\n# weight-2 items from w2\nfor v in w2:\n    pairs.append(v)\n# create pairs from w1: take two at a time\ni = 0\nwhile i + 1 < len(w1):\n    pairs.append(w1[i] + w1[i+1])\n    i += 2\npairs.sort(reverse=True)\n# prefix for pairs\npref_pairs = [0]\nfor v in pairs:\n    pref_pairs.append(pref_pairs[-1] + v)\n\n# Now best12 for each capacity\nfor cap in range(0, m + 1):\n    # take as many pairs (weight 2 each) as possible: t = cap // 2\n    t = cap // 2\n    val = 0\n    if t <= len(pairs):\n        val = pref_pairs[t]\n    else:\n        val = pref_pairs[-1]\n    if cap % 2 == 1:\n        # can add one extra weight-1 item (the next unused w1 if exists)\n        # Need to know how many w1 used inside pairs: from pairs we used some that are from pairs of w1s.\n        # Simpler approach: try all possible number of weight-2 items taken from original w2 list (k2),\n        # and weight-1 items (k1) such that 2*k2 + k1 <= cap. But cap up to 3e5, w2 count up to n; but we can optimize by iterating k2 up to min(len(w2), cap//2) and using prefix sums. However nested for cap makes heavy.\n        # Instead we will compute best12 separately by iterating number of w2 taken.\n        pass\n\n# Better approach: compute best12 by iterating number of weight-2 items taken from w2 explicitly and supplementing with w1s.\nbest12 = [0] * (m + 1)\n# Start with 0 w2 taken, use only w1s\nfor k1 in range(0, min(len(w1), m) + 1):\n    wt = k1\n    val = pref1[k1]\n    if best12[wt] < val:\n        best12[wt] = val\n# consider taking k2 items from w2\nfor k2 in range(1, len(w2) + 1):\n    wt2 = 2 * k2\n    if wt2 > m:\n        break\n    val2 = pref2[k2]\n    # with extra w1s\n    max_add = min(len(w1), m - wt2)\n    for k1 in range(0, max_add + 1):\n        wt = wt2 + k1\n        val = val2 + pref1[k1]\n        if best12[wt] < val:\n            best12[wt] = val\n# Also consider using only pairs of two w1s counted as weight2 (when not using any w2). Already covered by k2=0 and k1 even etc.\n# Make best12 non-decreasing by capacity\nfor i in range(1, m + 1):\n    if best12[i] < best12[i-1]:\n        best12[i] = best12[i-1]\n\n# Now try combinations including w3 items\nans = 0\nmax_k3 = min(len(w3), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    wt3 = 3 * k3\n    val3 = pref3[k3]\n    rem = m - wt3\n    val12 = best12[rem]\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = int(next(it)); c = int(next(it))\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\n\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums\npref1 = [0]\nfor v in w1:\n    pref1.append(pref1[-1] + v)\npref2 = [0]\nfor v in w2:\n    pref2.append(pref2[-1] + v)\npref3 = [0]\nfor v in w3:\n    pref3.append(pref3[-1] + v)\n\n# best cost using only weight 1 and 2 for any capacity up to m\nbest12 = [0] * (m + 1)\n# Use pairing strategy: prepare list of values for taking weight 2 as either single w2 or two w1s\n# We'll greedily fill capacities by considering items: pairs of two w1s as weight2 option\n# For dynamic, compute for k weight capacity from 0..m:\n# precompute array val2 where val2[i] = value of i-th weight-2 item: either w2[i] or sum of two w1s\n# But easier: compute for using t twounits (each unit weight=2) best total value\n# Build array val_pairs where each element is one candidate weight-2 item value\npairs = []\n# weight-2 items from w2\nfor v in w2:\n    pairs.append(v)\n# create pairs from w1: take two at a time\ni = 0\nwhile i + 1 < len(w1):\n    pairs.append(w1[i] + w1[i+1])\n    i += 2\npairs.sort(reverse=True)\n# prefix for pairs\npref_pairs = [0]\nfor v in pairs:\n    pref_pairs.append(pref_pairs[-1] + v)\n\n# Now best12 for each capacity\nfor cap in range(0, m + 1):\n    # take as many pairs (weight 2 each) as possible: t = cap // 2\n    t = cap // 2\n    val = 0\n    if t <= len(pairs):\n        val = pref_pairs[t]\n    else:\n        val = pref_pairs[-1]\n    if cap % 2 == 1:\n        # can add one extra weight-1 item (the next unused w1 if exists)\n        # Need to know how many w1 used inside pairs: from pairs we used some that are from pairs of w1s.\n        # Simpler approach: try all possible number of weight-2 items taken from original w2 list (k2),\n        # and weight-1 items (k1) such that 2*k2 + k1 <= cap. But cap up to 3e5, w2 count up to n; but we can optimize by iterating k2 up to min(len(w2), cap//2) and using prefix sums. However nested for cap makes heavy.\n        # Instead we will compute best12 separately by iterating number of w2 taken.\n        pass\n\n# Better approach: compute best12 by iterating number of weight-2 items taken from w2 explicitly and supplementing with w1s.\nbest12 = [0] * (m + 1)\n# Start with 0 w2 taken, use only w1s\nfor k1 in range(0, min(len(w1), m) + 1):\n    wt = k1\n    val = pref1[k1]\n    if best12[wt] < val:\n        best12[wt] = val\n# consider taking k2 items from w2\nfor k2 in range(1, len(w2) + 1):\n    wt2 = 2 * k2\n    if wt2 > m:\n        break\n    val2 = pref2[k2]\n    # with extra w1s\n    max_add = min(len(w1), m - wt2)\n    for k1 in range(0, max_add + 1):\n        wt = wt2 + k1\n        val = val2 + pref1[k1]\n        if best12[wt] < val:\n            best12[wt] = val\n# Also consider using only pairs of two w1s counted as weight2 (when not using any w2). Already covered by k2=0 and k1 even etc.\n# Make best12 non-decreasing by capacity\nfor i in range(1, m + 1):\n    if best12[i] < best12[i-1]:\n        best12[i] = best12[i-1]\n\n# Now try combinations including w3 items\nans = 0\nmax_k3 = min(len(w3), m // 3)\nfor k3 in range(0, max_k3 + 1):\n    wt3 = 3 * k3\n    val3 = pref3[k3]\n    rem = m - wt3\n    val12 = best12[rem]\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\nprint(ans)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 430,
        "completion_token_count": 1155,
        "thoughts_token_count": 0
    }
}