{
    "start": 1758094551.3125143,
    "end": 1758094564.9517074,
    "start-formatted": "2025-09-17 16:35 KST",
    "end-formatted": "2025-09-17 16:36 KST",
    "gpu": 2,
    "pid": 6,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Hacker, pack your bags!\n\nIt's well known that the best way to distract from something is to do one's favourite thing. Job is such a thing for Leha.So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i-th voucher is characterized by three integers li, ri, costi — day of departure from Vičkopolis, day of arriving back in Vičkopolis and cost of the voucher correspondingly. The duration of the i-th voucher is a value ri - li + 1.At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j (i ≠ j) so that they don't intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don't intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li.Help Leha to choose the necessary vouchers!\n\n## Input\nThe first line contains two integers n and x (2 ≤ n, x ≤ 2·105) — the number of vouchers in the travel agency and the duration of Leha's vacation correspondingly.Each of the next n lines contains three integers li, ri and costi (1 ≤ li ≤ ri ≤ 2·105, 1 ≤ costi ≤ 109) — description of the voucher.\n\n## Output\nPrint a single integer — a minimal amount of money that Leha will spend, or print  - 1 if it's impossible to choose two disjoint vouchers with the total duration exactly x.\n\n## Example\n### Input\n['4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4', '3 2\\n4 6 3\\n2 4 1\\n3 5 4']\n\n### Output\n['5', '-1']\n\n## Note\nIn the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to (3 - 1 + 1) + (6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5.In the second sample the duration of each voucher is 3 therefore it's impossible to choose two vouchers with the total duration equal to 2.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); x = int(next(it))\nvouchers = []\nmaxR = 0\nfor _ in range(n):\n    l = int(next(it)); r = int(next(it)); c = int(next(it))\n    d = r - l + 1\n    vouchers.append((l, r, d, c))\n    if r > maxR: maxR = r\n\nINF = 10**30\n\n# For each duration d, we will compute minimal cost of an interval with that duration ending at or before each day (prefix best by right endpoint),\n# and minimal cost of an interval with that duration starting at or after each day (suffix best by left endpoint).\n# But durations up to 2e5. We'll map by duration only those that appear.\nfrom collections import defaultdict\n\nby_d = defaultdict(list)\nfor l, r, d, c in vouchers:\n    by_d[d].append((l, r, c))\n\n# Prepare arrays of size maxR+3 (1-based days up to maxR). Use 1..maxR\nsize = maxR + 5\n\n# For each duration, build pref_min_by_right[r] = minimal cost among intervals of that duration with right endpoint == r,\n# then prefix min over r. Similarly suff_min_by_left[l].\npref_min_per_d = dict()\nsuff_min_per_d = dict()\n\nfor d, lst in by_d.items():\n    pref = [INF] * (size)\n    suff = [INF] * (size)\n    # fill exact positions\n    for l, r, c in lst:\n        if c < pref[r]:\n            pref[r] = c\n        if c < suff[l]:\n            suff[l] = c\n    # prefix min over right endpoints\n    for i in range(1, size):\n        if pref[i-1] < pref[i]:\n            pref[i] = pref[i-1]\n    # suffix min over left endpoints\n    for i in range(size-2, -1, -1):\n        if suff[i+1] < suff[i]:\n            suff[i] = suff[i+1]\n    pref_min_per_d[d] = pref\n    suff_min_per_d[d] = suff\n\nans = INF\n\n# For each voucher as first interval, try to pair with duration x - d\nfor l, r, d, c in vouchers:\n    need = x - d\n    if need <= 0:\n        continue\n    if need not in pref_min_per_d:\n        continue\n    # pair with interval ending before l: need pref_min_per_d[need][l-1]\n    pref = pref_min_per_d[need]\n    if l-1 >= 0:\n        best1 = pref[l-1]\n        if best1 < INF:\n            total = c + best1\n            if total < ans:\n                ans = total\n    # pair with interval starting after r: need suff_min_per_d[need][r+1]\n    suff = suff_min_per_d[need]\n    if r+1 < len(suff):\n        best2 = suff[r+1]\n        if best2 < INF:\n            total = c + best2\n            if total < ans:\n                ans = total\n\nif ans >= INF:\n    print(-1)\nelse:\n    print(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); x = int(next(it))\nvouchers = []\nmaxR = 0\nfor _ in range(n):\n    l = int(next(it)); r = int(next(it)); c = int(next(it))\n    d = r - l + 1\n    vouchers.append((l, r, d, c))\n    if r > maxR: maxR = r\n\nINF = 10**30\n\n# For each duration d, we will compute minimal cost of an interval with that duration ending at or before each day (prefix best by right endpoint),\n# and minimal cost of an interval with that duration starting at or after each day (suffix best by left endpoint).\n# But durations up to 2e5. We'll map by duration only those that appear.\nfrom collections import defaultdict\n\nby_d = defaultdict(list)\nfor l, r, d, c in vouchers:\n    by_d[d].append((l, r, c))\n\n# Prepare arrays of size maxR+3 (1-based days up to maxR). Use 1..maxR\nsize = maxR + 5\n\n# For each duration, build pref_min_by_right[r] = minimal cost among intervals of that duration with right endpoint == r,\n# then prefix min over r. Similarly suff_min_by_left[l].\npref_min_per_d = dict()\nsuff_min_per_d = dict()\n\nfor d, lst in by_d.items():\n    pref = [INF] * (size)\n    suff = [INF] * (size)\n    # fill exact positions\n    for l, r, c in lst:\n        if c < pref[r]:\n            pref[r] = c\n        if c < suff[l]:\n            suff[l] = c\n    # prefix min over right endpoints\n    for i in range(1, size):\n        if pref[i-1] < pref[i]:\n            pref[i] = pref[i-1]\n    # suffix min over left endpoints\n    for i in range(size-2, -1, -1):\n        if suff[i+1] < suff[i]:\n            suff[i] = suff[i+1]\n    pref_min_per_d[d] = pref\n    suff_min_per_d[d] = suff\n\nans = INF\n\n# For each voucher as first interval, try to pair with duration x - d\nfor l, r, d, c in vouchers:\n    need = x - d\n    if need <= 0:\n        continue\n    if need not in pref_min_per_d:\n        continue\n    # pair with interval ending before l: need pref_min_per_d[need][l-1]\n    pref = pref_min_per_d[need]\n    if l-1 >= 0:\n        best1 = pref[l-1]\n        if best1 < INF:\n            total = c + best1\n            if total < ans:\n                ans = total\n    # pair with interval starting after r: need suff_min_per_d[need][r+1]\n    suff = suff_min_per_d[need]\n    if r+1 < len(suff):\n        best2 = suff[r+1]\n        if best2 < INF:\n            total = c + best2\n            if total < ans:\n                ans = total\n\nif ans >= INF:\n    print(-1)\nelse:\n    print(ans)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 681,
        "completion_token_count": 722,
        "thoughts_token_count": 0
    }
}