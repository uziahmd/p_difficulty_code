{
    "start": 1758290680.0826848,
    "end": 1758290725.2476437,
    "start-formatted": "2025-09-19 23:04 KST",
    "end-formatted": "2025-09-19 23:05 KST",
    "gpu": 2,
    "pid": 35,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Find Maximum\n\nValera has array a, consisting of n integers a0, a1, ..., an - 1, and function f(x), taking an integer from 0 to 2n - 1 as its single argument. Value f(x) is calculated by formula , where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.For example, if n = 4 and x = 11 (11 = 20 + 21 + 23), then f(x) = a0 + a1 + a3.Help Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 ≤ x ≤ m.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of array elements. The next line contains n space-separated integers a0, a1, ..., an - 1 (0 ≤ ai ≤ 104) — elements of array a.The third line contains a sequence of digits zero and one without spaces s0s1... sn - 1 — the binary representation of number m. Number m equals .\n\n## Output\nPrint a single integer — the maximum value of function f(x) for all .\n\n## Example\n### Input\n['2\\n3 8\\n10', '5\\n17 0 10 2 1\\n11010']\n\n### Output\n['3', '27']\n\n## Note\nIn the first test case m = 20 = 1, f(0) = 0, f(1) = a0 = 3.In the second sample m = 20 + 21 + 23 = 11, the maximum value of function equals f(5) = a0 + a2 = 17 + 10 = 27.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Evaluating algorithm and input format**\n\nI'm considering the problem of how to optimize by using patterns known to work well, particularly with numbers based on their binary representation. It’s clear that when lower bits are turned off, it reduces the sum, so my algorithm seems sound. I need to compute prefix sums to quickly find cumulative values. I also need to clarify the input format, especially since the example shows multiple tests combined, while it's typically one test per run. I’ll need to adjust for that in my implementation.",
    "response": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nn = int(data[0])\na = list(map(int, data[1:1+n]))\ns = data[1+n].strip()\npref = [0] * (n + 1)\nfor i in range(n):\n    pref[i+1] = pref[i] + a[i]\nans = 0\nsum_high = 0\nfor i in range(n-1, -1, -1):\n    if s[i] == '1':\n        ans = max(ans, sum_high + pref[i])\n        sum_high += a[i]\nans = max(ans, sum_high)\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nn = int(data[0])\na = list(map(int, data[1:1+n]))\ns = data[1+n].strip()\npref = [0] * (n + 1)\nfor i in range(n):\n    pref[i+1] = pref[i] + a[i]\nans = 0\nsum_high = 0\nfor i in range(n-1, -1, -1):\n    if s[i] == '1':\n        ans = max(ans, sum_high + pref[i])\n        sum_high += a[i]\nans = max(ans, sum_high)\nprint(ans)",
    "score": 1,
    "metadata": {
        "prompt_token_count": 523,
        "completion_token_count": 1882,
        "thoughts_token_count": 1728
    }
}