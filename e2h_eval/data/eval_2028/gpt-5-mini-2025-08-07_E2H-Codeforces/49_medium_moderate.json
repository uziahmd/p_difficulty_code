{
    "start": 1758290737.4994378,
    "end": 1758290859.816715,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Considering system of equations**\n\nI'm thinking about a better approach to solve the problem by building a system of equalities for exponents. When I have two nodes, u and v, connected by an edge, e_u could either be great or less — and it's not linear. \n\nAnother idea is using brute force to choose a starting node's integer value by constructing a spanning tree by multiplying ratios. I realize for the tree, I can assign the root an arbitrary value that meets all neighbor constraints. I'll explore how to compute this so that everything works out neatly.",
    "response": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve_primes(n):\n    sieve = [True] * (n+1)\n    primes = []\n    for i in range(2, n+1):\n        if sieve[i]:\n            primes.append(i)\n            step = i\n            for j in range(i*i, n+1, step):\n                sieve[j] = False\n    return primes\n\n_PRIMES = sieve_primes(10**6)\n\ndef factorize(x):\n    res = {}\n    for p in _PRIMES:\n        if p*p > x:\n            break\n        if x % p == 0:\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        if x == 1:\n            break\n    if x > 1:\n        res[x] = res.get(x, 0) + 1\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # basic check\n    for (_,_,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # build prime -> list of (u,v,gp,lp)\n    prime_edges = defaultdict(list)\n    # also store for verification final\n    for idx,(u,v,g,l) in enumerate(edges):\n        fg = factorize(g)\n        fl = factorize(l)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            gp = fg.get(p, 0)\n            lp = fl.get(p, 0)\n            if lp < gp:\n                print(\"NO\")\n                return\n            prime_edges[p].append((u,v,gp,lp))\n    # store exponents per prime per node\n    exponents = defaultdict(lambda: defaultdict(int))  # exponents[p][v] = exp\n    # Process each prime\n    for p, pelist in prime_edges.items():\n        # nodes involved\n        nodes = set()\n        for (u,v,gp,lp) in pelist:\n            nodes.add(u); nodes.add(v)\n        nodes = list(nodes)\n        node_index = {v:i for i,v in enumerate(nodes)}\n        N = len(nodes)\n        # domains\n        D = [set() for _ in range(N)]\n        # adjacency and allowed pairs per edge\n        adj = [[] for _ in range(N)]\n        edge_allowed = {}\n        for (u,v,gp,lp) in pelist:\n            iu = node_index[u]; iv = node_index[v]\n            if gp == lp:\n                pairs = {(gp,gp)}\n            else:\n                pairs = {(gp,lp),(lp,gp)}\n            adj[iu].append(iv)\n            adj[iv].append(iu)\n            edge_allowed[(iu,iv)] = pairs\n            edge_allowed[(iv,iu)] = set((b,a) for (a,b) in pairs)\n            # initial domain union of gp and lp\n            D[iu].add(gp); D[iu].add(lp)\n            D[iv].add(gp); D[iv].add(lp)\n        # AC-3\n        q = deque()\n        for (u,v,_,_) in pelist:\n            iu = node_index[u]; iv = node_index[v]\n            q.append((iu,iv))\n            q.append((iv,iu))\n        def revise(iu, iv):\n            removed = False\n            allowed = edge_allowed.get((iu,iv), set())\n            if not allowed:\n                return False\n            toremove = []\n            for a in D[iu]:\n                ok = False\n                for b in D[iv]:\n                    if (a,b) in allowed:\n                        ok = True; break\n                if not ok:\n                    toremove.append(a)\n            if toremove:\n                for a in toremove:\n                    D[iu].remove(a)\n                removed = True\n            return removed\n        while q:\n            iu, iv = q.popleft()\n            if revise(iu, iv):\n                if not D[iu]:\n                    print(\"NO\"); return\n                for k in adj[iu]:\n                    if k != iv:\n                        q.append((k, iu))\n        # Now backtrack per connected component to assign values\n        comp_vis = [False]*N\n        assign = [None]*N\n        for i in range(N):\n            if comp_vis[i]:\n                continue\n            # gather component nodes\n            stack = [i]; comp = []\n            comp_vis[i] = True\n            while stack:\n                x = stack.pop()\n                comp.append(x)\n                for y in adj[x]:\n                    if not comp_vis[y]:\n                        comp_vis[y]=True\n                        stack.append(y)\n            # backtracking\n            comp_sorted = sorted(comp, key=lambda x: len(D[x]))\n            L = len(comp_sorted)\n            success = False\n            def dfs(pos):\n                nonlocal success\n                if success:\n                    return\n                if pos==L:\n                    success = True\n                    return\n                v = comp_sorted[pos]\n                for val in list(D[v]):\n                    ok = True\n                    # check neighbors already assigned\n                    for nb in adj[v]:\n                        if assign[nb] is not None:\n                            if (val, assign[nb]) not in edge_allowed.get((v,nb), set()):\n                                ok = False; break\n                    if not ok:\n                        continue\n                    assign[v]=val\n                    dfs(pos+1)\n                    if success:\n                        return\n                    assign[v]=None\n            dfs(0)\n            if not success:\n                print(\"NO\"); return\n        # write assigned exponents\n        for idx,node in enumerate(nodes):\n            exp = assign[idx]\n            if exp is None:\n                # node isolated? shouldn't happen\n                exp = next(iter(D[idx]))\n            exponents[p][node] = exp\n    # build final a_v\n    a = [1]*n\n    for p, mp in exponents.items():\n        for v, e in mp.items():\n            if e>0:\n                a[v] *= pow(p, e)\n    # verify edges match gcd and lcm\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(a[u], a[v])\n        luv = a[u]//guv*a[v]\n        if guv != g or luv != l:\n            print(\"NO\")\n            return\n    # For nodes with no primes at all, a[v] stays 1\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve_primes(n):\n    sieve = [True] * (n+1)\n    primes = []\n    for i in range(2, n+1):\n        if sieve[i]:\n            primes.append(i)\n            step = i\n            for j in range(i*i, n+1, step):\n                sieve[j] = False\n    return primes\n\n_PRIMES = sieve_primes(10**6)\n\ndef factorize(x):\n    res = {}\n    for p in _PRIMES:\n        if p*p > x:\n            break\n        if x % p == 0:\n            cnt = 0\n            while x % p == 0:\n                x //= p\n                cnt += 1\n            res[p] = cnt\n        if x == 1:\n            break\n    if x > 1:\n        res[x] = res.get(x, 0) + 1\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        g = int(next(it))\n        l = int(next(it))\n        edges.append((u,v,g,l))\n    # basic check\n    for (_,_,g,l) in edges:\n        if l % g != 0:\n            print(\"NO\")\n            return\n    # build prime -> list of (u,v,gp,lp)\n    prime_edges = defaultdict(list)\n    # also store for verification final\n    for idx,(u,v,g,l) in enumerate(edges):\n        fg = factorize(g)\n        fl = factorize(l)\n        primes = set(fg.keys()) | set(fl.keys())\n        for p in primes:\n            gp = fg.get(p, 0)\n            lp = fl.get(p, 0)\n            if lp < gp:\n                print(\"NO\")\n                return\n            prime_edges[p].append((u,v,gp,lp))\n    # store exponents per prime per node\n    exponents = defaultdict(lambda: defaultdict(int))  # exponents[p][v] = exp\n    # Process each prime\n    for p, pelist in prime_edges.items():\n        # nodes involved\n        nodes = set()\n        for (u,v,gp,lp) in pelist:\n            nodes.add(u); nodes.add(v)\n        nodes = list(nodes)\n        node_index = {v:i for i,v in enumerate(nodes)}\n        N = len(nodes)\n        # domains\n        D = [set() for _ in range(N)]\n        # adjacency and allowed pairs per edge\n        adj = [[] for _ in range(N)]\n        edge_allowed = {}\n        for (u,v,gp,lp) in pelist:\n            iu = node_index[u]; iv = node_index[v]\n            if gp == lp:\n                pairs = {(gp,gp)}\n            else:\n                pairs = {(gp,lp),(lp,gp)}\n            adj[iu].append(iv)\n            adj[iv].append(iu)\n            edge_allowed[(iu,iv)] = pairs\n            edge_allowed[(iv,iu)] = set((b,a) for (a,b) in pairs)\n            # initial domain union of gp and lp\n            D[iu].add(gp); D[iu].add(lp)\n            D[iv].add(gp); D[iv].add(lp)\n        # AC-3\n        q = deque()\n        for (u,v,_,_) in pelist:\n            iu = node_index[u]; iv = node_index[v]\n            q.append((iu,iv))\n            q.append((iv,iu))\n        def revise(iu, iv):\n            removed = False\n            allowed = edge_allowed.get((iu,iv), set())\n            if not allowed:\n                return False\n            toremove = []\n            for a in D[iu]:\n                ok = False\n                for b in D[iv]:\n                    if (a,b) in allowed:\n                        ok = True; break\n                if not ok:\n                    toremove.append(a)\n            if toremove:\n                for a in toremove:\n                    D[iu].remove(a)\n                removed = True\n            return removed\n        while q:\n            iu, iv = q.popleft()\n            if revise(iu, iv):\n                if not D[iu]:\n                    print(\"NO\"); return\n                for k in adj[iu]:\n                    if k != iv:\n                        q.append((k, iu))\n        # Now backtrack per connected component to assign values\n        comp_vis = [False]*N\n        assign = [None]*N\n        for i in range(N):\n            if comp_vis[i]:\n                continue\n            # gather component nodes\n            stack = [i]; comp = []\n            comp_vis[i] = True\n            while stack:\n                x = stack.pop()\n                comp.append(x)\n                for y in adj[x]:\n                    if not comp_vis[y]:\n                        comp_vis[y]=True\n                        stack.append(y)\n            # backtracking\n            comp_sorted = sorted(comp, key=lambda x: len(D[x]))\n            L = len(comp_sorted)\n            success = False\n            def dfs(pos):\n                nonlocal success\n                if success:\n                    return\n                if pos==L:\n                    success = True\n                    return\n                v = comp_sorted[pos]\n                for val in list(D[v]):\n                    ok = True\n                    # check neighbors already assigned\n                    for nb in adj[v]:\n                        if assign[nb] is not None:\n                            if (val, assign[nb]) not in edge_allowed.get((v,nb), set()):\n                                ok = False; break\n                    if not ok:\n                        continue\n                    assign[v]=val\n                    dfs(pos+1)\n                    if success:\n                        return\n                    assign[v]=None\n            dfs(0)\n            if not success:\n                print(\"NO\"); return\n        # write assigned exponents\n        for idx,node in enumerate(nodes):\n            exp = assign[idx]\n            if exp is None:\n                # node isolated? shouldn't happen\n                exp = next(iter(D[idx]))\n            exponents[p][node] = exp\n    # build final a_v\n    a = [1]*n\n    for p, mp in exponents.items():\n        for v, e in mp.items():\n            if e>0:\n                a[v] *= pow(p, e)\n    # verify edges match gcd and lcm\n    import math\n    for (u,v,g,l) in edges:\n        guv = math.gcd(a[u], a[v])\n        luv = a[u]//guv*a[v]\n        if guv != g or luv != l:\n            print(\"NO\")\n            return\n    # For nodes with no primes at all, a[v] stays 1\n    print(\"YES\")\n    print(\" \".join(str(x) for x in a))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 6873,
        "thoughts_token_count": 5376
    }
}