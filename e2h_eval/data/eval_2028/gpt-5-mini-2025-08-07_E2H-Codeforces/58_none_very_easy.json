{
    "start": 1758294609.2415729,
    "end": 1758294634.5655706,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    it = iter(data)\n    out_lines = []\n    while True:\n        try:\n            n = int(next(it))\n        except StopIteration:\n            break\n        m = int(next(it))\n        g = [[] for _ in range(n)]\n        edges = set()\n        for _ in range(m):\n            a = int(next(it)) - 1\n            b = int(next(it)) - 1\n            g[a].append(b)\n            g[b].append(a)\n            edges.add((min(a,b), max(a,b)))\n        # Check if any odd cycle exists -> t=0, count ways = 1\n        color = [-1]*n\n        has_odd = False\n        for s in range(n):\n            if color[s] != -1: continue\n            q = deque([s])\n            color[s]=0\n            while q:\n                u=q.popleft()\n                for v in g[u]:\n                    if color[v]==-1:\n                        color[v]=color[u]^1\n                        q.append(v)\n                    else:\n                        if color[v]==color[u]:\n                            has_odd = True\n                            break\n                if has_odd: break\n            if has_odd: break\n        if has_odd:\n            out_lines.append(\"0 1\")\n            continue\n        # No odd cycle: graph is bipartite. Need to add edges to create an odd cycle.\n        # Minimum t is 1 if there exists pair of vertices in same part not connected and in same component? Actually:\n        # If there exists any pair of vertices in same color within same connected component and not connected by edge -> adding that edge creates odd cycle (odd length  cycle of length >=3).\n        # Otherwise t=2 if possible to connect vertices from different components appropriately, else 3.\n        comp = [-1]*n\n        comps = []\n        for i in range(n):\n            if comp[i]!=-1: continue\n            q=deque([i]); comp[i]=len(comps); lst=[i]\n            while q:\n                u=q.popleft()\n                for v in g[u]:\n                    if comp[v]==-1:\n                        comp[v]=comp[u]\n                        lst.append(v)\n                        q.append(v)\n            comps.append(lst)\n        # Count available same-color non-edges inside components\n        ways1 = 0\n        for idx, nodes in enumerate(comps):\n            cnt0 = sum(1 for v in nodes if color[v]==0)\n            cnt1 = len(nodes)-cnt0\n            # total possible same-color pairs minus existing edges between same color (which should be zero in bipartite)\n            # existing edges are only between colors, so any same-color pair not connected is pair count\n            ways1 += cnt0*(cnt0-1)//2 + cnt1*(cnt1-1)//2\n        if ways1>0:\n            out_lines.append(\"1 \" + str(ways1))\n            continue\n        # No same-color pair inside any component (i.e., every part size <=1 per component)\n        # So in each component, one side size and other side size such that both <=1? Actually implies each component is single edge or single vertex?\n        # Now check t=2: we can add two edges to create an odd cycle by connecting two components: need to find pairs of vertices a,b in comp A and c,d in comp B where colors match to create odd cycle of length odd.\n        # For two-component solution: choose two components, pick u in comp1 and v in comp2 in same color, and pick x in comp1 and y in comp2 in opposite color, adding edges (u,v) and (x,y) forming odd cycle of length (path between u and x in comp1) + (path between v and y in comp2) + 2. Since components are bipartite, minimal t=2 possible unless some components are isolated single vertices? Known CF result: if no same-color pairs inside components, then:\n        # If there exists isolated vertices, t=1 handled. Otherwise t=2 if number of components >=2, otherwise t=3.\n        if len(comps) == 1:\n            # need three edges: connect three vertices to form triangle\n            # number of ways to add 3 edges to form odd cycle: choose any triple of vertices that are pairwise non-adjacent currently and add all three edges -> count such triples\n            # but simpler: when single component bipartite and no same-color pairs -> component sizes must be (1,1) => n<=2\n            # handle general: count triples of vertices with no existing edges among them\n            cnt = 0\n            # brute force triples since n small? n can be up to large. But in this case structure small: if single component and no same-color pairs, then each color side size <=1 so n<=2 -> else impossible.\n            if n <= 2:\n                # need cycle of odd length >1 -> triangle needs 3 vertices, impossible -> need add 3 edges by adding edges with possibly between same vertices? For n=1 or 2, adding 3 edges impossible due to no parallel edges. But CF sample had 3 0 -> output 3 1 for n=3 isolated.\n                pass\n            # Simpler approach: fallback general known CF solution: if no same-color pairs and number of components >=2 -> t=2, ways = sum over unordered pairs of components of (size_comp_i * size_comp_j) - existing edges between chosen colors? Actually number of pairs of vertices in different components with same color times number with opposite color.\n        # Implement standard known solution:\n        # Build counts per component of color0 and color1\n        comp_counts = [(sum(1 for v in nodes if color[v]==0), sum(1 for v in nodes if color[v]==1)) for nodes in comps]\n        if len(comps) >= 2:\n            ways2 = 0\n            C = len(comps)\n            for i in range(C):\n                a0,a1 = comp_counts[i]\n                for j in range(i+1, C):\n                    b0,b1 = comp_counts[j]\n                    # ways to add two edges to create odd cycle: connect a0-b0 and a1-b1 OR a0-b1 and a1-b0 -> both produce odd cycle\n                    ways2 += a0*b0 + a1*b1  # one pairing\n                    ways2 += a0*b1 + a1*b0  # the other pairing\n            out_lines.append(\"2 \" + str(ways2))\n        else:\n            # single component and no same-color pairs -> must add 3 edges. Count number of triples of vertices with no edges among them (i<j<k and none of edges exist)\n            # For n up to maybe 2000? But single component and bipartite with no same-color pairs implies edges only between colors and each color size maybe >=1. We compute total triples minus triples containing any existing edge.\n            nverts = n\n            total_triples = nverts*(nverts-1)*(nverts-2)//6\n            # count triples that include at least one existing edge: for each edge(u,v), number of choices for third vertex w != u,v -> n-2. But triples with two edges counted twice; triples with three edges (triangle) impossible since bipartite.\n            triples_with_edge = m*(nverts-2)\n            # triples with two edges where edges share a vertex: count length-2 paths u-v-w: number of paths of length 2 equals sum over middle vertex deg*(deg-1)/2\n            path2 = 0\n            for v in range(n):\n                d = len(g[v])\n                path2 += d*(d-1)//2\n            # triples counted twice in triples_with_edge are exactly path2\n            triples_without_any_edge = total_triples - triples_with_edge + path2\n            out_lines.append(\"3 \" + str(triples_without_any_edge))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data: \n        return\n    it = iter(data)\n    out_lines = []\n    while True:\n        try:\n            n = int(next(it))\n        except StopIteration:\n            break\n        m = int(next(it))\n        g = [[] for _ in range(n)]\n        edges = set()\n        for _ in range(m):\n            a = int(next(it)) - 1\n            b = int(next(it)) - 1\n            g[a].append(b)\n            g[b].append(a)\n            edges.add((min(a,b), max(a,b)))\n        # Check if any odd cycle exists -> t=0, count ways = 1\n        color = [-1]*n\n        has_odd = False\n        for s in range(n):\n            if color[s] != -1: continue\n            q = deque([s])\n            color[s]=0\n            while q:\n                u=q.popleft()\n                for v in g[u]:\n                    if color[v]==-1:\n                        color[v]=color[u]^1\n                        q.append(v)\n                    else:\n                        if color[v]==color[u]:\n                            has_odd = True\n                            break\n                if has_odd: break\n            if has_odd: break\n        if has_odd:\n            out_lines.append(\"0 1\")\n            continue\n        # No odd cycle: graph is bipartite. Need to add edges to create an odd cycle.\n        # Minimum t is 1 if there exists pair of vertices in same part not connected and in same component? Actually:\n        # If there exists any pair of vertices in same color within same connected component and not connected by edge -> adding that edge creates odd cycle (odd length  cycle of length >=3).\n        # Otherwise t=2 if possible to connect vertices from different components appropriately, else 3.\n        comp = [-1]*n\n        comps = []\n        for i in range(n):\n            if comp[i]!=-1: continue\n            q=deque([i]); comp[i]=len(comps); lst=[i]\n            while q:\n                u=q.popleft()\n                for v in g[u]:\n                    if comp[v]==-1:\n                        comp[v]=comp[u]\n                        lst.append(v)\n                        q.append(v)\n            comps.append(lst)\n        # Count available same-color non-edges inside components\n        ways1 = 0\n        for idx, nodes in enumerate(comps):\n            cnt0 = sum(1 for v in nodes if color[v]==0)\n            cnt1 = len(nodes)-cnt0\n            # total possible same-color pairs minus existing edges between same color (which should be zero in bipartite)\n            # existing edges are only between colors, so any same-color pair not connected is pair count\n            ways1 += cnt0*(cnt0-1)//2 + cnt1*(cnt1-1)//2\n        if ways1>0:\n            out_lines.append(\"1 \" + str(ways1))\n            continue\n        # No same-color pair inside any component (i.e., every part size <=1 per component)\n        # So in each component, one side size and other side size such that both <=1? Actually implies each component is single edge or single vertex?\n        # Now check t=2: we can add two edges to create an odd cycle by connecting two components: need to find pairs of vertices a,b in comp A and c,d in comp B where colors match to create odd cycle of length odd.\n        # For two-component solution: choose two components, pick u in comp1 and v in comp2 in same color, and pick x in comp1 and y in comp2 in opposite color, adding edges (u,v) and (x,y) forming odd cycle of length (path between u and x in comp1) + (path between v and y in comp2) + 2. Since components are bipartite, minimal t=2 possible unless some components are isolated single vertices? Known CF result: if no same-color pairs inside components, then:\n        # If there exists isolated vertices, t=1 handled. Otherwise t=2 if number of components >=2, otherwise t=3.\n        if len(comps) == 1:\n            # need three edges: connect three vertices to form triangle\n            # number of ways to add 3 edges to form odd cycle: choose any triple of vertices that are pairwise non-adjacent currently and add all three edges -> count such triples\n            # but simpler: when single component bipartite and no same-color pairs -> component sizes must be (1,1) => n<=2\n            # handle general: count triples of vertices with no existing edges among them\n            cnt = 0\n            # brute force triples since n small? n can be up to large. But in this case structure small: if single component and no same-color pairs, then each color side size <=1 so n<=2 -> else impossible.\n            if n <= 2:\n                # need cycle of odd length >1 -> triangle needs 3 vertices, impossible -> need add 3 edges by adding edges with possibly between same vertices? For n=1 or 2, adding 3 edges impossible due to no parallel edges. But CF sample had 3 0 -> output 3 1 for n=3 isolated.\n                pass\n            # Simpler approach: fallback general known CF solution: if no same-color pairs and number of components >=2 -> t=2, ways = sum over unordered pairs of components of (size_comp_i * size_comp_j) - existing edges between chosen colors? Actually number of pairs of vertices in different components with same color times number with opposite color.\n        # Implement standard known solution:\n        # Build counts per component of color0 and color1\n        comp_counts = [(sum(1 for v in nodes if color[v]==0), sum(1 for v in nodes if color[v]==1)) for nodes in comps]\n        if len(comps) >= 2:\n            ways2 = 0\n            C = len(comps)\n            for i in range(C):\n                a0,a1 = comp_counts[i]\n                for j in range(i+1, C):\n                    b0,b1 = comp_counts[j]\n                    # ways to add two edges to create odd cycle: connect a0-b0 and a1-b1 OR a0-b1 and a1-b0 -> both produce odd cycle\n                    ways2 += a0*b0 + a1*b1  # one pairing\n                    ways2 += a0*b1 + a1*b0  # the other pairing\n            out_lines.append(\"2 \" + str(ways2))\n        else:\n            # single component and no same-color pairs -> must add 3 edges. Count number of triples of vertices with no edges among them (i<j<k and none of edges exist)\n            # For n up to maybe 2000? But single component and bipartite with no same-color pairs implies edges only between colors and each color size maybe >=1. We compute total triples minus triples containing any existing edge.\n            nverts = n\n            total_triples = nverts*(nverts-1)*(nverts-2)//6\n            # count triples that include at least one existing edge: for each edge(u,v), number of choices for third vertex w != u,v -> n-2. But triples with two edges counted twice; triples with three edges (triangle) impossible since bipartite.\n            triples_with_edge = m*(nverts-2)\n            # triples with two edges where edges share a vertex: count length-2 paths u-v-w: number of paths of length 2 equals sum over middle vertex deg*(deg-1)/2\n            path2 = 0\n            for v in range(n):\n                d = len(g[v])\n                path2 += d*(d-1)//2\n            # triples counted twice in triples_with_edge are exactly path2\n            triples_without_any_edge = total_triples - triples_with_edge + path2\n            out_lines.append(\"3 \" + str(triples_without_any_edge))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 569,
        "completion_token_count": 1747,
        "thoughts_token_count": 0
    }
}