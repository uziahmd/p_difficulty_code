{
    "start": 1758094731.522958,
    "end": 1758094815.330518,
    "start-formatted": "2025-09-17 16:38 KST",
    "end-formatted": "2025-09-17 16:40 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "**Mapping out the CF solution**\n\nI’m thinking about the known CF solution which involves pairing ones to create twos and then greedily selecting the best 2-weight items from the original twos and pairs of ones. For odd capacity, I can add the best leftover single one if available. The key is to build the best even capacities through combinations and then add the highest value single one for odd capacity. I’ll sort the values to work on the pairs and compute prefix sums to help with selections.",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = next(it)\n    c = next(it)\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\n\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums for weight-3 items\npref3 = [0]\nfor v in w3:\n    pref3.append(pref3[-1] + v)\n\n# build combined two-items for pairing starting at 0\npairs0 = []\ni = 0\nwhile i+1 < len(w1):\n    pairs0.append(w1[i] + w1[i+1])\n    i += 2\ncombined0 = w2[:] + pairs0\ncombined0.sort(reverse=True)\npref_comb0 = [0]\nfor v in combined0:\n    pref_comb0.append(pref_comb0[-1] + v)\nlen_comb0 = len(combined0)\n\n# build combined two-items for pairing starting at 1 (if we take top single)\ncombined1 = []\npref_comb1 = [0]\nlen_comb1 = 0\nif len(w1) >= 1:\n    pairs1 = []\n    i = 1\n    while i+1 < len(w1):\n        pairs1.append(w1[i] + w1[i+1])\n        i += 2\n    combined1 = w2[:] + pairs1\n    combined1.sort(reverse=True)\n    pref_comb1 = [0]\n    for v in combined1:\n        pref_comb1.append(pref_comb1[-1] + v)\n    len_comb1 = len(combined1)\n\n# function to get best value using only 1s and 2s for capacity r\ndef best_12(r):\n    # even part from combined0\n    t = r // 2\n    idx0 = t if t <= len_comb0 else len_comb0\n    best = pref_comb0[idx0]\n    if r % 2 == 1:\n        # try taking one single (top w1) and fill rest with combined1\n        if len(w1) >= 1:\n            t1 = (r - 1) // 2\n            idx1 = t1 if t1 <= len_comb1 else len_comb1\n            val = w1[0] + pref_comb1[idx1]\n            if val > best:\n                best = val\n    return best\n\n# try taking k weight-3 items\nans = 0\nmax_k = min(len(w3), m // 3)\nfor k in range(0, max_k + 1):\n    weight3_used = 3 * k\n    val3 = pref3[k]\n    rem = m - weight3_used\n    val12 = best_12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\n# also consider case taking no weight3 but only 1s and 2s (k=0 already considered)\nprint(ans)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nw1 = []\nw2 = []\nw3 = []\nfor _ in range(n):\n    w = next(it)\n    c = next(it)\n    if w == 1:\n        w1.append(c)\n    elif w == 2:\n        w2.append(c)\n    else:\n        w3.append(c)\n\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nw3.sort(reverse=True)\n\n# prefix sums for weight-3 items\npref3 = [0]\nfor v in w3:\n    pref3.append(pref3[-1] + v)\n\n# build combined two-items for pairing starting at 0\npairs0 = []\ni = 0\nwhile i+1 < len(w1):\n    pairs0.append(w1[i] + w1[i+1])\n    i += 2\ncombined0 = w2[:] + pairs0\ncombined0.sort(reverse=True)\npref_comb0 = [0]\nfor v in combined0:\n    pref_comb0.append(pref_comb0[-1] + v)\nlen_comb0 = len(combined0)\n\n# build combined two-items for pairing starting at 1 (if we take top single)\ncombined1 = []\npref_comb1 = [0]\nlen_comb1 = 0\nif len(w1) >= 1:\n    pairs1 = []\n    i = 1\n    while i+1 < len(w1):\n        pairs1.append(w1[i] + w1[i+1])\n        i += 2\n    combined1 = w2[:] + pairs1\n    combined1.sort(reverse=True)\n    pref_comb1 = [0]\n    for v in combined1:\n        pref_comb1.append(pref_comb1[-1] + v)\n    len_comb1 = len(combined1)\n\n# function to get best value using only 1s and 2s for capacity r\ndef best_12(r):\n    # even part from combined0\n    t = r // 2\n    idx0 = t if t <= len_comb0 else len_comb0\n    best = pref_comb0[idx0]\n    if r % 2 == 1:\n        # try taking one single (top w1) and fill rest with combined1\n        if len(w1) >= 1:\n            t1 = (r - 1) // 2\n            idx1 = t1 if t1 <= len_comb1 else len_comb1\n            val = w1[0] + pref_comb1[idx1]\n            if val > best:\n                best = val\n    return best\n\n# try taking k weight-3 items\nans = 0\nmax_k = min(len(w3), m // 3)\nfor k in range(0, max_k + 1):\n    weight3_used = 3 * k\n    val3 = pref3[k]\n    rem = m - weight3_used\n    val12 = best_12(rem)\n    total = val3 + val12\n    if total > ans:\n        ans = total\n\n# also consider case taking no weight3 but only 1s and 2s (k=0 already considered)\nprint(ans)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 6076,
        "thoughts_token_count": 5376
    }
}