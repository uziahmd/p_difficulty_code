{
    "start": 1758290641.9381032,
    "end": 1758290672.9167366,
    "start-formatted": "2025-09-19 23:04 KST",
    "end-formatted": "2025-09-19 23:04 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Analyzing implementation details**\n\nI need to compute \\(k\\) based on the given process, ensuring I can handle large numbers up to \\(1e9\\) by checking divisors up to \\(\\sqrt{1e9}\\) (31623). I realize that computing the least common multiple (LCM) could reach nearly \\(1e18\\), so using Python's `int` is essential. \n\nI have edge cases to consider, like if \\(a = b\\), where I'd output 0. The input format seems to suggest multiple test cases despite the statement pointing to a single pair. The example input is a bit confusing.",
    "response": "import sys, math\n\ndef best_k_for_pair(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    best_k = 0\n    best_lcm = 1 << 62\n    r = int(math.isqrt(d))\n    for i in range(1, r + 1):\n        if d % i == 0:\n            for g in (i, d // i):\n                k = (g - (a % g)) % g\n                na = a + k\n                nb = b + k\n                g2 = math.gcd(na, nb)\n                lcm = (na // g2) * nb\n                if lcm < best_lcm or (lcm == best_lcm and k < best_k):\n                    best_lcm = lcm\n                    best_k = k\n    return best_k\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    vals = list(map(int, data))\n    out_lines = []\n    if len(vals) == 2:\n        out_lines.append(str(best_k_for_pair(vals[0], vals[1])))\n    else:\n        for i in range(0, len(vals), 2):\n            if i+1 >= len(vals):\n                break\n            out_lines.append(str(best_k_for_pair(vals[i], vals[i+1])))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys, math\n\ndef best_k_for_pair(a, b):\n    if a == b:\n        return 0\n    d = abs(a - b)\n    best_k = 0\n    best_lcm = 1 << 62\n    r = int(math.isqrt(d))\n    for i in range(1, r + 1):\n        if d % i == 0:\n            for g in (i, d // i):\n                k = (g - (a % g)) % g\n                na = a + k\n                nb = b + k\n                g2 = math.gcd(na, nb)\n                lcm = (na // g2) * nb\n                if lcm < best_lcm or (lcm == best_lcm and k < best_k):\n                    best_lcm = lcm\n                    best_k = k\n    return best_k\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    vals = list(map(int, data))\n    out_lines = []\n    if len(vals) == 2:\n        out_lines.append(str(best_k_for_pair(vals[0], vals[1])))\n    else:\n        for i in range(0, len(vals), 2):\n            if i+1 >= len(vals):\n                break\n            out_lines.append(str(best_k_for_pair(vals[i], vals[i+1])))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 407,
        "completion_token_count": 1731,
        "thoughts_token_count": 1408
    }
}