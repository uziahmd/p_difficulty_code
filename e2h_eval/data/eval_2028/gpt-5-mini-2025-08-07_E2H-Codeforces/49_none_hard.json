{
    "start": 1758294621.0181868,
    "end": 1758294648.2760615,
    "start-formatted": "2025-09-20 00:10 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "Could not extract thought.",
    "response": "import sys\nimport threading\nfrom math import gcd\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # Quick consistency: l must be multiple of g and l/g = a*b where a,b coprime\n    for u,v,g,l in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n    # We'll assign values by factoring l/g and propagate ratios.\n    # For each node we keep a value as integer (initially None). We'll set root to something.\n    val = [0]*n\n    vis = [False]*n\n    from collections import deque\n    for i in range(n):\n        if vis[i]: continue\n        # BFS component\n        comp = []\n        q = deque([i]); vis[i]=True; comp.append(i)\n        while q:\n            x = q.popleft()\n            for y,g,l in adj[x]:\n                if not vis[y]:\n                    vis[y]=True\n                    q.append(y); comp.append(y)\n        # For component, compute baseline by assigning prime-power constraints via graph as equations:\n        # We'll try to find assignment using multiples method: choose start node value = 1, then compute tentative rational values as fractions p/q represented by numerator and denominator.\n        from math import gcd\n        num = [0]*n\n        den = [0]*n\n        for vtx in comp:\n            num[vtx]=0; den[vtx]=0\n        root = comp[0]\n        num[root]=1; den[root]=1\n        q = deque([root])\n        seen = {root}\n        ok = True\n        while q and ok:\n            x = q.popleft()\n            for y,g,l in adj[x]:\n                if y in seen: \n                    # check consistency\n                    # require gcd(val_x, val_y) = g and lcm = l\n                    # For tentative fractions check ratio constraints: val_x * val_y should equal g*l\n                    # Using num/den representation: (num[x]/den[x])*(num[y]/den[y]) should be g*l up to scaling\n                    # Hard to check without absolute scale; skip consistency here, will finalize later.\n                    continue\n                # we know gcd(a,b)=g, lcm(a,b)=l => a*b = g*l\n                # If we set a = g * A, b = g * B where gcd(A,B)=1 and A*B = l/g\n                t = l//g\n                # Suppose current a = num[x]/den[x] (rational). Then A = a/g. So b = g * (t / A) = g * t * den[x] / num[x]\n                # So set y rational num/den = g * t * den[x] / num[x]  => num = g*t*den[x], den = num[x]\n                # But we must multiply by g for b as well? Actually a = numx/denx, representing absolute a relative scale s.\n                numy = g * t * den[x]\n                deny = num[x]\n                g0 = gcd(numy, deny)\n                numy//=g0; deny//=g0\n                num[y]=numy; den[y]=deny\n                seen.add(y); q.append(y)\n        # Now we have rationals up to global multiplier. Need integer assignments with constraints gcd/lcm.\n        # Let scale be integer S so that final value for v is S * num[v] / den[v] integer.\n        # So S must be multiple of den[v]/gcd(num[v],den[v])? But num/den are reduced.\n        # For integer, S must be multiple of den[v].\n        # Also must satisfy gcd/lcm exact. We'll search minimal S such that all values <= 1e6 and constraints satisfied.\n        lcm_den = 1\n        for vtx in comp:\n            if num[vtx]==0:\n                num[vtx]=1; den[vtx]=1\n            # num/den reduced already\n            d = den[vtx]//gcd(num[vtx], den[vtx])\n            # but they are reduced so d = den\n            d = den[vtx]\n            lcm_den = lcm_den * d // gcd(lcm_den, d)\n            if lcm_den > 10**18:\n                break\n        if lcm_den==0 or lcm_den>10**18:\n            print(\"NO\"); return\n        # Try multipliers k = 1,2,... such that all values = k * (num/den) integers and <=1e6 and satisfy edges.\n        maxK = 10**6 // min((num[vtx]//den[vtx] if den[vtx]!=0 and num[vtx]%den[vtx]==0 else 1) for vtx in comp) if False else 10**6\n        # But better choose S = lcm_den * t where t >=1. We'll try small t up to limit.\n        found = False\n        limit_t = 1000\n        for tval in range(1, limit_t+1):\n            S = lcm_den * tval\n            arr = {}\n            exceed = False\n            for vtx in comp:\n                valv = S * num[vtx] // den[vtx]\n                if valv<=0 or valv>10**6:\n                    exceed = True; break\n                arr[vtx]=valv\n            if exceed: continue\n            good = True\n            for u,v,g,l in edges:\n                if u in arr and v in arr:\n                    a=arr[u]; b=arr[v]\n                    if gcd(a,b)!=g or (a//g)*(b//g)*g!=l: # avoid overflow: check lcm via a*b//gcd\n                        # compute lcm\n                        if a//gcd(a,b) * b != l:\n                            good=False; break\n                        # But above condition redundant. Simpler:\n                        if (a*b)//gcd(a,b)!=l or gcd(a,b)!=g:\n                            good=False; break\n            if good:\n                for vtx in comp:\n                    val[vtx]=arr[vtx]\n                found = True\n                break\n        if not found:\n            print(\"NO\"); return\n    # Verify global all edges\n    for u,v,g,l in edges:\n        a=val[u]; b=val[v]\n        if gcd(a,b)!=g or (a*b)//gcd(a,b)!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x if x>0 else 1) for x in val))\n\nif __name__ == \"__main__\":\n    main()",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport threading\nfrom math import gcd\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); m = int(next(it))\n    adj = [[] for _ in range(n)]\n    edges = []\n    for _ in range(m):\n        u = int(next(it))-1; v = int(next(it))-1\n        g = int(next(it)); l = int(next(it))\n        edges.append((u,v,g,l))\n        adj[u].append((v,g,l))\n        adj[v].append((u,g,l))\n    # Quick consistency: l must be multiple of g and l/g = a*b where a,b coprime\n    for u,v,g,l in edges:\n        if l % g != 0:\n            print(\"NO\"); return\n    # We'll assign values by factoring l/g and propagate ratios.\n    # For each node we keep a value as integer (initially None). We'll set root to something.\n    val = [0]*n\n    vis = [False]*n\n    from collections import deque\n    for i in range(n):\n        if vis[i]: continue\n        # BFS component\n        comp = []\n        q = deque([i]); vis[i]=True; comp.append(i)\n        while q:\n            x = q.popleft()\n            for y,g,l in adj[x]:\n                if not vis[y]:\n                    vis[y]=True\n                    q.append(y); comp.append(y)\n        # For component, compute baseline by assigning prime-power constraints via graph as equations:\n        # We'll try to find assignment using multiples method: choose start node value = 1, then compute tentative rational values as fractions p/q represented by numerator and denominator.\n        from math import gcd\n        num = [0]*n\n        den = [0]*n\n        for vtx in comp:\n            num[vtx]=0; den[vtx]=0\n        root = comp[0]\n        num[root]=1; den[root]=1\n        q = deque([root])\n        seen = {root}\n        ok = True\n        while q and ok:\n            x = q.popleft()\n            for y,g,l in adj[x]:\n                if y in seen: \n                    # check consistency\n                    # require gcd(val_x, val_y) = g and lcm = l\n                    # For tentative fractions check ratio constraints: val_x * val_y should equal g*l\n                    # Using num/den representation: (num[x]/den[x])*(num[y]/den[y]) should be g*l up to scaling\n                    # Hard to check without absolute scale; skip consistency here, will finalize later.\n                    continue\n                # we know gcd(a,b)=g, lcm(a,b)=l => a*b = g*l\n                # If we set a = g * A, b = g * B where gcd(A,B)=1 and A*B = l/g\n                t = l//g\n                # Suppose current a = num[x]/den[x] (rational). Then A = a/g. So b = g * (t / A) = g * t * den[x] / num[x]\n                # So set y rational num/den = g * t * den[x] / num[x]  => num = g*t*den[x], den = num[x]\n                # But we must multiply by g for b as well? Actually a = numx/denx, representing absolute a relative scale s.\n                numy = g * t * den[x]\n                deny = num[x]\n                g0 = gcd(numy, deny)\n                numy//=g0; deny//=g0\n                num[y]=numy; den[y]=deny\n                seen.add(y); q.append(y)\n        # Now we have rationals up to global multiplier. Need integer assignments with constraints gcd/lcm.\n        # Let scale be integer S so that final value for v is S * num[v] / den[v] integer.\n        # So S must be multiple of den[v]/gcd(num[v],den[v])? But num/den are reduced.\n        # For integer, S must be multiple of den[v].\n        # Also must satisfy gcd/lcm exact. We'll search minimal S such that all values <= 1e6 and constraints satisfied.\n        lcm_den = 1\n        for vtx in comp:\n            if num[vtx]==0:\n                num[vtx]=1; den[vtx]=1\n            # num/den reduced already\n            d = den[vtx]//gcd(num[vtx], den[vtx])\n            # but they are reduced so d = den\n            d = den[vtx]\n            lcm_den = lcm_den * d // gcd(lcm_den, d)\n            if lcm_den > 10**18:\n                break\n        if lcm_den==0 or lcm_den>10**18:\n            print(\"NO\"); return\n        # Try multipliers k = 1,2,... such that all values = k * (num/den) integers and <=1e6 and satisfy edges.\n        maxK = 10**6 // min((num[vtx]//den[vtx] if den[vtx]!=0 and num[vtx]%den[vtx]==0 else 1) for vtx in comp) if False else 10**6\n        # But better choose S = lcm_den * t where t >=1. We'll try small t up to limit.\n        found = False\n        limit_t = 1000\n        for tval in range(1, limit_t+1):\n            S = lcm_den * tval\n            arr = {}\n            exceed = False\n            for vtx in comp:\n                valv = S * num[vtx] // den[vtx]\n                if valv<=0 or valv>10**6:\n                    exceed = True; break\n                arr[vtx]=valv\n            if exceed: continue\n            good = True\n            for u,v,g,l in edges:\n                if u in arr and v in arr:\n                    a=arr[u]; b=arr[v]\n                    if gcd(a,b)!=g or (a//g)*(b//g)*g!=l: # avoid overflow: check lcm via a*b//gcd\n                        # compute lcm\n                        if a//gcd(a,b) * b != l:\n                            good=False; break\n                        # But above condition redundant. Simpler:\n                        if (a*b)//gcd(a,b)!=l or gcd(a,b)!=g:\n                            good=False; break\n            if good:\n                for vtx in comp:\n                    val[vtx]=arr[vtx]\n                found = True\n                break\n        if not found:\n            print(\"NO\"); return\n    # Verify global all edges\n    for u,v,g,l in edges:\n        a=val[u]; b=val[v]\n        if gcd(a,b)!=g or (a*b)//gcd(a,b)!=l:\n            print(\"NO\"); return\n    print(\"YES\")\n    print(\" \".join(str(x if x>0 else 1) for x in val))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 536,
        "completion_token_count": 1527,
        "thoughts_token_count": 0
    }
}