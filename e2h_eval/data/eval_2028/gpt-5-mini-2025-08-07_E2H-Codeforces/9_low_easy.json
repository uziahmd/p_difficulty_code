{
    "start": 1758094618.5163271,
    "end": 1758094674.0687861,
    "start-formatted": "2025-09-17 16:36 KST",
    "end-formatted": "2025-09-17 16:37 KST",
    "gpu": 2,
    "pid": 9,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Selling Souvenirs\n\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.\n\n## Input\nThe first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.\n\n## Output\nPrint one number — maximum possible total cost of souvenirs that Petya can carry to the market.\n\n## Example\n### Input\n['1 1\\n2 1', '2 2\\n1 3\\n2 2', '4 3\\n3 10\\n2 7\\n2 8\\n1 1']\n\n### Output\n['0', '3', '10']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "**Optimizing capacity with pairs**\n\nI'm figuring out how to handle an odd capacity scenario. First, I should sort the weights and create pairs. Then, I'll sort the second set in descending order and merge them into groups. For a given capacity, I’ll calculate the maximum number of groups I can use and get their value. If there's an odd item left in the capacity, I might add the best single one remaining, but I need to track which items have been used carefully to avoid issues with indices.",
    "response": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it)\n    c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums\ndef prefix_sum(arr):\n    ps = [0]\n    for x in arr:\n        ps.append(ps[-1] + x)\n    return ps\n\npref1 = prefix_sum(ones)\npref2 = prefix_sum(twos)\npref3 = prefix_sum(threes)\n\n# build pairs from ones\npairs = []\nfor i in range(0, len(ones) - 1, 2):\n    pairs.append(ones[i] + ones[i+1])\n\n# groups: (value, is_pair)\ngroups = []\nfor v in pairs:\n    groups.append((v, 1))\nfor v in twos:\n    groups.append((v, 0))\ngroups.sort(key=lambda x: x[0], reverse=True)\n\ngvals = [0]\ngpairs = [0]\nfor v, typ in groups:\n    gvals.append(gvals[-1] + v)\n    gpairs.append(gpairs[-1] + (1 if typ == 1 else 0))\n\n# dp for capacities using only weights 1 and 2\ndp12 = [0] * (m + 1)\nmax_g = len(groups)\nfor cap in range(0, m + 1):\n    g = min(max_g, cap // 2)\n    best = 0\n    # try g and g-1 to allow different leftover ones\n    for t in (g, g - 1):\n        if t < 0:\n            continue\n        val = gvals[t]\n        # number of ones used by chosen pairs = 2 * gpairs[t]\n        if cap % 2 == 1:\n            idx = 2 * gpairs[t]\n            if idx < len(ones):\n                val += ones[idx]\n        if val > best:\n            best = val\n    dp12[cap] = best\n\n# iterate number of threes taken\nres = 0\nmax_threes = min(len(threes), m // 3)\nfor k in range(0, max_threes + 1):\n    weight3 = 3 * k\n    cost3 = pref3[k]\n    rem = m - weight3\n    total = cost3 + dp12[rem]\n    if total > res:\n        res = total\n\nprint(res)",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\n\ndata = list(map(int, sys.stdin.read().strip().split()))\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = next(it)\nm = next(it)\nones = []\ntwos = []\nthrees = []\nfor _ in range(n):\n    w = next(it)\n    c = next(it)\n    if w == 1:\n        ones.append(c)\n    elif w == 2:\n        twos.append(c)\n    else:\n        threes.append(c)\n\nones.sort(reverse=True)\ntwos.sort(reverse=True)\nthrees.sort(reverse=True)\n\n# prefix sums\ndef prefix_sum(arr):\n    ps = [0]\n    for x in arr:\n        ps.append(ps[-1] + x)\n    return ps\n\npref1 = prefix_sum(ones)\npref2 = prefix_sum(twos)\npref3 = prefix_sum(threes)\n\n# build pairs from ones\npairs = []\nfor i in range(0, len(ones) - 1, 2):\n    pairs.append(ones[i] + ones[i+1])\n\n# groups: (value, is_pair)\ngroups = []\nfor v in pairs:\n    groups.append((v, 1))\nfor v in twos:\n    groups.append((v, 0))\ngroups.sort(key=lambda x: x[0], reverse=True)\n\ngvals = [0]\ngpairs = [0]\nfor v, typ in groups:\n    gvals.append(gvals[-1] + v)\n    gpairs.append(gpairs[-1] + (1 if typ == 1 else 0))\n\n# dp for capacities using only weights 1 and 2\ndp12 = [0] * (m + 1)\nmax_g = len(groups)\nfor cap in range(0, m + 1):\n    g = min(max_g, cap // 2)\n    best = 0\n    # try g and g-1 to allow different leftover ones\n    for t in (g, g - 1):\n        if t < 0:\n            continue\n        val = gvals[t]\n        # number of ones used by chosen pairs = 2 * gpairs[t]\n        if cap % 2 == 1:\n            idx = 2 * gpairs[t]\n            if idx < len(ones):\n                val += ones[idx]\n        if val > best:\n            best = val\n    dp12[cap] = best\n\n# iterate number of threes taken\nres = 0\nmax_threes = min(len(threes), m // 3)\nfor k in range(0, max_threes + 1):\n    weight3 = 3 * k\n    cost3 = pref3[k]\n    rem = m - weight3\n    total = cost3 + dp12[rem]\n    if total > res:\n        res = total\n\nprint(res)",
    "score": 0,
    "metadata": {
        "prompt_token_count": 429,
        "completion_token_count": 2329,
        "thoughts_token_count": 1728
    }
}