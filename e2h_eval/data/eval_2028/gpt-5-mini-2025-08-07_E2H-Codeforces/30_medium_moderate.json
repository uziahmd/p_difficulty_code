{
    "start": 1758291048.092713,
    "end": 1758291112.7972925,
    "start-formatted": "2025-09-19 23:10 KST",
    "end-formatted": "2025-09-19 23:11 KST",
    "gpu": 2,
    "pid": 30,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# TV Game\n\nThere is a new TV game on BerTV. In this game two players get a number A consisting of 2n digits. Before each turn players determine who will make the next move. Each player should make exactly n moves. On it's turn i-th player takes the leftmost digit of A and appends it to his or her number Si. After that this leftmost digit is erased from A. Initially the numbers of both players (S1 and S2) are «empty». Leading zeroes in numbers A, S1, S2 are allowed. In the end of the game the first player gets S1 dollars, and the second gets S2 dollars.One day Homer and Marge came to play the game. They managed to know the number A beforehand. They want to find such sequence of their moves that both of them makes exactly n moves and which maximizes their total prize. Help them.\n\n## Input\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes.\n\n## Output\nOutput the line of 2n characters «H» and «M» — the sequence of moves of Homer and Marge, which gives them maximum possible total prize. Each player must make exactly n moves. If there are several solutions, output any of them.\n\n## Example\n### Input\n['2\\n1234', '2\\n9911']\n\n### Output\n['HHMM', 'HMHM']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "**Recalling TV Game problem**\n\nI'm thinking about the Codeforces problem \"TV Game,\" possibly CF 44A? The problem involves two players taking turns and making n moves with leftmost digits of a sequence of letters H and M. Each player aims to maximize their total score by forming the highest numeric value from the digits they select while maintaining the order. The final goal is to calculate the sum of both players’ concatenated digits based on their sequence choices and positions.",
    "response": "```python\nimport sys\nfrom functools import lru_cache\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    L = 2 * n\n    digits = [int(ch) for ch in A]\n\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = pow10[i-1] * 10\n\n    NEG_INF = -10**200\n\n    @lru_cache(None)\n    def solve(i, h_right):\n        # process positions i..0 (current index i). h_right = number of H assigned among positions > i\n        if i < 0:\n            return 0 if h_right == n else NEG_INF\n        processed_to_right = (L - 1 - i)\n        # remaining positions count including current = i+1\n        rem = i + 1\n        needed_H = n - h_right\n        if needed_H < 0 or needed_H > rem:\n            return NEG_INF\n\n        best = NEG_INF\n\n        # Option assign H at i\n        if needed_H >= 1:\n            val_h = digits[i] * pow10[h_right] + solve(i - 1, h_right + 1)\n            if val_h > best:\n                best = val_h\n\n        # Option assign M at i\n        # m_right equals number of M assigned to right = processed_to_right - h_right\n        m_right = processed_to_right - h_right\n        # After assigning M, still must allow needed_H <= rem -1\n        if needed_H <= rem - 1:\n            val_m = digits[i] * pow10[m_right] + solve(i - 1, h_right)\n            if val_m > best:\n                best = val_m\n\n        return best\n\n    # Build answer by reconstruction\n    ans = ['?'] * L\n    i = L - 1\n    h_right = 0\n    # Precompute dp values by calling solve\n    _ = solve(i, h_right)\n    while i >= 0:\n        processed_to_right = (L - 1 - i)\n        rem = i + 1\n        needed_H = n - h_right\n\n        choose_H = False\n        best = NEG_INF\n\n        if needed_H >= 1:\n            val_h = digits[i] * pow10[h_right] + solve(i - 1, h_right + 1)\n            best = val_h\n            choose_H = True\n\n        m_right = processed_to_right - h_right\n        if needed_H <= rem - 1:\n            val_m = digits[i] * pow10[m_right] + solve(i - 1, h_right)\n            if val_m > best:\n                best = val_m\n                choose_H = False\n        # mark\n        if choose_H:\n            ans[i] = 'H'\n            h_right += 1\n        else:\n            ans[i] = 'M'\n            # h_right unchanged\n        i -= 1\n\n    # Output left-to-right\n    sys.stdout.write(''.join(ans))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom functools import lru_cache\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = data[1].strip()\n    L = 2 * n\n    digits = [int(ch) for ch in A]\n\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = pow10[i-1] * 10\n\n    NEG_INF = -10**200\n\n    @lru_cache(None)\n    def solve(i, h_right):\n        # process positions i..0 (current index i). h_right = number of H assigned among positions > i\n        if i < 0:\n            return 0 if h_right == n else NEG_INF\n        processed_to_right = (L - 1 - i)\n        # remaining positions count including current = i+1\n        rem = i + 1\n        needed_H = n - h_right\n        if needed_H < 0 or needed_H > rem:\n            return NEG_INF\n\n        best = NEG_INF\n\n        # Option assign H at i\n        if needed_H >= 1:\n            val_h = digits[i] * pow10[h_right] + solve(i - 1, h_right + 1)\n            if val_h > best:\n                best = val_h\n\n        # Option assign M at i\n        # m_right equals number of M assigned to right = processed_to_right - h_right\n        m_right = processed_to_right - h_right\n        # After assigning M, still must allow needed_H <= rem -1\n        if needed_H <= rem - 1:\n            val_m = digits[i] * pow10[m_right] + solve(i - 1, h_right)\n            if val_m > best:\n                best = val_m\n\n        return best\n\n    # Build answer by reconstruction\n    ans = ['?'] * L\n    i = L - 1\n    h_right = 0\n    # Precompute dp values by calling solve\n    _ = solve(i, h_right)\n    while i >= 0:\n        processed_to_right = (L - 1 - i)\n        rem = i + 1\n        needed_H = n - h_right\n\n        choose_H = False\n        best = NEG_INF\n\n        if needed_H >= 1:\n            val_h = digits[i] * pow10[h_right] + solve(i - 1, h_right + 1)\n            best = val_h\n            choose_H = True\n\n        m_right = processed_to_right - h_right\n        if needed_H <= rem - 1:\n            val_m = digits[i] * pow10[m_right] + solve(i - 1, h_right)\n            if val_m > best:\n                best = val_m\n                choose_H = False\n        # mark\n        if choose_H:\n            ans[i] = 'H'\n            h_right += 1\n        else:\n            ans[i] = 'M'\n            # h_right unchanged\n        i -= 1\n\n    # Output left-to-right\n    sys.stdout.write(''.join(ans))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 412,
        "completion_token_count": 3449,
        "thoughts_token_count": 2752
    }
}