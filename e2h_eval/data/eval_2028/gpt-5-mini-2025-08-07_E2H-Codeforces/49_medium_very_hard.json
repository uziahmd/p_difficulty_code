{
    "start": 1758290707.8829157,
    "end": 1758290852.3163607,
    "start-formatted": "2025-09-19 23:05 KST",
    "end-formatted": "2025-09-19 23:07 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Analyzing graph properties**\n\nI'm considering how different edges adjacent to a vertex can lead to various overlapping sets. But I've noted that each prime exponent must either be greater or less than another, depending on the edge. The exponent at a vertex should be a single integer across its incident edges. To make sense of this, I think it’s better to represent the unknowns required for each edge. For each connected component of the graph, I can start with an initial node value and propagate values accordingly.",
    "response": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef sieve(n):\n    bs = [True]*(n+1)\n    primes=[]\n    for i in range(2,n+1):\n        if bs[i]:\n            primes.append(i)\n            step=i\n            for j in range(i*i,n+1,i):\n                bs[j]=False\n    return primes\n\nprimes_list = sieve(1000)\n\ndef factorize(x):\n    res = {}\n    n = x\n    for p in primes_list:\n        if p*p>n: break\n        if n%p==0:\n            e=0\n            while n%p==0:\n                n//=p\n                e+=1\n            res[p]=e\n    if n>1:\n        res[n]=res.get(n,0)+1\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it))-1\n    v = int(next(it))-1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\nfor (_,_,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\nedge_fg = []\nedge_fl = []\nall_primes = set()\nfor (u,v,g,l) in edges:\n    fg = factorize(g)\n    fl = factorize(l)\n    edge_fg.append(fg)\n    edge_fl.append(fl)\n    all_primes.update(fg.keys())\n    all_primes.update(fl.keys())\n\nper_prime_edges = {}\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = edge_fg[idx]\n    fl = edge_fl[idx]\n    primes_in_edge = set(fg.keys()) | set(fl.keys())\n    for p in primes_in_edge:\n        ge = fg.get(p,0)\n        le = fl.get(p,0)\n        if ge > le:\n            print(\"NO\")\n            sys.exit(0)\n        if p not in per_prime_edges:\n            per_prime_edges[p] = []\n        per_prime_edges[p].append((idx,u,v,ge,le))\n\nexponents = {p:{} for p in per_prime_edges.keys()}\n\nfor p, elist in per_prime_edges.items():\n    assigned = {}\n    adj = defaultdict(list)\n    domain = {}\n    nodes_involved = set()\n    for (idx,u,v,ge,le) in elist:\n        nodes_involved.add(u); nodes_involved.add(v)\n        if ge == le:\n            if u in assigned and assigned[u] != ge:\n                print(\"NO\"); sys.exit(0)\n            assigned[u] = ge\n            if v in assigned and assigned[v] != ge:\n                print(\"NO\"); sys.exit(0)\n            assigned[v] = ge\n        else:\n            adj[u].append((v,ge,le))\n            adj[v].append((u,ge,le))\n    for node in nodes_involved:\n        if node in adj:\n            s = None\n            for (nbr,ge,le) in adj[node]:\n                pair = {ge,le}\n                if s is None:\n                    s = set(pair)\n                else:\n                    s &= pair\n                if not s:\n                    print(\"NO\"); sys.exit(0)\n            domain[node] = s\n        else:\n            domain[node] = None\n    for node,val in list(assigned.items()):\n        if domain.get(node) is not None and val not in domain[node]:\n            print(\"NO\"); sys.exit(0)\n    visited = set()\n    for node in nodes_involved:\n        if node in visited:\n            continue\n        comp_nodes = []\n        dq = deque([node])\n        visited.add(node)\n        while dq:\n            x = dq.popleft()\n            comp_nodes.append(x)\n            for (y,_,_) in adj.get(x,()):\n                if y not in visited:\n                    visited.add(y)\n                    dq.append(y)\n        seeds = {}\n        for x in comp_nodes:\n            if x in assigned:\n                seeds[x]=assigned[x]\n        def try_assign(start_assignments):\n            assign = dict(start_assignments)\n            q = deque(start_assignments.keys())\n            while q:\n                u = q.popleft()\n                eu = assign[u]\n                for (v,ge,le) in adj.get(u,()):\n                    if eu != ge and eu != le:\n                        return None\n                    req = le if eu == ge else ge\n                    if v in assign:\n                        if assign[v] != req:\n                            return None\n                    else:\n                        if domain.get(v) is not None and req not in domain[v]:\n                            return None\n                        assign[v]=req\n                        q.append(v)\n            for x in comp_nodes:\n                if x not in assign:\n                    dom = domain.get(x)\n                    if dom is None:\n                        assign[x] = assigned.get(x,0)\n                        q.append(x)\n                        while q:\n                            u = q.popleft()\n                            eu = assign[u]\n                            for (v,ge,le) in adj.get(u,()):\n                                if eu != ge and eu != le:\n                                    return None\n                                req = le if eu == ge else ge\n                                if v in assign:\n                                    if assign[v] != req:\n                                        return None\n                                else:\n                                    if domain.get(v) is not None and req not in domain[v]:\n                                        return None\n                                    assign[v]=req\n                                    q.append(v)\n                    else:\n                        tried = False\n                        for val in dom:\n                            local_assign = dict(assign)\n                            local_assign[x]=val\n                            q2 = deque([x])\n                            ok = True\n                            while q2:\n                                u2 = q2.popleft()\n                                eu2 = local_assign[u2]\n                                for (v2,ge2,le2) in adj.get(u2,()):\n                                    if eu2 != ge2 and eu2 != le2:\n                                        ok=False; break\n                                    req2 = le2 if eu2 == ge2 else ge2\n                                    if v2 in local_assign:\n                                        if local_assign[v2] != req2:\n                                            ok=False; break\n                                    else:\n                                        if domain.get(v2) is not None and req2 not in domain[v2]:\n                                            ok=False; break\n                                        local_assign[v2]=req2\n                                        q2.append(v2)\n                                if not ok:\n                                    break\n                            if ok:\n                                assign = local_assign\n                                tried = True\n                                break\n                        if not tried:\n                            return None\n            return assign\n        if seeds:\n            res = try_assign(seeds)\n            if res is None:\n                print(\"NO\"); sys.exit(0)\n            for k,v in res.items():\n                exponents[p][k]=v\n                assigned[k]=v\n        else:\n            start = comp_nodes[0]\n            dom = domain.get(start)\n            if dom is None:\n                start_options = [0]\n            else:\n                start_options = list(dom)\n            success = None\n            for val in start_options:\n                res = try_assign({start:val})\n                if res is not None:\n                    success = res\n                    break\n            if success is None:\n                print(\"NO\"); sys.exit(0)\n            for k,v in success.items():\n                exponents[p][k]=v\n                assigned[k]=v\n    for node,val in assigned.items():\n        exponents[p].setdefault(node,val)\n\nres_vals = [1]*n\nfor p,emap in exponents.items():\n    for node,exp in emap.items():\n        if exp>0:\n            res_vals[node] *= pow(p, exp)\n\nfor i in range(n):\n    if res_vals[i] <= 0:\n        print(\"NO\"); sys.exit(0)\n\nimport math\nfor (u,v,g,l) in edges:\n    gu = math.gcd(res_vals[u], res_vals[v])\n    if gu != g:\n        print(\"NO\"); sys.exit(0)\n    lv = res_vals[u]//gu*res_vals[v]\n    if lv != l:\n        print(\"NO\"); sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res_vals))\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import defaultdict, deque\n\ndef sieve(n):\n    bs = [True]*(n+1)\n    primes=[]\n    for i in range(2,n+1):\n        if bs[i]:\n            primes.append(i)\n            step=i\n            for j in range(i*i,n+1,i):\n                bs[j]=False\n    return primes\n\nprimes_list = sieve(1000)\n\ndef factorize(x):\n    res = {}\n    n = x\n    for p in primes_list:\n        if p*p>n: break\n        if n%p==0:\n            e=0\n            while n%p==0:\n                n//=p\n                e+=1\n            res[p]=e\n    if n>1:\n        res[n]=res.get(n,0)+1\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it))\nm = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it))-1\n    v = int(next(it))-1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\nfor (_,_,g,l) in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\nedge_fg = []\nedge_fl = []\nall_primes = set()\nfor (u,v,g,l) in edges:\n    fg = factorize(g)\n    fl = factorize(l)\n    edge_fg.append(fg)\n    edge_fl.append(fl)\n    all_primes.update(fg.keys())\n    all_primes.update(fl.keys())\n\nper_prime_edges = {}\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = edge_fg[idx]\n    fl = edge_fl[idx]\n    primes_in_edge = set(fg.keys()) | set(fl.keys())\n    for p in primes_in_edge:\n        ge = fg.get(p,0)\n        le = fl.get(p,0)\n        if ge > le:\n            print(\"NO\")\n            sys.exit(0)\n        if p not in per_prime_edges:\n            per_prime_edges[p] = []\n        per_prime_edges[p].append((idx,u,v,ge,le))\n\nexponents = {p:{} for p in per_prime_edges.keys()}\n\nfor p, elist in per_prime_edges.items():\n    assigned = {}\n    adj = defaultdict(list)\n    domain = {}\n    nodes_involved = set()\n    for (idx,u,v,ge,le) in elist:\n        nodes_involved.add(u); nodes_involved.add(v)\n        if ge == le:\n            if u in assigned and assigned[u] != ge:\n                print(\"NO\"); sys.exit(0)\n            assigned[u] = ge\n            if v in assigned and assigned[v] != ge:\n                print(\"NO\"); sys.exit(0)\n            assigned[v] = ge\n        else:\n            adj[u].append((v,ge,le))\n            adj[v].append((u,ge,le))\n    for node in nodes_involved:\n        if node in adj:\n            s = None\n            for (nbr,ge,le) in adj[node]:\n                pair = {ge,le}\n                if s is None:\n                    s = set(pair)\n                else:\n                    s &= pair\n                if not s:\n                    print(\"NO\"); sys.exit(0)\n            domain[node] = s\n        else:\n            domain[node] = None\n    for node,val in list(assigned.items()):\n        if domain.get(node) is not None and val not in domain[node]:\n            print(\"NO\"); sys.exit(0)\n    visited = set()\n    for node in nodes_involved:\n        if node in visited:\n            continue\n        comp_nodes = []\n        dq = deque([node])\n        visited.add(node)\n        while dq:\n            x = dq.popleft()\n            comp_nodes.append(x)\n            for (y,_,_) in adj.get(x,()):\n                if y not in visited:\n                    visited.add(y)\n                    dq.append(y)\n        seeds = {}\n        for x in comp_nodes:\n            if x in assigned:\n                seeds[x]=assigned[x]\n        def try_assign(start_assignments):\n            assign = dict(start_assignments)\n            q = deque(start_assignments.keys())\n            while q:\n                u = q.popleft()\n                eu = assign[u]\n                for (v,ge,le) in adj.get(u,()):\n                    if eu != ge and eu != le:\n                        return None\n                    req = le if eu == ge else ge\n                    if v in assign:\n                        if assign[v] != req:\n                            return None\n                    else:\n                        if domain.get(v) is not None and req not in domain[v]:\n                            return None\n                        assign[v]=req\n                        q.append(v)\n            for x in comp_nodes:\n                if x not in assign:\n                    dom = domain.get(x)\n                    if dom is None:\n                        assign[x] = assigned.get(x,0)\n                        q.append(x)\n                        while q:\n                            u = q.popleft()\n                            eu = assign[u]\n                            for (v,ge,le) in adj.get(u,()):\n                                if eu != ge and eu != le:\n                                    return None\n                                req = le if eu == ge else ge\n                                if v in assign:\n                                    if assign[v] != req:\n                                        return None\n                                else:\n                                    if domain.get(v) is not None and req not in domain[v]:\n                                        return None\n                                    assign[v]=req\n                                    q.append(v)\n                    else:\n                        tried = False\n                        for val in dom:\n                            local_assign = dict(assign)\n                            local_assign[x]=val\n                            q2 = deque([x])\n                            ok = True\n                            while q2:\n                                u2 = q2.popleft()\n                                eu2 = local_assign[u2]\n                                for (v2,ge2,le2) in adj.get(u2,()):\n                                    if eu2 != ge2 and eu2 != le2:\n                                        ok=False; break\n                                    req2 = le2 if eu2 == ge2 else ge2\n                                    if v2 in local_assign:\n                                        if local_assign[v2] != req2:\n                                            ok=False; break\n                                    else:\n                                        if domain.get(v2) is not None and req2 not in domain[v2]:\n                                            ok=False; break\n                                        local_assign[v2]=req2\n                                        q2.append(v2)\n                                if not ok:\n                                    break\n                            if ok:\n                                assign = local_assign\n                                tried = True\n                                break\n                        if not tried:\n                            return None\n            return assign\n        if seeds:\n            res = try_assign(seeds)\n            if res is None:\n                print(\"NO\"); sys.exit(0)\n            for k,v in res.items():\n                exponents[p][k]=v\n                assigned[k]=v\n        else:\n            start = comp_nodes[0]\n            dom = domain.get(start)\n            if dom is None:\n                start_options = [0]\n            else:\n                start_options = list(dom)\n            success = None\n            for val in start_options:\n                res = try_assign({start:val})\n                if res is not None:\n                    success = res\n                    break\n            if success is None:\n                print(\"NO\"); sys.exit(0)\n            for k,v in success.items():\n                exponents[p][k]=v\n                assigned[k]=v\n    for node,val in assigned.items():\n        exponents[p].setdefault(node,val)\n\nres_vals = [1]*n\nfor p,emap in exponents.items():\n    for node,exp in emap.items():\n        if exp>0:\n            res_vals[node] *= pow(p, exp)\n\nfor i in range(n):\n    if res_vals[i] <= 0:\n        print(\"NO\"); sys.exit(0)\n\nimport math\nfor (u,v,g,l) in edges:\n    gu = math.gcd(res_vals[u], res_vals[v])\n    if gu != g:\n        print(\"NO\"); sys.exit(0)\n    lv = res_vals[u]//gu*res_vals[v]\n    if lv != l:\n        print(\"NO\"); sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in res_vals))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 6872,
        "thoughts_token_count": 5120
    }
}