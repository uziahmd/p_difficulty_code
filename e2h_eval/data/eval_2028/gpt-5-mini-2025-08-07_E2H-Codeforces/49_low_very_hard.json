{
    "start": 1758284944.4648137,
    "end": 1758285010.4019775,
    "start-formatted": "2025-09-19 21:29 KST",
    "end-formatted": "2025-09-19 21:30 KST",
    "gpu": 2,
    "pid": 49,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Mushroom Strife\n\nPasha and Akim were making a forest map — the lawns were the graph's vertexes and the roads joining the lawns were its edges. They decided to encode the number of laughy mushrooms on every lawn in the following way: on every edge between two lawns they wrote two numbers, the greatest common divisor (GCD) and the least common multiple (LCM) of the number of mushrooms on these lawns. But one day Pasha and Akim had an argument about the laughy mushrooms and tore the map. Pasha was left with just some part of it, containing only m roads. Your task is to help Pasha — use the map he has to restore the number of mushrooms on every lawn. As the result is not necessarily unique, help Pasha to restore any one or report that such arrangement of mushrooms does not exist. It is guaranteed that the numbers on the roads on the initial map were no less that 1 and did not exceed 106.\n\n## Input\nThe first line contains two numbers n and m () which are the numbers of lawns and roads we know about. Each of the following m lines contains four numbers which are the numbers of lawns the road connects, the GCD and the LCM of the numbers of mushrooms on these lawns (1 ≤ GCD, LCM ≤ 106).It is guaranteed, that no road connects lawn to itself, and no two lawns are connected by more than one road.\n\n## Output\nThe answer should contain \"YES\" or \"NO\" on the first line, saying whether it is possible or not to perform the arrangement. If the answer is \"YES\", print on the following line n numbers which are the numbers of mushrooms on the corresponding lawns.\n\n## Example\n### Input\n['1 0', '2 1\\n1 2 1 3', '3 2\\n3 2 1 2\\n3 1 1 10', '2 1\\n1 2 3 7']\n\n### Output\n['YES\\n1', 'YES\\n1 3', 'YES\\n5 1 2', 'NO']\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "**Exploring GCD LCM Constraints**\n\nI'm thinking about the CF problem \"Mushroom GCD LCM.\" The solution involves graph constraints for edges, where for edges u-v, we need the numbers a[u] and a[v] to satisfy gcd = g and lcm = l. This means their product must be g*l. By setting x[u] and x[v] as multiples of g, we ensure they are coprime and their product equals k after accounting for divisors. The challenge is maintaining consistent assignments across the graph for prime exponents.",
    "response": "import sys\nfrom collections import deque, defaultdict\n\nMAXV = 10**6\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = sieve_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it))-1\n    v = int(next(it))-1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\n# quick check l % g == 0\nfor u,v,g,l in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# For each prime, build adjacency with constraints: for edge u-v,\n# Let ag = exponent of p in g, al = exponent in l, ak = al - ag >=0\n# Constraint: E[u] + E[v] = 2*ag + ak  (where E are exponents in a[.] for prime p)\nprime_adj = defaultdict(list)  # p -> list of (u,v, C)\nprimes_used = set()\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    # unify primes from g or l\n    ps = set(fg.keys()) | set(fl.keys())\n    for p in ps:\n        ag = fg.get(p,0)\n        al = fl.get(p,0)\n        ak = al - ag\n        if ak < 0:\n            print(\"NO\")\n            sys.exit(0)\n        C = 2*ag + ak\n        prime_adj[p].append((u,v,C))\n        primes_used.add(p)\n\n# For each prime, solve linear system on graph components\nexponents = [defaultdict(int) for _ in range(n)]  # per node dict p->exp\n\nfor p in primes_used:\n    adj = defaultdict(list)\n    for u,v,C in prime_adj[p]:\n        adj[u].append((v,C))\n        adj[v].append((u,C))\n    visited = {}\n    for node in adj.keys():\n        if node in visited:\n            continue\n        # BFS to set s[node], off[node] so E[node] = s*X + off\n        queue = deque([node])\n        s = {node:1}\n        off = {node:0}\n        visited_local = set([node])\n        x_fixed = None\n        possible = True\n        while queue and possible:\n            u = queue.popleft()\n            for v,C in adj[u]:\n                # E[v] = C - E[u] = -s[u]*X + (C - off[u])\n                sv = -s[u]\n                offv = C - off[u]\n                if v not in s:\n                    s[v]=sv; off[v]=offv\n                    visited_local.add(v)\n                    queue.append(v)\n                else:\n                    # check consistency: s[v]*X + off[v] == sv*X + offv\n                    if s[v]==sv:\n                        if off[v] != offv:\n                            possible = False\n                            break\n                    else:\n                        # s[v] == -sv. So 2*s[v]*X = offv - off[v]\n                        denom = 2*s[v]\n                        num = offv - off[v]\n                        # X must be integer: num divisible by denom\n                        if denom == 0:\n                            if num != 0:\n                                possible = False\n                                break\n                        else:\n                            if num % denom != 0:\n                                possible = False\n                                break\n                            val = num//denom\n                            if x_fixed is None:\n                                x_fixed = val\n                            else:\n                                if x_fixed != val:\n                                    possible = False\n                                    break\n            # end for neighbors\n        if not possible:\n            print(\"NO\")\n            sys.exit(0)\n        # After traversing component, determine X if not fixed: choose integer so that all E >= 0\n        # For nodes in component compute E = s*x + off\n        comp_nodes = list(visited_local)\n        if x_fixed is None:\n            # need choose x so that for all nodes E>=0 and integer\n            lo = -10**30\n            hi = 10**30\n            for u in comp_nodes:\n                if s[u]==1:\n                    # x >= -off[u]\n                    lo = max(lo, -off[u])\n                else:\n                    # -x + off[u] >=0 -> x <= off[u]\n                    hi = min(hi, off[u])\n            if lo > hi:\n                print(\"NO\")\n                sys.exit(0)\n            x_fixed = lo  # choose minimal to keep numbers small\n        # compute exponents and check nonnegative\n        for u in comp_nodes:\n            E = s[u]*x_fixed + off[u]\n            if E < 0:\n                print(\"NO\")\n                sys.exit(0)\n            exponents[u][p] = E\n        # mark visited\n        for u in comp_nodes:\n            visited[u]=True\n\n# For nodes that had no edges with a prime, exponent default 0\n# Now compute a[i] as product over primes p of p^{exponents[i][p]}\n# But we must ensure edges satisfy given gcd and lcm: compute and verify\nimport math\na = [1]*n\nLIMIT = 10**18\nfor i in range(n):\n    val = 1\n    for p,exp in exponents[i].items():\n        for _ in range(exp):\n            val *= p\n            if val > LIMIT:\n                break\n        if val > LIMIT:\n            break\n    a[i]=val\n# However exponents so far are total exponents for primes. Need to ensure they incorporate base ag from edges where ak=0 etc.\n# The equations ensured E are full exponents.\n# Verify edges\nfor u,v,g,l in edges:\n    gu = math.gcd(a[u], a[v])\n    lu = (a[u]//gu)*a[v] if gu!=0 else 0\n    if gu != g or lu != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in a))",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque, defaultdict\n\nMAXV = 10**6\n\ndef sieve_spf(n):\n    spf = list(range(n+1))\n    for i in range(2, int(n**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i, n+1, i):\n                if spf[j]==j:\n                    spf[j]=i\n    return spf\n\nspf = sieve_spf(MAXV)\n\ndef factorize(x):\n    res = {}\n    while x>1:\n        p = spf[x]\n        cnt = 0\n        while x%p==0:\n            x//=p\n            cnt+=1\n        res[p]=cnt\n    return res\n\ndata = sys.stdin.read().strip().split()\nif not data:\n    sys.exit(0)\nit = iter(data)\nn = int(next(it)); m = int(next(it))\nedges = []\nfor _ in range(m):\n    u = int(next(it))-1\n    v = int(next(it))-1\n    g = int(next(it))\n    l = int(next(it))\n    edges.append((u,v,g,l))\n\n# quick check l % g == 0\nfor u,v,g,l in edges:\n    if l % g != 0:\n        print(\"NO\")\n        sys.exit(0)\n\n# For each prime, build adjacency with constraints: for edge u-v,\n# Let ag = exponent of p in g, al = exponent in l, ak = al - ag >=0\n# Constraint: E[u] + E[v] = 2*ag + ak  (where E are exponents in a[.] for prime p)\nprime_adj = defaultdict(list)  # p -> list of (u,v, C)\nprimes_used = set()\nfor idx,(u,v,g,l) in enumerate(edges):\n    fg = factorize(g)\n    fl = factorize(l)\n    # unify primes from g or l\n    ps = set(fg.keys()) | set(fl.keys())\n    for p in ps:\n        ag = fg.get(p,0)\n        al = fl.get(p,0)\n        ak = al - ag\n        if ak < 0:\n            print(\"NO\")\n            sys.exit(0)\n        C = 2*ag + ak\n        prime_adj[p].append((u,v,C))\n        primes_used.add(p)\n\n# For each prime, solve linear system on graph components\nexponents = [defaultdict(int) for _ in range(n)]  # per node dict p->exp\n\nfor p in primes_used:\n    adj = defaultdict(list)\n    for u,v,C in prime_adj[p]:\n        adj[u].append((v,C))\n        adj[v].append((u,C))\n    visited = {}\n    for node in adj.keys():\n        if node in visited:\n            continue\n        # BFS to set s[node], off[node] so E[node] = s*X + off\n        queue = deque([node])\n        s = {node:1}\n        off = {node:0}\n        visited_local = set([node])\n        x_fixed = None\n        possible = True\n        while queue and possible:\n            u = queue.popleft()\n            for v,C in adj[u]:\n                # E[v] = C - E[u] = -s[u]*X + (C - off[u])\n                sv = -s[u]\n                offv = C - off[u]\n                if v not in s:\n                    s[v]=sv; off[v]=offv\n                    visited_local.add(v)\n                    queue.append(v)\n                else:\n                    # check consistency: s[v]*X + off[v] == sv*X + offv\n                    if s[v]==sv:\n                        if off[v] != offv:\n                            possible = False\n                            break\n                    else:\n                        # s[v] == -sv. So 2*s[v]*X = offv - off[v]\n                        denom = 2*s[v]\n                        num = offv - off[v]\n                        # X must be integer: num divisible by denom\n                        if denom == 0:\n                            if num != 0:\n                                possible = False\n                                break\n                        else:\n                            if num % denom != 0:\n                                possible = False\n                                break\n                            val = num//denom\n                            if x_fixed is None:\n                                x_fixed = val\n                            else:\n                                if x_fixed != val:\n                                    possible = False\n                                    break\n            # end for neighbors\n        if not possible:\n            print(\"NO\")\n            sys.exit(0)\n        # After traversing component, determine X if not fixed: choose integer so that all E >= 0\n        # For nodes in component compute E = s*x + off\n        comp_nodes = list(visited_local)\n        if x_fixed is None:\n            # need choose x so that for all nodes E>=0 and integer\n            lo = -10**30\n            hi = 10**30\n            for u in comp_nodes:\n                if s[u]==1:\n                    # x >= -off[u]\n                    lo = max(lo, -off[u])\n                else:\n                    # -x + off[u] >=0 -> x <= off[u]\n                    hi = min(hi, off[u])\n            if lo > hi:\n                print(\"NO\")\n                sys.exit(0)\n            x_fixed = lo  # choose minimal to keep numbers small\n        # compute exponents and check nonnegative\n        for u in comp_nodes:\n            E = s[u]*x_fixed + off[u]\n            if E < 0:\n                print(\"NO\")\n                sys.exit(0)\n            exponents[u][p] = E\n        # mark visited\n        for u in comp_nodes:\n            visited[u]=True\n\n# For nodes that had no edges with a prime, exponent default 0\n# Now compute a[i] as product over primes p of p^{exponents[i][p]}\n# But we must ensure edges satisfy given gcd and lcm: compute and verify\nimport math\na = [1]*n\nLIMIT = 10**18\nfor i in range(n):\n    val = 1\n    for p,exp in exponents[i].items():\n        for _ in range(exp):\n            val *= p\n            if val > LIMIT:\n                break\n        if val > LIMIT:\n            break\n    a[i]=val\n# However exponents so far are total exponents for primes. Need to ensure they incorporate base ag from edges where ak=0 etc.\n# The equations ensured E are full exponents.\n# Verify edges\nfor u,v,g,l in edges:\n    gu = math.gcd(a[u], a[v])\n    lu = (a[u]//gu)*a[v] if gu!=0 else 0\n    if gu != g or lu != l:\n        print(\"NO\")\n        sys.exit(0)\n\nprint(\"YES\")\nprint(\" \".join(str(x) for x in a))",
    "score": 0,
    "metadata": {
        "prompt_token_count": 537,
        "completion_token_count": 4409,
        "thoughts_token_count": 2944
    }
}