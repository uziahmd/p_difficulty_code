{
    "start": 1758293085.9521701,
    "end": 1758293169.7556021,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:46 KST",
    "gpu": 2,
    "pid": 28,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vasily the Bear and Beautiful Strings\n\nVasily the Bear loves beautiful strings. String s is beautiful if it meets the following criteria:   String s only consists of characters 0 and 1, at that character 0 must occur in string s exactly n times, and character 1 must occur exactly m times.  We can obtain character g from string s with some (possibly, zero) number of modifications. The character g equals either zero or one. A modification of string with length at least two is the following operation: we replace two last characters from the string by exactly one other character. This character equals one if it replaces two zeros, otherwise it equals zero. For example, one modification transforms string \"01010\" into string \"0100\", two modifications transform it to \"011\". It is forbidden to modify a string with length less than two.Help the Bear, count the number of beautiful strings. As the number of beautiful strings can be rather large, print the remainder after dividing the number by 1000000007 (109 + 7). \n\n## Input\nThe first line of the input contains three space-separated integers n, m, g (0 ≤ n, m ≤ 105, n + m ≥ 1, 0 ≤ g ≤ 1).\n\n## Output\nPrint a single integer — the answer to the problem modulo 1000000007 (109 + 7).\n\n## Example\n### Input\n['1 1 0', '2 2 0', '1 1 1']\n\n### Output\n['2', '4', '0']\n\n## Note\nIn the first sample the beautiful strings are: \"01\", \"10\".In the second sample the beautiful strings are: \"0011\", \"1001\", \"1010\", \"1100\".In the third sample there are no beautiful strings.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    total_length_after_modifications = total_length - (total_length - 2) // 1  # Not needed, just for understanding\n    \n    # We need to count the number of beautiful strings that can be reduced to g\n    # The final string after all possible modifications must have length 1 and be equal to g\n    \n    # Let's find how many ways we can arrange n zeros and m ones such that the final character is g\n    \n    # Total number of beautiful strings: C(n + m, n)\n    total_beautiful_strings = comb(n + m, n)\n    \n    # Now, we need to count how many of these strings reduce to g\n    # For a string to reduce to g, the number of 0s and 1s must satisfy certain parity conditions\n    \n    # The number of operations needed to reduce the string to length 1 is (n + m - 1)\n    # Each operation reduces the length by 1\n    # So the parity of the number of 0s and 1s determines the final character\n    \n    # Let's think about the parity of the number of 0s and 1s\n    # The final character depends on the parity of the number of 0s and 1s in the original string\n    # Because each operation replaces two characters with one, the parity of the count of 0s and 1s affects the final result\n    \n    # The final character is determined by the parity of the number of 0s and 1s\n    # If the number of 0s is even, then the final character is 0\n    # If the number of 0s is odd, then the final character is 1\n    # Wait, no. Let's think again\n    \n    # Let's simulate the process of reducing the string to a single character\n    # Each operation replaces two characters with one, which is either 0 or 1 based on the pair\n    # So the final character depends on the parity of the number of 0s and 1s in the original string\n    \n    # The final character is determined by the parity of the number of 0s\n    # Because every time you combine two characters, you are effectively summing them modulo 2\n    # So the final character is the parity of the number of 0s in the original string\n    \n    # So the final character is (number of 0s) % 2 == 0 ? 0 : 1\n    \n    # Therefore, the number of beautiful strings that reduce to g is:\n    # if g == 0: number of strings with even number of 0s\n    # if g == 1: number of strings with odd number of 0s\n    \n    # Number of strings with even number of 0s = sum_{k even} C(n + m, k)\n    # Number of strings with odd number of 0s = sum_{k odd} C(n + m, k)\n    \n    # But since the total number of beautiful strings is C(n + m, n), and the number of 0s is fixed as n,\n    # the number of beautiful strings that reduce to g is:\n    # if g == 0: 1 if n % 2 == 0 else 0\n    # if g == 1: 1 if n % 2 == 1 else 0\n    \n    # Wait, this is not correct. Because the number of 0s is fixed as n, so the parity of the number of 0s is fixed.\n    \n    # So the final character is fixed based on n % 2\n    \n    # Therefore, the answer is:\n    # if g == (n % 2): total_beautiful_strings\n    # else: 0\n    \n    if g == (n % 2):\n        print(total_beautiful_strings % MOD)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\nMOD = 10**9 + 7\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, m, g = map(int, input().split())\n    \n    total_length = n + m\n    total_length_after_modifications = total_length - (total_length - 2) // 1  # Not needed, just for understanding\n    \n    # We need to count the number of beautiful strings that can be reduced to g\n    # The final string after all possible modifications must have length 1 and be equal to g\n    \n    # Let's find how many ways we can arrange n zeros and m ones such that the final character is g\n    \n    # Total number of beautiful strings: C(n + m, n)\n    total_beautiful_strings = comb(n + m, n)\n    \n    # Now, we need to count how many of these strings reduce to g\n    # For a string to reduce to g, the number of 0s and 1s must satisfy certain parity conditions\n    \n    # The number of operations needed to reduce the string to length 1 is (n + m - 1)\n    # Each operation reduces the length by 1\n    # So the parity of the number of 0s and 1s determines the final character\n    \n    # Let's think about the parity of the number of 0s and 1s\n    # The final character depends on the parity of the number of 0s and 1s in the original string\n    # Because each operation replaces two characters with one, the parity of the count of 0s and 1s affects the final result\n    \n    # The final character is determined by the parity of the number of 0s and 1s\n    # If the number of 0s is even, then the final character is 0\n    # If the number of 0s is odd, then the final character is 1\n    # Wait, no. Let's think again\n    \n    # Let's simulate the process of reducing the string to a single character\n    # Each operation replaces two characters with one, which is either 0 or 1 based on the pair\n    # So the final character depends on the parity of the number of 0s and 1s in the original string\n    \n    # The final character is determined by the parity of the number of 0s\n    # Because every time you combine two characters, you are effectively summing them modulo 2\n    # So the final character is the parity of the number of 0s in the original string\n    \n    # So the final character is (number of 0s) % 2 == 0 ? 0 : 1\n    \n    # Therefore, the number of beautiful strings that reduce to g is:\n    # if g == 0: number of strings with even number of 0s\n    # if g == 1: number of strings with odd number of 0s\n    \n    # Number of strings with even number of 0s = sum_{k even} C(n + m, k)\n    # Number of strings with odd number of 0s = sum_{k odd} C(n + m, k)\n    \n    # But since the total number of beautiful strings is C(n + m, n), and the number of 0s is fixed as n,\n    # the number of beautiful strings that reduce to g is:\n    # if g == 0: 1 if n % 2 == 0 else 0\n    # if g == 1: 1 if n % 2 == 1 else 0\n    \n    # Wait, this is not correct. Because the number of 0s is fixed as n, so the parity of the number of 0s is fixed.\n    \n    # So the final character is fixed based on n % 2\n    \n    # Therefore, the answer is:\n    # if g == (n % 2): total_beautiful_strings\n    # else: 0\n    \n    if g == (n % 2):\n        print(total_beautiful_strings % MOD)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 541,
        "completion_token_count": 917,
        "thoughts_token_count": 0
    }
}