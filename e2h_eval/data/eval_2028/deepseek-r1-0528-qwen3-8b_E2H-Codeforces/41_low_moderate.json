{
    "start": 1758294359.317965,
    "end": 1758294611.1752994,
    "start-formatted": "2025-09-20 00:05 KST",
    "end-formatted": "2025-09-20 00:10 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\n Since n, m, h are at most 50, we can use dynamic programming or try to assign heights with constraints.\n However, the restrictions are given as intervals and require that the maximum height in a given interval is at most x_i.\n\n Idea:\n We note that the profit is the sum of squares. The square function is convex, so we might want to set each house as high as possible (to get high square) but subject to the restrictions.\n\n But the restrictions are multiple and overlapping. We can think of the following:\n\n Since the number of spots is small (n <= 50), and the maximum height is also small (h <= 50) and the number of restrictions is at most 50, we can try to use DP that considers the restrictions and the positions.\n\n Alternatively, we can use an approach where we consider the restrictions and then for each spot, the maximum height we can assign is the minimum of:\n   - h (the overall maximum)\n   - the restrictions that cover this spot.\n\n However, note: a restriction says \"the tallest house in [l_i, r_i] must be at most x_i\". So if we set a house to a certain height, then all restrictions that include that house must have x_i at least as large as that height. But more importantly, the entire interval must not exceed the restriction's x_i.\n\n We can precompute for each spot i, the minimum allowed maximum value in the intervals that cover it? Actually, no. The restriction forces that the entire interval cannot exceed x_i. Therefore, the height of a house in an interval must be <= x_i, and the maximum in the interval must be <= x_i.\n\n Another idea: since n is only 50, we can try to use state space of the form (position, current maximum so far, and which restrictions are satisfied?) but the restrictions are up to 50 and the intervals are arbitrary.\n\n Alternatively, we can use a constraint satisfaction approach by first merging all the restrictions and then for each spot, we know that the height must be <= the minimum x_i of all restrictions that cover this spot? Not exactly: because one restriction might cover multiple spots and we need to ensure that within each interval the maximum is <= x_i.\n\n However, note: if we set a house at position i to height y, then every restriction that covers i must have x_j >= y. Moreover, for a restriction j (from l_j to r_j) we must have that the maximum house in [l_j, r_j] is <= x_j.\n\n How about: for each spot i, let max_i = min{ h, min_{for all restrictions j that cover i} x_j }? \n But wait: that would set the height at i to at most that value. However, consider two restrictions: one covering [1,3] with x=2, and one covering [1,2] with x=1. Then for spot 2: the two restrictions give max_i = min(h, 1, 2) = 1. However, the restriction [1,3] requires that the entire [1,3] has maximum 2, but the restriction [1,2] requires the entire [1,2] to be at most 1. So the house at 2 must be at most 1. Similarly, the house at 3 must be at most 2, but note that if we set house 3 to 2, then the restriction [1,3] is satisfied (because the maximum in [1,3] is max(?,1,2)=2<=2) but the restriction [1,2] is independent.\n\n However, what if we set house 1 to 1, house 2 to 1, house 3 to 2: then [1,3] has maximum 2 -> okay, [1,2] has maximum 1 -> okay.\n\n But what if we set house 3 to 1? Then [1,3] has maximum 1, which is <=2, and [1,2] is 1, okay. However, is setting house 3 to 2 better? It gives 2^2 vs 1^2, so 4 vs 1: so we prefer 2.\n\n However, note that the above naive assignment for each spot independently (by taking the minimum x_j of all restrictions that cover the spot) does not necessarily work because:\n\n Example: \n   Restrictions: \n      [1,2] with x=1, [2,3] with x=2, and [1,3] with x=1.\n   Then for spot 2: the restrictions are [1,2] (x=1), [2,3] (x=2), [1,3] (x=1). So we set spot2 to at most 1.\n   For spot 1: only [1,2]",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to various zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. Each house can have a height between 0 and a given maximum height \\( h \\), and each restriction limits the tallest house in a specified range to a certain height.\n\n### Approach\n1. **Problem Analysis**: The key observation here is that each house's height must comply with all restrictions that include its position. For each spot \\( i \\), the maximum allowable height is determined by the minimum value among all restrictions that cover \\( i \\) and the global maximum height \\( h \\). However, simply setting each house's height to the minimum of these values might not always yield the optimal solution because the restrictions are interdependent across ranges.\n\n2. **Insight**: The optimal solution involves setting each house's height to the highest possible value that satisfies all restrictions covering it. Since the profit function (sum of squares) is convex, higher heights contribute more to the profit. Therefore, for each spot, we should set the height as high as possible without violating any restriction.\n\n3. **Algorithm Selection**: Given the constraints (n, m, h ≤ 50), a brute-force approach is feasible. We first determine for each spot the minimum allowable height based on all overlapping restrictions. Then, we compute the maximum height each house can have by considering all restrictions. The actual height for each house is the minimum of this computed maximum and the global maximum height \\( h \\).\n\n4. **Complexity Analysis**: The algorithm processes each spot and each restriction once, leading to a time complexity of \\( O(n \\times m) \\), which is efficient given the problem constraints.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h_global = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    max_heights = [h_global] * (n + 1)\n    \n    for l, r, x_val in restrictions:\n        for i in range(l, r + 1):\n            if x_val < max_heights[i]:\n                max_heights[i] = x_val\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        height = min(max_heights[i], h_global)\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, parsing the number of spots \\( n \\), the global maximum height \\( h \\), and the number of restrictions \\( m \\). Each restriction is stored as a tuple of integers representing the left and right bounds of the range and the maximum allowed height in that range.\n\n2. **Determining Maximum Heights**: For each spot, we initialize its maximum allowable height to the global maximum \\( h \\). Then, for each restriction, we update the maximum height for all spots within the restriction's range to the minimum of their current maximum and the restriction's height limit.\n\n3. **Calculating Profit**: For each spot, the actual height is set to the minimum of its computed maximum height and the global maximum \\( h \\). The profit is then the sum of the squares of these heights.\n\nThis approach efficiently ensures that all zoning restrictions are satisfied while maximizing the profit by leveraging the convex nature of the profit function, which benefits from higher house heights where possible.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h_global = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    max_heights = [h_global] * (n + 1)\n    \n    for l, r, x_val in restrictions:\n        for i in range(l, r + 1):\n            if x_val < max_heights[i]:\n                max_heights[i] = x_val\n    \n    total_profit = 0\n    for i in range(1, n + 1):\n        height = min(max_heights[i], h_global)\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == '__main__':\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 823,
        "completion_token_count": 799,
        "thoughts_token_count": 1023
    }
}