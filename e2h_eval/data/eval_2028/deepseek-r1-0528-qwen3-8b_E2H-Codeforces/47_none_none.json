{
    "start": 1758293049.5347855,
    "end": 1758293119.44818,
    "start-formatted": "2025-09-19 23:44 KST",
    "end-formatted": "2025-09-19 23:45 KST",
    "gpu": 2,
    "pid": 47,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Neko does Maths\n\nNeko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.Neko has two integers $$$a$$$ and $$$b$$$. His goal is to find a non-negative integer $$$k$$$ such that the least common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible. If there are multiple optimal integers $$$k$$$, he needs to choose the smallest one.Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n## Input\nThe only line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).\n\n## Output\nPrint the smallest non-negative integer $$$k$$$ ($$$k \\ge 0$$$) such that the lowest common multiple of $$$a+k$$$ and $$$b+k$$$ is the smallest possible.If there are many possible integers $$$k$$$ giving the same value of the least common multiple, print the smallest one.\n\n## Example\n### Input\n['6 10', '21 31', '5 10']\n\n### Output\n['2', '9', '0']\n\n## Note\nIn the first test, one should choose $$$k = 2$$$, as the least common multiple of $$$6 + 2$$$ and $$$10 + 2$$$ is $$$24$$$, which is the smallest least common multiple possible.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport math\n\ndef find_optimal_k(a, b):\n    if a == b:\n        return 0\n    \n    g = math.gcd(a, b)\n    d = abs(a - b)\n    \n    # Find the smallest k such that (a + k) and (b + k) have the largest gcd\n    # The optimal k is (d // g - 1) if d % g != 0 else (d // g - 1)\n    # But we need to find the minimal k >= 0\n    # The minimal k is (d // g - 1) if d % g != 0 else (d // g - 1)\n    # Wait, let's re-derive this properly\n    # We want to maximize gcd(a + k, b + k) = gcd(a + k, b - a)\n    # Let's say d = b - a, then we want to maximize gcd(a + k, d)\n    # So we want to find the largest divisor of d that is >= a\n    # Then k = (divisor - a)\n    # So find the largest divisor of d that is <= a + k, which is equivalent to finding the largest divisor of d that is <= a + k\n    # Since a + k = divisor, then k = divisor - a\n    # So we need to find the largest divisor of d that is <= a\n    # Because k must be non-negative, so divisor >= a\n    # So find the largest divisor of d that is >= a and <= a + k\n    # Which is equivalent to finding the largest divisor of d that is >= a\n    # If no such divisor exists, then the best is to choose the largest divisor of d less than a\n    # Then k = (largest divisor of d less than a) - a\n    # But this seems complicated. Let's use a better approach.\n\n    # We want to find the largest divisor of d that is >= a\n    # If such a divisor exists, then k = divisor - a\n    # Else, find the largest divisor of d less than a, then k = divisor - a\n    # But since k must be non-negative, divisor >= a is better\n\n    # Try to find the largest divisor of d that is >= a\n    # Start from the minimum of d and a, and go down\n    for i in range(min(d, a), 0, -1):\n        if d % i == 0:\n            if i >= a:\n                return i - a\n    # If not found, try to find the largest divisor of d that is < a\n    for i in range(min(d, a), 0, -1):\n        if d % i == 0:\n            if i < a:\n                return i - a\n    return 0\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    print(find_optimal_k(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport math\n\ndef find_optimal_k(a, b):\n    if a == b:\n        return 0\n    \n    g = math.gcd(a, b)\n    d = abs(a - b)\n    \n    # Find the smallest k such that (a + k) and (b + k) have the largest gcd\n    # The optimal k is (d // g - 1) if d % g != 0 else (d // g - 1)\n    # But we need to find the minimal k >= 0\n    # The minimal k is (d // g - 1) if d % g != 0 else (d // g - 1)\n    # Wait, let's re-derive this properly\n    # We want to maximize gcd(a + k, b + k) = gcd(a + k, b - a)\n    # Let's say d = b - a, then we want to maximize gcd(a + k, d)\n    # So we want to find the largest divisor of d that is >= a\n    # Then k = (divisor - a)\n    # So find the largest divisor of d that is <= a + k, which is equivalent to finding the largest divisor of d that is <= a + k\n    # Since a + k = divisor, then k = divisor - a\n    # So we need to find the largest divisor of d that is <= a\n    # Because k must be non-negative, so divisor >= a\n    # So find the largest divisor of d that is >= a and <= a + k\n    # Which is equivalent to finding the largest divisor of d that is >= a\n    # If no such divisor exists, then the best is to choose the largest divisor of d less than a\n    # Then k = (largest divisor of d less than a) - a\n    # But this seems complicated. Let's use a better approach.\n\n    # We want to find the largest divisor of d that is >= a\n    # If such a divisor exists, then k = divisor - a\n    # Else, find the largest divisor of d less than a, then k = divisor - a\n    # But since k must be non-negative, divisor >= a is better\n\n    # Try to find the largest divisor of d that is >= a\n    # Start from the minimum of d and a, and go down\n    for i in range(min(d, a), 0, -1):\n        if d % i == 0:\n            if i >= a:\n                return i - a\n    # If not found, try to find the largest divisor of d that is < a\n    for i in range(min(d, a), 0, -1):\n        if d % i == 0:\n            if i < a:\n                return i - a\n    return 0\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    print(find_optimal_k(a, b))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 397,
        "completion_token_count": 641,
        "thoughts_token_count": 0
    }
}