{
    "start": 1758300913.3104,
    "end": 1758304775.7453907,
    "start-formatted": "2025-09-20 01:55 KST",
    "end-formatted": "2025-09-20 02:59 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a moderately difficult question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to the graph to form an odd cycle, and the number of ways w (without creating loops or parallel edges) to do so.\n\n Observing that:\n  - An odd cycle must have at least 3 edges (a triangle is the smallest odd cycle, with length 3).\n\n Steps:\n\n 1. If the graph already contains an odd-length cycle, then t=0 and w=1? But note: the problem says \"form a simple cycle of odd length\", meaning we don't need to add any edge if one exists. However, note that the problem says \"the minimum number of edges that must be added\". So if there is already an odd cycle, then we don't need to add any edge.\n\n 2. But wait: the problem says \"more than one vertex\" and \"simple cycle\", so odd cycles of length>=3.\n\n However, note the example: \n   Input: '3 3\\n1 2\\n2 3\\n3 1' -> Output: '0 1'\n   This is a triangle (odd cycle) so no edge needs to be added.\n\n 3. The other example: \n      Input: '4 4\\n1 2\\n1 3\\n4 2\\n4 3' \n      Output: '1 2'\n\n What is the graph? It has 4 vertices and edges: 1-2, 1-3, 4-2, 4-3. This is two triangles sharing the diagonal? Actually, it's a complete bipartite graph K_{2,2}? \n   Actually, the graph is two triangles: \n        Triangle 1: 1-2-4-1 (edges: 1-2, 2-4, 4-1) -> but wait, we don't have 1-4? \n        Let me draw: \n          Vertices: 1,2,3,4.\n          Edges: 1-2, 1-3, 4-2, 4-3.\n        This graph does not contain an odd cycle? Because it's bipartite? \n        We can color: \n          1: red, 2: blue, 3: red, 4: blue.\n        Then edges: red-blue, red-blue, blue-red, blue-red. \n        So yes, it is bipartite. \n\n        How can we form an odd cycle by adding one edge? \n        If we add an edge from 1 to 4, then we get a cycle 1-2-4-1 (which is of length 3, odd). Similarly, if we add an edge from 2 to 3, then we get a cycle 2-1-3-2 (length 3, odd). \n        So there are two ways.\n\n        Therefore, t=1, w=2.\n\n 4. Another example: \n        Input: '3 0' -> Output: '3 1'\n\n        Why? We have 3 isolated vertices. We need to form an odd cycle (at least a triangle). \n        To form a triangle, we need to add 3 edges. There is only one way: add all three edges between the three vertices.\n\n        However, note: the problem says \"minimum number of edges\". We cannot form a cycle of length 3 with fewer than 3 edges.\n\n 5. What about even cycles? They are not considered because we require odd.\n\n Approach:\n\n We have two main cases:\n\n Case 1: The graph already has an odd cycle. Then t=0, w=1.\n\n Case 2: The graph does not have an odd cycle. Then we consider adding edges to form an odd cycle.\n\n But note: the graph being bipartite (if it doesn't have an odd cycle) is a necessary condition for having no odd cycles. However, note that a graph can be disconnected.\n\n However, note: if the graph is disconnected, then each connected component must be bipartite (or not) independently.\n\n But wait: the absence of odd cycles in the entire graph is equivalent to the graph being bipartite? Actually, no: a graph is bipartite if and only if it has no odd cycles. So we can check if the graph is bipartite.\n\n However, note: the problem does not require the graph to be connected. But if the graph is not connected, we can still check bipartiteness for each connected component.\n\n Steps for Case 2:\n\n  We are allowed to add edges arbitrarily (without creating parallel edges or loops). We want the minimum number of edges to add to form at least one odd cycle.\n\n  Possibilities:\n\n    Option 1: Add edges until we create an odd cycle. The minimal odd cycle is a triangle (3 edges). \n\n    How many edges are missing in the graph to form a triangle?\n\n    But note: we might form an odd cycle of length greater than 3. However, we are looking for the minimum number of edges to add.\n\n    Observation: \n        - Adding one edge might create an odd cycle? For example, in a bipartite graph, if we add an edge within the same part, then we might create an odd cycle.\n\n        Example: In a path of 2 edges (which is bipartite) adding an edge to form a triangle requires two edges? Actually, let's consider:\n\n        Consider a path: 1-2-3. \n            This is a bipartite graph (colors: 1: red, 2: blue, 3: red).\n            If we add an edge from 1 to 3, then we form a triangle (cycle 1-2-3-1) which is odd. So one edge.\n\n        But wait, we might also form a cycle of length 5 by adding two edges? However, we are interested in the minimum.\n\n        So the minimal number of edges to add is either 1 or more.\n\n    Let's break down:\n\n        - If we can form an odd cycle by adding 1 edge: then t=1. \n            Condition: There exists a pair of vertices (u, v) such that adding the edge (u,v) creates an odd cycle.\n\n            In a bipartite graph, if we add an edge (u,v) and u and v are in the same bipartite set, then any path from u to v in the bipartite graph (without using the new edge) is of even length. Then the new cycle formed by the path and the new edge would be of odd length (even + 1). \n\n            However, we must ensure that there is a path from u to v in the graph (so that the cycle is formed). \n\n        - If we cannot form an odd cycle by adding 1 edge, then we consider 2 edges.\n\n        - If we cannot form an odd cycle by adding 1 or 2 edges, then we consider 3 edges.\n\n    Note: We are to find the minimum t.\n\n    How to compute:\n\n        Step 1: Check if the graph is bipartite (each connected component is bipartite). If not, then there is an odd cycle -> t=0, w=1.\n\n        Step 2: If the graph is bipartite, then we know we are in Case 2.\n\n        Now, we consider:\n\n          t = 1: \n            We can add an edge (u, v) if u and v are in the same color (set) in their connected component, and there is a path (so they are in the same component). However, note that the graph might be disconnected. \n\n            But if we add an edge (u, v) and u and v are in the same component and same color, then the cycle will be odd.\n\n            However, what if u and v are in different components? Then adding (u, v) does not form a cycle, because we need a path from u to v. So they must be in the same component.\n\n            Therefore, for each connected component, we can count the number of pairs (u, v) (with u and v in the same color) that are not already connected by an edge.\n\n            But note: the graph initially has no multiple edges, so we just need to avoid the edges that are already present.\n\n            However, wait: the graph is bipartite, so edges only exist between different colors. Therefore, in a given connected component (bipartite), the edges are only between the two sets. So the edges within the same set do not exist.\n\n            Then, the number of ways to add one edge to form an odd cycle is the sum over all connected components of C(comp_set1,2) + C(comp_set2,2) [but wait, no: the two sets are independent. Actually, we are allowed to add any edge that connects two vertices in the same set, and these edges are not present (because the graph is bipartite and originally edges are only between sets). \n\n            However, note: we are counting the ways to add one edge that would form an odd cycle. But adding one edge (u, v) (same set) in a connected component will form an odd cycle if and only if u and v are connected by a path (which they are, because they are in the same connected component). \n\n            Therefore, for each connected component with bipartite sets (A, B):\n\n                ways1 = (|A|*(|A|-1))//2 + (|B|*(|B|-1))//2\n\n            But wait: is that correct? Actually, we are only allowed to add edges that do not already exist. And since the graph is bipartite, there are no edges within A or within B. Therefore, all pairs (u, v) in A or in B are absent. \n\n            However, note: the problem says \"It is prohibited to add loops or parallel edges\", so we are only adding non-existing edges. And we are only considering edges that are not present. Since the graph is bipartite, the edges within A and within B are absent.\n\n            But wait: what if the graph is not connected? Then we must consider each connected component separately. And the edge we add must be entirely within one connected component (since adding an edge between two components doesn't form a cycle). \n\n            Therefore, the total ways for t=1 is the sum over all connected components of (number of non-edges within the two parts). \n\n            However, note: the problem says \"minimum number of edges\", and if we can achieve the goal by adding one edge (i.e., there exists at least one edge that when added forms an odd cycle), then t=1 and w = (sum over components of (C(|A_i|,2)+C(|B_i|,2)).\n\n            But wait: what if the graph is disconnected and one connected component has both sets large enough? Then adding an edge within that component's set will form an odd cycle.\n\n            However, note: the problem says we want the minimum number of edges. So if there is at least one way to add one edge that forms an odd cycle, then t=1.\n\n            But what if the graph is bipartite and we cannot form an odd cycle by adding one edge? That is, if every connected component has no two vertices in the same set? \n\n            Actually, in a connected bipartite graph, the two sets are fixed. The sizes of the sets are fixed. The condition for forming an odd cycle by adding one edge is that the two vertices must be in the same set and in the same connected component.\n\n            However, if a connected component has at least two vertices in one set, then we can add an edge between two of them. \n\n            Therefore, if the graph is bipartite and there exists at least one connected component where one of the sets has at least two vertices, then t=1.\n\n            But note: the entire graph might be bipartite and have no edge that can be added to form an odd cycle? Actually, no: in a bipartite graph, the sets are defined. The only edges missing are the ones within the same set. And if a set has at least two vertices, then we can add an edge between two of them and create an odd cycle.\n\n            Therefore, if there is at least one connected component with a set of size>=2, then we can form an odd cycle by adding one edge.\n\n            However, what if the graph is bipartite and every connected component is a singleton? Then no edge can be added within the same set (because |A|=1, |B|=1) -> no two vertices in the same set. Then we cannot form an odd cycle by adding one edge.\n\n            Then we move to t=2.\n\n        Now, what is the minimal way to form an odd cycle by adding two edges?\n\n        We can think of two possibilities:\n\n          Possibility 1: Two edges added in the same connected component? \n\n          Possibility 2: Two edges added connecting two different connected components?\n\n        However, note: we are forming a cycle. The cycle must be connected. \n\n        Example: Consider two disjoint edges (a matching) of two edges. Then the graph is bipartite and each connected component is an edge (two vertices). \n\n        Now, how to form an odd cycle by adding two edges?\n\n        We can try:\n\n          Option A: Create a triangle entirely in one connected component? But one connected component is two vertices, so we can't form a triangle (needs three). \n\n          Option B: Use two connected components.\n\n          Example: Suppose we have two connected components, each being an edge (so two edges, four vertices). Then we can connect them by two edges to form a triangle? \n\n          Actually, let the two components be:\n            Component1: {1,2} with edge (1,2)\n            Component2: {3,4} with edge (3,4)\n\n          We can add edges (1,3) and (1,4). Then we have a cycle: 1-2-? Actually, we don't have a direct cycle including 1,2,3,4. \n\n          Alternatively, we can form a cycle of length 5? \n\n          Actually, to form an odd cycle, we need at least 3 edges. \n\n          Consider: \n            Component1: {1,2} and Component2: {3,4}. \n            We can add edges (1,3) and (3,2). Then we have a cycle: 1-2-3-1? \n            But wait, we don't have the edge 2-3 or 1-3? Actually, we added (1,3) and (3,2). Then the cycle is 1-3-2-1, which is a triangle (odd). \n\n          But note: the edge (2,3) was not originally present. We added two edges: (1,3) and (3,2). \n\n          However, we can also form an odd cycle by adding two edges in a single connected component? \n\n          Example: Consider a connected bipartite graph with two sets A and B, and |A|>=3 and |B|>=1. Then we can pick two vertices in A and one vertex in B. We can add two edges: one from the two chosen vertices in A to the one vertex in B, but that would form a triangle? \n\n          Actually, if we have a vertex v in B and two vertices u1, u2 in A, then if we add edges (u1, v) and (u2, v), then we have a triangle: u1 - v - u2 - ... but we don't necessarily have an edge between u1 and u2. \n\n          However, note: the original graph has the edges between A and B, but not necessarily between u1 and u2. So the cycle u1 - v - u2 - u1 (if we have the edge u1-u2) would be a triangle. But we didn't add u1-u2. \n\n          Alternatively, we can use existing edges. Suppose the graph is a star: center c (in B) and leaves a1, a2, a3 (in A). Then we can add edges between two leaves (say a1 and a2). Then we have a cycle: a1 - c - a2 - a1 (if we added a1-a2). But wait, the edge a1-c and a2-c are present, and then the cycle is a1-c-a2-a1. The length is 3, which is odd. \n\n          So actually, in a connected bipartite graph, we can form an odd cycle by adding one edge (if there are two vertices in the same set) OR if we don't have two vertices in the same set, then we cannot form an odd cycle by one edge.\n\n          But wait, the above example: the star is connected and bipartite. The set A has three leaves (so >=2). So we can form an odd cycle by adding one edge (between two leaves). \n\n          Therefore, the condition for t=1 is that there exists at least one connected component that has a set of size>=2.\n\n          Now, what if no connected component has a set of size>=2? Then the graph is bipartite and each connected component is a single edge (so two sets of size 1) or a single vertex (one set of size 1). \n\n          Example: the graph with three isolated vertices (n=3, m=0). Then each component is a single vertex. Then we cannot form an odd cycle by adding one edge (we would need to add an edge, but then we have two edges to form a triangle). \n\n          Now, we need to consider t=2 and t=3.\n\n        How about t=2?\n\n          We can form an odd cycle by adding two edges in two different ways:\n\n          Way 1: In a single connected component? \n            But if the connected component is bipartite and has no two vertices in the same set (so each set has at most one vertex, meaning the component is either a single vertex or a single edge), then we cannot form an odd cycle by adding two edges in the same component? \n\n            Example: two isolated vertices (component of size 2). Then we can add two edges: but wait, we can only add one edge (connecting them) and that doesn't form a cycle. Then we need to add a third edge to form a triangle.\n\n            Actually, to form a cycle, we need at least three edges.\n\n            Alternatively, we can use two connected components.\n\n          Way 2: Across two connected components.\n\n          Example: two connected components, each being an edge (so two edges, four vertices). Then we can connect the two edges to form a cycle of length 3 by adding two edges? \n\n          Actually, as shown earlier: we can form a triangle by adding two edges. \n\n          How? \n            Component1: {a,b} (edge a-b)\n            Component2: {c,d} (edge c-d)\n\n          We can add edges (a,c) and (b,d). Then we don't get a cycle. \n\n          Alternatively, we can add (a,c) and (a,d). Then we have a cycle: a-c-d-a? But wait, we don't have the edge d-a? We added a-d. Then the cycle is a-c-d-a: edges (a-c, c-d, d-a). The length is 3 (odd). \n\n          However, we must ensure that the two edges we add are sufficient to form a cycle. \n\n          Conditions for two edges:\n\n            We need to form a cycle of odd length. The cycle must include at least three edges. \n\n            The two edges we add must connect two distinct connected components (because if we add two edges within the same component, then the component must have been bipartite and we would have to form an odd cycle by combining two edges with existing ones, but note: the component is bipartite and we cannot change the bipartition).\n\n          Actually, consider:\n\n            We have two connected components, both bipartite. We add two edges. \n\n            How can two edges form an odd cycle? \n\n            The cycle must use the two added edges and some existing edges. \n\n            Example: \n                Component1: {a,b} (edge a-b)\n                Component2: {c,d} (edge c-d)\n\n            Adding edges (a,c) and (a,d) gives the cycle a-c-d-a (using edges a-c, c-d, d-a). The edge c-d is from the original component2, and the two added edges are a-c and a-d.\n\n            The length is 3, which is odd.\n\n            Now, what conditions must hold for this to work?\n\n            - The two edges must be incident to the same vertex (a) from the first component and connect to two distinct vertices (c and d) in the second component.\n\n            But note: we could also use two edges from a vertex in the first component to two vertices in the second component, and then the cycle is formed by the two edges and the edge in the second component connecting the two vertices in the second component? \n\n            However, the second component must have an edge between c and d. What if the second component is two isolated vertices (so no edge)? \n\n            Then we cannot use the edge c-d. \n\n            Then we would need to form the cycle differently. \n\n            Example: two isolated vertices in the second component (so no edge). Then we cannot form a cycle by just the two edges (a-c) and (a-d) because we don't have an edge from c to d. \n\n            Then the cycle would have to use edges from the first component? \n\n            We have the first component: {a,b} (edge a-b). Then the cycle: a-b-? \n\n            Actually, we can form a cycle by: \n                a -> b (from component1) and then from a to c and a to d, but then we don't have an edge from b to c or d. \n\n            Alternatively, we can use two edges to connect the two components and then use the existing structure to form a cycle.\n\n            Let me consider:\n\n                Component1: {a,b} (edge a-b)\n                Component2: {c} (single vertex)\n\n            Then we add two edges: (a,c) and (b,c). Then we have a cycle: a-b-c-a. The length is 3, odd.\n\n            So conditions for two edges:\n\n              We can form an odd cycle by adding two edges if we can find two vertices in the same connected component (say component i) and two vertices in another connected component (say component j) such that the two edges we add connect the two vertices from component i to the two vertices from component j (or one vertex from i to two vertices from j, etc.)?\n\n            Actually, the minimal odd cycle we form must have exactly three edges. So the two edges we add and one existing edge (or two edges from the two components) must form a triangle.\n\n            The triangle can be formed in two ways:\n\n              Type 1: The two edges we add and one edge from one of the components (either from the first or the second) form the triangle.\n\n            Example Type 1 (as above): \n                Component1: has an edge (x,y). We add edges (x,z) and (y,z) [where z is in another component]. Then the cycle is x-y-z-x.\n\n            Example Type 2:\n                Component1: has an edge (x,y). We add edges (x,z) and (w,z) [where w is in component1 and z in component2] but then we don't have an edge between x and w (unless x=w, which is not allowed) or y and w. \n\n            Alternatively, we can use two edges from two different components to form a triangle with an edge from a third component? \n\n            Actually, we are limited to two edges. We can only use edges from the two components we are connecting and the edges we add.\n\n            So the triangle must be composed of two added edges and one edge from one of the components (either the first or the second) or two edges from the components and one added edge? \n\n            But wait, we are adding two edges. Then the cycle must have two added edges and one existing edge (from one of the two components) or one added edge and two existing edges? \n\n            However, the cycle must be closed. \n\n            Let me define:\n\n              Let the two edges we add be (u,v) and (u,w) where u is in component i and v,w are in component j. Then the cycle is u-v-...-w-u. The edge from v to w must exist? Or we can use two edges from the graph? \n\n            Actually, we can use the following:\n\n              - If we add two edges from a common vertex u (in component i) to two vertices v and w (in component j), and if there is an edge between v and w in component j, then we have a triangle: u-v-w-u.\n\n              - If we add two edges from two different vertices in component i (say u and v) to the same vertex w in component j, then we have a triangle: u-w-v-u, provided that there is an edge between u and v in component i.\n\n            Therefore, the two types:\n\n              Type 1: \n                  Choose a connected component i (with at least one edge, i.e., at least two vertices) and a connected component j (with at least one edge, i.e., at least two vertices). Then choose a vertex u in component i and two vertices v, w in component j (which must be adjacent in the original graph, i.e., there is an edge between v and w in component j). Then adding edges (u,v) and (u,w) forms an odd cycle.\n\n              Type 2:\n                  Choose two connected components i and j. Then choose two vertices u, v in component i (which must be adjacent, i.e., there is an edge between u and v in component i) and a vertex w in component j. Then adding edges (u,w) and (v,w) forms an odd cycle.\n\n            But note: the graph is bipartite, so the edges we add must not be present. And the two edges are not present because the graph is bipartite and the two components are independent.\n\n            However, what if the two edges are added within the same component? Then we must consider the bipartition. But note: we are connecting two components, so the two edges are between two different components. \n\n            Therefore, the two edges we add are between two different connected components.\n\n            Now, note: the graph is bipartite, so the entire graph is bipartite. The two components are bipartite. When we connect two components, we must respect the bipartition? Actually, no: the two components are independent. But the entire graph after adding edges must be bipartite? No, because we are adding edges arbitrarily.\n\n            However, we are only concerned with the cycle we form. \n\n            Conditions for Type 1 and Type 2:\n\n              Type 1: \n                  Component i: has an edge (x,y) [so two vertices x,y connected by an edge] and component j: has an edge (v,w) [so two vertices v,w connected by an edge]. Then we can choose u from component i (any vertex) and then we require that v and w are adjacent in component j. Then we add (u,v) and (u,w).\n\n              But note: we can choose u arbitrarily from component i. So for a fixed pair of edges (x,y) in component i and (v,w) in component j, then we can choose any vertex u in component i. However, we are free to choose any vertex in component i.\n\n              But wait: we are counting the ways to add two edges. Each way is defined by the set of edges.\n\n              Therefore, for Type 1:\n\n                  For each component i (with at least two vertices, i.e., at least one edge) and for each component j (with at least two vertices, i.e., at least one edge) and for each edge (v,w) in component j, and for each vertex u in component i, we can add the two edges (u,v) and (u,w).\n\n                  However, note: we must avoid double-counting? And also, note that the two edges (u,v) and (u,w) are uniquely defined by u, v, w.\n\n              Similarly, Type 2:\n\n                  For each component i (with at least two vertices) and for each component j (with at least two vertices) and for each edge (u,v) in component i, and for each vertex w in component j, we can add the two edges (u,w) and (v,w).\n\n            However, note: the two edges (u,v) and (u,w) are the same as (u,w) and (u,v) so we are counting the same set of edges. But wait, we are counting by the set of edges, so the set { (u,v), (u,w) } is one way.\n\n            But note: we are also allowed to use two edges that are not necessarily from the same type? \n\n            Actually, we must consider all ways to add two edges that form an odd cycle.\n\n            Also, note: we can use the same component twice? \n\n            Actually, no: the two edges must be between two different components (otherwise, if we add two edges within the same component, then we are in a different scenario). \n\n            But wait: the graph is bipartite, and we are trying to form an odd cycle. If we add two edges within the same component, then we are effectively making the graph non-bipartite. However, we are not restricted to connecting two components. \n\n            However, note: if we add two edges within the same component (which is bipartite) then we might form an odd cycle. \n\n            Example: Consider a connected bipartite graph (a tree) with two sets A and B. We add two edges (both within the same set). Then the graph becomes non-bipartite and there is an odd cycle. \n\n            But note: we are allowed to form an odd cycle by adding two edges arbitrarily. \n\n            However, the problem asks for the minimum number of edges. So if we can form an odd cycle by adding two edges, then t=2. \n\n            But wait: we already said that if there is a component with at least two vertices in the same set, then we can form an odd cycle by adding one edge. So we are now in the case where no component has two vertices in the same set. \n\n            Therefore, the graph is a collection of isolated edges and isolated vertices. \n\n            Then, we cannot form an odd cycle by adding one edge (because there's no two vertices in the same set to connect). \n\n            Then we consider two edges.\n\n            Now, in this case, the graph is a collection of edges and isolated vertices. \n\n            We have two possibilities for two edges:\n\n              Possibility 1: Both edges are added within the same component? But each component is either an edge (two vertices) or an isolated vertex. \n\n                - If we take a component that is an edge (two vertices, say a and b), then the two sets are {a} and {b}. We cannot add an edge within {a} or {b} because they are single vertices. \n\n                - If we take a component that is an isolated vertex, then we cannot add an edge within that set.\n\n              Possibility 2: The two edges are added to connect two or more components.\n\n            Therefore, the two edges must be added between different components.\n\n            Now, we break down the graph into connected components. Each component is either:\n\n                Type E: an edge (two vertices, two sets of size 1)\n                Type V: an isolated vertex (one set of size 1)\n\n            We can form an odd cycle by:\n\n              Option A: Using two edges to form a triangle that involves two different components.\n\n              Example: \n                Component1: edge (a,b)\n                Component2: isolated vertex c.\n\n                We add edges (a,c) and (b,c). Then we have a cycle: a-b-c-a. This is a triangle.\n\n              Option B: Using two edges to form a triangle that involves three different components.\n\n                Example: three isolated vertices: a, b, c.\n                We add edges (a,b), (a,c). Then we don't have a cycle because we don't have an edge from b to c. \n\n                But wait, we need to form a cycle. We have three vertices and two edges: that's a path, not a cycle.\n\n                Then we need a third edge? \n\n                Actually, the cycle must be of odd length. The smallest odd cycle is 3.\n\n                So we must form a triangle. \n\n                Therefore, we need three edges for three isolated vertices.\n\n            Therefore, for two edges, we must use existing edges (from components) and the two added edges.\n\n            Conditions:\n\n              We need to form a triangle. The triangle has three edges. \n\n              The three edges can be:\n\n                - Two edges from the graph and one added? But wait, we are adding two edges. Then the third edge must be from the graph. \n\n                But the graph edges are only within the components. \n\n                Example: two edges from the graph and two added edges? That would be four edges. \n\n                Actually, the triangle must consist of three edges. \n\n                We are allowed to add two edges. Then the triangle must have two added edges and one edge from the graph.\n\n            Then the two possibilities (Type 1 and Type 2) described above are the only ways.\n\n            Now, how to count the ways for t=2?\n\n              Type 1: \n                  Choose a component i (which has at least one edge, i.e., is an edge) and a component j (which has at least one edge, i.e., is an edge) and an edge (v,w) in component j, and a vertex u in component i.\n\n                  But wait, component j is an edge: so the edge (v,w) is the only edge in component j. Then u must be in component i (which is an edge). Then we add edges (u,v) and (u,w).\n\n                  However, note: the entire graph is bipartite, so the two components are independent. \n\n                  The two edges (u,v) and (u,w) are valid (non-existing) because u is in component i and v,w are in component j, and the graph is bipartite so no edge between components? Actually, no: the graph is not necessarily connected, so edges between components are not present.\n\n                  Then the number of ways for Type 1 for a fixed pair of components (i,j) is: \n                      Let comp_i has n_i vertices, comp_j has 2 vertices (since it's an edge). The edge (v,w) is fixed in comp_j (there is only one edge). Then we can choose any vertex u in comp_i (n_i choices).\n\n                  But note: we are allowed to choose any vertex in comp_i. However, the two edges we add are (u,v) and (u,w). \n\n                  How many ways for Type 1? \n\n                    Sum over all pairs of components (i,j) where i and j are edges (i.e., two-vertex components) and for each such pair, we have (size of component i) * (1) [because the edge in j is fixed].\n\n                  However, wait: what if j is an isolated vertex? Then j has no edge. So we require j to be an edge (two vertices). Similarly, i must be an edge? Actually, no: i can be an isolated vertex? \n\n                  But note: in Type 1, we require that the two edges are from u (in i) to v and w (in j). And j must have an edge (v,w). So j must have at least two vertices (an edge). \n\n                  And i can be any component (even an isolated vertex). \n\n                  Example: \n                    Component i: an isolated vertex a.\n                    Component j: an edge (b,c).\n\n                    Then we add edges (a,b) and (a,c). Then we have a cycle: a-b-c-a (if there's an edge between b and c). And the edge b-c is present. \n\n                  Therefore, i can be any component (isolated vertex or edge) and j must be an edge.\n\n                  Then the count for Type 1:\n\n                    Let:\n                      E = list of components that are edges (each has 2 vertices)\n                      V = list of components that are isolated vertices (each has 1 vertex)\n\n                    Then for each edge component j (which has two vertices, say v and w) and for each component i (whether edge or vertex) and for each vertex u in i, we can form a way by adding (u,v) and (u,w).\n\n                    However, note: the two edges (u,v) and (u,w) are the same regardless of the order.\n\n                    The total for Type 1 is: \n                        For each j in E (each edge component) and for each i (each component) and for each vertex u in i: count 1.\n\n                    But wait, we must avoid using the same edge twice? \n\n                    Actually, the edge component j is fixed. The vertices v and w are fixed. Then we are choosing any vertex u from any component i. \n\n                    However, note: if i is the same as j, then u can be v or w? \n\n                    But wait, j is an edge component (two vertices). Then if i=j, then u can be either of the two vertices. Then the two edges are (u, v) and (u, w). But if u is v, then one of the edges is (v, v) which is a loop -> not allowed. Similarly, if u is w, then one edge is (w, w) -> not allowed.\n\n                    Therefore, if i=j, then we cannot choose u to be v or w. Then the number of choices for u in i=j is (2-2)=0.\n\n                    So we must consider i and j as distinct components? \n\n                    Actually, the problem does not restrict that the two edges must connect two distinct components. But note: the two edges are from one component i to two vertices in j. If i and j are the same, then we are adding two edges within the same component. \n\n                    However, we are currently in the",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to a given undirected graph to form a simple cycle of odd length, and the number of ways to achieve this. The solution involves checking if the graph already contains an odd cycle, and if not, calculating the minimal edges required and the corresponding ways to form such a cycle.\n\n### Approach\n1. **Check for Existing Odd Cycle**: The graph is bipartite if it contains no odd cycles. We use BFS or DFS to check bipartiteness by attempting to color the graph with two colors. If successful, the graph has no odd cycles.\n2. **Case 1: Graph Already Has an Odd Cycle**: If the graph is not bipartite, no edges need to be added (t=0), and there's exactly one way (w=1).\n3. **Case 2: Graph is Bipartite**:\n   - **Subcase 2.1: One Edge Sufficient**: If any connected component has at least two vertices in the same set, adding an edge between them forms an odd cycle. The number of ways is the sum of combinations of vertices within each set across all components.\n   - **Subcase 2.2: Two Edges Required**: If no component has two vertices in the same set, we need to connect different components. The minimal way is to form a triangle using two added edges and one existing edge from another component. The count involves choosing edges from components and vertices to connect.\n   - **Subcase 2.3: Three Edges Required**: For graphs with isolated vertices, forming a triangle requires adding three edges. The count is straightforward as there's only one way to connect three vertices.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index+1])\n        index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        comp_nodes.append(neighbor)\n                        q.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    t = 0\n    w = 0\n    \n    total_ways_1 = 0\n    for comp in components:\n        set0 = []\n        set1 = []\n        for node in comp:\n            c = color[node]\n            if c == 0:\n                set0.append(node)\n            else:\n                set1.append(node)\n        total_ways_1 += len(set0)*(len(set0)-1)//2 + len(set1)*(len(set1)-1)//2\n        \n    if total_ways_1 > 0:\n        t = 1\n        w = total_ways_1\n        print(f\"{t} {w}\")\n        return\n        \n    total_ways_2 = 0\n    E_components = []\n    V_components = []\n    for comp in components:\n        set0 = []\n        set1 = []\n        for node in comp:\n            c = color[node]\n            if c == 0:\n                set0.append(node)\n            else:\n                set1.append(node)\n        if len(set0) == 1 and len(set1) == 1:\n            E_components.append(comp)\n        else:\n            V_components.append(comp)\n            \n    for i_comp in E_components:\n        size_i = len(i_comp)\n        for j_comp in E_components:\n            if id(i_comp) == id(j_comp):\n                continue\n            size_j = len(j_comp)\n            total_ways_2 += size_i * (size_j - 1)\n            \n        for v_comp in V_components:\n            size_v = len(v_comp)\n            total_ways_2 += size_i * size_v\n            \n    for i_comp in V_components:\n        size_i = len(i_comp)\n        for j_comp in E_components:\n            size_j = len(j_comp)\n            total_ways_2 += size_i * (size_j - 1)\n            \n        for v_comp in V_components:\n            if id(i_comp) == id(v_comp):\n                continue\n            size_v = len(v_comp)\n            total_ways_2 += size_i * (size_v - 1)\n            \n    if total_ways_2 > 0:\n        t = 2\n        w = total_ways_2\n        print(f\"{t} {w}\")\n        return\n        \n    t = 3\n    w = 1\n    print(f\"{t} {w}\")\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Graph Input Handling**: The input is read and parsed into a graph structure.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness by attempting to color nodes with two colors. If any component fails this check, the graph contains an odd cycle.\n3. **Edge Addition Cases**:\n   - **One Edge**: If any component has two nodes of the same color, adding an edge between them forms an odd cycle. The count of such possible edges is summed.\n   - **Two Edges**: If no single edge can form an odd cycle, we consider connecting different components. The count involves combinations of edges from components and vertices to form triangles.\n   - **Three Edges**: For graphs with isolated vertices, forming a triangle requires three edges, counted once.\n4. **Output**: Based on the checks, the minimal edges and their count are printed. The solution efficiently handles all edge cases by leveraging graph traversal and combinatorial counting.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    \n    graph = [[] for _ in range(n+1)]\n    index = 2\n    for _ in range(m):\n        u = int(data[index])\n        v = int(data[index+1])\n        index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            q = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes = [i]\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        comp_nodes.append(neighbor)\n                        q.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    t = 0\n    w = 0\n    \n    total_ways_1 = 0\n    for comp in components:\n        set0 = []\n        set1 = []\n        for node in comp:\n            c = color[node]\n            if c == 0:\n                set0.append(node)\n            else:\n                set1.append(node)\n        total_ways_1 += len(set0)*(len(set0)-1)//2 + len(set1)*(len(set1)-1)//2\n        \n    if total_ways_1 > 0:\n        t = 1\n        w = total_ways_1\n        print(f\"{t} {w}\")\n        return\n        \n    total_ways_2 = 0\n    E_components = []\n    V_components = []\n    for comp in components:\n        set0 = []\n        set1 = []\n        for node in comp:\n            c = color[node]\n            if c == 0:\n                set0.append(node)\n            else:\n                set1.append(node)\n        if len(set0) == 1 and len(set1) == 1:\n            E_components.append(comp)\n        else:\n            V_components.append(comp)\n            \n    for i_comp in E_components:\n        size_i = len(i_comp)\n        for j_comp in E_components:\n            if id(i_comp) == id(j_comp):\n                continue\n            size_j = len(j_comp)\n            total_ways_2 += size_i * (size_j - 1)\n            \n        for v_comp in V_components:\n            size_v = len(v_comp)\n            total_ways_2 += size_i * size_v\n            \n    for i_comp in V_components:\n        size_i = len(i_comp)\n        for j_comp in E_components:\n            size_j = len(j_comp)\n            total_ways_2 += size_i * (size_j - 1)\n            \n        for v_comp in V_components:\n            if id(i_comp) == id(v_comp):\n                continue\n            size_v = len(v_comp)\n            total_ways_2 += size_i * (size_v - 1)\n            \n    if total_ways_2 > 0:\n        t = 2\n        w = total_ways_2\n        print(f\"{t} {w}\")\n        return\n        \n    t = 3\n    w = 1\n    print(f\"{t} {w}\")\n    \nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1388,
        "thoughts_token_count": 8191
    }
}