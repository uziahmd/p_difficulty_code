{
    "start": 1758099719.6272461,
    "end": 1758099761.2933385,
    "start-formatted": "2025-09-17 18:01 KST",
    "end-formatted": "2025-09-17 18:02 KST",
    "gpu": 2,
    "pid": 20,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Multiset of Strings\n\nYou are given three integers $$$n$$$, $$$k$$$ and $$$f$$$.Consider all binary strings (i. e. all strings consisting of characters $$$0$$$ and/or $$$1$$$) of length from $$$1$$$ to $$$n$$$. For every such string $$$s$$$, you need to choose an integer $$$c_s$$$ from $$$0$$$ to $$$k$$$.A multiset of binary strings of length exactly $$$n$$$ is considered beautiful if for every binary string $$$s$$$ with length from $$$1$$$ to $$$n$$$, the number of strings in the multiset such that $$$s$$$ is their prefix is not exceeding $$$c_s$$$.For example, let $$$n = 2$$$, $$$c_{0} = 3$$$, $$$c_{00} = 1$$$, $$$c_{01} = 2$$$, $$$c_{1} = 1$$$, $$$c_{10} = 2$$$, and $$$c_{11} = 3$$$. The multiset of strings $$$\\{11, 01, 00, 01\\}$$$ is beautiful, since:  for the string $$$0$$$, there are $$$3$$$ strings in the multiset such that $$$0$$$ is their prefix, and $$$3 \\le c_0$$$;  for the string $$$00$$$, there is one string in the multiset such that $$$00$$$ is its prefix, and $$$1 \\le c_{00}$$$;  for the string $$$01$$$, there are $$$2$$$ strings in the multiset such that $$$01$$$ is their prefix, and $$$2 \\le c_{01}$$$;  for the string $$$1$$$, there is one string in the multiset such that $$$1$$$ is its prefix, and $$$1 \\le c_1$$$;  for the string $$$10$$$, there are $$$0$$$ strings in the multiset such that $$$10$$$ is their prefix, and $$$0 \\le c_{10}$$$;  for the string $$$11$$$, there is one string in the multiset such that $$$11$$$ is its prefix, and $$$1 \\le c_{11}$$$. Now, for the problem itself. You have to calculate the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$.\n\n## Input\nThe only line of input contains three integers $$$n$$$, $$$k$$$ and $$$f$$$ ($$$1 \\le n \\le 15$$$; $$$1 \\le k, f \\le 2 \\cdot 10^5$$$).\n\n## Output\nPrint one integer — the number of ways to choose the integer $$$c_s$$$ for every binary string $$$s$$$ of length from $$$1$$$ to $$$n$$$ in such a way that the maximum possible size of a beautiful multiset is exactly $$$f$$$. Since it can be huge, print it modulo $$$998244353$$$.\n\n## Example\n### Input\n['1 42 2', '2 37 13', '4 1252 325', '6 153 23699', '15 200000 198756']\n\n### Output\n['3', '36871576', '861735572', '0', '612404746']\n\n## Note\nIn the first example, the three ways to choose the integers $$$c_s$$$ are:  $$$c_0 = 0$$$, $$$c_1 = 2$$$, then the maximum beautiful multiset is $$$\\{1, 1\\}$$$;  $$$c_0 = 1$$$, $$$c_1 = 1$$$, then the maximum beautiful multiset is $$$\\{0, 1\\}$$$;  $$$c_0 = 2$$$, $$$c_1 = 0$$$, then the maximum beautiful multiset is $$$\\{0, 0\\}$$$. \n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "",
    "response": "```python\nimport sys\nimport itertools\nimport math\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, k, f = map(int, input().split())\n\n    # Precompute factorials and inverse factorials for binomial coefficients\n    max_fact = 2 * 10**5 + 10\n    fact = [1] * (max_fact)\n    inv_fact = [1] * (max_fact)\n    for i in range(1, max_fact):\n        fact[i] = fact[i-1] * i % MOD\n    inv_fact[max_fact - 1] = pow(fact[max_fact - 1], MOD - 2, MOD)\n    for i in range(max_fact - 2, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(n, k):\n        if n < 0 or k < 0 or k > n:\n            return 0\n        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\n    # We need to count the number of ways to choose c_s such that the maximum size of a beautiful multiset is exactly f\n\n    # For each string s of length from 1 to n, we can choose c_s from 0 to k\n    # The maximum possible size of a beautiful multiset is determined by the minimal c_s among all prefixes of any string in the multiset\n\n    # To maximize the size of a beautiful multiset, we should choose c_s as large as possible for all strings\n    # However, the constraint is that for every string s, the number of strings in the multiset with s as prefix must not exceed c_s\n    # So the maximum size is the minimum of c_s over all strings s\n\n    # Let's define dp[i][m] = number of ways to assign c_s to all strings of length up to i such that the minimum c_s is m\n    # Then the answer is dp[n][f]\n\n    # We will use dynamic programming with memoization\n\n    from functools import lru_cache\n\n    @lru_cache(maxsize=None)\n    def solve(i, m):\n        if i == 0:\n            return 1 if m == 0 else 0\n        res = 0\n        # For each string of length i, we can choose c_s from 0 to k\n        # But we have to ensure that the minimum c_s among all strings is at least m\n        # So for each string of length i, we can choose c_s >= m\n        # But also, the minimum c_s among all strings of length up to i must be exactly m\n        # So we need to consider how many strings of length i have c_s >= m\n        # And then multiply by the number of ways to assign c_s to the previous strings\n        # But this seems complex, so instead, let's think recursively\n        # The minimum c_s among all strings of length up to i is m\n        # So for the current level (length i), we can choose c_s >= m\n        # But the overall minimum must be exactly m\n        # So we need to count the number of ways where the minimum is exactly m\n        # This is equivalent to: total ways with min >= m minus total ways with min >= m+1\n        # So we can use inclusion-exclusion\n        # So dp[i][m] = dp[i-1][m] * (number of choices for c_s of length i that are >= m) - dp[i-1][m+1] * (same)\n        # Wait, no. We need to track the minimum\n        # Let's try another approach\n\n        # Let's think of it as for each string of length i, we can choose c_s from 0 to k\n        # But we want the minimum c_s among all strings of length up to i to be exactly m\n        # So for all strings of length <= i, their c_s must be >= m\n        # And at least one string has c_s = m\n        # So we can compute the number of ways where all c_s >= m, and subtract the number of ways where all c_s >= m+1\n        # That gives us the number of ways where the minimum c_s is exactly m\n\n        # So for each i, we compute the number of ways to assign c_s to all strings of length up to i such that all c_s >= m\n        # Then the answer is dp[i][m] = ways_all_ge_m - ways_all_ge_m_plus_1\n\n        # So first, compute ways_all_ge_m for all m\n        # Let's compute the number of ways to assign c_s to all strings of length up to i such that c_s >= m for all s\n        # For each string s, we have (k - m + 1) choices\n        # Number of strings of length up to i is 2^1 + 2^2 + ... + 2^i = 2^(i+1) - 2\n        # So total ways = (k - m + 1) ^ (2^(i+1) - 2)\n\n        # But since we're working modulo MOD, we need to compute this efficiently\n        # So for each i, we can precompute the number of strings of length up to i\n\n        num_strings = 2 ** (i + 1) - 2\n        if num_strings < 0:\n            return 0\n        # Now, compute the number of ways to assign c_s to all strings of length up to i such that c_s >= m\n        # This is (k - m + 1)^num_strings\n        # But we need to compute this mod MOD\n        power = pow(k - m + 1, num_strings, MOD)\n        # Now, compute the number of ways where all c_s >= m+1\n        power_plus_1 = pow(k - (m + 1) + 1, num_strings, MOD) if (k - m) >= 1 else 0\n        return (power - power_plus_1) % MOD\n\n    # Now, we need to compute the number of ways to choose c_s for all strings of length up to n such that the minimum c_s is exactly f\n    # Which is solve(n, f)\n\n    # But wait, the problem says \"the maximum possible size of a beautiful multiset is exactly f\"\n    # Which is the same as the minimum c_s among all strings being exactly f\n    # Because the maximum size of a beautiful multiset is the minimum c_s among all strings\n    # Because the multiset can't have more than the minimum c_s for any prefix\n\n    # So the answer is the number of ways to assign c_s such that the minimum c_s is exactly f\n\n    # So the final answer is solve(n, f)\n\n    print(solve(n, f))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nimport itertools\nimport math\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    n, k, f = map(int, input().split())\n\n    # Precompute factorials and inverse factorials for binomial coefficients\n    max_fact = 2 * 10**5 + 10\n    fact = [1] * (max_fact)\n    inv_fact = [1] * (max_fact)\n    for i in range(1, max_fact):\n        fact[i] = fact[i-1] * i % MOD\n    inv_fact[max_fact - 1] = pow(fact[max_fact - 1], MOD - 2, MOD)\n    for i in range(max_fact - 2, -1, -1):\n        inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n    def comb(n, k):\n        if n < 0 or k < 0 or k > n:\n            return 0\n        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\n    # We need to count the number of ways to choose c_s such that the maximum size of a beautiful multiset is exactly f\n\n    # For each string s of length from 1 to n, we can choose c_s from 0 to k\n    # The maximum possible size of a beautiful multiset is determined by the minimal c_s among all prefixes of any string in the multiset\n\n    # To maximize the size of a beautiful multiset, we should choose c_s as large as possible for all strings\n    # However, the constraint is that for every string s, the number of strings in the multiset with s as prefix must not exceed c_s\n    # So the maximum size is the minimum of c_s over all strings s\n\n    # Let's define dp[i][m] = number of ways to assign c_s to all strings of length up to i such that the minimum c_s is m\n    # Then the answer is dp[n][f]\n\n    # We will use dynamic programming with memoization\n\n    from functools import lru_cache\n\n    @lru_cache(maxsize=None)\n    def solve(i, m):\n        if i == 0:\n            return 1 if m == 0 else 0\n        res = 0\n        # For each string of length i, we can choose c_s from 0 to k\n        # But we have to ensure that the minimum c_s among all strings is at least m\n        # So for each string of length i, we can choose c_s >= m\n        # But also, the minimum c_s among all strings of length up to i must be exactly m\n        # So we need to consider how many strings of length i have c_s >= m\n        # And then multiply by the number of ways to assign c_s to the previous strings\n        # But this seems complex, so instead, let's think recursively\n        # The minimum c_s among all strings of length up to i is m\n        # So for the current level (length i), we can choose c_s >= m\n        # But the overall minimum must be exactly m\n        # So we need to count the number of ways where the minimum is exactly m\n        # This is equivalent to: total ways with min >= m minus total ways with min >= m+1\n        # So we can use inclusion-exclusion\n        # So dp[i][m] = dp[i-1][m] * (number of choices for c_s of length i that are >= m) - dp[i-1][m+1] * (same)\n        # Wait, no. We need to track the minimum\n        # Let's try another approach\n\n        # Let's think of it as for each string of length i, we can choose c_s from 0 to k\n        # But we want the minimum c_s among all strings of length up to i to be exactly m\n        # So for all strings of length <= i, their c_s must be >= m\n        # And at least one string has c_s = m\n        # So we can compute the number of ways where all c_s >= m, and subtract the number of ways where all c_s >= m+1\n        # That gives us the number of ways where the minimum c_s is exactly m\n\n        # So for each i, we compute the number of ways to assign c_s to all strings of length up to i such that all c_s >= m\n        # Then the answer is dp[i][m] = ways_all_ge_m - ways_all_ge_m_plus_1\n\n        # So first, compute ways_all_ge_m for all m\n        # Let's compute the number of ways to assign c_s to all strings of length up to i such that c_s >= m for all s\n        # For each string s, we have (k - m + 1) choices\n        # Number of strings of length up to i is 2^1 + 2^2 + ... + 2^i = 2^(i+1) - 2\n        # So total ways = (k - m + 1) ^ (2^(i+1) - 2)\n\n        # But since we're working modulo MOD, we need to compute this efficiently\n        # So for each i, we can precompute the number of strings of length up to i\n\n        num_strings = 2 ** (i + 1) - 2\n        if num_strings < 0:\n            return 0\n        # Now, compute the number of ways to assign c_s to all strings of length up to i such that c_s >= m\n        # This is (k - m + 1)^num_strings\n        # But we need to compute this mod MOD\n        power = pow(k - m + 1, num_strings, MOD)\n        # Now, compute the number of ways where all c_s >= m+1\n        power_plus_1 = pow(k - (m + 1) + 1, num_strings, MOD) if (k - m) >= 1 else 0\n        return (power - power_plus_1) % MOD\n\n    # Now, we need to compute the number of ways to choose c_s for all strings of length up to n such that the minimum c_s is exactly f\n    # Which is solve(n, f)\n\n    # But wait, the problem says \"the maximum possible size of a beautiful multiset is exactly f\"\n    # Which is the same as the minimum c_s among all strings being exactly f\n    # Because the maximum size of a beautiful multiset is the minimum c_s among all strings\n    # Because the multiset can't have more than the minimum c_s for any prefix\n\n    # So the answer is the number of ways to assign c_s such that the minimum c_s is exactly f\n\n    # So the final answer is solve(n, f)\n\n    print(solve(n, f))\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 1007,
        "completion_token_count": 1517,
        "thoughts_token_count": 0
    }
}