{
    "start": 1758298952.9885015,
    "end": 1758303492.1377065,
    "start-formatted": "2025-09-20 01:22 KST",
    "end-formatted": "2025-09-20 02:38 KST",
    "gpu": 2,
    "pid": 23,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Tokitsukaze and Mahjong\n\nTokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $$$1$$$ to $$$9$$$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $$$\\ldots$$$, 9m, 1p, 2p, $$$\\ldots$$$, 9p, 1s, 2s, $$$\\ldots$$$, 9s.In order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.Do you know the minimum number of extra suited tiles she needs to draw so that she can win?Here are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. Some examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] — it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] — it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] — it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. Note that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.\n\n## Input\nThe only line contains three strings — the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $$$1$$$ to $$$9$$$ and the second character is m, p or s.\n\n## Output\nPrint a single integer — the minimum number of extra suited tiles she needs to draw.\n\n## Example\n### Input\n['1s 2s 3s', '9m 9m 9m', '3p 9m 2p']\n\n### Output\n['0', '0', '1']\n\n## Note\nIn the first example, Tokitsukaze already has a shuntsu.In the second example, Tokitsukaze already has a koutsu.In the third example, Tokitsukaze can get a shuntsu by drawing one suited tile — 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, we are given three strings in one line, but the example input is given as a list of three strings. However, the problem says: \"The only line contains three strings\". Each string is a tile? Actually, the example input is given as:\n Input: ['1s 2s 3s', '9m 9m 9m', '3p 9m 2p']\n\n But wait, the example input format is actually three tiles in a single line, separated by spaces? Or is it three separate strings (each being one tile) in one line?\n\n Let me read the problem again: \"The only line contains three strings — the tiles in Tokitsukaze's hand.\"\n\n And each tile is represented as a string of two characters: first digit and then one of 'm', 'p', 's'.\n\n However, the example input is given as:\n   ['1s 2s 3s', '9m 9m 9m', '3p 9m 2p']\n\n This seems to be a representation of three test cases. But the problem says: The only line.\n\n Actually, the example input is provided in the note as three separate examples. So the actual input for one test case is just one line with three tiles? Or three lines?\n\n The problem says: \"The only line contains three strings\".\n\n Example input: \n   \"1s 2s 3s\"   -> but wait, that would be three tiles: \"1s\", \"2s\", \"3s\"?\n\n But the example input is written as: \n   ['1s 2s 3s', ...]\n\n Actually, looking at the example output: \n   ['0', '0', '1']\n\n So there are three test cases. But the problem states: \"The only line\"\n\n This is confusing. Let me re-read: \"The following is a competitive programming problem.\" and then the input format.\n\n Actually, the problem statement might have been copied from a multi-test-case problem, but the original problem (if from an online judge) might have multiple test cases.\n\n However, the problem says: \"The only line\" meaning one test case per run? Or multiple?\n\n But the example input is given as three examples. \n\n Clarification: In many problems, they show multiple examples. The actual input for the program will be one line with three tiles? Or three lines?\n\n The problem says: \"The only line contains three strings\"\n\n So the input is one line with three strings (each string being one tile). But wait, the example input is given as:\n\n   Input: ['1s 2s 3s', '9m 9m 9m', '3p 9m 2p']\n\n This is actually three separate inputs. So the problem might be having multiple test cases.\n\n But the problem statement does not specify the number of test cases. However, the example output has three answers.\n\n After checking the original Japanese version or typical IO formats, I think the problem is intended to have multiple test cases. However, the problem says \"The only line\", which implies one test case.\n\n Alternatively, perhaps the example input was meant to be three separate lines, each containing three tiles? Or each test case is on a separate line?\n\n Let me check the example again: \n   Example 1: Input: \"1s 2s 3s\" -> Output: \"0\"\n   Example 2: Input: \"9m 9m 9m\" -> Output: \"0\"\n   Example 3: Input: \"3p 9m 2p\" -> Output: \"1\"\n\n But wait, the third example input is \"3p 9m 2p\", which is three tiles.\n\n So the input format is: one line with three space-separated strings (each representing a tile).\n\n But the example input is shown as a list of three strings, each string being the entire set of three tiles? \n\n Actually, the example input representation is ambiguous. Since the problem says \"The only line\", then we assume one test case per run. But if the judge runs multiple test cases, then we have to handle multiple lines.\n\n However, the problem statement says: \"The following is a competitive programming problem.\" and then gives an example input that includes three examples.\n\n After reading the problem statement again, it says: \"The only line contains three strings\". So we must read one line and split it to get three tiles.\n\n But if we are to write a program that handles multiple test cases (like the example shows three), then we need to read until EOF.\n\n But note: the example output is three integers. So probably the problem expects multiple test cases, each in a separate line.\n\n However, the problem statement does not specify. But in many competitive programming problems, if the input format is not specified for multiple test cases, we assume one.\n\n But the example input is given as three examples. So let's assume the judge will provide",
    "response": "\nTo solve this problem, we need to determine the minimum number of extra tiles Tokitsukaze needs to draw so that her hand contains at least one mentsu (either a koutsu or a shuntsu). \n\n### Approach\n1. **Problem Analysis**: \n   - **Koutsu (Triplet)**: Three identical tiles (same number and suit).\n   - **Shuntsu (Sequence)**: Three consecutive numbers in the same suit.\n   - The goal is to check if the current hand already contains a mentsu. If not, determine the minimum number of tiles to draw to form one.\n\n2. **Key Insights**:\n   - **Check for Existing Mentsu**: \n     - For koutsu, count occurrences of each tile. If any tile appears three times, no tiles are needed.\n     - For shuntsu, check for any three consecutive numbers in the same suit (e.g., [1m, 2m, 3m]).\n   - **Drawing Tiles**: \n     - If no mentsu exists, consider drawing tiles to complete a triplet or sequence. The solution involves checking all possible ways to form a mentsu with minimal draws.\n\n3. **Algorithm Selection**:\n   - **Frequency Count**: Track the count of each tile in the hand.\n   - **Suit and Number Grouping**: Group tiles by suit and number to facilitate checking sequences.\n   - **Minimum Draws Calculation**: \n     - For koutsu, if a tile appears twice, drawing one more completes the triplet.\n     - For shuntsu, if two consecutive numbers exist in the same suit, drawing the missing number completes the sequence. If only one number exists, drawing two might be needed (though optimally, drawing one could sometimes suffice if part of a potential sequence).\n\n4. **Complexity Analysis**:\n   - The solution involves processing up to three tiles initially, making the approach efficient with constant time complexity O(1) per test case, as the number of possible tiles is limited (9 per suit, 3 suits).\n\n### Solution Code\n```python\ndef main():\n    data = input().split()\n    if len(data) != 3:\n        print(\"0\")\n        return\n\n    tiles = [t for t in data]\n    \n    # Check for existing koutsu\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for tile in tiles:\n        freq[tile] += 1\n        \n    if any(count >= 3 for count in freq.values()):\n        print(0)\n        return\n        \n    # Check for existing shuntsu\n    suits = defaultdict(list)\n    for tile in tiles:\n        num = int(tile[0])\n        suit = tile[1]\n        suits[suit].append(num)\n        \n    for suit, nums in suits.items():\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if nums[i] + 1 == nums[i+1] and nums[i+1] + 1 == nums[i+2]:\n                print(0)\n                return\n                \n    # Now check how many draws needed\n    # We have three tiles, possibly from different suits\n    # Case 1: All three tiles are the same suit? Then we can try to form a sequence.\n    # But note: they might not be consecutive. Also, even if same suit, they might not form a sequence.\n    # We'll consider each suit separately.\n\n    # First, let's check if we can form a koutsu by drawing one tile for a duplicate.\n    # But note: we might have two of the same tile. Then drawing one more gives koutsu.\n    found = False\n    for tile, count in freq.items():\n        if count == 2:\n            print(1)\n            return\n            \n    # Check for shuntsu possibility with one draw: \n    # We look for two consecutive numbers in the same suit, then we can draw the next one.\n    for suit, nums in suits.items():\n        nums_set = set(nums)\n        for num in nums_set:\n            if num + 1 in nums_set and num + 2 in nums_set:\n                print(0)\n                return\n                \n        # Check for two consecutive numbers, and the next one missing.\n        for num in nums_set:\n            if (num + 1 in nums_set and (num + 2) not in nums_set) or \\\n               (num - 1 in nums_set and (num - 2) not in nums_set):\n                # But note: if we have two consecutive, we can complete the sequence by drawing one tile.\n                # However, we must ensure that the two consecutive are present and the third is missing.\n                # Actually, we are iterating over the set. Let's restructure.\n                pass\n                \n    # Let's break down the cases for one draw for shuntsu:\n    # We need to find a suit where there are two numbers that are consecutive or can be completed by one draw.\n    # Actually, we can check: for a given suit, if there are two numbers that are consecutive, then drawing the third completes the sequence.\n    # Also, if there is a single number, but two draws might be needed, but we are looking for minimal draws (which is 1 or 2).\n    # But note: the problem asks for minimum draws. We already checked 0 and 1. Now we need to see if 2 draws are needed.\n\n    # Alternatively, we can consider that after drawing one tile, we might not complete a mentsu. But drawing two tiles might complete one.\n\n    # Since the hand has three tiles, after drawing two tiles, we will have five. But we only need one mentsu (three tiles). So we can form a mentsu from four or five tiles? Actually, we can use any three tiles from the hand.\n\n    # However, the problem is to find the minimum number of draws. We already know 0 and 1 are not sufficient. Then we check if 2 is sufficient.\n\n    # But note: sometimes drawing two tiles might form a mentsu. For example, if the hand is [1m, 1m, 4m], then drawing two 2m and 3m would form [1m, 2m, 3m] and [4m] left. But wait, actually we can form one mentsu with three tiles. So we can choose [2m, 3m, 4m] if we draw two tiles (2m and 3m). But note, we can also consider other possibilities.\n\n    # However, the problem requires the minimum number of draws. We have already considered 0 and 1. Now, if neither 0 nor 1 works, then the answer is 2.\n\n    # But wait, is there any scenario where drawing one tile doesn't form a mentsu but drawing two does? Yes, as in the example above.\n\n    # However, note that the hand has three tiles. After drawing two, we have five. We need to check if among these five tiles, there is at least one mentsu (any three tiles forming a koutsu or shuntsu).\n\n    # But the problem does not specify that the mentsu must use the newly drawn tiles. It can use any three tiles from the hand.\n\n    # Therefore, we need to check if with two draws we can form a mentsu.\n\n    # However, note that we are allowed to draw any tiles. So we can choose to draw two tiles that help form a mentsu.\n\n    # But the minimal number of draws is either 0, 1, or 2. Why not more? Because with three tiles, if we cannot form a mentsu with 0 or 1 draws, then drawing two tiles will allow us to form a mentsu (since we can choose which two to draw). \n\n    # Actually, consider the worst-case scenario: three completely unrelated tiles (different suits and non-consecutive). Then drawing two tiles: we can draw two tiles to form a triplet or part of a sequence in one suit. But note, we can form a triplet if we draw two copies of one tile (if we have one copy). Or we can form a sequence if we have two tiles in the same suit and draw the missing one and another arbitrary tile? Actually, no, because we need exactly three tiles for a mentsu.\n\n    # However, observe: if we have three tiles, and we draw two more, we have five. We can pick any three to form a mentsu. But note, the problem does not require using all tiles. So we only need one mentsu (three tiles) anywhere in the hand.\n\n    # Therefore, the minimal number of draws is at most 2.\n\n    # Let's reframe: \n    # - 0: already have a mentsu.\n    # - 1: can we form a mentsu by drawing one tile?\n    #   - For koutsu: if we have two identical tiles, drawing one more completes the triplet.\n    #   - For shuntsu: if we have two consecutive numbers in the same suit, drawing the next number completes the sequence.\n    # - 2: otherwise, we can always form a mentsu by drawing two tiles (for example, by completing a triplet or a sequence).\n\n    # But wait, is it always 2 if we cannot do with 0 or 1? Consider having two tiles of the same suit but not consecutive. For example, [1m, 4m, 9p]. Then drawing two tiles: we can draw two 2m and 3m to form [1m,2m,3m] (but note, we already have 1m, so drawing 2m and 3m forms a sequence). However, we could also draw two 4m to form a triplet (but we only have one 4m). \n\n    # Actually, the minimal draws is 2 because we cannot form a mentsu with one draw. \n\n    # Therefore, the solution is:\n    #   0 if already have a mentsu.\n    #   1 if we can form a mentsu by drawing one tile.\n    #   Otherwise, 2.\n\n    # But wait, what about the case where we have two tiles of the same number but different suits? For example, [1m, 1p, 1s]. This is not a koutsu because they must be the same tile (same suit). So no koutsu. For shuntsu, they are not in the same suit. So no shuntsu. Then we need to draw two more to form a koutsu? Actually, no: we can draw two more 1m to form [1m, 1m, 1m] (koutsu). Or we can draw one 2m and one 3m to form a shuntsu with the 1m? But we don't have two 1m in the same suit. \n\n    # Actually, the example [1m, 1p, 1s] requires two draws to form a koutsu (by drawing two 1m). \n\n    # However, note that we can draw any tiles, including those already present. So we can draw two 1m tiles. \n\n    # But the problem says: \"she can draw any tiles she wants, including those already in her hand.\" So yes, we can draw duplicates.\n\n    # Therefore, the logic for one draw is:\n    #   - For koutsu: if any tile appears twice, then drawing one more of that tile completes the triplet.\n    #   - For shuntsu: if in any suit, two consecutive numbers exist, then drawing the next number completes the sequence.\n\n    # What if we have two tiles of the same number but different suits? Then we cannot form a koutsu with one draw unless we draw two of the same tile (same suit). But wait, we are only allowed to draw one tile. So if we have [1m, 1p], then drawing one tile: we can draw another 1m to complete the koutsu (if the third tile is not 1m). But wait, the hand is three tiles. The example [1m, 1p, 1s] has three distinct suits. To complete a koutsu for 1m, we need to draw two 1m (since we only have one). \n\n    # Actually, in [1m, 1p, 1s], we have one 1m. So to complete a koutsu for 1m, we need two more 1m. Similarly for 1p and 1s. So we need two draws.\n\n    # But note, we can also consider forming a shuntsu. However, the numbers are all 1, so they are not consecutive. \n\n    # Therefore, the corrected logic for one draw:\n    #   - Koutsu: if there exists a tile (same suit and number) that appears at least twice, then drawing one more makes triplet -> 1 draw.\n    #   - Shuntsu: if there exists a suit with two numbers that are consecutive (n, n+1), then drawing n+2 (or n-2 if n-1 is missing) completes the sequence -> 1 draw.\n\n    # But what if we have two tiles in the same suit but not consecutive? For example, [1m, 4m, 2p]. Then we can draw 2m and 3m to form [1m,2m,3m]? No, because we only draw two tiles, but we need three for a sequence. Actually, we can draw one tile to form a sequence if we have two consecutive numbers. In this case, we don't have any two consecutive in the same suit. \n\n    # However, note that we might have multiple suits. The hand is [1m, 4m, 2p]. We can draw one tile: say 2m. Then we have [1m,4m,2p,2m]. Now, we can form a koutsu for 2m? Only if there were two 2m originally, but there was none. Or a sequence? In m: [1m,2m,4m] is not a sequence. In p: only one tile. So no mentsu.\n\n    # Another example: [1m, 2m, 4m]. Then we can draw 3m to form [1m,2m,3m] (shuntsu). So one draw.\n\n    # Therefore, the one-draw condition is met if:\n    #   - There is a tile with count >= 2 (for koutsu) OR\n    #   - There is a suit with two consecutive numbers (for shuntsu).\n\n    # Now, what if the hand has three tiles, but they are all the same suit and numbers? For example, [1m, 1m, 1m] -> koutsu, so 0 draws. [1m, 2m, 3m] -> shuntsu, 0 draws.\n\n    # Another example: [1m, 1m, 2m] -> koutsu for 1m? Not yet (needs three 1m). But shuntsu: 1m and 2m are consecutive, but we need three. So we can draw 3m to complete the sequence (one draw). Also, we can draw one more 1m to complete the koutsu (one draw). So either way, one draw suffices.\n\n    # But note: the problem asks for the minimum number of draws. So we check both possibilities and take the minimum (which is 1 in this case).\n\n    # However, the above code checks for koutsu first (if any tile appears three times, output 0). Then checks for shuntsu (if any suit has three consecutive numbers, output 0). Then checks if any tile appears twice (output 1). Then checks if any suit has two consecutive numbers (output 1). \n\n    # But wait, the example [1m, 1m, 2m] is caught by the second part (after checking for three consecutive, which is not the case) then by the frequency check (two 1m) so it outputs 1, which is correct.\n\n    # Now, what about [1m, 2m, 4m]? \n    #   - No triplet (each tile appears once).\n    #   - No three consecutive in m: [1,2,4] -> no.\n    #   - Frequency: each tile once -> no two same.\n    #   - Then check for consecutive in m: we have 1 and 2 (consecutive) but not 3. So we can complete the sequence by drawing 3m (one draw). So the code should output 1.\n\n    # But in our code, after the frequency check, we check for shuntsu again (the second part). In the second part, we check for any suit and for any number `num` in the suit's set, if `num+1` and `num+2` are present, then output 0 (but we already did that). Then we check for two consecutive numbers (without the third). \n\n    # Actually, the second part of the code (after the initial checks) is incorrect. We should check for the possibility of completing a sequence with one draw. \n\n    # Revised plan for one-draw condition (after 0 is not found):\n\n    #   - For koutsu: if any tile appears twice, then one draw (to make three) suffices.\n    #   - For shuntsu: if in any suit, there exists a number `x` such that `x` and `x+1` are present, then drawing `x+2` completes the sequence (so one draw). Similarly, if `x-1` and `x` are present, then drawing `x-2` completes the sequence.\n\n    # But note: the sequence must be of three consecutive numbers. So we need exactly three numbers. However, if we have two numbers that are consecutive, we can complete the sequence by drawing the third. \n\n    # Therefore, we can modify the code:\n\n    # After checking for 0 draws, check for 1 draw:\n\n    #   For each suit:\n    #       Let S be the set of numbers in that suit.\n    #       For each number x in S:\n    #           if x+1 in S and x+2 in S: then we already have a sequence (should have been caught in the 0 draw check, so skip).\n    #           if x-1 in S and x-2 in S: same.\n    #       But for one draw, we look for:\n    #           if x+1 in S and (x+2 not in S): then drawing x+2 completes the sequence.\n    #           if x-1 in S and (x-2 not in S): then drawing x-2 completes the sequence.\n\n    # However, note that the hand might have multiple suits. We only care about the suit we are checking.\n\n    # Alternatively, we can check for each suit:\n    #   Sort the list of numbers for that suit.\n    #   Then, for each pair of consecutive numbers, check if the next one is missing (then one draw needed) or the previous one is missing (but we already have two consecutive).\n\n    # But note: the sequence must be three consecutive. So if we have [x, x+1] in the suit, then we can complete the sequence by drawing x+2. Similarly, if we have [x, x+1] and x-1 is missing, then we can complete the sequence by drawing x-2? Actually, no: the sequence must be three consecutive numbers. The sequence [x-2, x-1, x] requires x-2 and x-1, but we only have x and x-1 (missing x-2). So we need to draw x-2.\n\n    # But wait, the sequence [x-2, x-1, x] is valid. So if we have two numbers that are consecutive, we can complete the sequence in two ways: \n    #   - If the next number is missing, draw it.\n    #   - If the previous number is missing, draw it.\n\n    # However, note: we might have [x, x+1] and also [x, x-1] (if x-1 is present). But that's okay because we are checking per suit.\n\n    # Therefore, we can check for one-draw as follows:\n\n    #   For each suit in the hand:\n    #       Let nums = sorted list of numbers in that suit.\n    #       For each number x in nums:\n    #           if (x+1 in the set and x+2 in the set): continue (already handled in 0 draws)\n    #           if (x-1 in the set and x-2 in the set): continue\n    #           if (x+1 in the set and (x+2 not in the set)): then we can complete by drawing x+2 -> one draw.\n    #           if (x-1 in the set and (x-2 not in the set)): then we can complete by drawing x-2 -> one draw.\n\n    # But wait, what if we have [1, 3] in a suit? Then we don't have consecutive numbers, so no one-draw for shuntsu.\n\n    # However, what if we have [1, 2] in a suit? Then we can complete by drawing 3 (one draw). Similarly, if we have [2, 3], we can draw 1.\n\n    # But note: the sequence can be in any order. The definition says sequential numbered tiles. So [1,2,3] is valid, [2,3,4] is valid, etc.\n\n    # Now, combining both koutsu and shuntsu for one-draw:\n\n    #   if (any tile appears twice) OR (there exists a suit with two consecutive numbers and the third missing) then answer 1.\n\n    # However, note: if we have two consecutive numbers in a suit, but the third is missing, then one draw suffices. But if we have two tiles of the same kind, one draw suffices for koutsu.\n\n    # So the code after the 0-check can be:\n\n    #   if any(count == 2 for count in freq.values()):\n    #       print(1)\n    #       return\n\n    #   for suit, nums in suits.items():\n    #       nums_set = set(nums)\n    #       nums_sorted = sorted(nums_set)\n    #       for x in nums_sorted:\n    #           if (x+1 in nums_set and x+2 in nums_set):\n    #               # This means we have a sequence, but we already checked for three consecutive, so this shouldn't happen because we didn't have three consecutive before? Actually, we did a separate check for three consecutive (0 draws) so if we get here, we don't have three consecutive. But wait, we did a check for three consecutive numbers (shuntsu) for 0 draws. So if we have three consecutive, we would have printed 0 and returned.\n    #           else:\n    #               if (x+1 in nums_set and (x+2 not in nums_set)):\n    #                   print(1)\n    #                   return\n    #               if (x-1 in nums_set and (x-2 not in nums_set)):\n    #                   print(1)\n    #                   return\n\n    # But wait, the above check for shuntsu might not be efficient. We can simplify:\n\n    #   For a given suit, let the set of numbers be S.\n    #   We want to know if there exists an x such that (x, x+1) are in S and x+2 not in S, or (x, x+1) are in S and x-2 not in S (but note, we need three consecutive, so if we have (x, x+1) and x+2 missing, then we can complete the sequence by drawing x+2. Similarly, if we have (x, x+1) and x-2 missing, then we can complete the sequence by drawing x-2? Actually, no: the sequence must be three consecutive numbers. The sequence ending at x+1 would be [x-1, x, x+1] but we don't have x-1. The sequence starting at x would be [x, x+1, x+2]. \n\n    #   Actually, we can only complete the sequence [x, x+1, x+2] by drawing x+2 if we have x and x+1. Similarly, we can complete [x-2, x-1, x] by drawing x-2 if we have x-1 and x.\n\n    #   But note: the sequence [x-2, x-1, x] requires x-2, x-1, and x. If we have x and x-1, then we are missing x-2. So we can complete by drawing x-2.\n\n    #   However, what if we have x-1 and x, but not x+1? Then we cannot form a sequence with x-1 and x because the next number must be x+1 for the sequence [x-1, x, x+1]. But wait, the sequence [x-2, x-1, x] requires x-2, and the sequence [x, x+1, x+2] requires x+2. \n\n    #   Actually, the sequence must be three consecutive numbers. So having two consecutive numbers allows completion by drawing either the previous or the next number, whichever is missing, but only if the two consecutive numbers are part of a potential three-consecutive set.\n\n    #   Example: \n    #       [1,2] -> can be part of [1,2,3] (draw 3) or [0,1,2] (but 0 is invalid). So only draw 3.\n    #       [2,3] -> can be part of [1,2,3] (draw 1) or [2,3,4] (draw 4).\n    #       [3,4] -> draw 2 or 5.\n\n    #   Therefore, for two consecutive numbers (x, x+1), we can complete the sequence by drawing x-2 (if x-2 exists in the valid range [1,9]) or x+2 (if x+2 <=9). But note, the sequence must be three consecutive numbers, so we are allowed to draw either the one that completes the left side or the right side.\n\n    #   However, the problem does not restrict the drawn tile to be within the range [1,9] for the sequence? Actually, the tiles are from 1 to 9. So if x=1 and we have [1,2], then we cannot draw 0 (invalid). So we can only draw 3.\n\n    #   Similarly, if x=9 and we have [8,9], then we cannot draw 11 (invalid) so we must draw 7 (to form [7,8,9]).\n\n    #   But note: the sequence [7,8,9] is valid.\n\n    #   Therefore, for two consecutive numbers (x, x+1):\n    #       If x-2 >= 1, then we can draw x-2 to form [x-2, x-1, x] (if x-1 is present, which it is because we have x and x+1, so x-1 must be present? No, we have x and x+1, but x-1 might not be present. Actually, we have x and x+1, but we don't necessarily have x-1. \n\n    #   Correction: We have x and x+1, but we don't have x-1. Then to form the sequence [x-2, x-1, x], we would need x-1 and x-2, but we don't have x-1. So we cannot form [x-2, x-1, x] because we lack x-1. \n\n    #   Similarly, to form [x, x+1, x+2], we need x+2.\n\n    #   Therefore, the condition for one-draw via shuntsu is: \n    #       In a suit, there exists a pair of consecutive numbers (x, x+1) such that the number x-2 is not in the suit (but we don't care about x-2, we care about x+2) — actually, no: we just need to complete the sequence. The only way to complete the sequence with the existing two consecutive numbers is by drawing the next number (x+2) if x+1 is the highest, or the previous number (x-2) if x-1 is the lowest? \n\n    #   Actually, no: the sequence must be three consecutive numbers. If we have [x, x+1], then the only possible sequences that include these two are:\n    #       [x-1, x, x+1] (if x-1 exists) or [x, x+1, x+2] (if x+2 exists).\n    #   But we don't have x-1 or x+2. We only have x and x+1. \n\n    #   Wait, no: the sequence [x-1, x, x+1] requires x-1, which we don't have. Similarly, [x, x+1, x+2] requires x+2. \n\n    #   Therefore, to complete the sequence, we need to draw either x-1 and x-2 (to form [x-2, x-1, x]) but that would require two draws, or x+2 (one draw). \n\n    #   But note: we are allowed to draw any tiles. We can draw two tiles to complete a different sequence? However, the one-draw condition is for one draw. \n\n    #   Actually, the one-draw condition for shuntsu is: if there exists a suit and a number x such that x and x+1 are present, and also x+2 is available (even if we don't have it, we can draw it) then we can complete the sequence by drawing x+2. Similarly, if x-1 is present and x-2 is available, then we can complete by drawing x-2? \n\n    #   But wait, we don't need to have the entire sequence already, just two consecutive numbers and the ability to draw the third. \n\n    #   Therefore, the condition is: \n    #       In a suit, if there exists a number x such that x and x+1 are present (in any quantity) and x+2 is not present, then we can draw x+2 to complete the sequence (one draw). Similarly, if there exists a number x such that x and x+1 are present and x-2 is not present, then we can draw x-2 to complete the sequence [x-2, x-1, x] (but note, we don't have x-1! We only have x and x+1). \n\n    #   This is confusing.\n\n    # Let me clarify with examples:\n    #   Hand: [1m, 2m] (and third tile is irrelevant, but we have three tiles). Actually, the hand has three tiles. But for the sake of argument, consider only these two for the suit m. Then we can draw 3m to complete [1m,2m,3m]. That's one draw.\n    #   Hand: [2m, 3m] -> draw 1m to complete [1m,2m,3m] (but wait, we don't have 1m, so we draw 1m). But then the sequence is [1m,2m,3m] — valid. So yes, one draw.\n\n    #   However, note that in the sequence [1m,2m,3m], we require 1m, 2m, and 3m. We have 2m and 3m, so we draw 1m. \n\n    #   Similarly, for [3m,4m]: we can draw 2m to complete [2m,3m,4m] (if we don't have 2m) or 5m to complete [3m,4m,5m].\n\n    #   But what if we have [1m,2m,4m]? Then we can draw 3m to complete [1m,2m,3m] (but we have 4m too, but that's okay). \n\n    #   Therefore, the condition is: \n    #       For a suit, if there exists two numbers x and x+1 (not necessarily adjacent in the sorted list, but present), then we can complete the sequence by drawing x+2 (if the sequence [x, x+1, x+2] is valid) or x-2 (if the sequence [x-2, x-1, x] is valid). But note, to form [x-2, x-1, x], we must have x-1 (which we don't necessarily have). \n\n    #   Actually, no: the sequence [x-2, x-1, x] requires x-2, x-1, and x. We have x, but not x-1 and x-2. So we cannot complete [x-2, x-1, x] with one draw because we need two new tiles.\n\n    #   Similarly, to complete [x, x+1, x+2], we only need x+2 (one draw) if we have x and x+1.\n\n    #   And to complete [x-2, x-1, x], we need x-1 and x-2 (two draws).\n\n    #   Therefore, the only one-draw completion for shuntsu is when we have two consecutive numbers and the next number is missing (or the previous number is missing for a sequence that extends to the left? No, because extending to the left requires two additional numbers).\n\n    #   Actually, consider: [2m,3m] — we can complete to [1m,2m,3m] by drawing 1m. Here, we are completing a sequence that starts at 1m. But note, the sequence [1m,2m,3m] is valid. We are drawing 1m even though we don't have 1m in the hand originally. \n\n    #   The condition is: we need to have two consecutive numbers and the third number (either immediately before the smallest or immediately after the largest) is not present. But note, the sequence can be any three consecutive numbers. \n\n    #   Actually, the sequence must be three consecutive numbers. So if we have [x, x+1], then the only sequences that include these two are:\n    #       [x-1, x, x+1] (if x-1 exists) and [x, x+1, x+2] (if x+2 exists).\n    #   But we don't care about existence in the hand, we care about availability to draw. We can draw any tile. \n\n    #   However, the problem is: we want to know if we can complete a sequence with one draw. So for [x, x+1], we can complete [x, x+1, x+2] by drawing x+2 (provided x+2 is between 1 and 9). Similarly, we can complete [x-1, x, x+1] by drawing x-1 (provided x-1 is between 1 and 9). \n\n    #   But wait, [x-1, x, x+1] requires x-1, which we don't have. So to complete [x-1, x, x+1], we need to draw x-1. And then we have [x-1, x, x+1] — three consecutive numbers.\n\n    #   Similarly, [x, x+1, x+2] requires drawing x+2.\n\n    #   Therefore, for two consecutive numbers (x, x+1), we can complete a sequence by drawing either x-1 (to form [x-1, x, x+1]) or x+2 (to form [x, x+1, x+2]), provided the drawn tile is within [1,9].\n\n    #   Example: \n    #       x=1, x+1=2 -> can draw 0 (invalid) or 3 (valid) -> only 3.\n    #       x=9, x+1=10 (invalid) — so x+1 is not allowed if x=9. But our numbers are from 1 to 9, so x+1 for x=9 is 10, which is invalid. So for x=9, we cannot have x+1.\n\n    #   Therefore, the condition for one-draw for shuntsu is:\n    #       For any suit, and for any number x in that suit (from 1 to 9), if x+1 is also in the suit, then we can complete the sequence by drawing x-1 (if x-1>=1) or x+2 (if x+2<=9). But note, we can choose the smallest number of draws. However, we are only drawing one tile, so we can only draw one of them. But we don't know which one to draw. \n\n    #   Actually, we can complete the sequence in two different ways, but only one of them might be valid (depending on the bounds). \n\n    #   However, the problem asks for the minimum number of draws. If any way to complete a mentsu with one draw exists, then answer 1.\n\n    #   Therefore, we can check for one-draw for shuntsu as follows:\n    #       For each suit:\n    #           Let S be the set of numbers in that suit.\n    #           For each x in S:\n    #               if x+1 in S:\n    #                   if x-1 >= 1:\n    #                       print(1)\n    #                       return\n    #                   else:\n    #                       if x+2 <= 9:\n    #                           print(1)\n    #                           return\n\n    #   But wait, this is not correct. We are not checking if the entire sequence is completable with one draw. We are only checking if we have two consecutive numbers and one of the adjacent numbers is out of bounds (forcing the other direction). \n\n    #   Actually, the above condition is: \n    #       If we have x and x+1, then:\n    #           Option 1: Draw x-1 to complete [x-1, x, x+1] (if x-1 is >=1)\n    #           Option 2: Draw x+2 to complete [x, x+1, x+2] (if x+2 <=9)\n\n    #   But note: we can only draw one tile. So if either option is valid, then one draw suffices.\n\n    #   However, there's a catch: what if we have [2m,3m] and x=2, x+1=3. Then:\n    #       Option 1: draw 1m (valid because 1>=1) -> completes [1m,2m,3m].\n    #       Option 2: draw 4m (valid because 4<=9) -> completes [2m,3m,4m].\n    #   Both are valid, so one draw suffices.\n\n    #   Therefore, the condition is: if there exists a suit and a number x such that x and x+1 are present, and either x-1>=1 or x+2<=9, then one draw suffices.\n\n    #   But note: the bounds are independent. Even if x-1 is out of bounds, we can still draw x+2 if it's in bounds. And vice versa.\n\n    #   However, consider x=8: \n    #       Option 1: draw 7 -> valid.\n    #       Option 2: draw 10 -> invalid.\n    #   So one draw suffices by drawing 7.\n\n    #   Consider x=9: \n    #       x+1=10 is invalid, so we don't even have x+1 in the first place. But our loop is for x in S, and we check if x+1 is in S. For x=9, x+1=10 is not in S, so we skip.\n\n    #   Therefore, the code for one-draw (after checking for 0 draws) is:\n\n    #       if any(count >= 2 for count in freq.values()):\n    #           print(1)\n    #           return\n\n    #       for suit, nums in suits.items():\n    #           nums_set = set(nums)\n    #           for x in nums_set:\n    #               if x+1 in nums_set:\n    #                   if x-1 >= 1 or x+2 <= 9:\n    #                       print(1)\n    #                       return\n\n    #   But wait, this condition is not quite right. We are only checking if there exists any x such that x and x+1 are present and (x-1>=1 or x+2<=9). However, the existence of two consecutive numbers (x, x+1) alone is not enough to guarantee that we can complete the sequence with one draw. We can complete the sequence by drawing either x-1 or x+2, but we require that at least one of these two possibilities is within bounds.\n\n    #   However, note: x-1>=1 is true for x>=2, and x+2<=9 is true for x<=7. But if x=1, then x-1=0 (invalid) but x+2=3 (valid) -> so one-draw is possible.\n    #   If x=8, then x-1=7 (valid) and x+2=10 (invalid) -> one-draw is possible.\n    #   If x=9, then x+1=10 is not present (so we wouldn't enter the if).\n\n    #   But what if x=2: then x-1=1 (valid) and x+2=4 (valid) -> one-draw is possible.\n    #   What if x=7: then x-1=6 (valid) and x+2=9 (valid) -> one-draw is possible.\n\n    #   However, there is a scenario where two consecutive numbers exist but neither x-1 nor x+2 is in bounds? \n    #       x-1>=1 means x>=2, and x+2<=9 means x<=7. So for x=1, x-1 is invalid but x+2 is valid. For x=8, x-1 is valid but x+2 is invalid. For x=9, we don't have x+1. For x=0, not applicable.\n\n    #   Therefore, for any x in [1,9], if x+1 is present and x is in [1,9], then at least one of x-1>=1 or x+2<=9 is true? \n    #       Let's check:\n    #         x=1: x-1=0 -> false, x+2=3 -> true.\n    #         x=2: true and true.\n    #         ...\n    #         x=8: true and false.\n    #         x=9: not applicable (since x+1=10 is not in [1,9]).\n\n    #   So indeed, if we have two consecutive numbers (x, x+1) for any x in [1,8], then one-draw is always possible (because either x-1 is available or x+2 is available).\n\n    #   Therefore, the condition simplifies to: if there exists a suit and a number x in [1,8] such that x and x+1 are present in that suit, then one-draw suffices.\n\n    #   But note: the hand might have three tiles. We are only concerned with the numbers in the suit. And x and x+1 must be in the same suit.\n\n    #   However, what if the two consecutive numbers are in different suits? Then we cannot form a sequence (which requires same suit). \n\n    #   So the code becomes:\n\n    #       if any(count >= 2 for count in freq.values()):\n    #           print(1)\n    #           return\n\n    #       for suit, nums in suits.items():\n    #           nums_set = set(nums)\n    #           for x in range(1, 9):  # x from 1 to 8\n    #               if x in nums_set and x+1 in nums_set:\n    #                   print(1)\n    #                   return\n\n    #   But wait, this will iterate for each suit and for x from 1 to 8. If any suit has x and x+1, then one draw suffices.\n\n    #   However, what if the hand has two tiles of the same suit with consecutive numbers, but also has a duplicate tile in a different suit? For example, [1m, 1m, 2m] — then the first condition (count>=2) catches it and prints 1. So the above code is safe.\n\n    #   But note: the above code does not check for the bounds of the suit's numbers. We are iterating x from 1 to 8, and checking if x and x+1 are in the set of numbers for that suit. This is correct because x+1 must be <=9 (since x<=8).\n\n    #   Therefore, the complete solution is:\n\n    #       Read three tiles.\n    #       Check for 0 draws:\n    #           - If any tile appears three times (koutsu) or any suit has three consecutive numbers (shuntsu), output 0.\n    #       Else, check for 1 draw:\n    #           - If any tile appears twice (can form koutsu by drawing one more), output 1.\n    #           - Else, if any suit has two consecutive numbers (x and x+1 for some x in [1,8]), output 1.\n    #       Else, output 2.\n\n    #   However, note: the 0-draw check for shuntsu was done by checking for three consecutive numbers. We did that initially. But we might have missed some cases? \n\n    #   Let me reexamine the 0-draw shuntsu check:\n\n    #       We did: for each suit, if the sorted list of numbers has three consecutive numbers (i.e., for any i, nums[i] + 1 == nums[i+1] and nums[i+1]+1==nums[i+2]), then output 0.\n\n    #   But what if the three consecutive numbers are not sorted consecutively in the list? For example, [1,2,3] is fine. But what if the list has [1,3,2] — sorting gives [1,2,3] and then we check indices 0,1,2: 1+1=2, 2+1=3 -> valid.\n\n    #   Also, what if the suit has more than three tiles? But initially, we have three tiles total. So each suit can have at most three tiles. \n\n    #   Example: hand [1m,2m,3m] — we sort to [1,2,3] and check: 1+1==2 and 2+1==3 -> valid.\n\n    #   Example: hand [1m,2m,4m] — sorted [1,2,4]: 1+1=2 (ok), 2+1=3 !=4 -> not consecutive.\n\n    #   Example: hand [2m,3m,4m] — sorted [2,3,4]: 2+1=3, 3+1=4 -> valid.\n\n    #   Example: hand [1m,3m,2m] — sorted [1,2,3] -> valid.\n\n    #   So the initial 0-draw shuntsu check is correct.\n\n    #   Therefore, the final code:\n\n    #       Step 1: Read the three tiles.\n    #       Step 2: Count frequency of each tile.\n    #       Step 3: Group by suit and collect numbers.\n    #       Step 4: Check for 0 draws:\n    #           - If any tile appears three times, output 0.\n    #           - Else, for each suit, check if there are three consecutive numbers (by sorting and checking adjacent differences). Output 0 if found.\n    #       Step 5: Check for 1 draw:\n    #           - If any tile appears twice, output 1.\n    #           - Else, for each suit, check if there exists any x in [1,8] such that x and x+1 are in the suit. Output 1.\n    #       Step 6: Output 2.\n\n    #   However, note: the 0-draw shuntsu check must account for the fact that the hand has three tiles. The three consecutive numbers must be three distinct tiles. \n\n    #   But our initial 0-draw shuntsu check does not require distinct tiles? Actually, the representation is three strings. Each string is a tile. The same tile represented as \"1m\" is the same regardless of order.\n\n    #   But the problem says: a shuntsu is made of three sequential numbered tiles in the same suit. So they must be three distinct tiles (unless the same number appears multiple times, but then it wouldn't be a sequence). \n\n    #   However, the example [1m,1m,1m] is a koutsu, not a shuntsu. \n\n    #   So the initial 0-draw shuntsu check is only for three distinct consecutive numbers. But our code for 0-draw shuntsu checks for three consecutive numbers in the sorted list. This implies three distinct numbers. \n\n    #   Example: [1m,1m,2m] — sorted [1,1,2] -> not three consecutive.\n\n    #   So the initial 0-draw shuntsu check is correct.\n\n    #   Let's test the example inputs:\n\n    #   Example 1: ['1s','2s','3s'] -> three consecutive in 's' suit -> 0.\n    #   Example 2: ['9m','9m','9m'] -> koutsu -> 0.\n    #   Example 3: ['3p','9m','2p'] -> \n    #       Frequency: each once -> no koutsu.\n    #       Suits: \n    #           m: [9] -> no consecutive.\n    #           p: [3,2] -> sorted [2,3] -> no three consecutive.\n    #       Then check for 1 draw:\n    #           No tile appears twice -> skip.\n    #           For suit p: check x in [1,8] such that x and x+1 are in {2,3}. \n    #               x=2: 2 and 3 are present -> output 1.\n\n    #   This matches the expected output.\n\n    #   Another example: ['1m','1m','2m'] -> \n    #       Frequency: '1m' appears twice -> output 1.\n\n    #   Another example: ['1m','2m','4m'] -> \n    #       No koutsu.\n    #       Shuntsu: [1,2,4] -> not three consecutive.\n    #       Then check for 1 draw:\n    #           No tile appears twice.\n    #           Suit m: [1,2,4] -> \n    #               x=1: 1 and 2 are present -> output 1.\n\n    #   But wait, in ['1m','2m','4m'], we can draw 3m to complete [1m,2m,3m] (shuntsu). So one draw is correct.\n\n    #   However, note: the hand has three tiles. After drawing 3m, we have [1m,2m,3m,4m]. We can form the shuntsu [1m,2m,3m]. \n\n    #   But what if the hand is ['1m','2m','4m'] and we draw 3m, then we have four tiles. But the problem does not require to use all tiles, only to have at least one mentsu. \n\n    #   Therefore, the solution is:\n\n    #       Read three tiles.\n    #       Check for 0 draws (koutsu or shuntsu).\n    #       Check for 1 draw (either by completing a koutsu with one duplicate or completing a shuntsu by adding one tile to two consecutive numbers in the same suit).\n    #       Otherwise, output 2.\n\n    #   However, note: the problem allows drawing any tiles, including duplicates. So if we have ['1m','1m','1m'] we output 0. If we have ['1m','1m','2m'] we output 1 (by drawing one more 1m). But also, we could draw one 2m to complete the sequence [1m,2m,?] — no, we need three for a sequence. Actually, with ['1m','1m','2m'], drawing one 2m gives ['1m','1m','2m','2m'] — now we have two 2m, but no three consecutive and no three 1m (only two). But wait, we can form a koutsu for 1m by drawing one more 1m. Or for 2m by drawing two more 2m (but that's two draws). So the minimal is one draw (for koutsu of 1m).\n\n    #   The code already handles that.\n\n    #   Let's write the code accordingly.\n\n    #   Note: The input is one line with three space-separated strings.\n\n    #   Steps:\n\n    #       data = input().split()\n    #       if len(data) < 3: \n    #           # But the problem says three strings, so assume three\n    #           print(0)\n    #           return\n\n    #       tiles = data\n\n    #       # Count frequency\n    #       from collections import defaultdict\n    #       freq = defaultdict(int)\n    #       for tile in tiles:\n    #           freq[tile] += 1\n\n    #       # Check for koutsu (three of a kind)\n    #       if any(count == 3 for count in freq.values()) or any(count >= 3 for count in freq.values()):\n    #           # Actually, if any tile appears three times, then koutsu.\n    #           print(0)\n    #           return\n\n    #       # But note: the problem says a koutsu is three identical tiles. So if a tile appears three times, then koutsu. If it appears more than three, that's still a koutsu. But our hand has only three tiles initially, so maximum three.\n\n    #       # Group by suit\n    #       suits = defaultdict(list)\n    #       for tile in tiles:\n    #           num = int(tile[0])\n    #           suit = tile[1]\n    #           suits[suit].append(num)\n\n    #       # Check for shuntsu (three consecutive in the same suit)\n    #       for suit, nums in suits.items():\n    #           nums_sorted = sorted(set(nums))  # Remove duplicates? But we have three tiles, so duplicates would be handled by frequency. But for shuntsu, we need three distinct consecutive numbers.\n    #           # But note: shuntsu requires three distinct tiles (same number not allowed). \n    #           # However, if there are duplicates, then we cannot form a sequence with three distinct consecutive numbers. \n    #           # But our frequency check already ensured no triplet, but duplicates might exist.\n    #           # Example: [1m,1m,2m] -> for suit m: [1,1,2] -> sorted [1,1,2] -> not three consecutive.\n    #           n = len(nums_sorted)\n    #           if n >= 3:\n    #               for i in range(n-2):\n    #                   if nums_sorted[i] + 1 == nums_sorted[i+1] and nums_sorted[i+1] + 1 == nums_sorted[i+2]:\n    #                       print(0)\n    #                       return\n\n    #       # Check for 1 draw:\n    #       #   Condition 1: any tile appears twice (koutsu candidate)\n    #       if any(count == 2 for count in freq.values()):\n    #           print(1)\n    #           return\n\n    #       #   Condition 2: any suit has two consecutive numbers (x and x+1) for some x in [1,8]\n    #       for suit, nums in suits.items():\n    #           nums_set = set(nums)\n    #           for x in range(1, 9):\n    #               if x in nums_set and x+1 in nums_set:\n    #                   print(1)\n    #                   return\n\n    #       # Otherwise, need two draws.\n    #       print(2)\n\n    #   However, wait: the initial 0-draw koutsu check was: if any tile appears three times. But what if a tile appears more than three times? The problem states three tiles initially, so maximum three. But if we draw, the hand size increases. But the initial hand has three tiles.\n\n    #   Therefore, the koutsu check is: if any tile appears three times.\n\n    #   But note: the hand has three tiles. So a tile can appear at most three times.\n\n    #   Let's test with the provided examples.\n\n    #   Example 1: ['1s','2s','3s'] -> no koutsu, then check shuntsu: [1,2,3] -> yes, output 0.\n    #   Example 2: ['9m','9m','9m'] -> koutsu: '9m' appears three times -> output 0.\n    #   Example 3: ['3p','9m','2p'] -> \n    #       Frequency: '3p':1, '9m':1, '2p':1 -> no koutsu.\n    #       Shuntsu: \n    #           m: [9] -> no.\n    #           p: [3,2] -> sorted [2,3] -> only two numbers -> no three consecutive.\n    #       Then check for 1 draw: no tile appears twice.\n    #           For suit p: check x in [1,8]: \n    #               x=2: 2 in {2,3} and 3 in {2,3} -> yes, output 1.\n\n    #   Another example: ['1m','1m','4m'] -> \n    #       Frequency: '1m':2 -> output 1.\n\n    #   Another example: ['1m','2m','4m'] -> \n    #       Frequency: all once.\n    #       Shuntsu: m: [1,2,4] -> not three consecutive.\n    #       Then check for 1 draw: \n    #           For suit m: check x in [1,8]:\n    #               x=1: 1 and 2 present -> output 1.\n\n    #   But note: the example ['1m','2m','4m'] can be fixed by drawing 3m (one draw) to complete [1m,2m,3m]. Correct.\n\n    #   However, consider a hand like ['1m','1m','1m'] — this is caught by the koutsu check (appears three times) -> 0.\n\n    #   Consider a hand like ['1m','1m','2m'] — caught by the frequency check (1m appears twice) -> 1.\n\n    #   Consider a hand like ['1m','2m','2m'] — caught by frequency check (2m appears twice) -> 1.\n\n    #   Consider a hand like ['1m','2m','3m'] — caught by shuntsu check -> 0.\n\n    #   Consider a hand like ['1m','2m','4m'] — not caught by 0, then not by frequency, then by consecutive check -> 1.\n\n    #   Consider a hand like ['1m','3m','5m'] — no koutsu, no shuntsu, no consecutive numbers -> output 2.\n\n    #   But is 2 the minimal? Yes, because:\n    #       Drawing one tile cannot complete a koutsu (no duplicates) and cannot complete a shuntsu (no two consecutive numbers). \n    #       With two draws, we can complete a koutsu by drawing two more of any tile (e.g., draw two 1m to complete [1m,1m,1m]), or complete a shuntsu by drawing two appropriate tiles (e.g., draw 2m and 4m to complete [1m,2m,3m] but wait, we have 1m,3m,5m and 2m,4m: then we have [1m,2m,3m] and [4m,5m,?] — actually, we don't need to complete two sequences. We only need one mentsu. So drawing 2m and 4m does not give a mentsu. \n\n    #       Actually, to complete a shuntsu, we need three consecutive numbers. We can choose to draw two tiles to form a koutsu (e.g., draw two 1m) or draw two tiles to form a shuntsu (e.g., draw 2m and 4m doesn't work, but we can draw two 2m and 3m to form [1m,2m,3m] and [5m] left — wait, we drew two tiles (2m and 3m) and now have [1m,2m,3m,5m] — that includes a shuntsu [1m,2m,3m]. \n\n    #       But note: the two draws are two separate tiles. We can draw any two tiles. So we can draw 2m and 3m (two draws) to complete the shuntsu [1m,2m,3m]. \n\n    #       Therefore, two draws suffice.\n\n    #   The code outputs 2 for ['1m','3m','5m'], which is correct.\n\n    #   However, there might be a scenario where one draw is not enough but two draws are needed, and the code correctly outputs 2.\n\n    #   Final code:\n\n    #   Note: We must use `defaultdict` for counting and grouping.\n\n    #   Let's code accordingly.\n\n    #   Edge: if the input has less than three tiles, but the problem states three strings, so we assume three.\n\n    #   Code:\n\n    from collections import defaultdict\n\n    data = input().split()\n    if len(data) != 3:\n        # According to the problem, there are three strings. But if not, fallback to 0? Or error.\n        # The problem says the only line contains three strings.\n        # But to be safe, we assume three.\n        # If there are less, then we pad with None or something? But the problem guarantees three.\n        # We'll assume three.\n        pass\n\n    tiles = data\n\n    # Count frequency\n    freq = defaultdict(int)\n    for tile in tiles:\n        freq[tile] += 1\n\n    # Check for koutsu: any tile appears three times.\n    if any(count >= 3 for count in freq.values()):\n        print(0)\n        return\n\n    # Group by suit\n    suits = defaultdict(list)\n    for tile in tiles:\n        num_char = tile[0]\n        # It's guaranteed to be a digit from '1' to '9'\n        num = int(num_char)\n        suit = tile[1]\n        suits[suit].append(num)\n\n    # Check for shuntsu: in any suit, three consecutive numbers (distinct) exist.\n    for suit, nums in suits.items():\n        unique_nums = set(nums)\n        sorted_nums = sorted(unique_nums)\n        n = len(sorted_nums)\n        if n >= 3:\n            for i in range(n-2):\n                if sorted_nums[i] + 1 == sorted_nums[i+1] and sorted_nums[i+1] + 1 == sorted_nums[i+2]:\n                    print(0)\n                    return\n\n    # Check for one draw:\n    #   Condition 1: any tile appears exactly twice (koutsu candidate)\n    if any(count == 2 for count in freq.values()):\n        print(1)\n        return\n\n    #   Condition 2: any suit has two consecutive numbers (x and x+1) for some x in [1,8]\n    for suit, nums in suits.items():\n        nums_set = set(nums)\n        for x in range(1, 9):\n            if x in nums_set and (x+1) in nums_set:\n                print(1)\n                return\n\n    # Otherwise, two draws needed.\n    print(2)\n\nHowever, note that the above code has a mistake in the koutsu check: the condition `any(count >= 3 for count in freq.values())` will catch any tile appearing three or more times. But the hand has three tiles, so maximum three. But the condition is correct.\n\nBut wait, the initial check for koutsu is done before the shuntsu check. What if a hand has a koutsu and also a shuntsu? The koutsu condition is checked first and outputs 0.\n\nThis is correct.\n\nLet me run through the provided examples with the code:\n\nExample 1: Input: \"1s 2s 3s\"\n  Tiles: ['1s','2s','3s']\n  Frequency: each once -> no koutsu.\n  Suits: s: [1,2,3] -> sorted [1,2,3] -> 1+1==2 and 2+1==3 -> shuntsu -> output 0.\n\nExample 2: Input: \"9m 9m 9m\"\n  Frequency: '9m':3 -> koutsu -> output 0.\n\nExample 3: Input: \"3p 9m 2p\"\n  Frequency: each once -> no koutsu.\n  Suits: \n      m: [9] -> no shuntsu.\n      p: [3,2] -> sorted [2,3] -> only two numbers -> no shuntsu.\n  Then check for one draw: \n      No tile appears twice.\n      Suit p: check x from 1 to 8: \n          x=2: 2 in {2,3} and 3 in {2,3} -> yes -> output 1.\n\nAnother example: Input: \"1m 1m 1m\" -> koutsu (count=3) -> 0.\n\nAnother example: Input: \"1m 1m 2m\" -> count['1m']=2 -> 1.\n\nAnother example: Input: \"1m 2m 4m\" -> \n  No koutsu.\n  Suits: m: [1,2,4] -> sorted [1,2,4] -> 1+1==2, but 2+1!=4 -> no shuntsu.\n  Then check for one draw: \n      No tile appears twice.\n      Suit m: check x=1: 1 and 2 present -> output 1.\n\nExample: Input: \"1m 3m 5m\"\n  No koutsu.\n  Suits: m: [1,3,5] -> no three consecutive.\n  Then check for one draw: \n      No tile appears twice.\n      Suit m: check x from 1 to 8: \n          x=1: 1 and 2 -> 2 not present.\n          x=2: 2 and 3 -> 2 not present.\n          x=3: 3 and 4 -> 4 not present.\n          x=4: 4 and 5 -> 4 not present.\n          x=5: 5 and 6 -> 6 not present.\n          ... until 8.\n      No two consecutive -> output 2.\n\nTherefore, the code is ready.\n\nHowever, note: the problem allows drawing any tiles, including duplicates. The above code assumes that we can only complete a koutsu if we have two of the same tile and draw one more. This is correct.\n\nOne more edge: what if the hand has two tiles of the same suit and number, but also a third tile of the same suit and number? Then it's a koutsu and already caught.\n\nCode:\n\nNote: We must import defaultdict.\n\nFinal code:\n",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    data = input().split()\n    if len(data) != 3:\n        print(\"0\")\n        return\n\n    tiles = [t for t in data]\n    \n    # Check for existing koutsu\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for tile in tiles:\n        freq[tile] += 1\n        \n    if any(count >= 3 for count in freq.values()):\n        print(0)\n        return\n        \n    # Check for existing shuntsu\n    suits = defaultdict(list)\n    for tile in tiles:\n        num = int(tile[0])\n        suit = tile[1]\n        suits[suit].append(num)\n        \n    for suit, nums in suits.items():\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if nums[i] + 1 == nums[i+1] and nums[i+1] + 1 == nums[i+2]:\n                print(0)\n                return\n                \n    # Now check how many draws needed\n    # We have three tiles, possibly from different suits\n    # Case 1: All three tiles are the same suit? Then we can try to form a sequence.\n    # But note: they might not be consecutive. Also, even if same suit, they might not form a sequence.\n    # We'll consider each suit separately.\n\n    # First, let's check if we can form a koutsu by drawing one tile for a duplicate.\n    # But note: we might have two of the same tile. Then drawing one more gives koutsu.\n    found = False\n    for tile, count in freq.items():\n        if count == 2:\n            print(1)\n            return\n            \n    # Check for shuntsu possibility with one draw: \n    # We look for two consecutive numbers in the same suit, then we can draw the next one.\n    for suit, nums in suits.items():\n        nums_set = set(nums)\n        for num in nums_set:\n            if num + 1 in nums_set and num + 2 in nums_set:\n                print(0)\n                return\n                \n        # Check for two consecutive numbers, and the next one missing.\n        for num in nums_set:\n            if (num + 1 in nums_set and (num + 2) not in nums_set) or \\\n               (num - 1 in nums_set and (num - 2) not in nums_set):\n                # But note: if we have two consecutive, we can complete the sequence by drawing one tile.\n                # However, we must ensure that the two consecutive are present and the third is missing.\n                # Actually, we are iterating over the set. Let's restructure.\n                pass\n                \n    # Let's break down the cases for one draw for shuntsu:\n    # We need to find a suit where there are two numbers that are consecutive or can be completed by one draw.\n    # Actually, we can check: for a given suit, if there are two numbers that are consecutive, then drawing the third completes the sequence.\n    # Also, if there is a single number, but two draws might be needed, but we are looking for minimal draws (which is 1 or 2).\n    # But note: the problem asks for minimum draws. We already checked 0 and 1. Now we need to see if 2 draws are needed.\n\n    # Alternatively, we can consider that after drawing one tile, we might not complete a mentsu. But drawing two tiles might complete one.\n\n    # Since the hand has three tiles, after drawing two tiles, we will have five. But we only need one mentsu (three tiles). So we can form a mentsu from four or five tiles? Actually, we can use any three tiles from the hand.\n\n    # However, the problem is to find the minimum number of draws. We already know 0 and 1 are not sufficient. Then we check if 2 is sufficient.\n\n    # But note: sometimes drawing two tiles might form a mentsu. For example, if the hand is [1m, 1m, 4m], then drawing two 2m and 3m would form [1m, 2m, 3m] and [4m] left. But wait, actually we can form one mentsu with three tiles. So we can choose [2m, 3m, 4m] if we draw two tiles (2m and 3m). But note, we can also consider other possibilities.\n\n    # However, the problem requires the minimum number of draws. We have already considered 0 and 1. Now, if neither 0 nor 1 works, then the answer is 2.\n\n    # But wait, is there any scenario where drawing one tile doesn't form a mentsu but drawing two does? Yes, as in the example above.\n\n    # However, note that the hand has three tiles. After drawing two, we have five. We need to check if among these five tiles, there is at least one mentsu (any three tiles forming a koutsu or shuntsu).\n\n    # But the problem does not specify that the mentsu must use the newly drawn tiles. It can use any three tiles from the hand.\n\n    # Therefore, we need to check if with two draws we can form a mentsu.\n\n    # However, note that we are allowed to draw any tiles. So we can choose to draw two tiles that help form a mentsu.\n\n    # But the minimal number of draws is either 0, 1, or 2. Why not more? Because with three tiles, if we cannot form a mentsu with 0 or 1 draws, then drawing two tiles will allow us to form a mentsu (since we can choose which two to draw). \n\n    # Actually, consider the worst-case scenario: three completely unrelated tiles (different suits and non-consecutive). Then drawing two tiles: we can draw two tiles to form a triplet or part of a sequence in one suit. But note, we can form a triplet if we draw two copies of one tile (if we have one copy). Or we can form a sequence if we have two tiles in the same suit and draw the missing one and another arbitrary tile? Actually, no, because we need exactly three tiles for a mentsu.\n\n    # However, observe: if we have three tiles, and we draw two more, we have five. We can pick any three to form a mentsu. But note, the problem does not require using all tiles. So we only need one mentsu (three tiles) anywhere in the hand.\n\n    # Therefore, the minimal number of draws is at most 2.\n\n    # Let's reframe: \n    # - 0: already have a mentsu.\n    # - 1: can we form a mentsu by drawing one tile?\n    #   - For koutsu: if we have two identical tiles, drawing one more completes the triplet.\n    #   - For shuntsu: if we have two consecutive numbers in the same suit, drawing the next number completes the sequence.\n    # - 2: otherwise, we can always form a mentsu by drawing two tiles (for example, by completing a triplet or a sequence).\n\n    # But wait, is it always 2 if we cannot do with 0 or 1? Consider having two tiles of the same suit but not consecutive. For example, [1m, 4m, 9p]. Then drawing two tiles: we can draw two 2m and 3m to form [1m,2m,3m] (but note, we already have 1m, so drawing 2m and 3m forms a sequence). However, we could also draw two 4m to form a triplet (but we only have one 4m). \n\n    # Actually, the minimal draws is 2 because we cannot form a mentsu with one draw. \n\n    # Therefore, the solution is:\n    #   0 if already have a mentsu.\n    #   1 if we can form a mentsu by drawing one tile.\n    #   Otherwise, 2.\n\n    # But wait, what about the case where we have two tiles of the same number but different suits? For example, [1m, 1p, 1s]. This is not a koutsu because they must be the same tile (same suit). So no koutsu. For shuntsu, they are not in the same suit. So no shuntsu. Then we need to draw two more to form a koutsu? Actually, no: we can draw two more 1m to form [1m, 1m, 1m] (koutsu). Or we can draw one 2m and one 3m to form a shuntsu with the 1m? But we don't have two 1m in the same suit. \n\n    # Actually, the example [1m, 1p, 1s] requires two draws to form a koutsu (by drawing two 1m). \n\n    # However, note that we can draw any tiles, including those already present. So we can draw two 1m tiles. \n\n    # But the problem says: \"she can draw any tiles she wants, including those already in her hand.\" So yes, we can draw duplicates.\n\n    # Therefore, the logic for one draw is:\n    #   - For koutsu: if any tile appears twice, then drawing one more of that tile completes the triplet.\n    #   - For shuntsu: if in any suit, two consecutive numbers exist, then drawing the next number completes the sequence.\n\n    # What if we have two tiles of the same number but different suits? Then we cannot form a koutsu with one draw unless we draw two of the same tile (same suit). But wait, we are only allowed to draw one tile. So if we have [1m, 1p], then drawing one tile: we can draw another 1m to complete the koutsu (if the third tile is not 1m). But wait, the hand is three tiles. The example [1m, 1p, 1s] has three distinct suits. To complete a koutsu for 1m, we need to draw two 1m (since we only have one). \n\n    # Actually, in [1m, 1p, 1s], we have one 1m. So to complete a koutsu for 1m, we need two more 1m. Similarly for 1p and 1s. So we need two draws.\n\n    # But note, we can also consider forming a shuntsu. However, the numbers are all 1, so they are not consecutive. \n\n    # Therefore, the corrected logic for one draw:\n    #   - Koutsu: if there exists a tile (same suit and number) that appears at least twice, then drawing one more makes triplet -> 1 draw.\n    #   - Shuntsu: if there exists a suit with two numbers that are consecutive (n, n+1), then drawing n+2 (or n-2 if n-1 is missing) completes the sequence -> 1 draw.\n\n    # But what if we have two tiles in the same suit but not consecutive? For example, [1m, 4m, 2p]. Then we can draw 2m and 3m to form [1m,2m,3m]? No, because we only draw two tiles, but we need three for a sequence. Actually, we can draw one tile to form a sequence if we have two consecutive numbers. In this case, we don't have any two consecutive in the same suit. \n\n    # However, note that we might have multiple suits. The hand is [1m, 4m, 2p]. We can draw one tile: say 2m. Then we have [1m,4m,2p,2m]. Now, we can form a koutsu for 2m? Only if there were two 2m originally, but there was none. Or a sequence? In m: [1m,2m,4m] is not a sequence. In p: only one tile. So no mentsu.\n\n    # Another example: [1m, 2m, 4m]. Then we can draw 3m to form [1m,2m,3m] (shuntsu). So one draw.\n\n    # Therefore, the one-draw condition is met if:\n    #   - There is a tile with count >= 2 (for koutsu) OR\n    #   - There is a suit with two consecutive numbers (for shuntsu).\n\n    # Now, what if the hand has three tiles, but they are all the same suit and numbers? For example, [1m, 1m, 1m] -> koutsu, so 0 draws. [1m, 2m, 3m] -> shuntsu, 0 draws.\n\n    # Another example: [1m, 1m, 2m] -> koutsu for 1m? Not yet (needs three 1m). But shuntsu: 1m and 2m are consecutive, but we need three. So we can draw 3m to complete the sequence (one draw). Also, we can draw one more 1m to complete the koutsu (one draw). So either way, one draw suffices.\n\n    # But note: the problem asks for the minimum number of draws. So we check both possibilities and take the minimum (which is 1 in this case).\n\n    # However, the above code checks for koutsu first (if any tile appears three times, output 0). Then checks for shuntsu (if any suit has three consecutive numbers, output 0). Then checks if any tile appears twice (output 1). Then checks if any suit has two consecutive numbers (output 1). \n\n    # But wait, the example [1m, 1m, 2m] is caught by the second part (after checking for three consecutive, which is not the case) then by the frequency check (two 1m) so it outputs 1, which is correct.\n\n    # Now, what about [1m, 2m, 4m]? \n    #   - No triplet (each tile appears once).\n    #   - No three consecutive in m: [1,2,4] -> no.\n    #   - Frequency: each tile once -> no two same.\n    #   - Then check for consecutive in m: we have 1 and 2 (consecutive) but not 3. So we can complete the sequence by drawing 3m (one draw). So the code should output 1.\n\n    # But in our code, after the frequency check, we check for shuntsu again (the second part). In the second part, we check for any suit and for any number `num` in the suit's set, if `num+1` and `num+2` are present, then output 0 (but we already did that). Then we check for two consecutive numbers (without the third). \n\n    # Actually, the second part of the code (after the initial checks) is incorrect. We should check for the possibility of completing a sequence with one draw. \n\n    # Revised plan for one-draw condition (after 0 is not found):\n\n    #   - For koutsu: if any tile appears twice, then one draw (to make three) suffices.\n    #   - For shuntsu: if in any suit, there exists a number `x` such that `x` and `x+1` are present, then drawing `x+2` completes the sequence (so one draw). Similarly, if `x-1` and `x` are present, then drawing `x-2` completes the sequence.\n\n    # But note: the sequence must be of three consecutive numbers. So we need exactly three numbers. However, if we have two numbers that are consecutive, we can complete the sequence by drawing the third. \n\n    # Therefore, we can modify the code:\n\n    # After checking for 0 draws, check for 1 draw:\n\n    #   For each suit:\n    #       Let S be the set of numbers in that suit.\n    #       For each number x in S:\n    #           if x+1 in S and x+2 in S: then we already have a sequence (should have been caught in the 0 draw check, so skip).\n    #           if x-1 in S and x-2 in S: same.\n    #       But for one draw, we look for:\n    #           if x+1 in S and (x+2 not in S): then drawing x+2 completes the sequence.\n    #           if x-1 in S and (x-2 not in S): then drawing x-2 completes the sequence.\n\n    # However, note that the hand might have multiple suits. We only care about the suit we are checking.\n\n    # Alternatively, we can check for each suit:\n    #   Sort the list of numbers for that suit.\n    #   Then, for each pair of consecutive numbers, check if the next one is missing (then one draw needed) or the previous one is missing (but we already have two consecutive).\n\n    # But note: the sequence must be three consecutive. So if we have [x, x+1] in the suit, then we can complete the sequence by drawing x+2. Similarly, if we have [x, x+1] and x-1 is missing, then we can complete the sequence by drawing x-2? Actually, no: the sequence must be three consecutive numbers. The sequence [x-2, x-1, x] requires x-2 and x-1, but we only have x and x-1 (missing x-2). So we need to draw x-2.\n\n    # But wait, the sequence [x-2, x-1, x] is valid. So if we have two numbers that are consecutive, we can complete the sequence in two ways: \n    #   - If the next number is missing, draw it.\n    #   - If the previous number is missing, draw it.\n\n    # However, note: we might have [x, x+1] and also [x, x-1] (if x-1 is present). But that's okay because we are checking per suit.\n\n    # Therefore, we can check for one-draw as follows:\n\n    #   For each suit in the hand:\n    #       Let nums = sorted list of numbers in that suit.\n    #       For each number x in nums:\n    #           if (x+1 in the set and x+2 in the set): continue (already handled in 0 draws)\n    #           if (x-1 in the set and x-2 in the set): continue\n    #           if (x+1 in the set and (x+2 not in the set)): then we can complete by drawing x+2 -> one draw.\n    #           if (x-1 in the set and (x-2 not in the set)): then we can complete by drawing x-2 -> one draw.\n\n    # But wait, what if we have [1, 3] in a suit? Then we don't have consecutive numbers, so no one-draw for shuntsu.\n\n    # However, what if we have [1, 2] in a suit? Then we can complete by drawing 3 (one draw). Similarly, if we have [2, 3], we can draw 1.\n\n    # But note: the sequence can be in any order. The definition says sequential numbered tiles. So [1,2,3] is valid, [2,3,4] is valid, etc.\n\n    # Now, combining both koutsu and shuntsu for one-draw:\n\n    #   if (any tile appears twice) OR (there exists a suit with two consecutive numbers and the third missing) then answer 1.\n\n    # However, note: if we have two consecutive numbers in a suit, but the third is missing, then one draw suffices. But if we have two tiles of the same kind, one draw suffices for koutsu.\n\n    # So the code after the 0-check can be:\n\n    #   if any(count == 2 for count in freq.values()):\n    #       print(1)\n    #       return\n\n    #   for suit, nums in suits.items():\n    #       nums_set = set(nums)\n    #       nums_sorted = sorted(nums_set)\n    #       for x in nums_sorted:\n    #           if (x+1 in nums_set and x+2 in nums_set):\n    #               # This means we have a sequence, but we already checked for three consecutive, so this shouldn't happen because we didn't have three consecutive before? Actually, we did a separate check for three consecutive (0 draws) so if we get here, we don't have three consecutive. But wait, we did a check for three consecutive numbers (shuntsu) for 0 draws. So if we have three consecutive, we would have printed 0 and returned.\n    #           else:\n    #               if (x+1 in nums_set and (x+2 not in nums_set)):\n    #                   print(1)\n    #                   return\n    #               if (x-1 in nums_set and (x-2 not in nums_set)):\n    #                   print(1)\n    #                   return\n\n    # But wait, the above check for shuntsu might not be efficient. We can simplify:\n\n    #   For a given suit, let the set of numbers be S.\n    #   We want to know if there exists an x such that (x, x+1) are in S and x+2 not in S, or (x, x+1) are in S and x-2 not in S (but note, we need three consecutive, so if we have (x, x+1) and x+2 missing, then we can complete the sequence by drawing x+2. Similarly, if we have (x, x+1) and x-2 missing, then we can complete the sequence by drawing x-2? Actually, no: the sequence must be three consecutive numbers. The sequence ending at x+1 would be [x-1, x, x+1] but we don't have x-1. The sequence starting at x would be [x, x+1, x+2]. \n\n    #   Actually, we can only complete the sequence [x, x+1, x+2] by drawing x+2 if we have x and x+1. Similarly, we can complete [x-2, x-1, x] by drawing x-2 if we have x-1 and x.\n\n    #   But note: the sequence [x-2, x-1, x] requires x-2, x-1, and x. If we have x and x-1, then we are missing x-2. So we can complete by drawing x-2.\n\n    #   However, what if we have x-1 and x, but not x+1? Then we cannot form a sequence with x-1 and x because the next number must be x+1 for the sequence [x-1, x, x+1]. But wait, the sequence [x-2, x-1, x] requires x-2, and the sequence [x, x+1, x+2] requires x+2. \n\n    #   Actually, the sequence must be three consecutive numbers. So having two consecutive numbers allows completion by drawing either the previous or the next number, whichever is missing, but only if the two consecutive numbers are part of a potential three-consecutive set.\n\n    #   Example: \n    #       [1,2] -> can be part of [1,2,3] (draw 3) or [0,1,2] (but 0 is invalid). So only draw 3.\n    #       [2,3] -> can be part of [1,2,3] (draw 1) or [2,3,4] (draw 4).\n    #       [3,4] -> draw 2 or 5.\n\n    #   Therefore, for two consecutive numbers (x, x+1), we can complete the sequence by drawing x-2 (if x-2 exists in the valid range [1,9]) or x+2 (if x+2 <=9). But note, the sequence must be three consecutive numbers, so we are allowed to draw either the one that completes the left side or the right side.\n\n    #   However, the problem does not restrict the drawn tile to be within the range [1,9] for the sequence? Actually, the tiles are from 1 to 9. So if x=1 and we have [1,2], then we cannot draw 0 (invalid). So we can only draw 3.\n\n    #   Similarly, if x=9 and we have [8,9], then we cannot draw 11 (invalid) so we must draw 7 (to form [7,8,9]).\n\n    #   But note: the sequence [7,8,9] is valid.\n\n    #   Therefore, for two consecutive numbers (x, x+1):\n    #       If x-2 >= 1, then we can draw x-2 to form [x-2, x-1, x] (if x-1 is present, which it is because we have x and x+1, so x-1 must be present? No, we have x and x+1, but x-1 might not be present. Actually, we have x and x+1, but we don't necessarily have x-1. \n\n    #   Correction: We have x and x+1, but we don't have x-1. Then to form the sequence [x-2, x-1, x], we would need x-1 and x-2, but we don't have x-1. So we cannot form [x-2, x-1, x] because we lack x-1. \n\n    #   Similarly, to form [x, x+1, x+2], we need x+2.\n\n    #   Therefore, the condition for one-draw via shuntsu is: \n    #       In a suit, there exists a pair of consecutive numbers (x, x+1) such that the number x-2 is not in the suit (but we don't care about x-2, we care about x+2) — actually, no: we just need to complete the sequence. The only way to complete the sequence with the existing two consecutive numbers is by drawing the next number (x+2) if x+1 is the highest, or the previous number (x-2) if x-1 is the lowest? \n\n    #   Actually, no: the sequence must be three consecutive numbers. If we have [x, x+1], then the only possible sequences that include these two are:\n    #       [x-1, x, x+1] (if x-1 exists) or [x, x+1, x+2] (if x+2 exists).\n    #   But we don't have x-1 or x+2. We only have x and x+1. \n\n    #   Wait, no: the sequence [x-1, x, x+1] requires x-1, which we don't have. Similarly, [x, x+1, x+2] requires x+2. \n\n    #   Therefore, to complete the sequence, we need to draw either x-1 and x-2 (to form [x-2, x-1, x]) but that would require two draws, or x+2 (one draw). \n\n    #   But note: we are allowed to draw any tiles. We can draw two tiles to complete a different sequence? However, the one-draw condition is for one draw. \n\n    #   Actually, the one-draw condition for shuntsu is: if there exists a suit and a number x such that x and x+1 are present, and also x+2 is available (even if we don't have it, we can draw it) then we can complete the sequence by drawing x+2. Similarly, if x-1 is present and x-2 is available, then we can complete by drawing x-2? \n\n    #   But wait, we don't need to have the entire sequence already, just two consecutive numbers and the ability to draw the third. \n\n    #   Therefore, the condition is: \n    #       In a suit, if there exists a number x such that x and x+1 are present (in any quantity) and x+2 is not present, then we can draw x+2 to complete the sequence (one draw). Similarly, if there exists a number x such that x and x+1 are present and x-2 is not present, then we can draw x-2 to complete the sequence [x-2, x-1, x] (but note, we don't have x-1! We only have x and x+1). \n\n    #   This is confusing.\n\n    # Let me clarify with examples:\n    #   Hand: [1m, 2m] (and third tile is irrelevant, but we have three tiles). Actually, the hand has three tiles. But for the sake of argument, consider only these two for the suit m. Then we can draw 3m to complete [1m,2m,3m]. That's one draw.\n    #   Hand: [2m, 3m] -> draw 1m to complete [1m,2m,3m] (but wait, we don't have 1m, so we draw 1m). But then the sequence is [1m,2m,3m] — valid. So yes, one draw.\n\n    #   However, note that in the sequence [1m,2m,3m], we require 1m, 2m, and 3m. We have 2m and 3m, so we draw 1m. \n\n    #   Similarly, for [3m,4m]: we can draw 2m to complete [2m,3m,4m] (if we don't have 2m) or 5m to complete [3m,4m,5m].\n\n    #   But what if we have [1m,2m,4m]? Then we can draw 3m to complete [1m,2m,3m] (but we have 4m too, but that's okay). \n\n    #   Therefore, the condition is: \n    #       For a suit, if there exists two numbers x and x+1 (not necessarily adjacent in the sorted list, but present), then we can complete the sequence by drawing x+2 (if the sequence [x, x+1, x+2] is valid) or x-2 (if the sequence [x-2, x-1, x] is valid). But note, to form [x-2, x-1, x], we must have x-1 (which we don't necessarily have). \n\n    #   Actually, no: the sequence [x-2, x-1, x] requires x-2, x-1, and x. We have x, but not x-1 and x-2. So we cannot complete [x-2, x-1, x] with one draw because we need two new tiles.\n\n    #   Similarly, to complete [x, x+1, x+2], we only need x+2 (one draw) if we have x and x+1.\n\n    #   And to complete [x-2, x-1, x], we need x-1 and x-2 (two draws).\n\n    #   Therefore, the only one-draw completion for shuntsu is when we have two consecutive numbers and the next number is missing (or the previous number is missing for a sequence that extends to the left? No, because extending to the left requires two additional numbers).\n\n    #   Actually, consider: [2m,3m] — we can complete to [1m,2m,3m] by drawing 1m. Here, we are completing a sequence that starts at 1m. But note, the sequence [1m,2m,3m] is valid. We are drawing 1m even though we don't have 1m in the hand originally. \n\n    #   The condition is: we need to have two consecutive numbers and the third number (either immediately before the smallest or immediately after the largest) is not present. But note, the sequence can be any three consecutive numbers. \n\n    #   Actually, the sequence must be three consecutive numbers. So if we have [x, x+1], then the only sequences that include these two are:\n    #       [x-1, x, x+1] (if x-1 exists) and [x, x+1, x+2] (if x+2 exists).\n    #   But we don't care about existence in the hand, we care about availability to draw. We can draw any tile. \n\n    #   However, the problem is: we want to know if we can complete a sequence with one draw. So for [x, x+1], we can complete [x, x+1, x+2] by drawing x+2 (provided x+2 is between 1 and 9). Similarly, we can complete [x-1, x, x+1] by drawing x-1 (provided x-1 is between 1 and 9). \n\n    #   But wait, [x-1, x, x+1] requires x-1, which we don't have. So to complete [x-1, x, x+1], we need to draw x-1. And then we have [x-1, x, x+1] — three consecutive numbers.\n\n    #   Similarly, [x, x+1, x+2] requires drawing x+2.\n\n    #   Therefore, for two consecutive numbers (x, x+1), we can complete a sequence by drawing either x-1 (to form [x-1, x, x+1]) or x+2 (to form [x, x+1, x+2]), provided the drawn tile is within [1,9].\n\n    #   Example: \n    #       x=1, x+1=2 -> can draw 0 (invalid) or 3 (valid) -> only 3.\n    #       x=9, x+1=10 (invalid) — so x+1 is not allowed if x=9. But our numbers are from 1 to 9, so x+1 for x=9 is 10, which is invalid. So for x=9, we cannot have x+1.\n\n    #   Therefore, the condition for one-draw for shuntsu is:\n    #       For any suit, and for any number x in that suit (from 1 to 9), if x+1 is also in the suit, then we can complete the sequence by drawing x-1 (if x-1>=1) or x+2 (if x+2<=9). But note, we can choose the smallest number of draws. However, we are only drawing one tile, so we can only draw one of them. But we don't know which one to draw. \n\n    #   Actually, we can complete the sequence in two different ways, but only one of them might be valid (depending on the bounds). \n\n    #   However, the problem asks for the minimum number of draws. If any way to complete a mentsu with one draw exists, then answer 1.\n\n    #   Therefore, we can check for one-draw for shuntsu as follows:\n    #       For each suit:\n    #           Let S be the set of numbers in that suit.\n    #           For each x in S:\n    #               if x+1 in S:\n    #                   if x-1 >= 1:\n    #                       print(1)\n    #                       return\n    #                   else:\n    #                       if x+2 <= 9:\n    #                           print(1)\n    #                           return\n\n    #   But wait, this is not correct. We are not checking if the entire sequence is completable with one draw. We are only checking if we have two consecutive numbers and one of the adjacent numbers is out of bounds (forcing the other direction). \n\n    #   Actually, the above condition is: \n    #       If we have x and x+1, then:\n    #           Option 1: Draw x-1 to complete [x-1, x, x+1] (if x-1 is >=1)\n    #           Option 2: Draw x+2 to complete [x, x+1, x+2] (if x+2 <=9)\n\n    #   But note: we can only draw one tile. So if either option is valid, then one draw suffices.\n\n    #   However, there's a catch: what if we have [2m,3m] and x=2, x+1=3. Then:\n    #       Option 1: draw 1m (valid because 1>=1) -> completes [1m,2m,3m].\n    #       Option 2: draw 4m (valid because 4<=9) -> completes [2m,3m,4m].\n    #   Both are valid, so one draw suffices.\n\n    #   Therefore, the condition is: if there exists a suit and a number x such that x and x+1 are present, and either x-1>=1 or x+2<=9, then one draw suffices.\n\n    #   But note: the bounds are independent. Even if x-1 is out of bounds, we can still draw x+2 if it's in bounds. And vice versa.\n\n    #   However, consider x=8: \n    #       Option 1: draw 7 -> valid.\n    #       Option 2: draw 10 -> invalid.\n    #   So one draw suffices by drawing 7.\n\n    #   Consider x=9: \n    #       x+1=10 is invalid, so we don't even have x+1 in the first place. But our loop is for x in S, and we check if x+1 is in S. For x=9, x+1=10 is not in S, so we skip.\n\n    #   Therefore, the code for one-draw (after checking for 0 draws) is:\n\n    #       if any(count >= 2 for count in freq.values()):\n    #           print(1)\n    #           return\n\n    #       for suit, nums in suits.items():\n    #           nums_set = set(nums)\n    #           for x in nums_set:\n    #               if x+1 in nums_set:\n    #                   if x-1 >= 1 or x+2 <= 9:\n    #                       print(1)\n    #                       return\n\n    #   But wait, this condition is not quite right. We are only checking if there exists any x such that x and x+1 are present and (x-1>=1 or x+2<=9). However, the existence of two consecutive numbers (x, x+1) alone is not enough to guarantee that we can complete the sequence with one draw. We can complete the sequence by drawing either x-1 or x+2, but we require that at least one of these two possibilities is within bounds.\n\n    #   However, note: x-1>=1 is true for x>=2, and x+2<=9 is true for x<=7. But if x=1, then x-1=0 (invalid) but x+2=3 (valid) -> so one-draw is possible.\n    #   If x=8, then x-1=7 (valid) and x+2=10 (invalid) -> one-draw is possible.\n    #   If x=9, then x+1=10 is not present (so we wouldn't enter the if).\n\n    #   But what if x=2: then x-1=1 (valid) and x+2=4 (valid) -> one-draw is possible.\n    #   What if x=7: then x-1=6 (valid) and x+2=9 (valid) -> one-draw is possible.\n\n    #   However, there is a scenario where two consecutive numbers exist but neither x-1 nor x+2 is in bounds? \n    #       x-1>=1 means x>=2, and x+2<=9 means x<=7. So for x=1, x-1 is invalid but x+2 is valid. For x=8, x-1 is valid but x+2 is invalid. For x=9, we don't have x+1. For x=0, not applicable.\n\n    #   Therefore, for any x in [1,9], if x+1 is present and x is in [1,9], then at least one of x-1>=1 or x+2<=9 is true? \n    #       Let's check:\n    #         x=1: x-1=0 -> false, x+2=3 -> true.\n    #         x=2: true and true.\n    #         ...\n    #         x=8: true and false.\n    #         x=9: not applicable (since x+1=10 is not in [1,9]).\n\n    #   So indeed, if we have two consecutive numbers (x, x+1) for any x in [1,8], then one-draw is always possible (because either x-1 is available or x+2 is available).\n\n    #   Therefore, the condition simplifies to: if there exists a suit and a number x in [1,8] such that x and x+1 are present in that suit, then one-draw suffices.\n\n    #   But note: the hand might have three tiles. We are only concerned with the numbers in the suit. And x and x+1 must be in the same suit.\n\n    #   However, what if the two consecutive numbers are in different suits? Then we cannot form a sequence (which requires same suit). \n\n    #   So the code becomes:\n\n    #       if any(count >= 2 for count in freq.values()):\n    #           print(1)\n    #           return\n\n    #       for suit, nums in suits.items():\n    #           nums_set = set(nums)\n    #           for x in range(1, 9):  # x from 1 to 8\n    #               if x in nums_set and x+1 in nums_set:\n    #                   print(1)\n    #                   return\n\n    #   But wait, this will iterate for each suit and for x from 1 to 8. If any suit has x and x+1, then one draw suffices.\n\n    #   However, what if the hand has two tiles of the same suit with consecutive numbers, but also has a duplicate tile in a different suit? For example, [1m, 1m, 2m] — then the first condition (count>=2) catches it and prints 1. So the above code is safe.\n\n    #   But note: the above code does not check for the bounds of the suit's numbers. We are iterating x from 1 to 8, and checking if x and x+1 are in the set of numbers for that suit. This is correct because x+1 must be <=9 (since x<=8).\n\n    #   Therefore, the complete solution is:\n\n    #       Read three tiles.\n    #       Check for 0 draws:\n    #           - If any tile appears three times (koutsu) or any suit has three consecutive numbers (shuntsu), output 0.\n    #       Else, check for 1 draw:\n    #           - If any tile appears twice (can form koutsu by drawing one more), output 1.\n    #           - Else, if any suit has two consecutive numbers (x and x+1 for some x in [1,8]), output 1.\n    #       Else, output 2.\n\n    #   However, note: the 0-draw check for shuntsu was done by checking for three consecutive numbers. We did that initially. But we might have missed some cases? \n\n    #   Let me reexamine the 0-draw shuntsu check:\n\n    #       We did: for each suit, if the sorted list of numbers has three consecutive numbers (i.e., for any i, nums[i] + 1 == nums[i+1] and nums[i+1]+1==nums[i+2]), then output 0.\n\n    #   But what if the three consecutive numbers are not sorted consecutively in the list? For example, [1,2,3] is fine. But what if the list has [1,3,2] — sorting gives [1,2,3] and then we check indices 0,1,2: 1+1=2, 2+1=3 -> valid.\n\n    #   Also, what if the suit has more than three tiles? But initially, we have three tiles total. So each suit can have at most three tiles. \n\n    #   Example: hand [1m,2m,3m] — we sort to [1,2,3] and check: 1+1==2 and 2+1==3 -> valid.\n\n    #   Example: hand [1m,2m,4m] — sorted [1,2,4]: 1+1=2 (ok), 2+1=3 !=4 -> not consecutive.\n\n    #   Example: hand [2m,3m,4m] — sorted [2,3,4]: 2+1=3, 3+1=4 -> valid.\n\n    #   Example: hand [1m,3m,2m] — sorted [1,2,3] -> valid.\n\n    #   So the initial 0-draw shuntsu check is correct.\n\n    #   Therefore, the final code:\n\n    #       Step 1: Read the three tiles.\n    #       Step 2: Count frequency of each tile.\n    #       Step 3: Group by suit and collect numbers.\n    #       Step 4: Check for 0 draws:\n    #           - If any tile appears three times, output 0.\n    #           - Else, for each suit, check if there are three consecutive numbers (by sorting and checking adjacent differences). Output 0 if found.\n    #       Step 5: Check for 1 draw:\n    #           - If any tile appears twice, output 1.\n    #           - Else, for each suit, check if there exists any x in [1,8] such that x and x+1 are in the suit. Output 1.\n    #       Step 6: Output 2.\n\n    #   However, note: the 0-draw shuntsu check must account for the fact that the hand has three tiles. The three consecutive numbers must be three distinct tiles. \n\n    #   But our initial 0-draw shuntsu check does not require distinct tiles? Actually, the representation is three strings. Each string is a tile. The same tile represented as \"1m\" is the same regardless of order.\n\n    #   But the problem says: a shuntsu is made of three sequential numbered tiles in the same suit. So they must be three distinct tiles (unless the same number appears multiple times, but then it wouldn't be a sequence). \n\n    #   However, the example [1m,1m,1m] is a koutsu, not a shuntsu. \n\n    #   So the initial 0-draw shuntsu check is only for three distinct consecutive numbers. But our code for 0-draw shuntsu checks for three consecutive numbers in the sorted list. This implies three distinct numbers. \n\n    #   Example: [1m,1m,2m] — sorted [1,1,2] -> not three consecutive.\n\n    #   So the initial 0-draw shuntsu check is correct.\n\n    #   Let's test the example inputs:\n\n    #   Example 1: ['1s','2s','3s'] -> three consecutive in 's' suit -> 0.\n    #   Example 2: ['9m','9m','9m'] -> koutsu -> 0.\n    #   Example 3: ['3p','9m','2p'] -> \n    #       Frequency: each once -> no koutsu.\n    #       Suits: \n    #           m: [9] -> no consecutive.\n    #           p: [3,2] -> sorted [2,3] -> no three consecutive.\n    #       Then check for 1 draw:\n    #           No tile appears twice -> skip.\n    #           For suit p: check x in [1,8] such that x and x+1 are in {2,3}. \n    #               x=2: 2 and 3 are present -> output 1.\n\n    #   This matches the expected output.\n\n    #   Another example: ['1m','1m','2m'] -> \n    #       Frequency: '1m' appears twice -> output 1.\n\n    #   Another example: ['1m','2m','4m'] -> \n    #       No koutsu.\n    #       Shuntsu: [1,2,4] -> not three consecutive.\n    #       Then check for 1 draw:\n    #           No tile appears twice.\n    #           Suit m: [1,2,4] -> \n    #               x=1: 1 and 2 are present -> output 1.\n\n    #   But wait, in ['1m','2m','4m'], we can draw 3m to complete [1m,2m,3m] (shuntsu). So one draw is correct.\n\n    #   However, note: the hand has three tiles. After drawing 3m, we have [1m,2m,3m,4m]. We can form the shuntsu [1m,2m,3m]. \n\n    #   But what if the hand is ['1m','2m','4m'] and we draw 3m, then we have four tiles. But the problem does not require to use all tiles, only to have at least one mentsu. \n\n    #   Therefore, the solution is:\n\n    #       Read three tiles.\n    #       Check for 0 draws (koutsu or shuntsu).\n    #       Check for 1 draw (either by completing a koutsu with one duplicate or completing a shuntsu by adding one tile to two consecutive numbers in the same suit).\n    #       Otherwise, output 2.\n\n    #   However, note: the problem allows drawing any tiles, including duplicates. So if we have ['1m','1m','1m'] we output 0. If we have ['1m','1m','2m'] we output 1 (by drawing one more 1m). But also, we could draw one 2m to complete the sequence [1m,2m,?] — no, we need three for a sequence. Actually, with ['1m','1m','2m'], drawing one 2m gives ['1m','1m','2m','2m'] — now we have two 2m, but no three consecutive and no three 1m (only two). But wait, we can form a koutsu for 1m by drawing one more 1m. Or for 2m by drawing two more 2m (but that's two draws). So the minimal is one draw (for koutsu of 1m).\n\n    #   The code already handles that.\n\n    #   Let's write the code accordingly.\n\n    #   Note: The input is one line with three space-separated strings.\n\n    #   Steps:\n\n    #       data = input().split()\n    #       if len(data) < 3: \n    #           # But the problem says three strings, so assume three\n    #           print(0)\n    #           return\n\n    #       tiles = data\n\n    #       # Count frequency\n    #       from collections import defaultdict\n    #       freq = defaultdict(int)\n    #       for tile in tiles:\n    #           freq[tile] += 1\n\n    #       # Check for koutsu (three of a kind)\n    #       if any(count == 3 for count in freq.values()) or any(count >= 3 for count in freq.values()):\n    #           # Actually, if any tile appears three times, then koutsu.\n    #           print(0)\n    #           return\n\n    #       # But note: the problem says a koutsu is three identical tiles. So if a tile appears three times, then koutsu. If it appears more than three, that's still a koutsu. But our hand has only three tiles initially, so maximum three.\n\n    #       # Group by suit\n    #       suits = defaultdict(list)\n    #       for tile in tiles:\n    #           num = int(tile[0])\n    #           suit = tile[1]\n    #           suits[suit].append(num)\n\n    #       # Check for shuntsu (three consecutive in the same suit)\n    #       for suit, nums in suits.items():\n    #           nums_sorted = sorted(set(nums))  # Remove duplicates? But we have three tiles, so duplicates would be handled by frequency. But for shuntsu, we need three distinct consecutive numbers.\n    #           # But note: shuntsu requires three distinct tiles (same number not allowed). \n    #           # However, if there are duplicates, then we cannot form a sequence with three distinct consecutive numbers. \n    #           # But our frequency check already ensured no triplet, but duplicates might exist.\n    #           # Example: [1m,1m,2m] -> for suit m: [1,1,2] -> sorted [1,1,2] -> not three consecutive.\n    #           n = len(nums_sorted)\n    #           if n >= 3:\n    #               for i in range(n-2):\n    #                   if nums_sorted[i] + 1 == nums_sorted[i+1] and nums_sorted[i+1] + 1 == nums_sorted[i+2]:\n    #                       print(0)\n    #                       return\n\n    #       # Check for 1 draw:\n    #       #   Condition 1: any tile appears twice (koutsu candidate)\n    #       if any(count == 2 for count in freq.values()):\n    #           print(1)\n    #           return\n\n    #       #   Condition 2: any suit has two consecutive numbers (x and x+1) for some x in [1,8]\n    #       for suit, nums in suits.items():\n    #           nums_set = set(nums)\n    #           for x in range(1, 9):\n    #               if x in nums_set and x+1 in nums_set:\n    #                   print(1)\n    #                   return\n\n    #       # Otherwise, need two draws.\n    #       print(2)\n\n    #   However, wait: the initial 0-draw koutsu check was: if any tile appears three times. But what if a tile appears more than three times? The problem states three tiles initially, so maximum three. But if we draw, the hand size increases. But the initial hand has three tiles.\n\n    #   Therefore, the koutsu check is: if any tile appears three times.\n\n    #   But note: the hand has three tiles. So a tile can appear at most three times.\n\n    #   Let's test with the provided examples.\n\n    #   Example 1: ['1s','2s','3s'] -> no koutsu, then check shuntsu: [1,2,3] -> yes, output 0.\n    #   Example 2: ['9m','9m','9m'] -> koutsu: '9m' appears three times -> output 0.\n    #   Example 3: ['3p','9m','2p'] -> \n    #       Frequency: '3p':1, '9m':1, '2p':1 -> no koutsu.\n    #       Shuntsu: \n    #           m: [9] -> no.\n    #           p: [3,2] -> sorted [2,3] -> only two numbers -> no three consecutive.\n    #       Then check for 1 draw: no tile appears twice.\n    #           For suit p: check x in [1,8]: \n    #               x=2: 2 in {2,3} and 3 in {2,3} -> yes, output 1.\n\n    #   Another example: ['1m','1m','4m'] -> \n    #       Frequency: '1m':2 -> output 1.\n\n    #   Another example: ['1m','2m','4m'] -> \n    #       Frequency: all once.\n    #       Shuntsu: m: [1,2,4] -> not three consecutive.\n    #       Then check for 1 draw: \n    #           For suit m: check x in [1,8]:\n    #               x=1: 1 and 2 present -> output 1.\n\n    #   But note: the example ['1m','2m','4m'] can be fixed by drawing 3m (one draw) to complete [1m,2m,3m]. Correct.\n\n    #   However, consider a hand like ['1m','1m','1m'] — this is caught by the koutsu check (appears three times) -> 0.\n\n    #   Consider a hand like ['1m','1m','2m'] — caught by the frequency check (1m appears twice) -> 1.\n\n    #   Consider a hand like ['1m','2m','2m'] — caught by frequency check (2m appears twice) -> 1.\n\n    #   Consider a hand like ['1m','2m','3m'] — caught by shuntsu check -> 0.\n\n    #   Consider a hand like ['1m','2m','4m'] — not caught by 0, then not by frequency, then by consecutive check -> 1.\n\n    #   Consider a hand like ['1m','3m','5m'] — no koutsu, no shuntsu, no consecutive numbers -> output 2.\n\n    #   But is 2 the minimal? Yes, because:\n    #       Drawing one tile cannot complete a koutsu (no duplicates) and cannot complete a shuntsu (no two consecutive numbers). \n    #       With two draws, we can complete a koutsu by drawing two more of any tile (e.g., draw two 1m to complete [1m,1m,1m]), or complete a shuntsu by drawing two appropriate tiles (e.g., draw 2m and 4m to complete [1m,2m,3m] but wait, we have 1m,3m,5m and 2m,4m: then we have [1m,2m,3m] and [4m,5m,?] — actually, we don't need to complete two sequences. We only need one mentsu. So drawing 2m and 4m does not give a mentsu. \n\n    #       Actually, to complete a shuntsu, we need three consecutive numbers. We can choose to draw two tiles to form a koutsu (e.g., draw two 1m) or draw two tiles to form a shuntsu (e.g., draw 2m and 4m doesn't work, but we can draw two 2m and 3m to form [1m,2m,3m] and [5m] left — wait, we drew two tiles (2m and 3m) and now have [1m,2m,3m,5m] — that includes a shuntsu [1m,2m,3m]. \n\n    #       But note: the two draws are two separate tiles. We can draw any two tiles. So we can draw 2m and 3m (two draws) to complete the shuntsu [1m,2m,3m]. \n\n    #       Therefore, two draws suffice.\n\n    #   The code outputs 2 for ['1m','3m','5m'], which is correct.\n\n    #   However, there might be a scenario where one draw is not enough but two draws are needed, and the code correctly outputs 2.\n\n    #   Final code:\n\n    #   Note: We must use `defaultdict` for counting and grouping.\n\n    #   Let's code accordingly.\n\n    #   Edge: if the input has less than three tiles, but the problem states three strings, so we assume three.\n\n    #   Code:\n\n    from collections import defaultdict\n\n    data = input().split()\n    if len(data) != 3:\n        # According to the problem, there are three strings. But if not, fallback to 0? Or error.\n        # The problem says the only line contains three strings.\n        # But to be safe, we assume three.\n        # If there are less, then we pad with None or something? But the problem guarantees three.\n        # We'll assume three.\n        pass\n\n    tiles = data\n\n    # Count frequency\n    freq = defaultdict(int)\n    for tile in tiles:\n        freq[tile] += 1\n\n    # Check for koutsu: any tile appears three times.\n    if any(count >= 3 for count in freq.values()):\n        print(0)\n        return\n\n    # Group by suit\n    suits = defaultdict(list)\n    for tile in tiles:\n        num_char = tile[0]\n        # It's guaranteed to be a digit from '1' to '9'\n        num = int(num_char)\n        suit = tile[1]\n        suits[suit].append(num)\n\n    # Check for shuntsu: in any suit, three consecutive numbers (distinct) exist.\n    for suit, nums in suits.items():\n        unique_nums = set(nums)\n        sorted_nums = sorted(unique_nums)\n        n = len(sorted_nums)\n        if n >= 3:\n            for i in range(n-2):\n                if sorted_nums[i] + 1 == sorted_nums[i+1] and sorted_nums[i+1] + 1 == sorted_nums[i+2]:\n                    print(0)\n                    return\n\n    # Check for one draw:\n    #   Condition 1: any tile appears exactly twice (koutsu candidate)\n    if any(count == 2 for count in freq.values()):\n        print(1)\n        return\n\n    #   Condition 2: any suit has two consecutive numbers (x and x+1) for some x in [1,8]\n    for suit, nums in suits.items():\n        nums_set = set(nums)\n        for x in range(1, 9):\n            if x in nums_set and (x+1) in nums_set:\n                print(1)\n                return\n\n    # Otherwise, two draws needed.\n    print(2)\n\nHowever, note that the above code has a mistake in the koutsu check: the condition `any(count >= 3 for count in freq.values())` will catch any tile appearing three or more times. But the hand has three tiles, so maximum three. But the condition is correct.\n\nBut wait, the initial check for koutsu is done before the shuntsu check. What if a hand has a koutsu and also a shuntsu? The koutsu condition is checked first and outputs 0.\n\nThis is correct.\n\nLet me run through the provided examples with the code:\n\nExample 1: Input: \"1s 2s 3s\"\n  Tiles: ['1s','2s','3s']\n  Frequency: each once -> no koutsu.\n  Suits: s: [1,2,3] -> sorted [1,2,3] -> 1+1==2 and 2+1==3 -> shuntsu -> output 0.\n\nExample 2: Input: \"9m 9m 9m\"\n  Frequency: '9m':3 -> koutsu -> output 0.\n\nExample 3: Input: \"3p 9m 2p\"\n  Frequency: each once -> no koutsu.\n  Suits: \n      m: [9] -> no shuntsu.\n      p: [3,2] -> sorted [2,3] -> only two numbers -> no shuntsu.\n  Then check for one draw: \n      No tile appears twice.\n      Suit p: check x from 1 to 8: \n          x=2: 2 in {2,3} and 3 in {2,3} -> yes -> output 1.\n\nAnother example: Input: \"1m 1m 1m\" -> koutsu (count=3) -> 0.\n\nAnother example: Input: \"1m 1m 2m\" -> count['1m']=2 -> 1.\n\nAnother example: Input: \"1m 2m 4m\" -> \n  No koutsu.\n  Suits: m: [1,2,4] -> sorted [1,2,4] -> 1+1==2, but 2+1!=4 -> no shuntsu.\n  Then check for one draw: \n      No tile appears twice.\n      Suit m: check x=1: 1 and 2 present -> output 1.\n\nExample: Input: \"1m 3m 5m\"\n  No koutsu.\n  Suits: m: [1,3,5] -> no three consecutive.\n  Then check for one draw: \n      No tile appears twice.\n      Suit m: check x from 1 to 8: \n          x=1: 1 and 2 -> 2 not present.\n          x=2: 2 and 3 -> 2 not present.\n          x=3: 3 and 4 -> 4 not present.\n          x=4: 4 and 5 -> 4 not present.\n          x=5: 5 and 6 -> 6 not present.\n          ... until 8.\n      No two consecutive -> output 2.\n\nTherefore, the code is ready.\n\nHowever, note: the problem allows drawing any tiles, including duplicates. The above code assumes that we can only complete a koutsu if we have two of the same tile and draw one more. This is correct.\n\nOne more edge: what if the hand has two tiles of the same suit and number, but also a third tile of the same suit and number? Then it's a koutsu and already caught.\n\nCode:\n\nNote: We must import defaultdict.\n\nFinal code:",
    "score": -1,
    "metadata": {
        "prompt_token_count": 964,
        "completion_token_count": 15757,
        "thoughts_token_count": 1023
    }
}