{
    "start": 1758294372.7588596,
    "end": 1758296417.0023744,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:40 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Since n, m, h are at most 50, we can use dynamic programming or try to assign heights with constraints.\n However, the restrictions are given as intervals and require that the maximum height in a given interval is at most x_i.\n\n Idea:\n 1. We note that the profit function is the sum of squares of the heights. The square function is convex, so we might want to set heights as high as possible (but constrained by the restrictions) to maximize the profit.\n\n 2. But the restrictions impose upper bounds on contiguous segments (or sets of contiguous segments). However, note that the same house can be part of multiple restrictions.\n\n 3. We can think of each house must satisfy all restrictions that cover it. Therefore, for each spot i, the height a_i must be at most the minimum of all x_j such that the restriction j covers i.\n\n 4. However, wait: the restrictions say \"the tallest house from l_i to r_i must be at most x_i\". This does not necessarily mean that every house in [l_i, r_i] must be <= x_i. It means that the maximum value in the segment must be <= x_i. But note: if we set one house to x_i and others lower, then the maximum is x_i. But if we set two houses to values above x_i, then the maximum would be above x_i and violate the restriction.\n\n 5. Actually, the condition is equivalent to: for each restriction j, the maximum over [l_j, r_j] is <= x_j. This condition is enforced by having the entire segment [l_j, r_j] having no house greater than x_j.\n\n 6. Therefore, for each spot i, the maximum allowed height is the minimum x_j such that i is in [l_j, r_j]. But note: if there's no restriction, then we can use up to h.\n\n 7. However, consider: what if two restrictions overlap? Then the house must satisfy both. So indeed, for spot i, let M(i) = min{ x_j | l_j <= i <= r_j } if there is any restriction covering i; otherwise, we use h.\n\n 8. But wait: is that sufficient? Consider the example: \n      Input: \"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\"\n      For spot1: only restriction [1,1] -> x=1 -> M(1)=1.\n      For spot2: only restriction [2,2] -> x=3 -> M(2)=3.\n      For spot3: only restriction [3,3] -> x=2 -> M(3)=2.\n\n 9. Then we set each house to its maximum allowed height. Then the profit is 1^2 + 3^2 + 2^2 = 1+9+4=14.\n\n 10. Now consider the second example:\n      Input: \"4 10 2\\n2 3 8\\n3 4 7\"\n      Without restrictions, we can set each house to 10. But with restrictions:\n        Spot1: no restriction -> 10\n        Spot2: covered by [2,3] -> min(8, ...) but wait, there is only one restriction covering spot2: [2,3] with x=8 -> so M(2)=8.\n        Spot3: covered by [2,3] (x=8) and [3,4] (x=7) -> M(3)=min(8,7)=7.\n        Spot4: covered by [3,4] -> 7.\n\n      Then we set house1=10, house2=8, house3=7, house4=7. Profit = 10^2 + 8^2 + 7^2 + 7^2 = 100+64+49+49 = 262.\n\n 11. Therefore, we can compute for each spot i:\n        base[i] = min{ x_j | restriction j has l_j<=i<=r_j }   (if no restriction, then base[i] = h)\n\n 12. Then, we set each house i to base[i] (because the square function is increasing for nonnegative numbers, so we want the highest allowed) and compute the profit.\n\n 13. However, wait: is it always optimal to set each house to its individual maximum allowed value? \n\n 14. Consider: what if setting a house to a value lower than base[i] might allow us to set other houses higher? \n\n 15. Let's test with a simple example: \n        n=2, h=10, m=2\n        Restriction1: [1,2] with x=5.\n        Restriction2",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. The key challenge is ensuring that all zoning restrictions are satisfied, which impose upper limits on the maximum height of houses within specified ranges.\n\n### Approach\n1. **Problem Analysis**: The problem involves determining the optimal heights for each house such that all zoning restrictions are met and the total profit (sum of squares of heights) is maximized. Each restriction specifies that the tallest house in a certain range must not exceed a given height.\n2. **Insight**: For each house, the maximum allowed height is constrained by all the restrictions that include that house. The optimal height for each house is the minimum of all the restriction values that apply to it, or the global maximum height `h` if no restrictions apply.\n3. **Algorithm Selection**: We process each house and determine its maximum allowed height by checking all restrictions that cover it. The optimal height for each house is then set to this minimum value (or `h` if no restrictions apply), and the profit is calculated by summing the squares of these heights.\n4. **Complexity Analysis**: Given the constraints (n, m, h ≤ 50), this approach efficiently checks each house against all relevant restrictions, resulting in a time complexity of O(n*m), which is feasible for the problem's constraints.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    base = [h] * n\n    \n    for l, r, x_val in restrictions:\n        for i in range(l-1, r):\n            if x_val < base[i]:\n                base[i] = x_val\n                \n    profit = 0\n    for height in base:\n        profit += height * height\n        \n    print(profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of spots `n`, the maximum height `h`, and the number of restrictions `m`.\n2. **Processing Restrictions**: For each restriction, we determine the range of spots it affects and the maximum allowed height `x_val`. For each spot within this range, we update its maximum allowed height to the minimum of its current value and `x_val`.\n3. **Calculating Profit**: After processing all restrictions, each spot's height is set to its determined maximum allowed value. The profit is computed by summing the squares of these heights.\n4. **Output**: The total profit is printed.\n\nThis approach efficiently ensures that all zoning restrictions are satisfied while maximizing the profit by leveraging the convex nature of the square function, which benefits from higher values within the allowed constraints.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        index += 3\n        restrictions.append((l, r, x_val))\n    \n    base = [h] * n\n    \n    for l, r, x_val in restrictions:\n        for i in range(l-1, r):\n            if x_val < base[i]:\n                base[i] = x_val\n                \n    profit = 0\n    for height in base:\n        profit += height * height\n        \n    print(profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 814,
        "completion_token_count": 667,
        "thoughts_token_count": 1023
    }
}