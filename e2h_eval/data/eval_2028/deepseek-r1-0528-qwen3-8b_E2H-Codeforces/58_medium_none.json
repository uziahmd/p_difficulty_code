{
    "start": 1758299998.1890187,
    "end": 1758303903.6617312,
    "start-formatted": "2025-09-20 01:39 KST",
    "end-formatted": "2025-09-20 02:45 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to the graph to form a simple cycle of odd length, and the number of ways w (without adding loops or parallel edges).\n\n Observation:\n 1. An odd cycle (at least length 3) must have an odd number of edges (so at least 3). We are allowed to add edges arbitrarily (without creating parallel or self-loops) but we cannot remove existing ones.\n\n Steps:\n\n Let's break down the problem:\n\n Case 1: The graph already has an odd-length cycle.\n   Then t = 0, and w = 1 (if the graph has at least one odd cycle). But note: the problem says \"form a cycle\", so if there is one then no edge needs to be added.\n\n However, note that the problem says \"the minimum number of edges that must be added\". So if the graph already has an odd cycle, then t=0.\n\n But how do we check for an odd cycle? We can use BFS/DFS with coloring (bipartite check). If the graph is not bipartite, then it contains an odd cycle.\n\n Case 2: The graph does not have an odd cycle (i.e., it is bipartite). Then we need to consider adding edges.\n\n However, note: we might form an odd cycle by adding just one edge? Actually, let's think:\n\n Example: \n   Consider a triangle (which is an odd cycle) missing one edge. Then adding one edge would complete the triangle (odd cycle). \n\n But wait: what if the graph is bipartite (so no odd cycles) and we are missing one edge in a triangle? Then adding that one edge creates a triangle (odd cycle). Similarly, if we have a path of two edges (a chain of three vertices) and we add an edge between the two ends, then we get a triangle (odd cycle). \n\n However, note that the graph might not be connected. \n\n What are the possibilities?\n\n Possibility A: Adding one edge (t=1) is sufficient to create an odd cycle?\n   - Only if the two vertices we connect were at an even distance (so that the cycle formed is odd). In a bipartite graph, the parity of the path from u to v is fixed (the partite sets). If we connect two vertices from the same partite set, then we create an odd cycle (because the path from u to v via the original graph is even, and adding an edge makes the cycle length = (even path) + 1 (edge) = odd). \n\n Therefore, if the graph is bipartite, then we can consider:\n\n   Option 1: Add one edge between two vertices in the same part. Then we get an odd cycle (if the two vertices are in the same connected component). But note: if they are in different connected components, then adding an edge between them doesn't form a cycle (until we have a path connecting them). So we must consider only edges that are within the same connected component? Actually, no: the entire graph is bipartite and we are going to consider the entire graph as having one partite set? Not necessarily: the graph may have multiple connected components, each being bipartite. Then we can assign colors independently for each component.\n\n However, note: when we check bipartiteness, we assign two colors (say 0 and 1) for each connected component. Then two vertices in the same component with the same color would form an odd cycle when connected (if we connect two same-colored nodes in the same component). But if we connect two same-colored nodes from different components, then the cycle is not formed because there's no path between the two components? Actually, after adding an edge between two components, we now have a cycle? Not necessarily: we need a path from u to v (which exists now because we connected the two components, but without the added edge, they were separate). However, without the added edge, there was no path. After adding an edge, we can traverse from u to some node in its component, then the added edge, then to v and then back? Actually, no: the two components are separate, so to form a cycle we need two independent paths. But wait: the cycle must be simple and must use the added edge. \n\n Actually, the cycle would be: from u, go through the first component until the vertex where we can leave to the second component via the added edge, then go from that vertex in the second component to v, and then we have the added edge from u to v? But wait, we don't have a direct connection from u to v, we have the edge. Then the cycle would be: start at u, then go to v (via the added edge), then from v go to some node in the second component and then back to the first component? Actually, no: we have two separate components. Without the added edge, no cycle exists. After adding an edge, we can form a cycle only if the two endpoints (u and v) are in the same connected component? Actually, no: because we can also form a cycle that goes from u to v (via the added edge) and then from v to u by going through the entire second component? But wait: if u is in component A and v in component B, then the added edge creates a bridge. Then a cycle would require going from u to v (via the bridge) and then from v to u in the other component? But there is no way from v to u in the other component without the bridge. So the cycle must use the bridge twice? That's not allowed. \n\n Actually, the cycle must be entirely contained in the graph. The added edge alone doesn't form a cycle. The cycle must include at least two distinct edges. \n\n Let me clarify: The cycle must be a simple cycle (each vertex at most once). \n\n Therefore, to form a cycle by adding one edge, we must have two vertices u and v (that are not connected by an existing edge) such that the distance from u to v (in the original graph) is even (so that the total cycle length is odd). But note: if u and v are in the same connected component, then the distance is defined and we require the distance to be even. If they are in different connected components, then the distance is not defined (so we cannot form a cycle by just adding that one edge). \n\n However, wait: when we add an edge between two different connected components, we merge them. Then, in the new graph, the two components become one. Then, if we take two vertices from the same original component (say from the merged component) and connect two same-colored vertices (from the same original component) then we form an odd cycle? Actually, no: the entire merged graph is still bipartite? Because we can assign the colors consistently? \n\n Actually, when merging two bipartite graphs by an edge, we can assign the colors appropriately. For example, if we have two components, each bipartite, and we add an edge between a vertex u (color 0) in the first and a vertex v (color 0) in the second, then we can reassign the second component: flip the colors (so v becomes color 1) and then the edge u-v is between color0 and color1. But wait, we cannot change the existing edges? Actually, we are only concerned about the existence of an odd cycle. \n\n Alternatively, note: if we add an edge between two components, then the entire graph remains bipartite if we can assign the colors without conflict. But if we add an edge between two same-colored vertices (from two different bipartite components) then we break the bipartiteness. Why? Because in the merged graph, the two same-colored vertices are now adjacent, and they are in the same bipartite set. \n\n Therefore, if we add an edge between two same-colored vertices (regardless of being in the same component or different) then we break the bipartiteness and hence create an odd cycle. However, note: if they are in the same component, then we know that the distance is even (because they are same color) and adding the edge forms an odd cycle. If they are in different components, then the added edge connects two same-colored vertices (so the graph becomes non-bipartite) and hence there exists an odd cycle. \n\n But wait: the problem requires forming a cycle. In the case of two different components, the added edge alone doesn't form a cycle. However, the graph becomes non-bipartite, which means there exists an odd cycle somewhere. But note: the definition of bipartite graphs: no odd cycles. So if we break the bipartiteness, then there exists an odd cycle. However, the problem requires a simple cycle (which is a cycle) of odd length. \n\n But note: the minimal cycle created might not necessarily be of odd length? Actually, no: the condition for a graph to be bipartite is that it has no odd cycles. So if we break the bipartiteness, there must be an odd cycle. However, the problem does not require that the added edge is part of the odd cycle? It just requires that the graph has an odd cycle.\n\n However, the problem says: \"form a cycle of an odd length\". The cycle must exist. And the minimal requirement is that we have an odd cycle. \n\n But note: we are to minimize the number of edges to add. \n\n Possibility: \n   - t=0: if the graph already has an odd cycle.\n   - t=1: if the graph is bipartite and there exists at least one pair of vertices (u, v) (with u < v) that are not adjacent and either:\n          (a) in the same connected component and have the same color (then the distance is even, so adding the edge uv creates an odd cycle)\n          (b) in different connected components and have the same color (then the graph becomes non-bipartite, hence there is an odd cycle)\n\n However, wait: for (b), is the odd cycle necessarily formed by the added edge? Actually, the existence of an odd cycle is guaranteed because the graph is no longer bipartite, but the problem does not specify that the cycle must use the added edge. However, we are to count the ways to add t edges (minimum edges) to form an odd cycle. \n\n But note: the problem asks for the minimum number of edges to add. So if we can form an odd cycle by adding one edge (either by connecting two same-colored vertices in the same component, or two same-colored vertices in different components) then t=1.\n\n However, is there a possibility that we can form an odd cycle by adding one edge in the same component? Yes, as in the triangle example.\n\n But wait: what if we have two components and we connect two same-colored vertices, then the entire graph becomes non-bipartite. However, the cycle that is formed might be larger than 3. But that's acceptable.\n\n Now, what about t=2? \n\n Consider: if we cannot form an odd cycle by adding one edge, then we must consider two edges.\n\n When can we not form an odd cycle by adding one edge?\n   - The graph is bipartite (so no odd cycle initially).\n   - There are no two same-colored vertices (in the same or different components) that are not adjacent. \n\n However, note: the graph is simple and without parallel edges, so if two vertices are not adjacent, we can add the edge. \n\n But wait: in a bipartite graph, the set of same-colored vertices (in the entire graph) might be many. However, if the graph is disconnected, then we can also connect two same-colored vertices from different components.\n\n So why would we not be able to form an odd cycle by adding one edge? \n\n Actually, the above reasoning suggests that if the graph is bipartite, then we can always form an odd cycle by adding one edge: pick any two same-colored vertices (from the same or different components) that are not adjacent. But wait: what if the graph has only one vertex? Then n=1, m=0. Then the graph is trivially bipartite. Then we can add an edge? But we cannot add a self-loop. So we cannot add an edge from a vertex to itself. Then we cannot form a cycle (which requires at least 3 vertices). \n\n Also, if the graph has two vertices and no edge, then the two vertices are in different components (if we consider each vertex as a component). Then we can add an edge between them. But then we have two vertices and one edge, which is not a cycle. To form a cycle we need at least 3 vertices. \n\n Therefore, we must be cautious:\n\n Conditions for t=0: the graph already has an odd cycle.\n\n Conditions for t=1: \n   - The graph is bipartite, and there exists a pair of vertices (u, v) (with u != v) such that:\n        (a) They are not adjacent (so we can add the edge)\n        (b) They are either:\n            i) In the same connected component and have the same color (then the distance is even, and the cycle formed by the path from u to v (even) plus the edge (1) gives an odd cycle)\n            ii) In different connected components and have the same color (then the entire graph becomes non-bipartite, hence an odd cycle exists)\n\n However, note: the condition (ii) requires that the entire graph becomes non-bipartite, but we don't require that the cycle is formed by the added edge. But the problem does not require that the cycle uses the added edge. However, we are to form an odd cycle by adding edges, and the minimal number of edges is 1.\n\n But wait: what if the graph is bipartite and we have two same-colored vertices in different components, but the entire graph becomes non-bipartite. However, the problem requires a simple cycle. Is there a simple cycle in the graph after adding that edge? Yes, because the graph is non-bipartite, and in a non-bipartite graph there is an odd cycle. However, note: the problem does not specify the length, but the cycle must be simple and of odd length.\n\n However, there is a catch: the cycle must be formed by the added edge? Actually, no. The problem says \"to form a simple cycle of an odd length\", meaning that after the addition, the graph has such a cycle.\n\n But then, is it possible that by adding one edge we form an odd cycle? Yes, both cases.\n\n However, we must consider: if the graph is bipartite, then the entire graph is 2-colorable. Then, if we add an edge between two same-colored vertices (same component or different) then we break the bipartiteness, and hence there exists an odd cycle.\n\n But note: the problem does not require the cycle to be minimal (in terms of the added edge). However, the minimal number of edges to add is 1, provided that there is at least one pair of same-colored non-adjacent vertices.\n\n But wait: what if the graph is complete? Then there is no non-adjacent pair. Then we cannot add an edge. Then we must consider t>=2.\n\n However, the problem states: the graph doesn't have parallel edges and loops. So if the graph is complete, then we cannot add any edge? Then we cannot form an odd cycle by adding one edge? Then we must consider t=2.\n\n How do we form an odd cycle by adding two edges?\n\n Possibilities for t=2:\n\n  Case 1: The graph is bipartite and complete. Then we cannot add any edge (so t=0 is not applicable). But wait, if the graph is complete and bipartite, then it must be a complete bipartite graph. Then the graph is bipartite and complete. Then the only way to form an odd cycle is to break the bipartiteness by adding edges. However, we cannot add edges within the same part (because the graph is complete, so all edges are already present). So we must add two edges? \n\n  Actually, if the graph is complete bipartite, then the graph is bipartite and we cannot add any edge without creating a same-color edge (because the two parts are fully connected). Then the only edges we can add are between vertices of the same color. But since the graph is complete, there are no missing edges between the same color? \n\n  Wait, in a complete bipartite graph, the edges are only between the two parts. The same color (within the same part) has no edges. But wait, the graph is complete bipartite, so the edges between the two parts are complete. Then the same part has no edges. So we can add edges within the same part. Then we can add one edge (as above) to form an odd cycle.\n\n  Therefore, the graph being complete bipartite doesn't matter: we can still add an edge within a part (if the graph is complete bipartite, then the two parts are independent sets, and we can add edges within the parts). \n\n  But wait: the graph being complete bipartite means that the set of edges is exactly the edges between the two parts. So the edges within the same part are missing. Then we can add edges within the same part (which are the same color). So the condition for t=1 is satisfied.\n\n  Therefore, the only time we cannot use t=1 is when there is no pair of same-colored non-adjacent vertices. \n\n  This happens when the graph is bipartite and for every pair of same-colored vertices, the edge already exists. \n\n  Then, we must look for t=2.\n\n  How can we form an odd cycle by adding two edges?\n\n  We can consider:\n\n  Option 1: Break the bipartiteness by adding two edges that together form an odd cycle (or help form one). \n\n  But note: we are allowed to add two edges. The goal is to minimize the number of edges.\n\n  Actually, the problem is to find the minimum number of edges. So if we cannot do it in 0 (already has odd cycle) or 1 (if there is at least one same-color non-adjacent pair) then we must do 2.\n\n  When can we not do 1? \n\n      Condition: The graph is bipartite, and for every pair of vertices (u, v) of the same color, the edge (u, v) already exists.\n\n  Then, we must add two edges. \n\n  How?\n\n  Consider: we can break the bipartiteness by adding two edges. \n\n  One way: \n      - Choose two edges that together form an odd cycle. For example, consider three vertices a, b, c. Suppose the graph has edges (a,b) and (b,c) and (a,c) is missing. Then if we add (a,c) we form a triangle (odd cycle). But wait, if the graph is bipartite, then the edges (a,b) and (b,c) imply that a and c are the same color. Then (a,c) is an edge that we can add (same color) and that would break bipartiteness. \n\n  However, in the above scenario, we can do with one edge. \n\n  Another scenario: the graph has two connected components, each being a complete graph of two vertices (so two edges? no, two vertices form one edge). Actually, consider two complete bipartite graphs (each is a single edge). Then the entire graph is two edges (two connected components). Then the graph is bipartite. The two components are independent. The two vertices in the first component are of opposite colors, and the two vertices in the second component are of opposite colors.\n\n  Now, we want to add two edges to form an odd cycle.\n\n  Example: \n      Component1: {A, B} with edge A-B (so colors: A=0, B=1)\n      Component2: {C, D} with edge C-D (so colors: C=0, D=1)\n\n  We can try to connect A and C (both color0). Then the entire graph becomes non-bipartite, so an odd cycle exists. But wait, then we can do it with one edge. \n\n  Alternatively, we can try to form a cycle that uses two edges? \n\n  Actually, the minimal number of edges to add is 1 in this case.\n\n  So what is the condition for t=2?\n\n  We must consider: if there is no pair of same-colored non-adjacent vertices, then we cannot break the bipartiteness by adding one edge. Then we must break it by adding two edges.\n\n  How?\n\n  Note: In a bipartite graph, the entire graph is 2-colorable. The condition for t=1 is that there exists an edge that we can add (between two same-colored vertices) that is missing. \n\n  Now, if there is no such edge, then the graph must be a complete graph on each bipartite set? Actually, no: the graph is bipartite, so the edges are only between the two parts. The edges within a part are absent. But wait, the graph is bipartite, so the edges are only between the two parts. Then the edges within the same part are absent. But then, if we have two vertices in the same part (same color) and they are not adjacent (because in bipartite graph, no edges within the same part), then we can add an edge between them (t=1). \n\n  Therefore, the only way that there is no same-colored non-adjacent pair is if the graph is not bipartite? But wait, we are assuming the graph is bipartite (for t=0 not applicable). \n\n  Actually, wait: if the graph is bipartite, then by definition, there are no edges within the same part. So for any two vertices in the same part, they are not adjacent. Therefore, unless the graph is complete bipartite, there are non-adjacent same-colored vertices.\n\n  But wait: in a complete bipartite graph, the edges between the two parts are complete, so the same part has no edges (by definition). So the same part is an independent set. Therefore, every two vertices in the same part are non-adjacent. Then we can always add an edge between two same-colored vertices (unless the two vertices are the same, but we don't have self-loops). \n\n  Therefore, in a bipartite graph, if there is more than one vertex in a part, then there are non-adjacent same-colored vertices (unless the part has exactly one vertex). \n\n  Example: \n      Part1: {A, B} (size=2) and Part2: {C} (size=1). \n      The edges: A-C, B-C. Then the graph is bipartite. \n      Now, the same-colored vertices: A and B (both color0) are not adjacent. So we can add the edge A-B (t=1).\n\n  The only exception is if a part has exactly one vertex. Then there are no two distinct same-colored vertices. \n\n  But note: the graph can have multiple connected components, each being bipartite. \n\n  Therefore, the condition for t=0 is: the graph is not bipartite (has an odd cycle).\n\n  Condition for t=1: \n      - The graph is bipartite, and there exists at least one pair of distinct same-colored vertices that are not adjacent.\n\n  Since in a bipartite graph, the edges are only between the two parts, the same-colored vertices (in the same part) are never adjacent. Therefore, the only way that there is no same-colored non-adjacent pair is if for every part, the set of vertices in that part has no two distinct vertices? i.e., each part has at most one vertex.\n\n  Then the graph is a collection of isolated edges (each connected component is an edge) and isolated vertices. \n\n  But note: the graph is bipartite, so the connected components are either isolated vertices or edges (or more generally, complete bipartite graphs, but if the graph is a matching, then each connected component is an edge or an isolated vertex). \n\n  Then, in this case, the entire graph has no two same-colored vertices (because each connected component is either an edge (two colors) or an isolated vertex (one color). Then the condition for t=1 fails because we cannot find two distinct same-colored vertices (since each color class is a set of vertices from different connected components, but wait: we can take two same-colored vertices from different components? \n\n  Example: \n      Component1: {A, B} (edge A-B, so A=0, B=1)\n      Component2: {C} (isolated, so C=0)\n      Component3: {D} (isolated, so D=1)\n\n  Then the color0 set: {A, C}. Then we can add the edge between A and C (same color0) and that would break the bipartiteness. \n\n  But wait, the condition for t=1 is that we can add one edge. \n\n  So the only case where we cannot do t=1 is when there is no pair of same-colored distinct vertices. \n\n  When does that happen?\n\n      In the entire graph, the set of color0 and color1 are both of size 1? Or more precisely, the graph has exactly one color0 and one color1? \n\n      Actually, no: the graph can have multiple connected components, but if we have at least two vertices, then we can have two same-colored vertices (unless the graph has only one vertex). \n\n  Let's analyze:\n\n      Let the graph have n vertices. We assign colors (0 and 1) to each vertex in each connected component.\n\n      Condition for t=1 to be impossible: \n          - There is no pair (u, v) (u != v) such that color[u] == color[v] and (u,v) is not an edge.\n\n      This means that for every pair of vertices with the same color, the edge is already present. \n\n      But in a bipartite graph, edges are only between the two colors. Therefore, the edges within the same color are never present. \n\n      Therefore, the condition is that there is no pair of same-colored vertices (distinct). \n\n      That is, the entire graph has at most one vertex of color0 and at most one vertex of color1.\n\n      But wait: we can have multiple connected components. \n\n      Example: \n          n=2: two vertices, two connected components (each isolated). Then we assign color0 to one and color1 to the other. Then we have one color0 and one color1. Then there is no same-colored pair (because we need two distinct vertices of the same color). \n\n          n=1: one vertex, one color (say 0). Then there are no two distinct vertices.\n\n      Therefore, the condition for t=1 being impossible is that the graph has at most one vertex of color0 and at most one vertex of color1, and in fact, the total number of vertices is at most 2 (because if there are 3 or more, then by pigeonhole principle, one color class has at least ceil(3/2)=2 vertices). \n\n      Actually, no: consider 3 vertices, each in their own connected component. Then we can assign:\n          Component1: vertex0 -> color0\n          Component2: vertex1 -> color0\n          Component3: vertex2 -> color1\n\n      Then we have two color0 vertices (vertex0 and vertex1) that are not adjacent (because they are in different components, and we can add an edge between them). Then t=1 is possible.\n\n      So the condition for t=1 being impossible is that the graph has at most one vertex of color0 and at most one vertex of color1. \n\n      But note: the graph is bipartite, so we can assign colors arbitrarily per component. However, we did assign the colors arbitrarily (we did a bipartite coloring). But we are free to choose the coloring for each component. \n\n      Actually, the standard bipartite coloring for a connected component is unique up to swapping. But the entire graph's bipartite coloring is defined by the connected components. \n\n      However, to minimize the number of edges to add, we are counting the same-color pairs. But note: the condition for breaking bipartiteness is independent of the coloring: if we break bipartiteness by adding an edge, then regardless of the coloring we used, the graph becomes non-bipartite.\n\n      But wait: the bipartite coloring we use is the one we did. However, the condition for the existence of an odd cycle is that the graph is not bipartite. \n\n      Therefore, the condition for t=1 being impossible is that the graph is bipartite and there are no two vertices of the same color (in the entire graph) that are not adjacent. \n\n      However, since the graph is bipartite, the same-color vertices are not adjacent (because edges are only between colors). Therefore, the condition is that there are no two vertices of the same color (i.e., each color class has at most one vertex). \n\n      Then, the total number of vertices is at most 2.\n\n      Therefore:\n\n        t=0: if the graph is not bipartite (has an odd cycle)\n        t=1: if the graph is bipartite and n>=3 OR (n>=2 and there are two same-colored vertices that are not adjacent) ... but wait, if n=2, then we have two vertices. Then they are adjacent? Or not?\n\n        Actually, for n=2: \n          - If the two vertices are connected by an edge, then the graph is bipartite. Then the two vertices have different colors. Then there are no same-colored vertices (two distinct same-colored vertices). Then we cannot add an edge (because we cannot add an edge between two same-colored vertices? Actually, we can only add edges between distinct vertices. But if we try to add an edge between the two, that edge already exists. \n\n          - If the two vertices are not connected, then we can add an edge (which would be between two different colors, so the graph remains bipartite). Then we don't form an odd cycle. \n\n          But wait, if we add an edge between two different colors, then the graph becomes a complete graph on two vertices (an edge) and is bipartite. Then we don't form an odd cycle.\n\n          Therefore, for n=2, we cannot form an odd cycle by adding one edge (if they are not connected, then adding the edge doesn't form a cycle). \n\n          Actually, to form a cycle we need at least 3 vertices.\n\n        Therefore, the minimal odd cycle must have at least 3 vertices.\n\n        So for n<3, we cannot form an odd cycle (because the smallest odd cycle is 3). \n\n        Then:\n\n          t=0: if the graph already has an odd cycle (which requires at least 3 vertices). So if n<3, then no odd cycle exists.\n\n          Then for n=1 or n=2, we cannot have t=0.\n\n          For n=1: \n            m=0. Then we cannot add an edge (self-loop is not allowed). So we cannot form a cycle. Then what? \n\n          For n=2:\n            We can only form a cycle if we have at least 3 vertices. So we must add edges to form a cycle? \n\n          But note: the problem says \"form a cycle of an odd length\" (simple cycle). The smallest cycle is of length 3.\n\n          Therefore, if n<3, we cannot form a cycle (because a cycle requires at least 3 vertices). \n\n          Then the answer for n=1: \n            t = ? We cannot form a cycle (since we need at least 3 vertices). Then the problem: we are to form a cycle. So we must add edges until we have at least 3 vertices and then form a cycle? \n\n          Actually, note: we are allowed to add edges arbitrarily (but no self-loops or parallel edges). \n\n          However, the problem does not specify that we must form a cycle that uses the entire graph. We can form a cycle on a subset of vertices (as long as they form an odd cycle). \n\n          But if n=1, we cannot form a cycle (needs at least 3 distinct vertices). Similarly, n=2: we cannot form a cycle (needs at least 3). \n\n          Then for n=1 and n=2, we must add edges until we have a cycle (which requires 3 vertices). \n\n          How?\n\n          For n=1: \n            We need to add two edges? Actually, we need to form a cycle of 3 vertices. So we must add two edges (connecting the one vertex to two new vertices? But wait, we don't have new vertices. \n\n          Actually, the graph has fixed n vertices. We cannot add vertices, only edges.\n\n          Therefore, to form a cycle of 3, we need 3 distinct vertices. \n\n          So if n=1, we cannot form a cycle (because we don't have 3 vertices). Similarly for n=2.\n\n          Then the answer for n=1: \n            t = ? We cannot form a cycle. But the problem says \"the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length\". \n\n          However, the problem does not say that we can only use the existing vertices. But we are given a graph of n vertices. We cannot change n.\n\n          Therefore, if n=1 or n=2, we cannot form a cycle (since a cycle requires at least 3 vertices). Then the answer is:\n\n            t = infinity? But the problem says \"minimum number of edges\", and we cannot form a cycle. Then we must output something.\n\n          But note the example input: \n              Input: '3 0'\n\n          Output: '3 1'\n\n          Explanation: \n            We have 3 vertices and 0 edges. Then we must add 3 edges to form a triangle (which is an odd cycle). But wait, we can form a triangle by adding 3 edges. However, we can also form a cycle of length 5? But we only have 3 vertices. \n\n          Actually, the cycle must be formed by the existing n vertices. \n\n          Therefore, for n=3 and 0 edges, we must add 3 edges to form a triangle (cycle of length 3). \n\n          But wait: we can add fewer edges? \n\n          To form a cycle, we need at least 3 edges (for a triangle). \n\n          However, we can also form a cycle of length 5? But we only have 3 vertices. So the cycle must be of length 3.\n\n          Therefore, we must add 3 edges to form the triangle.\n\n          But wait: what if we add two edges? Then we have two edges. The graph is a path of two edges (three vertices). Then we have no cycle. \n\n          So for n=3 and 0 edges, t=3.\n\n          However, the example output is: '3 1'\n\n          Now, for n=1 or n=2: \n\n            n=1: we cannot form a cycle (needs 3 vertices). Then we must output that we cannot form a cycle? But the problem says \"minimum number of edges that must be added\", so if we cannot form a cycle, then the problem might not have a solution. But note: the problem does not specify that we must use all the vertices. However, the cycle must be a simple cycle (each vertex at most once). But we can choose a subset of vertices? \n\n          Actually, the cycle must be contained in the graph (the given n vertices). \n\n          Therefore, for n=1 or 2, it is impossible to form a cycle (because the cycle must have at least 3 vertices). Then the problem is undefined? But the problem statement says: \"You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length\"\n\n          Since we cannot form a cycle (because we don't have enough vertices), then the minimum number of edges to add is not defined. However, the problem expects an answer.\n\n          Looking at the example input: \n              '3 0' -> output '3 1'\n\n          And the example input: \n              '3 3\\n1 2\\n2 3\\n3 1' -> output '0 1'\n\n          And: \n              '4 4\\n1 2\\n1 3\\n4 2\\n4 3' -> output '1 2'\n\n          Also, the example input: \n              '3 0' is provided.\n\n          But wait, the example input format: \n              The first line of the input contains two integers n and m.\n\n          So we must handle n=1, n=2.\n\n          According to the problem, the graph isn't necessarily connected.\n\n          For n=1: \n            We have one vertex and zero edges. We cannot add a self-loop. We cannot form a cycle. Then we must consider: is there a way to form a cycle? No. Then the answer should be that we cannot form a cycle? But the problem says \"Print in the first line of the output two space-separated integers t and w\".\n\n          However, note the example: \n              Input: '3 0' -> output '3 1'\n\n          So the problem assumes that we can form a cycle (when n>=3). For n<3, we cannot form a cycle, so we must output something else.\n\n          Let me read the problem statement again: \"form a simple cycle of an odd length, consisting of more than one vertex\". \n\n          More than one vertex: actually, the cycle must consist of more than one vertex? Actually, the problem says \"consisting of more than one vertex\", but then the cycle must have at least two vertices. However, a cycle of two vertices is not simple (it would be two edges from a vertex to itself, which is a loop, but we are not allowed to add loops). \n\n          Actually, the problem says: \"a simple cycle\" (each vertex occurs at most once) and \"of an odd length\". The smallest odd cycle is of length 3 (triangle). \n\n          Therefore, the cycle must have at least 3 vertices.\n\n",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph so that it contains a simple cycle of odd length, and the number of ways to add those edges. The solution involves checking the graph's bipartiteness and analyzing the graph's structure to find the required edges and their count.\n\n### Approach\n1. **Check for Existing Odd Cycle**: If the graph already contains an odd-length cycle, no edges need to be added (t=0), and there is exactly one way to do nothing (w=1).\n2. **Bipartite Graph Check**: If the graph is bipartite (no odd cycles), we then determine the minimum edges needed to introduce an odd cycle.\n   - **Case t=1**: If there exists at least one pair of vertices with the same color (in the bipartite coloring) that are not connected by an edge, adding one such edge will create an odd cycle.\n   - **Case t=3**: If the graph has fewer than 3 vertices, it's impossible to form a cycle, so we need to add edges to form a triangle (3 edges).\n   - **General Case for t=2**: For larger graphs, if no single edge can form an odd cycle, we consider adding two edges. However, based on the problem constraints, the minimal case when edges must be added beyond one is when the graph has exactly 3 vertices and no edges (requiring 3 edges to form a triangle).\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 1\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    comp = [0] * (n+1)\n    comp_id = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_id += 1\n            queue = deque([i])\n            color[i] = 0\n            comp[i] = comp_id\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp[neighbor] = comp_id\n                        queue.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n                        break\n                if not is_bipartite:\n                    break\n            if not is_bipartite:\n                break\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    same_color_pairs = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] == color[j] and i != j:\n                same_color_pairs += 1\n                \n    total_vertices = n\n    if total_vertices < 3:\n        if total_vertices == 1:\n            print(\"3 1\")\n            return\n        else:\n            print(\"0 1\")\n            return\n            \n    if same_color_pairs > 0:\n        print(\"1\", same_color_pairs)\n    else:\n        print(\"3 1\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of vertices (n) and edges (m), followed by the edges themselves.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness by attempting to color vertices alternately. If any conflict is found during coloring, the graph is not bipartite, and we output t=0, w=1.\n3. **Same Color Pairs Calculation**: For bipartite graphs, count the number of vertex pairs with the same color that are not connected by an edge. This count determines if adding one edge (t=1) is sufficient to form an odd cycle.\n4. **Edge Cases Handling**: \n   - If the graph has fewer than 3 vertices, forming a cycle is impossible, so for n=1, we require 3 edges (though the problem constraints might not cover this, the code handles it as specified).\n   - If no same-color pairs exist (each color class has at most one vertex), we need to add 3 edges to form a triangle (t=3, w=1).\n5. **Output**: Based on the checks, the solution outputs the minimal number of edges (t) and the number of ways (w) to add them to form an odd cycle.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 1\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    is_bipartite = True\n    comp = [0] * (n+1)\n    comp_id = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_id += 1\n            queue = deque([i])\n            color[i] = 0\n            comp[i] = comp_id\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp[neighbor] = comp_id\n                        queue.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n                        break\n                if not is_bipartite:\n                    break\n            if not is_bipartite:\n                break\n                \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    same_color_pairs = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] == color[j] and i != j:\n                same_color_pairs += 1\n                \n    total_vertices = n\n    if total_vertices < 3:\n        if total_vertices == 1:\n            print(\"3 1\")\n            return\n        else:\n            print(\"0 1\")\n            return\n            \n    if same_color_pairs > 0:\n        print(\"1\", same_color_pairs)\n    else:\n        print(\"3 1\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1069,
        "thoughts_token_count": 8191
    }
}