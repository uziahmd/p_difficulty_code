{
    "start": 1758299380.3172283,
    "end": 1758302819.1360781,
    "start-formatted": "2025-09-20 01:29 KST",
    "end-formatted": "2025-09-20 02:26 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to the graph to form a simple cycle of odd length, and the number of ways w (without creating loops or parallel edges) to do so.\n\n Observations:\n 1. The problem requires forming an odd cycle (with more than one vertex, so at least 3 vertices). Note: a cycle of length 3 is the smallest odd cycle.\n\n 2. We are allowed to add edges arbitrarily (without loops or parallel edges). However, we cannot break existing edges.\n\n 3. We need the minimum number of edges to add. This means we should consider:\n\n    Option 1: If the graph already contains an odd cycle, then we don't need to add any edge (t=0). But note: the graph might not have an odd cycle initially, so we must check for that.\n\n    Option 2: If there's no odd cycle, then we can consider adding edges to create one.\n\n 4. How can we form an odd cycle? There are several possibilities:\n\n    a) The graph is not connected. Then we can look for two bipartite components (or one component that is bipartite and another that is not) but note: we are forming a cycle by adding edges.\n\n    Actually, note: the entire graph might be disconnected. However, we are only concerned with forming a cycle (which is connected). So we can form a cycle entirely in one connected component? Or we can form a cycle by connecting two components?\n\n    But note: the problem does not require the cycle to be in one connected component? Actually, the cycle is a connected structure. So the edges we add must connect some vertices and form a cycle.\n\n    However, the problem says: \"form a cycle of an odd length\", so the cycle must be connected.\n\n 5. Let us think about the minimal t:\n\n    - t = 0: if the graph already contains an odd cycle.\n\n    - Otherwise, we try to form an odd cycle by adding as few edges as possible.\n\n    Consider:\n\n      * Adding one edge: \n          - To form a triangle (cycle of length 3) we need three vertices that are mutually connected by two edges and we add the third. But wait, if we have two edges between three vertices, then the graph already has two edges, and we add the third. However, the graph is given without parallel edges, so we cannot have two edges between the same pair. Therefore, to form a triangle by adding one edge, we need two edges already present that form two sides of a triangle. Then adding the third completes the triangle (an odd cycle).\n\n          Example: \n            Input: \"3 2\\n1 2\\n2 3\" -> then we can add edge (1,3) to form a triangle.\n\n        But note: we could also form an odd cycle of length greater than 3? However, we are looking for the minimum number of edges to add.\n\n        The minimal t is either 0, 1, or maybe 2? \n\n        However, note: we can also form an odd cycle by connecting two even cycles? Actually, let's consider:\n\n        In fact, we can use the concept of bipartiteness. A graph is bipartite if and only if it contains no odd cycle. So if the graph is not bipartite, then it has an odd cycle and t=0.\n\n        If the graph is bipartite, then we cannot have an odd cycle. Now, what is the minimal number of edges to add to make it non-bipartite?\n\n        Adding an edge within the same bipartite set (same color) would create an odd cycle. Why?\n          In a bipartite graph, we color the graph with two colors. Then an edge between two vertices of the same color creates a path of even length (from the two vertices) and then the edge makes an odd cycle (even path + one edge is odd).\n\n        However, note: we might have multiple connected components. In each connected component, we have a bipartition. For the entire graph, if we have two connected components, then we can independently assign the colors arbitrarily (so the bipartitions of different components are independent). \n\n        But wait: if we add an edge that connects two different components, then the two components might have different bipartitions. However, when connecting two components, we might break the bipartiteness if we connect two nodes that are in the same part of their own bipartitions? Actually, no: the entire graph after connecting two components becomes one component, and we can recolor the entire graph? \n\n        Actually, the key is: to form an odd cycle, we need to create an odd-length cycle. The minimal way is to add an edge that connects two vertices in the same part (in the same connected component) because that would create an odd cycle. Alternatively, we can add edges",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges without creating loops or parallel edges.\n\n### Approach\n1. **Check for Existing Odd Cycles**: The graph may already contain an odd cycle. This is determined by checking if the graph is bipartite. A graph is bipartite if it can be colored with two colors such that no two adjacent vertices have the same color. If the graph is not bipartite, it contains an odd cycle, and no edges need to be added (t = 0).\n\n2. **Bipartite Graph Handling**: If the graph is bipartite, we need to find the minimal number of edges to add to create an odd cycle. The minimal number of edges required is either 1 or 2:\n   - **Adding one edge**: If there exists a pair of vertices within the same bipartition set that are not directly connected, adding an edge between them will create an odd cycle.\n   - **Adding two edges**: If no such pair exists in any connected component, we consider connecting two different connected components. Specifically, we look for two vertices from different components that, when connected, form an odd cycle with an existing path between them.\n\n3. **Counting Valid Edges**: For each connected component, count the number of missing edges within the same bipartition set. The total number of ways to add one edge is the sum of these missing edges across all components. For two edges, we count pairs of vertices from different components that, when connected, would form an odd cycle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_count += 1\n            color[i] = 0\n            comp_id[i] = comp_count\n            queue = deque([i])\n            current_comp = []\n            while queue:\n                node = queue.popleft()\n                current_comp.append(node)\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp_id[neighbor] = comp_count\n                        queue.append(neighbor)\n                    elif comp_id[neighbor] != comp_count:\n                        continue\n            components.append(current_comp)\n                \n    is_bipartite = True\n    for i in range(1, n+1):\n        if color[i] == -1:\n            is_bipartite = False\n            break\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    same_color_edges = [0] * (comp_count+1)\n    comp_color = [0] * (comp_count+1)\n    comp_nodes = [[] for _ in range(comp_count+1)]\n    \n    for i in range(1, n+1):\n        c = comp_id[i]\n        if color[i] == 0:\n            comp_nodes[c][0].append(i)\n        else:\n            comp_nodes[c][1].append(i)\n            \n    total_ways = 0\n    \n    for i in range(1, comp_count+1):\n        part0 = set(comp_nodes[i][0])\n        part1 = set(comp_nodes[i][1])\n        total_in_comp = len(part0) + len(part1)\n        total_possible_edges = (total_in_comp * (total_in_comp - 1)) // 2\n        existing_edges = 0\n        for node in comp_nodes[i][0]:\n            for neighbor in graph[node]:\n                if neighbor in part0:\n                    existing_edges += 1\n        existing_edges //= 2\n        same_color_edges[i] = total_possible_edges - existing_edges\n        \n    for i in range(1, comp_count+1):\n        total_ways += same_color_edges[i]\n        \n    if total_ways > 0:\n        print(\"1\", total_ways)\n        return\n        \n    t = 3\n    w = 0\n    \n    for i in range(1, comp_count+1):\n        for j in range(i+1, comp_count+1):\n            part0_i = comp_nodes[i][0]\n            part1_i = comp_nodes[j][1]\n            part0_j = comp_nodes[j][0]\n            part1_j = comp_nodes[j][1]\n            \n            candidates = []\n            for node in part0_i:\n                for neighbor in part1_j:\n                    if node != neighbor:\n                        candidates.append((node, neighbor))\n                        \n            for node in part1_i:\n                for neighbor in part0_j:\n                    if node != neighbor:\n                        candidates.append((node, neighbor))\n                    \n            w += len(candidates)\n            \n    print(\"2\", w)\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read and parsed into the number of vertices `n` and edges `m`, followed by the edges themselves.\n2. **Graph Construction**: The graph is constructed using adjacency lists.\n3. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness by attempting a two-coloring. If any component fails this check, the graph contains an odd cycle, and the answer is `0 1`.\n4. **Same Color Edges Calculation**: For each bipartite component, the number of missing edges within the same bipartition set is calculated. The sum of these edges across all components gives the number of ways to add one edge to form an odd cycle.\n5. **Two Edges Calculation**: If no single edge can form an odd cycle, the solution involves connecting vertices from different components. Specifically, edges between vertices of opposite colors in different components are considered. The count of such valid edges gives the number of ways to add two edges to form an odd cycle.\n6. **Output**: The minimal number of edges (`t`) and the corresponding number of ways (`w`) are printed based on the above checks.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    color = [-1] * (n+1)\n    components = []\n    comp_id = [-1] * (n+1)\n    comp_count = 0\n    \n    for i in range(1, n+1):\n        if color[i] == -1:\n            comp_count += 1\n            color[i] = 0\n            comp_id[i] = comp_count\n            queue = deque([i])\n            current_comp = []\n            while queue:\n                node = queue.popleft()\n                current_comp.append(node)\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        comp_id[neighbor] = comp_count\n                        queue.append(neighbor)\n                    elif comp_id[neighbor] != comp_count:\n                        continue\n            components.append(current_comp)\n                \n    is_bipartite = True\n    for i in range(1, n+1):\n        if color[i] == -1:\n            is_bipartite = False\n            break\n            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    same_color_edges = [0] * (comp_count+1)\n    comp_color = [0] * (comp_count+1)\n    comp_nodes = [[] for _ in range(comp_count+1)]\n    \n    for i in range(1, n+1):\n        c = comp_id[i]\n        if color[i] == 0:\n            comp_nodes[c][0].append(i)\n        else:\n            comp_nodes[c][1].append(i)\n            \n    total_ways = 0\n    \n    for i in range(1, comp_count+1):\n        part0 = set(comp_nodes[i][0])\n        part1 = set(comp_nodes[i][1])\n        total_in_comp = len(part0) + len(part1)\n        total_possible_edges = (total_in_comp * (total_in_comp - 1)) // 2\n        existing_edges = 0\n        for node in comp_nodes[i][0]:\n            for neighbor in graph[node]:\n                if neighbor in part0:\n                    existing_edges += 1\n        existing_edges //= 2\n        same_color_edges[i] = total_possible_edges - existing_edges\n        \n    for i in range(1, comp_count+1):\n        total_ways += same_color_edges[i]\n        \n    if total_ways > 0:\n        print(\"1\", total_ways)\n        return\n        \n    t = 3\n    w = 0\n    \n    for i in range(1, comp_count+1):\n        for j in range(i+1, comp_count+1):\n            part0_i = comp_nodes[i][0]\n            part1_i = comp_nodes[j][1]\n            part0_j = comp_nodes[j][0]\n            part1_j = comp_nodes[j][1]\n            \n            candidates = []\n            for node in part0_i:\n                for neighbor in part1_j:\n                    if node != neighbor:\n                        candidates.append((node, neighbor))\n                        \n            for node in part1_i:\n                for neighbor in part0_j:\n                    if node != neighbor:\n                        candidates.append((node, neighbor))\n                    \n            w += len(candidates)\n            \n    print(\"2\", w)\n    \nif __name__ == \"__main__\":\n    main()",
    "score": -1,
    "metadata": {
        "prompt_token_count": 564,
        "completion_token_count": 1419,
        "thoughts_token_count": 1023
    }
}