{
    "start": 1758294377.816658,
    "end": 1758296489.5926576,
    "start-formatted": "2025-09-20 00:06 KST",
    "end-formatted": "2025-09-20 00:41 KST",
    "gpu": 2,
    "pid": 41,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Zoning Restrictions Again\n\nYou are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.\n\n## Input\nThe first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$) — the number of spots, the maximum height, and the number of restrictions.Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$) — left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.\n\n## Output\nPrint a single integer, the maximum profit you can make.\n\n## Example\n### Input\n['3 3 3\\n1 1 1\\n2 2 3\\n3 3 2', '4 10 2\\n2 3 8\\n3 4 7']\n\n### Output\n['14', '262']\n\n## Note\nIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a hard question."
        }
    ],
    "thought": "\n Since n, m, h are at most 50, we can use dynamic programming or try to assign heights with constraints.\n However, the restrictions are given as intervals and require that the maximum height in a given interval is at most x_i.\n\n Observation: Each restriction i defines an interval [l_i, r_i] and requires that the maximum height in that interval <= x_i.\n\n We cannot exceed the overall h. Also, note that we have multiple restrictions that might overlap.\n\n Approach:\n We can consider the following:\n\n 1. Since the number of spots is small (n <= 50) and the number of restrictions is small (m <= 50), we can try to combine the restrictions.\n\n 2. Note that if there is no restriction on a particular spot, then we can set it to h (because h^2 is the maximum for one house).\n\n 3. However, the restrictions may force some spots to be lower.\n\n 4. Another idea: we can collect all the restrictions and for each spot, we know that its height must be at most the minimum x_i from any restriction that covers that spot? But note: the restrictions are independent and a house might be covered by multiple restrictions. However, we cannot simply set the height for a spot to the minimum x_i because the restriction is about the entire interval. But note: if a spot is covered by multiple restrictions, then the height at that spot must satisfy all the restrictions. So the height at spot j must be <= min{ x_i | the restriction i covers j }.\n\n However, wait: is that sufficient? Consider two restrictions: \n   Restriction1: [1,3] with x1 = 5\n   Restriction2: [2,4] with x2 = 3\n\n Then spot2 must be <= min(5,3)=3. Similarly, spot3 must be <= min(5,3)=3.\n\n But what if we have two restrictions that don't necessarily apply independently? Actually, the condition is: for each restriction, the maximum in the interval is <= x_i.\n\n So for each spot j, the height must be <= the minimum x_i for which j is in [l_i, r_i]. Let's call this value for spot j as R_j.\n\n Then, the problem reduces to: assign to each spot j a height a_j such that 0<=a_j<=min(R_j, h). However, note: we have the global h, so the actual constraint for spot j is: a_j <= min(h, R_j).\n\n But wait: is that enough? Consider: the restrictions also require that the maximum in an interval is <= x_i. However, if we set each spot j to at most min(h, R_j), then for any restriction i (which has interval [l_i, r_i] and x_i), the maximum in that interval is at most max_{j in [l_i, r_i]} a_j <= max_{j in [l_i, r_i]} min(h, R_j) <= x_i? \n\n Not exactly: because R_j is defined as the minimum x_i for which j is in the interval. But note: if we define R_j = min{ x_i : j in [l_i, r_i] }, then for the restriction i, we have that for every j in [l_i, r_i], R_j <= x_i (because x_i is one of the x's in the set). Therefore, the maximum in [l_i, r_i] is at most max_{j in [l_i, r_i]} R_j. But we must ensure that max_{j in [l_i, r_i]} R_j <= x_i.\n\n However, note: R_j is defined only by the restrictions that cover j. For the restriction i, we require that the maximum height in [l_i, r_i] is <= x_i. If we set each a_j = min(h, R_j), then the maximum in [l_i, r_i] is at most max_{j in [l_i, r_i]} min(h, R_j) <= max_{j in [l_i, r_i]} R_j. But is max_{j in [l_i, r_i]} R_j <= x_i?\n\n Actually, by definition, for each j in [l_i, r_i], R_j <= x_i (because restriction i gives an x_i and j is in the interval). Therefore, the maximum over j in [l_i, r_i] of R_j is <= x_i. So the condition is satisfied.\n\n However, wait: what if we set the house j to a value less than R_j? Then the condition is still satisfied. So the minimal constraint per house is that a_j <= min(h, R_j). But note: we are allowed to set the house to any value between 0 and min(h, R_j). To maximize profit, we would set each house",
    "response": "\nTo solve this problem, we need to maximize the profit from building houses on a street while adhering to zoning restrictions. The profit is calculated as the sum of the squares of the heights of the houses built on each spot. The constraints require that the tallest house in any specified interval must not exceed a given height.\n\n### Approach\n1. **Problem Analysis**: The problem involves assigning heights to houses such that all zoning restrictions are satisfied. Each restriction specifies that the maximum height in a certain interval must be at most a given value. The goal is to maximize the sum of the squares of the house heights within these constraints.\n2. **Key Insight**: For each spot, the maximum allowable height is determined by the most restrictive restriction that includes that spot. Specifically, for each spot, the height must be less than or equal to the minimum of all the restriction values that cover it, but also not exceeding the global maximum height `h`.\n3. **Algorithm Selection**: We first preprocess the restrictions to determine the minimum allowable height for each spot. This involves scanning all restrictions and for each spot, finding the smallest `x_i` among all restrictions that include it. Once we have these constraints, we can set each house's height to the maximum allowed (i.e., the minimum of the computed constraint and `h`) to maximize the profit, since the profit function is quadratic and increases with the height.\n4. **Complexity Analysis**: The preprocessing step involves iterating over each spot and each restriction, which is O(n*m) where n is the number of spots and m is the number of restrictions. Since both n and m are at most 50, this approach is efficient.\n\n### Solution Code\n```python\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    constraints = [10**9] * n\n    for (l, r, x_val) in restrictions:\n        for i in range(l-1, r):\n            if x_val < constraints[i]:\n                constraints[i] = x_val\n    \n    total_profit = 0\n    for i in range(n):\n        height = min(constraints[i], h)\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Reading Input**: The input is read from standard input, which includes the number of spots `n`, the maximum height `h`, the number of restrictions `m`, and the restrictions themselves.\n2. **Processing Restrictions**: For each restriction, we update the constraints array to reflect the most restrictive height limit for each spot. This is done by iterating over each restriction and updating the corresponding spots in the constraints array with the minimum `x_i` value that affects them.\n3. **Calculating Profit**: After determining the constraints for each spot, we compute the maximum allowable height for each spot as the minimum between its constraint and the global maximum height `h`. The profit is then calculated by summing the squares of these heights.\n4. **Output**: The total profit is printed as the result.\n\nThis approach efficiently handles the constraints and ensures that the solution maximizes the profit while adhering to all zoning restrictions.",
    "ground_truth": "N/A",
    "extracted_answer": "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    h = int(data[1])\n    m = int(data[2])\n    \n    restrictions = []\n    index = 3\n    for _ in range(m):\n        l = int(data[index])\n        r = int(data[index+1])\n        x_val = int(data[index+2])\n        restrictions.append((l, r, x_val))\n        index += 3\n    \n    constraints = [10**9] * n\n    for (l, r, x_val) in restrictions:\n        for i in range(l-1, r):\n            if x_val < constraints[i]:\n                constraints[i] = x_val\n    \n    total_profit = 0\n    for i in range(n):\n        height = min(constraints[i], h)\n        total_profit += height * height\n    \n    print(total_profit)\n\nif __name__ == \"__main__\":\n    main()",
    "score": 1,
    "metadata": {
        "prompt_token_count": 822,
        "completion_token_count": 738,
        "thoughts_token_count": 1023
    }
}