{
    "start": 1758299442.7219806,
    "end": 1758303144.6580129,
    "start-formatted": "2025-09-20 01:30 KST",
    "end-formatted": "2025-09-20 02:32 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very hard question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to the graph to form an odd cycle, and the number of ways w (without creating loops or parallel edges) to do so.\n\n Observing that:\n  - An odd cycle must have at least 3 edges (a triangle is the smallest odd cycle, which has 3 edges).\n  - We cannot use existing edges in the cycle? Actually, we can use existing edges and then add the remaining ones.\n\n However, note: we are allowed to add edges arbitrarily (as long as no loops or parallel edges). The goal is to form an odd cycle (simple cycle, each vertex at most once) by adding as few edges as possible.\n\n Steps:\n\n 1. If the graph already contains an odd cycle, then t=0 and w=1? But wait, the problem says \"minimum number of edges to be added\", so if there is an odd cycle, we don't need to add any edge. However, note that the input graph might not have an odd cycle.\n\n But note: the problem does not say that the graph is simple. However, it says without loops and parallel edges.\n\n However, note: the graph might be disconnected.\n\n Let's break down:\n\n Case 1: The graph already has an odd cycle. Then t=0 and w=1? But wait, what if there are multiple ways to form an odd cycle with 0 edges? Actually, if the graph already has an odd cycle, then we don't need to add any edge. And there is exactly one way (i.e., do nothing). So t=0, w=1.\n\n Case 2: The graph does not have an odd cycle. Then we consider adding edges.\n\n What are the possibilities?\n\n Note: In a bipartite graph, there is no odd cycle. So if the graph is bipartite, then we don't have an odd cycle.\n\n Therefore, we can check for bipartiteness. However, note: the graph may not be connected. So we do bipartite check on each connected component.\n\n But note: even if the graph is bipartite, we can form an odd cycle by adding edges.\n\n How to form an odd cycle?\n\n Possibilities:\n\n Option 1: Add edges to form a triangle (cycle of length 3). This requires 3 edges, but we can also form a cycle of length 5, etc.\n\n However, we want the minimum number of edges to add.\n\n Let's think:\n\n  - If the graph is not connected, then we might form an odd cycle by connecting two components? But note: we can form an odd cycle entirely within one component? Actually, no: if the entire graph is bipartite, then every connected component is bipartite.\n\n Steps:\n\n 1. Check if the graph is bipartite (each connected component). If there is an odd cycle in any component, then we are done (t=0, w=1).\n\n 2. If the graph is bipartite (no odd cycle), then we need to add edges.\n\n Now, how many edges must we add at minimum?\n\n We know that the graph is bipartite, so we can color the graph with two colors (say black and white). Then, an odd cycle would require an edge that connects two vertices of the same color (because then the cycle length would be odd). \n\n However, note: we can form an odd cycle by creating an edge between two same-colored vertices, but also we can form an odd cycle by creating multiple edges that together with existing edges form an odd cycle.\n\n Actually, the minimal number of edges we can add is 1? Because if we can complete a triangle, then we can form a 3-cycle (odd) by adding one edge. But wait: a triangle requires 3 edges. If we have two edges already, then we only need to add the third. But if we don't have two edges, then we might need to add more.\n\n However, consider: \n   - To form a triangle, we need three edges. If the graph has two edges of a triangle missing, then we can add one edge to complete the triangle. But if the graph doesn't have any two edges of a triangle, then we need to add three edges.\n\n But wait, we are allowed to choose any set of edges (as long as no duplicate or loop). We want the minimum number of edges to add to get an odd cycle.\n\n Another possibility: we can form an odd cycle of length 5 by adding two edges (if the graph already has a path of length 3 in a bipartite graph?).\n\n Actually, let me reframe:\n\n We are allowed to add edges arbitrarily. We are looking for the minimal t such that after adding t edges, the graph has an odd cycle.\n\n Since the graph is bipartite, all cycles are even. We can break the bipartiteness by adding an edge that connects two vertices of the same color.",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges without creating loops or parallel edges.\n\n### Approach\n1. **Check for Existing Odd Cycles**: The graph may already contain an odd cycle. If it does, no edges need to be added (t = 0, w = 1). This is checked using a bipartite graph test; if the graph is not bipartite, it contains an odd cycle.\n2. **Bipartite Graph Handling**: If the graph is bipartite, adding an edge between two vertices of the same color will create an odd cycle. The minimal number of edges to add is either 1 (if such an edge can form an odd cycle) or more if no single edge suffices.\n3. **Edge Addition Scenarios**:\n   - **Single Edge Addition**: If there exists at least one pair of vertices in the same partition (color) that are not connected by an edge, adding one edge between them creates an odd cycle. The number of such pairs is calculated.\n   - **Two Edges Addition**: If no such pair exists (i.e., the graph is complete bipartite), then forming an odd cycle requires adding two edges. This involves connecting three vertices in a triangle-like structure but with an even-length path initially.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            components += 1\n            visited[i] = 1\n            color[i] = 0\n            q = deque([i])\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = 1 - color[node]\n                        q.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n                            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_edges = n*(n-1)//2\n    existing_edges = m\n    \n    same_color_pairs = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] == color[j] and graph[i].count(j) == 0:\n                same_color_pairs += 1\n                \n    if same_color_pairs > 0:\n        print(f\"1 {same_color_pairs}\")\n        return\n        \n    t = 2\n    w = 0\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] != color[j]:\n                for k in range(1, n+1):\n                    if k != i and k != j and color[k] == color[i] and graph[i].count(k)==0 and graph[j].count(k)==0:\n                        w += 1\n                        \n    print(f\"2 {w}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Graph Representation**: The graph is read from input and stored as an adjacency list.\n2. **Bipartite Check**: Using BFS, each connected component is checked for bipartiteness. If any component fails the bipartite check, an odd cycle exists, and the answer is (0, 1).\n3. **Same Color Pairs Calculation**: For a bipartite graph, count the number of non-edges between vertices of the same color. If any exist, adding one such edge forms an odd cycle, and the answer is (1, count).\n4. **Two Edges Scenario**: If no same-color non-edge exists, the graph is a complete bipartite graph. Forming an odd cycle requires adding two edges. For each vertex, count potential third vertices that can form a triangle-like structure (even-length path + one edge). The total valid configurations are counted.\n5. **Output**: Based on the checks, the solution outputs the minimal edges to add (t) and the number of ways (w) to achieve an odd cycle.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 0\")\n        return\n        \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    \n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = 0\n    \n    for i in range(1, n+1):\n        if visited[i] == 0:\n            components += 1\n            visited[i] = 1\n            color[i] = 0\n            q = deque([i])\n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = 1 - color[node]\n                        q.append(neighbor)\n                    else:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n                            \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_edges = n*(n-1)//2\n    existing_edges = m\n    \n    same_color_pairs = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] == color[j] and graph[i].count(j) == 0:\n                same_color_pairs += 1\n                \n    if same_color_pairs > 0:\n        print(f\"1 {same_color_pairs}\")\n        return\n        \n    t = 2\n    w = 0\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if color[i] != color[j]:\n                for k in range(1, n+1):\n                    if k != i and k != j and color[k] == color[i] and graph[i].count(k)==0 and graph[j].count(k)==0:\n                        w += 1\n                        \n    print(f\"2 {w}\")\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1054,
        "thoughts_token_count": 1023
    }
}