{
    "start": 1758300060.5153615,
    "end": 1758303971.4685636,
    "start-formatted": "2025-09-20 01:41 KST",
    "end-formatted": "2025-09-20 02:46 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is an easy question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to the graph to form an odd cycle, and the number of ways w (without creating loops or parallel edges).\n\nObservations:\n1. The graph is undirected, without loops and multiple edges.\n\nWe note that:\n- An odd cycle (of length >= 3) must have at least 3 edges. But note: the problem says \"simple cycle\" (each vertex at most once) and of odd length (so at least 3).\n\nCases:\n\nCase 0: If the graph already contains an odd cycle, then we don't need to add any edge (t=0). However, note that the problem says we are to form a cycle of odd length. So if there is already one, then t=0 and w=1? Actually, wait: the problem says \"the minimum number of edges that must be added\", so if there's already an odd cycle, then we don't need to add any. But note: the problem doesn't say we cannot use the existing edges. So if the graph already has an odd cycle, then we don't need to add any edge. However, how do we check for an odd cycle?\n\nBut note: the problem says \"form a simple cycle of an odd length\". So if there is already one, then we don't need to add any edge.\n\nHowever, the example input:\n  \"3 3\\n1 2\\n2 3\\n3 1\" -> output \"0 1\"\n\nSo we must check for the existence of an odd cycle.\n\nBut note: an odd cycle can be of any odd length (3,5,7,...). The smallest is 3 (triangle). Also, note that a graph might have multiple cycles, but we only care about the existence of at least one odd cycle.\n\nHow to check for odd cycle? We can use BFS/DFS with coloring (bipartite check). If the graph is not bipartite, then it contains an odd cycle.\n\nSo:\n  - If the graph is not bipartite -> t = 0, w = 1? But wait, the example output for \"3 0\" is \"3 1\", meaning no odd cycle initially.\n\nHowever, note: the example input \"3 3\\n1 2\\n2 3\\n3 1\" is a triangle, which is an odd cycle. So we output \"0 1\".\n\nBut what if the graph is disconnected? Then we have to check each connected component.\n\nSo steps:\n\n1. Check if the graph has any odd cycle (non-bipartite). Then t=0, but what is w? The problem says: the number of ways to add t edges. Here t=0, so we must count the ways to add 0 edges? There is exactly one way: add nothing. So w=1.\n\nBut wait, the problem says: \"It is prohibited to add loops or parallel edges.\" and we are only adding edges that are not present. And two ways are the same if they have the same set of edges. Since we are adding 0 edges, there is only one way: the empty set.\n\nHowever, note: sometimes the graph might have an odd cycle, but we are allowed to add edges arbitrarily (as long as we don't duplicate or create a loop) and the condition is to form an odd cycle. But if the graph already has an odd cycle, then we don't need to add any edge. So the answer is (0,1).\n\n2. If the graph is bipartite, then we cannot have an odd cycle. Then we must consider adding edges until we form an odd cycle.\n\nWhat is the minimum number of edges to add to form an odd cycle?\n\nNote: an odd cycle must have an odd number of edges and must be simple. We can consider forming a triangle (which is the smallest odd cycle) by adding 1 or 2 edges.\n\nHowever, note: the graph is bipartite, so we can color the graph with two colors. In a bipartite graph, there are no odd-length paths between vertices of the same color, and even-length between different colors.\n\nTo form an odd cycle, we need to connect two vertices that are in the same bipartite set (so that the path between them via the original graph is even, and then adding an edge between them makes the cycle odd). But note: the entire cycle will then be: the even-length path (from u to v) plus the direct edge (odd length: total odd). However, we might form a cycle that is longer than 3. But the minimal number of edges to add is either 1 or more.\n\nActually, the minimal way is to add one edge. Why?\n  - Consider: if we can find two vertices u and v in the same bipartite set such that there is a path between them (so they are in the same component) then adding the edge (u,v) creates an odd cycle (because the path from u to v is even, so the cycle length is even + 1 -> odd).\n\nBut what if there are no edges between two same-colored vertices? Then adding one edge would create an odd cycle. However, note: the graph is bipartite so we have two sets, say black and white. In a bipartite graph, edges only go from black to white. Therefore, if we add an edge within the same color, we break bipartiteness.\n\nBut note: we are allowed to add any edge that is not present (and not a loop). So we can add an edge between two vertices in the same set (black-black or white-white). Then we get an odd cycle.\n\nHowever, is that the minimal? Yes, because we are only adding one edge.\n\nBut wait: what if the graph is not connected? Then we have multiple components. Then we might also consider connecting two different bipartite components? Actually, if we connect two components, we don't necessarily form a cycle. We need to form a cycle. \n\nBut note: if we add an edge between two vertices from the same component (same bipartite set) then we create an odd cycle. However, if we add an edge between two vertices from different components, then we don't immediately form a cycle. However, we can also consider the possibility of adding two edges to form a triangle? \n\nWait, actually the minimal number of edges to add is 1 if there exists at least one pair of vertices (in the same bipartite set) that are not connected by an edge? But note: in the given graph, we are not allowed to add existing edges. So if an edge is missing, we can add it.\n\nBut the problem: we are to form an odd cycle. The odd cycle must be entirely in the graph (after adding edges). \n\nLet me think:\n\nPossibility 1: Add one edge within the same bipartite set (say, between two black nodes). Then consider: the two black nodes are in the same component (if they are in the same component) then there is a path (even length) between them. Then the cycle is the path (even) plus the new edge (1) -> odd. So that forms an odd cycle.\n\nBut what if the two black nodes are in different components? Then adding an edge between two black nodes from different components does not form a cycle. It just connects two components. Then we don't have an odd cycle.\n\nTherefore, we can only form an odd cycle by adding one edge if the two vertices (same color) are in the same connected component. If the graph is disconnected, then we cannot form a cycle by adding one edge between two same-colored nodes from different components because there isn't a path connecting them (so no cycle is formed).\n\nWait, but when we add an edge between two same-colored nodes from different components, then we don't get a cycle because the two nodes were not connected by any path. However, we can form a cycle by using two edges? \n\nPossibility 2: What if we add two edges? For example, consider three vertices: two in one component (black) and one in another (black). Then we can add two edges: one from the first black to the other black, and one from the second black to the third black? Actually, no, because that would require two edges and we are looking for minimal t.\n\nBut note: we are to find the minimum number of edges. So if we can form an odd cycle by adding one edge, then t=1. Otherwise, we look for two edges.\n\nHowever, there is another possibility: adding two edges to form a triangle (a 3-cycle) that uses two vertices from one component and one from another? Actually, no: a triangle requires three distinct vertices and three edges. But if we have three vertices, say u, v, w, then we can form a triangle by adding the missing edges. But if the graph is bipartite, then the three vertices cannot form a triangle because in a triangle, all three edges are needed and the triangle is an odd cycle. However, if two of these vertices are in the same bipartite set, then we cannot have an edge between them (because then the graph wouldn't be bipartite). Actually, in a bipartite graph, we cannot have an edge between two vertices of the same set. So if we want to form a triangle, we must have three vertices with edges (u,v), (v,w), (w,u). But if the graph is bipartite, then the three vertices cannot be all in the same set. In fact, in a triangle, the three vertices must be two of one color and one of the other. Then the edges: (u,v) [u and v different], (v,w) [v and w different] -> then u and w must be the same color? Then (u,w) is an edge between two same-colors, which we are allowed to add? \n\nWait, in a triangle (three vertices): \n  Let the three vertices be A, B, C.\n  Without loss of generality, assume A is black. Then B and C must be white (because edges from A to B and A to C). Then the edge between B and C must be between two whites, which is forbidden in a bipartite graph? But wait, our graph is bipartite, so initially we don't have that edge. Then if we add the edge (B,C) (which is between two whites), then we form a triangle: A-B-C-A. The cycle A-B-C-A has length 3 (odd) and uses the existing edges (A-B and A-C) and the new edge (B-C). So we are adding one edge (the edge between B and C). \n\nBut note: the original graph must have the edges (A,B) and (A,C). So the triangle is formed by two edges from A and then we add the third.\n\nBut what if the two edges (A,B) and (A,C) are already present? Then the graph originally has two edges of the triangle. Then adding the edge (B,C) completes the triangle.\n\nBut what if the two edges (A,B) and (A,C) are not present? Then we would need to add two edges: (A,B) and (A,C) and then (B,C)? No, because then we are adding three edges. Alternatively, we could consider a different triangle? \n\nActually, let's break down:\n\nOption A: Adding one edge (if there is a pair of same-colored nodes in the same component) -> then we complete a cycle (the even path plus the one edge) and that cycle is odd.\n\nOption B: If we cannot form a cycle by adding one edge, then we might need to consider two edges. But note: two edges might form an odd cycle? \n\nFor example, consider two edges: one edge between two same-colored nodes in the same component (but wait, if they are in the same component, we already considered one edge). Or two edges that together form a triangle? \n\nActually, the minimal t is either 0 (if odd cycle exists), or 1, or maybe 2? \n\nBut note: the problem states that we are to form a simple cycle of odd length. \n\nConsider: if we add two edges, we can form an odd cycle. How?\n\nExample: Suppose we have two separate triangles? Actually, no. \n\nAlternatively, consider a graph with two connected components, both bipartite. Suppose we have two components: one with vertices {a, b} (with an edge between a and b) and another with {c, d} (with an edge between c and d). Now, we can form a cycle by adding two edges: connect a to c and b to d? Then we get a cycle: a-c-b-d-a. This cycle has 4 edges -> even. That's not odd.\n\nBut we can form an odd cycle by adding two edges differently: \n\nSuppose we have two components, and we add two edges that connect the two components and within one component we have two same-colored nodes. Actually, wait: we are allowed to add edges arbitrarily (as long as no duplicate or loop). \n\nAnother idea: we can form a 5-cycle. But that requires 5 edges. \n\nWait, let me think about the minimal odd cycle: the smallest is 3. So we need to form a triangle (3 edges). \n\nIn the current graph, if we don't have a triangle, we can add up to 3 edges to form a triangle. But we are looking for the minimal number of edges.\n\nBut note: we are allowed to use the existing edges. So we can use existing edges to form part of the triangle.\n\nActually, we can consider:\n\n- To form a triangle, we need three edges. The graph may already have some of these edges.\n\nBut note: the graph is bipartite, so we cannot have an edge between two same-colored nodes. Therefore, in a triangle, the three edges must be: \n   - Between two different colors: two edges (from the first node to the two others) and the last edge is between the two others (same color). \n\nBut the two edges from the first node (which is one color) to the two others (the other color) are allowed (because they are between different colors). However, the edge between the two others (same color) is not present (because the graph is bipartite). So we need to add that one edge.\n\nBut wait: the graph might not have the two edges from the first node? Then we would have to add two edges (from the first node to the two others) and then one more edge (between the two others) to complete the triangle? Then that's three edges.\n\nBut note: we are allowed to choose any set of edges (without duplicating or loops). So the minimal number of edges to add to form a triangle is 1 if the two edges from the central node are already present. If only one edge is present, then we need to add two edges. If none are present, we need to add three.\n\nBut wait: we are not forced to use a central node. We can use any three vertices. \n\nActually, we can choose any three vertices. The condition for a triangle in a bipartite graph is that the three vertices must have two in one set and one in the other (because the triangle is an odd cycle and bipartite graphs don't have odd cycles). Then the edges: \n   - The two edges from the single set vertex to the two others are allowed (since they are between different sets). \n   - The edge between the two in the same set must be added.\n\nBut the graph might already have some of these edges. However, note: the graph is bipartite, so the edge between the two in the same set is not present. The edges from the single set vertex to the two others might be present or absent.\n\nSo the minimal edges to add for a triangle is 1 if the two edges from the single set vertex to the two others are present. Otherwise, we might have to add more.\n\nBut wait, we are allowed to form an odd cycle that is not necessarily a triangle. For example, a 5-cycle? However, a 5-cycle requires 5 edges. So the minimal is 3 (if we start from scratch) but we can use existing edges.\n\nBut note: we are to find the minimal t (minimum edges to add) and the number of ways to add t edges to form an odd cycle.\n\nSo:\n\nStep 1: Check if the graph is non-bipartite (already has an odd cycle) -> then t=0, w=1.\n\nStep 2: If the graph is bipartite, then we must consider:\n\n  a) We can form an odd cycle by adding one edge: if there exists at least one edge (u, v) (with u and v in the same bipartite set) such that u and v are in the same connected component and the edge (u,v) is not present. Then t=1, and w is the count of all such edges (that are missing and between same set and same component).\n\nBut wait: what if there are two same-colored nodes in the same component that are not connected by an edge? Then adding that edge creates an odd cycle.\n\nHowever, note: we must be cautious because the graph is bipartite, so edges are only between the two sets. Therefore, the only edges we can add to create an odd cycle are edges between the same set (black-black or white-white). But note: if we add an edge between two same-colored nodes that are in the same component, then we break the bipartiteness and create an odd cycle (because the path from u to v is even, and then the cycle is even+1 = odd). \n\nBut what if the two same-colored nodes are in different components? Then adding an edge between them doesn't create a cycle (because they are in separate components). So we don't form an odd cycle.\n\nTherefore, for t=1, we must consider only pairs (u, v) that are in the same connected component and same bipartite set (i.e., same color) and the edge (u,v) is not present.\n\nBut what if there are no such pairs? Then we cannot form an odd cycle by adding one edge.\n\nThen we must consider t=2.\n\nNow, how to form an odd cycle by adding two edges?\n\nWe can form an odd cycle by creating a triangle (if we add two edges) or by creating a larger odd cycle.\n\nBut note: the minimal odd cycle is 3. So we try to form a triangle.\n\nTo form a triangle, we need three edges. The graph is bipartite, so the triangle must have two edges of the two colors? Actually, the triangle must have two edges between the two sets and one edge within the same set. \n\nBut wait: a triangle has three edges. In a bipartite graph, the triangle must have two edges of one color and one edge of the other? Actually, no: the triangle is an odd cycle. In a bipartite graph, we cannot have an edge within a set, so the triangle must be broken into: two edges from the central node (which is one set) to the two others (the other set) and then the edge between the two others (same set) must be added. \n\nBut note: the two edges from the central node (say set A) to the two others (set B) might not be present. Similarly, the edge between the two in set B might not be present.\n\nActually, we can form a triangle by adding two edges if the graph already has one edge of the triangle.\n\nBut wait, the triangle has three edges: \n   - Edge1: from A to B\n   - Edge2: from A to C\n   - Edge3: from B to C\n\nBut the graph is bipartite, so Edge1 and Edge2 are allowed (they are between sets). Edge3 is not allowed (same set) so we must add it. However, if the graph already has Edge1 and Edge2, then we only need to add Edge3 (so one edge). \n\nBut if the graph has only one of Edge1 or Edge2, then we need to add two edges: the missing one from A to the other and the edge3.\n\nWait, let me clarify:\n\nWe are going to pick three vertices: one from set A (call it u) and two from set B (call them v and w). Then the triangle edges are (u,v), (u,w), (v,w).\n\nThe graph is bipartite, so (u,v) and (u,w) are allowed (they are between sets). The edge (v,w) is within set B and is not allowed.\n\nCase 1: The graph already has (u,v) and (u,w). Then we only need to add (v,w) (one edge).\n\nCase 2: The graph has only one of (u,v) or (u,w). Then we need to add two edges: the missing edge from u and the edge (v,w).\n\nCase 3: The graph has neither (u,v) nor (u,w). Then we need to add three edges: (u,v), (u,w), and (v,w).\n\nBut note: we are to find the minimal t. So if we can form an odd cycle by adding one edge (by connecting two same-colored nodes in the same component) then t=1. Otherwise, we look for two edges.\n\nBut wait: the above triangle formation requires at least one existing edge (from u to v or u to w). However, note that the two edges (u,v) and (u,w) might not be present. Then we cannot form a triangle by adding two edges if there are no edges from u to v and w.\n\nBut note: the graph is bipartite, so the edges from u to v and u to w are the only ones that can be present (if they exist). \n\nHowever, we can form a triangle in two edges if the graph has one of the edges (u,v) or (u,w). \n\nBut wait, there is another possibility: we can form an odd cycle of length 5. However, 5 edges is longer, so we are only concerned with minimal t.\n\nBut note: we are to find the minimal t (minimum edges to add). So if we can form an odd cycle by adding two edges (for example, by completing two edges of a triangle) then t=2. \n\nBut is two edges the minimal when one edge is not enough? \n\nWhat if we cannot form an odd cycle by adding one edge (because there is no missing edge between same-colored nodes in the same component) then the next minimal is two edges.\n\nBut note: we can also form an odd cycle by connecting two different components. However, to form a cycle we need to connect the two components and then use the existing structure to form a cycle. \n\nWait, consider two components (both bipartite). We can take two vertices from one component (same color) and two vertices from the other component (same color). Then we can add edges: (u1, u2) and (v1, v2) and then we have a cycle? Actually, no. \n\nAlternatively, consider: \n   Component1: {a, b} (with edge a-b) and Component2: {c, d} (with edge c-d). \n   We can form a cycle: a-c-b-d-a. This is a 4-cycle (even). \n\nBut we want an odd cycle. \n\nAnother idea: take one vertex from component1 (a) and two vertices from component2 (c and d). Then we can add edges (a,c) and (c,d) and (d,a)? Then we form a triangle (if we add two edges: (a,c) and (d,a)) but wait, we need three edges for the triangle. \n\nActually, we can form a triangle by taking two vertices from one component (same color) and one vertex from another component (different color). But note: the two vertices from the same component (same color) are not connected by an edge (because the graph is bipartite and same color edges are not present). Then we can add two edges: one from the first same color vertex to the vertex in the other component, and one from the second same color vertex to the vertex in the other component. Then we have a triangle: the two edges from the two same color vertices to the other component's vertex, and the edge between the two same color vertices is missing (but wait, we didn't add it). \n\nWait, let me write the cycle: \n   Let the two same color vertices be u and v (in component1) and the vertex from component2 be w. Then we add edges (u,w) and (v,w). Now, we have a cycle: u->w->v->? There's no edge from v to u (because same color). So we don't have a cycle. \n\nBut note: we can also use the existing edges. However, u and v are in the same component, so there is a path from u to v (even length). Then the cycle would be: u->...->v->w->? (we don't have an edge from w to u). \n\nWait, no. The cycle would be: u->v->w->u? But we don't have an edge from w to u (unless we add it). \n\nAlternatively, we can form a cycle: u->w->v-> ... (then back to u). But without an edge from v to u, we cannot close the cycle.\n\nBut wait, we don't have an edge from v to u, so we cannot form a cycle with three edges.\n\nAlternatively, we can use the existing path from u to v (even length) and then the two edges (u,w) and (v,w) to form a cycle: u->v->w->u. But the path from u to v is even, then the edge from v to w is one, then from w to u is one: total length = (even) + 1 + 1 = even + 2 -> even. Not odd.\n\nBut note: the entire cycle is: \n   Start at u, go along the path to v (even number of edges), then from v to w, then from w to u. The total edges: even + 1 + 1 = even+2 -> even.\n\nSo that's even.\n\nWhat if we use the edges (u,w) and (v,w) and also the existing edge between u and v? Then we have a triangle: u->v->w->u. But wait, the edge u->v is already present (because u and v are in the same component and same color? Actually, no: in a bipartite graph, edges are only between different colors. So if u and v are the same color, then the edge u->v is not present. \n\nWait, no: the graph is bipartite, so u and v (same color) are not connected by an edge. \n\nSo we cannot form a triangle by adding two edges from two same-colored nodes to a node in a different component because we don't have the edge between the two same-colored nodes and we cannot use an existing edge between them.\n\nTherefore, we must consider:\n\n  Option 1: t=0 (if the graph is non-bipartite)\n\n  Option 2: t=1 (if there exists at least one pair (u,v) of same-color nodes in the same connected component, and the edge (u,v) is missing)\n\n  Option 3: t=2 (if we cannot do t=1, but we can form an odd cycle by adding two edges)\n\nBut what is the condition for t=2?\n\nWe can form an odd cycle by adding two edges if:\n\n  Case A: There exists a triangle (three vertices) such that two edges are already present (so we only need to add the third). The third edge must be the one connecting the two same-color nodes (which is not present). The two edges that are present must be the two edges from the central node (the one of different color) to the two same-color nodes.\n\n  OR\n\n  Case B: There exists a larger odd cycle (like a 5-cycle) that can be formed by adding two edges.\n\nBut note: the problem asks for the minimum number of edges. So if we can form an odd cycle by adding two edges, then t=2, and then we must count the number of ways.\n\nHowever, is two edges the minimal when one edge is not available? \n\nBut note: we are to form an odd cycle. The odd cycle must have at least 3 edges. The minimal cycle we can form by adding edges is:\n\n  - 1 edge: if we can connect two same-colored nodes in the same component (then the cycle is the existing path (even) plus the new edge (1) -> odd).\n\n  - 2 edges: if we cannot do 1, then we try 2.\n\nBut note: there is another possibility: adding two edges to form a 3-cycle (triangle) if the graph already has one edge of the triangle. \n\nBut wait: the triangle requires three edges. If the graph has one edge, then we need to add two edges to complete the triangle. \n\nBut is that the minimal? Because we cannot form a triangle with less than three edges.\n\nBut note: we are allowed to use the existing edges. So if the graph has one edge of the triangle, then we need two edges.\n\nHowever, we can also form a 5-cycle (which is odd) by adding two edges. \n\nBut how? \n\nConsider: \n   We have a path of even length (say) and we break it by adding two edges to form an odd cycle.\n\nBut note: the minimal odd cycle is 3, so if we cannot form a 3-cycle by adding two edges, then we might need more.\n\nBut the problem says: minimal number of edges. So if we can form an odd cycle by adding two edges (either by forming a triangle or a pentagon) then t=2.\n\nBut note: we must check if there is any way to form an odd cycle by adding two edges.\n\nHowever, the problem is complex. We must design an efficient solution.\n\nAlternative approach:\n\nSince the graph is large? (n, m given) but the constraints are not specified. But competitive programming problem, so we assume n, m up to a few thousands.\n\nWe can do:\n\n1. Check bipartiteness and record the bipartite sets for each connected component.\n\n2. For t=0: if the graph is not bipartite, then output (0,1).\n\n3. Else, for t=1: \n   For each connected component, consider the two sets (say set0 and set1). Count the number of missing edges between set0 and set0 and set1 and set1 (but note: only consider edges that are missing and within the same component).\n\n   Specifically, for a component, we have two sets: S0 and S1. The total possible edges between nodes in S0 is C(|S0|,2). The edges that are already present in the graph (from the input) between nodes in S0 are counted (but note: the graph is bipartite, so originally there are none). Similarly for S1.\n\n   Therefore, the missing edges within S0 are C(|S0|,2) minus the number of edges already present? But wait, in the bipartite graph, the edges are only between S0 and S1. So there are no edges within S0 or S1 initially.\n\n   Therefore, the total number of edges we can add to create an odd cycle by t=1 is the sum over all components of [C(|S0|,2) + C(|S1|,2)].\n\n   But wait: we are only allowed to add edges that are not present. And we are only considering edges within the same component (because if we add an edge between two same-color nodes in different components, we don't form an odd cycle). \n\n   However, note: if the graph is disconnected, then adding an edge between two same-color nodes in different components does not form an odd cycle (because there's no path connecting them to form a cycle). \n\n   Therefore, we must consider only edges that are within the same connected component.\n\n   So w1 = sum_{each component} [C(|S0|,2) + C(|S1|,2)]\n\n   But wait: we must also check that the edge is not already present. However, in a bipartite graph, there are no edges within S0 or S1, so all edges within S0 or S1 are missing. So the count is just the combination numbers.\n\n   Then if w1 > 0, then t=1 and w = w1.\n\n4. If t=0 or t=1 is not found (w1==0), then we consider t=2.\n\n   But wait: if there is at least one pair (u,v) of same-color nodes in the same component, then w1>0. So if w1==0, then there are no edges we can add within the same component (same color) because the sets are too small? \n\n   Actually, if a component has |S0|>=2 and |S1|>=2, then we can add edges within S0 or S1 (if the component has at least two nodes in S0, then C(|S0|,2) is positive). \n\n   But if every component has at most one node in each set, then we cannot add an edge to form an odd cycle by one edge. \n\n   Example: a graph with two isolated edges: \n        n=4, m=2, edges: (1,2) and (3,4)\n        Then we have two components: \n          Component1: {1,2} -> sets: {1:0, 2:1}. Then edges to add: C(1,2)=0 for set0 (size1) and C(1,2)=0 for set1 (size1). So w1=0.\n\n   Then we must consider t=2.\n\n   How to form an odd cycle with two edges?\n\n   We can form a triangle by using two edges from a central node (from one set) to two nodes (from the other set) and then the edge between the two nodes (same set) must be added. But wait, the two edges from the central node to the two nodes might not be present.\n\n   Alternatively, we can form a 5-cycle? \n\n   Actually, the minimal odd cycle is 3, so we must form a triangle. \n\n   But note: we don't have the edges from the central node to the two nodes. \n\n   However, we can form a triangle by selecting three nodes: \n        u (in set0) and two nodes v, w (in set1). \n   Then the triangle requires edges (u,v), (u,w), (v,w). \n\n   We are allowed to add two of these (if they are missing). But note: the edge (v,w) is within set1, and (u,v) and (u,w) are between sets. \n\n   Since the graph is bipartite, the edges (u,v) and (u,w) are allowed (and we can add them) and the edge (v,w) is not allowed (same set). \n\n   But wait: we are adding two edges. We can choose to add (u,v) and (u,w) and then we still need (v,w) to form the triangle? Then that would be three edges. \n\n   Alternatively, we can add (u,v) and (v,w) and then we don't have (u,w). Then we don't have the triangle. \n\n   Actually, we must form a cycle. The cycle must be closed. \n\n   Another idea: use two edges to form a 3-cycle by having two edges that are already present? But wait, we are starting from a bipartite graph, so the only edges present are between the sets.\n\n   We need to pick three vertices: one from set0 and two from set1, or vice versa.\n\n   Possibility: \n        Let the three vertices be u (set0), v (set1), w (set1). \n        The edges we can add: (u,v), (u,w), (v,w). \n\n   We are to add two edges. Which two? \n\n   Note: if we add (u,v) and (u,w), then we have two edges from u to v and u to w, but we don't have (v,w). Then we cannot form a triangle (because we need the third edge). \n\n   If we add (u,v) and (v,w), then we have a path: u->v->w, but no edge from w to u. \n\n   If we add (u,v) and (v,w), then we have a path of two edges (u->v->w) and we need an edge from w to u to form a triangle, but we didn't add that.\n\n   Alternatively, we can form a cycle that is not a triangle? \n\n   Consider a 5-cycle. But that requires 5 edges.\n\n   However, note: we are allowed to use the existing edges. \n\n   Example: \n        We have two edges: (1,2) and (3,4). \n        Components: {1,2} and {3,4}. \n\n        We can form a cycle: 1-2-3-4-1. But that's a 4-cycle (even). \n\n        How about: 1-2-3-4-? We don't have edge 2-3 or 1-3 or 1-4 or 2-4.\n\n        We can add two edges: (2,3) and (4,1). Then the cycle: 1-2-3-4-1. But wait, that's 4 edges (even). \n\n        Alternatively, add (1,3) and (2,4). Then the cycle: 1-3-2-4-1. That's a 4-cycle (even).\n\n        How about: \n            Add (1,3) and (3,2). Then the cycle: 1-3-2-1. That's a triangle (if we have the edge 1-2, which we do). \n\n        Wait, we have the edge 1-2. Then the cycle 1-3-2-1: \n            edges: 1-3 (added), 3-2 (added), and 2-1 (already present). \n            This is a triangle (3 edges). But we added two edges.\n\n        And the triangle is odd.\n\n        How",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges without creating loops or parallel edges.\n\n### Approach\n1. **Check for Existing Odd Cycle**: The graph already contains an odd cycle if it is not bipartite. We can check this using a BFS or DFS-based bipartite check. If the graph is not bipartite, the answer is `0 1` because no edges need to be added.\n2. **Single Edge Addition**: If the graph is bipartite, we check if adding one edge between two vertices of the same color in the same connected component can form an odd cycle. The number of such possible edges is calculated by summing combinations of vertices within each color set across all components.\n3. **Two Edge Addition**: If no single edge can form an odd cycle, we then check if adding two edges can form a triangle (the smallest odd cycle). This involves selecting three vertices (one from each set in a bipartite graph) and ensuring the necessary edges are present or can be added to form a triangle.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 1\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    components = []\n    is_bipartite = True\n    total_ways = 0\n\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_nodes = []\n            queue = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes.append(i)\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif visited[neighbor] == 1:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_component = 0\n    for comp in components:\n        s0 = 0\n        s1 = 0\n        for node in comp:\n            if color[node] == 0:\n                s0 += 1\n            else:\n                s1 += 1\n        total_ways_component += s0*(s0-1)//2 + s1*(s1-1)//2\n\n    if total_ways_component > 0:\n        print(f\"1 {total_ways_component}\")\n        return\n\n    total_ways_triangle = 0\n    for comp in components:\n        s0 = 0\n        s1 = 0\n        nodes_in_comp = set(comp)\n        for node in comp:\n            if color[node] == 0:\n                s0 += 1\n            else:\n                s1 += 1\n                \n        for u in comp:\n            if color[u] == 0:\n                count_u = 0\n                for v in comp:\n                    if v == u:\n                        continue\n                    if color[v] == 1 and (u, v) not in edges and (v, u) not in edges:\n                        count_u += 1\n                if count_u >= 2:\n                    for v1 in comp:\n                        if v1 == u or color[v1] != 1:\n                            continue\n                        for v2 in comp:\n                            if v2 == u or v2 == v1 or color[v2] != 1:\n                                continue\n                            if (v1, v2) not in edges and (v2, v1) not in edges:\n                                total_ways_triangle += 1\n            else:\n                count_u = 0\n                for v in comp:\n                    if v == u:\n                        continue\n                    if color[v] == 0 and (u, v) not in edges and (v, u) not in edges:\n                        count_u += 1\n                if count_u >= 2:\n                    for v1 in comp:\n                        if v1 == u or color[v1] != 0:\n                            continue\n                        for v2 in comp:\n                            if v2 == u or v2 == v1 or color[v2] != 0:\n                                continue\n                            if (v1, v2) not in edges and (v2, v1) not in edges:\n                                total_ways_triangle += 1\n\n    print(f\"2 {total_ways_triangle}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Bipartite Check**: The code first checks if the graph is bipartite using BFS. If not, it means an odd cycle exists, and the answer is `0 1`.\n2. **Single Edge Calculation**: For each connected component, it counts the number of missing edges between vertices of the same color. If there are any, adding one such edge will create an odd cycle, and the answer is `1` with the count of such edges.\n3. **Two Edge Calculation**: If no single edge suffices, the code checks for triangles by considering three vertices (one from each set in a bipartite graph). It counts valid pairs of edges that, when added, form a triangle (an odd cycle). The answer is then `2` with the count of such configurations.\n\nThis approach efficiently checks for the minimal edges required to form an odd cycle and counts the valid configurations without introducing loops or parallel edges.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 1\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [0] * (n+1)\n    color = [-1] * (n+1)\n    components = []\n    is_bipartite = True\n    total_ways = 0\n\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            comp_nodes = []\n            queue = deque([i])\n            visited[i] = 1\n            color[i] = 0\n            comp_nodes.append(i)\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if visited[neighbor] == 0:\n                        visited[neighbor] = 1\n                        color[neighbor] = color[node] ^ 1\n                        queue.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif visited[neighbor] == 1:\n                        if color[neighbor] == color[node]:\n                            is_bipartite = False\n            components.append(comp_nodes)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n        \n    total_ways_component = 0\n    for comp in components:\n        s0 = 0\n        s1 = 0\n        for node in comp:\n            if color[node] == 0:\n                s0 += 1\n            else:\n                s1 += 1\n        total_ways_component += s0*(s0-1)//2 + s1*(s1-1)//2\n\n    if total_ways_component > 0:\n        print(f\"1 {total_ways_component}\")\n        return\n\n    total_ways_triangle = 0\n    for comp in components:\n        s0 = 0\n        s1 = 0\n        nodes_in_comp = set(comp)\n        for node in comp:\n            if color[node] == 0:\n                s0 += 1\n            else:\n                s1 += 1\n                \n        for u in comp:\n            if color[u] == 0:\n                count_u = 0\n                for v in comp:\n                    if v == u:\n                        continue\n                    if color[v] == 1 and (u, v) not in edges and (v, u) not in edges:\n                        count_u += 1\n                if count_u >= 2:\n                    for v1 in comp:\n                        if v1 == u or color[v1] != 1:\n                            continue\n                        for v2 in comp:\n                            if v2 == u or v2 == v1 or color[v2] != 1:\n                                continue\n                            if (v1, v2) not in edges and (v2, v1) not in edges:\n                                total_ways_triangle += 1\n            else:\n                count_u = 0\n                for v in comp:\n                    if v == u:\n                        continue\n                    if color[v] == 0 and (u, v) not in edges and (v, u) not in edges:\n                        count_u += 1\n                if count_u >= 2:\n                    for v1 in comp:\n                        if v1 == u or color[v1] != 0:\n                            continue\n                        for v2 in comp:\n                            if v2 == u or v2 == v1 or color[v2] != 0:\n                                continue\n                            if (v1, v2) not in edges and (v2, v1) not in edges:\n                                total_ways_triangle += 1\n\n    print(f\"2 {total_ways_triangle}\")\n\nif __name__ == \"__main__\":\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 572,
        "completion_token_count": 1314,
        "thoughts_token_count": 8191
    }
}