{
    "start": 1758299957.5977352,
    "end": 1758303872.8783944,
    "start-formatted": "2025-09-20 01:39 KST",
    "end-formatted": "2025-09-20 02:44 KST",
    "gpu": 2,
    "pid": 58,
    "use_openrouter": 0,
    "prompt": [
        {
            "role": "user",
            "content": "The following is a competitive programming problem.\n\n# Vitaly and Cycle\n\nAfter Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t — the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w — the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.\n\n## Input\nThe first line of the input contains two integers n and m ( — the number of vertices in the graph and the number of edges in the graph.Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 ≤ ai, bi ≤ n) — the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.It is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\n## Output\nPrint in the first line of the output two space-separated integers t and w — the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n## Example\n### Input\n['4 4\\n1 2\\n1 3\\n4 2\\n4 3', '3 3\\n1 2\\n2 3\\n3 1', '3 0']\n\n### Output\n['1 2', '0 1', '3 1']\n\n## Note\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\nYour task is to solve the problem above by writing a Python script that reads input from standard input (stdin) and prints the desired outputs to standard output (stdout). Please ensure your solution is efficient and handles all edge cases. Make sure to include any necessary imports and helper functions. Your code should be ready to run and should not include any additional explanations or comments.\n\nNote that this is a very easy question."
        }
    ],
    "thought": "\n Okay, we are to find the minimum number of edges t to add to the graph to form an odd cycle, and the number of ways w (without creating loops or parallel edges).\n\nObservations:\n1. The graph is undirected, without loops and multiple edges.\n\nWe note that:\n- An odd cycle must have at least 3 vertices (triangle) and the length is odd (so 3,5,7,...).\n- We are allowed to add edges arbitrarily (without loops or parallel edges).\n\nLet's consider possibilities:\n\nCase 0: If the graph already contains an odd cycle, then we don't need to add any edge (t=0). However, note that the problem says \"form a simple cycle of odd length\", so if there is one already, then t=0.\n\nBut wait: the problem says \"minimum number of edges that must be added\". So if the graph already has an odd cycle, then t=0.\n\nHow to check for an odd cycle? We can use BFS/DFS with colors (bipartite check). If the graph is not bipartite, then it contains an odd cycle.\n\nHowever, note: the graph might not be connected. So we should check each connected component for bipartiteness.\n\nBut note: the problem also requires the number of ways to add t edges (with t being minimal) to form an odd cycle.\n\nSo let's break down:\n\nPossibility 1: The graph already has an odd cycle -> t=0, and w=1? But wait, what does w represent? It is the number of ways to add t edges (which is 0) to form an odd cycle. Since no edges are added, the condition is already satisfied. However, if there are multiple odd cycles, but we didn't add any edge, then the graph already satisfies the condition. But note: we are only counting the ways to add the minimal set of edges (which is 0). Then w is 1 because the empty set is the only way? But wait, actually, we don't have to do anything. However, the problem says \"form a cycle of odd length\", and if the graph already has one, then we don't need to add any edge. So the answer is (0, 1).\n\nBut wait: the example input \"3 3\\n1 2\\n2 3\\n3 1\" is a triangle (odd cycle) so output is (0,1). \n\nWhat if the graph doesn't have an odd cycle? Then we must consider adding edges.\n\nWhat are the minimal ways to form an odd cycle?\n\nNote: we can form an odd cycle by connecting two non-adjacent vertices in an existing even-length path? Actually, we can form an odd cycle by connecting two vertices that are at an even distance (in the same connected component) or by connecting two vertices from different components? But note: we want the minimal number of edges.\n\nConsider:\n\nOption 1: Forming a triangle (3-cycle) by adding one edge. This is the smallest odd cycle (length 3). So if we can form a triangle by adding one edge, then t=1.\n\nBut note: we might be able to form a longer odd cycle (like 5,7,...) by adding more edges, but we are looking for the minimum number of edges. So we must look for the minimal t (could be 0,1,2,3,...).\n\nHow to form an odd cycle with minimal edges?\n\n- Case t=0: already exists.\n- Case t=1: We can form a triangle (3-cycle) by adding one edge. This requires three vertices that are connected in a path of two edges (so they form a path of length 2). Then adding the edge between the two endpoints (if that edge is not present) will form a triangle (odd cycle). But note: we can also form a triangle by having two edges that form a path and then the third edge is missing. Alternatively, we can form a triangle by connecting two vertices that are two steps apart in a connected component (even if the entire component is bipartite, then the two endpoints of a path of two edges are in the same color? Actually, in a bipartite graph, a path of two edges connects two vertices of the same color. Then the edge between them would form an odd cycle (because the cycle would be of length 3: two edges from the path and one edge to close, and 3 is odd). \n\nBut wait: in a bipartite graph, if we have three vertices u, v, w such that u-v and v-w exist, then the edge u-w would create a triangle (cycle of length 3) which is odd. However, if the graph is bipartite, then u and w must be the same color (because u to v flips, then v to w flips again, so u and w same). Then the edge u-w is within the same part, which is allowed in a bipartite graph? Actually, no: bipartite graphs do not allow edges within the same part (unless we break the bipartition). But here we are allowed to add edges arbitrarily (as long as not existing and not a loop). So if we have a path of two edges (u-v-w) then adding u-w creates a triangle (which is odd). And that is allowed.\n\nBut note: what if the graph is disconnected? Then we might form an odd cycle by connecting two components? Actually, no: because we are only adding one edge. With one edge, we can only form a cycle if the two endpoints are already connected by a path (then we complete a cycle). Otherwise, we just connect two components and don't form a cycle.\n\nTherefore, to form a cycle by adding one edge, we must have two vertices that are already connected by a path (so that the edge closes a cycle). And the cycle must be odd.\n\nNow, the cycle length is the distance (path length) plus one. The parity of the cycle is (distance + 1) mod 2. For the cycle to be odd, we require (distance + 1) % 2 == 1, i.e., distance % 2 == 0.\n\nBut wait, the cycle length is the number of edges in the cycle. In the path from u to w, if the path has k edges, then the cycle has k+1 edges. So we require k+1 is odd => k is even.\n\nHowever, note: the graph is bipartite (otherwise we would have found an odd cycle already and t=0). Therefore, in each connected component, the graph is bipartite. Then the distance between two nodes is well-defined and the parity of the distance is fixed by the bipartition.\n\nBut note: if we take two nodes in the same connected component (bipartite graph), then the parity of the distance is fixed. The cycle formed by adding an edge between two nodes u and v in the same component: the cycle length = (distance(u,v)) + 1. For the cycle to be odd, we require distance(u,v) is even.\n\nHowever, in a bipartite graph, the distance between two nodes in the same part is even, and between two nodes in different parts is odd. But wait: in our bipartite graph, the two endpoints of a path of even length must be in the same part. And the cycle formed by an edge between two same-part nodes (distance even) is odd (because cycle length = even+1 = odd). Similarly, if we connect two nodes in different parts (distance odd), then the cycle length is odd+1 = even, which is not odd.\n\nTherefore, for a connected bipartite graph, to form an odd cycle by adding one edge, we must connect two nodes that are in the same part (i.e., even distance). \n\nBut note: the edge must not already exist. Also, we are allowed to connect any two nodes (even from different components) but then we don't form a cycle (since no path exists). So for t=1, we must have two nodes in the same connected component (and same part) that are not adjacent.\n\nHowever, what about forming a cycle that spans multiple components? Actually, no: because to form a cycle, we need the two nodes to be connected by a path (so they must be in the same connected component). Therefore, we are restricted to the same component.\n\nBut wait: what if we connect two nodes from different components? Then we don't form a cycle. So that doesn't help. Therefore, for t=1, we must have two nodes in the same connected component (bipartite) that are in the same part and not adjacent.\n\nNow, what if there is no such edge? Then we cannot form an odd cycle by adding one edge. Then we must consider adding two edges.\n\nWhat is the minimal t? Could it be 2?\n\nWith two edges, we can form a triangle? No, because two edges don't form a triangle. Alternatively, we can form a 3-cycle by having two edges from one component and one from another? Actually, no: we are allowed to add two edges arbitrarily.\n\nBut note: we can form a cycle of length 3 (triangle) by connecting three nodes that are not fully connected. However, to form a triangle, we need three edges. But we are adding two edges. So we cannot form a triangle with two edges.\n\nAlternatively, we can form a cycle of length 5 (odd). How?\n\nExample: Consider a connected bipartite graph (so no odd cycle). Then we can try to form a 5-cycle by adding two edges. But note: we are looking for the minimal number of edges. We know t=0 is not available, and t=1 is not available (because we don't have any two same-part non-adjacent nodes that are at even distance? Actually, we might have many such pairs, but if none of these edges are missing, then we cannot form an odd cycle with one edge.\n\nWait: actually, the problem is: we are to find the minimum number of edges that must be added. So if we cannot form an odd cycle by adding one edge, then the next candidate is two edges.\n\nBut is two edges enough?\n\nYes, because we can form a triangle (3-cycle) by connecting three nodes? Actually, no: to form a triangle we need three edges. However, if we have three nodes that are pairwise non-adjacent, then we need to add three edges. But we are only allowed to add two edges. So that doesn't form a triangle.\n\nAlternatively, we can form a 5-cycle. Example: \n\nSuppose we have two connected components (each bipartite) and we connect them with two edges. But then we don't form a cycle. \n\nAnother idea: within one connected component, we can form a cycle of odd length by adding two edges? \n\nBut note: the graph is bipartite, so all cycles are even. Then to break the bipartite property, we must create an odd cycle.\n\nWe can do:\n\n- Choose two nodes u and v in the same connected component (bipartite). They are in the same part (so even distance). Now, if we add an edge between u and v, then we get an odd cycle (as above). But if that edge already exists (or we don't want to use that one because we are considering two edges) then we cannot. \n\nBut wait, we are considering the minimal number of edges. We are trying to see if we can form an odd cycle with two edges. \n\nActually, we can form a 5-cycle by adding two edges in two different ways.\n\nExample: Consider four nodes (a,b,c,d) and the graph is a square: a-b-c-d, and we have edges a-b, b-c, c-d, d-a (but wait, this is a cycle of 4, which is even). Then we can form a 5-cycle? Actually, we can form a 5-cycle by adding two edges. But wait, we can also form a triangle if we have a triangle missing two edges? \n\nAlternatively, consider two triangles that share an edge? Actually, we are allowed to add edges arbitrarily.\n\nBut note: we are not limited to one connected component. We can also form an odd cycle by merging two connected components (both bipartite) by adding two edges? \n\nWait, no: two edges can connect two components and form a cycle? Actually, if we have two components, say each is a single node, then adding two edges between them forms a multiedge? Not allowed. Or if we have two components, each with two nodes (each being two isolated nodes) then we can form a cycle of length 4? That's even.\n\nBut note: we can also form a cycle by combining two edges from two different pairs. \n\nActually, think of the following: we can form an odd cycle by adding two edges that together form a triangle with one existing edge? \n\nWait: to form a triangle, we need three edges. But if we already have one edge (say between a and b), then we can add two edges: from a to c and from b to c, then we form a triangle. However, if we have an edge between a and b, then adding the two edges (a-c and b-c) forms a triangle (a-b-c-a). So the triangle has three edges, but we added two. \n\nBut note: the given graph might not have the edge a-b. Then we cannot use that. However, if we are allowed to add edges arbitrarily, then we can choose any two edges to form a triangle. \n\nBut wait: to form a triangle, we need three edges. We can choose three vertices that are not connected by edges. Then we must add all three edges (so t=3). Alternatively, if we have one edge, then we can add the other two (so two edges). But the minimal t is the minimal number of edges we must add.\n\nSo:\n\n- If we have three nodes with no edges, then we must add three edges to form a triangle (t=3). But if we have three nodes with one edge, then we can form the triangle by adding two edges (t=2). Similarly, if we have three nodes with two edges, then we can form the triangle by adding one edge (t=1). \n\nBut note: we are allowed to add edges arbitrarily (anywhere). So we can pick three nodes arbitrarily and form a triangle by adding the missing edges.\n\nBut the problem: we are to find the minimal t (over all possibilities) and then the number of ways (sets of edges) that achieve t.\n\nSo:\n\nt = 0: if there's already an odd cycle.\n\nt = 1: if there is a pair of vertices (in the same connected component, same part) that are not adjacent (so that adding that edge gives an odd cycle). Then the minimal t is 1.\n\nBut if there is no such pair (i.e., every pair of vertices in the same part is already connected by an edge) then we cannot form an odd cycle by adding one edge.\n\nThen we consider t=2: \n\nHow can we form an odd cycle with two edges?\n\nThere are two possibilities:\n\n1. By using an existing edge and adding two edges to form a triangle. That is, if there is an edge (u, v) and we can choose a vertex w such that the edges (u,w) and (v,w) are not present, then adding (u,w) and (v,w) forms a triangle (u-v-w-u). But note: we could also form a triangle by having two edges and then the third is missing. However, we can also form an odd cycle of length 5? \n\nBut note: the minimal odd cycle is 3. So we want to form a 3-cycle (triangle) by adding two edges (if the graph doesn't have two edges of the triangle). \n\nBut wait, we can also form a 5-cycle by adding two edges? \n\nActually, we can form a 5-cycle by adding two edges in a different way. For example, consider a path of 4 edges (a-b-c-d-e) and then adding two edges, say a-c and b-d? That doesn't form a cycle. \n\nAlternatively, consider two separate edges that together with existing edges form an odd cycle. \n\nBut note: the minimal t is the minimal number of edges to add. We are looking for the minimal t. So if we can form an odd cycle with two edges, then t=2 is the answer. But we must check if t=0 or t=1 is not available.\n\nHowever, note: there is a possibility that t=2 is not the minimal if t=1 is available. So we must check for t=1 first.\n\nBut what if t=1 is not available? Then we must check for t=2.\n\nBut wait: is t=2 always sufficient? \n\nActually, we can always form an odd cycle by adding two edges? \n\nConsider: we can take any three vertices. If they form a triangle (all edges present) then we don't need to add anything (but we already checked for odd cycle, so that triangle is an odd cycle and we would have been caught by t=0). \n\nBut if they don't form a triangle, then we can add the missing edges. The maximum number of edges we need to add for three vertices is 3 (if none are present). However, we are looking for the minimal t.\n\nBut note: we are allowed to choose any set of edges (without creating parallel or loops). So we can choose the three vertices arbitrarily and then form a triangle by adding the missing edges.\n\nHowever, we are to find the minimal number of edges to add. So:\n\nt = 0: if the graph has an odd cycle.\n\nElse, we check for t=1: if there exists at least one pair of vertices (in the same connected component, same part) that are not adjacent (so that adding that edge creates an odd cycle). Then minimal t=1.\n\nElse, we check for t=2: \n\nBut wait: is there a way to form an odd cycle by adding two edges without necessarily forming a triangle? \n\nActually, we can form an odd cycle of length 5, but that might require more than two edges? \n\nBut note: we are allowed to choose two edges arbitrarily. We can form a triangle by adding two edges if the graph already has one edge of the triangle. \n\nBut if we don't have any edge, then we can form a triangle by adding two edges only if we have two edges already? Actually, no: to form a triangle, we need three edges. So if we have zero edges on a triangle, we must add three edges. But wait, we can also form a triangle by having two edges from an existing edge and then one more edge. \n\nWait, let me clarify: \n\nTo form a triangle (three edges: a-b, b-c, c-a) we need three edges. \n\nIf we have one edge (say a-b) then we can add two edges (a-c and b-c) to complete the triangle. \n\nIf we have two edges (say a-b and a-c) then we can add one edge (b-c) to complete the triangle.\n\nBut if we have no edges, then we must add three edges.\n\nBut note: the graph might have edges elsewhere. We are allowed to pick any three vertices. \n\nBut the problem: we are to find the minimal t (minimum edges to add) and then the number of ways.\n\nSo:\n\nt=0: already done.\n\nt=1: done.\n\nOtherwise, we must form an odd cycle by adding at least two edges.\n\nBut note: we can form an odd cycle (a triangle) by adding two edges if there exists at least one edge in the graph (so that we can complete two edges of a triangle). \n\nBut wait: we can also form a triangle by adding two edges that are not necessarily connected to the existing edges? Actually, we can form a triangle in an otherwise empty graph by adding three edges. So if the graph has no edges at all, then we must add three edges to form a triangle (because we cannot use any existing edge). \n\nBut note: the graph might be disconnected. \n\nHowever, we must consider: \n\nWhat is the minimal t?\n\nAfter checking for t=0 and t=1, the next candidate is t=2. But is t=2 always achievable?\n\nWe can form a triangle by adding two edges if and only if there is at least one edge in the graph? Actually, no: we can form a triangle by adding two edges only if we have one edge already (because then we complete the two missing edges). But if we don't have any edge, then we cannot form a triangle by adding two edges (we need three). \n\nBut wait: what if we have two edges that are not forming a triangle? Then we can form a triangle by adding the third edge? That would be t=1. But we are in the case where t=1 is not available. \n\nAlternatively, we can form an odd cycle (not necessarily a triangle) by adding two edges. \n\nExample: \n\nConsider a graph that is a square (4-cycle): \nVertices: a, b, c, d, with edges: a-b, b-c, c-d, d-a.\n\nThis graph is bipartite (even cycle). \n\nWe want to form an odd cycle. \n\nIf we add two edges: say a-c and b-d, then we get two diagonals, and then we have cycles of length 3 (a-b-c-a via the diagonal a-c and the two sides) and also cycle of length 3 (b-c-d-b via the diagonal b-d and the two sides). \n\nBut wait: let's check: \nCycle a-b-c-a: edges a-b (exists), b-c (exists), and a-c (added). This is a triangle (odd cycle). \n\nSo actually, by adding two edges (the two diagonals) we form two triangles (which are odd cycles). \n\nBut note: we only need one odd cycle. \n\nBut wait: we can also form an odd cycle by adding two edges that are not both diagonals? \n\nFor example, in the square, if we add two edges: a-c and a-b (but a-b already exists). Or a-c and a-d (already exists). \n\nAlternatively, we can add two edges that form a triangle with two existing edges? \n\nIn the square, we can form a triangle by adding two edges: \n\nTake three vertices: a, b, c. The edges a-b and b-c exist, so we can add a-c. Then the triangle a-b-c-a is formed. But wait, we are only adding one edge (a-c). But we already considered t=1. However, in the square, the distance from a to c is 2 (a-b-c) which is even, so they are in the same part. Therefore, adding a-c should form an odd cycle (triangle). But wait, the square is bipartite, so the two parts are {a,c} and {b,d}. Then a and c are in the same part. So the edge a-c is within the same part, and that creates an odd cycle (the triangle). \n\nBut note: the square (4-cycle) has an even cycle, but when we add a-c, we get a triangle (odd) and the rest of the graph remains. \n\nTherefore, in the square, we can form an odd cycle by adding one edge (a-c). So t=1 is available.\n\nWait, so the square (which is bipartite) has a pair of same-part nodes (a and c) that are not adjacent (because the square has edges a-b, b-c, c-d, d-a, so a and c are not directly connected). Then t=1.\n\nSo the example I thought was for a different graph.\n\nWhat if we have a graph that is two disjoint edges (two connected components, each an edge). \n\nGraph: two edges: (a-b) and (c-d). \n\nThis graph is bipartite. \n\nCan we form an odd cycle by adding one edge? \n\nWe need to connect two nodes that are in the same part and not adjacent.\n\nIn the first component (a-b): \nNodes: a and b. The part: say a in part0, b in part1.\nSimilarly, the second component: c in part0, d in part1.\n\nNow, same part nodes: a and c (both part0) are not adjacent (since they are in different components). Similarly, a and d (part0 and part1 -> different part) -> not same part. Similarly, b and c (different part) and b and d (same part: part1 and part1) -> same part.\n\nBut note: the edge between b and d: \nDistance from b to d: since they are in different components, we cannot compute the distance (it's infinity, which is even? or odd?) \n\nBut wait, to form a cycle, we need a path. Without a path, adding an edge between two components doesn't form a cycle. \n\nSo for t=1, we must have a path (so same connected component). \n\nTherefore, in the two-edge graph (two components), there is no same-part non-adjacent pair in the same connected component (because each component has only two nodes, and the two nodes are adjacent). \n\nSo t=1 is not available.\n\nNow, how about t=2?\n\nWe can form a triangle by adding two edges. \n\nWe can choose three nodes. There are two possibilities:\n\n1. Three nodes from the same component: but each component has only two nodes. So we cannot pick three nodes from one component.\n\n2. Two nodes from one component and one from the other.\n\nBut we need to form a triangle. \n\nExample: take nodes a, b, and c. \n\nEdges we need: a-b (exists), a-c (missing), b-c (missing). \n\nBut wait, we have two edges to add: a-c and b-c. Then we form a triangle (a-b-c). \n\nSimilarly, we can take a, b, d: then we need to add a-d and b-d. \n\nBut note: we can also form an odd cycle that is not a triangle? \n\nBut the minimal odd cycle is 3, so we are interested in triangles.\n\nBut note: we can also form a 5-cycle? However, with two edges, we can form a triangle (if we pick three nodes that are not all in the same component) by connecting two components.\n\nBut wait: we are adding two edges. Let me form the triangle: \n\n- Component1: a-b\n- Component2: c-d\n\nWe want to form a triangle: we need three edges. We have one edge (a-b). We need to add two edges: one to c and one to d? Actually, to form a triangle, we need three edges. We have a-b. Then we need to connect a and b to one of the other nodes. \n\nBut a triangle must be three edges. So we can form a triangle by having two edges from one component and one from the other? \n\nActually, we can form a triangle by having two edges from one component and one from the other? \n\nWait: the triangle must be entirely in one connected component? No, because we are allowed to have edges between components. \n\nBut note: the definition of a cycle: a closed path. When we add two edges, say a-c and b-c, then the cycle is a-b-c-a: \n- a-b (from the original)\n- b-c (added)\n- c-a (added)\n\nThis cycle uses edges from two components? Actually, the edge a-b is in the first, and the other two are between the two components. \n\nBut the graph becomes connected. \n\nSo yes, we can form a triangle by connecting two components.\n\nBut note: the graph must not have an odd cycle already. \n\nNow, in the two-edge graph (two disjoint edges) we can form a triangle by adding two edges (connecting one node from each edge to the third node from the other edge). \n\nBut wait, we have two edges: (a-b) and (c-d). \n\nWe can form two different triangles:\n\nTriangle 1: use a, b, and c: then we add edges a-c and b-c.\nTriangle 2: use a, b, and d: then we add edges a-d and b-d.\n\nBut also, we can use a, b, and then the other edge? Actually, we can also form a triangle with a, c, d? \n\nTriangle 3: use a, c, d: then we need edges a-c, a-d, and c-d. But we have c-d. Then we need to add a-c and a-d. \n\nSimilarly, Triangle 4: use b, c, d: then we need to add b-c and b-d.\n\nBut note: we are only adding two edges. In each triangle, we are adding two edges (the two edges that are missing). \n\nBut the entire graph has four nodes. The complete graph on four nodes has six edges. The given graph has two edges, so we are missing four edges. \n\nBut we are adding two edges. \n\nNow, the set of two edges we can add must be chosen such that they complete a triangle. \n\nWhich triangles are we completing? \n\nThe triangles in the complete graph on four nodes are:\n\n1. a-b-c\n2. a-b-d\n3. a-c-d\n4. b-c-d\n\nBut note: the graph initially has edges a-b and c-d. \n\nSo:\n\n- Triangle 1: requires edges a-b (exists), a-c (missing), b-c (missing). So we add a-c and b-c.\n- Triangle 2: requires edges a-b (exists), a-d (missing), b-d (missing). So we add a-d and b-d.\n- Triangle 3: requires edges a-c (missing), a-d (missing), c-d (exists). So we add a-c and a-d.\n- Triangle 4: requires edges b-c (missing), b-d (missing), c-d (exists). So we add b-c and b-d.\n\nBut note: each triangle requires two distinct edges to be added.\n\nNow, are these two-edge sets distinct? \n\nEach triangle corresponds to a distinct pair of edges to add.\n\nBut wait: the two-edge sets are:\n\n1. {a-c, b-c}\n2. {a-d, b-d}\n3. {a-c, a-d}\n4. {b-c, b-d}\n\nThese are four distinct two-edge sets.\n\nBut note: we are allowed to add any set of edges (without loops or duplicates). \n\nHowever, we must avoid adding an edge that already exists. The graph has a-b and c-d. \n\nIn the two-edge sets:\n\n1. {a-c, b-c}: no edge exists, so valid.\n2. {a-d, b-d}: no edge exists, so valid.\n3. {a-c, a-d}: no edge exists, so valid.\n4. {b-c, b-d}: no edge exists, so valid.\n\nSo there are 4 ways to add two edges to form an odd cycle (a triangle). \n\nBut wait: is that correct? Each two-edge set forms one triangle. \n\nHowever, note: the problem asks for the minimal number of edges to add (which is t) and the number of ways (w) to add t edges (which is 2) to form an odd cycle.\n\nBut note: we are to form an odd cycle. The odd cycle we form is the triangle. \n\nBut note: the problem does not specify that we must form a triangle. Any odd cycle is acceptable.\n\nBut is there a way to form an odd cycle by adding two edges that is not a triangle? \n\nFor example, a 5-cycle? But we only have four nodes. A 5-cycle requires five edges. \n\nSo in four nodes, the only odd cycles we can form are triangles (length 3) and pentagon (length 5) but we don't have five nodes.\n\nSo in this example, the minimal t is 2, and w=4.\n\nBut wait: the problem says \"more than one vertex\", and the cycle must be simple. \n\nBut note: we are forming a triangle (three vertices). \n\nBut now, consider the graph with four nodes and two edges (a-b and c-d). \n\nIs there a possibility to form an odd cycle by adding two edges that is not a triangle? \n\nNo, because the smallest odd cycle is 3, and we only have four nodes, so the next is 5 which is impossible (we need five nodes for a 5-cycle).\n\nTherefore, the minimal t is 2 and the number of ways is 4.\n\nBut wait: we must check if there is a way to form an odd cycle by adding two edges that is a triangle, and we found four triangles.\n\nBut note: we are only counting the ways to add two edges (the minimal set). \n\nHowever, note: the problem says \"the minimum number of edges that must be added\". We are sure that t=0 and t=1 are not available, so t=2 is the minimal.\n\nBut is it possible that we can form an odd cycle by adding two edges that is not a triangle? \n\nIn a graph with more nodes, we might form a 5-cycle by adding two edges. But in the two-edge graph (four nodes), we cannot.\n\nBut the problem is general. \n\nSo we must generalize:\n\nAfter t=0 and t=1, the next minimal t is 2. But is 2 always sufficient?\n\nActually, no. Consider a graph that is a complete bipartite graph with two parts (each of size at least 2) and no edges missing within the same part? Actually, wait: complete bipartite graph is bipartite. \n\nBut if the graph is complete bipartite (say K_{m,n}), then:\n\n- In each connected component (one component), the graph is bipartite.\n\n- Same part nodes are not adjacent (by definition of bipartite). \n\n- So for t=1: we can add any edge between two same-part nodes (which are not adjacent). \n\nBut wait, in a complete bipartite graph, the edges between the two parts are present, but edges within the same part are absent. \n\nSo if the graph is complete bipartite, then the same part nodes are not adjacent. Then t=1 is available.\n\nBut if the graph is not complete bipartite, then there is at least one pair of same-part nodes (in the same component) that are not adjacent, so t=1 is available.\n\nBut wait: the graph is bipartite and connected. Then the two parts are fixed. The same part nodes are not adjacent. But if the graph is not complete bipartite, then there is an edge missing between two same-part nodes. \n\nTherefore, in any bipartite graph that is not complete (with respect to the bipartition) then t=1 is available. \n\nBut note: if the graph is disconnected, then in each connected component, the same part nodes (within the same component) are not necessarily complete. \n\nWait: the graph might be disconnected and bipartite. Then for t=1, we can only use edges within the same connected component (because edges between components don't form cycles). \n\nBut if the graph is disconnected, then we might have a connected component that is bipartite but not complete (with respect to the bipartition). Then t=1 is available.\n\nTherefore, the only case where t=1 is not available is when the graph is bipartite and for every connected component, the bipartite graph is complete (i.e., there are no missing edges within the same part in any component). \n\nBut wait, in a connected bipartite graph, the same part nodes must not be adjacent. But if the graph is not complete, then there is a missing edge (within the same part). \n\nBut note: the graph is bipartite by definition, so edges are only between the two parts. Then the same part nodes are never adjacent. \n\nWait, no: the graph is bipartite so edges are only between the two parts. Then the same part nodes are not adjacent. \n\nBut then, if the graph is bipartite, then the same part nodes are not adjacent (by definition). Then for any two same-part nodes, the edge is missing (unless the graph is complete). \n\nBut note: the graph might be bipartite and not complete. Then there are missing edges (between same part nodes). \n\nWait, no: in a bipartite graph, we don't have edges between same part nodes. So the graph is complete bipartite if and only if all the edges between the two parts are present. \n\nBut then, the condition for t=1 is: for any two same-part nodes (in the same connected component) the edge is missing (because we don't have edges within the same part). \n\nBut wait: if the graph is bipartite, then by definition, there are no edges within the same part. So every pair of same-part nodes is missing an edge. \n\nTherefore, t=1 is always available in a bipartite graph (with at least one connected component that has at least two nodes in one part)? \n\nBut wait: if a connected component has only one node, then there is no pair of same-part nodes. \n\nSo:\n\nFor a connected bipartite graph with at least two nodes in one part, then t=1 is available.\n\nBut if the graph is bipartite and every connected component is an independent set (each component has at most one node) then there are no two same-part nodes (because there is at most one node per component, so we cannot form a cycle by adding one edge because we need two nodes to form an edge and then a cycle). \n\nMoreover, we cannot form a cycle at all by adding one edge because we need at least two nodes and an edge between them, and then a path connecting them (so they must be in the same component). \n\nBut if the graph has isolated nodes, then we have no edges. Then:\n\nt=0: no, because no odd cycle.\nt=1: we need two nodes (from the same component? but they are isolated, so they are in different components). Then we cannot form a cycle by adding one edge (because the edge between two isolated nodes doesn't form a cycle). \n\nSo for t=1, we require the two nodes to be in the same connected component (so that there is a path). \n\nTherefore, in the case of isolated nodes (each component is one node), we cannot form a cycle by adding one edge (because we need a path of even length? Actually, no: to form a cycle, the two nodes must be connected by a",
    "response": "\nTo solve this problem, we need to determine the minimum number of edges to add to an undirected graph to form a simple cycle of odd length, and the number of ways to add those edges. The solution involves checking for existing odd cycles, then considering scenarios where adding one or two edges can create such a cycle.\n\n### Approach\n1. **Check for Existing Odd Cycle (t=0):** \n   - Use BFS or DFS to check if the graph is bipartite. If it is not bipartite, an odd cycle exists, so the answer is `0` and `1`.\n\n2. **Check for t=1:**\n   - In a bipartite graph, an odd cycle can be formed by adding an edge between two nodes in the same part of a connected component (since the distance between them must be even for the resulting cycle to be odd). If such a pair exists (i.e., the edge is not already present), then `t=1` and the number of ways `w` is the count of all such valid pairs.\n\n3. **Check for t=2:**\n   - If no t=1 edges exist, we need to find the minimal number of edges to add to form an odd cycle. This involves forming a triangle (3-cycle) by adding two edges. The number of ways `w` is the count of all possible triangles that can be formed by selecting three vertices and adding the missing edges.\n\n### Solution Code\n```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 1\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n\n    for i in range(1, n+1):\n        if color[i] == -1:\n            color[i] = 0\n            comp_nodes = []\n            dq = deque([i])\n            comp_nodes.append(i)\n            while dq:\n                node = dq.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        dq.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    total_ways_t1 = 0\n    for comp in components:\n        part0 = []\n        part1 = []\n        for node in comp:\n            if color[node] == 0:\n                part0.append(node)\n            else:\n                part1.append(node)\n        \n        for u in part0:\n            for v in part1:\n                if (u < v and (u, v) not in edges) or (v < u and (u, v) not in edges):\n                    total_ways_t1 += 1\n    \n    if total_ways_t1 > 0:\n        print(\"1\", total_ways_t1)\n        return\n    \n    total_ways_t2 = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            if (i, j) not in edges:\n                for k in range(1, n+1):\n                    if k == i or k == j:\n                        continue\n                    if (i, k) not in edges and (j, k) not in edges:\n                        total_ways_t2 += 1\n    \n    print(\"2\", total_ways_t2 // 3)\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n1. **Reading Input:** The input is read and parsed into the number of vertices `n`, edges `m`, and the edges themselves.\n2. **Bipartite Check:** Using BFS, each connected component is checked for bipartiteness. If any component is not bipartite, an odd cycle exists (`0 1`).\n3. **t=1 Check:** For each bipartite component, count pairs of nodes in the same part that are not connected by an edge. Each such pair can form an odd cycle when connected.\n4. **t=2 Check:** If no t=1 edges exist, count all possible triangles (sets of three nodes) that can be formed by adding two edges. Each triangle requires three edges, so the count is adjusted by dividing by 3 (since each triangle is counted three times in the triplets).\n5. **Output:** The minimal number of edges `t` and the number of ways `w` to add those edges are printed based on the checks above.\n\nThis approach efficiently checks for the minimal edges required to form an odd cycle and counts the valid configurations, leveraging graph traversal and combinatorial counting.",
    "ground_truth": "N/A",
    "extracted_answer": "import sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().split()\n    if not data:\n        print(\"0 1\")\n        return\n    \n    n = int(data[0])\n    m = int(data[1])\n    edges = []\n    index = 2\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u = int(data[index]); v = int(data[index+1]); index += 2\n        edges.append((u, v))\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    color = [-1] * (n+1)\n    is_bipartite = True\n    components = []\n\n    for i in range(1, n+1):\n        if color[i] == -1:\n            color[i] = 0\n            comp_nodes = []\n            dq = deque([i])\n            comp_nodes.append(i)\n            while dq:\n                node = dq.popleft()\n                for neighbor in graph[node]:\n                    if color[neighbor] == -1:\n                        color[neighbor] = color[node] ^ 1\n                        dq.append(neighbor)\n                        comp_nodes.append(neighbor)\n                    elif color[neighbor] == color[node]:\n                        is_bipartite = False\n            components.append(comp_nodes)\n    \n    if not is_bipartite:\n        print(\"0 1\")\n        return\n    \n    total_ways_t1 = 0\n    for comp in components:\n        part0 = []\n        part1 = []\n        for node in comp:\n            if color[node] == 0:\n                part0.append(node)\n            else:\n                part1.append(node)\n        \n        for u in part0:\n            for v in part1:\n                if (u < v and (u, v) not in edges) or (v < u and (u, v) not in edges):\n                    total_ways_t1 += 1\n    \n    if total_ways_t1 > 0:\n        print(\"1\", total_ways_t1)\n        return\n    \n    total_ways_t2 = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            if (i, j) not in edges:\n                for k in range(1, n+1):\n                    if k == i or k == j:\n                        continue\n                    if (i, k) not in edges and (j, k) not in edges:\n                        total_ways_t2 += 1\n    \n    print(\"2\", total_ways_t2 // 3)\n\nif __name__ == '__main__':\n    main()",
    "score": 0,
    "metadata": {
        "prompt_token_count": 573,
        "completion_token_count": 1117,
        "thoughts_token_count": 8191
    }
}