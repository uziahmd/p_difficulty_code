{"task_id": "E2H_CF1031A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3 1\\n', '8\\n'), ('7 9 1\\n', '28\\n'), ('7 9 2\\n', '40\\n'), ('18 26 3\\n', '204\\n'), ('63 34 8\\n', '1072\\n'), ('100 100 25\\n', '5100\\n'), ('4 3 1\\n', '10\\n'), ('3 4 1\\n', '10\\n'), ('3 10 1\\n', '22\\n'), ('12 3 1\\n', '26\\n'), ('4 4 1\\n', '12\\n'), ('10 4 1\\n', '24\\n'), ('4 12 1\\n', '28\\n'), ('10 10 1\\n', '36\\n'), ('10 10 2\\n', '56\\n'), ('12 10 1\\n', '40\\n'), ('10 12 2\\n', '64\\n'), ('12 11 1\\n', '42\\n'), ('11 12 2\\n', '68\\n'), ('12 11 3\\n', '78\\n'), ('100 8 2\\n', '408\\n'), ('8 100 2\\n', '408\\n'), ('100 100 20\\n', '4880\\n'), ('74 50 5\\n', '1060\\n'), ('43 75 9\\n', '1512\\n'), ('5 5 1\\n', '16\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Golden Plate", "tag": "Implement", "detailed_tag": "math", "rating": 712.1739728798974}
{"task_id": "E2H_CF151A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 4 5 10 8 100 3 1\\n', '2\\n'), ('5 100 10 1 19 90 4 3\\n', '3\\n'), ('10 1000 1000 25 23 1 50 1\\n', '0\\n'), ('1 7 4 5 5 8 3 2\\n', '4\\n'), ('2 3 3 5 5 10 1 3\\n', '1\\n'), ('2 6 4 5 6 5 1 3\\n', '0\\n'), ('1 7 3 5 3 6 2 1\\n', '6\\n'), ('2 4 5 4 5 7 3 2\\n', '1\\n'), ('2 3 6 5 7 8 2 1\\n', '4\\n'), ('1 4 5 5 3 10 3 1\\n', '6\\n'), ('1 4 6 7 3 5 1 3\\n', '1\\n'), ('1 6 5 5 5 8 3 1\\n', '8\\n'), ('1 7 5 3 3 9 2 1\\n', '9\\n'), ('3 5 3 7 6 10 3 1\\n', '1\\n'), ('3 6 3 5 3 6 3 1\\n', '2\\n'), ('1 7 5 5 5 5 2 2\\n', '2\\n'), ('2 5 3 5 6 9 2 1\\n', '3\\n'), ('3 4 3 5 3 6 2 1\\n', '2\\n'), ('1 5 5 4 7 6 3 1\\n', '6\\n'), ('2 3 7 6 5 9 3 1\\n', '3\\n'), ('2 6 5 3 3 8 1 1\\n', '4\\n'), ('2 4 7 3 4 10 2 1\\n', '5\\n'), ('1 1000 1000 1000 1000 1000 1 1\\n', '1000\\n'), ('17 1000 1000 1000 1000 1000 3 7\\n', '8\\n'), ('115 1000 1000 1000 1000 1000 17 15\\n', '0\\n'), ('1 587 981 1 2 1 1 1\\n', '1\\n'), ('1 1 2 1 2 2 1 1\\n', '2\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Soft Drinking", "tag": "Implement", "detailed_tag": "math", "rating": 791.2332548041397}
{"task_id": "E2H_CF404A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\\n', 'NO\\n'), ('3\\nwsw\\nsws\\nwsw\\n', 'YES\\n'), ('3\\nxpx\\npxp\\nxpe\\n', 'NO\\n'), ('5\\nliiil\\nilili\\niilii\\nilili\\nliiil\\n', 'YES\\n'), ('7\\nbwccccb\\nckcccbj\\nccbcbcc\\ncccbccc\\nccbcbcc\\ncbcccbc\\nbccccdt\\n', 'NO\\n'), ('13\\nsooooooooooos\\nosoooooooooso\\noosooooooosoo\\nooosooooosooo\\noooosooosoooo\\nooooososooooo\\noooooosoooooo\\nooooososooooo\\noooosooosoooo\\nooosooooosooo\\noosooooooosoo\\nosoooooooooso\\nsooooooooooos\\n', 'YES\\n'), ('3\\naaa\\naaa\\naaa\\n', 'NO\\n'), ('3\\naca\\noec\\nzba\\n', 'NO\\n'), ('15\\nrxeeeeeeeeeeeer\\nereeeeeeeeeeere\\needeeeeeeeeeoee\\neeereeeeeeeewee\\neeeereeeeebeeee\\nqeeeereeejedyee\\neeeeeerereeeeee\\neeeeeeereeeeeee\\neeeeeerereeeeze\\neeeeereeereeeee\\neeeereeeeegeeee\\neeereeeeeeereee\\neereeeeeeqeeved\\ncreeeeeeceeeere\\nreeerneeeeeeeer\\n', 'NO\\n'), ('5\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\n', 'NO\\n'), ('5\\nxxxxx\\nxxxxx\\nxoxxx\\nxxxxx\\nxxxxx\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\nxxxxx\\nxoxox\\noxxxo\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\nxxoox\\nxoxox\\noxxxo\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\nxxaxx\\nxoxox\\noxxxo\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\noxoxx\\nxoxox\\noxxxo\\n', 'NO\\n'), ('3\\nxxx\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxx\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxa\\nxxx\\n', 'NO\\n'), ('3\\nxax\\nxxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naaa\\nxax\\n', 'NO\\n'), ('3\\naax\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxaa\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxa\\naax\\n', 'NO\\n'), ('3\\nxax\\naxa\\nxaa\\n', 'NO\\n'), ('3\\nxfx\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\nafa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxa\\nxaf\\n', 'NO\\n'), ('3\\nxox\\nxxx\\nxxx\\n', 'NO\\n'), ('3\\naxa\\naax\\nxxa\\n', 'NO\\n'), ('3\\nxox\\noxx\\nxox\\n', 'NO\\n'), ('3\\nxox\\nooo\\nxox\\n', 'NO\\n'), ('3\\naaa\\naab\\nbbb\\n', 'NO\\n'), ('3\\nxxx\\nsxs\\nxsx\\n', 'NO\\n'), ('5\\nabbba\\nbabab\\nbbbbb\\nbaaab\\nabbba\\n', 'NO\\n'), ('5\\nabaaa\\nbbbbb\\nbbabb\\nbabab\\nabbba\\n', 'NO\\n'), ('5\\nxoxox\\noxoxo\\nooxoo\\noxoxo\\nxooox\\n', 'NO\\n'), ('3\\nxox\\noxx\\nxxx\\n', 'NO\\n'), ('5\\nxoooo\\noxooo\\nooxoo\\noooxo\\noooox\\n', 'NO\\n'), ('5\\nxoooo\\noxoxx\\nooxoo\\noxoxo\\noxoox\\n', 'NO\\n'), ('3\\naaa\\nbab\\naba\\n', 'NO\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Valera and X", "tag": "Implement", "detailed_tag": "implementation", "rating": 1009.7960425930711}
{"task_id": "E2H_CF339B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 3\\n3 2 3\\n', '6\\n'), ('4 3\\n2 3 3\\n', '2\\n'), ('2 2\\n1 1\\n', '0\\n'), ('2 2\\n1 2\\n', '1\\n'), ('100 100\\n56 46 1 47 5 86 45 35 81 1 31 70 67 70 62 99 100 47 44 33 78 35 32 37 92 12 95 18 3 22 54 24 22 90 25 22 78 88 51 92 46 84 15 29 28 40 8 5 93 68 77 47 45 76 85 39 84 94 52 69 93 64 31 60 99 17 51 59 62 37 46 47 86 60 88 14 68 22 47 93 50 10 55 87 46 50 43 63 44 43 61 65 91 43 33 97 67 57 66 70\\n', '4869\\n'), ('78 58\\n23 14 73 45 47 14 27 59 65 39 15 23 5 1 50 37 3 51 46 69 75 65 45 68 48 59 77 39 53 21 72 33 46 32 34 5 69 55 56 53 47 31 32 5 42 23 76 15 2 77 65 24 16 68 61 28 55 10\\n', '2505\\n'), ('14 54\\n9 13 14 9 5 12 4 7 3 14 5 12 13 1 1 11 10 2 7 9 5 2 2 8 10 7 3 9 5 11 2 2 6 12 11 5 4 11 11 6 2 11 14 13 8 7 13 9 4 9 11 3 7 13\\n', '362\\n'), ('100 100\\n48 73 63 16 49 88 36 17 66 6 87 13 94 52 58 70 71 52 7 70 25 42 24 36 57 9 79 26 75 39 13 14 38 26 33 66 88 28 75 98 53 48 67 54 63 25 69 87 88 32 72 17 36 35 29 67 74 89 70 47 20 90 78 13 94 57 32 73 29 74 45 78 85 64 81 56 12 65 19 67 34 86 55 71 41 33 76 13 100 47 44 76 86 78 37 15 26 98 83 98\\n', '4997\\n'), ('99 100\\n88 65 10 91 18 35 58 49 42 2 22 57 74 31 53 24 27 93 45 4 71 2 69 39 21 90 97 89 45 73 20 45 82 98 35 90 37 76 68 26 21 65 95 63 24 74 50 59 3 93 65 6 30 37 62 71 18 88 40 12 56 40 89 56 38 71 90 41 97 43 44 23 19 22 10 80 3 24 32 85 26 65 70 60 76 85 66 68 74 11 64 88 12 63 16 15 79 57 93 58\\n', '4809\\n'), ('65 100\\n53 14 5 10 32 60 31 52 52 56 38 6 8 17 52 23 59 3 18 28 15 2 46 26 8 2 40 6 58 30 28 46 49 23 47 24 9 53 3 47 55 12 36 49 12 24 54 55 58 7 50 42 15 4 58 49 34 40 19 4 59 19 31 17 35 65 36 50 45 5 33 11 29 52 55 40 48 11 32 41 31 7 46 55 32 41 56 51 39 13 5 59 58 34 38 50 55 10 43 30\\n', '3149\\n'), ('10 100\\n7 6 2 10 7 2 3 8 10 4 6 1 4 5 7 10 1 2 3 5 4 10 8 2 3 3 6 8 3 9 4 1 9 10 1 2 5 1 8 8 5 9 2 8 1 2 3 2 1 10 10 7 1 3 2 2 7 1 6 6 6 9 2 3 1 7 2 2 9 7 3 3 2 10 7 4 7 3 3 3 2 4 4 2 2 8 4 1 10 10 5 10 6 10 6 10 3 10 8 9\\n', '428\\n'), ('2 100\\n1 1 2 2 2 2 1 2 1 2 2 2 1 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 1 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 2 2 1 1 1 1 1 2 2 2 1 1 2 2 1 1 2 2 1 1 2 1 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 1 2\\n', '47\\n'), ('67 100\\n49 5 25 48 37 55 5 33 14 30 59 28 57 46 45 32 47 22 40 28 58 34 27 29 4 52 63 44 31 65 42 61 11 17 32 17 18 1 12 33 38 11 59 46 43 55 23 30 23 2 42 21 45 51 30 19 35 15 10 30 13 21 32 34 33 3 5 59 23 63 6 9 20 43 64 3 42 41 40 4 14 20 40 33 25 44 1 2 50 46 13 10 3 20 22 64 28 42 58 30\\n', '3245\\n'), ('100 100\\n81 62 26 90 7 87 60 35 75 81 54 94 53 71 64 80 58 83 53 70 40 96 87 50 37 63 5 77 83 75 53 28 22 98 52 45 72 70 62 21 1 99 37 93 16 98 68 27 96 37 21 83 92 23 62 96 85 31 85 66 38 77 45 16 90 86 6 21 75 42 18 60 2 17 51 61 94 68 97 79 17 59 66 14 87 78 70 40 63 78 58 22 87 7 90 17 20 97 9 31\\n', '5530\\n'), ('2 1\\n1\\n', '0\\n'), ('2 10\\n1 1 1 1 1 1 1 1 1 1\\n', '0\\n'), ('2 10\\n1 1 1 2 2 2 1 1 1 2\\n', '3\\n'), ('3 6\\n1 2 3 3 2 1\\n', '6\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Xenia and Ringroad", "tag": "Implement", "detailed_tag": "implementation", "rating": 937.7579723448481}
{"task_id": "E2H_CF492B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('7 15\\n15 5 3 7 9 14 0\\n', '2.5000000000\\n'), ('2 5\\n2 5\\n', '2.0000000000\\n'), ('46 615683844\\n431749087 271781274 274974690 324606253 480870261 401650581 13285442 478090364 266585394 425024433 588791449 492057200 391293435 563090494 317950 173675329 473068378 356306865 311731938 192959832 321180686 141984626 578985584 512026637 175885185 590844074 47103801 212211134 330150 509886963 565955809 315640375 612907074 500474373 524310737 568681652 315339618 478782781 518873818 271322031 74600969 539099112 85129347 222068995 106014720 77282307\\n', '22258199.5000000000\\n'), ('2 1000000000\\n0 1000000000\\n', '500000000.0000000000\\n'), ('2 555\\n200 300\\n', '255.0000000000\\n'), ('1 1\\n1\\n', '1.0000000000\\n'), ('1 1\\n0\\n', '1.0000000000\\n'), ('1 1000000000\\n0\\n', '1000000000.0000000000\\n'), ('1 1000000000\\n1000000000\\n', '1000000000.0000000000\\n'), ('1 999999999\\n499999999\\n', '500000000.0000000000\\n'), ('4 700\\n0 250 475 700\\n', '125.0000000000\\n'), ('4 700\\n0 225 450 700\\n', '125.0000000000\\n'), ('5 1000\\n0 250 500 750 1000\\n', '125.0000000000\\n'), ('5 2000\\n1001 1001 1001 1001 1001\\n', '1001.0000000000\\n'), ('1 999\\n501\\n', '501.0000000000\\n'), ('2 1000\\n400 600\\n', '400.0000000000\\n'), ('4 15\\n1 3 9 11\\n', '4.0000000000\\n'), ('1 5\\n2\\n', '3.0000000000\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Vanya and Lanterns", "tag": "Implement", "detailed_tag": "binary search", "rating": 1140.9963002466513}
{"task_id": "E2H_CF88A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('C E G\\n', 'major\\n'), ('C# B F\\n', 'minor\\n'), ('A B H\\n', 'strange\\n'), ('G H E\\n', 'minor\\n'), ('D# B G\\n', 'major\\n'), ('D# B F#\\n', 'minor\\n'), ('F H E\\n', 'strange\\n'), ('B F# G\\n', 'strange\\n'), ('F# H C\\n', 'strange\\n'), ('C# F C\\n', 'strange\\n'), ('G# C# E\\n', 'minor\\n'), ('D# H G#\\n', 'minor\\n'), ('C F A\\n', 'major\\n'), ('H E G#\\n', 'major\\n'), ('G D# B\\n', 'major\\n'), ('E C G\\n', 'major\\n'), ('G# C# F\\n', 'major\\n'), ('D# C G#\\n', 'major\\n'), ('C# F B\\n', 'minor\\n'), ('D# C G\\n', 'minor\\n'), ('A D F\\n', 'minor\\n'), ('F# H D\\n', 'minor\\n'), ('D A F\\n', 'minor\\n'), ('D A F#\\n', 'major\\n'), ('A C F\\n', 'major\\n'), ('D F# H\\n', 'minor\\n'), ('H G# D#\\n', 'minor\\n'), ('A D F#\\n', 'major\\n'), ('D# H F#\\n', 'major\\n'), ('B G D#\\n', 'major\\n'), ('E A C#\\n', 'major\\n'), ('D H G\\n', 'major\\n'), ('H D F#\\n', 'minor\\n'), ('G D# C\\n', 'minor\\n'), ('H D G\\n', 'major\\n'), ('D# A E\\n', 'strange\\n'), ('A F E\\n', 'strange\\n'), ('C E F\\n', 'strange\\n'), ('A B C\\n', 'strange\\n'), ('E F D#\\n', 'strange\\n'), ('C G# G#\\n', 'strange\\n'), ('F D# G#\\n', 'strange\\n'), ('E E G#\\n', 'strange\\n'), ('A G H\\n', 'strange\\n'), ('F E A\\n', 'strange\\n'), ('D B E\\n', 'strange\\n'), ('G# C# D\\n', 'strange\\n'), ('D# D# F#\\n', 'strange\\n'), ('H B G\\n', 'strange\\n'), ('D C B\\n', 'strange\\n'), ('D B B\\n', 'strange\\n'), ('C A H\\n', 'strange\\n'), ('F# H F#\\n', 'strange\\n'), ('A F F#\\n', 'strange\\n'), ('C D C\\n', 'strange\\n'), ('G F# A\\n', 'strange\\n'), ('C C# D\\n', 'strange\\n'), ('C A E\\n', 'minor\\n'), ('A H B\\n', 'strange\\n'), ('B E F#\\n', 'strange\\n'), ('G# G# A\\n', 'strange\\n'), ('B C# C#\\n', 'strange\\n'), ('C G D#\\n', 'minor\\n'), ('C B D#\\n', 'strange\\n'), ('F H F\\n', 'strange\\n'), ('E G# C\\n', 'strange\\n'), ('F# F# F#\\n', 'strange\\n'), ('F C F\\n', 'strange\\n'), ('A F D\\n', 'minor\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Chord", "tag": "Implement", "detailed_tag": "brute force", "rating": 1167.5967947063134}
{"task_id": "E2H_CF173A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('7\\nRPS\\nRSPP\\n', '3 2\\n'), ('5\\nRRRRRRRR\\nR\\n', '0 0\\n'), ('23\\nRSP\\nRPSS\\n', '7 8\\n'), ('52\\nRRPSS\\nRSSPRPRPPP\\n', '15 21\\n'), ('1293\\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRR\\nSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRR\\n', '411 441\\n'), ('103948\\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRRSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRRPSRSRSRPRPRSSPSPRPRSSPRPSPPRPRRRPRRPRPSPRPRSSRRRSSSSPSRRSPPPRSSSRSRRSSSPPRRSPSSSPRRSSSSPSSPRRPRSRPPSSRPSRPPRPSSSRSRPPSRRSSSPPRRPPSPSSRRSSPPPPPRRSRSSRPP\\nRPRRRSRSRPRPSRPPRSPRRRPSPRPRRRSRSRRSRSSSPSPPSPPPRSPRSSSRPSSSSPPPPSPRPPSSPPSSRRRPRPRRPSSRSPPPPRRSPSSRSRRSSRRPPRSRSRPPRRPRSPRPSPPRPPPSRRRSRRPSPRSSPRSRPSRRPSRSPRRSPSPRSRPSRRPRPRRSPPSRSSR\\n', '34707 34585\\n'), ('1\\nR\\nR\\n', '0 0\\n'), ('5\\nS\\nR\\n', '5 0\\n'), ('100\\nR\\nP\\n', '100 0\\n'), ('145856\\nS\\nR\\n', '145856 0\\n'), ('554858576\\nP\\nP\\n', '0 0\\n'), ('2000000000\\nS\\nS\\n', '0 0\\n'), ('1\\nS\\nSSRSRPSSSRPRRPSPRSRSPRRSRRPPRPRRPPRPPRRSPRPRRRPSRSRPPSRPRSPPPSSPPRRRPSSPRSRRSSRPRSRSRSRRRSPSRPPSPPRRSPPRPRSPPPPRPPPRRRPPRPRSSPRSPRRPRRSSPPPSSRPSSRRSRRSPRPPRPPPSPRPSRRPSSSRPPPPRSSPSSSSPRPRRRSRRPPPPPSRRPSSRSPSSRPSSSSPRPPRSRPSRPRRRPRSPSP\\n', '0 0\\n'), ('1\\nRPSSPSRSPRSRSRRPPSRPRPSSRRRRRPPSPR\\nS\\n', '0 1\\n'), ('1\\nPSSSRPSRPRSPRP\\nRRPSSPPSPRSSSSPPRSPSSRSSSRRPPSPPPSSPSRRRSRRSSRRPPRSSRRRPPSPRRPRRRPPSPSPPPPRSPPRPRRSRSSSSSPSRSSRPPRRPRRPRPRRRPPSSPPSRRSRPRPSSRSSSRPRPRP\\n', '0 1\\n'), ('54\\nSRPRPRSRSPPSSRRPPSSPRPPSRRSRPPSPPR\\nSPRPSSSRSRPR\\n', '19 16\\n'), ('234\\nSRSSRRPSSSSPPRPRRPPRSSPSSSPSPRPSRRRSSSRRSPSRRPSRPPPSPSPPPRSRSPPPSPSRSSSPRRPPSRSSPRPSSRRPSSPSSPSRRPSRSSRSPSPPRSPRPRPPRRPRPRPSPRRSSRPSRPRSSSPSRRRSPRPPPPPSPRSSSPPSRRPRPSSRRPRRRSRSRRRSRRS\\nPPPSRSSPRPSSRSSPSRSRSRSPSRSSRPRRPRRRPPPPSPSRRPPPSRPPPSPPRSRSRRRRRRPPRSSSRSPSRPRPSPPSPSPRPPRPRRSSRSSRPPPPPPRRRRSPPPPRSPRSRRP\\n', '74 80\\n'), ('1457057352\\nR\\nPSRSRSSRPSRRSSSRSRRPRSPPSPPRPSRRPPRSRRSPPSPPSPRPRPRPSSRPRPRRPRSSSSPSRRRPSRSPPSPSRRSPSSRSRPSPRRRSRRRPSPRPPRPPPPPRPPRRRRRRPPRRSPSPSSPSSPRPRSPPRSRPSPSRSRRRRRPPPSRPRSPPSSRRRRPRPPRSPSSPRRRPPPPPRRSRSPRPPSRPRSRSRRPRRRPRSRSPRRRSRSSRPPPRRSRRSSRRPSRPPRSPSPRPRSSSRSSRRPSRRRRPSRRPPRPPRRPRSRPRSRRPPPPPSPPPSPSSPPRPPPRPPRSSPPSRPPSSRRSRSSSRPRRSRSSPRRSRPPRSRSSSRRSPRPPSSPSRPPSSPRPPPSSSSPPRPSRSRPRSPRPSSPPSSPRRPRRPRSPPRSRSPPPPRSRSSPRRSSSRRPPRPPSRPSSPSRPPSSRPPPRRRPSRPPSPRSPSRRRRPPRRPSRPRPSSPRSPPPRRSPPRSRS\\n', '508623712 421858498\\n'), ('1983654300\\nRSSSPPRRSSRSSRPPSRRSSRPPPPSRRPPPSPSSPPPRPSSSRPSPRPSPSPPRRPRSPPSPRRRPPPSPRSSPSSPSRRPSPRPRRRRPRRRRPPRSSSSSSRSSRSPRSPPPPSSRSRPPRPRPRPRPSSPRSSPPSPRRSRSSSRRSSSRSPPPPSPSPRPRPSSSPPPPRRRRPSPRSRPRSPPSPRPSSPPPSPPSPSRSPRPSSRRSPRRSPRRSRRPSPRPRPRRPPRPSPSRSRPRRRRSSRPRSPRPSPPSSSRPRSPPRSRPPRRPRSSRPRRPPRRPSRPRRRPPSRPRRPRPPRSPSRSSRRSRRPPSRPPPRPRPPRRRRRSSPRSPRPRPSSRSRPPRRPPPSSRRSPPSRRSSRRRRSSSPRRR\\nP\\n', '697663183 588327921\\n'), ('1958778499\\nSPSSSRPSPPRRSSRSRRSSSSRSR\\nPPSSRSPSPRRSRSSRSSRPRPSSSRRRPSRPPSRSSPPSSSPSSPRRRSPSRSPRPRRRSSSPPSSPSPP\\n', '604738368 654397557\\n'), ('1609387747\\nRPRPPPSSSPPSRRPSRRRPPRPPPRPRSRSRPPRRPSPRPSSRSSPPPPRRRRSSRPSPPRRSPPRPSRRRPSSRRPSSRSPRPRSRRSRRRSPRPRPRRSPSRSPSRPSSSPPRPSRPPRSRRRRPRRRSSRRRSSPSPSRSRPRPRPRSRPRSPSSRSPSRPRRRSRPPPPRPPPSSSRSRPSSRPSSPSRRSPS\\nSSRSRPRSSPSPRRSPSRRRRPRRRRRSRSSPRSSRSPRSSRPSSRSRSSPSPPPSRRPRRSRSSRSPRPSRRPRSRRPRPPSSSPSRRSPPRRSRSPPPPPSRRRPRPPSPPPSPRSRSRRSPSRSSPPPPPPPSPSPPPPSSRSSSRSSRRRSPPPSPSRPRSPRRRRSSRRPPSSRRRPRPSPSPSRRRRSRRSSRPPPPRPPPRPSSSSPRRSRRSSRPRSSPPSSRPSPSRRRRRPSRRSPSRRSRRPRRPRPPSSSRPRPRRSSRRSRSRPRRSSPRP\\n', '535775691 539324629\\n'), ('2000000000\\nPSRRRPS\\nSPSRRPSSSPRPS\\n', '659340660 703296704\\n'), ('2000000000\\nRRRRR\\nRRR\\n', '0 0\\n'), ('2000000000\\nRRRRRRRRRR\\nSSSSSSSSSSSSSSS\\n', '0 2000000000\\n'), ('2000000000\\nRRR\\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\\n', '2000000000 0\\n'), ('2000000000\\nSSSS\\nS\\n', '0 0\\n'), ('2000000000\\nSSSS\\nPPPPPP\\n', '0 2000000000\\n'), ('2000000000\\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\\nRRR\\n', '0 2000000000\\n'), ('2000000000\\nPPPPPPP\\nSSSSSS\\n', '2000000000 0\\n'), ('2000000000\\nP\\nP\\n', '0 0\\n'), ('2000000000\\nSSSS\\nRRR\\n', '2000000000 0\\n'), ('2000000000\\nR\\nS\\n', '0 2000000000\\n'), ('2000000000\\nRRRRRRRRRR\\nSSSSSSP\\n', '285714285 1714285715\\n'), ('6\\nRR\\nSSS\\n', '0 6\\n'), ('5\\nR\\nR\\n', '0 0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Rock-Paper-Scissors", "tag": "Implement", "detailed_tag": "math", "rating": 1261.421988236309}
{"task_id": "E2H_CF633B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1\\n', '5\\n5 6 7 8 9 \\n'), ('5\\n', '0\\n'), ('2\\n', '5\\n10 11 12 13 14 \\n'), ('3\\n', '5\\n15 16 17 18 19 \\n'), ('7\\n', '5\\n30 31 32 33 34 \\n'), ('12\\n', '5\\n50 51 52 53 54 \\n'), ('15\\n', '5\\n65 66 67 68 69 \\n'), ('18\\n', '5\\n75 76 77 78 79 \\n'), ('38\\n', '5\\n155 156 157 158 159 \\n'), ('47\\n', '5\\n195 196 197 198 199 \\n'), ('58\\n', '5\\n240 241 242 243 244 \\n'), ('66\\n', '5\\n270 271 272 273 274 \\n'), ('70\\n', '5\\n285 286 287 288 289 \\n'), ('89\\n', '5\\n365 366 367 368 369 \\n'), ('417\\n', '5\\n1675 1676 1677 1678 1679 \\n'), ('815\\n', '5\\n3265 3266 3267 3268 3269 \\n'), ('394\\n', '5\\n1585 1586 1587 1588 1589 \\n'), ('798\\n', '0\\n'), ('507\\n', '5\\n2035 2036 2037 2038 2039 \\n'), ('406\\n', '5\\n1630 1631 1632 1633 1634 \\n'), ('570\\n', '5\\n2290 2291 2292 2293 2294 \\n'), ('185\\n', '0\\n'), ('765\\n', '0\\n'), ('967\\n', '0\\n'), ('112\\n', '5\\n455 456 457 458 459 \\n'), ('729\\n', '5\\n2925 2926 2927 2928 2929 \\n'), ('4604\\n', '5\\n18425 18426 18427 18428 18429 \\n'), ('8783\\n', '5\\n35140 35141 35142 35143 35144 \\n'), ('1059\\n', '0\\n'), ('6641\\n', '5\\n26575 26576 26577 26578 26579 \\n'), ('9353\\n', '5\\n37425 37426 37427 37428 37429 \\n'), ('1811\\n', '5\\n7250 7251 7252 7253 7254 \\n'), ('2528\\n', '0\\n'), ('8158\\n', '5\\n32640 32641 32642 32643 32644 \\n'), ('3014\\n', '5\\n12070 12071 12072 12073 12074 \\n'), ('7657\\n', '5\\n30640 30641 30642 30643 30644 \\n'), ('4934\\n', '0\\n'), ('9282\\n', '5\\n37140 37141 37142 37143 37144 \\n'), ('2610\\n', '5\\n10450 10451 10452 10453 10454 \\n'), ('2083\\n', '5\\n8345 8346 8347 8348 8349 \\n'), ('26151\\n', '5\\n104620 104621 104622 104623 104624 \\n'), ('64656\\n', '5\\n258640 258641 258642 258643 258644 \\n'), ('46668\\n', '5\\n186690 186691 186692 186693 186694 \\n'), ('95554\\n', '5\\n382235 382236 382237 382238 382239 \\n'), ('37320\\n', '0\\n'), ('52032\\n', '5\\n208140 208141 208142 208143 208144 \\n'), ('11024\\n', '5\\n44110 44111 44112 44113 44114 \\n'), ('63218\\n', '5\\n252885 252886 252887 252888 252889 \\n'), ('40095\\n', '5\\n160390 160391 160392 160393 160394 \\n'), ('42724\\n', '5\\n170910 170911 170912 170913 170914 \\n'), ('24381\\n', '5\\n97530 97531 97532 97533 97534 \\n'), ('73138\\n', '5\\n292570 292571 292572 292573 292574 \\n'), ('93346\\n', '5\\n373400 373401 373402 373403 373404 \\n'), ('18338\\n', '5\\n73370 73371 73372 73373 73374 \\n'), ('42662\\n', '5\\n170660 170661 170662 170663 170664 \\n'), ('81221\\n', '5\\n324900 324901 324902 324903 324904 \\n'), ('100000\\n', '5\\n400005 400006 400007 400008 400009 \\n'), ('99998\\n', '0\\n'), ('30\\n', '0\\n'), ('11\\n', '0\\n'), ('780\\n', '0\\n'), ('97656\\n', '5\\n390625 390626 390627 390628 390629 \\n'), ('12499\\n', '5\\n50000 50001 50002 50003 50004 \\n'), ('65\\n', '5\\n265 266 267 268 269 \\n'), ('41\\n', '5\\n170 171 172 173 174 \\n'), ('31\\n', '5\\n125 126 127 128 129 \\n'), ('86577\\n', '0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "A Trivial Problem", "tag": "Math", "detailed_tag": "number theory", "rating": 1261.5425423783356}
{"task_id": "E2H_CF1141D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('10\\ncodeforces\\ndodivthree\\n', '5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n'), ('7\\nabaca?b\\nzabbbcc\\n', '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n'), ('9\\nbambarbia\\nhellocode\\n', '0\\n'), ('10\\ncode??????\\n??????test\\n', '10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n'), ('1\\nz\\nz\\n', '1\\n1 1\\n'), ('1\\nz\\na\\n', '0\\n'), ('2\\naa\\naa\\n', '2\\n1 1\\n2 2\\n'), ('2\\nab\\naa\\n', '1\\n1 1\\n'), ('2\\nba\\naa\\n', '1\\n2 1\\n'), ('2\\naf\\nfa\\n', '2\\n1 2\\n2 1\\n'), ('2\\naf\\nfz\\n', '1\\n2 1\\n'), ('1\\n?\\nz\\n', '1\\n1 1\\n'), ('1\\na\\n?\\n', '1\\n1 1\\n'), ('1\\n?\\n?\\n', '1\\n1 1\\n'), ('20\\nleduyanhyeunguyenhoa\\nminhtriloveviethuong\\n', '10\\n19 9\\n10 14\\n4 17\\n13 20\\n2 11\\n1 8\\n12 19\\n8 4\\n18 16\\n7 3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Colored Boots", "tag": "Implement", "detailed_tag": "greedy", "rating": 1509.4556767366253}
{"task_id": "E2H_CF1767D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3\\n101\\n', '4 5 6 7 \\n'), ('1\\n1\\n', '2 \\n'), ('2\\n01\\n', '2 3 \\n'), ('2\\n00\\n', '1 \\n'), ('1\\n0\\n', '1 \\n'), ('2\\n11\\n', '4 \\n'), ('3\\n000\\n', '1 \\n'), ('3\\n010\\n', '2 3 4 5 \\n'), ('3\\n111\\n', '8 \\n'), ('4\\n0000\\n', '1 \\n'), ('4\\n0100\\n', '2 3 4 5 6 7 8 9 \\n'), ('4\\n0110\\n', '4 5 6 7 8 9 10 11 12 13 \\n'), ('4\\n1011\\n', '8 9 10 11 12 13 14 15 \\n'), ('4\\n1111\\n', '16 \\n'), ('5\\n10110\\n', '8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \\n'), ('5\\n01100\\n', '4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \\n'), ('6\\n111000\\n', '8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \\n'), ('6\\n101111\\n', '32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \\n'), ('7\\n1011011\\n', '32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 \\n'), ('18\\n000000000000000000\\n', '1 \\n'), ('18\\n111111111111111111\\n', '262144 \\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Playoff", "tag": "Greedy", "detailed_tag": "combinatorics", "rating": 1501.2516597113815}
{"task_id": "E2H_CF822C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\\n', '5\\n'), ('3 2\\n4 6 3\\n2 4 1\\n3 5 4\\n', '-1\\n'), ('2 1855\\n159106 161198 437057705\\n149039 158409 889963913\\n', '-1\\n'), ('15 17\\n1 10 8\\n5 19 1\\n12 14 6\\n9 19 8\\n6 7 3\\n5 11 9\\n7 12 5\\n17 20 8\\n6 12 6\\n11 19 4\\n3 14 1\\n15 19 10\\n3 20 5\\n5 19 9\\n10 18 10\\n', '11\\n'), ('15 7\\n16 18 6\\n11 15 2\\n5 17 3\\n4 5 1\\n3 11 5\\n13 16 7\\n8 11 6\\n9 16 4\\n7 8 3\\n11 15 2\\n2 8 6\\n7 8 7\\n10 12 2\\n6 8 1\\n6 15 1\\n', '3\\n'), ('15 24\\n2 14 5\\n7 14 4\\n6 11 6\\n3 5 6\\n4 13 5\\n10 11 4\\n8 8 6\\n5 14 4\\n2 2 3\\n9 14 5\\n2 13 6\\n14 14 4\\n2 12 3\\n3 14 5\\n9 11 3\\n', '-1\\n'), ('15 12\\n3 12 4\\n2 8 1\\n7 8 4\\n10 11 3\\n12 12 1\\n11 12 4\\n5 13 3\\n7 13 1\\n11 13 3\\n2 5 2\\n4 5 3\\n2 11 4\\n2 6 4\\n8 9 4\\n3 4 3\\n', '5\\n'), ('15 13\\n4 10 3\\n7 8 3\\n5 7 1\\n2 2 3\\n1 6 2\\n3 10 1\\n6 9 2\\n5 8 1\\n6 8 2\\n4 5 2\\n3 5 2\\n4 8 1\\n4 9 1\\n5 9 1\\n5 10 2\\n', '-1\\n'), ('8 7\\n10 10 3\\n10 10 2\\n6 7 2\\n1 6 3\\n1 3 2\\n3 8 2\\n4 6 3\\n1 6 2\\n', '4\\n'), ('5 6\\n18 20 2\\n9 11 3\\n4 7 3\\n16 17 3\\n12 14 1\\n', '3\\n'), ('3 5\\n6 6 1\\n2 4 2\\n5 8 3\\n', '-1\\n'), ('3 3\\n11 11 2\\n3 4 3\\n8 9 2\\n', '4\\n'), ('2 7\\n3 6 1\\n10 12 1\\n', '2\\n'), ('2 2\\n200000 200000 1\\n1 1 1000000000\\n', '1000000001\\n'), ('2 8\\n1 4 2\\n8 11 2\\n', '4\\n'), ('2 2\\n1 1 1000000000\\n2 2 1000000000\\n', '2000000000\\n'), ('2 3\\n1 2 1000000000\\n3 3 1000000000\\n', '2000000000\\n'), ('2 2\\n1 1 500000000\\n2 2 500000000\\n', '1000000000\\n'), ('2 4\\n1 2 1000000000\\n3 4 1000000000\\n', '2000000000\\n'), ('2 4\\n1 2 500000000\\n3 4 500000000\\n', '1000000000\\n'), ('2 2\\n1 1 1000000000\\n2 2 1000\\n', '1000001000\\n'), ('2 4\\n1 2 999999999\\n3 4 999999999\\n', '1999999998\\n'), ('2 2\\n1 1 1000000000\\n2 2 7\\n', '1000000007\\n'), ('2 4\\n1 2 1\\n2 3 2\\n', '-1\\n'), ('2 3\\n1 1 1000000000\\n2 3 73741824\\n', '1073741824\\n'), ('4 3\\n1 1 2\\n1 1 3\\n2 3 3\\n2 3 4\\n', '5\\n'), ('2 5\\n1 3 50000000\\n4 5 50000000\\n', '100000000\\n'), ('2 5\\n1 3 1000000000\\n4 5 1000000000\\n', '2000000000\\n'), ('2 2\\n1 1 1\\n1 1 1\\n', '-1\\n'), ('4 5\\n1 3 900000000\\n1 2 5\\n5 6 900000000\\n1 2 4\\n', '1800000000\\n'), ('2 4\\n1 2 536870912\\n3 4 536870912\\n', '1073741824\\n'), ('2 4\\n1 2 500000000\\n5 6 500000000\\n', '1000000000\\n'), ('2 5\\n1 3 999999998\\n4 5 1\\n', '999999999\\n'), ('4 3\\n1 1 2\\n1 1 3\\n2 3 2\\n1 2 3\\n', '4\\n'), ('4 5\\n1 3 500000000\\n1 2 500000000\\n5 6 500000000\\n1 2 500000000\\n', '1000000000\\n'), ('2 2\\n2 2 1\\n3 3 2\\n', '3\\n'), ('3 3\\n3 5 2\\n1 2 4\\n1 3 4\\n', '-1\\n'), ('3 4\\n2 3 1\\n1 2 2\\n3 4 2\\n', '4\\n'), ('4 5\\n1 2 2\\n1 2 5\\n3 5 6\\n3 5 8\\n', '8\\n'), ('2 4\\n1 2 5\\n1 3 5\\n', '-1\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Hacker, pack your bags!", "tag": "Implement", "detailed_tag": "sortings", "rating": 1606.9640149531353}
{"task_id": "E2H_CF498A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n', '2\\n'), ('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n', '2\\n'), ('841746 527518\\n595261 331297\\n10\\n-946901 129987 670374\\n-140388 -684770 309555\\n-302589 415564 -387435\\n-565799 -72069 -395358\\n-523453 -511446 854898\\n-846967 -749453 -341866\\n-622388 434663 264157\\n-638453 625357 344195\\n-255265 -676356 -772398\\n-824723 -319141 33585\\n', '0\\n'), ('454379 373644\\n-665078 -385892\\n2\\n-530 -468 -379786\\n-173 -275 -100376\\n', '2\\n'), ('841746 527518\\n595261 331297\\n10\\n936 -209 -790797\\n898 1240 -36994\\n759 285 -413562\\n174 323 34281\\n662 400 -284846\\n298 520 42086\\n-36 -27 12861\\n462 631 -22515\\n-499 1105 919372\\n582 1490 319884\\n', '0\\n'), ('-537 648838\\n227 -51454\\n1\\n678 0 235266\\n', '1\\n'), ('-940 -984641\\n403 -942522\\n2\\n530 0 -63600\\n-439 0 95263\\n', '2\\n'), ('-867 -465880\\n793 -581568\\n5\\n73 0 57743\\n-818 0 -635586\\n-804 0 -415668\\n-383 0 -52854\\n1258 0 155992\\n', '5\\n'), ('-632 -387435\\n942 798117\\n10\\n249 0 135705\\n536 0 271752\\n750 0 375750\\n799 0 -206142\\n1102 0 -437494\\n-453 0 197055\\n-581 0 260288\\n-322 0 161322\\n1317 0 -878439\\n-811 0 594463\\n', '10\\n'), ('527189 -306471\\n-998939 648838\\n1\\n-950717 -549267 -820616\\n', '1\\n'), ('454379 373644\\n-665078 -385892\\n2\\n-984641 503905 -909460\\n-767954 -468772 -942522\\n', '2\\n'), ('-589794 344286\\n532652 -230711\\n5\\n-2919 -179425 -546698\\n-465880 342737 794428\\n-230739 -687865 713836\\n-932054 513357 -97639\\n-559361 -75096 -581568\\n', '5\\n'), ('0 1\\n2 2\\n1\\n1 1 2\\n', '0\\n'), ('0 2\\n-2 0\\n2\\n2 3 -1\\n4 0 3\\n', '2\\n'), ('1 -4\\n1 5\\n1\\n0 1 0\\n', '1\\n'), ('1 0\\n2 0\\n1\\n1 0 0\\n', '0\\n'), ('0 0\\n0 2\\n4\\n1 0 1\\n1 0 -1\\n-2 0 1\\n0 1 -1\\n', '1\\n'), ('100000 100000\\n-100000 100000\\n1\\n10000 0 7\\n', '1\\n'), ('1 1\\n-1 -1\\n1\\n1 1 0\\n', '1\\n'), ('1 1\\n3 3\\n1\\n1 0 2\\n', '0\\n'), ('1 3\\n1 1\\n1\\n1 1 3\\n', '0\\n'), ('5 0\\n15 0\\n1\\n10 0 -100\\n', '1\\n'), ('3 4\\n2 6\\n1\\n0 -2 5\\n', '0\\n'), ('1 0\\n1 2\\n1\\n0 1 -1\\n', '1\\n'), ('0 0\\n0 2\\n1\\n0 1 -1\\n', '1\\n'), ('0 0\\n0 1\\n1\\n1 0 10000\\n', '0\\n'), ('0 0\\n0 1\\n1\\n0 2 2\\n', '0\\n'), ('10 18\\n10 0\\n2\\n1 -1 0\\n0 1 -5\\n', '2\\n'), ('10 10\\n8 8\\n1\\n1 1 19\\n', '0\\n'), ('0 1\\n1000000 1\\n1\\n1000000 1 0\\n', '0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Crazy Town", "tag": "Others", "detailed_tag": "geometry", "rating": 1682.0191836721199}
{"task_id": "E2H_CF1846E2", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000\\n', 'NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\n'), ('100\\n12\\n14\\n15\\n21\\n22\\n23\\n31\\n48\\n52\\n63\\n66\\n70\\n85\\n88\\n96\\n102\\n112\\n127\\n132\\n156\\n159\\n170\\n200\\n217\\n223\\n239\\n241\\n255\\n261\\n264\\n272\\n276\\n279\\n292\\n308\\n316\\n334\\n341\\n342\\n381\\n384\\n387\\n394\\n398\\n404\\n433\\n445\\n447\\n489\\n490\\n500\\n502\\n511\\n524\\n533\\n538\\n540\\n553\\n571\\n575\\n581\\n586\\n603\\n607\\n611\\n614\\n618\\n628\\n631\\n643\\n651\\n668\\n677\\n680\\n682\\n689\\n696\\n732\\n777\\n781\\n787\\n792\\n806\\n811\\n814\\n822\\n830\\n837\\n845\\n850\\n853\\n872\\n900\\n906\\n924\\n928\\n951\\n963\\n975\\n991\\n', 'NO\\nNO\\nYES\\nYES\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n'), ('100\\n41\\n64\\n69\\n80\\n88\\n96\\n107\\n155\\n163\\n167\\n181\\n191\\n225\\n254\\n264\\n268\\n277\\n278\\n287\\n292\\n294\\n296\\n301\\n302\\n310\\n320\\n342\\n345\\n351\\n368\\n373\\n389\\n409\\n412\\n413\\n414\\n440\\n441\\n443\\n445\\n448\\n457\\n467\\n470\\n474\\n475\\n483\\n487\\n518\\n525\\n529\\n562\\n569\\n580\\n587\\n604\\n606\\n616\\n622\\n624\\n627\\n631\\n663\\n676\\n678\\n685\\n686\\n695\\n706\\n712\\n716\\n718\\n731\\n738\\n741\\n752\\n765\\n766\\n772\\n774\\n785\\n788\\n793\\n801\\n810\\n837\\n869\\n871\\n900\\n901\\n912\\n914\\n933\\n938\\n958\\n961\\n969\\n974\\n989\\n991\\n', 'NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n'), ('1\\n717109999234424\\n', 'NO\\n'), ('1\\n100000010000001\\n', 'YES\\n'), ('1\\n10000000100000001\\n', 'YES\\n'), ('1\\n999999999000000001\\n', 'YES\\n'), ('1\\n7013998766394781\\n', 'YES\\n'), ('1\\n4000002000001\\n', 'YES\\n'), ('1\\n4000006000003\\n', 'YES\\n'), ('1\\n64000160000400001\\n', 'YES\\n'), ('6\\n64000008000003\\n64000008000001\\n9999799901001001\\n9999799901001000\\n9999999900000001\\n9999799901001002\\n', 'NO\\nYES\\nYES\\nNO\\nYES\\nNO\\n'), ('10\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000\\n1000160008600156\\n', 'NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\n'), ('1\\n347666533995749223\\n', 'YES\\n'), ('4\\n1000000000000000000\\n240818941573998061\\n27618754614420628\\n4000006000003\\n', 'NO\\nYES\\nYES\\nYES\\n'), ('5\\n975461058777625363\\n975461058777625363\\n999999999000000002\\n999999999000000001\\n280138784844143524\\n', 'YES\\nYES\\nNO\\nYES\\nYES\\n'), ('1\\n40000000200000001\\n', 'YES\\n'), ('1\\n160000000400000001\\n', 'YES\\n'), ('1\\n147389519791195397\\n', 'YES\\n'), ('1\\n1000100003400040\\n', 'YES\\n'), ('1\\n411440358027985474\\n', 'YES\\n'), ('1\\n9999999700000003\\n', 'YES\\n'), ('8\\n9999999700000003\\n9999999700000001\\n9999999700000002\\n9999999700000004\\n999999997000000003\\n999999997000000002\\n999999997000000001\\n999999997000000004\\n', 'YES\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\n'), ('1\\n810000000900000001\\n', 'YES\\n'), ('1\\n140363476394377041\\n', 'YES\\n'), ('1\\n25000005000001\\n', 'YES\\n'), ('1\\n245930046754636608\\n', 'YES\\n'), ('7\\n245930046754636608\\n64000160000400001\\n25000005000001\\n140363476394377041\\n810000000900000001\\n9999999700000003\\n999999997000000003\\n', 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n'), ('1\\n963418364786213635\\n', 'YES\\n'), ('1\\n999980000200000\\n', 'YES\\n'), ('1\\n4000022000031\\n', 'YES\\n'), ('1\\n251233654563805\\n', 'YES\\n'), ('4\\n251233654563805\\n365500864765439656\\n237860064457152228\\n1597376949252679\\n', 'YES\\nYES\\nYES\\nYES\\n'), ('22\\n4000002000001\\n4000006000003\\n4000010000007\\n4000014000013\\n4000018000021\\n4000022000031\\n4000026000043\\n4000030000057\\n4000034000073\\n4000038000091\\n4000042000111\\n4000046000133\\n4000050000157\\n4000054000183\\n4000058000211\\n4000062000241\\n4000066000273\\n4000070000307\\n4000074000343\\n4000078000381\\n4000082000421\\n4000086000463\\n', 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n'), ('1\\n111307891115281\\n', 'YES\\n'), ('1\\n224449030516405\\n', 'YES\\n'), ('1\\n987201227329380031\\n', 'YES\\n'), ('2\\n999999981000000091\\n10000000100000001\\n', 'YES\\nYES\\n'), ('3\\n999999981000000091\\n10000000100000001\\n999999999000000001\\n', 'YES\\nYES\\nYES\\n'), ('3\\n140363476394377041\\n245930046754636608\\n64000160000400001\\n', 'YES\\nYES\\nYES\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Rudolf and Snowflakes (hard version)", "tag": "Math", "detailed_tag": "binary search", "rating": 1835.8052989047958}
{"task_id": "E2H_CF1092C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n', 'SPPSPSPS\\n'), ('3\\na\\naa\\naa\\na\\n', 'PPSS\\n'), ('2\\na\\nc\\n', 'PS\\n'), ('2\\nz\\nz\\n', 'PS\\n'), ('5\\nba\\na\\nbaba\\na\\naba\\nabab\\nab\\naba\\n', 'SPSSPPPS\\n'), ('5\\nb\\nb\\nba\\nab\\nbab\\nbab\\nabab\\nbaba\\n', 'PSPSPSSP\\n'), ('5\\nc\\ncd\\ncdc\\ncdcc\\nb\\ncb\\nccb\\ndccb\\n', 'PPPPSSSS\\n'), ('3\\nba\\nab\\na\\na\\n', 'SPPS\\n'), ('3\\na\\nb\\naa\\nab\\n', 'PSPS\\n'), ('3\\na\\na\\nba\\nab\\n', 'PSSP\\n'), ('4\\nbab\\naba\\nab\\nab\\na\\nb\\n', 'SPPSPS\\n'), ('5\\nabab\\nbaba\\nb\\nb\\nbab\\nbab\\nba\\nab\\n', 'SPPSPSPS\\n'), ('4\\na\\nc\\nac\\nab\\naba\\nbac\\n', 'PSSPPS\\n'), ('4\\nb\\nbb\\nbba\\nbbb\\nba\\na\\n', 'PPSPSS\\n'), ('4\\nbab\\nab\\na\\nab\\naba\\nb\\n', 'SPPSPS\\n'), ('3\\nb\\nb\\nab\\nba\\n', 'PSSP\\n'), ('4\\nzn\\nz\\nn\\nnzn\\nzn\\nznz\\n', 'PPSSSP\\n'), ('5\\nbaba\\nabab\\na\\nab\\naba\\na\\nba\\naba\\n', 'SPPPPSSS\\n'), ('5\\nba\\na\\nbaba\\nabab\\na\\naba\\nab\\naba\\n', 'SPSPSPPS\\n'), ('4\\nab\\na\\nb\\nbab\\nab\\naba\\n', 'PPSSSP\\n'), ('5\\nh\\nhwh\\nwhwh\\nhw\\nh\\nwh\\nhwh\\nhwhw\\n', 'PPSPSSSP\\n'), ('5\\nba\\na\\na\\naba\\nbaba\\nab\\naba\\nabab\\n', 'SPSPSPSP\\n'), ('4\\naba\\na\\nba\\nb\\nba\\nbab\\n', 'SSPPSP\\n'), ('3\\nah\\nha\\nh\\nh\\n', 'SPPS\\n'), ('5\\nxy\\nyx\\nx\\nx\\nxyx\\nxyx\\nyxyx\\nxyxy\\n', 'PSPSPSSP\\n'), ('5\\nbaaa\\nbaa\\nba\\nb\\naaaa\\naaa\\naa\\na\\n', 'PPPPSSSS\\n'), ('4\\nb\\nab\\nbab\\na\\nab\\naba\\n', 'SPSPSP\\n'), ('5\\na\\na\\nab\\nba\\naba\\naba\\nbaba\\nabab\\n', 'PSPSPSSP\\n'), ('18\\nd\\nh\\ndj\\nxh\\ndjs\\njxh\\ndjsh\\nzjxh\\ndjshf\\nkzjxh\\ndjshfk\\nhkzjxh\\ndjshfkj\\nkhkzjxh\\ndjshfkje\\nskhkzjxh\\ndjshfkjeh\\ndskhkzjxh\\ndjshfkjehd\\nhdskhkzjxh\\ndjshfkjehds\\nehdskhkzjxh\\ndjshfkjehdsk\\njehdskhkzjxh\\ndjshfkjehdskh\\nkjehdskhkzjxh\\ndjshfkjehdskhk\\nfkjehdskhkzjxh\\ndjshfkjehdskhkz\\nhfkjehdskhkzjxh\\ndjshfkjehdskhkzj\\nshfkjehdskhkzjxh\\ndjshfkjehdskhkzjx\\njshfkjehdskhkzjxh\\n', 'PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\\n'), ('4\\nza\\na\\nz\\naza\\nza\\nzaz\\n', 'PSPSSP\\n'), ('3\\na\\nza\\naz\\na\\n', 'PSPS\\n'), ('8\\na\\nha\\naha\\nhaha\\nahaha\\nhahaha\\nahahaha\\nh\\nha\\nhah\\nhaha\\nhahah\\nhahaha\\nhahahah\\n', 'SPSPSPSPSPSPSP\\n'), ('4\\na\\nab\\nbab\\nb\\nab\\naba\\n', 'PPSSSP\\n'), ('4\\na\\nba\\naba\\nb\\nba\\nbab\\n', 'SPSPSP\\n'), ('4\\nc\\ncb\\nb\\nbcb\\ncb\\ncbc\\n', 'PPSSSP\\n'), ('4\\nb\\nbb\\nbbb\\na\\nba\\nbba\\n', 'PPPSSS\\n'), ('5\\na\\naa\\naaa\\naaaa\\nb\\nba\\nbaa\\nbaaa\\n', 'SSSSPPPP\\n'), ('4\\na\\nb\\nab\\nab\\nbab\\naba\\n', 'PSPSSP\\n'), ('3\\na\\naa\\nba\\nb\\n', 'SSPP\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Prefixes and Suffixes", "tag": "Others", "detailed_tag": "strings", "rating": 1735.111995064716}
{"task_id": "E2H_CF270E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3\\n3 2 10\\n1 2 10\\n3 1 5\\n', '1\\n0\\n1\\n'), ('4 5\\n1 2 10\\n1 3 10\\n2 3 5\\n4 2 15\\n3 4 5\\n', '0\\n0\\n1\\n1\\n0\\n'), ('10 17\\n8 1 1\\n4 8 2\\n7 10 8\\n1 4 1\\n5 4 3\\n6 9 6\\n3 5 4\\n1 9 1\\n3 9 5\\n7 1 1\\n1 2 1\\n1 3 1\\n6 7 7\\n8 2 1\\n1 10 1\\n1 5 1\\n6 1 1\\n', '1\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n'), ('10 20\\n3 8 41\\n1 2 21\\n9 1 31\\n1 3 53\\n5 9 67\\n10 1 8\\n6 1 16\\n5 2 21\\n1 7 50\\n5 4 38\\n6 4 16\\n4 8 16\\n5 10 93\\n9 10 126\\n8 9 16\\n4 1 38\\n5 7 50\\n3 9 12\\n1 5 10\\n5 8 41\\n', '0\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n'), ('2 1\\n1 2 1\\n', '0\\n'), ('2 1\\n2 1 1\\n', '1\\n'), ('3 2\\n1 2 1\\n2 3 1\\n', '0\\n0\\n'), ('4 4\\n4 3 5000\\n1 2 10000\\n3 1 5000\\n4 2 10000\\n', '1\\n0\\n1\\n1\\n'), ('3 3\\n3 1 10000\\n2 1 10000\\n3 2 10000\\n', '1\\n1\\n1\\n'), ('3 3\\n3 2 10000\\n2 1 10000\\n3 1 10000\\n', '1\\n1\\n1\\n'), ('10 17\\n9 1 8\\n7 10 1\\n5 4 4\\n1 10 1\\n3 10 1\\n10 5 1\\n6 3 6\\n10 4 1\\n4 6 5\\n7 5 3\\n2 10 1\\n9 3 7\\n9 10 1\\n8 10 1\\n10 6 1\\n2 7 2\\n2 8 1\\n', '1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n'), ('5 6\\n1 3 10\\n2 1 10\\n3 5 10\\n1 4 10\\n2 5 10\\n4 5 10\\n', '0\\n1\\n0\\n0\\n0\\n0\\n'), ('5 6\\n2 1 8\\n5 2 8\\n5 3 4\\n4 1 9\\n3 1 4\\n5 4 9\\n', '1\\n1\\n1\\n1\\n1\\n1\\n'), ('10 23\\n10 5 94\\n6 9 20\\n10 2 79\\n3 9 63\\n1 6 80\\n7 8 21\\n3 5 6\\n3 1 94\\n2 5 21\\n1 2 100\\n1 7 79\\n6 10 59\\n8 1 60\\n10 3 37\\n9 1 37\\n4 8 40\\n7 10 100\\n6 4 41\\n5 1 79\\n8 10 79\\n9 10 80\\n10 4 60\\n4 1 59\\n', '1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n1\\n'), ('9 9\\n1 2 1\\n2 3 1\\n3 4 1\\n4 5 1\\n5 6 1\\n6 7 1\\n7 9 1\\n8 9 1\\n1 8 1\\n', '0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n'), ('6 6\\n1 2 1\\n2 6 1\\n1 3 1\\n3 4 1\\n4 5 1\\n5 6 1\\n', '0\\n0\\n0\\n0\\n0\\n0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Flawed Flow", "tag": "Others", "detailed_tag": "dfs and similar", "rating": 2053.3310233859147}
{"task_id": "E2H_CF1146D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('7 5 3\\n', '19\\n'), ('1000000000 1 2019\\n', '500000001500000001\\n'), ('100 100000 1\\n', '101\\n'), ('6 4 5\\n', '10\\n'), ('172165 93846 84\\n', '1735345812\\n'), ('9978 99 98615\\n', '507929\\n'), ('9909 95875 20\\n', '9910\\n'), ('42651129 26190 16875\\n', '6737492081840\\n'), ('5 8253 91700\\n', '6\\n'), ('14712 8142 9912\\n', '21284\\n'), ('98898 1040 98615\\n', '4761309\\n'), ('79674 62280 77850\\n', '97070\\n'), ('78139 77688 1161\\n', '108424\\n'), ('110518 69352 81284\\n', '151686\\n'), ('881706694 5710 56529\\n', '680741853146475\\n'), ('863 99250 420\\n', '864\\n'), ('9112063 50688 2640\\n', '78628667728\\n'), ('236009692 89900 300\\n', '278502953469621\\n'), ('16145755 64220 70642\\n', '20303198570\\n'), ('997932 23910 14346\\n', '104545151\\n'), ('9907037 55440 88480\\n', '87620910296\\n'), ('9695 9 85014\\n', '5227761\\n'), ('99548 73888 32\\n', '69626827\\n'), ('9742365 6750 90375\\n', '126544822305\\n'), ('95544 17793 8856\\n', '157445948\\n'), ('2756 31707 63414\\n', '2757\\n'), ('936989 17028 92708\\n', '229896864\\n'), ('9650984 18601 2090\\n', '222830431513\\n'), ('26 92701 7\\n', '27\\n'), ('9980 78765 356\\n', '9981\\n'), ('10348323 355 83425\\n', '150833075049\\n'), ('952549276 31416 33000\\n', '1718466614644254\\n'), ('992869 410 9880\\n', '49284898280\\n'), ('96033 98622 100\\n', '96034\\n'), ('3 998 99486\\n', '4\\n'), ('10652698 87345 1116\\n', '6304015267729\\n'), ('303857 1990 4\\n', '23081582946\\n'), ('395013 59544 180\\n', '2117961170\\n'), ('1183 532 73416\\n', '1956\\n'), ('25 75060 2502\\n', '26\\n'), ('4987696 29388 29865\\n', '4145604588400\\n'), ('2531607 75419 14230\\n', '2250674901\\n'), ('4015 56658 19\\n', '4016\\n'), ('49277 166 8051\\n', '14453806\\n'), ('9984950 40800 1152\\n', '519262873734\\n'), ('1710 11868 202\\n', '1711\\n'), ('96974 1 99004\\n', '4702123800\\n'), ('995676200 30 99370\\n', '49568555030448651\\n'), ('983 97020 105\\n', '984\\n'), ('9331043 5355 81159\\n', '14510155272753\\n'), ('99005952 94024 10220\\n', '2397840434982\\n'), ('16965 51653 70\\n', '16966\\n'), ('997674659 8874 35496\\n', '56083140668646\\n'), ('1647861 97967 10\\n', '1352925986505\\n'), ('7526 35 7525\\n', '813132\\n'), ('68565 68564 1\\n', '205695\\n'), ('58200 198 58050\\n', '8583036\\n'), ('14332 13672 1976\\n', '18960\\n'), ('7957 18 7956\\n', '1763140\\n'), ('70343 66336 6910\\n', '110424\\n'), ('101407 95200 6448\\n', '377984\\n'), ('57986 4760 56440\\n', '395386\\n'), ('87728 689 87236\\n', '5657822\\n'), ('79903 75251 7234\\n', '150249\\n'), ('107132 20930 92956\\n', '353953\\n'), ('97009 97008 129\\n', '98514\\n'), ('96538 95880 900\\n', '243807\\n'), ('7845 4410 7350\\n', '11282\\n'), ('79873 13 79872\\n', '245419010\\n'), ('99573 99474 186\\n', '153074\\n'), ('112104 86760 69327\\n', '178619\\n'), ('76065 44280 39150\\n', '305610\\n'), ('58423 58422 9737\\n', '58436\\n'), ('22432 19298 5536\\n', '36753\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Frog Jumping", "tag": "Math", "detailed_tag": "number theory", "rating": 2046.9908687040668}
{"task_id": "E2H_CF808E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 1\\n2 1\\n', '0\\n'), ('2 2\\n1 3\\n2 2\\n', '3\\n'), ('4 3\\n3 10\\n2 7\\n2 8\\n1 1\\n', '10\\n'), ('5 5\\n3 5\\n2 6\\n3 2\\n1 1\\n1 6\\n', '13\\n'), ('6 6\\n1 6\\n1 4\\n1 8\\n3 2\\n3 2\\n2 8\\n', '26\\n'), ('6 12\\n1 7\\n1 10\\n2 8\\n1 2\\n2 9\\n3 5\\n', '41\\n'), ('6 18\\n3 3\\n1 10\\n2 10\\n3 6\\n1 3\\n2 3\\n', '35\\n'), ('20 25\\n2 13\\n3 11\\n1 32\\n1 43\\n3 85\\n1 14\\n2 57\\n1 54\\n1 38\\n2 96\\n2 89\\n3 64\\n1 79\\n2 73\\n1 73\\n2 34\\n1 52\\n1 79\\n1 42\\n3 34\\n', '990\\n'), ('40 45\\n2 82\\n2 70\\n2 48\\n3 50\\n2 15\\n1 23\\n1 80\\n2 46\\n1 20\\n3 8\\n3 81\\n2 27\\n1 59\\n1 15\\n3 95\\n2 82\\n2 40\\n2 9\\n2 61\\n1 49\\n2 5\\n2 82\\n1 55\\n2 11\\n1 26\\n1 33\\n1 2\\n1 7\\n3 57\\n2 29\\n1 59\\n2 50\\n3 63\\n1 40\\n1 99\\n2 91\\n2 39\\n3 50\\n1 75\\n3 77\\n', '1605\\n'), ('4 28\\n2 2\\n3 1\\n3 10\\n1 9\\n', '22\\n'), ('10 5\\n1 9\\n1 8\\n2 10\\n3 4\\n3 1\\n2 2\\n3 6\\n1 1\\n3 8\\n2 2\\n', '28\\n'), ('10 12\\n3 7\\n3 6\\n3 8\\n3 2\\n1 9\\n2 5\\n2 1\\n2 5\\n2 10\\n2 9\\n', '46\\n'), ('1 29\\n2 8\\n', '8\\n'), ('10 2\\n3 4\\n3 5\\n3 7\\n1 10\\n1 2\\n1 2\\n1 8\\n3 2\\n1 8\\n3 3\\n', '18\\n'), ('6 5\\n3 1\\n3 1\\n1 2\\n2 9\\n3 10\\n1 8\\n', '20\\n'), ('4 2\\n3 4\\n3 8\\n1 1\\n1 4\\n', '5\\n'), ('7 12\\n2 10\\n2 8\\n2 1\\n3 8\\n3 8\\n3 7\\n1 7\\n', '41\\n'), ('70 203\\n1 105\\n1 105\\n1 105\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n', '20310\\n'), ('10 6\\n1 8\\n1 10\\n1 7\\n2 9\\n3 8\\n1 8\\n1 7\\n1 4\\n3 1\\n3 8\\n', '44\\n'), ('2 40\\n1 10\\n3 6\\n', '16\\n'), ('7 6\\n2 9\\n3 10\\n1 2\\n2 6\\n3 6\\n2 1\\n1 3\\n', '22\\n'), ('2 4\\n3 8\\n1 6\\n', '14\\n'), ('9 19\\n2 5\\n2 3\\n3 9\\n1 9\\n3 8\\n3 5\\n3 4\\n3 2\\n3 6\\n', '46\\n'), ('13 23\\n3 17\\n2 83\\n1 81\\n3 83\\n3 59\\n3 71\\n2 61\\n3 8\\n3 64\\n2 80\\n3 47\\n1 46\\n1 82\\n', '711\\n'), ('9 10\\n3 6\\n2 1\\n2 4\\n2 3\\n3 6\\n3 1\\n1 8\\n2 4\\n3 3\\n', '25\\n'), ('3 4\\n2 10\\n2 10\\n3 15\\n', '20\\n'), ('9 15\\n3 8\\n1 2\\n2 5\\n1 5\\n3 3\\n1 7\\n1 7\\n2 7\\n2 9\\n', '51\\n'), ('8 21\\n2 6\\n3 3\\n3 7\\n3 8\\n3 8\\n3 8\\n2 6\\n3 9\\n', '52\\n'), ('6 7\\n2 5\\n2 4\\n3 9\\n3 2\\n3 1\\n3 8\\n', '18\\n'), ('8 5\\n3 9\\n3 3\\n1 4\\n3 1\\n2 5\\n3 1\\n3 6\\n3 1\\n', '14\\n'), ('1 1\\n1 10\\n', '10\\n'), ('1 2\\n2 10\\n', '10\\n'), ('5 9\\n2 8\\n3 7\\n2 6\\n1 4\\n2 7\\n', '28\\n'), ('4 4\\n2 13\\n2 15\\n2 5\\n1 9\\n', '28\\n'), ('2 1\\n1 5\\n2 11\\n', '5\\n'), ('8 6\\n1 9\\n1 5\\n1 3\\n1 10\\n3 8\\n1 6\\n1 4\\n1 2\\n', '37\\n'), ('5 7\\n1 8\\n2 13\\n2 13\\n3 20\\n3 14\\n', '46\\n'), ('52 102\\n3 199\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n', '5100\\n'), ('3 4\\n1 4\\n2 10\\n3 100\\n', '104\\n'), ('61 120\\n3 5\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n', '180\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Selling Souvenirs", "tag": "Greedy", "detailed_tag": "ternary search", "rating": 2300.0}
{"task_id": "E2H_CF980E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('6 3\\n2 1\\n2 6\\n4 2\\n5 6\\n2 3\\n', '1 3 4\\n'), ('8 4\\n2 6\\n2 7\\n7 8\\n1 2\\n3 1\\n2 4\\n7 5\\n', '1 3 4 5\\n'), ('2 1\\n1 2\\n', '1\\n'), ('3 1\\n2 1\\n2 3\\n', '1\\n'), ('3 2\\n1 3\\n1 2\\n', '1 2\\n'), ('4 2\\n4 2\\n1 4\\n3 2\\n', '1 3\\n'), ('15 3\\n9 11\\n11 8\\n7 9\\n9 14\\n12 8\\n10 7\\n1 14\\n1 5\\n12 15\\n10 3\\n5 2\\n13 15\\n4 13\\n6 4\\n', '1 2 5\\n'), ('15 12\\n2 3\\n2 14\\n4 3\\n4 10\\n3 5\\n1 4\\n1 12\\n4 15\\n3 9\\n10 7\\n11 2\\n12 8\\n15 13\\n1 6\\n', '1 2 3 5 6 7 8 9 10 11 12 14\\n'), ('32 16\\n32 8\\n11 32\\n22 8\\n22 17\\n22 3\\n16 22\\n8 12\\n22 7\\n8 27\\n11 6\\n32 4\\n9 8\\n10 22\\n22 31\\n1 22\\n21 11\\n22 15\\n14 32\\n32 30\\n22 29\\n24 11\\n18 11\\n25 32\\n13 8\\n2 32\\n28 8\\n32 5\\n11 20\\n11 19\\n22 23\\n26 32\\n', '1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18\\n'), ('32 1\\n30 25\\n30 8\\n8 22\\n22 20\\n21 20\\n6 21\\n29 6\\n4 29\\n2 4\\n13 2\\n1 13\\n1 11\\n11 24\\n31 24\\n31 15\\n15 14\\n27 14\\n16 27\\n5 16\\n12 5\\n9 12\\n9 18\\n3 18\\n3 17\\n17 19\\n19 32\\n32 10\\n10 26\\n7 26\\n7 23\\n23 28\\n', '25\\n'), ('32 2\\n7 20\\n15 20\\n7 18\\n31 20\\n28 15\\n20 25\\n27 31\\n27 6\\n27 12\\n6 16\\n22 6\\n21 22\\n13 6\\n16 5\\n23 5\\n23 26\\n23 24\\n23 17\\n24 14\\n17 4\\n29 4\\n2 24\\n30 29\\n1 29\\n8 4\\n30 32\\n11 2\\n32 3\\n1 9\\n11 10\\n19 32\\n', '3 8\\n'), ('64 46\\n52 22\\n38 52\\n28 38\\n46 38\\n30 38\\n30 37\\n7 37\\n37 48\\n48 27\\n2 7\\n27 11\\n32 2\\n32 35\\n8 11\\n59 32\\n58 59\\n59 24\\n58 40\\n40 4\\n40 49\\n40 41\\n49 16\\n9 16\\n5 9\\n12 9\\n9 62\\n3 62\\n12 63\\n63 25\\n64 63\\n63 42\\n36 42\\n45 36\\n14 45\\n53 45\\n39 53\\n60 39\\n50 39\\n50 23\\n23 10\\n19 50\\n20 10\\n19 56\\n21 56\\n31 56\\n44 31\\n26 31\\n1 31\\n43 44\\n15 26\\n15 6\\n6 29\\n47 6\\n18 6\\n29 55\\n18 54\\n33 54\\n61 55\\n54 17\\n61 34\\n13 17\\n17 51\\n57 34\\n', '1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61\\n'), ('64 63\\n11 51\\n64 11\\n64 39\\n11 6\\n24 64\\n51 63\\n43 51\\n64 29\\n6 22\\n47 6\\n1 47\\n41 22\\n41 38\\n4 47\\n35 47\\n41 23\\n45 1\\n52 35\\n26 45\\n15 35\\n21 35\\n23 32\\n12 21\\n21 62\\n25 21\\n28 25\\n15 54\\n57 12\\n20 28\\n48 57\\n8 57\\n20 44\\n46 28\\n18 57\\n8 9\\n27 9\\n48 34\\n50 46\\n9 56\\n9 61\\n7 56\\n19 61\\n61 17\\n42 17\\n19 58\\n58 30\\n7 14\\n7 59\\n31 19\\n17 5\\n55 14\\n13 31\\n2 31\\n59 40\\n55 49\\n2 60\\n2 53\\n36 2\\n37 13\\n2 16\\n53 33\\n37 10\\n60 3\\n', '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\\n'), ('64 21\\n33 48\\n33 64\\n55 48\\n11 55\\n18 11\\n62 55\\n48 57\\n17 62\\n64 52\\n30 48\\n49 48\\n23 18\\n13 11\\n9 64\\n11 5\\n11 45\\n2 55\\n62 56\\n64 36\\n33 10\\n34 18\\n55 43\\n3 48\\n60 62\\n48 32\\n33 8\\n62 41\\n44 11\\n33 46\\n15 33\\n14 62\\n11 6\\n64 31\\n62 20\\n64 25\\n62 51\\n53 33\\n62 40\\n18 4\\n16 62\\n21 11\\n33 22\\n37 33\\n59 62\\n55 7\\n27 64\\n24 64\\n39 64\\n19 62\\n54 55\\n33 61\\n47 48\\n58 55\\n42 55\\n38 11\\n50 18\\n28 48\\n11 26\\n11 1\\n62 35\\n64 29\\n12 33\\n18 63\\n', '1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "The Number Games", "tag": "Greedy", "detailed_tag": "trees", "rating": 2137.5488542407925}
{"task_id": "E2H_CF409I", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('?(_-_/___*__):-___>__.\\n', '0010\\n'), ('?(__-_+_/_____):-__>__,_____<__.\\n', 'false\\n'), ('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n', '0250341\\n'), ('?(__+___+__-___):-___>__.\\n', '0101\\n'), ('?(__*___+_-____):-___>__,____<__.\\n', '1200\\n'), ('?(__):-__>__.\\n', 'false\\n'), ('?(__):-__>__,__<__.\\n', 'false\\n'), ('?(__-__):-__>__,__<__.\\n', 'false\\n'), ('?(__+__+___):-___<__.\\n', '110\\n'), ('?(_*__*___*____*_____*______*_______):-__<___,___<____,____<_____,_____<______,______<_______.\\n', '0012345\\n'), ('?(_*____*_______*__*_____*______*___):-__<___,___<____,____<_____,_____<______,______<_______.\\n', '0250341\\n'), ('?(_*__*___*____*_____*______*_______*________*_________*__________*___________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\\n', '00123456789\\n'), ('?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\\n', '001234567890\\n'), ('?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________,___________<____________.\\n', 'false\\n'), ('?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\\n', '098765432100\\n'), ('?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__________<___________,______<_______,_______<________,________<_________,_________<__________,_____<______,____<_____,___<____,__<___.\\n', '098765432100\\n'), ('?(__________):-__________<__________.\\n', 'false\\n'), ('?(__________):-__________>__________.\\n', 'false\\n'), ('?(_____+___________+________+_________+_+______+___+__+_______+__________+____):-____<__________,________<_______,__________<_______,_____<___________,__<_,______<___________,___________<_________,_<_________,___<_______,_________<_______.\\n', '01021000310\\n'), ('?(_+__-___-____*_____):-__<___,__<____,___<_____,____<_____.\\n', '00112\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Feed the Golorp", "tag": "Others", "detailed_tag": "*special", "rating": 2400.0}
{"task_id": "E2H_CF1709F", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 42 2\\n', '3\\n'), ('2 37 13\\n', '36871576\\n'), ('4 1252 325\\n', '861735572\\n'), ('6 153 23699\\n', '0\\n'), ('15 200000 198756\\n', '612404746\\n'), ('1 1 1\\n', '2\\n'), ('1 1 100000\\n', '0\\n'), ('1 1 200000\\n', '0\\n'), ('1 100000 1\\n', '2\\n'), ('1 100000 100000\\n', '100001\\n'), ('1 100000 200000\\n', '1\\n'), ('1 200000 1\\n', '2\\n'), ('1 200000 100000\\n', '100001\\n'), ('1 200000 200000\\n', '200001\\n'), ('7 1 1\\n', '10802803\\n'), ('7 1 100000\\n', '0\\n'), ('7 1 200000\\n', '0\\n'), ('7 100000 1\\n', '477825325\\n'), ('7 100000 100000\\n', '569581672\\n'), ('7 100000 200000\\n', '136436465\\n'), ('7 200000 1\\n', '90602327\\n'), ('7 200000 100000\\n', '331190498\\n'), ('7 200000 200000\\n', '343099201\\n'), ('15 1 1\\n', '240127335\\n'), ('15 1 100000\\n', '0\\n'), ('15 1 200000\\n', '0\\n'), ('15 100000 1\\n', '737847906\\n'), ('15 100000 100000\\n', '607648863\\n'), ('15 100000 200000\\n', '816613688\\n'), ('15 200000 1\\n', '836547474\\n'), ('15 200000 100000\\n', '63705590\\n'), ('15 200000 200000\\n', '894782321\\n'), ('15 199999 200000\\n', '437780341\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Multiset of Strings", "tag": "Math", "detailed_tag": "meet-in-the-middle", "rating": 2451.3353069734585}
