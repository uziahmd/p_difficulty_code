{"task_id": "E2H_CF1031A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3 1\\n', '8\\n'), ('7 9 1\\n', '28\\n'), ('7 9 2\\n', '40\\n'), ('18 26 3\\n', '204\\n'), ('63 34 8\\n', '1072\\n'), ('100 100 25\\n', '5100\\n'), ('4 3 1\\n', '10\\n'), ('3 4 1\\n', '10\\n'), ('3 10 1\\n', '22\\n'), ('12 3 1\\n', '26\\n'), ('4 4 1\\n', '12\\n'), ('10 4 1\\n', '24\\n'), ('4 12 1\\n', '28\\n'), ('10 10 1\\n', '36\\n'), ('10 10 2\\n', '56\\n'), ('12 10 1\\n', '40\\n'), ('10 12 2\\n', '64\\n'), ('12 11 1\\n', '42\\n'), ('11 12 2\\n', '68\\n'), ('12 11 3\\n', '78\\n'), ('100 8 2\\n', '408\\n'), ('8 100 2\\n', '408\\n'), ('100 100 20\\n', '4880\\n'), ('74 50 5\\n', '1060\\n'), ('43 75 9\\n', '1512\\n'), ('5 5 1\\n', '16\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Golden Plate", "tag": "Implement", "detailed_tag": "math", "rating": 712.1739728798974}
{"task_id": "E2H_CF404A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\\n', 'NO\\n'), ('3\\nwsw\\nsws\\nwsw\\n', 'YES\\n'), ('3\\nxpx\\npxp\\nxpe\\n', 'NO\\n'), ('5\\nliiil\\nilili\\niilii\\nilili\\nliiil\\n', 'YES\\n'), ('7\\nbwccccb\\nckcccbj\\nccbcbcc\\ncccbccc\\nccbcbcc\\ncbcccbc\\nbccccdt\\n', 'NO\\n'), ('13\\nsooooooooooos\\nosoooooooooso\\noosooooooosoo\\nooosooooosooo\\noooosooosoooo\\nooooososooooo\\noooooosoooooo\\nooooososooooo\\noooosooosoooo\\nooosooooosooo\\noosooooooosoo\\nosoooooooooso\\nsooooooooooos\\n', 'YES\\n'), ('3\\naaa\\naaa\\naaa\\n', 'NO\\n'), ('3\\naca\\noec\\nzba\\n', 'NO\\n'), ('15\\nrxeeeeeeeeeeeer\\nereeeeeeeeeeere\\needeeeeeeeeeoee\\neeereeeeeeeewee\\neeeereeeeebeeee\\nqeeeereeejedyee\\neeeeeerereeeeee\\neeeeeeereeeeeee\\neeeeeerereeeeze\\neeeeereeereeeee\\neeeereeeeegeeee\\neeereeeeeeereee\\neereeeeeeqeeved\\ncreeeeeeceeeere\\nreeerneeeeeeeer\\n', 'NO\\n'), ('5\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\n', 'NO\\n'), ('5\\nxxxxx\\nxxxxx\\nxoxxx\\nxxxxx\\nxxxxx\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\nxxxxx\\nxoxox\\noxxxo\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\nxxoox\\nxoxox\\noxxxo\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\nxxaxx\\nxoxox\\noxxxo\\n', 'NO\\n'), ('5\\noxxxo\\nxoxox\\noxoxx\\nxoxox\\noxxxo\\n', 'NO\\n'), ('3\\nxxx\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxx\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxa\\nxxx\\n', 'NO\\n'), ('3\\nxax\\nxxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naaa\\nxax\\n', 'NO\\n'), ('3\\naax\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxaa\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxa\\naax\\n', 'NO\\n'), ('3\\nxax\\naxa\\nxaa\\n', 'NO\\n'), ('3\\nxfx\\naxa\\nxax\\n', 'NO\\n'), ('3\\nxax\\nafa\\nxax\\n', 'NO\\n'), ('3\\nxax\\naxa\\nxaf\\n', 'NO\\n'), ('3\\nxox\\nxxx\\nxxx\\n', 'NO\\n'), ('3\\naxa\\naax\\nxxa\\n', 'NO\\n'), ('3\\nxox\\noxx\\nxox\\n', 'NO\\n'), ('3\\nxox\\nooo\\nxox\\n', 'NO\\n'), ('3\\naaa\\naab\\nbbb\\n', 'NO\\n'), ('3\\nxxx\\nsxs\\nxsx\\n', 'NO\\n'), ('5\\nabbba\\nbabab\\nbbbbb\\nbaaab\\nabbba\\n', 'NO\\n'), ('5\\nabaaa\\nbbbbb\\nbbabb\\nbabab\\nabbba\\n', 'NO\\n'), ('5\\nxoxox\\noxoxo\\nooxoo\\noxoxo\\nxooox\\n', 'NO\\n'), ('3\\nxox\\noxx\\nxxx\\n', 'NO\\n'), ('5\\nxoooo\\noxooo\\nooxoo\\noooxo\\noooox\\n', 'NO\\n'), ('5\\nxoooo\\noxoxx\\nooxoo\\noxoxo\\noxoox\\n', 'NO\\n'), ('3\\naaa\\nbab\\naba\\n', 'NO\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Valera and X", "tag": "Implement", "detailed_tag": "implementation", "rating": 1009.7960425930711}
{"task_id": "E2H_CF492B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('7 15\\n15 5 3 7 9 14 0\\n', '2.5000000000\\n'), ('2 5\\n2 5\\n', '2.0000000000\\n'), ('46 615683844\\n431749087 271781274 274974690 324606253 480870261 401650581 13285442 478090364 266585394 425024433 588791449 492057200 391293435 563090494 317950 173675329 473068378 356306865 311731938 192959832 321180686 141984626 578985584 512026637 175885185 590844074 47103801 212211134 330150 509886963 565955809 315640375 612907074 500474373 524310737 568681652 315339618 478782781 518873818 271322031 74600969 539099112 85129347 222068995 106014720 77282307\\n', '22258199.5000000000\\n'), ('2 1000000000\\n0 1000000000\\n', '500000000.0000000000\\n'), ('2 555\\n200 300\\n', '255.0000000000\\n'), ('1 1\\n1\\n', '1.0000000000\\n'), ('1 1\\n0\\n', '1.0000000000\\n'), ('1 1000000000\\n0\\n', '1000000000.0000000000\\n'), ('1 1000000000\\n1000000000\\n', '1000000000.0000000000\\n'), ('1 999999999\\n499999999\\n', '500000000.0000000000\\n'), ('4 700\\n0 250 475 700\\n', '125.0000000000\\n'), ('4 700\\n0 225 450 700\\n', '125.0000000000\\n'), ('5 1000\\n0 250 500 750 1000\\n', '125.0000000000\\n'), ('5 2000\\n1001 1001 1001 1001 1001\\n', '1001.0000000000\\n'), ('1 999\\n501\\n', '501.0000000000\\n'), ('2 1000\\n400 600\\n', '400.0000000000\\n'), ('4 15\\n1 3 9 11\\n', '4.0000000000\\n'), ('1 5\\n2\\n', '3.0000000000\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Vanya and Lanterns", "tag": "Implement", "detailed_tag": "binary search", "rating": 1140.9963002466513}
{"task_id": "E2H_CF173A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('7\\nRPS\\nRSPP\\n', '3 2\\n'), ('5\\nRRRRRRRR\\nR\\n', '0 0\\n'), ('23\\nRSP\\nRPSS\\n', '7 8\\n'), ('52\\nRRPSS\\nRSSPRPRPPP\\n', '15 21\\n'), ('1293\\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRR\\nSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRR\\n', '411 441\\n'), ('103948\\nRRPSSRSSPRPRPPPRPPPRPPPPPRPSPRSSRPSPPRPRRSSPSSSSRPPSSSSRPRPRPPSRSRRSPPSPPRPSRSPSRRPSRSRSRPRPRSSPSPRPRSSPRPSPPRPRRRPRRPRPSPRPRSSRRRSSSSPSRRSPPPRSSSRSRRSSSPPRRSPSSSPRRSSSSPSSPRRPRSRPPSSRPSRPPRPSSSRSRPPSRRSSSPPRRPPSPSSRRSSPPPPPRRSRSSRPP\\nRPRRRSRSRPRPSRPPRSPRRRPSPRPRRRSRSRRSRSSSPSPPSPPPRSPRSSSRPSSSSPPPPSPRPPSSPPSSRRRPRPRRPSSRSPPPPRRSPSSRSRRSSRRPPRSRSRPPRRPRSPRPSPPRPPPSRRRSRRPSPRSSPRSRPSRRPSRSPRRSPSPRSRPSRRPRPRRSPPSRSSR\\n', '34707 34585\\n'), ('1\\nR\\nR\\n', '0 0\\n'), ('5\\nS\\nR\\n', '5 0\\n'), ('100\\nR\\nP\\n', '100 0\\n'), ('145856\\nS\\nR\\n', '145856 0\\n'), ('554858576\\nP\\nP\\n', '0 0\\n'), ('2000000000\\nS\\nS\\n', '0 0\\n'), ('1\\nS\\nSSRSRPSSSRPRRPSPRSRSPRRSRRPPRPRRPPRPPRRSPRPRRRPSRSRPPSRPRSPPPSSPPRRRPSSPRSRRSSRPRSRSRSRRRSPSRPPSPPRRSPPRPRSPPPPRPPPRRRPPRPRSSPRSPRRPRRSSPPPSSRPSSRRSRRSPRPPRPPPSPRPSRRPSSSRPPPPRSSPSSSSPRPRRRSRRPPPPPSRRPSSRSPSSRPSSSSPRPPRSRPSRPRRRPRSPSP\\n', '0 0\\n'), ('1\\nRPSSPSRSPRSRSRRPPSRPRPSSRRRRRPPSPR\\nS\\n', '0 1\\n'), ('1\\nPSSSRPSRPRSPRP\\nRRPSSPPSPRSSSSPPRSPSSRSSSRRPPSPPPSSPSRRRSRRSSRRPPRSSRRRPPSPRRPRRRPPSPSPPPPRSPPRPRRSRSSSSSPSRSSRPPRRPRRPRPRRRPPSSPPSRRSRPRPSSRSSSRPRPRP\\n', '0 1\\n'), ('54\\nSRPRPRSRSPPSSRRPPSSPRPPSRRSRPPSPPR\\nSPRPSSSRSRPR\\n', '19 16\\n'), ('234\\nSRSSRRPSSSSPPRPRRPPRSSPSSSPSPRPSRRRSSSRRSPSRRPSRPPPSPSPPPRSRSPPPSPSRSSSPRRPPSRSSPRPSSRRPSSPSSPSRRPSRSSRSPSPPRSPRPRPPRRPRPRPSPRRSSRPSRPRSSSPSRRRSPRPPPPPSPRSSSPPSRRPRPSSRRPRRRSRSRRRSRRS\\nPPPSRSSPRPSSRSSPSRSRSRSPSRSSRPRRPRRRPPPPSPSRRPPPSRPPPSPPRSRSRRRRRRPPRSSSRSPSRPRPSPPSPSPRPPRPRRSSRSSRPPPPPPRRRRSPPPPRSPRSRRP\\n', '74 80\\n'), ('1457057352\\nR\\nPSRSRSSRPSRRSSSRSRRPRSPPSPPRPSRRPPRSRRSPPSPPSPRPRPRPSSRPRPRRPRSSSSPSRRRPSRSPPSPSRRSPSSRSRPSPRRRSRRRPSPRPPRPPPPPRPPRRRRRRPPRRSPSPSSPSSPRPRSPPRSRPSPSRSRRRRRPPPSRPRSPPSSRRRRPRPPRSPSSPRRRPPPPPRRSRSPRPPSRPRSRSRRPRRRPRSRSPRRRSRSSRPPPRRSRRSSRRPSRPPRSPSPRPRSSSRSSRRPSRRRRPSRRPPRPPRRPRSRPRSRRPPPPPSPPPSPSSPPRPPPRPPRSSPPSRPPSSRRSRSSSRPRRSRSSPRRSRPPRSRSSSRRSPRPPSSPSRPPSSPRPPPSSSSPPRPSRSRPRSPRPSSPPSSPRRPRRPRSPPRSRSPPPPRSRSSPRRSSSRRPPRPPSRPSSPSRPPSSRPPPRRRPSRPPSPRSPSRRRRPPRRPSRPRPSSPRSPPPRRSPPRSRS\\n', '508623712 421858498\\n'), ('1983654300\\nRSSSPPRRSSRSSRPPSRRSSRPPPPSRRPPPSPSSPPPRPSSSRPSPRPSPSPPRRPRSPPSPRRRPPPSPRSSPSSPSRRPSPRPRRRRPRRRRPPRSSSSSSRSSRSPRSPPPPSSRSRPPRPRPRPRPSSPRSSPPSPRRSRSSSRRSSSRSPPPPSPSPRPRPSSSPPPPRRRRPSPRSRPRSPPSPRPSSPPPSPPSPSRSPRPSSRRSPRRSPRRSRRPSPRPRPRRPPRPSPSRSRPRRRRSSRPRSPRPSPPSSSRPRSPPRSRPPRRPRSSRPRRPPRRPSRPRRRPPSRPRRPRPPRSPSRSSRRSRRPPSRPPPRPRPPRRRRRSSPRSPRPRPSSRSRPPRRPPPSSRRSPPSRRSSRRRRSSSPRRR\\nP\\n', '697663183 588327921\\n'), ('1958778499\\nSPSSSRPSPPRRSSRSRRSSSSRSR\\nPPSSRSPSPRRSRSSRSSRPRPSSSRRRPSRPPSRSSPPSSSPSSPRRRSPSRSPRPRRRSSSPPSSPSPP\\n', '604738368 654397557\\n'), ('1609387747\\nRPRPPPSSSPPSRRPSRRRPPRPPPRPRSRSRPPRRPSPRPSSRSSPPPPRRRRSSRPSPPRRSPPRPSRRRPSSRRPSSRSPRPRSRRSRRRSPRPRPRRSPSRSPSRPSSSPPRPSRPPRSRRRRPRRRSSRRRSSPSPSRSRPRPRPRSRPRSPSSRSPSRPRRRSRPPPPRPPPSSSRSRPSSRPSSPSRRSPS\\nSSRSRPRSSPSPRRSPSRRRRPRRRRRSRSSPRSSRSPRSSRPSSRSRSSPSPPPSRRPRRSRSSRSPRPSRRPRSRRPRPPSSSPSRRSPPRRSRSPPPPPSRRRPRPPSPPPSPRSRSRRSPSRSSPPPPPPPSPSPPPPSSRSSSRSSRRRSPPPSPSRPRSPRRRRSSRRPPSSRRRPRPSPSPSRRRRSRRSSRPPPPRPPPRPSSSSPRRSRRSSRPRSSPPSSRPSPSRRRRRPSRRSPSRRSRRPRRPRPPSSSRPRPRRSSRRSRSRPRRSSPRP\\n', '535775691 539324629\\n'), ('2000000000\\nPSRRRPS\\nSPSRRPSSSPRPS\\n', '659340660 703296704\\n'), ('2000000000\\nRRRRR\\nRRR\\n', '0 0\\n'), ('2000000000\\nRRRRRRRRRR\\nSSSSSSSSSSSSSSS\\n', '0 2000000000\\n'), ('2000000000\\nRRR\\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\\n', '2000000000 0\\n'), ('2000000000\\nSSSS\\nS\\n', '0 0\\n'), ('2000000000\\nSSSS\\nPPPPPP\\n', '0 2000000000\\n'), ('2000000000\\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\\nRRR\\n', '0 2000000000\\n'), ('2000000000\\nPPPPPPP\\nSSSSSS\\n', '2000000000 0\\n'), ('2000000000\\nP\\nP\\n', '0 0\\n'), ('2000000000\\nSSSS\\nRRR\\n', '2000000000 0\\n'), ('2000000000\\nR\\nS\\n', '0 2000000000\\n'), ('2000000000\\nRRRRRRRRRR\\nSSSSSSP\\n', '285714285 1714285715\\n'), ('6\\nRR\\nSSS\\n', '0 6\\n'), ('5\\nR\\nR\\n', '0 0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Rock-Paper-Scissors", "tag": "Implement", "detailed_tag": "math", "rating": 1261.421988236309}
{"task_id": "E2H_CF1141D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('10\\ncodeforces\\ndodivthree\\n', '5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n'), ('7\\nabaca?b\\nzabbbcc\\n', '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n'), ('9\\nbambarbia\\nhellocode\\n', '0\\n'), ('10\\ncode??????\\n??????test\\n', '10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n'), ('1\\nz\\nz\\n', '1\\n1 1\\n'), ('1\\nz\\na\\n', '0\\n'), ('2\\naa\\naa\\n', '2\\n1 1\\n2 2\\n'), ('2\\nab\\naa\\n', '1\\n1 1\\n'), ('2\\nba\\naa\\n', '1\\n2 1\\n'), ('2\\naf\\nfa\\n', '2\\n1 2\\n2 1\\n'), ('2\\naf\\nfz\\n', '1\\n2 1\\n'), ('1\\n?\\nz\\n', '1\\n1 1\\n'), ('1\\na\\n?\\n', '1\\n1 1\\n'), ('1\\n?\\n?\\n', '1\\n1 1\\n'), ('20\\nleduyanhyeunguyenhoa\\nminhtriloveviethuong\\n', '10\\n19 9\\n10 14\\n4 17\\n13 20\\n2 11\\n1 8\\n12 19\\n8 4\\n18 16\\n7 3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Colored Boots", "tag": "Implement", "detailed_tag": "greedy", "rating": 1509.4556767366253}
{"task_id": "E2H_CF822C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\\n', '5\\n'), ('3 2\\n4 6 3\\n2 4 1\\n3 5 4\\n', '-1\\n'), ('2 1855\\n159106 161198 437057705\\n149039 158409 889963913\\n', '-1\\n'), ('15 17\\n1 10 8\\n5 19 1\\n12 14 6\\n9 19 8\\n6 7 3\\n5 11 9\\n7 12 5\\n17 20 8\\n6 12 6\\n11 19 4\\n3 14 1\\n15 19 10\\n3 20 5\\n5 19 9\\n10 18 10\\n', '11\\n'), ('15 7\\n16 18 6\\n11 15 2\\n5 17 3\\n4 5 1\\n3 11 5\\n13 16 7\\n8 11 6\\n9 16 4\\n7 8 3\\n11 15 2\\n2 8 6\\n7 8 7\\n10 12 2\\n6 8 1\\n6 15 1\\n', '3\\n'), ('15 24\\n2 14 5\\n7 14 4\\n6 11 6\\n3 5 6\\n4 13 5\\n10 11 4\\n8 8 6\\n5 14 4\\n2 2 3\\n9 14 5\\n2 13 6\\n14 14 4\\n2 12 3\\n3 14 5\\n9 11 3\\n', '-1\\n'), ('15 12\\n3 12 4\\n2 8 1\\n7 8 4\\n10 11 3\\n12 12 1\\n11 12 4\\n5 13 3\\n7 13 1\\n11 13 3\\n2 5 2\\n4 5 3\\n2 11 4\\n2 6 4\\n8 9 4\\n3 4 3\\n', '5\\n'), ('15 13\\n4 10 3\\n7 8 3\\n5 7 1\\n2 2 3\\n1 6 2\\n3 10 1\\n6 9 2\\n5 8 1\\n6 8 2\\n4 5 2\\n3 5 2\\n4 8 1\\n4 9 1\\n5 9 1\\n5 10 2\\n', '-1\\n'), ('8 7\\n10 10 3\\n10 10 2\\n6 7 2\\n1 6 3\\n1 3 2\\n3 8 2\\n4 6 3\\n1 6 2\\n', '4\\n'), ('5 6\\n18 20 2\\n9 11 3\\n4 7 3\\n16 17 3\\n12 14 1\\n', '3\\n'), ('3 5\\n6 6 1\\n2 4 2\\n5 8 3\\n', '-1\\n'), ('3 3\\n11 11 2\\n3 4 3\\n8 9 2\\n', '4\\n'), ('2 7\\n3 6 1\\n10 12 1\\n', '2\\n'), ('2 2\\n200000 200000 1\\n1 1 1000000000\\n', '1000000001\\n'), ('2 8\\n1 4 2\\n8 11 2\\n', '4\\n'), ('2 2\\n1 1 1000000000\\n2 2 1000000000\\n', '2000000000\\n'), ('2 3\\n1 2 1000000000\\n3 3 1000000000\\n', '2000000000\\n'), ('2 2\\n1 1 500000000\\n2 2 500000000\\n', '1000000000\\n'), ('2 4\\n1 2 1000000000\\n3 4 1000000000\\n', '2000000000\\n'), ('2 4\\n1 2 500000000\\n3 4 500000000\\n', '1000000000\\n'), ('2 2\\n1 1 1000000000\\n2 2 1000\\n', '1000001000\\n'), ('2 4\\n1 2 999999999\\n3 4 999999999\\n', '1999999998\\n'), ('2 2\\n1 1 1000000000\\n2 2 7\\n', '1000000007\\n'), ('2 4\\n1 2 1\\n2 3 2\\n', '-1\\n'), ('2 3\\n1 1 1000000000\\n2 3 73741824\\n', '1073741824\\n'), ('4 3\\n1 1 2\\n1 1 3\\n2 3 3\\n2 3 4\\n', '5\\n'), ('2 5\\n1 3 50000000\\n4 5 50000000\\n', '100000000\\n'), ('2 5\\n1 3 1000000000\\n4 5 1000000000\\n', '2000000000\\n'), ('2 2\\n1 1 1\\n1 1 1\\n', '-1\\n'), ('4 5\\n1 3 900000000\\n1 2 5\\n5 6 900000000\\n1 2 4\\n', '1800000000\\n'), ('2 4\\n1 2 536870912\\n3 4 536870912\\n', '1073741824\\n'), ('2 4\\n1 2 500000000\\n5 6 500000000\\n', '1000000000\\n'), ('2 5\\n1 3 999999998\\n4 5 1\\n', '999999999\\n'), ('4 3\\n1 1 2\\n1 1 3\\n2 3 2\\n1 2 3\\n', '4\\n'), ('4 5\\n1 3 500000000\\n1 2 500000000\\n5 6 500000000\\n1 2 500000000\\n', '1000000000\\n'), ('2 2\\n2 2 1\\n3 3 2\\n', '3\\n'), ('3 3\\n3 5 2\\n1 2 4\\n1 3 4\\n', '-1\\n'), ('3 4\\n2 3 1\\n1 2 2\\n3 4 2\\n', '4\\n'), ('4 5\\n1 2 2\\n1 2 5\\n3 5 6\\n3 5 8\\n', '8\\n'), ('2 4\\n1 2 5\\n1 3 5\\n', '-1\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Hacker, pack your bags!", "tag": "Implement", "detailed_tag": "sortings", "rating": 1606.9640149531353}
{"task_id": "E2H_CF1846E2", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('9\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000\\n', 'NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\n'), ('100\\n12\\n14\\n15\\n21\\n22\\n23\\n31\\n48\\n52\\n63\\n66\\n70\\n85\\n88\\n96\\n102\\n112\\n127\\n132\\n156\\n159\\n170\\n200\\n217\\n223\\n239\\n241\\n255\\n261\\n264\\n272\\n276\\n279\\n292\\n308\\n316\\n334\\n341\\n342\\n381\\n384\\n387\\n394\\n398\\n404\\n433\\n445\\n447\\n489\\n490\\n500\\n502\\n511\\n524\\n533\\n538\\n540\\n553\\n571\\n575\\n581\\n586\\n603\\n607\\n611\\n614\\n618\\n628\\n631\\n643\\n651\\n668\\n677\\n680\\n682\\n689\\n696\\n732\\n777\\n781\\n787\\n792\\n806\\n811\\n814\\n822\\n830\\n837\\n845\\n850\\n853\\n872\\n900\\n906\\n924\\n928\\n951\\n963\\n975\\n991\\n', 'NO\\nNO\\nYES\\nYES\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n'), ('100\\n41\\n64\\n69\\n80\\n88\\n96\\n107\\n155\\n163\\n167\\n181\\n191\\n225\\n254\\n264\\n268\\n277\\n278\\n287\\n292\\n294\\n296\\n301\\n302\\n310\\n320\\n342\\n345\\n351\\n368\\n373\\n389\\n409\\n412\\n413\\n414\\n440\\n441\\n443\\n445\\n448\\n457\\n467\\n470\\n474\\n475\\n483\\n487\\n518\\n525\\n529\\n562\\n569\\n580\\n587\\n604\\n606\\n616\\n622\\n624\\n627\\n631\\n663\\n676\\n678\\n685\\n686\\n695\\n706\\n712\\n716\\n718\\n731\\n738\\n741\\n752\\n765\\n766\\n772\\n774\\n785\\n788\\n793\\n801\\n810\\n837\\n869\\n871\\n900\\n901\\n912\\n914\\n933\\n938\\n958\\n961\\n969\\n974\\n989\\n991\\n', 'NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n'), ('1\\n717109999234424\\n', 'NO\\n'), ('1\\n100000010000001\\n', 'YES\\n'), ('1\\n10000000100000001\\n', 'YES\\n'), ('1\\n999999999000000001\\n', 'YES\\n'), ('1\\n7013998766394781\\n', 'YES\\n'), ('1\\n4000002000001\\n', 'YES\\n'), ('1\\n4000006000003\\n', 'YES\\n'), ('1\\n64000160000400001\\n', 'YES\\n'), ('6\\n64000008000003\\n64000008000001\\n9999799901001001\\n9999799901001000\\n9999999900000001\\n9999799901001002\\n', 'NO\\nYES\\nYES\\nNO\\nYES\\nNO\\n'), ('10\\n1\\n2\\n3\\n6\\n13\\n15\\n255\\n10101\\n1000000000000000000\\n1000160008600156\\n', 'NO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\n'), ('1\\n347666533995749223\\n', 'YES\\n'), ('4\\n1000000000000000000\\n240818941573998061\\n27618754614420628\\n4000006000003\\n', 'NO\\nYES\\nYES\\nYES\\n'), ('5\\n975461058777625363\\n975461058777625363\\n999999999000000002\\n999999999000000001\\n280138784844143524\\n', 'YES\\nYES\\nNO\\nYES\\nYES\\n'), ('1\\n40000000200000001\\n', 'YES\\n'), ('1\\n160000000400000001\\n', 'YES\\n'), ('1\\n147389519791195397\\n', 'YES\\n'), ('1\\n1000100003400040\\n', 'YES\\n'), ('1\\n411440358027985474\\n', 'YES\\n'), ('1\\n9999999700000003\\n', 'YES\\n'), ('8\\n9999999700000003\\n9999999700000001\\n9999999700000002\\n9999999700000004\\n999999997000000003\\n999999997000000002\\n999999997000000001\\n999999997000000004\\n', 'YES\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\n'), ('1\\n810000000900000001\\n', 'YES\\n'), ('1\\n140363476394377041\\n', 'YES\\n'), ('1\\n25000005000001\\n', 'YES\\n'), ('1\\n245930046754636608\\n', 'YES\\n'), ('7\\n245930046754636608\\n64000160000400001\\n25000005000001\\n140363476394377041\\n810000000900000001\\n9999999700000003\\n999999997000000003\\n', 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n'), ('1\\n963418364786213635\\n', 'YES\\n'), ('1\\n999980000200000\\n', 'YES\\n'), ('1\\n4000022000031\\n', 'YES\\n'), ('1\\n251233654563805\\n', 'YES\\n'), ('4\\n251233654563805\\n365500864765439656\\n237860064457152228\\n1597376949252679\\n', 'YES\\nYES\\nYES\\nYES\\n'), ('22\\n4000002000001\\n4000006000003\\n4000010000007\\n4000014000013\\n4000018000021\\n4000022000031\\n4000026000043\\n4000030000057\\n4000034000073\\n4000038000091\\n4000042000111\\n4000046000133\\n4000050000157\\n4000054000183\\n4000058000211\\n4000062000241\\n4000066000273\\n4000070000307\\n4000074000343\\n4000078000381\\n4000082000421\\n4000086000463\\n', 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n'), ('1\\n111307891115281\\n', 'YES\\n'), ('1\\n224449030516405\\n', 'YES\\n'), ('1\\n987201227329380031\\n', 'YES\\n'), ('2\\n999999981000000091\\n10000000100000001\\n', 'YES\\nYES\\n'), ('3\\n999999981000000091\\n10000000100000001\\n999999999000000001\\n', 'YES\\nYES\\nYES\\n'), ('3\\n140363476394377041\\n245930046754636608\\n64000160000400001\\n', 'YES\\nYES\\nYES\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Rudolf and Snowflakes (hard version)", "tag": "Math", "detailed_tag": "binary search", "rating": 1835.8052989047958}
{"task_id": "E2H_CF270E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3\\n3 2 10\\n1 2 10\\n3 1 5\\n', '1\\n0\\n1\\n'), ('4 5\\n1 2 10\\n1 3 10\\n2 3 5\\n4 2 15\\n3 4 5\\n', '0\\n0\\n1\\n1\\n0\\n'), ('10 17\\n8 1 1\\n4 8 2\\n7 10 8\\n1 4 1\\n5 4 3\\n6 9 6\\n3 5 4\\n1 9 1\\n3 9 5\\n7 1 1\\n1 2 1\\n1 3 1\\n6 7 7\\n8 2 1\\n1 10 1\\n1 5 1\\n6 1 1\\n', '1\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n'), ('10 20\\n3 8 41\\n1 2 21\\n9 1 31\\n1 3 53\\n5 9 67\\n10 1 8\\n6 1 16\\n5 2 21\\n1 7 50\\n5 4 38\\n6 4 16\\n4 8 16\\n5 10 93\\n9 10 126\\n8 9 16\\n4 1 38\\n5 7 50\\n3 9 12\\n1 5 10\\n5 8 41\\n', '0\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n'), ('2 1\\n1 2 1\\n', '0\\n'), ('2 1\\n2 1 1\\n', '1\\n'), ('3 2\\n1 2 1\\n2 3 1\\n', '0\\n0\\n'), ('4 4\\n4 3 5000\\n1 2 10000\\n3 1 5000\\n4 2 10000\\n', '1\\n0\\n1\\n1\\n'), ('3 3\\n3 1 10000\\n2 1 10000\\n3 2 10000\\n', '1\\n1\\n1\\n'), ('3 3\\n3 2 10000\\n2 1 10000\\n3 1 10000\\n', '1\\n1\\n1\\n'), ('10 17\\n9 1 8\\n7 10 1\\n5 4 4\\n1 10 1\\n3 10 1\\n10 5 1\\n6 3 6\\n10 4 1\\n4 6 5\\n7 5 3\\n2 10 1\\n9 3 7\\n9 10 1\\n8 10 1\\n10 6 1\\n2 7 2\\n2 8 1\\n', '1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n'), ('5 6\\n1 3 10\\n2 1 10\\n3 5 10\\n1 4 10\\n2 5 10\\n4 5 10\\n', '0\\n1\\n0\\n0\\n0\\n0\\n'), ('5 6\\n2 1 8\\n5 2 8\\n5 3 4\\n4 1 9\\n3 1 4\\n5 4 9\\n', '1\\n1\\n1\\n1\\n1\\n1\\n'), ('10 23\\n10 5 94\\n6 9 20\\n10 2 79\\n3 9 63\\n1 6 80\\n7 8 21\\n3 5 6\\n3 1 94\\n2 5 21\\n1 2 100\\n1 7 79\\n6 10 59\\n8 1 60\\n10 3 37\\n9 1 37\\n4 8 40\\n7 10 100\\n6 4 41\\n5 1 79\\n8 10 79\\n9 10 80\\n10 4 60\\n4 1 59\\n', '1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n1\\n1\\n'), ('9 9\\n1 2 1\\n2 3 1\\n3 4 1\\n4 5 1\\n5 6 1\\n6 7 1\\n7 9 1\\n8 9 1\\n1 8 1\\n', '0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n'), ('6 6\\n1 2 1\\n2 6 1\\n1 3 1\\n3 4 1\\n4 5 1\\n5 6 1\\n', '0\\n0\\n0\\n0\\n0\\n0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Flawed Flow", "tag": "Others", "detailed_tag": "dfs and similar", "rating": 2053.3310233859147}
{"task_id": "E2H_CF808E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 1\\n2 1\\n', '0\\n'), ('2 2\\n1 3\\n2 2\\n', '3\\n'), ('4 3\\n3 10\\n2 7\\n2 8\\n1 1\\n', '10\\n'), ('5 5\\n3 5\\n2 6\\n3 2\\n1 1\\n1 6\\n', '13\\n'), ('6 6\\n1 6\\n1 4\\n1 8\\n3 2\\n3 2\\n2 8\\n', '26\\n'), ('6 12\\n1 7\\n1 10\\n2 8\\n1 2\\n2 9\\n3 5\\n', '41\\n'), ('6 18\\n3 3\\n1 10\\n2 10\\n3 6\\n1 3\\n2 3\\n', '35\\n'), ('20 25\\n2 13\\n3 11\\n1 32\\n1 43\\n3 85\\n1 14\\n2 57\\n1 54\\n1 38\\n2 96\\n2 89\\n3 64\\n1 79\\n2 73\\n1 73\\n2 34\\n1 52\\n1 79\\n1 42\\n3 34\\n', '990\\n'), ('40 45\\n2 82\\n2 70\\n2 48\\n3 50\\n2 15\\n1 23\\n1 80\\n2 46\\n1 20\\n3 8\\n3 81\\n2 27\\n1 59\\n1 15\\n3 95\\n2 82\\n2 40\\n2 9\\n2 61\\n1 49\\n2 5\\n2 82\\n1 55\\n2 11\\n1 26\\n1 33\\n1 2\\n1 7\\n3 57\\n2 29\\n1 59\\n2 50\\n3 63\\n1 40\\n1 99\\n2 91\\n2 39\\n3 50\\n1 75\\n3 77\\n', '1605\\n'), ('4 28\\n2 2\\n3 1\\n3 10\\n1 9\\n', '22\\n'), ('10 5\\n1 9\\n1 8\\n2 10\\n3 4\\n3 1\\n2 2\\n3 6\\n1 1\\n3 8\\n2 2\\n', '28\\n'), ('10 12\\n3 7\\n3 6\\n3 8\\n3 2\\n1 9\\n2 5\\n2 1\\n2 5\\n2 10\\n2 9\\n', '46\\n'), ('1 29\\n2 8\\n', '8\\n'), ('10 2\\n3 4\\n3 5\\n3 7\\n1 10\\n1 2\\n1 2\\n1 8\\n3 2\\n1 8\\n3 3\\n', '18\\n'), ('6 5\\n3 1\\n3 1\\n1 2\\n2 9\\n3 10\\n1 8\\n', '20\\n'), ('4 2\\n3 4\\n3 8\\n1 1\\n1 4\\n', '5\\n'), ('7 12\\n2 10\\n2 8\\n2 1\\n3 8\\n3 8\\n3 7\\n1 7\\n', '41\\n'), ('70 203\\n1 105\\n1 105\\n1 105\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n3 300\\n', '20310\\n'), ('10 6\\n1 8\\n1 10\\n1 7\\n2 9\\n3 8\\n1 8\\n1 7\\n1 4\\n3 1\\n3 8\\n', '44\\n'), ('2 40\\n1 10\\n3 6\\n', '16\\n'), ('7 6\\n2 9\\n3 10\\n1 2\\n2 6\\n3 6\\n2 1\\n1 3\\n', '22\\n'), ('2 4\\n3 8\\n1 6\\n', '14\\n'), ('9 19\\n2 5\\n2 3\\n3 9\\n1 9\\n3 8\\n3 5\\n3 4\\n3 2\\n3 6\\n', '46\\n'), ('13 23\\n3 17\\n2 83\\n1 81\\n3 83\\n3 59\\n3 71\\n2 61\\n3 8\\n3 64\\n2 80\\n3 47\\n1 46\\n1 82\\n', '711\\n'), ('9 10\\n3 6\\n2 1\\n2 4\\n2 3\\n3 6\\n3 1\\n1 8\\n2 4\\n3 3\\n', '25\\n'), ('3 4\\n2 10\\n2 10\\n3 15\\n', '20\\n'), ('9 15\\n3 8\\n1 2\\n2 5\\n1 5\\n3 3\\n1 7\\n1 7\\n2 7\\n2 9\\n', '51\\n'), ('8 21\\n2 6\\n3 3\\n3 7\\n3 8\\n3 8\\n3 8\\n2 6\\n3 9\\n', '52\\n'), ('6 7\\n2 5\\n2 4\\n3 9\\n3 2\\n3 1\\n3 8\\n', '18\\n'), ('8 5\\n3 9\\n3 3\\n1 4\\n3 1\\n2 5\\n3 1\\n3 6\\n3 1\\n', '14\\n'), ('1 1\\n1 10\\n', '10\\n'), ('1 2\\n2 10\\n', '10\\n'), ('5 9\\n2 8\\n3 7\\n2 6\\n1 4\\n2 7\\n', '28\\n'), ('4 4\\n2 13\\n2 15\\n2 5\\n1 9\\n', '28\\n'), ('2 1\\n1 5\\n2 11\\n', '5\\n'), ('8 6\\n1 9\\n1 5\\n1 3\\n1 10\\n3 8\\n1 6\\n1 4\\n1 2\\n', '37\\n'), ('5 7\\n1 8\\n2 13\\n2 13\\n3 20\\n3 14\\n', '46\\n'), ('52 102\\n3 199\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n2 100\\n', '5100\\n'), ('3 4\\n1 4\\n2 10\\n3 100\\n', '104\\n'), ('61 120\\n3 5\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n2 3\\n', '180\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Selling Souvenirs", "tag": "Greedy", "detailed_tag": "ternary search", "rating": 2300.0}
{"task_id": "E2H_CF409I", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('?(_-_/___*__):-___>__.\\n', '0010\\n'), ('?(__-_+_/_____):-__>__,_____<__.\\n', 'false\\n'), ('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n', '0250341\\n'), ('?(__+___+__-___):-___>__.\\n', '0101\\n'), ('?(__*___+_-____):-___>__,____<__.\\n', '1200\\n'), ('?(__):-__>__.\\n', 'false\\n'), ('?(__):-__>__,__<__.\\n', 'false\\n'), ('?(__-__):-__>__,__<__.\\n', 'false\\n'), ('?(__+__+___):-___<__.\\n', '110\\n'), ('?(_*__*___*____*_____*______*_______):-__<___,___<____,____<_____,_____<______,______<_______.\\n', '0012345\\n'), ('?(_*____*_______*__*_____*______*___):-__<___,___<____,____<_____,_____<______,______<_______.\\n', '0250341\\n'), ('?(_*__*___*____*_____*______*_______*________*_________*__________*___________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\\n', '00123456789\\n'), ('?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\\n', '001234567890\\n'), ('?(_*__*___*____*_____*______*_______*________*_________*__________*___________*____________):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________,___________<____________.\\n', 'false\\n'), ('?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__<___,___<____,____<_____,_____<______,______<_______,_______<________,________<_________,_________<__________,__________<___________.\\n', '098765432100\\n'), ('?(____________*___________*__________*_________*________*_______*______*_____*____*___*__*_):-__________<___________,______<_______,_______<________,________<_________,_________<__________,_____<______,____<_____,___<____,__<___.\\n', '098765432100\\n'), ('?(__________):-__________<__________.\\n', 'false\\n'), ('?(__________):-__________>__________.\\n', 'false\\n'), ('?(_____+___________+________+_________+_+______+___+__+_______+__________+____):-____<__________,________<_______,__________<_______,_____<___________,__<_,______<___________,___________<_________,_<_________,___<_______,_________<_______.\\n', '01021000310\\n'), ('?(_+__-___-____*_____):-__<___,__<____,___<_____,____<_____.\\n', '00112\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Feed the Golorp", "tag": "Others", "detailed_tag": "*special", "rating": 2400.0}
{"task_id": "E2H_CF151A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 4 5 10 8 100 3 1\\n', '2\\n'), ('5 100 10 1 19 90 4 3\\n', '3\\n'), ('10 1000 1000 25 23 1 50 1\\n', '0\\n'), ('1 7 4 5 5 8 3 2\\n', '4\\n'), ('2 3 3 5 5 10 1 3\\n', '1\\n'), ('2 6 4 5 6 5 1 3\\n', '0\\n'), ('1 7 3 5 3 6 2 1\\n', '6\\n'), ('2 4 5 4 5 7 3 2\\n', '1\\n'), ('2 3 6 5 7 8 2 1\\n', '4\\n'), ('1 4 5 5 3 10 3 1\\n', '6\\n'), ('1 4 6 7 3 5 1 3\\n', '1\\n'), ('1 6 5 5 5 8 3 1\\n', '8\\n'), ('1 7 5 3 3 9 2 1\\n', '9\\n'), ('3 5 3 7 6 10 3 1\\n', '1\\n'), ('3 6 3 5 3 6 3 1\\n', '2\\n'), ('1 7 5 5 5 5 2 2\\n', '2\\n'), ('2 5 3 5 6 9 2 1\\n', '3\\n'), ('3 4 3 5 3 6 2 1\\n', '2\\n'), ('1 5 5 4 7 6 3 1\\n', '6\\n'), ('2 3 7 6 5 9 3 1\\n', '3\\n'), ('2 6 5 3 3 8 1 1\\n', '4\\n'), ('2 4 7 3 4 10 2 1\\n', '5\\n'), ('1 1000 1000 1000 1000 1000 1 1\\n', '1000\\n'), ('17 1000 1000 1000 1000 1000 3 7\\n', '8\\n'), ('115 1000 1000 1000 1000 1000 17 15\\n', '0\\n'), ('1 587 981 1 2 1 1 1\\n', '1\\n'), ('1 1 2 1 2 2 1 1\\n', '2\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Soft Drinking", "tag": "Implement", "detailed_tag": "math", "rating": 791.2332548041397}
{"task_id": "E2H_CF339B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 3\\n3 2 3\\n', '6\\n'), ('4 3\\n2 3 3\\n', '2\\n'), ('2 2\\n1 1\\n', '0\\n'), ('2 2\\n1 2\\n', '1\\n'), ('100 100\\n56 46 1 47 5 86 45 35 81 1 31 70 67 70 62 99 100 47 44 33 78 35 32 37 92 12 95 18 3 22 54 24 22 90 25 22 78 88 51 92 46 84 15 29 28 40 8 5 93 68 77 47 45 76 85 39 84 94 52 69 93 64 31 60 99 17 51 59 62 37 46 47 86 60 88 14 68 22 47 93 50 10 55 87 46 50 43 63 44 43 61 65 91 43 33 97 67 57 66 70\\n', '4869\\n'), ('78 58\\n23 14 73 45 47 14 27 59 65 39 15 23 5 1 50 37 3 51 46 69 75 65 45 68 48 59 77 39 53 21 72 33 46 32 34 5 69 55 56 53 47 31 32 5 42 23 76 15 2 77 65 24 16 68 61 28 55 10\\n', '2505\\n'), ('14 54\\n9 13 14 9 5 12 4 7 3 14 5 12 13 1 1 11 10 2 7 9 5 2 2 8 10 7 3 9 5 11 2 2 6 12 11 5 4 11 11 6 2 11 14 13 8 7 13 9 4 9 11 3 7 13\\n', '362\\n'), ('100 100\\n48 73 63 16 49 88 36 17 66 6 87 13 94 52 58 70 71 52 7 70 25 42 24 36 57 9 79 26 75 39 13 14 38 26 33 66 88 28 75 98 53 48 67 54 63 25 69 87 88 32 72 17 36 35 29 67 74 89 70 47 20 90 78 13 94 57 32 73 29 74 45 78 85 64 81 56 12 65 19 67 34 86 55 71 41 33 76 13 100 47 44 76 86 78 37 15 26 98 83 98\\n', '4997\\n'), ('99 100\\n88 65 10 91 18 35 58 49 42 2 22 57 74 31 53 24 27 93 45 4 71 2 69 39 21 90 97 89 45 73 20 45 82 98 35 90 37 76 68 26 21 65 95 63 24 74 50 59 3 93 65 6 30 37 62 71 18 88 40 12 56 40 89 56 38 71 90 41 97 43 44 23 19 22 10 80 3 24 32 85 26 65 70 60 76 85 66 68 74 11 64 88 12 63 16 15 79 57 93 58\\n', '4809\\n'), ('65 100\\n53 14 5 10 32 60 31 52 52 56 38 6 8 17 52 23 59 3 18 28 15 2 46 26 8 2 40 6 58 30 28 46 49 23 47 24 9 53 3 47 55 12 36 49 12 24 54 55 58 7 50 42 15 4 58 49 34 40 19 4 59 19 31 17 35 65 36 50 45 5 33 11 29 52 55 40 48 11 32 41 31 7 46 55 32 41 56 51 39 13 5 59 58 34 38 50 55 10 43 30\\n', '3149\\n'), ('10 100\\n7 6 2 10 7 2 3 8 10 4 6 1 4 5 7 10 1 2 3 5 4 10 8 2 3 3 6 8 3 9 4 1 9 10 1 2 5 1 8 8 5 9 2 8 1 2 3 2 1 10 10 7 1 3 2 2 7 1 6 6 6 9 2 3 1 7 2 2 9 7 3 3 2 10 7 4 7 3 3 3 2 4 4 2 2 8 4 1 10 10 5 10 6 10 6 10 3 10 8 9\\n', '428\\n'), ('2 100\\n1 1 2 2 2 2 1 2 1 2 2 2 1 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 1 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 2 2 1 1 1 1 1 2 2 2 1 1 2 2 1 1 2 2 1 1 2 1 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 1 2\\n', '47\\n'), ('67 100\\n49 5 25 48 37 55 5 33 14 30 59 28 57 46 45 32 47 22 40 28 58 34 27 29 4 52 63 44 31 65 42 61 11 17 32 17 18 1 12 33 38 11 59 46 43 55 23 30 23 2 42 21 45 51 30 19 35 15 10 30 13 21 32 34 33 3 5 59 23 63 6 9 20 43 64 3 42 41 40 4 14 20 40 33 25 44 1 2 50 46 13 10 3 20 22 64 28 42 58 30\\n', '3245\\n'), ('100 100\\n81 62 26 90 7 87 60 35 75 81 54 94 53 71 64 80 58 83 53 70 40 96 87 50 37 63 5 77 83 75 53 28 22 98 52 45 72 70 62 21 1 99 37 93 16 98 68 27 96 37 21 83 92 23 62 96 85 31 85 66 38 77 45 16 90 86 6 21 75 42 18 60 2 17 51 61 94 68 97 79 17 59 66 14 87 78 70 40 63 78 58 22 87 7 90 17 20 97 9 31\\n', '5530\\n'), ('2 1\\n1\\n', '0\\n'), ('2 10\\n1 1 1 1 1 1 1 1 1 1\\n', '0\\n'), ('2 10\\n1 1 1 2 2 2 1 1 1 2\\n', '3\\n'), ('3 6\\n1 2 3 3 2 1\\n', '6\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Xenia and Ringroad", "tag": "Implement", "detailed_tag": "implementation", "rating": 937.7579723448481}
{"task_id": "E2H_CF88A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('C E G\\n', 'major\\n'), ('C# B F\\n', 'minor\\n'), ('A B H\\n', 'strange\\n'), ('G H E\\n', 'minor\\n'), ('D# B G\\n', 'major\\n'), ('D# B F#\\n', 'minor\\n'), ('F H E\\n', 'strange\\n'), ('B F# G\\n', 'strange\\n'), ('F# H C\\n', 'strange\\n'), ('C# F C\\n', 'strange\\n'), ('G# C# E\\n', 'minor\\n'), ('D# H G#\\n', 'minor\\n'), ('C F A\\n', 'major\\n'), ('H E G#\\n', 'major\\n'), ('G D# B\\n', 'major\\n'), ('E C G\\n', 'major\\n'), ('G# C# F\\n', 'major\\n'), ('D# C G#\\n', 'major\\n'), ('C# F B\\n', 'minor\\n'), ('D# C G\\n', 'minor\\n'), ('A D F\\n', 'minor\\n'), ('F# H D\\n', 'minor\\n'), ('D A F\\n', 'minor\\n'), ('D A F#\\n', 'major\\n'), ('A C F\\n', 'major\\n'), ('D F# H\\n', 'minor\\n'), ('H G# D#\\n', 'minor\\n'), ('A D F#\\n', 'major\\n'), ('D# H F#\\n', 'major\\n'), ('B G D#\\n', 'major\\n'), ('E A C#\\n', 'major\\n'), ('D H G\\n', 'major\\n'), ('H D F#\\n', 'minor\\n'), ('G D# C\\n', 'minor\\n'), ('H D G\\n', 'major\\n'), ('D# A E\\n', 'strange\\n'), ('A F E\\n', 'strange\\n'), ('C E F\\n', 'strange\\n'), ('A B C\\n', 'strange\\n'), ('E F D#\\n', 'strange\\n'), ('C G# G#\\n', 'strange\\n'), ('F D# G#\\n', 'strange\\n'), ('E E G#\\n', 'strange\\n'), ('A G H\\n', 'strange\\n'), ('F E A\\n', 'strange\\n'), ('D B E\\n', 'strange\\n'), ('G# C# D\\n', 'strange\\n'), ('D# D# F#\\n', 'strange\\n'), ('H B G\\n', 'strange\\n'), ('D C B\\n', 'strange\\n'), ('D B B\\n', 'strange\\n'), ('C A H\\n', 'strange\\n'), ('F# H F#\\n', 'strange\\n'), ('A F F#\\n', 'strange\\n'), ('C D C\\n', 'strange\\n'), ('G F# A\\n', 'strange\\n'), ('C C# D\\n', 'strange\\n'), ('C A E\\n', 'minor\\n'), ('A H B\\n', 'strange\\n'), ('B E F#\\n', 'strange\\n'), ('G# G# A\\n', 'strange\\n'), ('B C# C#\\n', 'strange\\n'), ('C G D#\\n', 'minor\\n'), ('C B D#\\n', 'strange\\n'), ('F H F\\n', 'strange\\n'), ('E G# C\\n', 'strange\\n'), ('F# F# F#\\n', 'strange\\n'), ('F C F\\n', 'strange\\n'), ('A F D\\n', 'minor\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Chord", "tag": "Implement", "detailed_tag": "brute force", "rating": 1167.5967947063134}
{"task_id": "E2H_CF633B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1\\n', '5\\n5 6 7 8 9 \\n'), ('5\\n', '0\\n'), ('2\\n', '5\\n10 11 12 13 14 \\n'), ('3\\n', '5\\n15 16 17 18 19 \\n'), ('7\\n', '5\\n30 31 32 33 34 \\n'), ('12\\n', '5\\n50 51 52 53 54 \\n'), ('15\\n', '5\\n65 66 67 68 69 \\n'), ('18\\n', '5\\n75 76 77 78 79 \\n'), ('38\\n', '5\\n155 156 157 158 159 \\n'), ('47\\n', '5\\n195 196 197 198 199 \\n'), ('58\\n', '5\\n240 241 242 243 244 \\n'), ('66\\n', '5\\n270 271 272 273 274 \\n'), ('70\\n', '5\\n285 286 287 288 289 \\n'), ('89\\n', '5\\n365 366 367 368 369 \\n'), ('417\\n', '5\\n1675 1676 1677 1678 1679 \\n'), ('815\\n', '5\\n3265 3266 3267 3268 3269 \\n'), ('394\\n', '5\\n1585 1586 1587 1588 1589 \\n'), ('798\\n', '0\\n'), ('507\\n', '5\\n2035 2036 2037 2038 2039 \\n'), ('406\\n', '5\\n1630 1631 1632 1633 1634 \\n'), ('570\\n', '5\\n2290 2291 2292 2293 2294 \\n'), ('185\\n', '0\\n'), ('765\\n', '0\\n'), ('967\\n', '0\\n'), ('112\\n', '5\\n455 456 457 458 459 \\n'), ('729\\n', '5\\n2925 2926 2927 2928 2929 \\n'), ('4604\\n', '5\\n18425 18426 18427 18428 18429 \\n'), ('8783\\n', '5\\n35140 35141 35142 35143 35144 \\n'), ('1059\\n', '0\\n'), ('6641\\n', '5\\n26575 26576 26577 26578 26579 \\n'), ('9353\\n', '5\\n37425 37426 37427 37428 37429 \\n'), ('1811\\n', '5\\n7250 7251 7252 7253 7254 \\n'), ('2528\\n', '0\\n'), ('8158\\n', '5\\n32640 32641 32642 32643 32644 \\n'), ('3014\\n', '5\\n12070 12071 12072 12073 12074 \\n'), ('7657\\n', '5\\n30640 30641 30642 30643 30644 \\n'), ('4934\\n', '0\\n'), ('9282\\n', '5\\n37140 37141 37142 37143 37144 \\n'), ('2610\\n', '5\\n10450 10451 10452 10453 10454 \\n'), ('2083\\n', '5\\n8345 8346 8347 8348 8349 \\n'), ('26151\\n', '5\\n104620 104621 104622 104623 104624 \\n'), ('64656\\n', '5\\n258640 258641 258642 258643 258644 \\n'), ('46668\\n', '5\\n186690 186691 186692 186693 186694 \\n'), ('95554\\n', '5\\n382235 382236 382237 382238 382239 \\n'), ('37320\\n', '0\\n'), ('52032\\n', '5\\n208140 208141 208142 208143 208144 \\n'), ('11024\\n', '5\\n44110 44111 44112 44113 44114 \\n'), ('63218\\n', '5\\n252885 252886 252887 252888 252889 \\n'), ('40095\\n', '5\\n160390 160391 160392 160393 160394 \\n'), ('42724\\n', '5\\n170910 170911 170912 170913 170914 \\n'), ('24381\\n', '5\\n97530 97531 97532 97533 97534 \\n'), ('73138\\n', '5\\n292570 292571 292572 292573 292574 \\n'), ('93346\\n', '5\\n373400 373401 373402 373403 373404 \\n'), ('18338\\n', '5\\n73370 73371 73372 73373 73374 \\n'), ('42662\\n', '5\\n170660 170661 170662 170663 170664 \\n'), ('81221\\n', '5\\n324900 324901 324902 324903 324904 \\n'), ('100000\\n', '5\\n400005 400006 400007 400008 400009 \\n'), ('99998\\n', '0\\n'), ('30\\n', '0\\n'), ('11\\n', '0\\n'), ('780\\n', '0\\n'), ('97656\\n', '5\\n390625 390626 390627 390628 390629 \\n'), ('12499\\n', '5\\n50000 50001 50002 50003 50004 \\n'), ('65\\n', '5\\n265 266 267 268 269 \\n'), ('41\\n', '5\\n170 171 172 173 174 \\n'), ('31\\n', '5\\n125 126 127 128 129 \\n'), ('86577\\n', '0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "A Trivial Problem", "tag": "Math", "detailed_tag": "number theory", "rating": 1261.5425423783356}
{"task_id": "E2H_CF1767D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3\\n101\\n', '4 5 6 7 \\n'), ('1\\n1\\n', '2 \\n'), ('2\\n01\\n', '2 3 \\n'), ('2\\n00\\n', '1 \\n'), ('1\\n0\\n', '1 \\n'), ('2\\n11\\n', '4 \\n'), ('3\\n000\\n', '1 \\n'), ('3\\n010\\n', '2 3 4 5 \\n'), ('3\\n111\\n', '8 \\n'), ('4\\n0000\\n', '1 \\n'), ('4\\n0100\\n', '2 3 4 5 6 7 8 9 \\n'), ('4\\n0110\\n', '4 5 6 7 8 9 10 11 12 13 \\n'), ('4\\n1011\\n', '8 9 10 11 12 13 14 15 \\n'), ('4\\n1111\\n', '16 \\n'), ('5\\n10110\\n', '8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \\n'), ('5\\n01100\\n', '4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \\n'), ('6\\n111000\\n', '8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \\n'), ('6\\n101111\\n', '32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \\n'), ('7\\n1011011\\n', '32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 \\n'), ('18\\n000000000000000000\\n', '1 \\n'), ('18\\n111111111111111111\\n', '262144 \\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Playoff", "tag": "Greedy", "detailed_tag": "combinatorics", "rating": 1501.2516597113815}
{"task_id": "E2H_CF498A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n', '2\\n'), ('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\\n', '2\\n'), ('841746 527518\\n595261 331297\\n10\\n-946901 129987 670374\\n-140388 -684770 309555\\n-302589 415564 -387435\\n-565799 -72069 -395358\\n-523453 -511446 854898\\n-846967 -749453 -341866\\n-622388 434663 264157\\n-638453 625357 344195\\n-255265 -676356 -772398\\n-824723 -319141 33585\\n', '0\\n'), ('454379 373644\\n-665078 -385892\\n2\\n-530 -468 -379786\\n-173 -275 -100376\\n', '2\\n'), ('841746 527518\\n595261 331297\\n10\\n936 -209 -790797\\n898 1240 -36994\\n759 285 -413562\\n174 323 34281\\n662 400 -284846\\n298 520 42086\\n-36 -27 12861\\n462 631 -22515\\n-499 1105 919372\\n582 1490 319884\\n', '0\\n'), ('-537 648838\\n227 -51454\\n1\\n678 0 235266\\n', '1\\n'), ('-940 -984641\\n403 -942522\\n2\\n530 0 -63600\\n-439 0 95263\\n', '2\\n'), ('-867 -465880\\n793 -581568\\n5\\n73 0 57743\\n-818 0 -635586\\n-804 0 -415668\\n-383 0 -52854\\n1258 0 155992\\n', '5\\n'), ('-632 -387435\\n942 798117\\n10\\n249 0 135705\\n536 0 271752\\n750 0 375750\\n799 0 -206142\\n1102 0 -437494\\n-453 0 197055\\n-581 0 260288\\n-322 0 161322\\n1317 0 -878439\\n-811 0 594463\\n', '10\\n'), ('527189 -306471\\n-998939 648838\\n1\\n-950717 -549267 -820616\\n', '1\\n'), ('454379 373644\\n-665078 -385892\\n2\\n-984641 503905 -909460\\n-767954 -468772 -942522\\n', '2\\n'), ('-589794 344286\\n532652 -230711\\n5\\n-2919 -179425 -546698\\n-465880 342737 794428\\n-230739 -687865 713836\\n-932054 513357 -97639\\n-559361 -75096 -581568\\n', '5\\n'), ('0 1\\n2 2\\n1\\n1 1 2\\n', '0\\n'), ('0 2\\n-2 0\\n2\\n2 3 -1\\n4 0 3\\n', '2\\n'), ('1 -4\\n1 5\\n1\\n0 1 0\\n', '1\\n'), ('1 0\\n2 0\\n1\\n1 0 0\\n', '0\\n'), ('0 0\\n0 2\\n4\\n1 0 1\\n1 0 -1\\n-2 0 1\\n0 1 -1\\n', '1\\n'), ('100000 100000\\n-100000 100000\\n1\\n10000 0 7\\n', '1\\n'), ('1 1\\n-1 -1\\n1\\n1 1 0\\n', '1\\n'), ('1 1\\n3 3\\n1\\n1 0 2\\n', '0\\n'), ('1 3\\n1 1\\n1\\n1 1 3\\n', '0\\n'), ('5 0\\n15 0\\n1\\n10 0 -100\\n', '1\\n'), ('3 4\\n2 6\\n1\\n0 -2 5\\n', '0\\n'), ('1 0\\n1 2\\n1\\n0 1 -1\\n', '1\\n'), ('0 0\\n0 2\\n1\\n0 1 -1\\n', '1\\n'), ('0 0\\n0 1\\n1\\n1 0 10000\\n', '0\\n'), ('0 0\\n0 1\\n1\\n0 2 2\\n', '0\\n'), ('10 18\\n10 0\\n2\\n1 -1 0\\n0 1 -5\\n', '2\\n'), ('10 10\\n8 8\\n1\\n1 1 19\\n', '0\\n'), ('0 1\\n1000000 1\\n1\\n1000000 1 0\\n', '0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Crazy Town", "tag": "Others", "detailed_tag": "geometry", "rating": 1682.0191836721199}
{"task_id": "E2H_CF1092C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n', 'SPPSPSPS\\n'), ('3\\na\\naa\\naa\\na\\n', 'PPSS\\n'), ('2\\na\\nc\\n', 'PS\\n'), ('2\\nz\\nz\\n', 'PS\\n'), ('5\\nba\\na\\nbaba\\na\\naba\\nabab\\nab\\naba\\n', 'SPSSPPPS\\n'), ('5\\nb\\nb\\nba\\nab\\nbab\\nbab\\nabab\\nbaba\\n', 'PSPSPSSP\\n'), ('5\\nc\\ncd\\ncdc\\ncdcc\\nb\\ncb\\nccb\\ndccb\\n', 'PPPPSSSS\\n'), ('3\\nba\\nab\\na\\na\\n', 'SPPS\\n'), ('3\\na\\nb\\naa\\nab\\n', 'PSPS\\n'), ('3\\na\\na\\nba\\nab\\n', 'PSSP\\n'), ('4\\nbab\\naba\\nab\\nab\\na\\nb\\n', 'SPPSPS\\n'), ('5\\nabab\\nbaba\\nb\\nb\\nbab\\nbab\\nba\\nab\\n', 'SPPSPSPS\\n'), ('4\\na\\nc\\nac\\nab\\naba\\nbac\\n', 'PSSPPS\\n'), ('4\\nb\\nbb\\nbba\\nbbb\\nba\\na\\n', 'PPSPSS\\n'), ('4\\nbab\\nab\\na\\nab\\naba\\nb\\n', 'SPPSPS\\n'), ('3\\nb\\nb\\nab\\nba\\n', 'PSSP\\n'), ('4\\nzn\\nz\\nn\\nnzn\\nzn\\nznz\\n', 'PPSSSP\\n'), ('5\\nbaba\\nabab\\na\\nab\\naba\\na\\nba\\naba\\n', 'SPPPPSSS\\n'), ('5\\nba\\na\\nbaba\\nabab\\na\\naba\\nab\\naba\\n', 'SPSPSPPS\\n'), ('4\\nab\\na\\nb\\nbab\\nab\\naba\\n', 'PPSSSP\\n'), ('5\\nh\\nhwh\\nwhwh\\nhw\\nh\\nwh\\nhwh\\nhwhw\\n', 'PPSPSSSP\\n'), ('5\\nba\\na\\na\\naba\\nbaba\\nab\\naba\\nabab\\n', 'SPSPSPSP\\n'), ('4\\naba\\na\\nba\\nb\\nba\\nbab\\n', 'SSPPSP\\n'), ('3\\nah\\nha\\nh\\nh\\n', 'SPPS\\n'), ('5\\nxy\\nyx\\nx\\nx\\nxyx\\nxyx\\nyxyx\\nxyxy\\n', 'PSPSPSSP\\n'), ('5\\nbaaa\\nbaa\\nba\\nb\\naaaa\\naaa\\naa\\na\\n', 'PPPPSSSS\\n'), ('4\\nb\\nab\\nbab\\na\\nab\\naba\\n', 'SPSPSP\\n'), ('5\\na\\na\\nab\\nba\\naba\\naba\\nbaba\\nabab\\n', 'PSPSPSSP\\n'), ('18\\nd\\nh\\ndj\\nxh\\ndjs\\njxh\\ndjsh\\nzjxh\\ndjshf\\nkzjxh\\ndjshfk\\nhkzjxh\\ndjshfkj\\nkhkzjxh\\ndjshfkje\\nskhkzjxh\\ndjshfkjeh\\ndskhkzjxh\\ndjshfkjehd\\nhdskhkzjxh\\ndjshfkjehds\\nehdskhkzjxh\\ndjshfkjehdsk\\njehdskhkzjxh\\ndjshfkjehdskh\\nkjehdskhkzjxh\\ndjshfkjehdskhk\\nfkjehdskhkzjxh\\ndjshfkjehdskhkz\\nhfkjehdskhkzjxh\\ndjshfkjehdskhkzj\\nshfkjehdskhkzjxh\\ndjshfkjehdskhkzjx\\njshfkjehdskhkzjxh\\n', 'PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\\n'), ('4\\nza\\na\\nz\\naza\\nza\\nzaz\\n', 'PSPSSP\\n'), ('3\\na\\nza\\naz\\na\\n', 'PSPS\\n'), ('8\\na\\nha\\naha\\nhaha\\nahaha\\nhahaha\\nahahaha\\nh\\nha\\nhah\\nhaha\\nhahah\\nhahaha\\nhahahah\\n', 'SPSPSPSPSPSPSP\\n'), ('4\\na\\nab\\nbab\\nb\\nab\\naba\\n', 'PPSSSP\\n'), ('4\\na\\nba\\naba\\nb\\nba\\nbab\\n', 'SPSPSP\\n'), ('4\\nc\\ncb\\nb\\nbcb\\ncb\\ncbc\\n', 'PPSSSP\\n'), ('4\\nb\\nbb\\nbbb\\na\\nba\\nbba\\n', 'PPPSSS\\n'), ('5\\na\\naa\\naaa\\naaaa\\nb\\nba\\nbaa\\nbaaa\\n', 'SSSSPPPP\\n'), ('4\\na\\nb\\nab\\nab\\nbab\\naba\\n', 'PSPSSP\\n'), ('3\\na\\naa\\nba\\nb\\n', 'SSPP\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Prefixes and Suffixes", "tag": "Others", "detailed_tag": "strings", "rating": 1735.111995064716}
{"task_id": "E2H_CF1146D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('7 5 3\\n', '19\\n'), ('1000000000 1 2019\\n', '500000001500000001\\n'), ('100 100000 1\\n', '101\\n'), ('6 4 5\\n', '10\\n'), ('172165 93846 84\\n', '1735345812\\n'), ('9978 99 98615\\n', '507929\\n'), ('9909 95875 20\\n', '9910\\n'), ('42651129 26190 16875\\n', '6737492081840\\n'), ('5 8253 91700\\n', '6\\n'), ('14712 8142 9912\\n', '21284\\n'), ('98898 1040 98615\\n', '4761309\\n'), ('79674 62280 77850\\n', '97070\\n'), ('78139 77688 1161\\n', '108424\\n'), ('110518 69352 81284\\n', '151686\\n'), ('881706694 5710 56529\\n', '680741853146475\\n'), ('863 99250 420\\n', '864\\n'), ('9112063 50688 2640\\n', '78628667728\\n'), ('236009692 89900 300\\n', '278502953469621\\n'), ('16145755 64220 70642\\n', '20303198570\\n'), ('997932 23910 14346\\n', '104545151\\n'), ('9907037 55440 88480\\n', '87620910296\\n'), ('9695 9 85014\\n', '5227761\\n'), ('99548 73888 32\\n', '69626827\\n'), ('9742365 6750 90375\\n', '126544822305\\n'), ('95544 17793 8856\\n', '157445948\\n'), ('2756 31707 63414\\n', '2757\\n'), ('936989 17028 92708\\n', '229896864\\n'), ('9650984 18601 2090\\n', '222830431513\\n'), ('26 92701 7\\n', '27\\n'), ('9980 78765 356\\n', '9981\\n'), ('10348323 355 83425\\n', '150833075049\\n'), ('952549276 31416 33000\\n', '1718466614644254\\n'), ('992869 410 9880\\n', '49284898280\\n'), ('96033 98622 100\\n', '96034\\n'), ('3 998 99486\\n', '4\\n'), ('10652698 87345 1116\\n', '6304015267729\\n'), ('303857 1990 4\\n', '23081582946\\n'), ('395013 59544 180\\n', '2117961170\\n'), ('1183 532 73416\\n', '1956\\n'), ('25 75060 2502\\n', '26\\n'), ('4987696 29388 29865\\n', '4145604588400\\n'), ('2531607 75419 14230\\n', '2250674901\\n'), ('4015 56658 19\\n', '4016\\n'), ('49277 166 8051\\n', '14453806\\n'), ('9984950 40800 1152\\n', '519262873734\\n'), ('1710 11868 202\\n', '1711\\n'), ('96974 1 99004\\n', '4702123800\\n'), ('995676200 30 99370\\n', '49568555030448651\\n'), ('983 97020 105\\n', '984\\n'), ('9331043 5355 81159\\n', '14510155272753\\n'), ('99005952 94024 10220\\n', '2397840434982\\n'), ('16965 51653 70\\n', '16966\\n'), ('997674659 8874 35496\\n', '56083140668646\\n'), ('1647861 97967 10\\n', '1352925986505\\n'), ('7526 35 7525\\n', '813132\\n'), ('68565 68564 1\\n', '205695\\n'), ('58200 198 58050\\n', '8583036\\n'), ('14332 13672 1976\\n', '18960\\n'), ('7957 18 7956\\n', '1763140\\n'), ('70343 66336 6910\\n', '110424\\n'), ('101407 95200 6448\\n', '377984\\n'), ('57986 4760 56440\\n', '395386\\n'), ('87728 689 87236\\n', '5657822\\n'), ('79903 75251 7234\\n', '150249\\n'), ('107132 20930 92956\\n', '353953\\n'), ('97009 97008 129\\n', '98514\\n'), ('96538 95880 900\\n', '243807\\n'), ('7845 4410 7350\\n', '11282\\n'), ('79873 13 79872\\n', '245419010\\n'), ('99573 99474 186\\n', '153074\\n'), ('112104 86760 69327\\n', '178619\\n'), ('76065 44280 39150\\n', '305610\\n'), ('58423 58422 9737\\n', '58436\\n'), ('22432 19298 5536\\n', '36753\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Frog Jumping", "tag": "Math", "detailed_tag": "number theory", "rating": 2046.9908687040668}
{"task_id": "E2H_CF980E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('6 3\\n2 1\\n2 6\\n4 2\\n5 6\\n2 3\\n', '1 3 4\\n'), ('8 4\\n2 6\\n2 7\\n7 8\\n1 2\\n3 1\\n2 4\\n7 5\\n', '1 3 4 5\\n'), ('2 1\\n1 2\\n', '1\\n'), ('3 1\\n2 1\\n2 3\\n', '1\\n'), ('3 2\\n1 3\\n1 2\\n', '1 2\\n'), ('4 2\\n4 2\\n1 4\\n3 2\\n', '1 3\\n'), ('15 3\\n9 11\\n11 8\\n7 9\\n9 14\\n12 8\\n10 7\\n1 14\\n1 5\\n12 15\\n10 3\\n5 2\\n13 15\\n4 13\\n6 4\\n', '1 2 5\\n'), ('15 12\\n2 3\\n2 14\\n4 3\\n4 10\\n3 5\\n1 4\\n1 12\\n4 15\\n3 9\\n10 7\\n11 2\\n12 8\\n15 13\\n1 6\\n', '1 2 3 5 6 7 8 9 10 11 12 14\\n'), ('32 16\\n32 8\\n11 32\\n22 8\\n22 17\\n22 3\\n16 22\\n8 12\\n22 7\\n8 27\\n11 6\\n32 4\\n9 8\\n10 22\\n22 31\\n1 22\\n21 11\\n22 15\\n14 32\\n32 30\\n22 29\\n24 11\\n18 11\\n25 32\\n13 8\\n2 32\\n28 8\\n32 5\\n11 20\\n11 19\\n22 23\\n26 32\\n', '1 2 3 4 5 6 7 9 10 12 13 14 15 16 17 18\\n'), ('32 1\\n30 25\\n30 8\\n8 22\\n22 20\\n21 20\\n6 21\\n29 6\\n4 29\\n2 4\\n13 2\\n1 13\\n1 11\\n11 24\\n31 24\\n31 15\\n15 14\\n27 14\\n16 27\\n5 16\\n12 5\\n9 12\\n9 18\\n3 18\\n3 17\\n17 19\\n19 32\\n32 10\\n10 26\\n7 26\\n7 23\\n23 28\\n', '25\\n'), ('32 2\\n7 20\\n15 20\\n7 18\\n31 20\\n28 15\\n20 25\\n27 31\\n27 6\\n27 12\\n6 16\\n22 6\\n21 22\\n13 6\\n16 5\\n23 5\\n23 26\\n23 24\\n23 17\\n24 14\\n17 4\\n29 4\\n2 24\\n30 29\\n1 29\\n8 4\\n30 32\\n11 2\\n32 3\\n1 9\\n11 10\\n19 32\\n', '3 8\\n'), ('64 46\\n52 22\\n38 52\\n28 38\\n46 38\\n30 38\\n30 37\\n7 37\\n37 48\\n48 27\\n2 7\\n27 11\\n32 2\\n32 35\\n8 11\\n59 32\\n58 59\\n59 24\\n58 40\\n40 4\\n40 49\\n40 41\\n49 16\\n9 16\\n5 9\\n12 9\\n9 62\\n3 62\\n12 63\\n63 25\\n64 63\\n63 42\\n36 42\\n45 36\\n14 45\\n53 45\\n39 53\\n60 39\\n50 39\\n50 23\\n23 10\\n19 50\\n20 10\\n19 56\\n21 56\\n31 56\\n44 31\\n26 31\\n1 31\\n43 44\\n15 26\\n15 6\\n6 29\\n47 6\\n18 6\\n29 55\\n18 54\\n33 54\\n61 55\\n54 17\\n61 34\\n13 17\\n17 51\\n57 34\\n', '1 2 3 4 5 6 7 8 10 11 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 43 44 46 47 48 51 52 54 55 56 57 61\\n'), ('64 63\\n11 51\\n64 11\\n64 39\\n11 6\\n24 64\\n51 63\\n43 51\\n64 29\\n6 22\\n47 6\\n1 47\\n41 22\\n41 38\\n4 47\\n35 47\\n41 23\\n45 1\\n52 35\\n26 45\\n15 35\\n21 35\\n23 32\\n12 21\\n21 62\\n25 21\\n28 25\\n15 54\\n57 12\\n20 28\\n48 57\\n8 57\\n20 44\\n46 28\\n18 57\\n8 9\\n27 9\\n48 34\\n50 46\\n9 56\\n9 61\\n7 56\\n19 61\\n61 17\\n42 17\\n19 58\\n58 30\\n7 14\\n7 59\\n31 19\\n17 5\\n55 14\\n13 31\\n2 31\\n59 40\\n55 49\\n2 60\\n2 53\\n36 2\\n37 13\\n2 16\\n53 33\\n37 10\\n60 3\\n', '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\\n'), ('64 21\\n33 48\\n33 64\\n55 48\\n11 55\\n18 11\\n62 55\\n48 57\\n17 62\\n64 52\\n30 48\\n49 48\\n23 18\\n13 11\\n9 64\\n11 5\\n11 45\\n2 55\\n62 56\\n64 36\\n33 10\\n34 18\\n55 43\\n3 48\\n60 62\\n48 32\\n33 8\\n62 41\\n44 11\\n33 46\\n15 33\\n14 62\\n11 6\\n64 31\\n62 20\\n64 25\\n62 51\\n53 33\\n62 40\\n18 4\\n16 62\\n21 11\\n33 22\\n37 33\\n59 62\\n55 7\\n27 64\\n24 64\\n39 64\\n19 62\\n54 55\\n33 61\\n47 48\\n58 55\\n42 55\\n38 11\\n50 18\\n28 48\\n11 26\\n11 1\\n62 35\\n64 29\\n12 33\\n18 63\\n', '1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 20 21 22 23\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "The Number Games", "tag": "Greedy", "detailed_tag": "trees", "rating": 2137.5488542407925}
{"task_id": "E2H_CF1709F", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 42 2\\n', '3\\n'), ('2 37 13\\n', '36871576\\n'), ('4 1252 325\\n', '861735572\\n'), ('6 153 23699\\n', '0\\n'), ('15 200000 198756\\n', '612404746\\n'), ('1 1 1\\n', '2\\n'), ('1 1 100000\\n', '0\\n'), ('1 1 200000\\n', '0\\n'), ('1 100000 1\\n', '2\\n'), ('1 100000 100000\\n', '100001\\n'), ('1 100000 200000\\n', '1\\n'), ('1 200000 1\\n', '2\\n'), ('1 200000 100000\\n', '100001\\n'), ('1 200000 200000\\n', '200001\\n'), ('7 1 1\\n', '10802803\\n'), ('7 1 100000\\n', '0\\n'), ('7 1 200000\\n', '0\\n'), ('7 100000 1\\n', '477825325\\n'), ('7 100000 100000\\n', '569581672\\n'), ('7 100000 200000\\n', '136436465\\n'), ('7 200000 1\\n', '90602327\\n'), ('7 200000 100000\\n', '331190498\\n'), ('7 200000 200000\\n', '343099201\\n'), ('15 1 1\\n', '240127335\\n'), ('15 1 100000\\n', '0\\n'), ('15 1 200000\\n', '0\\n'), ('15 100000 1\\n', '737847906\\n'), ('15 100000 100000\\n', '607648863\\n'), ('15 100000 200000\\n', '816613688\\n'), ('15 200000 1\\n', '836547474\\n'), ('15 200000 100000\\n', '63705590\\n'), ('15 200000 200000\\n', '894782321\\n'), ('15 199999 200000\\n', '437780341\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Multiset of Strings", "tag": "Math", "detailed_tag": "meet-in-the-middle", "rating": 2451.3353069734585}
{"task_id": "E2H_CF1152A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('5 4\\n9 14 6 2 11\\n8 4 7 20\\n', '3\\n'), ('5 1\\n2 4 6 8 10\\n5\\n', '1\\n'), ('1 4\\n10\\n20 30 40 50\\n', '0\\n'), ('27 9\\n72 105 100 105 110 103 32 109 101 115 115 97 103 101 115 32 105 110 32 116 101 115 116 99 97 115 101\\n83 110 101 97 107 32 49 48 48\\n', '9\\n'), ('3 10\\n107 117 110\\n71 114 101 101 110 71 114 97 112 101\\n', '3\\n'), ('7 4\\n116 111 117 114 105 115 116\\n112 101 116 114\\n', '4\\n'), ('10 10\\n522312461 931001459 598654597 488228616 544064902 21923894 329635457 980089248 988262691 654502493\\n967529230 543358150 835120075 128123793 809901567 613170206 152157661 479980560 859252956 318029856\\n', '10\\n'), ('1 10\\n1\\n1 2 3 4 5 6 7 8 9 10\\n', '1\\n'), ('5 1\\n1 2 3 4 5\\n1\\n', '1\\n'), ('7 4\\n2 2 1 1 1 1 1\\n2 2 2 1\\n', '4\\n'), ('4 1\\n1 1 1 2\\n2\\n', '1\\n'), ('4 1\\n3 5 7 8\\n2\\n', '1\\n'), ('5 2\\n1 2 2 2 2\\n1 1\\n', '2\\n'), ('4 2\\n3 2 1 4\\n2 3\\n', '2\\n'), ('2 4\\n1 2\\n1 1 2 2\\n', '2\\n'), ('4 1\\n2 2 3 3\\n2\\n', '1\\n'), ('5 1\\n2 2 2 3 3\\n3\\n', '1\\n'), ('4 1\\n1 1 2 2\\n2\\n', '1\\n'), ('1 5\\n3\\n3 4 4 4 4\\n', '1\\n'), ('6 4\\n2 4 6 1 3 5\\n8 10 7 9\\n', '4\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Neko Finds Grapes", "tag": "Implement", "detailed_tag": "math", "rating": 744.582366273932}
{"task_id": "E2H_CF152A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3\\n223\\n232\\n112\\n', '2\\n'), ('3 5\\n91728\\n11828\\n11111\\n', '3\\n'), ('2 2\\n48\\n27\\n', '1\\n'), ('2 1\\n4\\n6\\n', '1\\n'), ('1 2\\n57\\n', '1\\n'), ('1 1\\n5\\n', '1\\n'), ('3 4\\n2553\\n6856\\n5133\\n', '2\\n'), ('8 7\\n6264676\\n7854895\\n3244128\\n2465944\\n8958761\\n1378945\\n3859353\\n6615285\\n', '6\\n'), ('9 8\\n61531121\\n43529859\\n18841327\\n88683622\\n98995641\\n62741632\\n57441743\\n49396792\\n63381994\\n', '4\\n'), ('10 20\\n26855662887514171367\\n48525577498621511535\\n47683778377545341138\\n47331616748732562762\\n44876938191354974293\\n24577238399664382695\\n42724955594463126746\\n79187344479926159359\\n48349683283914388185\\n82157191115518781898\\n', '9\\n'), ('20 15\\n471187383859588\\n652657222494199\\n245695867594992\\n726154672861295\\n614617827782772\\n862889444974692\\n373977167653235\\n645434268565473\\n785993468314573\\n722176861496755\\n518276853323939\\n723712762593348\\n728935312568886\\n373898548522463\\n769777587165681\\n247592995114377\\n182375946483965\\n497496542536127\\n988239919677856\\n859844339819143\\n', '18\\n'), ('13 9\\n514562255\\n322655246\\n135162979\\n733845982\\n473117129\\n513967187\\n965649829\\n799122777\\n661249521\\n298618978\\n659352422\\n747778378\\n723261619\\n', '11\\n'), ('75 1\\n2\\n3\\n8\\n3\\n2\\n1\\n3\\n1\\n5\\n1\\n5\\n4\\n8\\n8\\n4\\n2\\n5\\n1\\n7\\n6\\n3\\n2\\n2\\n3\\n5\\n5\\n2\\n4\\n7\\n7\\n9\\n2\\n9\\n5\\n1\\n4\\n9\\n5\\n2\\n4\\n6\\n6\\n3\\n3\\n9\\n3\\n3\\n2\\n3\\n4\\n2\\n6\\n9\\n1\\n1\\n1\\n1\\n7\\n2\\n3\\n2\\n9\\n7\\n4\\n9\\n1\\n7\\n5\\n6\\n8\\n3\\n4\\n3\\n4\\n6\\n', '7\\n'), ('92 3\\n418\\n665\\n861\\n766\\n529\\n416\\n476\\n676\\n561\\n995\\n415\\n185\\n291\\n176\\n776\\n631\\n556\\n488\\n118\\n188\\n437\\n496\\n466\\n131\\n914\\n118\\n766\\n365\\n113\\n897\\n386\\n639\\n276\\n946\\n759\\n169\\n494\\n837\\n338\\n351\\n783\\n311\\n261\\n862\\n598\\n132\\n246\\n982\\n575\\n364\\n615\\n347\\n374\\n368\\n523\\n132\\n774\\n161\\n552\\n492\\n598\\n474\\n639\\n681\\n635\\n342\\n516\\n483\\n141\\n197\\n571\\n336\\n175\\n596\\n481\\n327\\n841\\n133\\n142\\n146\\n246\\n396\\n287\\n582\\n556\\n996\\n479\\n814\\n497\\n363\\n963\\n162\\n', '23\\n'), ('100 1\\n1\\n6\\n9\\n1\\n1\\n5\\n5\\n4\\n6\\n9\\n6\\n1\\n7\\n8\\n7\\n3\\n8\\n8\\n7\\n6\\n2\\n1\\n5\\n8\\n7\\n3\\n5\\n4\\n9\\n7\\n1\\n2\\n4\\n1\\n6\\n5\\n1\\n3\\n9\\n4\\n5\\n8\\n1\\n2\\n1\\n9\\n7\\n3\\n7\\n1\\n2\\n2\\n2\\n2\\n3\\n9\\n7\\n2\\n4\\n7\\n1\\n6\\n8\\n1\\n5\\n6\\n1\\n1\\n2\\n9\\n7\\n4\\n9\\n1\\n9\\n4\\n1\\n3\\n5\\n2\\n4\\n4\\n6\\n5\\n1\\n4\\n5\\n8\\n4\\n7\\n6\\n5\\n6\\n9\\n5\\n8\\n1\\n5\\n1\\n6\\n', '10\\n'), ('100 2\\n71\\n87\\n99\\n47\\n22\\n87\\n49\\n73\\n21\\n12\\n77\\n43\\n18\\n41\\n78\\n62\\n61\\n16\\n64\\n89\\n81\\n54\\n53\\n92\\n93\\n94\\n68\\n93\\n15\\n68\\n42\\n93\\n28\\n19\\n86\\n16\\n97\\n17\\n11\\n43\\n72\\n76\\n54\\n95\\n58\\n53\\n48\\n45\\n85\\n85\\n74\\n21\\n44\\n51\\n89\\n75\\n76\\n17\\n38\\n62\\n81\\n22\\n66\\n59\\n89\\n85\\n91\\n87\\n12\\n97\\n52\\n87\\n43\\n89\\n51\\n58\\n57\\n98\\n78\\n68\\n82\\n41\\n87\\n29\\n75\\n72\\n48\\n14\\n35\\n71\\n74\\n91\\n66\\n67\\n42\\n98\\n52\\n54\\n22\\n41\\n', '21\\n'), ('5 20\\n11111111111111111111\\n11111111111111111111\\n11111111111111111111\\n99999999999999999999\\n11111111111111111119\\n', '2\\n'), ('3 3\\n111\\n111\\n999\\n', '1\\n'), ('3 3\\n119\\n181\\n711\\n', '3\\n'), ('15 5\\n91728\\n11828\\n11111\\n91728\\n11828\\n11111\\n91728\\n11828\\n11111\\n91728\\n11828\\n11111\\n91728\\n11828\\n11111\\n', '15\\n'), ('2 20\\n22222222222222222222\\n11111111111111111111\\n', '1\\n'), ('3 3\\n233\\n222\\n111\\n', '2\\n'), ('4 15\\n222222222222222\\n111111111111119\\n111111111111119\\n111111111111111\\n', '3\\n'), ('4 1\\n1\\n9\\n9\\n9\\n', '3\\n'), ('3 3\\n123\\n321\\n132\\n', '3\\n'), ('3 3\\n113\\n332\\n322\\n', '3\\n'), ('2 100\\n2222222222222222222222222222222222222222222222222222222222222222222222221222222222222222222222222222\\n1111111111111111111111111111111111111111111111111111111111111111111111119111111111111111111111111111\\n', '2\\n'), ('3 3\\n321\\n231\\n123\\n', '3\\n'), ('2 100\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\\n', '1\\n'), ('3 3\\n221\\n111\\n111\\n', '3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Marks", "tag": "Implement", "detailed_tag": "implementation", "rating": 904.831282170035}
{"task_id": "E2H_CF1191B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1s 2s 3s\\n', '0\\n'), ('9m 9m 9m\\n', '0\\n'), ('3p 9m 2p\\n', '1\\n'), ('8p 2s 9m\\n', '2\\n'), ('5s 8m 5s\\n', '1\\n'), ('9s 4s 3m\\n', '2\\n'), ('4p 8m 9s\\n', '2\\n'), ('8s 5s 7p\\n', '2\\n'), ('4p 7p 2p\\n', '1\\n'), ('3p 2p 3p\\n', '1\\n'), ('5s 9p 5s\\n', '1\\n'), ('9m 6s 1p\\n', '2\\n'), ('4m 2p 8m\\n', '2\\n'), ('8p 6s 4p\\n', '2\\n'), ('9s 6m 7p\\n', '2\\n'), ('4m 1p 3m\\n', '1\\n'), ('8s 8m 1p\\n', '2\\n'), ('5m 3p 8m\\n', '2\\n'), ('9m 7p 4s\\n', '2\\n'), ('4p 4s 2m\\n', '2\\n'), ('8p 8m 7s\\n', '2\\n'), ('5p 4s 5p\\n', '1\\n'), ('9s 1m 1s\\n', '2\\n'), ('4s 5s 8p\\n', '1\\n'), ('2p 8p 8p\\n', '1\\n'), ('7m 3m 6m\\n', '1\\n'), ('8p 5m 9m\\n', '2\\n'), ('3p 9p 5s\\n', '2\\n'), ('7s 6s 3m\\n', '1\\n'), ('4s 1p 8s\\n', '2\\n'), ('8m 5s 6p\\n', '2\\n'), ('3m 3p 4s\\n', '2\\n'), ('7m 7m 9p\\n', '1\\n'), ('5p 1s 1m\\n', '2\\n'), ('9p 5m 8s\\n', '2\\n'), ('6s 9s 4p\\n', '2\\n'), ('1s 6m 2s\\n', '1\\n'), ('5m 2p 7p\\n', '2\\n'), ('2m 6p 5m\\n', '2\\n'), ('6p 3s 1p\\n', '2\\n'), ('1m 7p 8m\\n', '2\\n'), ('5m 4s 6s\\n', '1\\n'), ('2p 9m 2m\\n', '2\\n'), ('7s 2s 3m\\n', '2\\n'), ('4m 7p 1s\\n', '2\\n'), ('8m 2m 6p\\n', '2\\n'), ('3p 8p 4s\\n', '2\\n'), ('7p 3m 9p\\n', '1\\n'), ('4p 7p 7m\\n', '2\\n'), ('8p 5s 5p\\n', '2\\n'), ('3p 9p 1m\\n', '2\\n'), ('7s 6s 8s\\n', '0\\n'), ('4s 1p 4m\\n', '2\\n'), ('3p 2m 4m\\n', '1\\n'), ('7p 8s 2s\\n', '2\\n'), ('2p 4m 7p\\n', '2\\n'), ('6s 1s 5s\\n', '1\\n'), ('3s 5m 1p\\n', '2\\n'), ('7s 9p 8m\\n', '2\\n'), ('2s 6m 6s\\n', '2\\n'), ('6m 2s 2m\\n', '2\\n'), ('3m 6p 9s\\n', '2\\n'), ('7m 3s 5p\\n', '2\\n'), ('5s 4p 6m\\n', '2\\n'), ('9s 1s 4p\\n', '2\\n'), ('4m 5s 9m\\n', '2\\n'), ('8s 3m 7s\\n', '1\\n'), ('5m 7p 5m\\n', '1\\n'), ('9m 2m 1s\\n', '2\\n'), ('4m 8p 8p\\n', '1\\n'), ('1p 3m 4s\\n', '2\\n'), ('5p 8p 2p\\n', '2\\n'), ('9s 5s 7m\\n', '2\\n'), ('7m 6s 8m\\n', '1\\n'), ('2p 3m 6p\\n', '2\\n'), ('6m 7s 2m\\n', '2\\n'), ('3m 2m 9s\\n', '1\\n'), ('7p 9s 7m\\n', '2\\n'), ('3p 4m 3s\\n', '2\\n'), ('7s 1p 1p\\n', '1\\n'), ('4s 5m 6s\\n', '1\\n'), ('8m 9s 4p\\n', '2\\n'), ('3m 7p 9m\\n', '2\\n'), ('1p 8s 9m\\n', '2\\n'), ('5p 5p 7s\\n', '1\\n'), ('2p 9s 5m\\n', '2\\n'), ('6s 4p 1s\\n', '2\\n'), ('1s 1m 8p\\n', '2\\n'), ('5s 6p 4s\\n', '1\\n'), ('2m 1m 2p\\n', '1\\n'), ('6m 7p 7m\\n', '1\\n'), ('1p 2m 5p\\n', '2\\n'), ('5m 8p 3m\\n', '1\\n'), ('3s 9p 2s\\n', '1\\n'), ('7s 7s 9p\\n', '1\\n'), ('4s 2p 7s\\n', '2\\n'), ('8m 6s 3p\\n', '2\\n'), ('3m 3m 1m\\n', '1\\n'), ('9p 7s 6p\\n', '2\\n'), ('4p 3m 4m\\n', '1\\n'), ('8p 9s 9s\\n', '1\\n'), ('3p 4m 7m\\n', '2\\n'), ('9p 1p 5s\\n', '2\\n'), ('9p 2p 1p\\n', '1\\n'), ('2p 2p 2p\\n', '0\\n'), ('6s 6s 6s\\n', '0\\n'), ('2p 4p 3p\\n', '0\\n'), ('7p 8p 6p\\n', '0\\n'), ('3m 5m 4m\\n', '0\\n'), ('9s 7s 8s\\n', '0\\n'), ('3p 9p 4m\\n', '2\\n'), ('7m 2m 3m\\n', '1\\n'), ('3p 5p 9p\\n', '1\\n'), ('2p 5p 9p\\n', '2\\n'), ('4s 5s 2s\\n', '1\\n'), ('8s 9s 5s\\n', '1\\n'), ('9p 6p 1p\\n', '2\\n'), ('1s 4s 3s\\n', '1\\n'), ('3p 9p 2p\\n', '1\\n'), ('9s 1s 3s\\n', '1\\n'), ('4p 7p 7p\\n', '1\\n'), ('5m 3m 5m\\n', '1\\n'), ('5m 5m 8m\\n', '1\\n'), ('5p 6p 5p\\n', '1\\n'), ('8m 8m 6m\\n', '1\\n'), ('9p 2p 9p\\n', '1\\n'), ('8s 9s 8s\\n', '1\\n'), ('9m 1m 1m\\n', '1\\n'), ('7m 4m 9p\\n', '2\\n'), ('7p 5p 5m\\n', '1\\n'), ('5m 3m 9p\\n', '1\\n'), ('6p 8p 6s\\n', '1\\n'), ('2p 4m 2m\\n', '1\\n'), ('8s 2m 6s\\n', '1\\n'), ('6s 1p 8s\\n', '1\\n'), ('7m 7s 1s\\n', '2\\n'), ('2p 8s 2s\\n', '2\\n'), ('4s 1m 1s\\n', '2\\n'), ('2s 3m 3s\\n', '1\\n'), ('2s 2p 3s\\n', '1\\n'), ('2s 8p 3s\\n', '1\\n'), ('3m 3p 1p\\n', '1\\n'), ('3p 1p 2m\\n', '1\\n'), ('7s 9m 9s\\n', '1\\n'), ('1p 9s 7s\\n', '1\\n'), ('1m 2p 8m\\n', '2\\n'), ('8p 1m 1p\\n', '2\\n'), ('9m 8m 2p\\n', '1\\n'), ('9m 8s 9s\\n', '1\\n'), ('2m 9s 1m\\n', '1\\n'), ('1m 8s 9m\\n', '2\\n'), ('7p 7p 7m\\n', '1\\n'), ('2s 2p 2p\\n', '1\\n'), ('2s 8p 2s\\n', '1\\n'), ('8p 8p 1m\\n', '1\\n'), ('9p 9m 9m\\n', '1\\n'), ('1p 9m 1p\\n', '1\\n'), ('7p 7m 7s\\n', '2\\n'), ('8m 2s 7p\\n', '2\\n'), ('2m 2s 2p\\n', '2\\n'), ('2s 8p 2m\\n', '2\\n'), ('1p 1m 1s\\n', '2\\n'), ('1p 1m 9s\\n', '2\\n'), ('4m 7m 6m\\n', '1\\n'), ('1s 2s 3p\\n', '1\\n'), ('9s 9s 9s\\n', '0\\n'), ('1s 3s 9m\\n', '1\\n'), ('1s 1s 7s\\n', '1\\n'), ('5m 6m 7s\\n', '1\\n'), ('1s 2s 5s\\n', '1\\n'), ('1s 2p 3s\\n', '1\\n'), ('2s 4s 6s\\n', '1\\n'), ('1s 4s 7s\\n', '2\\n'), ('1m 5m 9m\\n', '2\\n'), ('9m 1m 2m\\n', '1\\n'), ('1p 2s 4s\\n', '1\\n'), ('3m 4p 5s\\n', '2\\n'), ('1m 3m 1s\\n', '1\\n'), ('1s 3s 2p\\n', '1\\n'), ('2p 3s 4p\\n', '1\\n'), ('7s 8s 9s\\n', '0\\n'), ('1m 4m 7m\\n', '2\\n'), ('1s 2s 4s\\n', '1\\n'), ('3s 4m 4s\\n', '1\\n'), ('1s 2m 3p\\n', '2\\n'), ('1s 2p 4p\\n', '1\\n'), ('1p 8s 9s\\n', '1\\n'), ('1m 1m 2m\\n', '1\\n'), ('1s 2s 3m\\n', '1\\n'), ('1s 3s 5s\\n', '1\\n'), ('3m 6m 7m\\n', '1\\n'), ('1s 2p 3m\\n', '2\\n'), ('8m 7s 9s\\n', '1\\n'), ('1s 3s 2s\\n', '0\\n'), ('3s 5s 7s\\n', '1\\n'), ('6s 4s 3s\\n', '1\\n'), ('4m 7s 5s\\n', '1\\n'), ('1s 3s 4s\\n', '1\\n'), ('3s 5s 1s\\n', '1\\n'), ('1p 5p 9p\\n', '2\\n'), ('1p 2p 4p\\n', '1\\n'), ('1s 1p 1p\\n', '1\\n'), ('1m 1s 2m\\n', '1\\n'), ('1p 2s 3m\\n', '2\\n'), ('1m 3m 5m\\n', '1\\n'), ('1m 1p 1s\\n', '2\\n'), ('5m 5p 6m\\n', '1\\n'), ('6p 8s 9s\\n', '1\\n'), ('9s 1s 2m\\n', '2\\n'), ('1s 3s 5p\\n', '1\\n'), ('1s 8m 9m\\n', '1\\n'), ('1m 2p 3s\\n', '2\\n'), ('1p 8m 9m\\n', '1\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Tokitsukaze and Mahjong", "tag": "Implement", "detailed_tag": "brute force", "rating": 1192.4235980898434}
{"task_id": "E2H_CF915B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('6 3 2 4\\n', '5\\n'), ('6 3 1 3\\n', '1\\n'), ('5 2 1 5\\n', '0\\n'), ('100 1 1 99\\n', '99\\n'), ('100 50 1 99\\n', '50\\n'), ('100 99 1 99\\n', '1\\n'), ('100 100 1 99\\n', '2\\n'), ('100 50 2 100\\n', '49\\n'), ('100 1 100 100\\n', '100\\n'), ('100 50 50 50\\n', '2\\n'), ('6 4 2 5\\n', '6\\n'), ('100 5 2 50\\n', '53\\n'), ('10 7 3 9\\n', '10\\n'), ('7 4 2 5\\n', '6\\n'), ('43 16 2 18\\n', '20\\n'), ('100 50 2 51\\n', '52\\n'), ('6 5 2 4\\n', '5\\n'), ('10 5 2 7\\n', '9\\n'), ('10 10 2 9\\n', '10\\n'), ('10 7 3 7\\n', '6\\n'), ('64 64 8 44\\n', '58\\n'), ('5 4 2 4\\n', '4\\n'), ('6 6 3 5\\n', '5\\n'), ('10 6 2 7\\n', '8\\n'), ('8 6 2 7\\n', '8\\n'), ('7 5 2 4\\n', '5\\n'), ('7 5 2 6\\n', '7\\n'), ('100 50 49 99\\n', '53\\n'), ('100 50 2 99\\n', '147\\n'), ('10 9 2 9\\n', '9\\n'), ('10 10 7 9\\n', '5\\n'), ('8 4 2 7\\n', '9\\n'), ('100 50 2 2\\n', '50\\n'), ('10 4 3 7\\n', '7\\n'), ('6 3 2 5\\n', '6\\n'), ('53 17 13 18\\n', '8\\n'), ('10 6 3 6\\n', '5\\n'), ('9 8 2 5\\n', '8\\n'), ('100 50 2 3\\n', '50\\n'), ('10 7 2 9\\n', '11\\n'), ('6 1 2 5\\n', '6\\n'), ('7 6 2 4\\n', '6\\n'), ('26 12 2 4\\n', '12\\n'), ('10 8 3 7\\n', '7\\n'), ('100 97 3 98\\n', '98\\n'), ('6 2 2 4\\n', '4\\n'), ('9 2 4 6\\n', '6\\n'), ('6 6 2 4\\n', '6\\n'), ('50 2 25 49\\n', '49\\n'), ('5 5 2 3\\n', '5\\n'), ('49 11 2 17\\n', '23\\n'), ('10 3 2 9\\n', '10\\n'), ('10 6 3 7\\n', '7\\n'), ('6 1 5 5\\n', '6\\n'), ('5 5 3 4\\n', '4\\n'), ('10 2 5 6\\n', '6\\n'), ('7 7 3 4\\n', '6\\n'), ('7 3 2 3\\n', '3\\n'), ('5 1 2 4\\n', '5\\n'), ('100 53 2 99\\n', '145\\n'), ('10 2 4 7\\n', '7\\n'), ('5 2 1 4\\n', '3\\n'), ('100 65 41 84\\n', '64\\n'), ('33 20 7 17\\n', '15\\n'), ('7 2 3 6\\n', '6\\n'), ('77 64 10 65\\n', '58\\n'), ('6 1 3 4\\n', '5\\n'), ('6 4 2 4\\n', '4\\n'), ('11 8 2 10\\n', '12\\n'), ('7 1 3 6\\n', '7\\n'), ('100 50 2 50\\n', '50\\n'), ('50 49 5 8\\n', '46\\n'), ('15 1 10 13\\n', '14\\n'), ('13 9 5 11\\n', '10\\n'), ('20 3 5 8\\n', '7\\n'), ('10 5 2 3\\n', '5\\n'), ('7 1 3 5\\n', '6\\n'), ('7 2 3 4\\n', '4\\n'), ('10 5 2 5\\n', '5\\n'), ('8 5 2 6\\n', '7\\n'), ('8 5 3 6\\n', '6\\n'), ('9 6 3 7\\n', '7\\n'), ('50 46 34 37\\n', '14\\n'), ('10 7 2 8\\n', '9\\n'), ('8 3 1 4\\n', '2\\n'), ('100 3 10 20\\n', '19\\n'), ('6 2 1 5\\n', '4\\n'), ('12 11 5 10\\n', '8\\n'), ('98 97 72 83\\n', '27\\n'), ('100 5 3 98\\n', '99\\n'), ('8 5 2 7\\n', '9\\n'), ('10 10 4 6\\n', '8\\n'), ('10 4 2 5\\n', '6\\n'), ('3 3 2 3\\n', '2\\n'), ('75 30 6 33\\n', '32\\n'), ('4 3 2 3\\n', '3\\n'), ('2 2 1 1\\n', '2\\n'), ('2 2 1 2\\n', '0\\n'), ('1 1 1 1\\n', '0\\n'), ('20 9 7 17\\n', '14\\n'), ('10 2 3 7\\n', '7\\n'), ('100 40 30 80\\n', '62\\n'), ('10 6 2 3\\n', '6\\n'), ('7 3 2 5\\n', '6\\n'), ('10 6 2 9\\n', '12\\n'), ('23 20 19 22\\n', '6\\n'), ('100 100 1 1\\n', '100\\n'), ('10 2 5 9\\n', '9\\n'), ('9 7 2 8\\n', '9\\n'), ('100 50 50 100\\n', '1\\n'), ('3 1 2 2\\n', '3\\n'), ('16 13 2 15\\n', '17\\n'), ('9 8 2 6\\n', '8\\n'), ('43 22 9 24\\n', '19\\n'), ('5 4 2 3\\n', '4\\n'), ('82 72 66 75\\n', '14\\n'), ('7 4 5 6\\n', '4\\n'), ('100 50 51 51\\n', '3\\n'), ('6 5 2 6\\n', '4\\n'), ('4 4 2 2\\n', '4\\n'), ('4 3 2 4\\n', '2\\n'), ('2 2 2 2\\n', '1\\n'), ('6 1 2 4\\n', '5\\n'), ('2 1 1 1\\n', '1\\n'), ('4 2 2 3\\n', '3\\n'), ('2 1 1 2\\n', '0\\n'), ('5 4 1 2\\n', '3\\n'), ('100 100 2 99\\n', '100\\n'), ('10 6 3 4\\n', '5\\n'), ('100 74 30 60\\n', '46\\n'), ('4 1 2 3\\n', '4\\n'), ('100 50 3 79\\n', '107\\n'), ('10 6 2 8\\n', '10\\n'), ('100 51 23 33\\n', '30\\n'), ('3 1 2 3\\n', '2\\n'), ('29 13 14 23\\n', '12\\n'), ('6 5 2 5\\n', '5\\n'), ('10 2 3 5\\n', '5\\n'), ('9 3 1 6\\n', '4\\n'), ('45 33 23 37\\n', '20\\n'), ('100 99 1 98\\n', '2\\n'), ('100 79 29 68\\n', '52\\n'), ('7 7 6 6\\n', '3\\n'), ('100 4 30 60\\n', '58\\n'), ('100 33 50 50\\n', '19\\n'), ('50 2 34 37\\n', '37\\n'), ('100 70 2 99\\n', '128\\n'), ('6 6 4 4\\n', '4\\n'), ('41 24 14 19\\n', '12\\n'), ('100 54 52 55\\n', '6\\n'), ('10 5 3 6\\n', '6\\n'), ('6 5 4 6\\n', '2\\n'), ('10 9 2 3\\n', '9\\n'), ('6 4 2 3\\n', '4\\n'), ('100 68 5 49\\n', '65\\n'), ('8 4 3 6\\n', '6\\n'), ('9 3 2 8\\n', '9\\n'), ('100 50 1 1\\n', '50\\n'), ('10 9 5 9\\n', '6\\n'), ('62 54 2 54\\n', '54\\n'), ('100 54 30 60\\n', '38\\n'), ('6 6 6 6\\n', '1\\n'), ('10 2 2 9\\n', '9\\n'), ('50 3 23 25\\n', '24\\n'), ('24 1 5 18\\n', '19\\n'), ('43 35 23 34\\n', '14\\n'), ('50 46 23 26\\n', '25\\n'), ('10 8 5 9\\n', '7\\n'), ('6 2 2 5\\n', '5\\n'), ('43 1 13 41\\n', '42\\n'), ('13 2 1 5\\n', '4\\n'), ('6 3 3 5\\n', '4\\n'), ('14 10 4 12\\n', '12\\n'), ('5 1 4 4\\n', '5\\n'), ('3 3 1 1\\n', '3\\n'), ('17 17 12 14\\n', '7\\n'), ('20 15 6 7\\n', '11\\n'), ('86 36 8 70\\n', '92\\n'), ('100 69 39 58\\n', '32\\n'), ('3 3 2 2\\n', '3\\n'), ('3 2 1 1\\n', '2\\n'), ('9 7 3 8\\n', '8\\n'), ('4 4 2 3\\n', '4\\n'), ('100 4 2 5\\n', '6\\n'), ('100 65 5 13\\n', '62\\n'), ('3 2 2 3\\n', '1\\n'), ('44 38 20 28\\n', '20\\n'), ('100 65 58 60\\n', '9\\n'), ('16 12 8 13\\n', '8\\n'), ('11 8 4 9\\n', '8\\n'), ('20 9 2 10\\n', '11\\n'), ('5 5 4 5\\n', '2\\n'), ('100 99 1 50\\n', '50\\n'), ('6 5 3 5\\n', '4\\n'), ('50 29 7 48\\n', '62\\n'), ('26 11 1 24\\n', '14\\n'), ('5 2 3 4\\n', '4\\n'), ('100 1 2 3\\n', '4\\n'), ('100 60 27 56\\n', '35\\n'), ('6 4 2 6\\n', '3\\n'), ('8 7 3 5\\n', '6\\n'), ('4 1 3 3\\n', '4\\n'), ('12 9 2 10\\n', '11\\n'), ('100 25 9 19\\n', '18\\n'), ('10 7 3 8\\n', '8\\n'), ('7 3 2 6\\n', '7\\n'), ('100 39 4 40\\n', '39\\n'), ('100 51 2 99\\n', '147\\n'), ('15 6 4 10\\n', '10\\n'), ('10 4 4 9\\n', '7\\n'), ('6 4 3 4\\n', '3\\n'), ('14 7 4 12\\n', '13\\n'), ('4 4 1 2\\n', '3\\n'), ('6 5 2 3\\n', '5\\n'), ('12 12 5 5\\n', '9\\n'), ('10 5 3 5\\n', '4\\n'), ('8 6 2 2\\n', '6\\n'), ('8 7 2 7\\n', '7\\n'), ('100 33 5 60\\n', '84\\n'), ('100 32 5 60\\n', '84\\n'), ('79 5 3 5\\n', '4\\n'), ('85 85 85 85\\n', '1\\n'), ('69 69 69 69\\n', '1\\n'), ('7 5 3 6\\n', '6\\n'), ('7 4 2 6\\n', '8\\n'), ('2 1 2 2\\n', '2\\n'), ('100 2 1 90\\n', '89\\n'), ('100 89 11 90\\n', '82\\n'), ('10 1 2 8\\n', '9\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Browser", "tag": "Implement", "detailed_tag": "implementation", "rating": 1335.6440185389342}
{"task_id": "E2H_CF646B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('abrakadabrabrakadabra\\n', 'YES\\nabrakadabra\\n'), ('acacacaca\\n', 'YES\\nacaca\\n'), ('abcabc\\n', 'NO\\n'), ('abababab\\n', 'YES\\nababab\\n'), ('tatbt\\n', 'NO\\n'), ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n', 'YES\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n'), ('r\\n', 'NO\\n'), ('zaz\\n', 'NO\\n'), ('zaza\\n', 'NO\\n'), ('gg\\n', 'NO\\n'), ('gagaga\\n', 'YES\\ngaga\\n'), ('hhhh\\n', 'YES\\nhhh\\n'), ('sssss\\n', 'YES\\nsss\\n'), ('nxnxnx\\n', 'YES\\nnxnx\\n'), ('vygvygv\\n', 'YES\\nvygv\\n'), ('rlrlrlrl\\n', 'YES\\nrlrlrl\\n'), ('zyzyzyzyz\\n', 'YES\\nzyzyz\\n'), ('jjjjjjjjjj\\n', 'YES\\njjjjjj\\n'), ('kkhuskkhusk\\n', 'YES\\nkkhusk\\n'), ('gzgzgzgzgzgz\\n', 'YES\\ngzgzgzgz\\n'), ('vkyxvkyxvkyxv\\n', 'YES\\nvkyxvkyxv\\n'), ('uuuuuuuuuuuuuu\\n', 'YES\\nuuuuuuuu\\n'), ('esxwpesxwpesxwp\\n', 'YES\\nesxwpesxwp\\n'), ('qltrajqltrajqltr\\n', 'YES\\nqltrajqltr\\n'), ('alxalxalxalxalxal\\n', 'YES\\nalxalxalxal\\n'), ('ijtojrijtojrijtojr\\n', 'YES\\nijtojrijtojr\\n'), ('yhbhamyhbhamyhbhamy\\n', 'YES\\nyhbhamyhbhamy\\n'), ('cdrcuccdrcuccdrcuccd\\n', 'YES\\ncdrcuccdrcuccd\\n'), ('ddoaxeaddoaxeaddoaxea\\n', 'YES\\nddoaxeaddoaxea\\n'), ('ejfrayejfrayejfrayejfr\\n', 'YES\\nejfrayejfrayejfr\\n'), ('oxciazoxciazoxciazoxcia\\n', 'YES\\noxciazoxciazoxcia\\n'), ('zfusxizfusxizfusxizfusxi\\n', 'YES\\nzfusxizfusxizfusxi\\n'), ('kqkqkqkqkqkqkqkqkqkqkqkqk\\n', 'YES\\nkqkqkqkqkqkqk\\n'), ('mrmrmrmrmrmrmrmrmrmrmrmrmr\\n', 'YES\\nmrmrmrmrmrmrmr\\n'), ('wnwnwnwnwnwnwnwnwnwnwnwnwnw\\n', 'YES\\nwnwnwnwnwnwnwnw\\n'), ('zchvhrmcrzchvhrmcrzchvhrmcrz\\n', 'YES\\nzchvhrmcrzchvhrmcrz\\n'), ('hngryskhngryskhngryskhngryskh\\n', 'YES\\nhngryskhngryskh\\n'), ('papapapapapapapapapapapapapapa\\n', 'YES\\npapapapapapapapa\\n'), ('qqgedqkewrelydzqqgedqkewrelydzq\\n', 'YES\\nqqgedqkewrelydzq\\n'), ('mtphoncwmtphoncwmtphoncwmtphoncw\\n', 'YES\\nmtphoncwmtphoncwmtphoncw\\n'), ('sypfetgsuhifxzsypfetgsuhifxzsypfe\\n', 'YES\\nsypfetgsuhifxzsypfe\\n'), ('avhiggygrtudeavhiggygrtudeavhiggyg\\n', 'YES\\navhiggygrtudeavhiggyg\\n'), ('hphhiattwnahphhiattwnahphhiattwnahp\\n', 'YES\\nhphhiattwnahphhiattwnahp\\n'), ('lpuilpuilpuilpuilpuilpuilpuilpuilpui\\n', 'YES\\nlpuilpuilpuilpuilpui\\n'), ('bbztwlxbocpbbztwlxbocpbbztwlxbocpbbzt\\n', 'YES\\nbbztwlxbocpbbztwlxbocpbbzt\\n'), ('dvdvdvdvdvdvdvdvdvdvdvdvdvdvdvdvdvdvdv\\n', 'YES\\ndvdvdvdvdvdvdvdvdvdv\\n'), ('mnvkmnvkmnvkmnvkmnvkmnvkmnvkmnvkmnvkmnv\\n', 'YES\\nmnvkmnvkmnvkmnvkmnvkmnv\\n'), ('ugugugugugugugugugugugugugugugugugugugug\\n', 'YES\\nugugugugugugugugugugug\\n'), ('nyilpgayabfzpqifnyilpgayabfzpqifnyilpgaya\\n', 'YES\\nnyilpgayabfzpqifnyilpgaya\\n'), ('awxmegcmrkzawxmegcmrkzawxmegcmrkzawxmegcmr\\n', 'YES\\nawxmegcmrkzawxmegcmrkzawxmegcmr\\n'), ('ugduygugduygugduygugduygugduygugduygugduygu\\n', 'YES\\nugduygugduygugduygugduygu\\n'), ('dkwelorlspdltsdkwelorlspdltsdkwelorlspdltsdk\\n', 'YES\\ndkwelorlspdltsdkwelorlspdltsdk\\n'), ('xwyxssvcedrwtpgxwyxssvcedrwtpgxwyxssvcedrwtpg\\n', 'YES\\nxwyxssvcedrwtpgxwyxssvcedrwtpg\\n'), ('pwjkpwjkpwjkpwjkpwjkpwjkpwjkpwjkpwjkpwjkpwjkpw\\n', 'YES\\npwjkpwjkpwjkpwjkpwjkpwjkpw\\n'), ('vxumrzwwzrzzfuvxumrzwwzrzzfuvxumrzwwzrzzfuvxumr\\n', 'YES\\nvxumrzwwzrzzfuvxumrzwwzrzzfuvxumr\\n'), ('kkkkrhhkkkkrhhkkkkrhhkkkkrhhkkkkrhhkkkkrhhkkkkrh\\n', 'YES\\nkkkkrhhkkkkrhhkkkkrhhkkkkrh\\n'), ('lfbpinxnjsfvjsfbshblyvlfbpinxnjsfvjsfbshblyvlfbpi\\n', 'YES\\nlfbpinxnjsfvjsfbshblyvlfbpi\\n'), ('sqdrmjqbfbmjmqfbcemrjtsqdrmjqbfbmjmqfbcemrjtsqdrmj\\n', 'YES\\nsqdrmjqbfbmjmqfbcemrjtsqdrmj\\n'), ('eeaiaeeaiaeeaiaeeaiaeeaiaeeaiaeeaiaeeaiaeeaiaeeaiae\\n', 'YES\\neeaiaeeaiaeeaiaeeaiaeeaiae\\n'), ('fhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfhfh\\n', 'YES\\nfhfhfhfhfhfhfhfhfhfhfhfhfhfh\\n'), ('ouygsznbnotbouygsznbnotbouygsznbnotbouygsznbnotbouygs\\n', 'YES\\nouygsznbnotbouygsznbnotbouygs\\n'), ('wtqqagwaguqgaffuqgqtwtwawtqqagwaguqgaffuqgqtwtwawtqqag\\n', 'YES\\nwtqqagwaguqgaffuqgqtwtwawtqqag\\n'), ('sogoiyexpwmpaixsogoiyexpwmpaixsogoiyexpwmpaixsogoiyexpw\\n', 'YES\\nsogoiyexpwmpaixsogoiyexpwmpaixsogoiyexpw\\n'), ('vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\\n', 'YES\\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\\n'), ('hlyjflfbvbtvtqtsjklkfsbqthvshlyjflfbvbtvtqtsjklkfsbqthvsh\\n', 'YES\\nhlyjflfbvbtvtqtsjklkfsbqthvsh\\n'), ('mlymfzfkmkfjomlymfzfkmkfjomlymfzfkmkfjomlymfzfkmkfjomlymfz\\n', 'YES\\nmlymfzfkmkfjomlymfzfkmkfjomlymfz\\n'), ('swylxswylxswylxswylxswylxswylxswylxswylxswylxswylxswylxswyl\\n', 'YES\\nswylxswylxswylxswylxswylxswylxswyl\\n'), ('cifcifcifcifcifcifcifcifcifcifcifcifcifcifcifcifcifcifcifcif\\n', 'YES\\ncifcifcifcifcifcifcifcifcifcifcif\\n'), ('lvifmwwfkvewsezsufghillvifmwwfkvewsezsufghillvifmwwfkvewsezsu\\n', 'YES\\nlvifmwwfkvewsezsufghillvifmwwfkvewsezsu\\n'), ('mhgbtgdmhgbtgdmhgbtgdmhgbtgdmhgbtgdmhgbtgdmhgbtgdmhgbtgdmhgbtg\\n', 'YES\\nmhgbtgdmhgbtgdmhgbtgdmhgbtgdmhgbtg\\n'), ('szfsdufuduiofckbszfsdufuduiofckbszfsdufuduiofckbszfsdufuduiofck\\n', 'YES\\nszfsdufuduiofckbszfsdufuduiofckbszfsdufuduiofck\\n'), ('ceypvrszdqljkzezlcceypvrszdqljkzezlcceypvrszdqljkzezlcceypvrszdq\\n', 'YES\\nceypvrszdqljkzezlcceypvrszdqljkzezlcceypvrszdq\\n'), ('ojmtpzmojamdjydojmtpzmojamdjydojmtpzmojamdjydojmtpzmojamdjydojmtp\\n', 'YES\\nojmtpzmojamdjydojmtpzmojamdjydojmtp\\n'), ('uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\\n', 'YES\\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\\n'), ('uhkuqbhrhlqjhgbshsvtqouquhkuqbhrhlqjhgbshsvtqouquhkuqbhrhlqjhgbshsv\\n', 'YES\\nuhkuqbhrhlqjhgbshsvtqouquhkuqbhrhlqjhgbshsv\\n'), ('xcgtgdpomjvngwdtrvrttldigxcgtgdpomjvngwdtrvrttldigxcgtgdpomjvngwdtrv\\n', 'YES\\nxcgtgdpomjvngwdtrvrttldigxcgtgdpomjvngwdtrv\\n'), ('vuuovdvktdjvuaafiguzdrrtratjyvuuovdvktdjvuaafiguzdrrtratjyvuuovdvktdj\\n', 'YES\\nvuuovdvktdjvuaafiguzdrrtratjyvuuovdvktdj\\n'), ('yukcccrccccyukcccrccccyukcccrccccyukcccrccccyukcccrccccyukcccrccccyukc\\n', 'YES\\nyukcccrccccyukcccrccccyukcccrccccyukc\\n'), ('rrriiiiaaainnrrrainniiarirrriiiiaaainnrrrainniiarirrriiiiaaainnrrrainni\\n', 'YES\\nrrriiiiaaainnrrrainniiarirrriiiiaaainnrrrainni\\n'), ('xmxxumdfubrcsbccxmxxumdfubrcsbccxmxxumdfubrcsbccxmxxumdfubrcsbccxmxxumdf\\n', 'YES\\nxmxxumdfubrcsbccxmxxumdfubrcsbccxmxxumdf\\n'), ('xovouvxuxtcvvovpxnhruswcphrstctxovouvxuxtcvvovpxnhruswcphrstctxovouvxuxtc\\n', 'YES\\nxovouvxuxtcvvovpxnhruswcphrstctxovouvxuxtc\\n'), ('howwwscoebckiatfzarhowwwscoebckiatfzarhowwwscoebckiatfzarhowwwscoebckiatfz\\n', 'YES\\nhowwwscoebckiatfzarhowwwscoebckiatfzarhowwwscoebckiatfz\\n'), ('ickpakvkbaljifqdifjfcdxpashuickpakvkbaljifqdifjfcdxpashuickpakvkbaljifqdifj\\n', 'YES\\nickpakvkbaljifqdifjfcdxpashuickpakvkbaljifqdifj\\n'), ('zgzwgwggzggwzzwwwhzgzgzwgwggzggwzzwwwhzgzgzwgwggzggwzzwwwhzgzgzwgwggzggwzzww\\n', 'YES\\nzgzwgwggzggwzzwwwhzgzgzwgwggzggwzzwwwhzgzgzwgwggzggwzzww\\n'), ('ppdbpyheotppdbpyheotppdbpyheotppdbpyheotppdbpyheotppdbpyheotppdbpyheotppdbpyh\\n', 'YES\\nppdbpyheotppdbpyheotppdbpyheotppdbpyheotppdbpyh\\n'), ('itlmmmqfkflfamdaqekrjlocitlmmmqfkflfamdaqekrjlocitlmmmqfkflfamdaqekrjlocitlmmm\\n', 'YES\\nitlmmmqfkflfamdaqekrjlocitlmmmqfkflfamdaqekrjlocitlmmm\\n'), ('yqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqy\\n', 'YES\\nyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqy\\n'), ('ijdghvidfbqqpajplojvtlppdiftzvhuqatijdghvidfbqqpajplojvtlppdiftzvhuqatijdghvidfb\\n', 'YES\\nijdghvidfbqqpajplojvtlppdiftzvhuqatijdghvidfb\\n'), ('jozbicochmmtmmhogkgrfutknpjozbicochmmtmmhogkgrfutknpjozbicochmmtmmhogkgrfutknpjoz\\n', 'YES\\njozbicochmmtmmhogkgrfutknpjozbicochmmtmmhogkgrfutknpjoz\\n'), ('tvsyxhopzmbebwoimyxhjbjuyszplhhggftvsyxhopzmbebwoimyxhjbjuyszplhhggftvsyxhopzmbebw\\n', 'YES\\ntvsyxhopzmbebwoimyxhjbjuyszplhhggftvsyxhopzmbebw\\n'), ('kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\\n', 'YES\\nkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\\n'), ('zyqxlypnlpavjxuydvxcnnzszyqxlypnlpavjxuydvxcnnzszyqxlypnlpavjxuydvxcnnzszyqxlypnlpav\\n', 'YES\\nzyqxlypnlpavjxuydvxcnnzszyqxlypnlpavjxuydvxcnnzszyqxlypnlpav\\n'), ('irlgpgsejirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlg\\n', 'YES\\nirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlgpgsejirlg\\n'), ('hththththththththththththththththththththththththththththththththththththththththththt\\n', 'YES\\nhthththththththththththththththththththththt\\n'), ('wlladflfanfmlljbbldamdjabtfbnftawbfnllfjwlladflfanfmlljbbldamdjabtfbnftawbfnllfjwlladfl\\n', 'YES\\nwlladflfanfmlljbbldamdjabtfbnftawbfnllfjwlladfl\\n'), ('frxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxa\\n', 'YES\\nfrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxafrxa\\n'), ('uzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbif\\n', 'YES\\nuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbifcuzdcgbif\\n'), ('dzpttoozpoqsjywqnzokdzpttoozpoqsjywqnzokdzpttoozpoqsjywqnzokdzpttoozpoqsjywqnzokdzpttoozpo\\n', 'YES\\ndzpttoozpoqsjywqnzokdzpttoozpoqsjywqnzokdzpttoozpo\\n'), ('avqriqniaavqriqniaavqriqniaavqriqniaavqriqniaavqriqniaavqriqniaavqriqniaavqriqniaavqriqniaa\\n', 'YES\\navqriqniaavqriqniaavqriqniaavqriqniaavqriqniaa\\n'), ('qqpppqqpqqqqqpqqpqpqqqpqpqqqqqqqpppqqpqqqqqpqqpqpqqqpqpqqqqqqqpppqqpqqqqqpqqpqpqqqpqpqqqqqqq\\n', 'YES\\nqqpppqqpqqqqqpqqpqpqqqpqpqqqqqqqpppqqpqqqqqpqqpqpqqqpqpqqqqqqq\\n'), ('mnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmn\\n', 'YES\\nmnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmnmxvxqrfnjxnmn\\n'), ('qzcgreoroxoxqzwvvoeiggriwrzotcxizqzcgreoroxoxqzwvvoeiggriwrzotcxizqzcgreoroxoxqzwvvoeiggriwrzo\\n', 'YES\\nqzcgreoroxoxqzwvvoeiggriwrzotcxizqzcgreoroxoxqzwvvoeiggriwrzo\\n'), ('pymvkuoucpujkekgnjrvnkrvodtszsbkmoabtlgdbpymvkuoucpujkekgnjrvnkrvodtszsbkmoabtlgdbpymvkuoucpujk\\n', 'YES\\npymvkuoucpujkekgnjrvnkrvodtszsbkmoabtlgdbpymvkuoucpujk\\n'), ('yguclskcmiuobsgckhotgkzqykebvttqaqmtzsyguclskcmiuobsgckhotgkzqykebvttqaqmtzsyguclskcmiuobsgckhot\\n', 'YES\\nyguclskcmiuobsgckhotgkzqykebvttqaqmtzsyguclskcmiuobsgckhot\\n'), ('kowiovfyffitkipvmccesjhatgyqaekowiovfyffitkipvmccesjhatgyqaekowiovfyffitkipvmccesjhatgyqaekowiovf\\n', 'YES\\nkowiovfyffitkipvmccesjhatgyqaekowiovfyffitkipvmccesjhatgyqaekowiovf\\n'), ('mrjdrepsprwlwwjewemrjdrepsprwlwwjewemrjdrepsprwlwwjewemrjdrepsprwlwwjewemrjdrepsprwlwwjewemrjdreps\\n', 'YES\\nmrjdrepsprwlwwjewemrjdrepsprwlwwjewemrjdrepsprwlwwjewemrjdreps\\n'), ('hgxenqnawiyiirinhraywlhgxenqnawiyiirinhraywlhgxenqnawiyiirinhraywlhgxenqnawiyiirinhraywlhgxenqnawiy\\n', 'YES\\nhgxenqnawiyiirinhraywlhgxenqnawiyiirinhraywlhgxenqnawiy\\n'), ('foxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfo\\n', 'YES\\nfoxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfoxywhckxuiipgfo\\n'), ('bkwdegdnxtnvtczozttjitzmfienbtxhoipldptluxbtvhmybkwdegdnxtnvtczozttjitzmfienbtxhoipldptluxbtvhmybkwd\\n', 'YES\\nbkwdegdnxtnvtczozttjitzmfienbtxhoipldptluxbtvhmybkwd\\n'), ('cftorbxtglokyoxsemzlysptutvldtlzqbhawyecivljlcftorbxtglokyoxsemzlysptutvldtlzqbhawyecivljlcftorbxtgl\\n', 'YES\\ncftorbxtglokyoxsemzlysptutvldtlzqbhawyecivljlcftorbxtgl\\n'), ('twfflboprkkjobbgoubmybfkbmmconrjhsktwfflboprkkjobbgoubmybfkbmmconrjhsktwfflboprkkjobbgoubmybfkbmmcon\\n', 'YES\\ntwfflboprkkjobbgoubmybfkbmmconrjhsktwfflboprkkjobbgoubmybfkbmmcon\\n'), ('wajaubjjlsvvatkrwphykszmkwajaubjjlsvvatkrwphykszmkwajaubjjlsvvatkrwphykszmkwajaubjjlsvvatkrwphykszmk\\n', 'YES\\nwajaubjjlsvvatkrwphykszmkwajaubjjlsvvatkrwphykszmkwajaubjjlsvvatkrwphykszmk\\n'), ('pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp\\n', 'YES\\nppppppppppppppppppppppppppppppppppppppppppppppppppp\\n'), ('axquczgfdshcpqjcqaxquczgfdshcpqjcqaxquczgfdshcpqjcqaxquczxfdshcpqjcqaxquczgfdshcpqjcqaxquc\\n', 'NO\\n'), ('vyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvyhsqvvshsqvvyhsqvv\\n', 'NO\\n'), ('bpqxbraxrcxwdoftbpqxbraxryxwdoftbpqxbraxrcxwdoftbpqxbraxrcxwdoftbpqxbraxrcxwdoftbpqxbraxrcxw\\n', 'NO\\n'), ('renpsuotrenpsuotrenpsuotrenpsuotrenpsuotrenpsuoprenpsuotrenpsuotrenpsuotrenpsuotrenpsuotrenps\\n', 'NO\\n'), ('qqeemdmddqddkmudbmaabaedquqmqqdqqqeemdmddqddkmudbmaabaedquqmqqdqqqeemdmddqddkmudbmaabaedquqmqq\\n', 'YES\\nqqeemdmddqddkmudbmaabaedquqmqqdqqqeemdmddqddkmudbmaabaedquqmqq\\n'), ('gfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpis\\n', 'YES\\ngfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpiskgfpis\\n'), ('nnsssnnngsbnngnsnnbgbgnbnbnnsssnnngsbnngnsnnbgbgnbnbnnsssnnngsbnngnbnnbgbgnbnbnnsssnnngsbnngnsnn\\n', 'NO\\n'), ('qimxxxojmmjqmxqfxfqiximjxqimxxxojqmjqmxqfxfqiximjxqimxxxojmmjqmxqfxfqiximjxqimxxxojmmjqmxqfxfqixi\\n', 'NO\\n'), ('otjwmbgahamrbbhnttmoqahohbhbjxwkbtotjwmbgahamrbbhnttmoqahohbhyjxwkbtotjwmbgahamrbbhnttmoqahohbhbjx\\n', 'NO\\n'), ('hligdsxyzyjejeskxapshligdsxyzyjejeskxapshligdsxyzyjejeskxapshligdsxyzyjejeskxapshligdsxyzljejeskxap\\n', 'NO\\n'), ('ooogesrsajsnzroyhabbckrnovooogesrsajsnzroyhabbckrnovooogesrsajsnzroyhabbckrnovooogesrsajsnzroyhadbck\\n', 'NO\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Ошибка передачи сообщения", "tag": "Others", "detailed_tag": "strings", "rating": 1500.0}
{"task_id": "E2H_CF1355C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 2 3 4\\n', '4\\n'), ('1 2 2 5\\n', '3\\n'), ('500000 500000 500000 500000\\n', '1\\n'), ('276 391 634 932\\n', '5866404\\n'), ('32 89 451 476\\n', '72384\\n'), ('312 691 867 992\\n', '8474760\\n'), ('13754 30499 132047 401293\\n', '4295124366365\\n'), ('52918 172310 225167 298306\\n', '397906079342811\\n'), ('89222 306288 442497 458131\\n', '438635064141040\\n'), ('86565 229134 356183 486713\\n', '1559833368660730\\n'), ('80020 194147 335677 436452\\n', '974333728068282\\n'), ('90528 225462 336895 417903\\n', '1043176084391535\\n'), ('3949 230053 337437 388426\\n', '826068482390575\\n'), ('63151 245667 252249 435270\\n', '169962000619247\\n'), ('463 530 612 812\\n', '1134444\\n'), ('88 234 815 988\\n', '2011556\\n'), ('109 231 723 880\\n', '1797811\\n'), ('122 463 520 815\\n', '4668275\\n'), ('405 482 518 655\\n', '398268\\n'), ('415 444 528 752\\n', '573750\\n'), ('42836 121845 280122 303179\\n', '129006192414960\\n'), ('191506 257482 315945 323783\\n', '30237212652192\\n'), ('328832 330884 422047 474939\\n', '9899437588956\\n'), ('178561 294901 405737 476436\\n', '911664147520700\\n'), ('145490 215252 362118 413147\\n', '498858571439550\\n'), ('108250 240141 260320 431968\\n', '402022838779580\\n'), ('40985 162395 266475 383821\\n', '654034248054490\\n'), ('32657 98147 172979 236416\\n', '142690459036843\\n'), ('28508 214073 305306 433805\\n', '1217846737624056\\n'), ('81611 179342 254258 490454\\n', '681061759774514\\n'), ('98317 181655 318381 472773\\n', '822189244343120\\n'), ('106173 201433 251411 417903\\n', '606180076029686\\n'), ('114522 154763 252840 441243\\n', '337866564805104\\n'), ('69790 139527 310648 398855\\n', '373542325400089\\n'), ('10642 150931 318327 428217\\n', '561328081816185\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Count Triangles", "tag": "Math", "detailed_tag": "two pointers", "rating": 1656.93798579217}
{"task_id": "E2H_CF934C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4\\n1 2 1 2\\n', '4\\n'), ('10\\n1 1 2 2 2 1 1 2 2 1\\n', '9\\n'), ('200\\n2 1 1 2 1 2 2 2 2 2 1 2 2 1 1 2 2 1 1 1 2 1 1 2 2 2 2 2 1 1 2 1 2 1 1 2 1 1 1 1 2 1 2 2 1 2 1 1 1 2 1 1 1 2 2 2 1 1 1 1 2 2 2 1 2 2 2 1 2 2 2 1 2 1 2 1 2 1 1 1 1 2 2 2 1 1 2 1 2 1 2 1 2 2 1 1 1 2 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 1 2 2 2 1 2 1 2 1 2 1 2 2 2 1 2 2 2 1 1 1 1 2 1 2 1 1 1 2 1 2 2 2 1 2 1 1 1 1 1 1 2 1 1 2 2 2 1 2 1 1 1 1 2 2 1 2 1 2 1 2 1 2 1 2 2 1 1 1 1 2 2 1 1 2 2 1 2 2 1 2 2 2\\n', '116\\n'), ('200\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n', '200\\n'), ('1\\n2\\n', '1\\n'), ('2\\n1 2\\n', '2\\n'), ('2\\n2 1\\n', '2\\n'), ('3\\n2 1 2\\n', '3\\n'), ('3\\n1 2 1\\n', '3\\n'), ('100\\n1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 2 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n', '89\\n'), ('100\\n1 2 1 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 2 2 1 1 1 1 1 2 1 1 2 2 2 2 1 1 2 2 2 1 2 1 2 1 2 1 2 2 1 2 2 1 2 1 2 2 1 2 1 1 2 2 1 2 2 1 1 1 1 2 2 1 2 2 1 1 1 1 1 1 1 2 2 2 1 1 2 2 1 2 2 1 1 1 2 2 1 1 1 1\\n', '60\\n'), ('100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 1 1 1 1 1 2 2\\n', '91\\n'), ('100\\n2 2 2 2 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 2 1 1 1 1 2 1 1 1 2 1 2 1 2 2 2 2 2 1 1 1 1 2 1 1 2 1 1 2 2 1 1 1 1 2 1 1 2 2 2 2 1 1 1 2 1 1 1 2 2 1 1 2 1 2 2 2 1 1 2 2 1 1 2 2 1 1 1 2 2 1 1 2 2 2 1 1 1 2 2\\n', '63\\n'), ('200\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2\\n', '187\\n'), ('200\\n1 2 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 2 2 1 1 1 1 1 2 1 1 1 1 2 1 2 1 1 1 2 1 2 1 1 2 2 2 2 2 1 2 1 1 2 2 2 2 1 2 2 1 1 2 2 1 2 1 1 1 2 2 1 2 2 1 2 2 2 2 2 1 1 1 2 2 2 1 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 2 1 1 1 1 1 2 1 1 1 1 2 1 1 2 1 1 1 2 2 2 1 1 2 1 1 2 1 2 1 1 1 2 1 2 1 2 2 1 1 1 1 2 1 1 2 1 2 1 1 2 2 1 1 1 2 1 1 1 2 1 2 1 2 1 1 1 1 2 2 2 1 2 1 2 2 1 2 1 1 2 1 1 2 1 2 1 2 1 1 2 1 1 2 2 1 2 1 1 2\\n', '131\\n'), ('200\\n1 2 2 1 2 1 1 1 1 1 2 1 2 2 2 2 2 1 2 1 1 2 2 2 1 2 1 1 2 2 1 1 1 2 2 1 2 1 2 2 1 1 1 2 1 1 1 1 1 1 2 2 2 1 2 1 1 2 2 1 2 1 1 1 2 2 1 2 2 2 2 1 1 2 2 2 2 2 1 2 1 2 2 1 2 2 2 2 2 1 2 1 1 1 2 1 1 2 2 2 1 2 1 1 1 1 1 1 2 2 2 1 2 2 1 1 1 2 2 2 1 1 2 2 2 1 2 1 1 2 1 2 2 1 1 1 2 2 1 1 1 1 1 2 2 2 2 2 1 1 1 1 1 2 1 2 2 1 1 1 2 2 2 1 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 1 1 1 1 2 1 2 1 1 1 2 2 2 2 1 1 2 2 2 2\\n', '118\\n'), ('20\\n1 2 2 2 2 2 2 2 1 1 1 2 2 2 1 2 1 1 2 1\\n', '16\\n'), ('200\\n2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n', '191\\n'), ('10\\n2 2 2 2 2 2 2 2 2 1\\n', '10\\n'), ('6\\n2 2 2 1 1 1\\n', '6\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "A Twisty Movement", "tag": "Implement", "detailed_tag": "dp", "rating": 1743.4573127709132}
{"task_id": "E2H_CF336D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 1 0\\n', '2\\n'), ('2 2 0\\n', '4\\n'), ('1 1 1\\n', '0\\n'), ('100000 0 1\\n', '1\\n'), ('0 100000 1\\n', '0\\n'), ('0 100000 0\\n', '1\\n'), ('100000 100000 0\\n', '339533691\\n'), ('100000 1 0\\n', '50000\\n'), ('50000 1 1\\n', '25001\\n'), ('100000 100000 1\\n', '539933642\\n'), ('0 1 0\\n', '0\\n'), ('0 1 1\\n', '1\\n'), ('0 2 0\\n', '1\\n'), ('0 2 1\\n', '0\\n'), ('0 2500 0\\n', '1\\n'), ('0 2500 1\\n', '0\\n'), ('0 9997 0\\n', '1\\n'), ('0 9997 1\\n', '0\\n'), ('0 99999 0\\n', '1\\n'), ('0 99999 1\\n', '0\\n'), ('1 0 0\\n', '1\\n'), ('1 0 1\\n', '0\\n'), ('1 324 0\\n', '324\\n'), ('1 324 1\\n', '1\\n'), ('1 2500 0\\n', '2500\\n'), ('1 2500 1\\n', '1\\n'), ('1 9997 0\\n', '9997\\n'), ('1 9997 1\\n', '1\\n'), ('1 99999 0\\n', '99999\\n'), ('1 99999 1\\n', '1\\n'), ('1 100000 0\\n', '100000\\n'), ('1 100000 1\\n', '1\\n'), ('2 0 0\\n', '0\\n'), ('2 0 1\\n', '1\\n'), ('2 10000 1\\n', '10000\\n'), ('32 3132 0\\n', '256681375\\n'), ('32 3132 1\\n', '182437326\\n'), ('32 3333 0\\n', '747440836\\n'), ('32 3333 1\\n', '54373799\\n'), ('33 3232 0\\n', '47846603\\n'), ('33 3232 1\\n', '547985141\\n'), ('33 3333 0\\n', '37651367\\n'), ('33 3333 1\\n', '747440836\\n'), ('321 312 1\\n', '994988379\\n'), ('432 432 0\\n', '350813304\\n'), ('432 432 1\\n', '522392126\\n'), ('654 1 0\\n', '327\\n'), ('2500 0 0\\n', '0\\n'), ('2500 0 1\\n', '1\\n'), ('2500 1 0\\n', '1250\\n'), ('2500 1 1\\n', '1251\\n'), ('2500 2500 0\\n', '331895867\\n'), ('2500 2500 1\\n', '916450637\\n'), ('2500 9997 0\\n', '943644776\\n'), ('2500 9997 1\\n', '208015031\\n'), ('2500 99999 0\\n', '952185647\\n'), ('2500 99999 1\\n', '103989186\\n'), ('2500 100000 0\\n', '529882422\\n'), ('2500 100000 1\\n', '577696782\\n'), ('9134 5673 0\\n', '24899959\\n'), ('9997 0 0\\n', '1\\n'), ('9997 0 1\\n', '0\\n'), ('9997 1 0\\n', '5000\\n'), ('9997 1 1\\n', '4998\\n'), ('9997 2500 0\\n', '221563457\\n'), ('9997 2500 1\\n', '930096350\\n'), ('9997 9997 0\\n', '844903460\\n'), ('9997 9997 1\\n', '513521903\\n'), ('9997 99999 0\\n', '287015367\\n'), ('9997 99999 1\\n', '868424216\\n'), ('9997 100000 0\\n', '699517122\\n'), ('9997 100000 1\\n', '412501755\\n'), ('34560 99560 1\\n', '904236161\\n'), ('67655 1 1\\n', '33827\\n'), ('99999 0 0\\n', '1\\n'), ('99999 0 1\\n', '0\\n'), ('99999 1 0\\n', '50001\\n'), ('99999 1 1\\n', '49999\\n'), ('99999 2500 0\\n', '453841822\\n'), ('99999 2500 1\\n', '602333011\\n'), ('99999 9997 0\\n', '183955706\\n'), ('99999 9997 1\\n', '971483877\\n'), ('99999 99999 0\\n', '140133614\\n'), ('99999 99999 1\\n', '550956678\\n'), ('99999 100000 0\\n', '539933642\\n'), ('99999 100000 1\\n', '399800028\\n'), ('100000 0 0\\n', '0\\n'), ('100000 1 1\\n', '50001\\n'), ('100000 2500 0\\n', '653737382\\n'), ('100000 2500 1\\n', '453841822\\n'), ('100000 9997 0\\n', '928063171\\n'), ('100000 9997 1\\n', '183955706\\n'), ('100000 99999 0\\n', '799600056\\n'), ('100000 99999 1\\n', '140133614\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Vasily the Bear and Beautiful Strings", "tag": "Math", "detailed_tag": "combinatorics", "rating": 2018.2008222024826}
{"task_id": "E2H_CF464C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('123123\\n1\\n2->00\\n', '10031003\\n'), ('123123\\n1\\n3->\\n', '1212\\n'), ('222\\n2\\n2->0\\n0->7\\n', '777\\n'), ('1000000008\\n0\\n', '1\\n'), ('100\\n5\\n1->301\\n0->013\\n1->013\\n0->103\\n0->103\\n', '624761980\\n'), ('21222\\n10\\n1->\\n2->1\\n1->1\\n1->1\\n1->1\\n1->22\\n2->2\\n2->1\\n1->21\\n1->\\n', '22222222\\n'), ('21122\\n10\\n1->\\n2->12\\n1->\\n2->21\\n2->\\n1->21\\n1->\\n2->12\\n2->\\n1->21\\n', '212121\\n'), ('7048431802\\n3\\n0->9285051\\n0->785476659\\n6->3187205\\n', '106409986\\n'), ('1\\n10\\n1->111\\n1->111\\n1->111\\n1->111\\n1->111\\n1->111\\n1->111\\n1->111\\n1->111\\n1->111\\n', '97443114\\n'), ('80125168586785605523636285409060490408816122518314\\n0\\n', '410301862\\n'), ('4432535330257407726572090980499847187198996038948464049414107600178053433384837707125968777715401617\\n10\\n1->\\n3->\\n5->\\n2->\\n9->\\n0->\\n4->\\n6->\\n7->\\n8->\\n', '0\\n'), ('332434109630379\\n20\\n7->1\\n0->2\\n3->6\\n1->8\\n6->8\\n4->0\\n9->8\\n2->4\\n4->8\\n0->1\\n1->7\\n7->3\\n3->4\\n4->6\\n6->3\\n8->4\\n3->8\\n4->2\\n2->8\\n8->1\\n', '110333334\\n'), ('88296041076454194379\\n20\\n5->62\\n8->48\\n4->\\n1->60\\n9->00\\n6->16\\n0->03\\n6->\\n3->\\n1->\\n7->02\\n2->35\\n8->86\\n5->\\n3->34\\n4->\\n8->\\n0->\\n3->46\\n6->84\\n', '425093096\\n'), ('19693141406182378241404307417907800263629336520110\\n49\\n2->\\n0->\\n3->\\n9->\\n6->\\n5->\\n1->\\n4->\\n8->\\n7->0649713852\\n0->\\n4->\\n5->\\n3->\\n1->\\n8->\\n7->\\n9->\\n6->\\n2->2563194780\\n0->\\n8->\\n1->\\n3->\\n5->\\n4->\\n7->\\n2->\\n6->\\n9->8360512479\\n0->\\n3->\\n6->\\n4->\\n2->\\n9->\\n7->\\n1->\\n8->\\n5->8036451792\\n7->\\n6->\\n5->\\n1->\\n2->\\n0->\\n8->\\n9->\\n4->\\n', '3333\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Substitutes in Number", "tag": "DP", "detailed_tag": "dp", "rating": 2063.798620336728}
{"task_id": "E2H_CF31E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2\\n1234\\n', 'HHMM\\n'), ('2\\n9911\\n', 'HMHM\\n'), ('2\\n0153\\n', 'HHMM\\n'), ('3\\n614615\\n', 'HHHMMM\\n'), ('4\\n21305374\\n', 'HHHHMMMM\\n'), ('4\\n00013213\\n', 'HHHHMMMM\\n'), ('1\\n01\\n', 'HM\\n'), ('1\\n21\\n', 'HM\\n'), ('1\\n99\\n', 'HM\\n'), ('18\\n999999999999999999999999999999999999\\n', 'HHHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMMM\\n'), ('10\\n89959999998998796989\\n', 'HHHHHHMMMMHMMHHMHMMM\\n'), ('10\\n99999988899989998889\\n', 'HHHHHHHHHMMMHMMMMMMM\\n'), ('7\\n10210320200120\\n', 'HHHHHMMHMHMMMM\\n'), ('18\\n949787136121830145537930861689777414\\n', 'HHMHMHHHHHHHMHHHHHHHHMMMMMMMMMMMMMMM\\n'), ('18\\n956859579789834858167218778893796384\\n', 'HHHHHMHHMHHMMHHMHMHHHHHMHMMMMMMMMMMM\\n'), ('18\\n789998768896689887879979878577696879\\n', 'HHHHMHHHHHMHHHMHHHHHMMHMMMMMMMMMMMMM\\n'), ('18\\n899898999999899789998999898998699998\\n', 'HHHHHHHHHHHMHMMHHMMMHMMMHMHMMMHMMMMM\\n'), ('18\\n998999899889999999999999999999998999\\n', 'HHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMHMMM\\n'), ('18\\n520301003123441003000011410650200262\\n', 'HHHHHHHHHHHHMMHHHMHHHMMMMMMMMMMMMMMM\\n'), ('18\\n003003010010211000120021200200013010\\n', 'HHMHHMHHHHHHMHHHHHHMHHMMMMMMMMMMMMMM\\n'), ('18\\n101011411002041200101000000000001000\\n', 'HHHHHHMHHHHHHMHMHHMHMHHMMMMMMMMMMMMM\\n'), ('18\\n010000000000010000000000000101001000\\n', 'HHHHHHHHHHHHHMHHHHHMMMMMMMMMMMMMMMMM\\n'), ('18\\n000000000000000000000000000000001000\\n', 'HHHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMMM\\n'), ('18\\n000000000000000000000000000000000000\\n', 'HHHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMMM\\n'), ('18\\n999999999999999999999999999999999899\\n', 'HHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMHMM\\n'), ('18\\n998877665544332211998877665544332211\\n', 'HHHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMMM\\n'), ('9\\n998877665544332211\\n', 'HMHMHMHMHMHMHMHMHM\\n'), ('18\\n999988887777666655554444333322221111\\n', 'HHMMHHMMHHMMHHMMHHMMHHMMHHMMHHMMHHMM\\n'), ('18\\n111111111111111111111111111111111111\\n', 'HHHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMMM\\n'), ('9\\n112233445566778899\\n', 'HHHHHHHHHMMMMMMMMM\\n'), ('18\\n112233445566778899112233445566778899\\n', 'HHHHHHHHHHHHHHHHMMHHMMMMMMMMMMMMMMMM\\n'), ('18\\n111122223333444455556666777788889999\\n', 'HHHHHHHHHHHHHHHHHHMMMMMMMMMMMMMMMMMM\\n'), ('7\\n98887870656634\\n', 'HHHMHMMHMHMMHM\\n'), ('6\\n389531391995\\n', 'HHMHHHHMMMMM\\n'), ('8\\n6770379299275795\\n', 'HHHHHHMHMMHMMMMM\\n'), ('9\\n256276354396913650\\n', 'HHHHMHHHHHMMMMMMMM\\n'), ('17\\n0505221537264872903260121660510735\\n', 'HHHHHHHHHHHHHHHHMHMMMMMMMMMMMMMMMM\\n'), ('16\\n94037617932892444411587756822347\\n', 'HHHHHHHHMHHHMHHHMMHHMMMMMMMMMMMM\\n'), ('15\\n051911296923361789993851872792\\n', 'HHHHHHHMHMHHHHHHHMMMMMMMMMMMMM\\n'), ('14\\n1637752215267288357827332779\\n', 'HHHHHHHHHHHHHHMMMMMMMMMMMMMM\\n'), ('13\\n04432024633126608067252737\\n', 'HHHHHHHHMHHHHMMHMMMMMMMMMM\\n'), ('12\\n254163163934611135461589\\n', 'HHHHHHHHHMHHMHMMMMMMMMMM\\n'), ('11\\n3657071886390583694504\\n', 'HHHHHHHHHHHMMMMMMMMMMM\\n'), ('10\\n27555210523159542624\\n', 'HMHHHHHHMHHHMMMMMMMM\\n'), ('5\\n9823921785\\n', 'HHHHMMHMMM\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "TV Game", "tag": "DP", "detailed_tag": "dp", "rating": 2353.283984217666}
{"task_id": "E2H_CF401A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 2\\n-1 1 2\\n', '1\\n'), ('2 3\\n-2 -2\\n', '2\\n'), ('4 4\\n1 2 3 4\\n', '3\\n'), ('2 2\\n-1 -1\\n', '1\\n'), ('15 5\\n-2 -1 2 -4 -3 4 -4 -2 -2 2 -2 -1 1 -4 -2\\n', '4\\n'), ('15 16\\n-15 -5 -15 -14 -8 15 -15 -12 -5 -3 5 -7 3 8 -15\\n', '6\\n'), ('1 4\\n-3\\n', '1\\n'), ('10 7\\n6 4 6 6 -3 4 -1 2 3 3\\n', '5\\n'), ('2 1\\n1 -1\\n', '0\\n'), ('1 1\\n0\\n', '0\\n'), ('8 13\\n-11 -1 -11 12 -2 -2 -10 -11\\n', '3\\n'), ('16 11\\n3 -7 7 -9 -2 -3 -4 -2 -6 8 10 7 1 4 6 7\\n', '2\\n'), ('67 15\\n-2 -2 6 -4 -7 4 3 13 -9 -4 11 -7 -6 -11 1 11 -1 11 14 10 -8 7 5 11 -13 1 -1 7 -14 9 -11 -11 13 -4 12 -11 -8 -5 -11 6 10 -2 6 9 9 6 -11 -2 7 -10 -1 9 -8 -5 1 -7 -2 3 -1 -13 -6 -9 -8 10 13 -3 9\\n', '1\\n'), ('123 222\\n44 -190 -188 -185 -55 17 190 176 157 176 -24 -113 -54 -61 -53 53 -77 68 -12 -114 -217 163 -122 37 -37 20 -108 17 -140 -210 218 19 -89 54 18 197 111 -150 -36 -131 -172 36 67 16 -202 72 169 -137 -34 -122 137 -72 196 -17 -104 180 -102 96 -69 -184 21 -15 217 -61 175 -221 62 173 -93 -106 122 -135 58 7 -110 -108 156 -141 -102 -50 29 -204 -46 -76 101 -33 -190 99 52 -197 175 -71 161 -140 155 10 189 -217 -97 -170 183 -88 83 -149 157 -208 154 -3 77 90 74 165 198 -181 -166 -4 -200 -89 -200 131 100 -61 -149\\n', '8\\n'), ('130 142\\n58 -50 43 -126 84 -92 -108 -92 57 127 12 -135 -49 89 141 -112 -31 47 75 -19 80 81 -5 17 10 4 -26 68 -102 -10 7 -62 -135 -123 -16 55 -72 -97 -34 21 21 137 130 97 40 -18 110 -52 73 52 85 103 -134 -107 88 30 66 97 126 82 13 125 127 -87 81 22 45 102 13 95 4 10 -35 39 -43 -112 -5 14 -46 19 61 -44 -116 137 -116 -80 -39 92 -75 29 -65 -15 5 -108 -114 -129 -5 52 -21 118 -41 35 -62 -125 130 -95 -11 -75 19 108 108 127 141 2 -130 54 96 -81 -102 140 -58 -102 132 50 -126 82 6 45 -114 -42\\n', '5\\n'), ('7 12\\n2 5 -1 -4 -7 4 3\\n', '1\\n'), ('57 53\\n-49 7 -41 7 38 -51 -23 8 45 1 -24 26 37 28 -31 -40 38 25 -32 -47 -3 20 -40 -32 -44 -36 5 33 -16 -5 28 10 -22 3 -10 -51 -32 -51 27 -50 -22 -12 41 3 15 24 30 -12 -34 -15 -29 38 -10 -35 -9 6 -51\\n', '8\\n'), ('93 273\\n-268 -170 -163 19 -69 18 -244 35 -34 125 -224 -48 179 -247 127 -150 271 -49 -102 201 84 -151 -70 -46 -16 216 240 127 3 218 -209 223 -227 -201 228 -8 203 46 -100 -207 126 255 40 -58 -217 93 172 -97 23 183 102 -92 -157 -117 173 47 144 -235 -227 -62 -128 13 -151 158 110 -116 68 -2 -148 -206 -52 79 -152 -223 74 -149 -69 232 38 -70 -256 -213 -236 132 -189 -200 199 -57 -108 -53 269 -101 -134\\n', '8\\n'), ('1 1000\\n997\\n', '1\\n'), ('4 3\\n2 -1 -2 -1\\n', '1\\n'), ('1 1\\n-1\\n', '1\\n'), ('1 1\\n1\\n', '1\\n'), ('2 2\\n1 -1\\n', '0\\n'), ('2 2\\n-1 1\\n', '0\\n'), ('2 3\\n-1 1\\n', '0\\n'), ('2 2\\n-2 2\\n', '0\\n'), ('2 2\\n2 2\\n', '2\\n'), ('4 2\\n-1 -1 -1 -1\\n', '2\\n'), ('4 1\\n-1 -1 -1 1\\n', '2\\n'), ('3 2\\n2 2 2\\n', '3\\n'), ('10 300\\n300 300 300 300 300 300 300 300 300 300\\n', '10\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Vanya and Cards", "tag": "Implement", "detailed_tag": "math", "rating": 769.9196305971403}
{"task_id": "E2H_CF1095B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4\\n1 3 3 7\\n', '2\\n'), ('2\\n1 100000\\n', '0\\n'), ('5\\n3 1 4 4 2\\n', '2\\n'), ('3\\n1 10 11\\n', '1\\n'), ('60\\n36 91 2 38 37 49 48 11 59 67 53 56 35 60 87 59 60 16 73 34 15 4 57 40 38 44 4 80 63 26 94 99 68 47 88 4 96 36 15 54 54 19 9 88 78 47 99 90 63 23 23 77 79 31 68 68 75 71 100 37\\n', '96\\n'), ('3\\n1 2 4\\n', '1\\n'), ('4\\n1 5 6 7\\n', '2\\n'), ('4\\n12 8 7 4\\n', '4\\n'), ('23\\n48 76 49 46 54 10 7 11 48 78 1 44 36 64 73 19 80 83 81 59 19 18 8\\n', '76\\n'), ('5\\n1 12 13 14 15\\n', '3\\n'), ('3\\n1 3 4\\n', '1\\n'), ('6\\n1 47 66 81 19 95\\n', '76\\n'), ('12\\n1 2 3 4 5 6 7 8 9 10 11 12\\n', '10\\n'), ('4\\n1 2 3 7\\n', '2\\n'), ('3\\n1 4 4\\n', '0\\n'), ('23\\n5 61 68 76 70 87 26 55 83 93 95 45 90 36 95 99 72 10 97 22 13 23 100\\n', '90\\n'), ('4\\n1 6 7 9\\n', '3\\n'), ('24\\n93 94 43 61 84 67 63 4 42 4 40 1 37 57 51 68 19 18 92 44 62 62 38 51\\n', '90\\n'), ('3\\n1 345 347\\n', '2\\n'), ('3\\n4 5 5\\n', '0\\n'), ('5\\n3 4 3 1 5\\n', '2\\n'), ('3\\n99999 100000 100000\\n', '0\\n'), ('35\\n13 9 84 88 42 75 73 3 10 44 94 74 36 14 23 67 85 94 55 93 38 82 96 54 19 99 73 58 65 90 41 29 50 77 17\\n', '90\\n'), ('3\\n4 1 2\\n', '1\\n'), ('9\\n94 33 89 40 53 48 71 78 88\\n', '54\\n'), ('4\\n1 4 8 9\\n', '5\\n'), ('80\\n85 14 30 21 2 68 24 96 71 4 78 33 15 32 55 86 62 55 71 26 14 45 26 47 24 6 16 21 84 52 87 20 65 68 40 18 35 15 13 57 70 91 89 84 22 43 21 83 50 92 8 15 36 86 61 12 43 28 32 26 31 70 97 47 37 88 64 23 3 77 80 24 67 68 8 40 63 80 74 64\\n', '94\\n'), ('27\\n89 65 26 78 91 30 4 18 65 72 96 15 99 22 26 60 36 98 86 79 30 57 52 94 70 35 29\\n', '84\\n'), ('64\\n58 66 82 99 26 95 18 87 83 65 29 83 89 72 23 41 87 48 14 7 83 20 34 63 83 80 33 70 12 59 88 21 76 70 71 53 16 88 40 99 5 20 81 93 91 55 33 29 54 46 35 36 18 69 50 100 100 82 21 11 40 60 31 68\\n', '93\\n'), ('52\\n27 30 55 43 7 12 25 21 76 78 61 88 96 8 12 88 50 57 37 36 57 59 48 39 44 71 91 74 94 42 3 72 23 57 14 81 20 90 53 48 19 13 35 14 73 98 1 74 55 90 9 11\\n', '95\\n'), ('4\\n4 11 12 17\\n', '6\\n'), ('44\\n76 38 4 52 34 38 23 88 8 80 33 43 37 48 67 18 37 21 94 60 90 18 9 85 60 45 18 26 20 72 74 95 9 77 98 94 14 72 81 73 52 13 15 88\\n', '90\\n'), ('2\\n47 2\\n', '0\\n'), ('21\\n91 46 66 24 98 3 2 16 64 47 66 9 88 24 55 39 42 23 39 69 4\\n', '89\\n'), ('78\\n20 4 81 66 78 5 47 77 63 9 26 91 45 44 28 70 73 58 30 61 92 55 8 1 54 9 41 83 79 58 80 50 13 13 68 90 69 14 18 31 22 43 73 66 38 1 88 11 10 17 71 53 71 30 5 76 38 98 59 69 7 38 70 19 2 37 60 70 50 78 53 72 72 25 89 62 77 76\\n', '91\\n'), ('5\\n1 9 4 11 10\\n', '7\\n'), ('45\\n97 87 66 76 82 5 67 20 77 29 63 18 48 18 28 26 12 13 96 60 21 93 94 7 20 23 100 80 21 10 80 69 96 97 96 29 1 62 49 78 42 11 47 90 29\\n', '95\\n'), ('4\\n1 5 5 6\\n', '1\\n'), ('2\\n1220 1000\\n', '0\\n'), ('3\\n1 1 4\\n', '0\\n'), ('3\\n1 4 8\\n', '3\\n'), ('59\\n73 46 90 8 44 17 32 67 18 68 35 85 86 63 44 64 73 12 96 37 86 70 88 2 73 61 37 12 23 55 96 96 100 85 55 95 53 38 61 70 57 96 7 94 10 50 57 83 13 53 71 50 74 58 51 47 19 39 10\\n', '93\\n'), ('3\\n40 67 65\\n', '2\\n'), ('3\\n4 56 62\\n', '6\\n'), ('76\\n23 38 14 65 43 92 98 33 32 71 52 88 6 9 38 63 20 14 84 58 84 66 87 62 30 14 81 6 39 32 22 61 22 87 77 16 30 26 48 62 97 51 49 2 60 38 65 31 51 100 40 86 17 78 47 47 92 80 52 82 63 25 42 84 12 19 99 41 96 99 54 92 49 54 46 60\\n', '94\\n'), ('13\\n43 28 60 70 71 57 24 94 54 95 34 7 93\\n', '71\\n'), ('6\\n67 100 5 97 83 85\\n', '33\\n'), ('30\\n28 69 21 75 45 3 30 78 95 30 49 53 29 50 44 90 15 47 84 88 15 80 29 83 12 43 36 71 75 23\\n', '83\\n'), ('18\\n88 16 51 10 26 52 88 56 54 16 30 43 89 90 70 66 5 72\\n', '80\\n'), ('3\\n1 7 8\\n', '1\\n'), ('43\\n20 75 10 50 77 99 75 54 1 62 46 19 37 4 79 37 100 85 54 59 91 91 96 38 62 49 28 39 29 81 49 48 7 11 49 83 9 24 88 61 85 33 31\\n', '96\\n'), ('5\\n3 3 3 5 7\\n', '2\\n'), ('95\\n28 37 51 19 54 38 21 62 47 83 96 60 36 89 14 77 4 16 99 25 41 55 67 38 13 35 88 19 73 70 16 100 6 66 70 12 55 90 73 54 24 20 13 60 8 27 88 11 94 86 87 34 40 5 23 5 92 11 23 64 32 38 16 38 56 37 1 10 79 25 63 54 44 28 65 3 54 52 66 99 37 4 33 29 9 7 33 52 17 55 67 49 45 82 38\\n', '97\\n'), ('3\\n2 30 33\\n', '3\\n'), ('17\\n99 42 52 81 78 94 100 56 20 60 74 88 2 55 7 78 35\\n', '93\\n'), ('3\\n7 9 11\\n', '2\\n'), ('3\\n1 4 5\\n', '1\\n'), ('3\\n2 23 3\\n', '1\\n'), ('4\\n7 24 20 12\\n', '12\\n'), ('4\\n6 4 1 2\\n', '3\\n'), ('3\\n1 8 7\\n', '1\\n'), ('4\\n6 4 2 1\\n', '3\\n'), ('18\\n71 72 96 81 89 62 42 28 92 1 37 28 3 19 65 79 73 33\\n', '91\\n'), ('3\\n39 14 59\\n', '20\\n'), ('7\\n14 20 15 12 1 4 7\\n', '14\\n'), ('3\\n9 15 16\\n', '1\\n'), ('3\\n4 4 14\\n', '0\\n'), ('4\\n12521 87651 61289 78514\\n', '26362\\n'), ('10\\n671 529 765 761 54 406 450 284 312 567\\n', '481\\n'), ('14\\n14 10 4 19 16 16 8 8 15 23 14 1 8 16\\n', '18\\n'), ('20\\n9 10 23 6 15 10 13 3 3 20 16 16 7 3 24 25 25 10 18 6\\n', '22\\n'), ('4\\n49999 49999 100000 100000\\n', '50001\\n'), ('8\\n8 20 7 16 11 9 24 2\\n', '17\\n'), ('8\\n1 5 5 6 6 7 7 9\\n', '4\\n'), ('67\\n76344 46992 50112 6145 4118 31055 70413 55046 92656 2066 2039 38823 73744 5618 66069 50373 77580 22466 7802 86261 5150 98903 97345 62706 21074 19227 39450 26828 85204 49023 1245 61547 12367 51356 84043 32836 98762 54455 87881 91417 56521 89919 46592 46616 95536 12660 96988 89467 51478 21141 92080 56627 20043 89424 35684 57469 25002 75133 648 26557 24155 1892 88103 36521 69599 72146 69356\\n', '97658\\n'), ('30\\n5494 90839 21677 21065 33720 40995 69053 30133 68390 23593 73669 59438 16475 78283 85669 57228 19501 93784 45860 30592 31376 14060 99524 43144 38260 21140 37393 46696 26737 86463\\n', '85464\\n'), ('82\\n53931 67166 20637 68570 4855 63080 53128 28375 54407 70564 46622 46903 32659 68966 20614 11381 51217 94774 90448 13368 51098 46518 15907 1090 44331 39269 17316 22813 66082 78034 58245 36364 45200 78881 4933 66406 58312 74413 94780 12718 61328 57754 75973 93986 26719 12938 21718 94288 24063 28518 7655 75160 91387 39913 76250 35717 95534 9917 74881 61615 87950 33125 97978 49501 28357 19262 15906 3021 93674 27038 15738 55002 84791 8062 65339 27861 20999 87057 22148 61413 15574 46154\\n', '94444\\n'), ('3\\n1 20 21\\n', '1\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Array Stabilization", "tag": "Implement", "detailed_tag": "implementation", "rating": 949.0709799267864}
{"task_id": "E2H_CF169B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1024\\n010\\n', '1124\\n'), ('987\\n1234567\\n', '987\\n'), ('10\\n1\\n', '11\\n'), ('11\\n1\\n', '11\\n'), ('12\\n2\\n', '22\\n'), ('1\\n0\\n', '1\\n'), ('123456\\n9999\\n', '999956\\n'), ('909090\\n000111\\n', '919191\\n'), ('588\\n24\\n', '588\\n'), ('25206\\n88\\n', '88206\\n'), ('9776247464\\n8629\\n', '9986647464\\n'), ('3666566898\\n3001\\n', '3666566898\\n'), ('3338860467\\n5848\\n', '8858864467\\n'), ('9768757689\\n1010\\n', '9768757689\\n'), ('6669490269\\n6240849376\\n', '9879696469\\n'), ('1794210278\\n50931901955213461294\\n', '9999965578\\n'), ('6997854871\\n15113453341706470344\\n', '7997876875\\n'), ('8947769539\\n22900332144661023400\\n', '9967769649\\n'), ('9885783638\\n20241242140301231211\\n', '9885784648\\n'), ('1\\n2\\n', '2\\n'), ('1\\n1234567890\\n', '9\\n'), ('123\\n987987\\n', '998\\n'), ('1000\\n32119\\n', '9321\\n'), ('31\\n4\\n', '41\\n'), ('504\\n91111\\n', '914\\n'), ('100001\\n23\\n', '320001\\n'), ('87\\n9\\n', '97\\n'), ('786796787566545376\\n00101\\n', '786796787566545376\\n'), ('123456789012345678905764345\\n00001\\n', '123456789112345678905764345\\n'), ('111\\n2222222299999999\\n', '999\\n'), ('111\\n789\\n', '987\\n'), ('1\\n99\\n', '9\\n'), ('1099\\n9\\n', '9099\\n'), ('123\\n456\\n', '654\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Replacing Digits", "tag": "Greedy", "detailed_tag": "greedy", "rating": 1068.718264674261}
{"task_id": "E2H_CF808B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 2\\n3 4 7\\n', '9.0000000000\\n'), ('1 1\\n10\\n', '10.0000000000\\n'), ('8 2\\n1 2 4 100000 123 456 789 1\\n', '28964.2857142857\\n'), ('1 1\\n1\\n', '1.0000000000\\n'), ('1 1\\n100000\\n', '100000.0000000000\\n'), ('3 1\\n1 2 3\\n', '2.0000000000\\n'), ('10 4\\n11 3 5 20 12 7 9 2 2 20\\n', '36.2857142857\\n'), ('10 5\\n15 9 3 2 17 10 9 18 4 19\\n', '50.3333333333\\n'), ('10 6\\n19 3 20 16 14 10 1 13 7 3\\n', '65.8000000000\\n'), ('10 7\\n8 16 2 13 15 9 5 13 9 2\\n', '68.2500000000\\n'), ('10 4\\n127 1459 718 1183 880 1044 1857 1340 725 1496\\n', '4574.4285714286\\n'), ('10 5\\n1384 1129 1780 1960 1567 1928 12 1523 1165 344\\n', '6931.3333333333\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Average Sleep Time", "tag": "Implement", "detailed_tag": "data structures", "rating": 1300.0}
{"task_id": "E2H_CF353C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2\\n3 8\\n10\\n', '3\\n'), ('5\\n17 0 10 2 1\\n11010\\n', '27\\n'), ('18\\n4382 3975 9055 7554 8395 204 5313 5739 1555 2306 5423 828 8108 9736 2683 7940 1249 5495\\n110001100101110111\\n', '88691\\n'), ('43\\n475 2165 8771 7146 8980 7209 9170 9006 6278 6661 4740 6321 7532 6869 3788 7918 1707 5070 3809 5189 2494 8255 1123 3197 190 5712 9873 3286 9997 133 9030 3067 8043 5297 5398 4240 8315 2141 1436 3297 247 8438 2300\\n0111011100100011110010011110011011010001101\\n', '222013\\n'), ('1\\n0\\n1\\n', '0\\n'), ('1\\n1\\n0\\n', '0\\n'), ('1\\n1\\n1\\n', '1\\n'), ('1\\n0\\n0\\n', '0\\n'), ('2\\n10000 10000\\n11\\n', '20000\\n'), ('2\\n10000 9999\\n10\\n', '10000\\n'), ('2\\n9999 10000\\n10\\n', '9999\\n'), ('2\\n10000 10000\\n00\\n', '0\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Find Maximum", "tag": "Implement", "detailed_tag": "number theory", "rating": 1537.525751364469}
{"task_id": "E2H_CF1452D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2\\n', '748683265\\n'), ('3\\n', '748683265\\n'), ('5\\n', '842268673\\n'), ('200000\\n', '202370013\\n'), ('6\\n', '873463809\\n'), ('1\\n', '499122177\\n'), ('4\\n', '811073537\\n'), ('7\\n', '896860161\\n'), ('13\\n', '969851905\\n'), ('42\\n', '708668919\\n'), ('69\\n', '342983896\\n'), ('1337\\n', '843775535\\n'), ('199999\\n', '503231359\\n'), ('199998\\n', '801261687\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Radio Towers", "tag": "Math", "detailed_tag": "combinatorics", "rating": 1606.4786668942636}
{"task_id": "E2H_CF892D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2\\n1 2\\n', '2 1 \\n'), ('4\\n1000 100 10 1\\n', '100 1 1000 10\\n'), ('5\\n1 3 4 5 2\\n', '5 2 3 4 1 \\n'), ('1\\n10000000\\n', '10000000 \\n'), ('4\\n1 5 8 4\\n', '8 4 5 1 \\n'), ('3\\n1 3 2\\n', '3 2 1 \\n'), ('4\\n3 1 2 4\\n', '2 4 1 3 \\n'), ('12\\n7 1 62 12 3 5 8 9 10 22 23 0\\n', '5 0 23 10 1 3 7 8 9 12 22 62 \\n'), ('17\\n1 3 2 5 4 6 7 8 10 9 13 11 12 14 15 16 18\\n', '18 2 1 4 3 5 6 7 9 8 12 10 11 13 14 15 16 \\n'), ('22\\n1 3 5 7 22 2 4 6 8 9 10 11 12 13 15 14 17 18 16 20 19 23\\n', '23 2 4 6 20 1 3 5 7 8 9 10 11 12 14 13 16 17 15 19 18 22 \\n'), ('22\\n17 6 1 22 9 23 38 40 10 20 29 11 12 39 3 32 26 4 13 36 14 35\\n', '14 4 40 20 6 22 36 39 9 17 26 10 11 38 1 29 23 3 12 35 13 32 \\n'), ('22\\n27 21 12 14 8 40 47 45 24 49 36 37 17 32 42 13 35 10 18 2 5 30\\n', '24 18 10 13 5 37 45 42 21 47 35 36 14 30 40 12 32 8 17 49 2 27 \\n'), ('22\\n33 2 19 26 18 13 27 9 25 35 6 24 20 22 11 5 1 30 17 15 7 29\\n', '30 1 18 25 17 11 26 7 24 33 5 22 19 20 9 2 35 29 15 13 6 27 \\n'), ('22\\n18 37 15 33 35 5 14 1 0 27 22 11 40 20 13 2 30 21 8 25 32 16\\n', '16 35 14 32 33 2 13 0 40 25 21 8 37 18 11 1 27 20 5 22 30 15 \\n'), ('22\\n4 24 22 18 28 3 17 8 29 20 11 15 13 2 19 26 5 36 33 14 30 25\\n', '3 22 20 17 26 2 15 5 28 19 8 14 11 36 18 25 4 33 30 13 29 24 \\n'), ('22\\n28 40 5 38 29 12 21 24 2 33 35 17 30 11 16 0 8 27 34 14 19 36\\n', '27 38 2 36 28 11 19 21 0 30 34 16 29 8 14 40 5 24 33 12 17 35 \\n'), ('22\\n25 12 38 5 6 20 30 27 4 19 8 18 10 17 26 32 43 14 40 35 1 22\\n', '22 10 35 4 5 19 27 26 1 18 6 17 8 14 25 30 40 12 38 32 43 20 \\n'), ('22\\n2 22 21 19 3 25 28 11 10 9 14 37 18 38 15 23 20 34 7 30 31 4\\n', '38 21 20 18 2 23 25 10 9 7 11 34 15 37 14 22 19 31 4 28 30 3 \\n'), ('22\\n7 0 23 37 20 18 46 26 2 24 44 13 47 15 32 5 35 30 39 41 27 10\\n', '5 47 20 35 18 15 44 24 0 23 41 10 46 13 30 2 32 27 37 39 26 7 \\n'), ('22\\n36 5 7 22 33 30 14 8 25 24 28 12 19 29 37 2 20 15 10 17 13 21\\n', '33 2 5 21 30 29 13 7 24 22 25 10 17 28 36 37 19 14 8 15 12 20 \\n'), ('22\\n23 32 13 39 29 41 40 6 21 10 38 42 4 8 20 35 31 26 15 2 17 5\\n', '21 31 10 38 26 40 39 5 20 8 35 41 2 6 17 32 29 23 13 42 15 4 \\n'), ('22\\n41 12 14 36 16 21 0 2 18 22 39 29 40 31 37 25 28 9 4 34 6 43\\n', '40 9 12 34 14 18 43 0 16 21 37 28 39 29 36 22 25 6 2 31 4 41 \\n'), ('22\\n32 43 3 37 29 42 40 12 28 1 14 25 34 46 8 35 5 17 2 23 20 9\\n', '29 42 2 35 28 40 37 9 25 46 12 23 32 43 5 34 3 14 1 20 17 8 \\n'), ('22\\n17 10 24 44 41 33 48 6 30 27 38 19 16 46 22 8 35 13 5 9 4 1\\n', '16 9 22 41 38 30 46 5 27 24 35 17 13 44 19 6 33 10 4 8 1 48 \\n'), ('22\\n16 11 29 30 12 5 3 2 13 6 17 15 9 24 25 35 1 27 0 23 20 33\\n', '15 9 27 29 11 3 2 1 12 5 16 13 6 23 24 33 0 25 35 20 17 30 \\n'), ('22\\n12 38 6 37 14 26 2 0 9 17 28 33 3 11 15 8 31 21 29 34 18 24\\n', '11 37 3 34 12 24 0 38 8 15 26 31 2 9 14 6 29 18 28 33 17 21 \\n'), ('22\\n20 38 26 32 36 8 44 0 40 41 35 21 11 17 29 33 1 42 24 14 5 3\\n', '17 36 24 29 35 5 42 44 38 40 33 20 8 14 26 32 0 41 21 11 3 1 \\n'), ('22\\n7 10 1 25 42 8 39 35 6 19 31 24 16 0 21 32 11 28 13 4 37 22\\n', '6 8 0 24 39 7 37 32 4 16 28 22 13 42 19 31 10 25 11 1 35 21 \\n'), ('22\\n9 13 7 20 38 40 27 12 31 25 1 23 46 35 45 29 19 16 33 4 42 39\\n', '7 12 4 19 35 39 25 9 29 23 46 20 45 33 42 27 16 13 31 1 40 38 \\n'), ('22\\n13 2 10 25 5 34 19 18 16 9 7 22 28 20 31 38 36 35 1 26 6 23\\n', '10 1 9 23 2 31 18 16 13 7 6 20 26 19 28 36 35 34 38 25 5 22 \\n'), ('22\\n106855341 41953605 16663229 140358177 145011760 49391214 42672526 1000000000 173686818 18529133 155326121 177597841 65855243 125680752 111261017 47020618 35558283 100881772 149421816 84207033 181739589 185082482\\n', '100881772 35558283 1000000000 125680752 140358177 47020618 41953605 185082482 155326121 16663229 149421816 173686818 49391214 111261017 106855341 42672526 18529133 84207033 145011760 65855243 177597841 181739589 \\n'), ('22\\n177663922 168256855 139197944 78700101 93490895 127229611 46317725 84284513 48674853 66142856 29224095 1000000000 138390832 117500569 98525700 100418194 44827621 151960474 43225995 16918107 53307514 48861499\\n', '168256855 151960474 138390832 66142856 84284513 117500569 44827621 78700101 46317725 53307514 16918107 177663922 127229611 100418194 93490895 98525700 43225995 139197944 29224095 1000000000 48861499 48674853 \\n'), ('22\\n83255567 39959119 124812899 157774437 12694468 89732189 102545715 67019496 110206980 98186415 63181429 141617294 177406424 195504716 158928060 64956133 67949891 31436243 155002729 1000000000 128745406 52504492\\n', '67949891 31436243 110206980 155002729 1000000000 83255567 98186415 64956133 102545715 89732189 52504492 128745406 158928060 177406424 157774437 63181429 67019496 12694468 141617294 195504716 124812899 39959119 \\n'), ('22\\n138499935 195582510 159774498 12295611 37071371 91641202 167958938 119995178 19438466 182405139 207729895 56797798 79876605 152841775 1000000000 149079380 158867321 154637978 72179187 75460169 145092927 103227705\\n', '119995178 182405139 158867321 1000000000 19438466 79876605 159774498 103227705 12295611 167958938 195582510 37071371 75460169 149079380 207729895 145092927 154637978 152841775 56797798 72179187 138499935 91641202 \\n'), ('22\\n133295371 188010892 71730560 209842234 193069109 184556873 87395258 234247052 230809052 211444018 148989732 17810977 158722706 11753932 100093528 1000000000 43672080 61357581 171830832 13873487 34865589 114340079\\n', '114340079 184556873 61357581 193069109 188010892 171830832 71730560 230809052 211444018 209842234 133295371 13873487 148989732 1000000000 87395258 234247052 34865589 43672080 158722706 11753932 17810977 100093528 \\n'), ('22\\n94506085 195061283 78884975 27418524 41348358 185397891 151515774 66605535 170723638 212843258 218566729 7450050 21809921 1000000000 146101141 132453297 228865386 240705035 57636433 114219677 158240908 228428432\\n', '78884975 185397891 66605535 21809921 27418524 170723638 146101141 57636433 158240908 195061283 212843258 1000000000 7450050 240705035 132453297 114219677 228428432 228865386 41348358 94506085 151515774 218566729 \\n'), ('22\\n116213533 171312666 76695399 60099180 30779320 43431323 146620629 15321904 71245898 94843310 56549974 104020167 84091716 134384095 24383373 83975332 1000000000 101710173 188076412 199811222 153566780 115893674\\n', '115893674 153566780 71245898 56549974 24383373 30779320 134384095 1000000000 60099180 84091716 43431323 101710173 83975332 116213533 15321904 76695399 199811222 94843310 171312666 188076412 146620629 104020167 \\n'), ('22\\n79749952 42551386 1000000000 60427603 50702468 16899307 85913428 116634789 151569595 100251788 152378664 96284924 60769416 136345503 59995727 88224321 29257228 64921932 77805288 126026727 103477637 115959196\\n', '77805288 29257228 152378664 59995727 42551386 1000000000 79749952 115959196 136345503 96284924 151569595 88224321 60427603 126026727 50702468 85913428 16899307 60769416 64921932 116634789 100251788 103477637 \\n'), ('22\\n32119698 129510003 107370317 182795872 160438101 17245069 117836566 141016185 196664039 215252245 170450315 18866624 68629021 47385728 77249092 89835593 132769095 95649030 48749357 126701972 40219294 1000000000\\n', '18866624 126701972 95649030 170450315 141016185 1000000000 107370317 132769095 182795872 196664039 160438101 17245069 48749357 40219294 68629021 77249092 129510003 89835593 47385728 117836566 32119698 215252245 \\n'), ('22\\n148671024 180468173 99388811 78666746 187172484 157360521 112604605 2988530 60271244 163263697 27469084 166381131 1000000000 125847469 137766458 198740424 88387613 15152912 200315776 149201551 45997250 36252057\\n', '137766458 166381131 88387613 60271244 180468173 149201551 99388811 1000000000 45997250 157360521 15152912 163263697 200315776 112604605 125847469 187172484 78666746 2988530 198740424 148671024 36252057 27469084 \\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Gluttony", "tag": "Greedy", "detailed_tag": "constructive algorithms", "rating": 1859.1901326020225}
{"task_id": "E2H_CF1763E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3\\n', '3 0\\n'), ('4\\n', '5 6\\n'), ('0\\n', '0 0\\n'), ('1\\n', '2 0\\n'), ('2\\n', '4 4\\n'), ('5\\n', '7 16\\n'), ('6\\n', '4 0\\n'), ('7\\n', '6 8\\n'), ('8\\n', '8 20\\n'), ('9\\n', '7 12\\n'), ('12\\n', '8 16\\n'), ('119\\n', '22 112\\n'), ('199977\\n', '676 28173\\n'), ('10\\n', '5 0\\n'), ('200000\\n', '674 26801\\n'), ('199999\\n', '675 27476\\n'), ('199993\\n', '671 24792\\n'), ('199992\\n', '669 23454\\n'), ('111774\\n', '495 10491\\n'), ('158062\\n', '597 19844\\n'), ('111351\\n', '499 12900\\n'), ('132661\\n', '544 15035\\n'), ('132656\\n', '542 13955\\n'), ('26383\\n', '243 3020\\n'), ('183040\\n', '638 20163\\n'), ('62545\\n', '371 6090\\n'), ('131827\\n', '548 18051\\n'), ('199998\\n', '673 26130\\n'), ('199991\\n', '667 22120\\n'), ('199990\\n', '677 28836\\n'), ('199997\\n', '671 24788\\n'), ('199996\\n', '674 26805\\n'), ('199995\\n', '672 25461\\n'), ('199994\\n', '670 24121\\n'), ('45471\\n', '312 3045\\n'), ('156387\\n', '598 22116\\n'), ('34644\\n', '285 5826\\n'), ('114746\\n', '510 15049\\n'), ('92562\\n', '460 13008\\n'), ('140599\\n', '567 19862\\n'), ('17527\\n', '204 3179\\n'), ('136035\\n', '539 8956\\n'), ('6541\\n', '135 2504\\n'), ('17509\\n', '210 4436\\n'), ('181386\\n', '643 25017\\n'), ('132983\\n', '539 12008\\n'), ('97109\\n', '461 8921\\n'), ('61691\\n', '382 11080\\n'), ('33688\\n', '269 2358\\n'), ('153218\\n', '565 6112\\n'), ('126751\\n', '539 18240\\n'), ('68943\\n', '404 12463\\n'), ('51194\\n', '340 6436\\n'), ('186298\\n', '654 27233\\n'), ('130474\\n', '537 13442\\n'), ('106443\\n', '496 16317\\n'), ('196476\\n', '654 17055\\n'), ('171819\\n', '623 21934\\n'), ('59458\\n', '368 8070\\n'), ('93759\\n', '455 9526\\n'), ('117783\\n', '520 17157\\n'), ('141236\\n', '574 23215\\n'), ('121253\\n', '527 17348\\n'), ('180242\\n', '643 26161\\n'), ('40874\\n', '308 6404\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Node Pairs", "tag": "Math", "detailed_tag": "graphs", "rating": 2056.327619617396}
{"task_id": "E2H_CF1333E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1\\n', '-1\\n'), ('4\\n', '1 2 3 4 \\n13 15 11 5 \\n12 9 10 6 \\n16 14 8 7 \\n'), ('2\\n', '-1\\n'), ('3\\n', '1 7 9 \\n3 2 5 \\n4 8 6 \\n'), ('5\\n', '1 2 3 4 5 \\n10 9 8 7 6 \\n11 16 17 23 25 \\n12 15 19 18 21 \\n13 14 20 24 22 \\n'), ('6\\n', '1 2 3 4 5 6 \\n12 11 10 9 8 7 \\n13 14 15 16 17 18 \\n33 35 31 25 24 19 \\n32 29 30 26 23 20 \\n36 34 28 27 22 21 \\n'), ('7\\n', '1 2 3 4 5 6 7 \\n14 13 12 11 10 9 8 \\n15 16 17 18 19 20 21 \\n28 27 26 25 24 23 22 \\n29 34 35 40 41 47 49 \\n30 33 36 39 43 42 45 \\n31 32 37 38 44 48 46 \\n'), ('8\\n', '1 2 3 4 5 6 7 8 \\n16 15 14 13 12 11 10 9 \\n17 18 19 20 21 22 23 24 \\n32 31 30 29 28 27 26 25 \\n33 34 35 36 37 38 39 40 \\n61 63 59 53 52 47 46 41 \\n60 57 58 54 51 48 45 42 \\n64 62 56 55 50 49 44 43 \\n'), ('9\\n', '1 2 3 4 5 6 7 8 9 \\n18 17 16 15 14 13 12 11 10 \\n19 20 21 22 23 24 25 26 27 \\n36 35 34 33 32 31 30 29 28 \\n37 38 39 40 41 42 43 44 45 \\n54 53 52 51 50 49 48 47 46 \\n55 60 61 66 67 72 73 79 81 \\n56 59 62 65 68 71 75 74 77 \\n57 58 63 64 69 70 76 80 78 \\n'), ('10\\n', '1 2 3 4 5 6 7 8 9 10 \\n20 19 18 17 16 15 14 13 12 11 \\n21 22 23 24 25 26 27 28 29 30 \\n40 39 38 37 36 35 34 33 32 31 \\n41 42 43 44 45 46 47 48 49 50 \\n60 59 58 57 56 55 54 53 52 51 \\n61 62 63 64 65 66 67 68 69 70 \\n97 99 95 89 88 83 82 77 76 71 \\n96 93 94 90 87 84 81 78 75 72 \\n100 98 92 91 86 85 80 79 74 73 \\n'), ('11\\n', '1 2 3 4 5 6 7 8 9 10 11 \\n22 21 20 19 18 17 16 15 14 13 12 \\n23 24 25 26 27 28 29 30 31 32 33 \\n44 43 42 41 40 39 38 37 36 35 34 \\n45 46 47 48 49 50 51 52 53 54 55 \\n66 65 64 63 62 61 60 59 58 57 56 \\n67 68 69 70 71 72 73 74 75 76 77 \\n88 87 86 85 84 83 82 81 80 79 78 \\n89 94 95 100 101 106 107 112 113 119 121 \\n90 93 96 99 102 105 108 111 115 114 117 \\n91 92 97 98 103 104 109 110 116 120 118 \\n'), ('12\\n', '1 2 3 4 5 6 7 8 9 10 11 12 \\n24 23 22 21 20 19 18 17 16 15 14 13 \\n25 26 27 28 29 30 31 32 33 34 35 36 \\n48 47 46 45 44 43 42 41 40 39 38 37 \\n49 50 51 52 53 54 55 56 57 58 59 60 \\n72 71 70 69 68 67 66 65 64 63 62 61 \\n73 74 75 76 77 78 79 80 81 82 83 84 \\n96 95 94 93 92 91 90 89 88 87 86 85 \\n97 98 99 100 101 102 103 104 105 106 107 108 \\n141 143 139 133 132 127 126 121 120 115 114 109 \\n140 137 138 134 131 128 125 122 119 116 113 110 \\n144 142 136 135 130 129 124 123 118 117 112 111 \\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Road to 1600", "tag": "Others", "detailed_tag": "brute force", "rating": 2266.17854933548}
{"task_id": "E2H_CF1542E2", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 403458273\\n', '17\\n'), ('500 1\\n', '0\\n'), ('500 2\\n', '0\\n'), ('500 1000000000\\n', '403758798\\n'), ('4 1\\n', '0\\n'), ('1 1\\n', '0\\n'), ('2 1\\n', '0\\n'), ('1 167959139\\n', '0\\n'), ('2 641009859\\n', '0\\n'), ('3 524125987\\n', '0\\n'), ('4 702209411\\n', '17\\n'), ('5 585325539\\n', '904\\n'), ('6 58376259\\n', '45926\\n'), ('7 941492387\\n', '2725016\\n'), ('8 824608515\\n', '196884712\\n'), ('9 2691939\\n', '1124976\\n'), ('10 802030518\\n', '754910371\\n'), ('85 676225761\\n', '309176546\\n'), ('144 435602783\\n', '314269171\\n'), ('199 158791285\\n', '21468342\\n'), ('233 330436384\\n', '161830261\\n'), ('283 458175062\\n', '191410709\\n'), ('324 286469538\\n', '126984237\\n'), ('377 358523896\\n', '185327697\\n'), ('480 71022479\\n', '50578390\\n'), ('490 16364697\\n', '5750437\\n'), ('499 29180922\\n', '16940580\\n'), ('500 570226789\\n', '309463818\\n'), ('11 685146646\\n', '534097912\\n'), ('12 863230070\\n', '612906984\\n'), ('13 41313494\\n', '32605755\\n'), ('14 219396918\\n', '172486793\\n'), ('15 102513046\\n', '13918577\\n'), ('16 985629174\\n', '794805824\\n'), ('17 458679894\\n', '127170952\\n'), ('18 341796022\\n', '261190161\\n'), ('19 519879446\\n', '105365940\\n'), ('20 452405440\\n', '386692452\\n'), ('40 43603670\\n', '8542941\\n'), ('42 399770518\\n', '301108922\\n'), ('103 925379796\\n', '434825085\\n'), ('105 281546644\\n', '212316632\\n'), ('111 954746654\\n', '424464610\\n'), ('125 872744873\\n', '674985974\\n'), ('140 18236383\\n', '14226907\\n'), ('170 554776831\\n', '261316079\\n'), ('177 211426207\\n', '168418232\\n'), ('183 884626218\\n', '356344824\\n'), ('195 741424885\\n', '297224876\\n'), ('197 802624437\\n', '235827120\\n'), ('207 211262336\\n', '69003460\\n'), ('213 589495051\\n', '395534279\\n'), ('246 365318475\\n', '61467279\\n'), ('249 604601451\\n', '255353490\\n'), ('257 339001014\\n', '50567978\\n'), ('275 723775499\\n', '198745587\\n'), ('284 341291190\\n', '134723005\\n'), ('292 75690753\\n', '61178751\\n'), ('302 484328652\\n', '204230146\\n'), ('332 725901805\\n', '543014324\\n'), ('365 501725229\\n', '29577792\\n'), ('370 701874520\\n', '85077156\\n'), ('387 154123011\\n', '3163711\\n'), ('410 352085571\\n', '251864653\\n'), ('413 886335843\\n', '848191211\\n'), ('442 95049764\\n', '84477907\\n'), ('470 275423364\\n', '86380650\\n'), ('481 544073199\\n', '511573391\\n'), ('482 427189327\\n', '375910977\\n'), ('483 605272751\\n', '516114874\\n'), ('484 488388879\\n', '404396572\\n'), ('485 961439599\\n', '572822060\\n'), ('486 844555727\\n', '475008225\\n'), ('487 22639151\\n', '5241678\\n'), ('488 200722575\\n', '80869161\\n'), ('489 83838703\\n', '64387688\\n'), ('491 194448122\\n', '42613704\\n'), ('492 77564250\\n', '11787983\\n'), ('493 255647674\\n', '156337302\\n'), ('494 433731098\\n', '297614712\\n'), ('495 611814522\\n', '34391986\\n'), ('496 494930650\\n', '236237125\\n'), ('497 673014074\\n', '169088040\\n'), ('498 851097498\\n', '297711052\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Abnormal Permutation Pairs (hard version)", "tag": "Math", "detailed_tag": "fft", "rating": 2528.995807114179}
{"task_id": "E2H_CF1162A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\\n', '14\\n'), ('4 10 2\\n2 3 8\\n3 4 7\\n', '262\\n'), ('50 50 1\\n1 50 0\\n', '0\\n'), ('50 50 50\\n17 40 12\\n33 36 47\\n8 43 35\\n25 29 42\\n18 36 6\\n25 35 18\\n36 48 47\\n17 40 13\\n20 27 37\\n32 32 28\\n17 20 13\\n4 14 6\\n13 18 47\\n18 45 28\\n3 50 45\\n6 6 6\\n3 25 36\\n28 48 42\\n14 34 32\\n28 41 35\\n29 35 25\\n25 48 24\\n32 40 40\\n18 38 44\\n6 16 2\\n1 36 7\\n14 48 2\\n18 29 40\\n11 16 37\\n8 40 19\\n12 16 44\\n44 46 21\\n19 24 26\\n24 45 44\\n22 22 15\\n6 15 32\\n19 42 7\\n21 33 20\\n1 13 26\\n16 27 40\\n46 48 30\\n21 39 1\\n1 9 32\\n14 34 20\\n35 38 11\\n19 47 23\\n13 38 15\\n28 29 28\\n7 20 40\\n2 21 46\\n', '4384\\n'), ('50 50 50\\n20 34 50\\n10 36 27\\n46 49 19\\n15 22 21\\n5 10 21\\n40 47 0\\n26 43 48\\n15 34 5\\n29 48 49\\n2 45 25\\n5 40 42\\n1 27 0\\n43 50 47\\n5 19 23\\n1 42 20\\n18 50 16\\n13 38 14\\n14 30 22\\n5 26 2\\n32 46 15\\n10 49 37\\n33 37 24\\n10 31 45\\n16 45 37\\n22 41 7\\n23 49 29\\n22 44 49\\n3 44 22\\n26 32 4\\n30 40 19\\n19 28 5\\n6 34 14\\n16 21 40\\n12 43 46\\n9 36 42\\n2 19 39\\n13 45 12\\n2 30 6\\n5 28 35\\n18 45 7\\n39 46 29\\n29 43 33\\n3 16 24\\n20 40 24\\n35 36 8\\n2 14 8\\n3 29 47\\n31 32 0\\n27 49 16\\n1 37 45\\n', '1111\\n'), ('50 50 50\\n28 29 9\\n33 43 30\\n12 34 3\\n9 12 26\\n24 39 10\\n12 47 35\\n29 41 47\\n43 44 49\\n19 37 36\\n11 18 46\\n19 42 20\\n9 40 47\\n18 34 22\\n11 20 44\\n5 31 44\\n29 40 0\\n1 26 19\\n7 50 4\\n14 34 48\\n43 48 21\\n12 49 23\\n6 40 47\\n22 37 50\\n39 48 29\\n12 34 13\\n5 10 25\\n30 45 46\\n26 32 29\\n2 4 23\\n7 39 19\\n22 49 42\\n11 29 31\\n23 50 29\\n12 32 47\\n4 13 18\\n24 46 20\\n33 34 44\\n24 35 41\\n39 50 47\\n14 24 49\\n25 44 28\\n23 23 42\\n32 44 40\\n25 42 3\\n25 31 6\\n35 47 18\\n22 49 2\\n38 43 23\\n1 27 16\\n19 23 43\\n', '1786\\n'), ('50 50 50\\n24 31 47\\n2 5 10\\n18 22 39\\n6 48 29\\n30 43 25\\n9 26 19\\n20 40 23\\n27 49 42\\n41 49 50\\n28 39 42\\n35 37 49\\n17 40 40\\n26 38 21\\n8 38 40\\n10 28 19\\n30 41 9\\n2 13 24\\n29 42 36\\n20 49 17\\n3 48 1\\n33 38 10\\n5 37 20\\n7 21 30\\n35 38 22\\n37 38 19\\n16 43 47\\n46 50 16\\n4 13 36\\n18 20 41\\n26 31 19\\n11 34 30\\n20 23 23\\n20 46 19\\n10 43 49\\n27 33 45\\n37 45 27\\n6 12 0\\n38 47 27\\n3 50 6\\n25 41 41\\n2 37 27\\n25 49 24\\n38 44 31\\n31 36 7\\n18 31 3\\n6 33 2\\n19 36 33\\n45 50 48\\n10 21 17\\n8 41 42\\n', '2711\\n'), ('50 50 50\\n26 27 33\\n8 29 15\\n10 31 23\\n7 38 33\\n9 12 39\\n3 18 2\\n11 35 25\\n8 10 33\\n12 19 11\\n9 44 39\\n17 32 27\\n17 49 9\\n13 13 20\\n3 9 36\\n18 20 43\\n24 48 19\\n12 26 1\\n39 49 18\\n11 33 38\\n7 49 7\\n23 38 48\\n20 22 46\\n12 31 34\\n21 41 15\\n3 13 26\\n26 30 18\\n50 50 12\\n20 39 18\\n34 40 10\\n35 45 21\\n28 41 17\\n17 29 40\\n21 30 34\\n16 34 0\\n28 45 21\\n4 36 8\\n31 50 6\\n10 48 12\\n18 42 43\\n43 47 32\\n35 38 27\\n19 26 5\\n5 36 22\\n33 38 38\\n7 24 50\\n20 23 12\\n5 35 40\\n2 7 19\\n38 49 45\\n17 39 40\\n', '3477\\n'), ('50 50 50\\n7 47 45\\n22 24 8\\n31 48 31\\n36 47 13\\n7 25 19\\n2 2 17\\n34 40 14\\n27 33 50\\n31 45 35\\n4 7 4\\n27 30 27\\n4 41 27\\n34 41 15\\n2 12 17\\n2 3 19\\n25 47 47\\n6 43 50\\n4 47 23\\n5 38 30\\n12 43 18\\n8 38 28\\n6 11 13\\n23 35 41\\n2 39 41\\n27 30 1\\n28 49 46\\n15 39 29\\n18 29 22\\n37 39 33\\n7 45 40\\n23 49 19\\n8 12 46\\n21 48 26\\n22 45 27\\n9 35 50\\n10 43 5\\n13 29 22\\n7 36 12\\n18 37 34\\n17 18 3\\n17 27 4\\n44 47 39\\n6 10 34\\n31 48 1\\n32 45 33\\n39 41 43\\n5 40 4\\n8 50 11\\n1 45 42\\n30 35 31\\n', '2960\\n'), ('50 50 50\\n14 41 31\\n28 49 13\\n4 19 15\\n34 41 16\\n37 40 34\\n10 25 1\\n28 35 15\\n2 42 43\\n2 12 47\\n16 25 26\\n21 48 4\\n13 37 22\\n16 26 15\\n30 49 12\\n8 40 45\\n32 33 6\\n6 27 2\\n25 35 5\\n22 42 24\\n6 13 49\\n23 26 14\\n27 42 38\\n9 34 45\\n1 33 35\\n42 44 7\\n5 7 42\\n12 43 25\\n5 42 4\\n7 47 2\\n7 10 40\\n20 34 6\\n2 21 12\\n9 45 15\\n19 45 29\\n4 50 0\\n1 2 12\\n1 47 26\\n8 16 23\\n9 48 45\\n23 28 20\\n12 19 4\\n27 37 46\\n21 47 25\\n33 49 5\\n21 49 6\\n14 32 1\\n5 13 36\\n7 23 34\\n15 34 43\\n2 24 29\\n', '432\\n'), ('50 50 50\\n14 39 43\\n22 27 43\\n9 11 0\\n23 38 21\\n13 32 23\\n19 43 35\\n27 29 15\\n6 31 8\\n19 20 35\\n36 45 22\\n20 26 34\\n13 49 42\\n13 37 40\\n37 45 7\\n16 41 19\\n27 48 15\\n15 41 8\\n33 45 37\\n6 33 45\\n10 18 4\\n12 35 27\\n15 42 37\\n25 28 50\\n19 46 28\\n7 19 12\\n12 44 13\\n1 12 21\\n7 36 11\\n19 29 21\\n6 33 14\\n32 41 44\\n30 46 30\\n1 47 30\\n14 43 31\\n18 37 27\\n11 50 44\\n26 26 7\\n24 31 9\\n9 13 5\\n29 47 12\\n6 17 3\\n3 35 29\\n29 41 42\\n5 27 35\\n14 45 3\\n27 31 37\\n20 33 43\\n18 22 7\\n12 35 44\\n10 24 28\\n', '6751\\n'), ('50 50 50\\n18 30 29\\n39 40 46\\n19 45 35\\n13 32 26\\n11 28 38\\n15 19 18\\n25 32 15\\n15 15 1\\n36 40 48\\n15 48 18\\n7 47 12\\n26 49 37\\n1 8 40\\n5 38 4\\n13 30 18\\n5 21 0\\n9 32 37\\n14 16 44\\n24 45 15\\n18 19 36\\n1 48 14\\n46 49 11\\n2 28 4\\n2 6 21\\n11 49 20\\n22 27 34\\n17 17 43\\n12 35 19\\n33 46 38\\n1 6 15\\n44 45 31\\n37 47 22\\n35 44 20\\n22 45 33\\n28 41 3\\n28 45 0\\n2 47 13\\n25 41 45\\n1 28 14\\n3 47 3\\n15 41 2\\n33 37 37\\n39 45 33\\n11 33 38\\n3 42 50\\n10 48 47\\n3 38 49\\n21 33 31\\n9 41 19\\n33 50 27\\n', '1243\\n'), ('50 50 50\\n13 24 16\\n13 46 26\\n28 37 19\\n2 22 29\\n1 2 2\\n30 31 3\\n16 23 42\\n32 44 45\\n11 44 9\\n19 35 39\\n25 44 41\\n4 35 31\\n33 38 39\\n28 35 25\\n17 26 43\\n17 49 9\\n22 40 42\\n11 44 26\\n29 48 36\\n20 30 41\\n11 32 0\\n15 31 35\\n27 30 34\\n38 47 39\\n23 24 25\\n14 20 30\\n10 25 40\\n5 39 0\\n5 10 7\\n5 20 15\\n3 10 18\\n10 35 39\\n27 45 9\\n18 34 35\\n5 15 30\\n35 41 32\\n23 35 20\\n9 37 30\\n4 39 1\\n2 26 46\\n9 27 1\\n13 31 18\\n10 26 24\\n17 28 17\\n4 42 48\\n24 50 32\\n3 19 29\\n28 35 2\\n20 29 20\\n22 23 24\\n', '2167\\n'), ('50 50 50\\n15 21 1\\n8 40 30\\n25 34 4\\n19 46 8\\n24 32 16\\n2 31 37\\n18 18 43\\n27 42 37\\n7 28 48\\n2 31 36\\n43 45 19\\n8 48 25\\n4 26 13\\n36 42 20\\n15 26 18\\n28 43 18\\n7 32 47\\n18 46 7\\n9 39 5\\n17 35 21\\n21 24 38\\n12 30 34\\n18 49 38\\n28 46 32\\n39 41 31\\n1 26 1\\n14 29 35\\n23 33 7\\n23 32 25\\n1 13 15\\n17 20 5\\n20 21 31\\n11 43 24\\n8 33 37\\n6 19 6\\n34 46 39\\n15 44 25\\n31 50 15\\n11 46 11\\n16 40 12\\n6 8 1\\n25 44 0\\n22 28 15\\n22 30 21\\n30 44 45\\n41 45 41\\n22 35 36\\n39 46 25\\n2 12 21\\n7 41 23\\n', '1022\\n'), ('50 50 50\\n17 17 39\\n11 13 9\\n9 43 39\\n9 35 13\\n23 39 31\\n21 43 21\\n16 17 43\\n2 47 30\\n23 49 9\\n22 47 7\\n20 34 48\\n12 49 20\\n13 29 12\\n3 29 17\\n4 30 42\\n37 40 28\\n16 50 24\\n31 43 40\\n6 26 26\\n22 43 28\\n7 41 24\\n33 35 8\\n17 23 43\\n11 49 25\\n21 42 37\\n34 36 23\\n15 44 31\\n7 7 14\\n4 41 44\\n13 16 16\\n28 36 17\\n19 29 48\\n7 40 14\\n7 32 39\\n1 42 33\\n9 25 21\\n15 48 30\\n1 45 1\\n22 45 21\\n1 22 4\\n47 50 0\\n16 19 8\\n22 38 32\\n24 32 1\\n31 37 43\\n16 36 25\\n5 41 17\\n42 45 49\\n23 32 48\\n21 43 21\\n', '94\\n'), ('50 50 50\\n15 20 50\\n11 36 39\\n1 7 23\\n11 25 16\\n2 8 46\\n44 47 5\\n7 15 20\\n6 35 23\\n21 31 47\\n14 42 3\\n22 44 25\\n7 12 15\\n5 50 13\\n29 29 38\\n4 35 17\\n1 23 37\\n22 32 30\\n17 25 21\\n17 40 47\\n5 31 8\\n46 50 10\\n21 45 32\\n7 47 48\\n9 48 17\\n4 46 43\\n20 42 19\\n2 15 28\\n31 34 48\\n9 22 11\\n4 38 16\\n31 49 4\\n14 34 14\\n41 49 28\\n6 38 41\\n10 38 8\\n16 26 26\\n24 36 37\\n9 17 37\\n37 41 32\\n19 39 47\\n10 33 0\\n20 46 41\\n12 45 22\\n26 34 5\\n27 34 40\\n23 33 10\\n6 17 23\\n3 9 20\\n1 2 49\\n20 39 19\\n', '2327\\n'), ('50 50 50\\n6 28 36\\n12 22 44\\n12 39 7\\n19 50 20\\n27 43 35\\n6 12 38\\n2 6 20\\n15 24 15\\n38 43 8\\n21 22 49\\n15 21 4\\n20 20 8\\n25 42 37\\n22 40 34\\n43 43 17\\n17 21 22\\n35 41 34\\n10 41 2\\n8 29 17\\n9 24 38\\n14 31 24\\n2 10 32\\n6 20 2\\n41 42 11\\n20 22 49\\n2 7 40\\n16 18 48\\n8 10 4\\n31 40 30\\n4 7 16\\n19 39 42\\n1 8 6\\n37 42 17\\n11 34 43\\n25 29 36\\n6 35 8\\n12 15 42\\n14 35 48\\n33 48 43\\n34 41 38\\n4 18 50\\n10 22 23\\n7 15 13\\n24 40 35\\n23 27 36\\n9 50 19\\n24 30 29\\n8 10 44\\n26 30 50\\n5 23 19\\n', '2979\\n'), ('50 50 50\\n24 50 22\\n26 27 22\\n22 27 43\\n16 48 24\\n27 46 50\\n2 34 22\\n1 4 21\\n33 48 7\\n5 14 21\\n37 43 19\\n8 39 32\\n20 21 4\\n4 34 36\\n12 23 29\\n32 47 42\\n11 32 31\\n4 49 13\\n3 16 35\\n13 44 37\\n17 29 45\\n16 23 10\\n25 33 5\\n1 44 6\\n28 49 30\\n31 47 4\\n13 44 11\\n17 22 45\\n24 40 37\\n11 45 48\\n4 26 17\\n32 50 30\\n2 10 23\\n29 48 31\\n30 50 19\\n16 47 11\\n5 48 14\\n33 41 48\\n8 27 34\\n9 32 27\\n45 47 5\\n2 50 49\\n8 48 31\\n27 47 29\\n27 46 39\\n12 28 34\\n4 25 5\\n43 50 10\\n13 19 16\\n9 46 0\\n41 45 16\\n', '498\\n'), ('50 50 50\\n28 33 44\\n15 17 1\\n25 40 10\\n7 43 38\\n13 23 9\\n4 4 43\\n25 26 43\\n5 41 14\\n1 49 40\\n4 31 18\\n41 45 22\\n38 43 48\\n23 30 45\\n5 13 3\\n1 47 13\\n14 25 33\\n27 32 40\\n23 50 26\\n2 25 20\\n7 41 41\\n31 41 47\\n34 37 7\\n6 37 14\\n23 43 20\\n14 49 31\\n22 25 22\\n12 30 36\\n44 46 32\\n5 48 34\\n17 22 31\\n39 48 14\\n27 34 25\\n20 41 24\\n31 48 9\\n19 30 11\\n45 49 48\\n1 28 35\\n10 16 10\\n36 37 46\\n5 42 48\\n15 50 24\\n12 44 27\\n14 27 9\\n5 37 46\\n33 48 3\\n12 45 8\\n5 15 37\\n1 5 43\\n46 47 4\\n8 49 33\\n', '3080\\n'), ('20 50 20\\n4 5 18\\n14 15 32\\n6 13 46\\n13 19 39\\n2 8 18\\n15 16 29\\n2 8 9\\n1 2 23\\n1 8 8\\n18 18 11\\n10 16 3\\n9 18 44\\n9 19 31\\n2 3 19\\n4 19 12\\n10 17 24\\n9 13 20\\n4 7 10\\n12 20 24\\n3 19 19\\n', '1704\\n'), ('50 20 20\\n4 15 1\\n26 31 15\\n28 40 5\\n16 42 1\\n10 26 10\\n42 42 1\\n21 49 4\\n24 50 10\\n7 32 12\\n5 38 18\\n36 41 14\\n16 44 2\\n23 33 4\\n18 19 15\\n14 21 14\\n18 28 16\\n29 38 13\\n6 17 10\\n6 44 2\\n17 45 1\\n', '1406\\n'), ('20 20 50\\n10 17 9\\n5 10 5\\n9 18 5\\n4 19 8\\n10 18 4\\n5 19 2\\n9 11 0\\n3 9 9\\n11 12 6\\n7 9 7\\n6 19 15\\n7 12 10\\n5 17 18\\n4 9 14\\n11 11 9\\n2 20 8\\n2 16 9\\n5 16 1\\n1 2 5\\n6 9 1\\n8 13 15\\n6 15 18\\n7 13 7\\n13 18 11\\n1 16 17\\n16 20 17\\n2 19 10\\n15 18 0\\n2 14 11\\n1 3 11\\n2 3 3\\n2 16 10\\n6 20 7\\n3 17 2\\n8 13 11\\n7 11 13\\n1 13 14\\n5 16 4\\n2 3 14\\n2 5 4\\n4 10 6\\n10 17 20\\n9 13 4\\n1 5 20\\n7 13 6\\n16 20 9\\n9 16 16\\n5 12 7\\n2 18 14\\n9 13 19\\n', '102\\n'), ('20 50 20\\n3 9 4\\n4 7 11\\n9 14 31\\n1 6 17\\n5 13 33\\n17 19 11\\n13 14 10\\n4 12 16\\n8 19 46\\n8 19 7\\n11 20 32\\n3 18 39\\n1 12 31\\n4 16 15\\n2 15 38\\n1 2 33\\n2 11 25\\n7 14 17\\n3 14 45\\n15 18 50\\n', '2204\\n'), ('50 20 20\\n19 49 15\\n8 29 12\\n28 33 20\\n5 40 14\\n1 45 14\\n15 50 17\\n20 44 17\\n11 18 15\\n20 40 6\\n16 21 6\\n12 31 10\\n29 49 5\\n20 44 17\\n16 41 10\\n3 30 9\\n8 36 10\\n45 48 5\\n6 27 12\\n35 44 8\\n21 42 16\\n', '2727\\n'), ('20 20 50\\n1 3 9\\n2 20 19\\n2 5 3\\n2 8 17\\n1 19 16\\n1 19 1\\n17 19 13\\n2 6 6\\n9 12 14\\n15 15 3\\n6 13 7\\n11 17 6\\n12 15 15\\n4 16 5\\n8 13 4\\n6 12 6\\n10 13 1\\n2 20 15\\n9 16 11\\n1 13 16\\n2 12 17\\n13 17 13\\n17 18 9\\n5 6 11\\n5 16 6\\n3 16 0\\n2 10 3\\n2 17 6\\n6 9 4\\n4 11 2\\n5 20 17\\n5 20 9\\n7 20 15\\n5 11 20\\n11 15 12\\n6 18 8\\n9 16 4\\n2 17 14\\n4 8 11\\n8 15 8\\n15 18 20\\n7 14 15\\n5 8 14\\n11 13 20\\n16 17 15\\n1 14 13\\n6 10 11\\n8 19 19\\n8 20 17\\n3 19 2\\n', '86\\n'), ('20 50 20\\n5 9 16\\n17 17 15\\n2 4 15\\n6 20 22\\n3 16 48\\n11 13 46\\n2 3 37\\n7 9 8\\n16 20 7\\n11 19 3\\n6 19 11\\n3 18 34\\n7 19 5\\n7 17 37\\n4 16 12\\n13 16 42\\n18 20 4\\n3 8 50\\n9 14 15\\n17 19 5\\n', '3556\\n'), ('50 20 20\\n22 39 19\\n23 37 18\\n16 38 9\\n30 49 15\\n14 31 5\\n1 29 16\\n10 46 9\\n27 40 16\\n3 42 1\\n33 38 6\\n18 40 6\\n3 34 5\\n8 23 14\\n5 9 14\\n4 34 8\\n1 48 16\\n4 15 18\\n9 46 18\\n18 29 14\\n25 47 20\\n', '1951\\n'), ('20 20 50\\n1 13 18\\n1 18 9\\n4 6 13\\n2 7 17\\n8 8 7\\n5 11 17\\n8 18 5\\n8 18 11\\n1 9 9\\n6 15 12\\n15 17 3\\n2 15 10\\n11 16 19\\n2 17 13\\n8 16 15\\n6 7 0\\n4 8 14\\n5 8 0\\n10 20 13\\n6 12 3\\n11 16 19\\n4 14 20\\n1 17 11\\n7 15 7\\n11 17 8\\n6 17 7\\n6 16 17\\n5 16 3\\n17 18 2\\n6 14 14\\n12 16 2\\n2 11 16\\n2 7 11\\n1 14 4\\n6 13 1\\n1 17 10\\n8 16 19\\n9 13 16\\n13 14 3\\n8 19 12\\n9 16 16\\n5 10 17\\n5 18 12\\n1 17 15\\n3 7 0\\n17 18 4\\n4 19 16\\n6 18 9\\n2 19 11\\n1 4 11\\n', '347\\n'), ('3 3 4\\n1 3 1\\n1 1 3\\n2 2 3\\n3 3 3\\n', '3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Zoning Restrictions Again", "tag": "Implement", "detailed_tag": "implementation", "rating": 742.5988468516758}
{"task_id": "E2H_CF1769B1", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1\\n6\\n', '0\\n16\\n33\\n50\\n66\\n83\\n100\\n'), ('2\\n100 500\\n', '0\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('4\\n1000 2 2 998\\n', '0\\n50\\n99\\n100\\n'), ('6\\n170 130 400 256 30 100\\n', '0\\n17\\n43\\n44\\n84\\n90\\n99\\n100\\n'), ('1\\n1\\n', '0\\n100\\n'), ('1\\n42\\n', '0\\n2\\n4\\n7\\n9\\n11\\n14\\n16\\n19\\n21\\n23\\n26\\n28\\n30\\n33\\n35\\n38\\n40\\n42\\n45\\n47\\n50\\n52\\n54\\n57\\n59\\n61\\n64\\n66\\n69\\n71\\n73\\n76\\n78\\n80\\n83\\n85\\n88\\n90\\n92\\n95\\n97\\n100\\n'), ('1\\n99\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n100\\n'), ('1\\n100\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('1\\n1000\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('2\\n224 995\\n', '0\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('3\\n217 62 208\\n', '0\\n50\\n51\\n99\\n100\\n'), ('5\\n202 92 486 785 813\\n', '0\\n8\\n15\\n48\\n49\\n99\\n100\\n'), ('8\\n180 892 308 13 552 829 219 2\\n', '0\\n8\\n39\\n40\\n46\\n56\\n57\\n89\\n90\\n99\\n100\\n'), ('13\\n335 304 419 502 164 58 407 9 733 183 32 530 273\\n', '0\\n9\\n18\\n30\\n41\\n44\\n50\\n55\\n68\\n77\\n91\\n92\\n99\\n100\\n'), ('21\\n37 455 296 1 687 284 569 940 342 793 231 879 204 838 505 268 113 415 94 520 528\\n', '0\\n5\\n9\\n16\\n20\\n28\\n29\\n37\\n43\\n44\\n50\\n56\\n57\\n62\\n69\\n70\\n77\\n80\\n82\\n86\\n88\\n93\\n99\\n100\\n'), ('34\\n487 539 169 900 162 652 256 487 672 715 583 90 357 982 115 136 519 730 534 407 266 512 293 936 925 458 985 346 811 635 783 760 83 396\\n', '0\\n2\\n5\\n7\\n11\\n13\\n16\\n18\\n21\\n25\\n29\\n31\\n32\\n36\\n40\\n42\\n46\\n49\\n52\\n54\\n56\\n59\\n63\\n68\\n72\\n77\\n79\\n80\\n84\\n88\\n92\\n97\\n99\\n100\\n'), ('55\\n150 285 24 809 55 247 401 156 19 247 133 59 952 781 206 895 802 701 680 263 702 406 931 619 592 597 877 618 101 440 789 141 594 268 305 258 547 432 545 706 829 671 9 939 772 626 67 798 189 540 259 834 670 244 481\\n', '0\\n1\\n5\\n6\\n7\\n8\\n9\\n10\\n13\\n16\\n17\\n21\\n24\\n27\\n29\\n30\\n33\\n35\\n38\\n40\\n41\\n43\\n46\\n49\\n50\\n51\\n53\\n54\\n55\\n57\\n58\\n59\\n60\\n62\\n64\\n66\\n68\\n69\\n72\\n74\\n78\\n81\\n84\\n87\\n88\\n90\\n91\\n94\\n97\\n98\\n99\\n100\\n'), ('89\\n455 604 559 426 527 210 424 964 185 700 331 831 893 211 395 115 299 794 74 902 981 975 738 320 64 782 932 39 799 334 485 92 840 290 60 157 180 969 598 113 555 718 451 751 166 264 494 543 867 787 696 199 661 646 997 351 666 627 301 181 211 907 221 218 175 615 708 388 448 872 838 210 180 319 84 867 293 573 146 15 866 741 240 556 884 837 586 514 306\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n9\\n11\\n12\\n14\\n16\\n17\\n18\\n20\\n22\\n25\\n27\\n28\\n29\\n31\\n33\\n35\\n36\\n37\\n39\\n40\\n41\\n43\\n44\\n46\\n47\\n48\\n50\\n51\\n52\\n54\\n56\\n57\\n58\\n59\\n61\\n63\\n64\\n65\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n75\\n76\\n77\\n79\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n89\\n90\\n91\\n92\\n94\\n96\\n98\\n99\\n100\\n'), ('100\\n856 28 289 393 573 739 551 716 706 728 984 154 780 225 485 59 645 274 834 837 58 824 861 791 622 64 354 831 205 462 753 461 762 510 630 685 665 55 905 321 877 899 140 229 227 641 160 921 414 547 352 851 81 416 683 74 144 267 334 260 935 314 48 953 753 736 101 581 578 499 796 562 574 510 457 692 456 121 227 651 403 148 839 132 901 536 291 497 967 446 628 908 742 829 713 32 453 944 149 592\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n8\\n9\\n10\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n37\\n38\\n40\\n41\\n42\\n44\\n45\\n46\\n47\\n48\\n50\\n51\\n53\\n54\\n55\\n56\\n57\\n59\\n60\\n61\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n84\\n85\\n87\\n88\\n89\\n91\\n92\\n94\\n95\\n96\\n98\\n99\\n100\\n'), ('100\\n570 961 604 907 921 860 473 224 284 895 374 268 642 225 241 997 781 440 515 787 489 205 749 370 337 548 992 210 587 940 863 806 962 481 906 925 381 136 592 199 339 256 857 317 755 986 913 831 577 281 531 147 600 138 331 521 720 453 601 600 984 310 464 758 634 891 557 830 628 196 219 311 746 719 375 587 835 924 995 798 596 518 911 143 245 622 545 463 214 788 425 345 375 964 674 954 824 532 161 749\\n', '0\\n1\\n2\\n3\\n5\\n6\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n30\\n31\\n33\\n34\\n35\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n47\\n48\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n60\\n61\\n62\\n64\\n65\\n66\\n67\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n79\\n80\\n81\\n82\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n93\\n94\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n906 975 952 718 748 924 784 978 890 869 628 930 646 517 976 865 970 667 794 628 768 973 959 934 820 882 571 958 520 876 857 529 695 537 755 777 807 632 803 517 928 875 507 822 954 702 500 879 775 568 680 770 607 948 590 731 502 519 711 540 698 579 802 919 988 890 579 937 502 573 976 582 517 678 609 754 562 750 610 785 832 945 580 655 668 522 599 786 984 591 991 508 717 721 689 663 968 877 952 832\\n', '0\\n1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n862 800 972 856 805 853 838 990 937 901 848 854 824 898 945 838 940 964 942 877 970 913 999 968 875 974 921 889 832 811 894 856 852 975 828 823 821 948 814 867 937 870 985 965 979 967 910 829 923 894 919 987 811 990 864 896 836 857 912 995 967 929 864 979 892 852 869 946 860 845 954 806 831 927 961 990 982 879 898 839 920 840 928 972 915 885 880 809 982 868 858 898 890 970 938 830 994 977 804 934\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n98\\n99\\n100\\n'), ('100\\n975 976 991 973 951 991 930 942 921 904 990 923 952 987 929 994 920 939 950 968 955 992 900 900 975 921 992 927 937 905 991 962 975 977 918 929 910 959 935 980 986 917 994 990 940 943 989 943 907 991 962 901 937 935 934 941 995 977 996 967 963 962 989 946 940 917 984 985 968 929 959 913 958 943 948 948 922 972 942 903 983 917 959 917 956 979 952 988 938 982 978 925 970 903 935 907 933 956 920 978\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n1000 980 967 974 970 988 994 952 951 958 980 982 972 963 974 985 971 961 997 974 968 986 974 993 991 959 1000 999 990 966 964 957 990 982 958 988 981 965 951 959 998 988 977 970 958 988 982 999 995 963 964 972 963 1000 958 983 988 984 967 990 968 994 957 971 971 981 992 972 991 994 988 995 991 955 986 959 980 960 995 999 962 954 982 954 984 974 958 952 997 986 965 992 988 951 968 977 970 997 977 965\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n981 996 986 993 996 986 987 984 993 983 990 986 995 996 999 994 996 989 989 998 993 993 999 981 988 993 980 981 984 984 999 995 997 985 992 1000 988 993 981 983 981 984 987 984 985 985 980 985 983 999 989 981 981 987 984 991 989 996 980 994 989 1000 986 983 993 987 998 997 987 999 982 982 994 995 991 984 996 999 991 982 989 985 1000 989 990 996 995 984 994 990 999 986 982 998 995 987 994 982 1000 988\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n991 997 994 994 995 1000 992 994 993 992 994 990 997 990 998 992 997 991 997 998 995 998 1000 991 992 991 991 1000 999 995 990 996 996 993 996 994 998 999 999 996 995 998 991 992 998 994 998 997 990 992 994 996 998 999 998 996 992 991 998 998 997 993 990 1000 999 996 994 999 999 991 992 992 993 996 1000 996 999 997 996 999 990 991 998 990 991 999 997 1000 993 997 999 997 990 998 990 999 999 991 992 991\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n998 999 999 999 1000 998 1000 998 1000 998 1000 999 998 998 999 999 999 999 999 999 998 1000 1000 998 1000 998 1000 998 1000 998 999 1000 998 999 998 998 1000 998 1000 998 998 998 1000 1000 998 998 999 999 998 998 1000 1000 999 999 998 998 998 999 998 1000 998 998 1000 1000 999 999 1000 1000 999 999 998 998 1000 998 1000 999 999 998 1000 999 1000 999 1000 998 1000 998 998 999 998 1000 998 1000 998 998 998 1000 1000 998 998 998\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n1000 999 999 1000 999 999 1000 999 999 1000 999 1000 999 1000 1000 1000 999 999 999 1000 1000 999 999 1000 1000 1000 1000 1000 999 999 1000 999 999 1000 1000 1000 999 999 1000 999 999 999 1000 999 999 1000 999 999 999 1000 1000 1000 999 999 1000 1000 1000 1000 1000 1000 999 999 999 999 999 999 1000 1000 1000 999 1000 1000 999 999 1000 999 999 1000 1000 999 999 1000 999 999 1000 999 1000 999 1000 1000 999 1000 999 999 1000 999 999 1000 999 999\\n', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\nn', '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n184 337 475 405 101 101 294 85 245 80 20 308 395 447 159 39 5 423 71 459 137 133 11 385 125 455 199 22 143 220 317 480 218 172 31 364 291 369 490 218 432 67 235 352 149 349 492 331 70 402 351 271 422 49 240 312 247 142 155 348 48 387 451 350 22 195 497 210 427 122 29 234 402 490 19 135 128 496 396 322 269 261 131 296 65 194 496 122 236 13 212 482 251 273 247 160 304 250 345 401\\n', '0\\n2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n13\\n14\\n16\\n18\\n19\\n21\\n23\\n24\\n25\\n27\\n29\\n30\\n32\\n33\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n44\\n46\\n47\\n49\\n50\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n61\\n63\\n64\\n65\\n67\\n68\\n69\\n70\\n71\\n73\\n74\\n75\\n76\\n78\\n79\\n80\\n82\\n83\\n84\\n86\\n87\\n88\\n89\\n90\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n55 80 46 36 82 55 30 115 98 158 189 137 91 90 12 80 142 165 36 17 200 101 173 110 96 195 24 177 28 46 189 3 117 141 14 70 70 56 162 27 185 112 163 174 2 11 168 180 178 153 100 108 141 57 133 43 180 85 126 126 108 169 117 60 142 48 126 122 21 71 174 77 163 168 24 163 76 145 68 75 8 74 155 88 157 91 156 66 68 115 75 60 64 138 172 119 58 128 92 182\\n', '0\\n2\\n3\\n4\\n5\\n7\\n9\\n10\\n11\\n12\\n13\\n14\\n16\\n18\\n19\\n21\\n22\\n23\\n25\\n28\\n29\\n31\\n32\\n33\\n34\\n36\\n38\\n39\\n41\\n42\\n44\\n46\\n48\\n49\\n50\\n51\\n52\\n53\\n55\\n56\\n57\\n58\\n60\\n61\\n62\\n63\\n64\\n66\\n67\\n70\\n71\\n72\\n74\\n76\\n77\\n78\\n79\\n81\\n82\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n92\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n'), ('100\\n3 22 65 75 5 71 42 55 16 14 42 47 54 71 95 57 80 43 92 69 18 92 94 49 80 74 59 69 58 31 19 16 80 41 18 41 95 19 51 31 74 27 5 85 18 99 28 58 19 35 52 23 25 61 95 56 59 42 22 15 95 30 27 29 84 63 98 23 87 26 87 62 59 93 94 3 93 100 52 28 56 44 27 53 90 15 10 16 49 77 54 49 3 29 78 11 7 94 68 9\\n', '0\\n1\\n4\\n5\\n6\\n7\\n8\\n9\\n11\\n16\\n17\\n21\\n22\\n24\\n25\\n27\\n28\\n31\\n32\\n33\\n36\\n37\\n39\\n41\\n43\\n44\\n45\\n48\\n50\\n52\\n54\\n55\\n57\\n60\\n62\\n63\\n66\\n68\\n69\\n71\\n72\\n75\\n77\\n79\\n81\\n82\\n85\\n86\\n88\\n92\\n93\\n96\\n98\\n100\\n'), ('100\\n38 31 25 39 45 11 32 20 43 10 3 18 49 25 6 15 11 30 35 9 24 45 13 28 12 44 40 50 33 27 13 20 17 45 25 34 24 48 12 21 11 44 15 22 44 2 41 44 17 13 6 24 12 23 25 28 48 21 27 48 6 23 10 14 19 47 25 36 7 4 6 45 37 14 14 4 8 42 39 33 47 19 40 7 28 19 42 20 50 5 28 46 46 30 8 3 8 1 21 37\\n', '0\\n9\\n11\\n12\\n16\\n20\\n28\\n30\\n36\\n39\\n41\\n43\\n45\\n48\\n50\\n58\\n62\\n64\\n68\\n69\\n71\\n75\\n76\\n85\\n90\\n93\\n95\\n96\\n100\\n'), ('100\\n16 18 1 12 11 13 6 11 19 11 18 13 4 16 9 12 8 3 9 9 11 18 19 7 8 8 4 11 10 6 17 17 16 7 7 2 13 20 15 12 17 12 11 17 10 9 7 4 8 13 17 10 2 2 14 10 18 15 19 2 5 9 17 12 4 14 1 6 16 5 9 14 11 12 16 14 13 1 10 13 16 10 6 5 13 4 6 15 13 8 15 11 8 9 6 1 1 12 8 20\\n', '0\\n11\\n22\\n40\\n41\\n45\\n47\\n50\\n60\\n66\\n75\\n78\\n80\\n100\\n'), ('100\\n1 6 2 1 2 10 3 6 3 1 7 9 7 4 3 6 6 10 4 3 1 10 1 3 10 3 5 4 5 4 5 1 7 8 4 1 6 5 3 4 6 6 10 3 3 8 9 3 9 2 7 1 7 7 10 6 5 1 4 10 1 10 4 8 8 8 4 4 5 2 8 10 2 1 6 8 1 3 5 8 10 10 1 6 1 9 1 4 2 2 10 2 7 5 8 7 8 10 4 10\\n', '0\\n28\\n33\\n62\\n70\\n100\\n'), ('100\\n1 2 2 1 3 2 2 3 2 2 3 1 2 3 1 3 1 1 1 1 3 3 2 3 1 3 3 1 1 3 3 2 2 3 1 3 3 1 2 2 3 3 3 2 3 1 3 1 1 2 3 3 2 1 3 3 2 2 2 3 3 3 3 2 1 3 1 3 3 3 3 2 2 2 2 2 3 1 3 2 1 1 1 2 1 1 1 3 3 3 2 3 3 2 2 1 1 2 3 1\\n', '0\\n33\\n66\\n100\\n'), ('100\\n2 1 2 1 2 2 1 1 1 1 1 2 2 2 2 1 2 1 1 2 2 1 2 1 1 1 1 2 2 1 1 1 1 1 2 1 1 1 2 2 2 2 1 2 2 2 2 1 2 2 1 2 2 2 1 2 2 1 2 2 2 1 1 1 2 2 2 2 1 2 2 1 1 1 2 2 2 2 2 1 1 1 1 1 2 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1\\n', '0\\n50\\n100\\n'), ('100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n', '0\\n100\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Копирование файлов I", "tag": "Math", "detailed_tag": "*special", "rating": 1000.0}
{"task_id": "E2H_CF960A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('aaabccc\\n', 'YES\\n'), ('bbacc\\n', 'NO\\n'), ('aabc\\n', 'YES\\n'), ('aabbcc\\n', 'YES\\n'), ('aaacccbb\\n', 'NO\\n'), ('abc\\n', 'YES\\n'), ('acba\\n', 'NO\\n'), ('bbabbc\\n', 'NO\\n'), ('bbbabacca\\n', 'NO\\n'), ('aabcbcaca\\n', 'NO\\n'), ('aaaaabbbbbb\\n', 'NO\\n'), ('c\\n', 'NO\\n'), ('cc\\n', 'NO\\n'), ('bbb\\n', 'NO\\n'), ('bc\\n', 'NO\\n'), ('ccbcc\\n', 'NO\\n'), ('aaa\\n', 'NO\\n'), ('aaccaa\\n', 'NO\\n'), ('a\\n', 'NO\\n'), ('b\\n', 'NO\\n'), ('abca\\n', 'NO\\n'), ('aabbcccc\\n', 'NO\\n'), ('abac\\n', 'NO\\n'), ('abcc\\n', 'NO\\n'), ('abcb\\n', 'NO\\n'), ('aacc\\n', 'NO\\n'), ('aabbaacccc\\n', 'NO\\n'), ('aabb\\n', 'NO\\n'), ('ac\\n', 'NO\\n'), ('abbacc\\n', 'NO\\n'), ('abacc\\n', 'NO\\n'), ('ababc\\n', 'NO\\n'), ('aa\\n', 'NO\\n'), ('aabaccc\\n', 'NO\\n'), ('bbcc\\n', 'NO\\n'), ('aaabcbc\\n', 'NO\\n'), ('acbbc\\n', 'NO\\n'), ('babc\\n', 'NO\\n'), ('bbbcc\\n', 'NO\\n'), ('bbc\\n', 'NO\\n'), ('abababccc\\n', 'NO\\n'), ('ccbbaa\\n', 'NO\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Check the string", "tag": "Implement", "detailed_tag": "implementation", "rating": 1167.2108770992947}
{"task_id": "E2H_CF1006B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('8 3\\n5 4 2 6 5 1 9 2\\n', '20\\n4 1 3\\n'), ('5 1\\n1 1 1 1 1\\n', '1\\n5\\n'), ('4 2\\n1 2000 2000 2\\n', '4000\\n2 2\\n'), ('1 1\\n2000\\n', '2000\\n1\\n'), ('1 1\\n1234\\n', '1234\\n1\\n'), ('3 2\\n1 1 1\\n', '2\\n2 1\\n'), ('4 2\\n3 5 1 1\\n', '8\\n1 3\\n'), ('5 3\\n5 5 6 7 1\\n', '18\\n2 1 2\\n'), ('6 4\\n1 1 1 1 2 2\\n', '6\\n3 1 1 1\\n'), ('5 3\\n5 5 6 6 4\\n', '17\\n2 1 2\\n'), ('16 15\\n14 4 9 12 17 1 1 8 12 13 6 9 17 2 18 12\\n', '154\\n1 1 1 1 1 2 1 1 1 1 1 1 1 1 1\\n'), ('1 1\\n1996\\n', '1996\\n1\\n'), ('5 3\\n5 5 5 9 10\\n', '24\\n3 1 1\\n'), ('18 15\\n18 2 13 1 18 3 2 18 18 20 9 2 20 20 4 20 9 12\\n', '204\\n1 2 2 1 2 1 1 1 1 1 1 1 1 1 1\\n'), ('5 3\\n1 20 20 50 50\\n', '120\\n3 1 1\\n'), ('8 3\\n15 14 11 19 17 14 14 8\\n', '51\\n1 3 4\\n'), ('5 2\\n15 20 6 19 6\\n', '39\\n2 3\\n'), ('6 3\\n5 5 5 5 6 9\\n', '20\\n4 1 1\\n'), ('5 3\\n2 2 2 3 3\\n', '8\\n3 1 1\\n'), ('7 3\\n2 2 2 2 2 3 3\\n', '8\\n5 1 1\\n'), ('6 5\\n1 1 6 6 6 6\\n', '25\\n2 1 1 1 1\\n'), ('8 4\\n1 2 2 2 2 3 4 5\\n', '14\\n5 1 1 1\\n'), ('6 4\\n1 1 1 5 5 5\\n', '16\\n3 1 1 1\\n'), ('6 3\\n1 2 2 2 4 5\\n', '11\\n4 1 1\\n'), ('18 6\\n17 17 19 14 10 20 18 16 6 7 2 15 14 16 13 6 12 11\\n', '107\\n1 1 1 3 1 11\\n'), ('6 3\\n1 1 2 2 3 4\\n', '9\\n4 1 1\\n'), ('8 3\\n5 4 2 5 6 1 9 2\\n', '20\\n4 1 3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Polycarp's Practice", "tag": "Implement", "detailed_tag": "sortings", "rating": 1227.6170853952449}
{"task_id": "E2H_CF736A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2\\n', '1\\n'), ('3\\n', '2\\n'), ('4\\n', '2\\n'), ('10\\n', '4\\n'), ('1000\\n', '14\\n'), ('2500\\n', '15\\n'), ('690000\\n', '27\\n'), ('3000000000\\n', '45\\n'), ('123456789123456789\\n', '81\\n'), ('5\\n', '3\\n'), ('143\\n', '9\\n'), ('144\\n', '10\\n'), ('145\\n', '10\\n'), ('232\\n', '10\\n'), ('233\\n', '11\\n'), ('234\\n', '11\\n'), ('679891637638612257\\n', '84\\n'), ('679891637638612258\\n', '85\\n'), ('679891637638612259\\n', '85\\n'), ('1000000000000000000\\n', '85\\n'), ('10235439547\\n', '47\\n'), ('1240723548\\n', '43\\n'), ('92353046212453\\n', '66\\n'), ('192403205846532\\n', '68\\n'), ('13925230525389\\n', '62\\n'), ('12048230592523\\n', '62\\n'), ('19204385325853\\n', '63\\n'), ('902353283921\\n', '56\\n'), ('793056859214355\\n', '70\\n'), ('982045466234565\\n', '71\\n'), ('126743950353465\\n', '67\\n'), ('12405430465\\n', '47\\n'), ('10238439257768\\n', '61\\n'), ('1728493055346\\n', '58\\n'), ('927553829046\\n', '56\\n'), ('62735129403\\n', '51\\n'), ('71624823950223\\n', '65\\n'), ('8902353464851212\\n', '75\\n'), ('61824012598535\\n', '65\\n'), ('1294902504603347\\n', '71\\n'), ('6\\n', '3\\n'), ('7\\n', '3\\n'), ('8\\n', '4\\n'), ('9\\n', '4\\n'), ('11\\n', '4\\n'), ('12\\n', '4\\n'), ('13\\n', '5\\n'), ('14\\n', '5\\n'), ('15\\n', '5\\n'), ('16\\n', '5\\n'), ('17\\n', '5\\n'), ('18\\n', '5\\n'), ('19\\n', '5\\n'), ('20\\n', '5\\n'), ('21\\n', '6\\n'), ('22\\n', '6\\n'), ('23\\n', '6\\n'), ('355687428096000\\n', '69\\n'), ('576460752303423488\\n', '84\\n'), ('32212254719\\n', '49\\n'), ('26388279066623\\n', '63\\n'), ('618473717761\\n', '56\\n'), ('262406072477\\n', '54\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Tennis Championship", "tag": "Math", "detailed_tag": "combinatorics", "rating": 1521.4465368611902}
{"task_id": "E2H_CF447C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('6\\n7 2 3 1 5 6\\n', '5\\n'), ('10\\n424238336 649760493 681692778 714636916 719885387 804289384 846930887 957747794 596516650 189641422\\n', '9\\n'), ('50\\n804289384 846930887 681692778 714636916 957747794 424238336 719885387 649760493 596516650 189641422 25202363 350490028 783368691 102520060 44897764 967513927 365180541 540383427 304089173 303455737 35005212 521595369 294702568 726956430 336465783 861021531 59961394 89018457 101513930 125898168 131176230 145174068 233665124 278722863 315634023 369133070 468703136 628175012 635723059 653377374 656478043 801979803 859484422 914544920 608413785 756898538 734575199 973594325 149798316 38664371\\n', '19\\n'), ('1\\n1\\n', '1\\n'), ('2\\n1000000000 1000000000\\n', '2\\n'), ('5\\n1 2 3 4 1\\n', '5\\n'), ('10\\n1 2 3 4 5 5 6 7 8 9\\n', '6\\n'), ('5\\n1 1 1 1 1\\n', '2\\n'), ('5\\n1 1 2 3 4\\n', '5\\n'), ('5\\n1 2 3 1 6\\n', '5\\n'), ('1\\n42\\n', '1\\n'), ('5\\n1 2 42 3 4\\n', '4\\n'), ('5\\n1 5 9 6 10\\n', '4\\n'), ('5\\n5 2 3 4 5\\n', '5\\n'), ('3\\n2 1 3\\n', '3\\n'), ('5\\n1 2 3 3 4\\n', '4\\n'), ('8\\n1 2 3 4 1 5 6 7\\n', '5\\n'), ('1\\n3\\n', '1\\n'), ('3\\n5 1 2\\n', '3\\n'), ('4\\n1 4 3 4\\n', '4\\n'), ('6\\n7 2 12 4 5 6\\n', '5\\n'), ('6\\n7 2 3 1 4 5\\n', '4\\n'), ('6\\n2 3 5 5 6 7\\n', '6\\n'), ('5\\n2 4 7 6 8\\n', '5\\n'), ('3\\n3 1 2\\n', '3\\n'), ('3\\n1 1 2\\n', '3\\n'), ('2\\n1 2\\n', '2\\n'), ('5\\n4 1 2 3 4\\n', '5\\n'), ('20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 6\\n', '7\\n'), ('4\\n1 2 1 3\\n', '3\\n'), ('4\\n4 3 1 2\\n', '3\\n'), ('6\\n1 2 2 3 4 5\\n', '5\\n'), ('4\\n1 1 1 2\\n', '3\\n'), ('4\\n5 1 2 3\\n', '4\\n'), ('5\\n9 1 2 3 4\\n', '5\\n'), ('2\\n1 1\\n', '2\\n'), ('5\\n1 3 2 4 5\\n', '4\\n'), ('6\\n1 2 1 2 4 5\\n', '5\\n'), ('10\\n1 1 5 3 2 9 9 7 7 6\\n', '3\\n'), ('6\\n1 2 3 100000 100 101\\n', '6\\n'), ('4\\n3 3 3 4\\n', '3\\n'), ('3\\n4 3 5\\n', '3\\n'), ('5\\n1 3 2 3 4\\n', '4\\n'), ('10\\n1 2 3 4 5 10 10 11 12 13\\n', '10\\n'), ('7\\n11 2 1 2 13 4 14\\n', '5\\n'), ('3\\n5 1 3\\n', '3\\n'), ('4\\n1 5 3 4\\n', '4\\n'), ('10\\n1 2 3 4 100 6 7 8 9 10\\n', '10\\n'), ('3\\n5 3 5\\n', '3\\n'), ('5\\n100 100 7 8 9\\n', '4\\n'), ('5\\n1 2 3 4 5\\n', '5\\n'), ('5\\n1 2 4 4 5\\n', '5\\n'), ('6\\n7 4 5 6 7 8\\n', '6\\n'), ('9\\n3 4 1 6 3 4 5 6 7\\n', '7\\n'), ('3\\n1000 1 2\\n', '3\\n'), ('3\\n20 1 9\\n', '3\\n'), ('6\\n7 2 3 1 4 6\\n', '4\\n'), ('3\\n100 5 10\\n', '3\\n'), ('4\\n2 2 2 3\\n', '3\\n'), ('6\\n4 2 8 1 2 5\\n', '4\\n'), ('3\\n25 1 6\\n', '3\\n'), ('10\\n17 99 23 72 78 36 5 43 95 9\\n', '5\\n'), ('7\\n21 16 22 21 11 13 19\\n', '4\\n'), ('5\\n1 2 5 3 4\\n', '4\\n'), ('6\\n2 2 2 3 4 5\\n', '5\\n'), ('5\\n1 3 1 2 3\\n', '4\\n'), ('3\\n81 33 64\\n', '3\\n'), ('7\\n14 3 3 19 13 19 15\\n', '4\\n'), ('9\\n1 2 3 4 5 42 7 8 9\\n', '9\\n'), ('5\\n2 3 7 5 6\\n', '5\\n'), ('5\\n1 3 3 4 5\\n', '5\\n'), ('6\\n1 5 4 3 4 5\\n', '4\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "DZY Loves Sequences", "tag": "DP", "detailed_tag": "dp", "rating": 1622.6367980552584}
{"task_id": "E2H_CF1152C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('6 10\\n', '2\\n'), ('21 31\\n', '9\\n'), ('5 10\\n', '0\\n'), ('1924 5834\\n', '31\\n'), ('9911 666013\\n', '318140\\n'), ('1 1\\n', '0\\n'), ('69 4295\\n', '2044\\n'), ('948248258 533435433\\n', '296190217\\n'), ('953 1349\\n', '235\\n'), ('999999973 800000007\\n', '199999823\\n'), ('112342324 524224233\\n', '299539585\\n'), ('1021211 59555555\\n', '309115\\n'), ('1000000000 1000000000\\n', '0\\n'), ('199999943 999999973\\n', '200000072\\n'), ('2 999999973\\n', '191\\n'), ('199999973 99999937\\n', '99\\n'), ('851187514 983401693\\n', '74311739\\n'), ('414459569 161124945\\n', '92209679\\n'), ('59774131 414357411\\n', '11142525\\n'), ('588854730 468415815\\n', '13339845\\n'), ('166027408 867208246\\n', '67699538\\n'), ('416882693 26430642\\n', '9064999\\n'), ('63906772 377040487\\n', '40471133\\n'), ('573707893 93108818\\n', '3010997\\n'), ('498599067 627630818\\n', '17527937\\n'), ('41698727 40343\\n', '19511\\n'), ('21184942 66889\\n', '573052\\n'), ('584924132 27895\\n', '34377766\\n'), ('34504222 65532\\n', '54883\\n'), ('397410367 96163\\n', '44330\\n'), ('772116208 99741\\n', '703606\\n'), ('721896242 62189\\n', '150930\\n'), ('480432805 79482\\n', '480273841\\n'), ('526157284 30640\\n', '8006\\n'), ('509022792 57335\\n', '5508\\n'), ('13911 866384789\\n', '488042\\n'), ('43736 145490995\\n', '242015\\n'), ('27522 656219918\\n', '38975\\n'), ('3904 787488950\\n', '577695\\n'), ('64320 203032344\\n', '17588\\n'), ('19430 993947341\\n', '43194827\\n'), ('89229 680338802\\n', '16502224\\n'), ('22648 30366541\\n', '509701\\n'), ('89598 155519475\\n', '1581691\\n'), ('80536 791328168\\n', '4581\\n'), ('55138 453739731\\n', '26632191\\n'), ('20827 81894\\n', '40240\\n'), ('15162 60885\\n', '79\\n'), ('33261 83156\\n', '16634\\n'), ('12567 44055\\n', '3177\\n'), ('36890 51759\\n', '7717\\n'), ('69731 73202\\n', '3160\\n'), ('92037 8625\\n', '643\\n'), ('51783 5491\\n', '6082\\n'), ('39204 15357\\n', '8490\\n'), ('11 16\\n', '4\\n'), ('5 18\\n', '8\\n'), ('1 113\\n', '0\\n'), ('18 102\\n', '3\\n'), ('13 33\\n', '7\\n'), ('22 51\\n', '7\\n'), ('1 114\\n', '0\\n'), ('10 12\\n', '0\\n'), ('24 9\\n', '6\\n'), ('21 1\\n', '0\\n'), ('5 14\\n', '4\\n'), ('273301753 369183717\\n', '14344139\\n'), ('83893226 440673790\\n', '5301915\\n'), ('391320363 805801085\\n', '23160359\\n'), ('350089529 67401533\\n', '3270466\\n'), ('356318639 545297094\\n', '21638271\\n'), ('456039936 216657167\\n', '22725602\\n'), ('200869227 429021875\\n', '27283421\\n'), ('724338885 158040565\\n', '125108595\\n'), ('354798648 439745337\\n', '69934797\\n'), ('152408121 368230838\\n', '63414596\\n'), ('532851498 235555724\\n', '61740050\\n'), ('571244721 233692396\\n', '103859929\\n'), ('434431270 432744926\\n', '645482\\n'), ('845961672 92356861\\n', '661247950\\n'), ('861681496 158472265\\n', '75930812\\n'), ('358415973 475293324\\n', '109093431\\n'), ('179237079 691088384\\n', '332614226\\n'), ('159488527 938932258\\n', '100326050\\n'), ('173726711 47100867\\n', '16212055\\n'), ('113701457 374868637\\n', '16882133\\n'), ('49160468 106133716\\n', '7812780\\n'), ('258834406 21427940\\n', '154466\\n'), ('209853278 238360826\\n', '18207106\\n'), ('833630757 5203048\\n', '823224661\\n'), ('898985699 25761857\\n', '12204397\\n'), ('882561035 53440816\\n', '775679403\\n'), ('844002269 45400923\\n', '353899750\\n'), ('890747621 58942406\\n', '107418637\\n'), ('823409948 63146277\\n', '697117394\\n'), ('806104369 75421522\\n', '5765461\\n'), ('950485973 21039711\\n', '443683420\\n'), ('904189980 653467036\\n', '98701796\\n'), ('986866706 981520552\\n', '2171784\\n'), ('987324114 296975438\\n', '48198900\\n'), ('932939238 454247778\\n', '24443682\\n'), ('997908364 240589278\\n', '138070265\\n'), ('2 3\\n', '0\\n'), ('5 11\\n', '1\\n'), ('2 2\\n', '0\\n'), ('2 6\\n', '0\\n'), ('6 9\\n', '0\\n'), ('1000000000 264865600\\n', '102701600\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Neko does Maths", "tag": "Math", "detailed_tag": "number theory", "rating": 1727.030645379357}
{"task_id": "E2H_CF61C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('10 2\\n1\\n', '1\\n'), ('16 R\\n5\\n', 'V\\n'), ('5 R\\n4\\n', 'IV\\n'), ('2 2\\n1111001\\n', '1111001\\n'), ('12 13\\nA\\n', 'A\\n'), ('6 7\\n12345\\n', '5303\\n'), ('25 12\\nABG\\n', '3951\\n'), ('17 10\\nABACG\\n', '892363\\n'), ('18 R\\nGH\\n', 'CCCV\\n'), ('20 25\\n4E32BB21D812\\n', 'A2II7CL2HDM\\n'), ('15 11\\n760595A635B24\\n', '258AA2604713696\\n'), ('10 22\\n956512026633000\\n', '1E06A57IC4H2\\n'), ('5 9\\n1102101401441324123301\\n', '2733824152181178\\n'), ('23 4\\nDL5K6H78CAH\\n', '2003021332111213003322000\\n'), ('18 R\\n36E\\n', 'MXCIV\\n'), ('13 2\\n1B579528314B30\\n', '10000001011010101001110000001110001011010111010010\\n'), ('8 13\\n20043013541570572\\n', '1B35CBA6B32102\\n'), ('19 24\\n1BH47I158EII\\n', '2NHBDL4ECN2\\n'), ('14 19\\n33BC51B817C55\\n', '1B573FFHHH12\\n'), ('24 10\\nE2E3EA6MJ05\\n', '894488519782085\\n'), ('25 2\\nIBGNAB3C0H\\n', '10000000001001000010100000111011000110101000001\\n'), ('3 R\\n2\\n', 'II\\n'), ('20 20\\n3HBAH9JA9EDE\\n', '3HBAH9JA9EDE\\n'), ('21 21\\n2G3DK3F23905\\n', '2G3DK3F23905\\n'), ('23 R\\n57F\\n', 'MMDCCCXXI\\n'), ('16 6\\n27774848D1D9F\\n', '10500345245142230115\\n'), ('18 7\\nD9D42E745C5A\\n', '351206225505021115\\n'), ('11 R\\n1A8A\\n', 'MMDCXXXIX\\n'), ('12 17\\n567872838B15A5\\n', '105CA323BC110\\n'), ('12 19\\n78613621478844\\n', '71A1E1HB01EB\\n'), ('12 25\\n51B878A1B3A7B8\\n', '5JLBAF5JBEA\\n'), ('12 R\\n17BB\\n', 'MMDCCCLXXIX\\n'), ('20 R\\nFI\\n', 'CCCXVIII\\n'), ('20 5\\n1FAD98HHG13G\\n', '340143030243121422401\\n'), ('19 12\\nEHIAG4GG072\\n', 'A33B813901970\\n'), ('3 R\\n2201120\\n', 'MCMLXXXVI\\n'), ('3 R\\n10210211\\n', 'MMDCCLXXVI\\n'), ('3 R\\n21222\\n', 'CCXV\\n'), ('11 22\\n172A57412774400\\n', '11G8KLBCI95B\\n'), ('17 4\\n1509D9E003C5C\\n', '2223230302121200303102203\\n'), ('2 R\\n101110110111\\n', 'MMCMXCIX\\n'), ('25 R\\n2JA\\n', 'MDCCXXXV\\n'), ('23 R\\n3HK\\n', 'MCMXCVIII\\n'), ('10 22\\n1000000000000000\\n', '1FE6KH3A0F7A\\n'), ('10 2\\n999999999999993\\n', '11100011010111111010100100110001100111111111111001\\n'), ('4 21\\n112233030100132210003330\\n', '5KIIKBEFE1G\\n'), ('4 10\\n112233030100132210003330\\n', '100000000000252\\n'), ('4 5\\n112233030100132210003330\\n', '101101400000000002002\\n'), ('2 R\\n1\\n', 'I\\n'), ('13 15\\n33BCA79805767B\\n', '7A924652EB469\\n'), ('2 10\\n0\\n', '0\\n'), ('25 2\\n0\\n', '0\\n'), ('25 10\\n001\\n', '1\\n'), ('17 17\\n00000000000000000000000000000000000000000000000000000000000000000000000000000\\n', '0\\n'), ('10 R\\n999\\n', 'CMXCIX\\n'), ('2 2\\n0\\n', '0\\n'), ('10 10\\n100000000000\\n', '100000000000\\n'), ('10 10\\n0\\n', '0\\n'), ('10 R\\n900\\n', 'CM\\n'), ('10 11\\n12345678912345\\n', '3A2A855993029\\n'), ('10 2\\n100000000000000\\n', '10110101111001100010000011110100100000000000000\\n'), ('10 R\\n1983\\n', 'MCMLXXXIII\\n'), ('2 R\\n101110111000\\n', 'MMM\\n'), ('10 11\\n1000000000000000\\n', '26A6A368906563A\\n'), ('10 R\\n1137\\n', 'MCXXXVII\\n'), ('10 R\\n100\\n', 'C\\n'), ('10 25\\n12343456543435\\n', '35M8JNIJCA\\n'), ('16 10\\n0523456789ABC\\n', '90384742521532\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Capture Valerian", "tag": "Math", "detailed_tag": "math", "rating": 1981.392667866603}
{"task_id": "E2H_CF60C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('1 0\\n', 'YES\\n1 \\n'), ('2 1\\n1 2 1 3\\n', 'YES\\n1 3 \\n'), ('3 2\\n3 2 1 2\\n3 1 1 10\\n', 'YES\\n5 1 2 \\n'), ('2 1\\n1 2 3 7\\n', 'NO\\n'), ('3 2\\n3 2 1 34\\n3 1 1 26\\n', 'YES\\n13 17 2 \\n'), ('6 2\\n5 4 1 1602\\n2 1 3 897\\n', 'YES\\n3 897 1 1 1602 1 \\n'), ('2 1\\n2 1 1 1820\\n', 'YES\\n1 1820 \\n'), ('2 1\\n1 2 1 1275\\n', 'YES\\n1 1275 \\n'), ('5 2\\n5 2 1 1440\\n1 4 1 3870\\n', 'YES\\n1 1 1 3870 1440 \\n'), ('2 1\\n1 2 6 420\\n', 'YES\\n6 420 \\n'), ('8 16\\n3 2 1 1240\\n6 5 2 964\\n1 6 2 982\\n3 5 2 702\\n7 6 2 2316\\n2 8 1 1739\\n8 1 8 288\\n6 4 2 410\\n1 3 2 730\\n8 5 8 280\\n5 7 2 794\\n8 7 2 2544\\n6 2 1 1587\\n4 1 2 146\\n7 4 2 374\\n2 7 1 1398\\n', 'NO\\n'), ('2 0\\n', 'YES\\n1 1 \\n'), ('16 21\\n9 15 40 1360\\n1 4 1 248235\\n7 13 4 97440\\n6 10 1 97230\\n2 10 1 187530\\n8 3 1 115913\\n2 13 1 428640\\n7 1 1 272020\\n13 15 80 480\\n16 10 1 123690\\n13 10 30 3360\\n12 5 6 9270\\n10 15 10 1680\\n16 9 1 400520\\n8 2 1 509903\\n2 5 1 551874\\n9 2 1 607240\\n14 6 1 441702\\n2 3 1 181279\\n10 3 7 6090\\n10 7 14 12180\\n', 'YES\\n335 893 203 741 618 463 812 571 680 210 1 90 480 954 80 589 \\n'), ('16 32\\n7 13 6 53478\\n11 7 3 18870\\n15 12 1 395039\\n3 7 1 4890\\n7 8 2 87678\\n11 16 3 25125\\n8 14 1 349268\\n7 10 1 8340\\n13 16 6 71016\\n11 12 1 124019\\n15 3 1 4567\\n10 13 1 14006\\n8 3 1 4441\\n2 5 1 7117\\n3 14 1 9662\\n5 13 3 101763\\n11 3 1 1488\\n14 1 1 211319\\n12 1 1 232620\\n5 15 3 57171\\n15 4 3 68727\\n3 4 1 5595\\n6 13 2 315568\\n1 8 2 48424\\n13 1 2 88628\\n2 10 1 361\\n1 10 1 4657\\n13 9 1 363862\\n7 5 3 60888\\n16 9 1 289321\\n15 1 1 99517\\n4 7 3 73155\\n', 'NO\\n'), ('10 32\\n1 4 1 161091\\n2 4 1 393407\\n6 1 1 53178\\n8 3 1 230462\\n8 6 2 50888\\n10 3 3 184515\\n8 2 1 127413\\n3 9 1 198290\\n1 5 3 11889\\n1 3 3 40149\\n4 7 2 485082\\n6 2 1 129841\\n2 10 1 305976\\n10 9 1 206471\\n7 3 1 724710\\n9 4 16 16640\\n8 5 4 17148\\n9 1 1 44944\\n8 10 1 239898\\n4 10 1 740831\\n4 3 1 711532\\n6 3 1 234778\\n2 1 1 66549\\n10 1 33 3828\\n3 5 27 5913\\n5 2 1 87135\\n9 5 8 7360\\n9 6 2 43860\\n10 5 3 54657\\n4 8 4 77200\\n7 5 2 107370\\n10 7 1 754462\\n', 'NO\\n'), ('2 1\\n1 2 1000000 1000000\\n', 'YES\\n1000000 1000000 \\n'), ('4 3\\n1 2 1 5\\n2 3 1 5\\n1 4 5 5\\n', 'YES\\n5 1 5 5 \\n'), ('3 2\\n1 2 8 8\\n1 3 1 48\\n', 'NO\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Mushroom Strife", "tag": "Others", "detailed_tag": "dfs and similar", "rating": 2080.9908666724655}
{"task_id": "E2H_CF1762E", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2\\n', '998244352\\n'), ('1\\n', '0\\n'), ('4\\n', '998244343\\n'), ('10\\n', '948359297\\n'), ('43434\\n', '86232114\\n'), ('3\\n', '0\\n'), ('5\\n', '0\\n'), ('6\\n', '998243641\\n'), ('7\\n', '0\\n'), ('8\\n', '998108849\\n'), ('9\\n', '0\\n'), ('12\\n', '769750303\\n'), ('69\\n', '0\\n'), ('420\\n', '543961847\\n'), ('69420\\n', '715883533\\n'), ('199999\\n', '0\\n'), ('200200\\n', '780261844\\n'), ('434390\\n', '697125291\\n'), ('500000\\n', '228975426\\n'), ('499998\\n', '862736022\\n'), ('499996\\n', '255376517\\n'), ('499994\\n', '421466257\\n'), ('499992\\n', '961084336\\n'), ('399998\\n', '183586511\\n'), ('299998\\n', '164423463\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Tree Sum", "tag": "Math", "detailed_tag": "trees", "rating": 2424.3349209315547}
{"task_id": "E2H_CF141A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('SANTACLAUS\\nDEDMOROZ\\nSANTAMOROZDEDCLAUS\\n', 'YES\\n'), ('PAPAINOEL\\nJOULUPUKKI\\nJOULNAPAOILELUPUKKI\\n', 'NO\\n'), ('BABBONATALE\\nFATHERCHRISTMAS\\nBABCHRISTMASBONATALLEFATHER\\n', 'NO\\n'), ('B\\nA\\nAB\\n', 'YES\\n'), ('ONDOL\\nJNPB\\nONLNJBODP\\n', 'YES\\n'), ('Y\\nW\\nYW\\n', 'YES\\n'), ('OI\\nM\\nIMO\\n', 'YES\\n'), ('VFQRWWWACX\\nGHZJPOQUSXRAQDGOGMR\\nOPAWDOUSGWWCGQXXQAZJRQRGHRMVF\\n', 'YES\\n'), ('JUTCN\\nPIGMZOPMEUFADQBW\\nNWQGZMAIPUPOMCDUB\\n', 'NO\\n'), ('Z\\nO\\nZOCNDOLTBZKQLTBOLDEGXRHZGTTPBJBLSJCVSVXISQZCSFDEBXRCSGBGTHWOVIXYHACAGBRYBKBJAEPIQZHVEGLYH\\n', 'NO\\n'), ('IQ\\nOQ\\nQOQIGGKFNHJSGCGM\\n', 'NO\\n'), ('ROUWANOPNIGTVMIITVMZ\\nOQTUPZMTKUGY\\nVTVNGZITGPUNPMQOOATUUIYIWMMKZOTR\\n', 'YES\\n'), ('OVQELLOGFIOLEHXMEMBJDIGBPGEYFG\\nJNKFPFFIJOFHRIFHXEWYZOPDJBZTJZKBWQTECNHRFSJPJOAPQT\\nYAIPFFFEXJJNEJPLREIGODEGQZVMCOBDFKWTMWJSBEBTOFFQOHIQJLHFNXIGOHEZRZLFOKJBJPTPHPGY\\n', 'YES\\n'), ('NBJGVNGUISUXQTBOBKYHQCOOVQWUXWPXBUDLXPKX\\nNSFQDFUMQDQWQ\\nWXKKVNTDQQFXCUQBIMQGQHSLVGWSBFYBUPOWPBDUUJUXQNOQDNXOX\\n', 'YES\\n'), ('IJHHGKCXWDBRWJUPRDBZJLNTTNWKXLUGJSBWBOAUKWRAQWGFNL\\nNJMWRMBCNPHXTDQQNZ\\nWDNJRCLILNQRHWBANLTXWMJBPKUPGKJDJZAQWKTZFBRCTXHHBNXRGUQUNBNMWODGSJWW\\n', 'YES\\n'), ('SRROWANGUGZHCIEFYMQVTWVOMDWPUZJFRDUMVFHYNHNTTGNXCJ\\nDJYWGLBFCCECXFHOLORDGDCNRHPWXNHXFCXQCEZUHRRNAEKUIX\\nWCUJDNYHNHYOPWMHLDCDYRWBVOGHFFUKOZTXJRXJHRGWICCMRNEVNEGQWTZPNFCSHDRFCFQDCXMHTLUGZAXOFNXNVGUEXIACRERU\\n', 'YES\\n'), ('H\\nJKFGHMIAHNDBMFXWYQLZRSVNOTEGCQSVUBYUOZBTNKTXPFQDCMKAGFITEUGOYDFIYQIORMFJEOJDNTFVIQEBICSNGKOSNLNXJWC\\nBQSVDOGIHCHXSYNYTQFCHNJGYFIXTSOQINZOKSVQJMTKNTGFNXAVTUYEONMBQMGJLEWJOFGEARIOPKFUFCEMUBRBDNIIDFZDCLWK\\n', 'YES\\n'), ('DSWNZRFVXQ\\nPVULCZGOOU\\nUOLVZXNUPOQRZGWFVDSCANQTCLEIE\\n', 'NO\\n'), ('EUHTSCENIPXLTSBMLFHD\\nIZAVSZPDLXOAGESUSE\\nLXAELAZ\\n', 'NO\\n'), ('WYSJFEREGELSKRQRXDXCGBODEFZVSI\\nPEJKMGFLBFFDWRCRFSHVEFLEBTJCVCHRJTLDTISHPOGFWPLEWNYJLMXWIAOTYOXMV\\nHXERTZWLEXTPIOTFRVMEJVYFFJLRPFMXDEBNSGCEOFFCWTKIDDGCFYSJKGLHBORWEPLDRXRSJYBGASSVCMHEEJFLVI\\n', 'NO\\n'), ('EPBMDIUQAAUGLBIETKOKFLMTCVEPETWJRHHYKCKU\\nHGMAETVPCFZYNNKDQXVXUALHYLOTCHM\\nECGXACVKEYMCEDOTMKAUFHLHOMT\\n', 'NO\\n'), ('NUBKQEJHALANSHEIFUZHYEZKKDRFHQKAJHLAOWTZIMOCWOVVDW\\nEFVOBIGAUAUSQGVSNBKNOBDMINODMFSHDL\\nKLAMKNTHBFFOHVKWICHBKNDDQNEISODUSDNLUSIOAVWY\\n', 'NO\\n'), ('VXINHOMEQCATZUGAJEIUIZZLPYFGUTVLNBNWCUVMEENUXKBWBGZTMRJJVJDLVSLBABVCEUDDSQFHOYPYQTWVAGTWOLKYISAGHBMC\\nZMRGXPZSHOGCSAECAPGVOIGCWEOWWOJXLGYRDMPXBLOKZVRACPYQLEQGFQCVYXAGBEBELUTDAYEAGPFKXRULZCKFHZCHVCWIRGPK\\nRCVUXGQVNWFGRUDLLENNDQEJHYYVWMKTLOVIPELKPWCLSQPTAXAYEMGWCBXEVAIZGGDDRBRT\\n', 'NO\\n'), ('PHBDHHWUUTZAHELGSGGOPOQXSXEZIXHZTOKYFBQLBDYWPVCNQSXHEAXRRPVHFJBVBYCJIFOTQTWSUOWXLKMVJJBNLGTVITWTCZZ\\nFUPDLNVIHRWTEEEHOOEC\\nLOUSUUSZCHJBPEWIILUOXEXRQNCJEGTOBRVZLTTZAHTKVEJSNGHFTAYGY\\n', 'NO\\n'), ('GDSLNIIKTO\\nJF\\nPDQYFKDTNOLI\\n', 'NO\\n'), ('AHOKHEKKPJLJIIWJRCGY\\nORELJCSIX\\nZVWPXVFWFSWOXXLIHJKPXIOKRELYE\\n', 'NO\\n'), ('ZWCOJFORBPHXCOVJIDPKVECMHVHCOC\\nTEV\\nJVGTBFTLFVIEPCCHODOFOMCVZHWXVCPEH\\n', 'NO\\n'), ('AGFIGYWJLVMYZGNQHEHWKJIAWBPUAQFERMCDROFN\\nPMJNHMVNRGCYZAVRWNDSMLSZHFNYIUWFPUSKKIGU\\nMCDVPPRXGUAYLSDRHRURZASXUWZSIIEZCPXUVEONKNGNWRYGOSFMCKESMVJZHWWUCHWDQMLASLNNMHAU\\n', 'NO\\n'), ('XLOWVFCZSSXCSYQTIIDKHNTKNKEEDFMDZKXSPVLBIDIREDUAIN\\nZKIWNDGBISDB\\nSLPKLYFYSRNRMOSWYLJJDGFFENPOXYLPZFTQDANKBDNZDIIEWSUTTKYBKVICLG\\n', 'NO\\n'), ('PMUKBTRKFIAYVGBKHZHUSJYSSEPEOEWPOSPJLWLOCTUYZODLTUAFCMVKGQKRRUSOMPAYOTBTFPXYAZXLOADDEJBDLYOTXJCJYTHA\\nTWRRAJLCQJTKOKWCGUH\\nEWDPNXVCXWCDQCOYKKSOYTFSZTOOPKPRDKFJDETKSRAJRVCPDOBWUGPYRJPUWJYWCBLKOOTUPBESTOFXZHTYLLMCAXDYAEBUTAHM\\n', 'NO\\n'), ('QMIMGQRQDMJDPNFEFXSXQMCHEJKTWCTCVZPUAYICOIRYOWKUSIWXJLHDYWSBOITHTMINXFKBKAWZTXXBJIVYCRWKXNKIYKLDDXL\\nV\\nFWACCXBVDOJFIUAVYRALBYJKXXWIIFORRUHKHCXLDBZMXIYJWISFEAWTIQFIZSBXMKNOCQKVKRWDNDAMQSTKYLDNYVTUCGOJXJTW\\n', 'NO\\n'), ('XJXPVOOQODELPPWUISSYVVXRJTYBPDHJNENQEVQNVFIXSESKXVYPVVHPMOSX\\nLEXOPFPVPSZK\\nZVXVPYEYOYXVOISVLXPOVHEQVXPNQJIOPFDTXEUNMPEPPHELNXKKWSVSOXSBPSJDPVJVSRFQ\\n', 'YES\\n'), ('OSKFHGYNQLSRFSAHPXKGPXUHXTRBJNAQRBSSWJVEENLJCDDHFXVCUNPZAIVVO\\nFNUOCXAGRRHNDJAHVVLGGEZQHWARYHENBKHP\\nUOEFNWVXCUNERLKVTHAGPSHKHDYFPYWZHJKHQLSNFBJHVJANRXCNSDUGVDABGHVAOVHBJZXGRACHRXEGNRPQEAPORQSILNXFS\\n', 'YES\\n'), ('VYXYVVACMLPDHONBUTQFZTRREERBLKUJYKAHZRCTRLRCLOZYWVPBRGDQPFPQIF\\nFE\\nRNRPEVDRLYUQFYRZBCQLCYZEABKLRXCJLKVZBVFUEYRATOMDRTHFPGOWQVTIFPPH\\n', 'YES\\n'), ('WYXUZQJQNLASEGLHPMSARWMTTQMQLVAZLGHPIZTRVTCXDXBOLNXZPOFCTEHCXBZ\\nBLQZRRWP\\nGIQZXPLTTMNHQVWPPEAPLOCDMBSTHRCFLCQRRZXLVAOQEGZBRUZJXXZTMAWLZHSLWNQTYXB\\n', 'YES\\n'), ('MKVJTSSTDGKPVVDPYSRJJYEVGKBMSIOKHLZQAEWLRIBINVRDAJIBCEITKDHUCCVY\\nPUJJQFHOGZKTAVNUGKQUHMKTNHCCTI\\nQVJKUSIGTSVYUMOMLEGHWYKSKQTGATTKBNTKCJKJPCAIRJIRMHKBIZISEGFHVUVQZBDERJCVAKDLNTHUDCHONDCVVJIYPP\\n', 'YES\\n'), ('OKNJOEYVMZXJMLVJHCSPLUCNYGTDASKSGKKCRVIDGEIBEWRVBVRVZZTLMCJLXHJIA\\nDJBFVRTARTFZOWN\\nAGHNVUNJVCPLWSVYBJKZSVTFGLELZASLWTIXDDJXCZDICTVIJOTMVEYOVRNMJGRKKHRMEBORAKFCZJBR\\n', 'YES\\n'), ('OQZACLPSAGYDWHFXDFYFRRXWGIEJGSXWUONAFWNFXDTGVNDEWNQPHUXUJNZWWLBPYL\\nOHBKWRFDRQUAFRCMT\\nWIQRYXRJQWWRUWCYXNXALKFZGXFTLOODWRDPGURFUFUQOHPWBASZNVWXNCAGHWEHFYESJNFBMNFDDAPLDGT\\n', 'YES\\n'), ('OVIRQRFQOOWVDEPLCJETWQSINIOPLTLXHSQWUYUJNFBMKDNOSHNJQQCDHZOJVPRYVSV\\nMYYDQKOOYPOOUELCRIT\\nNZSOTVLJTTVQLFHDQEJONEOUOFOLYVSOIYUDNOSIQVIRMVOERCLMYSHPCQKIDRDOQPCUPQBWWRYYOXJWJQPNKH\\n', 'YES\\n'), ('WGMBZWNMSJXNGDUQUJTCNXDSJJLYRDOPEGPQXYUGBESDLFTJRZDDCAAFGCOCYCQMDBWK\\nYOBMOVYTUATTFGJLYUQD\\nDYXVTLQCYFJUNJTUXPUYOPCBCLBWNSDUJRJGWDOJDSQAAMUOJWSYERDYDXYTMTOTMQCGQZDCGNFBALGGDFKZMEBG\\n', 'YES\\n'), ('CWLRBPMEZCXAPUUQFXCUHAQTLPBTXUUKWVXKBHKNSSJFEXLZMXGVFHHVTPYAQYTIKXJJE\\nMUFOSEUEXEQTOVLGDSCWM\\nJUKEQCXOXWEHCGKFPBIGMWVJLXUONFXBYTUAXERYTXKCESKLXAEHVPZMMUFTHLXTTZSDMBJLQPEUWCVUHSQQVUASPF\\n', 'YES\\n'), ('IDQRX\\nWETHO\\nODPDGBHVUVSSISROHQJTUKPUCLXABIZQQPPBPKOSEWGEHRSRRNBAVLYEMZISMWWGKHVTXKUGUXEFBSWOIWUHRJGMWBMHQLDZHBWA\\n', 'NO\\n'), ('IXFDY\\nJRMOU\\nDF\\n', 'NO\\n'), ('JPSPZ\\nUGCUB\\nJMZZZZZZZZ\\n', 'NO\\n'), ('AC\\nA\\nBBA\\n', 'NO\\n'), ('UIKWWKXLSHTOOZOVGXKYSOJEHAUEEG\\nKZXQDWJJWRXFHKJDQHJK\\nXMZHTFOGEXAUJXXJUYVJIFOTKLZHDKELJWERHMGAWGKWAQKEKHIDWGGZVYOHKXRPWSJDPESFJUMKQYWBYUTHQYEFZUGKQOBHYDWB\\n', 'NO\\n'), ('PXWRXRPFLR\\nPJRWWXIVHODV\\nXW\\n', 'NO\\n'), ('CHTAZVHGSHCVIBK\\nEQINEBKXEPYJSAZIMLDF\\nZCZZZZDZMCZZEZDZZEZZZZQZZBZZZOZZCZE\\n', 'NO\\n'), ('GXPZFSELJJNDAXYRV\\nUYBKPMVBSOVOJWMONLTJOJCNQKMTAHEWLHOWIIBH\\nHCWNFWJPEJIWOVPTBMVCRJLSISSVNOHCKLBFMIUAIMASQWPXEYXBOXQGFEMYJLBKDCZIMJNHOJEDGGANIVYKQTUOSOVOPWHVJGXH\\n', 'NO\\n'), ('LFGJCJJDUTUP\\nOVSBILTIYCJCRHKCIXCETJQJJ\\nGIJJTJCLTJJJ\\n', 'NO\\n'), ('GIO\\nPRL\\nPRL\\n', 'NO\\n'), ('A\\nB\\nABC\\n', 'NO\\n'), ('KKK\\nKKK\\nZZZZZ\\n', 'NO\\n'), ('ZMYGQLDBLAPN\\nZFJBKWHROVNPSJQUDFTHOCGREUFLYIWYICD\\nZMJZZEDAZANKZZZZZZEZZBZDZZZZZZKHZZFZZZDZNZMDZZA\\n', 'NO\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Amusing Joke", "tag": "Implement", "detailed_tag": "strings", "rating": 790.0277218115019}
{"task_id": "E2H_CF379A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 2\\n', '7\\n'), ('6 3\\n', '8\\n'), ('1000 1000\\n', '1001\\n'), ('123 5\\n', '153\\n'), ('1000 2\\n', '1999\\n'), ('1 2\\n', '1\\n'), ('1 3\\n', '1\\n'), ('1 4\\n', '1\\n'), ('2 2\\n', '3\\n'), ('3 2\\n', '5\\n'), ('3 3\\n', '4\\n'), ('999 2\\n', '1997\\n'), ('1000 3\\n', '1499\\n'), ('1000 4\\n', '1333\\n'), ('1 1000\\n', '1\\n'), ('80 970\\n', '80\\n'), ('10 4\\n', '13\\n'), ('4 3\\n', '5\\n'), ('91 5\\n', '113\\n'), ('777 17\\n', '825\\n'), ('100 4\\n', '133\\n'), ('5 3\\n', '7\\n'), ('6 4\\n', '7\\n'), ('26 8\\n', '29\\n'), ('9 4\\n', '11\\n'), ('20 3\\n', '29\\n'), ('17 3\\n', '25\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "New Year Candles", "tag": "Implement", "detailed_tag": "implementation", "rating": 966.2590195036164}
{"task_id": "E2H_CF23A", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('abcd\\n', '0\\n'), ('ababa\\n', '3\\n'), ('zzz\\n', '2\\n'), ('kmmm\\n', '2\\n'), ('wzznz\\n', '1\\n'), ('qlzazaaqll\\n', '2\\n'), ('lzggglgpep\\n', '2\\n'), ('iegdlraaidefgegiagrdfhihe\\n', '2\\n'), ('esxpqmdrtidgtkxojuxyrcwxlycywtzbjzpxvbngnlepgzcaeg\\n', '1\\n'), ('garvpaimjdjiivamusjdwfcaoswuhxyyxvrxzajoyihggvuxumaadycfphrzbprraicvjjlsdhojihaw\\n', '2\\n'), ('ckvfndqgkmhcyojaqgdkenmbexufryhqejdhctxujmtrwkpbqxufxamgoeigzfyzbhevpbkvviwntdhqscvkmphnkkljizndnbjt\\n', '3\\n'), ('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\n', '99\\n'), ('ikiikiikikiiikkkkkikkkkiiiiikkiiikkiikiikkkkikkkikikkikiiikkikikiiikikkkiiikkkikkikkikkkkiiikkiiiiii\\n', '10\\n'), ('ovovhoovvhohhhvhhvhhvhovoohovhhoooooovohvooooohvvoooohvvovhhvhovhhvoovhvhvoovovvhooovhhooovohvhhovhv\\n', '8\\n'), ('ccwckkkycccccckwckwkwkwkkkkyycykcccycyckwywcckwykcycykkkwcycwwcykcwkwkwwykwkwcykywwwyyykckkyycckwcwk\\n', '5\\n'), ('ttketfkefktfztezzkzfkkeetkkfktftzktezekkeezkeeetteeteefetefkzzzetekfftkeffzkktffzkzzeftfeezfefzffeef\\n', '4\\n'), ('rtharczpfznrgdnkltchafduydgbgkdjqrmjqyfmpwjwphrtsjbmswkanjlprbnduaqbcjqxlxmkspkhkcnzbqwxonzxxdmoigti\\n', '2\\n'), ('fplrkfklvwdeiynbjgaypekambmbjfnoknlhczhkdmljicookdywdgpnlnqlpunnkebnikgcgcjefeqhknvlynmvjcegvcdgvvdb\\n', '2\\n'), ('txbciieycswqpniwvzipwlottivvnfsysgzvzxwbctcchfpvlbcjikdofhpvsknptpjdbxemtmjcimetkemdbettqnbvzzbdyxxb\\n', '2\\n'), ('fmubmfwefikoxtqvmaavwjxmoqltapexkqxcsztpezfcltqavuicefxovuswmqimuikoppgqpiapqutkczgcvxzutavkujxvpklv\\n', '3\\n'), ('ipsrjylhpkjvlzncfixipstwcicxqygqcfrawpzzvckoveyqhathglblhpkjvlzncfixipfajaqobtzvthmhgbuawoxoknirclxg\\n', '15\\n'), ('kcnjsntjzcbgzjscrsrjkrbytqsrptzspzctjrorsyggrtkcnjsntjzcbgzjscrsrjyqbrtpcgqirsrrjbbbrnyqstnrozcoztt\\n', '20\\n'), ('unhcfnrhsqetuerjqcetrhlsqgfnqfntvkgxsscquolxxroqgtchffyccetrhlsqgfnqfntvkgxsscquolxxroqgtchffhfqvx\\n', '37\\n'), ('kkcckkccckkcckcccckcckkkkcckkkkckkkcckckkkkkckkkkkcckkccckkcckcccckcckkkkcckkkkckkkcckckkkkkckckckkc\\n', '46\\n'), ('mlhsyijxeydqxhtkmpdeqwzogjvxahmssyhfhqessbxzvydbrxdmlhsyijxeydqxhtkmpdeqwzogjvxahmssyhfhqessbxzvydik\\n', '47\\n'), ('abcdefghijklmnopqrstuvwxyz\\n', '0\\n'), ('tttttbttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttmttttttt\\n', '85\\n'), ('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffffffffffffffffffffffffffff\\n', '61\\n'), ('cccccccccccccccccccccccwcccccccccccccccccccccuccccccccccccccnccccccccccccccccccccccccccccccccccccccc\\n', '38\\n'), ('ffffffffffffffffffffffffffufffgfffffffffffffffffffffffffffffffffffffffgffffffftffffffgffffffffffffff\\n', '38\\n'), ('rrrrrrrrrrrrrrrrrrrlhbrrrrrrrrurrrrrrrfrrqrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrewrrrrrrryrrxrrrrrrrrrrr\\n', '33\\n'), ('vyvvvvvvvvzvvvvvzvvvwvvvvrvvvvvvvvvvvvvvvrvvvvvvvvvpkvvpvgvvvvvvvvvvvvvgvvvvvvvvvvvvvvvvvvysvvvbvvvv\\n', '17\\n'), ('cbubbbbbbbbbbfbbbbbbbbjbobbbbbbbbbbibbubbbbjbbbnzgbbzbbfbbbbbbbbbbbfbpbbbbbbbbbbygbbbgbabbbbbbbhibbb\\n', '12\\n'), ('lrqrrrrrrrjrrrrrcdrrgrrmwvrrrrrrrrrxfzrmrmrryrrrurrrdrrrrrrrrrrererrrsrrrrrrrrrrrqrrrrcrrwjsrrlrrrrr\\n', '10\\n'), ('ssssusisisosscssssztzessssyspskjssvosiissussszsosssslsssdsssvssvsssslsssmsfjasjsssssowscsjsssszsspss\\n', '8\\n'), ('uukuuuumueuuuujuukgdhbztuuuubbguuocuozfaunqufjujuguyuuvkuuauubuubuucuvtjuuuuuusduduuuuuuuueunuuuuuzu\\n', '7\\n'), ('jpkkgwklngwqcfzmwkkpcwkkkkkekkkekkkdsykqwjkkkhkkkxdnukkkkkkmkqykkkxqklkskkrkkkkkqqjikkkkkkpknkkkkkoh\\n', '7\\n'), ('bmzbbfbbhqxwthtbbisbbbbbtbbfbbpbfbbpbkbjfbcbbbbzbbbdwmbbbrnvqdbbtbbuglrnbbbbvmbyblebbabibrevaxbbjbqb\\n', '6\\n'), ('qqqmqqqsbteqqopsuqiqumrqzpqnqgqeniqqkyqqyqqqpxzqeqqquhdqquhqqqfqjirqaqqaquxqoqqjqqqqbjbgqcqqqqicnkqc\\n', '4\\n'), ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasaaaavaaaaaaauaaeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n', '44\\n'), ('a\\n', '0\\n'), ('fg\\n', '0\\n'), ('yy\\n', '1\\n'), ('abcabcabc\\n', '6\\n'), ('qwerqwedqwes\\n', '3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "You're Given a String...", "tag": "Greedy", "detailed_tag": "brute force", "rating": 1207.0935117831204}
{"task_id": "E2H_CF820B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 15\\n', '2 1 3\\n'), ('4 67\\n', '2 1 3\\n'), ('4 68\\n', '2 1 4\\n'), ('3 1\\n', '2 1 3\\n'), ('3 180\\n', '2 1 3\\n'), ('100000 1\\n', '2 1 558\\n'), ('100000 180\\n', '2 1 100000\\n'), ('100000 42\\n', '2 1 23335\\n'), ('100000 123\\n', '2 1 68335\\n'), ('5 1\\n', '2 1 3\\n'), ('5 36\\n', '2 1 3\\n'), ('5 54\\n', '2 1 3\\n'), ('5 55\\n', '2 1 4\\n'), ('5 70\\n', '2 1 4\\n'), ('5 89\\n', '2 1 4\\n'), ('5 90\\n', '2 1 4\\n'), ('5 91\\n', '2 1 5\\n'), ('5 111\\n', '2 1 5\\n'), ('5 126\\n', '2 1 5\\n'), ('5 127\\n', '2 1 5\\n'), ('5 141\\n', '2 1 5\\n'), ('5 162\\n', '2 1 5\\n'), ('5 180\\n', '2 1 5\\n'), ('6 46\\n', '2 1 4\\n'), ('6 33\\n', '2 1 3\\n'), ('13 4\\n', '2 1 3\\n'), ('23 11\\n', '2 1 3\\n'), ('11 119\\n', '2 1 9\\n'), ('13 117\\n', '2 1 10\\n'), ('18 174\\n', '2 1 18\\n'), ('8509 139\\n', '2 1 6573\\n'), ('29770 76\\n', '2 1 12572\\n'), ('59115 40\\n', '2 1 13139\\n'), ('68459 88\\n', '2 1 33471\\n'), ('85100 129\\n', '2 1 60990\\n'), ('100000 13\\n', '2 1 7224\\n'), ('100000 35\\n', '2 1 19446\\n'), ('100000 49\\n', '2 1 27224\\n'), ('100000 71\\n', '2 1 39446\\n'), ('100000 79\\n', '2 1 43891\\n'), ('100000 101\\n', '2 1 56113\\n'), ('100000 109\\n', '2 1 60558\\n'), ('100000 143\\n', '2 1 79446\\n'), ('100000 148\\n', '2 1 82224\\n'), ('100000 176\\n', '2 1 97780\\n'), ('4 16\\n', '2 1 3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Mister B and Angle in Polygon", "tag": "Math", "detailed_tag": "geometry", "rating": 1300.0}
{"task_id": "E2H_CF1009B", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('100210\\n', '001120\\n'), ('11222121\\n', '11112222\\n'), ('20\\n', '20\\n'), ('1002\\n', '0012\\n'), ('10\\n', '01\\n'), ('000021\\n', '000012\\n'), ('021\\n', '012\\n'), ('2\\n', '2\\n'), ('201\\n', '120\\n'), ('2112120\\n', '1112220\\n'), ('102\\n', '012\\n'), ('202\\n', '202\\n'), ('220201\\n', '122020\\n'), ('12\\n', '12\\n'), ('100022202\\n', '000122202\\n'), ('01\\n', '01\\n'), ('1\\n', '1\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Minimum Ternary String", "tag": "Implement", "detailed_tag": "greedy", "rating": 1427.0561349080874}
{"task_id": "E2H_CF958E1", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\\n', 'Yes\\n'), ('2 1\\n1 0\\n2 2\\n3 1\\n', 'No\\n'), ('1 1\\n3686 4362\\n-7485 5112\\n', 'Yes\\n'), ('1 2\\n1152 -7324\\n-5137 -35\\n-6045 -5271\\n', 'No\\n'), ('1 3\\n-8824 -9306\\n-5646 -9767\\n8123 9355\\n-6203 -1643\\n', 'No\\n'), ('1 5\\n-8775 6730\\n-3806 -6906\\n-9256 -8240\\n-1320 6849\\n8155 746\\n8284 -7317\\n', 'No\\n'), ('1 8\\n8741 3638\\n381 -9191\\n7534 8792\\n-8848 -414\\n2926 -7444\\n9475 559\\n6938 2359\\n2570 4721\\n3329 -9365\\n', 'No\\n'), ('1 9\\n6207 1655\\n2728 8520\\n9142 3418\\n-1258 -8727\\n5370 3161\\n-5167 -7691\\n517 2242\\n3702 -9904\\n-6862 -2997\\n2524 -5492\\n', 'No\\n'), ('1 10\\n9424 3979\\n-8582 9252\\n-2432 -3287\\n-4247 1932\\n-9491 5544\\n-635 5689\\n8260 -6790\\n8841 3067\\n-5624 -1990\\n1569 1045\\n-8844 -8462\\n', 'No\\n'), ('2 1\\n2893 -5488\\n-5087 -5042\\n-8928 -9453\\n', 'No\\n'), ('2 2\\n359 -29\\n6964 -7332\\n2384 -4529\\n4434 2253\\n', 'Yes\\n'), ('2 3\\n-9617 845\\n4195 -2181\\n-6305 -9903\\n-535 -6060\\n9417 -8419\\n', 'No\\n'), ('2 5\\n-9568 -3121\\n-1408 2942\\n-827 -7497\\n4348 2432\\n-7958 231\\n6440 1896\\n2647 -1305\\n', 'No\\n'), ('2 8\\n7948 3490\\n2779 3512\\n3403 -3024\\n-3180 -4831\\n6815 4601\\n7631 9772\\n-6320 -1060\\n5592 362\\n-785 4040\\n8030 3272\\n', 'No\\n'), ('2 9\\n5414 -8195\\n-5171 -1634\\n5012 4161\\n-5888 -585\\n9258 2646\\n5548 1523\\n7259 -8619\\n9580 5738\\n-8715 706\\n-2232 -3280\\n1866 1775\\n', 'No\\n'), ('2 10\\n-5118 -3971\\n-1169 -9140\\n-7807 -3139\\n9702 -5328\\n8555 3460\\n-1442 -733\\n701 -2802\\n-5784 2578\\n8186 -4810\\n-2722 -1013\\n-9437 4021\\n-5403 -1331\\n', 'No\\n'), ('3 1\\n-8199 -7896\\n7015 -4898\\n-499 -8710\\n9953 -6411\\n', 'No\\n'), ('3 2\\n9268 -9879\\n4245 2515\\n-9188 -3786\\n-2458 -2165\\n3420 463\\n', 'No\\n'), ('3 3\\n-8149 697\\n6593 7667\\n2123 -9160\\n-5165 9523\\n747 -8933\\n-1536 -2691\\n', 'Yes\\n'), ('3 5\\n-658 7030\\n990 3086\\n-4958 -6755\\n7159 -1986\\n5634 -7726\\n1740 -1450\\n1947 7835\\n-2755 -4709\\n', 'No\\n'), ('3 8\\n-3143 -6360\\n-5121 -6641\\n-727 -9723\\n-369 454\\n-9298 4086\\n5787 -1016\\n2683 -9660\\n-1089 1121\\n-4898 7743\\n418 5485\\n7425 -6644\\n', 'No\\n'), ('3 9\\n6882 -8342\\n4669 -8932\\n882 4904\\n-220 4700\\n587 -5311\\n3704 -1823\\n6559 -6921\\n-7399 6497\\n-5387 -5890\\n-9844 -1067\\n5367 -7237\\n-8314 -939\\n', 'No\\n'), ('3 10\\n-7100 -1623\\n-3459 2172\\n9676 1595\\n-6053 4558\\n-842 8819\\n-9691 3144\\n3440 -9112\\n7034 4946\\n4851 -2513\\n430 4372\\n-7175 -3497\\n5719 381\\n-8859 -1347\\n', 'No\\n'), ('5 1\\n9621 -154\\n6694 -2348\\n944 -7225\\n-1568 -5543\\n-3805 -872\\n1204 -2651\\n', 'No\\n'), ('5 2\\n-355 -9579\\n-1256 -4638\\n-4890 7402\\n-1420 -1297\\n-1362 2290\\n-879 9101\\n9514 -6689\\n', 'No\\n'), ('5 3\\n9670 8440\\n1091 -9784\\n6422 4884\\n3314 -9610\\n8523 -7107\\n-2963 8293\\n3092 -3950\\n-4093 -6502\\n', 'No\\n'), ('5 5\\n-2840 4475\\n2931 -6923\\n-659 -8125\\n8197 -1118\\n851 -5899\\n313 6679\\n-9751 6115\\n-6415 4250\\n-227 -9732\\n-6282 5041\\n', 'Yes\\n'), ('5 8\\n-5325 1383\\n-5441 3351\\n-3870 1465\\n669 -8381\\n-4377 5913\\n4360 -329\\n8725 8620\\n7810 -2479\\n4019 4850\\n8052 9911\\n4130 -4668\\n3744 2537\\n-7171 -3933\\n', 'No\\n'), ('5 9\\n-2742 -600\\n6609 8502\\n-5118 6389\\n-4300 5568\\n-1934 -3484\\n9719 -1137\\n2303 -8641\\n1500 2897\\n-6172 -8783\\n-2210 -6939\\n9514 -5262\\n-3773 -4081\\n1983 -4032\\n4503 -3496\\n', 'No\\n'), ('5 10\\n1493 7658\\n-598 7650\\n9226 -964\\n2439 -3114\\n366 2391\\n-1008 -2258\\n6063 8568\\n7488 6824\\n-4674 9523\\n9590 9960\\n-8361 -8234\\n520 -1312\\n-3878 -1142\\n-8261 -239\\n-2346 -2362\\n', 'No\\n'), ('8 1\\n-796 -1\\n3591 -2510\\n-6330 4706\\n-7422 -9093\\n7860 -7002\\n5375 -5310\\n3538 3108\\n-9851 -9798\\n-8884 -170\\n', 'No\\n'), ('8 2\\n-3330 -1983\\n-6621 -4800\\n-4721 9630\\n9871 -4847\\n-2256 -8957\\n3292 -6118\\n4558 -6712\\n-5863 5282\\n-9373 3938\\n-5179 -8073\\n', 'No\\n'), ('8 3\\n6695 8593\\n-7129 352\\n6590 -5447\\n-2540 -3457\\n7630 1647\\n8651 5634\\n-1864 -6829\\n7828 -1901\\n-7005 -9695\\n4561 -4921\\n-4782 -6478\\n', 'No\\n'), ('8 5\\n6744 2367\\n-5290 -7085\\n-491 6662\\n2343 -2407\\n-43 2855\\n-8075 6875\\n-7265 -4206\\n-4197 8851\\n7433 780\\n4038 -8321\\n-1455 -7665\\n3139 -1225\\n9884 -167\\n', 'No\\n'), ('8 8\\n4260 1536\\n-8545 6045\\n-3702 3693\\n-5185 -2228\\n-5271 -5335\\n-4027 4453\\n-8790 8598\\n7172 -5320\\n-880 -4638\\n-1630 -3452\\n2076 8296\\n-9116 -5599\\n2461 9832\\n4268 5116\\n-7582 -805\\n3548 3776\\n', 'Yes\\n'), ('8 9\\n-5716 6995\\n1245 3754\\n7610 8617\\n-451 -5424\\n-2828 5270\\n-6111 6502\\n-2653 1039\\n3718 7498\\n-8810 -7973\\n667 -300\\n-2838 -2001\\n3367 5523\\n-8386 -2827\\n6929 -6260\\n3247 1167\\n1873 6265\\n4376 -8781\\n', 'No\\n'), ('8 10\\n5844 -8156\\n9676 -8121\\n-6302 -1050\\n-4823 -8343\\n4736 -3859\\n9129 5920\\n-3990 2792\\n3615 -8930\\n-7831 -8703\\n-5542 931\\n7599 -7930\\n8705 -8735\\n-6438 1724\\n-7568 -8351\\n5893 2316\\n2574 -9723\\n2416 3827\\n856 -4877\\n', 'No\\n'), ('9 1\\n8114 -9851\\n872 -9807\\n9541 5449\\n7948 -3808\\n8892 -7517\\n-6767 3903\\n-18 -311\\n-3973 5845\\n-3295 3533\\n-4790 -4426\\n', 'No\\n'), ('9 2\\n5580 8167\\n-7078 -4655\\n3707 -9628\\n2980 438\\n1632 -9472\\n-8850 -4346\\n-6440 2428\\n-2841 923\\n6515 -2658\\n-2492 -8716\\n8219 5104\\n', 'No\\n'), ('9 3\\n8163 6185\\n-4731 2757\\n-4982 -4704\\n3128 4684\\n-8483 1132\\n6807 2288\\n4878 2311\\n-6295 6299\\n8882 -5992\\n-195 4733\\n6162 4510\\n-7264 -1020\\n', 'No\\n'), ('9 5\\n-4347 -5222\\n-2891 5618\\n-4621 7404\\n-4548 -6825\\n3846 2340\\n2640 3530\\n-7965 4934\\n-8617 -2950\\n-9240 4483\\n-718 6451\\n-8251 -6379\\n558 3484\\n9861 -6432\\n483 -7331\\n', 'No\\n'), ('9 8\\n-6832 -872\\n1295 -4109\\n-7832 -8123\\n-2373 -6646\\n-1383 -5849\\n3832 -6334\\n-7229 -2263\\n-6951 -9678\\n4709 1326\\n-6386 -1239\\n2721 -8159\\n-4255 -890\\n9880 3567\\n3349 5921\\n2487 -828\\n-783 2422\\n-5497 -8399\\n', 'No\\n'), ('9 9\\n3193 -2855\\n787 -6399\\n3479 9360\\n5217 -9842\\n1061 4755\\n1748 -7142\\n-6209 -2380\\n6740 -4302\\n-5482 5433\\n3353 -5529\\n664 1546\\n8228 -9769\\n-8409 -1650\\n893 9365\\n-9542 8585\\n7245 -9972\\n-475 -6359\\n-3775 2139\\n', 'Yes\\n'), ('9 10\\n-3581 3894\\n7385 3191\\n-8820 6540\\n-577 -5900\\n2781 -5943\\n8322 -7944\\n-1251 -5779\\n-3567 3140\\n8835 -6406\\n-2390 -1126\\n7006 4553\\n-174 -7023\\n-6538 1530\\n3318 2477\\n7864 -9657\\n-2379 -6961\\n4456 9852\\n1462 -5871\\n-9931 6466\\n', 'No\\n'), ('10 1\\n3362 3137\\n-6006 -2168\\n-9207 8006\\n-6284 -114\\n4617 -4997\\n-4360 3540\\n-6423 2328\\n-8768 8468\\n2899 1032\\n-7561 -3623\\n6979 653\\n', 'No\\n'), ('10 2\\n5945 8596\\n-3658 -4459\\n-7598 -7071\\n3567 4132\\n7060 -1835\\n-6443 -4709\\n4895 2211\\n-4780 3546\\n5266 7400\\n2178 -472\\n4922 -9643\\n4163 6030\\n', 'No\\n'), ('10 3\\n3411 6614\\n8392 693\\n-8846 7555\\n-1402 -4181\\n-3055 -3789\\n4033 -5516\\n-1527 4950\\n-792 8922\\n-4925 4065\\n4475 5536\\n-9695 9764\\n6943 -2849\\n7022 1986\\n', 'No\\n'), ('10 5\\n3460 5504\\n529 -6744\\n4075 9961\\n-3961 4311\\n-7871 9977\\n7308 -4275\\n-6928 7573\\n-3114 -327\\n-3046 -5461\\n3953 4398\\n-4106 -3981\\n-8092 -8048\\n7590 9228\\n9433 -4\\n-8808 -6742\\n', 'No\\n'), ('10 8\\n8417 -444\\n-5582 6386\\n863 6992\\n-4047 6751\\n-5658 1788\\n-1204 5862\\n-6192 -2480\\n813 -7056\\n-9098 -1176\\n-1715 -3292\\n6866 -2905\\n-7788 137\\n7609 -774\\n-7702 -6753\\n-6622 -3090\\n3089 -7006\\n-9374 1882\\n-481 -5698\\n', 'No\\n'), ('10 9\\n-9001 -9868\\n4207 1240\\n-7826 1618\\n-6755 3555\\n-3214 -167\\n4155 -4648\\n-2316 259\\n4801 -1679\\n-6730 8048\\n-4535 -9843\\n4809 -5759\\n4695 -8742\\n9321 -5991\\n2401 4133\\n6468 6324\\n1414 -9103\\n-6613 3922\\n5544 -5092\\n-6777 -788\\n', 'No\\n'), ('10 10\\n8530 -3814\\n-9330 -6035\\n3951 -217\\n-9276 8291\\n636 -3118\\n5024 -2403\\n4601 7977\\n-3620 -1428\\n4954 -9632\\n-9852 6553\\n-3457 5430\\n-8866 -7343\\n1020 -5748\\n5043 -3820\\n-2832 1528\\n-5058 -825\\n2406 -3530\\n9152 -7463\\n-8547 7108\\n2492 8953\\n', 'Yes\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Guard Duty (easy)", "tag": "Math", "detailed_tag": "geometry", "rating": 1600.0}
{"task_id": "E2H_CF222D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n', '1 5\\n'), ('6 7\\n4 3 5 6 4 4\\n8 6 0 4 3 4\\n', '1 5\\n'), ('1 100\\n56\\n44\\n', '1 1\\n'), ('5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n', '1 5\\n'), ('5 5\\n2 2 2 2 2\\n3 3 3 3 3\\n', '1 5\\n'), ('4 100\\n98 98 99 100\\n1 1 2 2\\n', '1 4\\n'), ('5 45\\n1 2 3 4 5\\n10 20 30 40 50\\n', '1 2\\n'), ('10 5\\n3 1 1 2 1 3 1 1 2 3\\n2 1 3 2 1 3 3 3 3 1\\n', '1 5\\n'), ('10 0\\n3 3 1 1 1 2 3 0 0 3\\n1 3 0 1 2 0 3 3 0 0\\n', '1 10\\n'), ('10 16\\n8 4 2 5 4 8 3 5 6 9\\n5 3 8 6 2 10 10 8 9 3\\n', '1 4\\n'), ('10 2\\n9 8 2 5 4 7 8 1 0 9\\n4 8 0 4 7 2 10 9 0 0\\n', '1 10\\n'), ('2 50\\n25 24\\n26 26\\n', '1 2\\n'), ('2 50\\n25 25\\n24 26\\n', '1 1\\n'), ('3 3\\n1 50 2\\n2 2 1\\n', '1 3\\n'), ('3 10\\n9 9 0\\n0 0 10\\n', '1 1\\n'), ('4 0\\n0 0 0 0\\n0 0 0 0\\n', '1 4\\n'), ('10 168\\n76 42 26 51 40 79 30 48 58 91\\n50 28 76 62 25 91 99 81 91 31\\n', '1 3\\n'), ('10 26\\n85 77 25 50 45 65 79 9 2 84\\n43 76 0 44 72 23 95 91 3 2\\n', '1 10\\n'), ('10 168884\\n75796 42057 25891 51127 40493 78380 30331 47660 58338 90812\\n50469 28184 75581 61837 25050 90975 98279 81022 90217 31015\\n', '1 3\\n'), ('10 26872\\n84744 76378 25507 49544 44949 65159 78873 9386 2834 83577\\n43277 76228 210 44539 72154 22876 94528 90143 3059 2544\\n', '1 10\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Olympiad", "tag": "Greedy", "detailed_tag": "two pointers", "rating": 1776.403153681436}
{"task_id": "E2H_CF557D", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('4 4\\n1 2\\n1 3\\n4 2\\n4 3\\n', '1 2\\n'), ('3 3\\n1 2\\n2 3\\n3 1\\n', '0 1\\n'), ('3 0\\n', '3 1\\n'), ('6 3\\n1 2\\n4 3\\n6 5\\n', '2 12\\n'), ('100000 0\\n', '3 166661666700000\\n'), ('5 4\\n1 2\\n1 3\\n1 4\\n1 5\\n', '1 6\\n'), ('6 3\\n1 2\\n2 3\\n4 5\\n', '1 1\\n'), ('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n', '0 1\\n'), ('59139 0\\n', '3 34470584559489\\n'), ('9859 0\\n', '3 159667007809\\n'), ('25987 0\\n', '3 2924603876545\\n'), ('9411 0\\n', '3 138872935265\\n'), ('25539 0\\n', '3 2775935665889\\n'), ('59139 1\\n10301 5892\\n', '2 59137\\n'), ('9859 1\\n1721 9478\\n', '2 9857\\n'), ('76259 0\\n', '3 73910302948209\\n'), ('92387 0\\n', '3 131421748719345\\n'), ('6 4\\n1 2\\n2 3\\n3 1\\n4 5\\n', '0 1\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Vitaly and Cycle", "tag": "Math", "detailed_tag": "combinatorics", "rating": 1910.6710167690785}
{"task_id": "E2H_CF1866H", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('2 2\\n', '11\\n'), ('1 3\\n', '8\\n'), ('3 1\\n', '4\\n'), ('1 1\\n', '2\\n'), ('1 200000\\n', '792253081\\n'), ('200000 1\\n', '200001\\n'), ('200000 200000\\n', '175006814\\n'), ('199994 199994\\n', '216612209\\n'), ('199284 199155\\n', '6246848\\n'), ('61 8580\\n', '61357732\\n'), ('55 192363\\n', '663126778\\n'), ('199957 63\\n', '872447007\\n'), ('199935 39\\n', '234026835\\n'), ('4376 30\\n', '261868641\\n'), ('194589 6\\n', '552498520\\n'), ('97 199972\\n', '407848440\\n'), ('39 199952\\n', '215179516\\n'), ('158352 162441\\n', '624563782\\n'), ('129337 121999\\n', '881466777\\n'), ('156805 139279\\n', '15797964\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Happy Sets", "tag": "Others", "detailed_tag": "combinatorics", "rating": 2100.0}
{"task_id": "E2H_CF1129C", "prompt": "# E2H Codeforces I/O task. Candidate is a script using input()/print().\n", "entry_point": "check", "test": "CASES = [('3\\n1\\n1\\n1\\n', '1\\n3\\n7\\n'), ('5\\n1\\n0\\n1\\n0\\n1\\n', '1\\n4\\n10\\n22\\n43\\n'), ('9\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n0\\n1\\n', '1\\n3\\n10\\n24\\n51\\n109\\n213\\n421\\n833\\n'), ('1\\n1\\n', '1\\n'), ('1\\n0\\n', '1\\n'), ('3\\n0\\n0\\n0\\n', '1\\n3\\n7\\n'), ('15\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n', '1\\n4\\n10\\n24\\n51\\n103\\n215\\n431\\n855\\n1626\\n3168\\n5912\\n10969\\n20336\\n39070\\n'), ('20\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n', '1\\n3\\n10\\n24\\n53\\n105\\n209\\n409\\n794\\n1483\\n2861\\n5513\\n10617\\n19751\\n38019\\n73177\\n140841\\n261931\\n504111\\n970203\\n'), ('30\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n', '1\\n4\\n10\\n22\\n43\\n99\\n207\\n415\\n815\\n1587\\n3075\\n6043\\n11350\\n21964\\n42393\\n81925\\n158005\\n304829\\n587813\\n1133252\\n2184596\\n4064376\\n7823948\\n14514657\\n26844724\\n49625092\\n95185828\\n182547725\\n350580848\\n674317028\\n'), ('50\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n', '1\\n3\\n10\\n24\\n51\\n109\\n221\\n437\\n853\\n1682\\n3168\\n6140\\n11860\\n22892\\n44135\\n82151\\n158191\\n304543\\n564961\\n1085797\\n2089447\\n4020703\\n7736863\\n14388308\\n26687491\\n51285871\\n98551264\\n189365676\\n364343151\\n677400510\\n303515263\\n417664883\\n645964151\\n927585198\\n551655236\\n799795319\\n181925830\\n436266469\\n320877702\\n90100168\\n380405024\\n578884218\\n721503333\\n122130227\\n154161765\\n927919646\\n134336201\\n547169339\\n972208491\\n790255221\\n'), ('2\\n1\\n0\\n', '1\\n4\\n'), ('4\\n1\\n1\\n1\\n1\\n', '1\\n3\\n7\\n14\\n'), ('5\\n1\\n1\\n1\\n1\\n1\\n', '1\\n3\\n7\\n14\\n27\\n'), ('2\\n0\\n0\\n', '1\\n3\\n'), ('4\\n0\\n0\\n0\\n0\\n', '1\\n3\\n7\\n15\\n'), ('5\\n0\\n0\\n0\\n0\\n0\\n', '1\\n3\\n7\\n15\\n30\\n'), ('2\\n1\\n1\\n', '1\\n3\\n')]\n\n# --- Auto-generated HumanEval-style IO test harness ---\ndef _run_script_once(src: str, stdin_text: str) -> str:\n    import sys, io\n    # Create globals that mimic the __main__ module environment\n    g = {\"__name__\": \"__main__\", \"__builtins__\": __builtins__}\n    old_stdin, old_stdout = sys.stdin, sys.stdout\n    \n    # Use StringIO for both input patterns: line-by-line input() and bulk stdin.read()\n    stdin_io = io.StringIO(stdin_text)\n    stdout_io = io.StringIO()\n    sys.stdin, sys.stdout = stdin_io, stdout_io\n    \n    try:\n        exec(src, g)\n        return sys.stdout.getvalue()\n    finally:\n        sys.stdin, sys.stdout = old_stdin, old_stdout\n\ndef _norm(s: str) -> str:\n    return \"\\n\".join(line.rstrip() for line in s.strip().splitlines())\n\ndef check(candidate_src: str):\n    for (inp, expected) in CASES:\n        out = _run_script_once(candidate_src, inp)\n        assert _norm(out) == _norm(expected), f\"Expected {repr(_norm(expected))}, got {repr(_norm(out))}\"\n", "name": "Morse Code", "tag": "DP", "detailed_tag": "string suffix structures", "rating": 2316.97470156756}
